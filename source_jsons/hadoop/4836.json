{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SnapshotDiffInfo.java",
  "functionName": "generateReport",
  "functionId": "generateReport___dirDiff-ChildrenDiff__parentPath-byte[][]__fromEarlier-boolean__renameMap-Map__Long,RenameEntry__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
  "functionStartLine": 268,
  "functionEndLine": 294,
  "numCommitsSeen": 141,
  "timeTaken": 6333,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "16c8dbde574f49827fde5ee9add1861ee65d4645",
    "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "eb3c1607b031bee251f9a02631c7518771707591",
    "43bdc22e9207a74678665de5f109dd7e56fe979a",
    "cc2f96f655d0fd4121125fc801056571f4a20a2a",
    "9701555899315c94584b24d8717c1d7540a4a491",
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "16c8dbde574f49827fde5ee9add1861ee65d4645": "Ybodychange",
    "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c": "Ymultichange(Yparameterchange,Ybodychange)",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ymultichange(Yfilerename,Yparameterchange)",
    "eb3c1607b031bee251f9a02631c7518771707591": "Ybodychange",
    "43bdc22e9207a74678665de5f109dd7e56fe979a": "Ybodychange",
    "cc2f96f655d0fd4121125fc801056571f4a20a2a": "Ymultichange(Yparameterchange,Ybodychange)",
    "9701555899315c94584b24d8717c1d7540a4a491": "Ybodychange",
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/10/17 10:54 AM",
      "commitNameOld": "075dd45a24398dcdcddd60da995f0dc152eee321",
      "commitAuthorOld": "Manoj Govindassamy",
      "daysBetweenCommits": 135.25,
      "commitsBetweenForRepo": 904,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n       byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n     List\u003cDiffReportEntry\u003e list \u003d new ChunkedArrayList\u003c\u003e();\n-    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n-    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n     byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n     System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-    for (INode cnode : created) {\n+    for (INode cnode : dirDiff.getCreatedUnmodifiable()) {\n       RenameEntry entry \u003d renameMap.get(cnode.getId());\n       if (entry \u003d\u003d null || !entry.isRename()) {\n         fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n         list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n     }\n-    for (INode dnode : deleted) {\n+    for (INode dnode : dirDiff.getDeletedUnmodifiable()) {\n       RenameEntry entry \u003d renameMap.get(dnode.getId());\n       if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n         list.add(new DiffReportEntry(DiffType.RENAME,\n             fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n             fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n       } else {\n         fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n         list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n    List\u003cDiffReportEntry\u003e list \u003d new ChunkedArrayList\u003c\u003e();\n    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n    for (INode cnode : dirDiff.getCreatedUnmodifiable()) {\n      RenameEntry entry \u003d renameMap.get(cnode.getId());\n      if (entry \u003d\u003d null || !entry.isRename()) {\n        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n    }\n    for (INode dnode : dirDiff.getDeletedUnmodifiable()) {\n      RenameEntry entry \u003d renameMap.get(dnode.getId());\n      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n        list.add(new DiffReportEntry(DiffType.RENAME,\n            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n      } else {\n        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
      "extendedDetails": {}
    },
    "16c8dbde574f49827fde5ee9add1861ee65d4645": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11881. NameNode consumes a lot of memory for snapshot diff report generation. Contributed by Manoj Govindassamy.\n",
      "commitDate": "29/06/17 6:38 AM",
      "commitName": "16c8dbde574f49827fde5ee9add1861ee65d4645",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "17/02/15 2:47 PM",
      "commitNameOld": "6dc8812a95bf369ec1f2e3d8a9473033172736cd",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 862.62,
      "commitsBetweenForRepo": 6067,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n       byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n-    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+    List\u003cDiffReportEntry\u003e list \u003d new ChunkedArrayList\u003c\u003e();\n     List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n     List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n     byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n     System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n     for (INode cnode : created) {\n       RenameEntry entry \u003d renameMap.get(cnode.getId());\n       if (entry \u003d\u003d null || !entry.isRename()) {\n         fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n         list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n     }\n     for (INode dnode : deleted) {\n       RenameEntry entry \u003d renameMap.get(dnode.getId());\n       if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n         list.add(new DiffReportEntry(DiffType.RENAME,\n             fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n             fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n       } else {\n         fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n         list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n    List\u003cDiffReportEntry\u003e list \u003d new ChunkedArrayList\u003c\u003e();\n    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n    for (INode cnode : created) {\n      RenameEntry entry \u003d renameMap.get(cnode.getId());\n      if (entry \u003d\u003d null || !entry.isRename()) {\n        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n    }\n    for (INode dnode : deleted) {\n      RenameEntry entry \u003d renameMap.get(dnode.getId());\n      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n        list.add(new DiffReportEntry(DiffType.RENAME,\n            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n      } else {\n        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
      "extendedDetails": {}
    },
    "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-6593. Move SnapshotDiffInfo out of INodeDirectorySnapshottable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 12:59 PM",
      "commitName": "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-6593. Move SnapshotDiffInfo out of INodeDirectorySnapshottable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605169 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 12:59 PM",
          "commitName": "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/06/14 12:34 PM",
          "commitNameOld": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n-      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n-      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n-      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n-      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-      for (INode cnode : created) {\n-        RenameEntry entry \u003d renameMap.get(cnode.getId());\n-        if (entry \u003d\u003d null || !entry.isRename()) {\n-          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-              : DiffType.DELETE, fullPath));\n-        }\n+  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n+      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n+    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n+    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n+    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n+    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n+    for (INode cnode : created) {\n+      RenameEntry entry \u003d renameMap.get(cnode.getId());\n+      if (entry \u003d\u003d null || !entry.isRename()) {\n+        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+            : DiffType.DELETE, fullPath));\n       }\n-      for (INode dnode : deleted) {\n-        RenameEntry entry \u003d renameMap.get(dnode.getId());\n-        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n-          list.add(new DiffReportEntry(DiffType.RENAME,\n-              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n-              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n-        } else {\n-          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, fullPath));\n-        }\n+    }\n+    for (INode dnode : deleted) {\n+      RenameEntry entry \u003d renameMap.get(dnode.getId());\n+      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n+        list.add(new DiffReportEntry(DiffType.RENAME,\n+            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n+            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n+      } else {\n+        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+            : DiffType.CREATE, fullPath));\n       }\n-      return list;\n-    }\n\\ No newline at end of file\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n    for (INode cnode : created) {\n      RenameEntry entry \u003d renameMap.get(cnode.getId());\n      if (entry \u003d\u003d null || !entry.isRename()) {\n        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n    }\n    for (INode dnode : deleted) {\n      RenameEntry entry \u003d renameMap.get(dnode.getId());\n      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n        list.add(new DiffReportEntry(DiffType.RENAME,\n            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n      } else {\n        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
            "oldMethodName": "generateReport",
            "newMethodName": "generateReport"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6593. Move SnapshotDiffInfo out of INodeDirectorySnapshottable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605169 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 12:59 PM",
          "commitName": "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/06/14 12:34 PM",
          "commitNameOld": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n-      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n-      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n-      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n-      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-      for (INode cnode : created) {\n-        RenameEntry entry \u003d renameMap.get(cnode.getId());\n-        if (entry \u003d\u003d null || !entry.isRename()) {\n-          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-              : DiffType.DELETE, fullPath));\n-        }\n+  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n+      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n+    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n+    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n+    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n+    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n+    for (INode cnode : created) {\n+      RenameEntry entry \u003d renameMap.get(cnode.getId());\n+      if (entry \u003d\u003d null || !entry.isRename()) {\n+        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+            : DiffType.DELETE, fullPath));\n       }\n-      for (INode dnode : deleted) {\n-        RenameEntry entry \u003d renameMap.get(dnode.getId());\n-        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n-          list.add(new DiffReportEntry(DiffType.RENAME,\n-              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n-              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n-        } else {\n-          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, fullPath));\n-        }\n+    }\n+    for (INode dnode : deleted) {\n+      RenameEntry entry \u003d renameMap.get(dnode.getId());\n+      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n+        list.add(new DiffReportEntry(DiffType.RENAME,\n+            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n+            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n+      } else {\n+        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+            : DiffType.CREATE, fullPath));\n       }\n-      return list;\n-    }\n\\ No newline at end of file\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n    for (INode cnode : created) {\n      RenameEntry entry \u003d renameMap.get(cnode.getId());\n      if (entry \u003d\u003d null || !entry.isRename()) {\n        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n    }\n    for (INode dnode : deleted) {\n      RenameEntry entry \u003d renameMap.get(dnode.getId());\n      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n        list.add(new DiffReportEntry(DiffType.RENAME,\n            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n      } else {\n        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6593. Move SnapshotDiffInfo out of INodeDirectorySnapshottable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605169 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 12:59 PM",
          "commitName": "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/06/14 12:34 PM",
          "commitNameOld": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n-      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n-      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n-      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n-      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-      for (INode cnode : created) {\n-        RenameEntry entry \u003d renameMap.get(cnode.getId());\n-        if (entry \u003d\u003d null || !entry.isRename()) {\n-          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-              : DiffType.DELETE, fullPath));\n-        }\n+  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n+      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n+    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n+    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n+    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n+    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n+    for (INode cnode : created) {\n+      RenameEntry entry \u003d renameMap.get(cnode.getId());\n+      if (entry \u003d\u003d null || !entry.isRename()) {\n+        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+            : DiffType.DELETE, fullPath));\n       }\n-      for (INode dnode : deleted) {\n-        RenameEntry entry \u003d renameMap.get(dnode.getId());\n-        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n-          list.add(new DiffReportEntry(DiffType.RENAME,\n-              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n-              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n-        } else {\n-          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, fullPath));\n-        }\n+    }\n+    for (INode dnode : deleted) {\n+      RenameEntry entry \u003d renameMap.get(dnode.getId());\n+      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n+        list.add(new DiffReportEntry(DiffType.RENAME,\n+            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n+            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n+      } else {\n+        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+            : DiffType.CREATE, fullPath));\n       }\n-      return list;\n-    }\n\\ No newline at end of file\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n    for (INode cnode : created) {\n      RenameEntry entry \u003d renameMap.get(cnode.getId());\n      if (entry \u003d\u003d null || !entry.isRename()) {\n        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n    }\n    for (INode dnode : deleted) {\n      RenameEntry entry \u003d renameMap.get(dnode.getId());\n      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n        list.add(new DiffReportEntry(DiffType.RENAME,\n            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n      } else {\n        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6593. Move SnapshotDiffInfo out of INodeDirectorySnapshottable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605169 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 12:59 PM",
          "commitName": "bdf3de9f6b377b6bfeaa95faadd12e7b29ece5dc",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/06/14 12:34 PM",
          "commitNameOld": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n-      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n-      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n-      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n-      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-      for (INode cnode : created) {\n-        RenameEntry entry \u003d renameMap.get(cnode.getId());\n-        if (entry \u003d\u003d null || !entry.isRename()) {\n-          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-              : DiffType.DELETE, fullPath));\n-        }\n+  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n+      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n+    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n+    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n+    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n+    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n+    for (INode cnode : created) {\n+      RenameEntry entry \u003d renameMap.get(cnode.getId());\n+      if (entry \u003d\u003d null || !entry.isRename()) {\n+        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+            : DiffType.DELETE, fullPath));\n       }\n-      for (INode dnode : deleted) {\n-        RenameEntry entry \u003d renameMap.get(dnode.getId());\n-        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n-          list.add(new DiffReportEntry(DiffType.RENAME,\n-              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n-              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n-        } else {\n-          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n-          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, fullPath));\n-        }\n+    }\n+    for (INode dnode : deleted) {\n+      RenameEntry entry \u003d renameMap.get(dnode.getId());\n+      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n+        list.add(new DiffReportEntry(DiffType.RENAME,\n+            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n+            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n+      } else {\n+        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n+        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+            : DiffType.CREATE, fullPath));\n       }\n-      return list;\n-    }\n\\ No newline at end of file\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cDiffReportEntry\u003e generateReport(ChildrenDiff dirDiff,\n      byte[][] parentPath, boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n    List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n    List\u003cINode\u003e created \u003d dirDiff.getList(ListType.CREATED);\n    List\u003cINode\u003e deleted \u003d dirDiff.getList(ListType.DELETED);\n    byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n    System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n    for (INode cnode : created) {\n      RenameEntry entry \u003d renameMap.get(cnode.getId());\n      if (entry \u003d\u003d null || !entry.isRename()) {\n        fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n    }\n    for (INode dnode : deleted) {\n      RenameEntry entry \u003d renameMap.get(dnode.getId());\n      if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n        list.add(new DiffReportEntry(DiffType.RENAME,\n            fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n            fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n      } else {\n        fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n        list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/SnapshotDiffInfo.java",
          "extendedDetails": {
            "oldValue": "[parentPath-byte[][], fromEarlier-boolean, renameMap-Map\u003cLong,RenameEntry\u003e]",
            "newValue": "[dirDiff-ChildrenDiff, parentPath-byte[][], fromEarlier-boolean, renameMap-Map\u003cLong,RenameEntry\u003e]"
          }
        }
      ]
    },
    "8a83bb7ad6177f473c20c4cc9c0f46746224332c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/14 3:59 PM",
      "commitName": "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/14 3:59 PM",
          "commitName": "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "13/05/14 6:15 PM",
          "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 38.91,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,29 @@\n     public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        boolean fromEarlier) {\n-      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      int c \u003d 0, d \u003d 0;\n+        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n+      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n-        INode cnode \u003d created.get(c);\n-        INode dnode \u003d deleted.get(d);\n-        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n+      for (INode cnode : created) {\n+        RenameEntry entry \u003d renameMap.get(cnode.getId());\n+        if (entry \u003d\u003d null || !entry.isRename()) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          // must be the case: delete first and then create an inode with the\n-          // same name\n-          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n-          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n-          c++;\n-          d++;\n-        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n-          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n-          c++;\n-        } else {\n-          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n-          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, fullPath));\n-          d++;\n         }\n       }\n-      for (; d \u003c deleted.size(); d++) {\n-        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n-        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-            : DiffType.CREATE, fullPath));\n+      for (INode dnode : deleted) {\n+        RenameEntry entry \u003d renameMap.get(dnode.getId());\n+        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n+          list.add(new DiffReportEntry(DiffType.RENAME,\n+              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n+              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n+        } else {\n+          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n+          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+              : DiffType.CREATE, fullPath));\n+        }\n       }\n-      for (; c \u003c created.size(); c++) {\n-        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n-        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-            : DiffType.DELETE, fullPath));\n-      }\n-      dList.addAll(cList);\n-      return dList;\n+      return list;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (INode cnode : created) {\n        RenameEntry entry \u003d renameMap.get(cnode.getId());\n        if (entry \u003d\u003d null || !entry.isRename()) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n        }\n      }\n      for (INode dnode : deleted) {\n        RenameEntry entry \u003d renameMap.get(dnode.getId());\n        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n          list.add(new DiffReportEntry(DiffType.RENAME,\n              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n        }\n      }\n      return list;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[parentPath-byte[][], fromEarlier-boolean]",
            "newValue": "[parentPath-byte[][], fromEarlier-boolean, renameMap-Map\u003cLong,RenameEntry\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4667. Capture renamed files/directories in snapshot diff report. Contributed by Jing Zhao and Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604488 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/06/14 3:59 PM",
          "commitName": "8a83bb7ad6177f473c20c4cc9c0f46746224332c",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "13/05/14 6:15 PM",
          "commitNameOld": "97f58955a6045b373ab73653bf26ab5922b00cf3",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 38.91,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,29 @@\n     public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        boolean fromEarlier) {\n-      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n-      int c \u003d 0, d \u003d 0;\n+        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n+      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n-      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n-        INode cnode \u003d created.get(c);\n-        INode dnode \u003d deleted.get(d);\n-        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n+      for (INode cnode : created) {\n+        RenameEntry entry \u003d renameMap.get(cnode.getId());\n+        if (entry \u003d\u003d null || !entry.isRename()) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          // must be the case: delete first and then create an inode with the\n-          // same name\n-          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n-          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n-          c++;\n-          d++;\n-        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n-          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n-          c++;\n-        } else {\n-          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n-          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, fullPath));\n-          d++;\n         }\n       }\n-      for (; d \u003c deleted.size(); d++) {\n-        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n-        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-            : DiffType.CREATE, fullPath));\n+      for (INode dnode : deleted) {\n+        RenameEntry entry \u003d renameMap.get(dnode.getId());\n+        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n+          list.add(new DiffReportEntry(DiffType.RENAME,\n+              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n+              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n+        } else {\n+          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n+          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+              : DiffType.CREATE, fullPath));\n+        }\n       }\n-      for (; c \u003c created.size(); c++) {\n-        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n-        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-            : DiffType.DELETE, fullPath));\n-      }\n-      dList.addAll(cList);\n-      return dList;\n+      return list;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        boolean fromEarlier, Map\u003cLong, RenameEntry\u003e renameMap) {\n      List\u003cDiffReportEntry\u003e list \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (INode cnode : created) {\n        RenameEntry entry \u003d renameMap.get(cnode.getId());\n        if (entry \u003d\u003d null || !entry.isRename()) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          list.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n        }\n      }\n      for (INode dnode : deleted) {\n        RenameEntry entry \u003d renameMap.get(dnode.getId());\n        if (entry !\u003d null \u0026\u0026 entry.isRename()) {\n          list.add(new DiffReportEntry(DiffType.RENAME,\n              fromEarlier ? entry.getSourcePath() : entry.getTargetPath(),\n              fromEarlier ? entry.getTargetPath() : entry.getSourcePath()));\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          list.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n        }\n      }\n      return list;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ymultichange(Yfilerename,Yparameterchange)",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n     public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n+        boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           // must be the case: delete first and then create an inode with the\n           // same name\n           cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n           dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          // must be the case: delete first and then create an inode with the\n          // same name\n          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n     public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n-        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n+        boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           // must be the case: delete first and then create an inode with the\n           // same name\n           cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n           dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          // must be the case: delete first and then create an inode with the\n          // same name\n          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[parentPath-byte[][], parent-INodeDirectoryWithSnapshot, fromEarlier-boolean]",
            "newValue": "[parentPath-byte[][], fromEarlier-boolean]"
          }
        }
      ]
    },
    "eb3c1607b031bee251f9a02631c7518771707591": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5533. Symlink delete/create should be treated as DELETE/CREATE in snapshot diff report. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545357 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 10:05 AM",
      "commitName": "eb3c1607b031bee251f9a02631c7518771707591",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/11/13 5:39 PM",
      "commitNameOld": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.69,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,45 @@\n     public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n         INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n-          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n-            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n-          } else {\n-            // must be the case: delete first and then create an inode with the\n-            // same name\n-            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n-            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n-          }\n+          // must be the case: delete first and then create an inode with the\n+          // same name\n+          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n+          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          // must be the case: delete first and then create an inode with the\n          // same name\n          cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n          dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "43bdc22e9207a74678665de5f109dd7e56fe979a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4726. Fix test failures after merging the INodeId-INode mapping from trunk.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 3:13 PM",
      "commitName": "43bdc22e9207a74678665de5f109dd7e56fe979a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/04/13 4:16 PM",
      "commitNameOld": "38bd7061c1a8408b74ed619b25f948cd3cd85d7a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.96,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n         INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n-        if (cnode.equals(dnode)) {\n+        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n             dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n           } else {\n             // must be the case: delete first and then create an inode with the\n             // same name\n             cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n             dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           }\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.compareTo(dnode.getLocalNameBytes()) \u003d\u003d 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n          } else {\n            // must be the case: delete first and then create an inode with the\n            // same name\n            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          }\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "cc2f96f655d0fd4121125fc801056571f4a20a2a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 3:21 AM",
      "commitName": "cc2f96f655d0fd4121125fc801056571f4a20a2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/13 3:21 AM",
          "commitName": "cc2f96f655d0fd4121125fc801056571f4a20a2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/03/13 12:30 PM",
          "commitNameOld": "ca7c588185cbc982c7929e743535bf4fcab41beb",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.62,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,49 @@\n-    public List\u003cDiffReportEntry\u003e generateReport(\n-        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n-        boolean fromEarlier) {\n+    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n+        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n-      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.equals(dnode)) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n             dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n           } else {\n             // must be the case: delete first and then create an inode with the\n             // same name\n             cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n             dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           }\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.equals(dnode)) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n          } else {\n            // must be the case: delete first and then create an inode with the\n            // same name\n            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          }\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[root-INodeDirectorySnapshottable, parent-INodeDirectoryWithSnapshot, fromEarlier-boolean]",
            "newValue": "[parentPath-byte[][], parent-INodeDirectoryWithSnapshot, fromEarlier-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4612. Not to use INode.getParent() when generating snapshot diff report.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1460590 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/03/13 3:21 AM",
          "commitName": "cc2f96f655d0fd4121125fc801056571f4a20a2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/03/13 12:30 PM",
          "commitNameOld": "ca7c588185cbc982c7929e743535bf4fcab41beb",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.62,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,49 @@\n-    public List\u003cDiffReportEntry\u003e generateReport(\n-        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n-        boolean fromEarlier) {\n+    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n+        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n       List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n-      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.equals(dnode)) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n             dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n           } else {\n             // must be the case: delete first and then create an inode with the\n             // same name\n             cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n             dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           }\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(byte[][] parentPath,\n        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.equals(dnode)) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n          } else {\n            // must be the case: delete first and then create an inode with the\n            // same name\n            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          }\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "9701555899315c94584b24d8717c1d7540a4a491": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4534. Add INodeReference in order to support rename with snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 11:27 PM",
      "commitName": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/03/13 7:41 PM",
      "commitNameOld": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     public List\u003cDiffReportEntry\u003e generateReport(\n         INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n         boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n-      List\u003cINode\u003e created \u003d getCreatedList();\n-      List\u003cINode\u003e deleted \u003d getDeletedList();\n+      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n+      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n       byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n       byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n       System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.equals(dnode)) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n             dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n           } else {\n             // must be the case: delete first and then create an inode with the\n             // same name\n             cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n             dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n           }\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n           fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n               : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n           fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n               : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n         fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n             : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n         fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n             : DiffType.DELETE, fullPath));\n       }\n       dList.addAll(cList);\n       return dList;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(\n        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n        boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getList(ListType.CREATED);\n      List\u003cINode\u003e deleted \u003d getList(ListType.DELETED);\n      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.equals(dnode)) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n          } else {\n            // must be the case: delete first and then create an inode with the\n            // same name\n            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          }\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/13 3:07 PM",
      "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/13 3:07 PM",
          "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 2:00 PM",
          "commitNameOld": "d42d0860cb670c8284bb298029cd6f8f59db9510",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,51 @@\n     public List\u003cDiffReportEntry\u003e generateReport(\n-        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n-      List\u003cDiffReportEntry\u003e mList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n+        boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getCreatedList();\n       List\u003cINode\u003e deleted \u003d getDeletedList();\n+      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n+      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n+      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.equals(dnode)) {\n-          mList.add(new DiffReportEntry(DiffType.MODIFY, parent\n-              .getFullPathName() + Path.SEPARATOR + cnode.getLocalName()));\n+          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n+          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n+            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n+          } else {\n+            // must be the case: delete first and then create an inode with the\n+            // same name\n+            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n+            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n+          }\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n+          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-              : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n-              + cnode.getLocalName()));\n+              : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n+          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n-              + dnode.getLocalName()));\n+              : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n+        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-            : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n-            + deleted.get(d).getLocalName()));\n+            : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n+        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-            : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n-            + created.get(c).getLocalName()));\n+            : DiffType.DELETE, fullPath));\n       }\n-      cList.addAll(dList);\n-      cList.addAll(mList);\n-      return cList;\n+      dList.addAll(cList);\n+      return dList;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(\n        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n        boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getCreatedList();\n      List\u003cINode\u003e deleted \u003d getDeletedList();\n      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.equals(dnode)) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n          } else {\n            // must be the case: delete first and then create an inode with the\n            // same name\n            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          }\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[parent-INodeDirectoryWithSnapshot, fromEarlier-boolean]",
            "newValue": "[root-INodeDirectorySnapshottable, parent-INodeDirectoryWithSnapshot, fromEarlier-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4487. Fix snapshot diff report for HDFS-4446.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1446385 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/02/13 3:07 PM",
          "commitName": "d9e2514d21c2ae356ee7fe8d4a857748b5defa4c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "14/02/13 2:00 PM",
          "commitNameOld": "d42d0860cb670c8284bb298029cd6f8f59db9510",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,51 @@\n     public List\u003cDiffReportEntry\u003e generateReport(\n-        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n-      List\u003cDiffReportEntry\u003e mList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n+        boolean fromEarlier) {\n       List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n       int c \u003d 0, d \u003d 0;\n       List\u003cINode\u003e created \u003d getCreatedList();\n       List\u003cINode\u003e deleted \u003d getDeletedList();\n+      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n+      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n+      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n       for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n         INode cnode \u003d created.get(c);\n         INode dnode \u003d deleted.get(d);\n         if (cnode.equals(dnode)) {\n-          mList.add(new DiffReportEntry(DiffType.MODIFY, parent\n-              .getFullPathName() + Path.SEPARATOR + cnode.getLocalName()));\n+          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n+          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n+            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n+          } else {\n+            // must be the case: delete first and then create an inode with the\n+            // same name\n+            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n+            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n+          }\n           c++;\n           d++;\n         } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n+          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n           cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-              : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n-              + cnode.getLocalName()));\n+              : DiffType.DELETE, fullPath));\n           c++;\n         } else {\n+          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n           dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-              : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n-              + dnode.getLocalName()));\n+              : DiffType.CREATE, fullPath));\n           d++;\n         }\n       }\n       for (; d \u003c deleted.size(); d++) {\n+        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n         dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n-            : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n-            + deleted.get(d).getLocalName()));\n+            : DiffType.CREATE, fullPath));\n       }\n       for (; c \u003c created.size(); c++) {\n+        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n         cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n-            : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n-            + created.get(c).getLocalName()));\n+            : DiffType.DELETE, fullPath));\n       }\n-      cList.addAll(dList);\n-      cList.addAll(mList);\n-      return cList;\n+      dList.addAll(cList);\n+      return dList;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(\n        INodeDirectorySnapshottable root, INodeDirectoryWithSnapshot parent,\n        boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getCreatedList();\n      List\u003cINode\u003e deleted \u003d getDeletedList();\n      byte[][] parentPath \u003d parent.getRelativePathNameBytes(root);\n      byte[][] fullPath \u003d new byte[parentPath.length + 1][];\n      System.arraycopy(parentPath, 0, fullPath, 0, parentPath.length);\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.equals(dnode)) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          if (cnode.isSymlink() \u0026\u0026 dnode.isSymlink()) {\n            dList.add(new DiffReportEntry(DiffType.MODIFY, fullPath));\n          } else {\n            // must be the case: delete first and then create an inode with the\n            // same name\n            cList.add(new DiffReportEntry(DiffType.CREATE, fullPath));\n            dList.add(new DiffReportEntry(DiffType.DELETE, fullPath));\n          }\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          fullPath[fullPath.length - 1] \u003d cnode.getLocalNameBytes();\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, fullPath));\n          c++;\n        } else {\n          fullPath[fullPath.length - 1] \u003d dnode.getLocalNameBytes();\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, fullPath));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        fullPath[fullPath.length - 1] \u003d deleted.get(d).getLocalNameBytes();\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, fullPath));\n      }\n      for (; c \u003c created.size(); c++) {\n        fullPath[fullPath.length - 1] \u003d created.get(c).getLocalNameBytes();\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, fullPath));\n      }\n      dList.addAll(cList);\n      return dList;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "24d96cbcdb80a2de4ada7aa70056a481da24fcc5": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4414. Add support for getting snapshot diff from DistributedFileSystem. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1441808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/13 12:39 PM",
      "commitName": "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,42 @@\n+    public List\u003cDiffReportEntry\u003e generateReport(\n+        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n+      List\u003cDiffReportEntry\u003e mList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n+      int c \u003d 0, d \u003d 0;\n+      List\u003cINode\u003e created \u003d getCreatedList();\n+      List\u003cINode\u003e deleted \u003d getDeletedList();\n+      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n+        INode cnode \u003d created.get(c);\n+        INode dnode \u003d deleted.get(d);\n+        if (cnode.equals(dnode)) {\n+          mList.add(new DiffReportEntry(DiffType.MODIFY, parent\n+              .getFullPathName() + Path.SEPARATOR + cnode.getLocalName()));\n+          c++;\n+          d++;\n+        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n+          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+              : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n+              + cnode.getLocalName()));\n+          c++;\n+        } else {\n+          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+              : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n+              + dnode.getLocalName()));\n+          d++;\n+        }\n+      }\n+      for (; d \u003c deleted.size(); d++) {\n+        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n+            : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n+            + deleted.get(d).getLocalName()));\n+      }\n+      for (; c \u003c created.size(); c++) {\n+        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n+            : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n+            + created.get(c).getLocalName()));\n+      }\n+      cList.addAll(dList);\n+      cList.addAll(mList);\n+      return cList;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cDiffReportEntry\u003e generateReport(\n        INodeDirectoryWithSnapshot parent, boolean fromEarlier) {\n      List\u003cDiffReportEntry\u003e mList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e cList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      List\u003cDiffReportEntry\u003e dList \u003d new ArrayList\u003cDiffReportEntry\u003e();\n      int c \u003d 0, d \u003d 0;\n      List\u003cINode\u003e created \u003d getCreatedList();\n      List\u003cINode\u003e deleted \u003d getDeletedList();\n      for (; c \u003c created.size() \u0026\u0026 d \u003c deleted.size(); ) {\n        INode cnode \u003d created.get(c);\n        INode dnode \u003d deleted.get(d);\n        if (cnode.equals(dnode)) {\n          mList.add(new DiffReportEntry(DiffType.MODIFY, parent\n              .getFullPathName() + Path.SEPARATOR + cnode.getLocalName()));\n          c++;\n          d++;\n        } else if (cnode.compareTo(dnode.getLocalNameBytes()) \u003c 0) {\n          cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n              : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n              + cnode.getLocalName()));\n          c++;\n        } else {\n          dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n              : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n              + dnode.getLocalName()));\n          d++;\n        }\n      }\n      for (; d \u003c deleted.size(); d++) {\n        dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE\n            : DiffType.CREATE, parent.getFullPathName() + Path.SEPARATOR\n            + deleted.get(d).getLocalName()));\n      }\n      for (; c \u003c created.size(); c++) {\n        cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE\n            : DiffType.DELETE, parent.getFullPathName() + Path.SEPARATOR\n            + created.get(c).getLocalName()));\n      }\n      cList.addAll(dList);\n      cList.addAll(mList);\n      return cList;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}