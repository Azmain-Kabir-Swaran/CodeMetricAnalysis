{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerProviderService.java",
  "functionName": "buildContainerLaunchCommand",
  "functionId": "buildContainerLaunchCommand___launcher-AbstractLauncher__service-Service__instance-ComponentInstance__fileSystem-SliderFileSystem__yarnConf-Configuration__container-Container__compLaunchContext-ContainerLaunchService.ComponentLaunchContext__tokensForSubstitution-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
  "functionStartLine": 78,
  "functionEndLine": 108,
  "numCommitsSeen": 8,
  "timeTaken": 1437,
  "changeHistory": [
    "fa7a0b269a8613627819c41ab0e9c02a55e278b3",
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
    "31998643a51f1e08f723f18dc5476ac1512d5b81",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0"
  ],
  "changeHistoryShort": {
    "fa7a0b269a8613627819c41ab0e9c02a55e278b3": "Ybodychange",
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": "Ybodychange",
    "31998643a51f1e08f723f18dc5476ac1512d5b81": "Ybodychange",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fa7a0b269a8613627819c41ab0e9c02a55e278b3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8805. Automatically convert the launch command to the exec form when using entrypoint support\n",
      "commitDate": "11/03/19 10:55 AM",
      "commitName": "fa7a0b269a8613627819c41ab0e9c02a55e278b3",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "14/08/18 8:36 AM",
      "commitNameOld": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 209.1,
      "commitsBetweenForRepo": 1653,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   public void buildContainerLaunchCommand(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution)\n           throws IOException, SliderException {\n     boolean useEntryPoint \u003d checkUseEntryPoint(compLaunchContext);\n     if (useEntryPoint) {\n       String launchCommand \u003d compLaunchContext.getLaunchCommand();\n       if (!StringUtils.isEmpty(launchCommand)) {\n+        if(launchCommand.contains(\" \")) {\n+          // convert space delimiter command to exec format\n+          launchCommand \u003d ProviderUtils\n+              .replaceSpacesWithDelimiter(launchCommand, \",\");\n+        }\n         launcher.addCommand(launchCommand);\n       }\n     } else {\n       // substitute launch command\n       String launchCommand \u003d compLaunchContext.getLaunchCommand();\n       // docker container may have empty commands\n       if (!StringUtils.isEmpty(launchCommand)) {\n         launchCommand \u003d ProviderUtils\n             .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n         CommandLineBuilder operation \u003d new CommandLineBuilder();\n         operation.add(launchCommand);\n         operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n         launcher.addCommand(operation.build());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchCommand(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution)\n          throws IOException, SliderException {\n    boolean useEntryPoint \u003d checkUseEntryPoint(compLaunchContext);\n    if (useEntryPoint) {\n      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n      if (!StringUtils.isEmpty(launchCommand)) {\n        if(launchCommand.contains(\" \")) {\n          // convert space delimiter command to exec format\n          launchCommand \u003d ProviderUtils\n              .replaceSpacesWithDelimiter(launchCommand, \",\");\n        }\n        launcher.addCommand(launchCommand);\n      }\n    } else {\n      // substitute launch command\n      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n      // docker container may have empty commands\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launchCommand \u003d ProviderUtils\n            .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n        CommandLineBuilder operation \u003d new CommandLineBuilder();\n        operation.add(launchCommand);\n        operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n        launcher.addCommand(operation.build());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
      "extendedDetails": {}
    },
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8160.  Support upgrade of service that use docker containers.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/08/18 8:36 AM",
      "commitName": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 63.0,
      "commitsBetweenForRepo": 452,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   public void buildContainerLaunchCommand(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution)\n           throws IOException, SliderException {\n-    Component component \u003d instance.getComponent().getComponentSpec();\n-    boolean useEntryPoint \u003d checkUseEntryPoint(component);\n+    boolean useEntryPoint \u003d checkUseEntryPoint(compLaunchContext);\n     if (useEntryPoint) {\n-      String launchCommand \u003d component.getLaunchCommand();\n+      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n       if (!StringUtils.isEmpty(launchCommand)) {\n         launcher.addCommand(launchCommand);\n       }\n     } else {\n       // substitute launch command\n       String launchCommand \u003d compLaunchContext.getLaunchCommand();\n       // docker container may have empty commands\n       if (!StringUtils.isEmpty(launchCommand)) {\n         launchCommand \u003d ProviderUtils\n             .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n         CommandLineBuilder operation \u003d new CommandLineBuilder();\n         operation.add(launchCommand);\n         operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n         launcher.addCommand(operation.build());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchCommand(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution)\n          throws IOException, SliderException {\n    boolean useEntryPoint \u003d checkUseEntryPoint(compLaunchContext);\n    if (useEntryPoint) {\n      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launcher.addCommand(launchCommand);\n      }\n    } else {\n      // substitute launch command\n      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n      // docker container may have empty commands\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launchCommand \u003d ProviderUtils\n            .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n        CommandLineBuilder operation \u003d new CommandLineBuilder();\n        operation.add(launchCommand);\n        operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n        launcher.addCommand(operation.build());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
      "extendedDetails": {}
    },
    "31998643a51f1e08f723f18dc5476ac1512d5b81": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8342. Enable untrusted docker image to run with launch command. Contributed by Eric Yang\n",
      "commitDate": "02/06/18 2:46 PM",
      "commitName": "31998643a51f1e08f723f18dc5476ac1512d5b81",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "11/05/18 4:56 PM",
      "commitNameOld": "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 21.91,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   public void buildContainerLaunchCommand(AbstractLauncher launcher,\n       Service service, ComponentInstance instance,\n       SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n       ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n       Map\u003cString, String\u003e tokensForSubstitution)\n           throws IOException, SliderException {\n     Component component \u003d instance.getComponent().getComponentSpec();\n-    boolean useEntryPoint \u003d Boolean.parseBoolean(component\n-        .getConfiguration().getEnv(Environment\n-          .YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.name()));\n+    boolean useEntryPoint \u003d checkUseEntryPoint(component);\n     if (useEntryPoint) {\n       String launchCommand \u003d component.getLaunchCommand();\n       if (!StringUtils.isEmpty(launchCommand)) {\n         launcher.addCommand(launchCommand);\n       }\n     } else {\n       // substitute launch command\n       String launchCommand \u003d compLaunchContext.getLaunchCommand();\n       // docker container may have empty commands\n       if (!StringUtils.isEmpty(launchCommand)) {\n         launchCommand \u003d ProviderUtils\n             .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n         CommandLineBuilder operation \u003d new CommandLineBuilder();\n         operation.add(launchCommand);\n         operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n         launcher.addCommand(operation.build());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchCommand(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution)\n          throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();\n    boolean useEntryPoint \u003d checkUseEntryPoint(component);\n    if (useEntryPoint) {\n      String launchCommand \u003d component.getLaunchCommand();\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launcher.addCommand(launchCommand);\n      }\n    } else {\n      // substitute launch command\n      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n      // docker container may have empty commands\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launchCommand \u003d ProviderUtils\n            .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n        CommandLineBuilder operation \u003d new CommandLineBuilder();\n        operation.add(launchCommand);\n        operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n        launcher.addCommand(operation.build());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java",
      "extendedDetails": {}
    },
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7654. Support ENTRY_POINT for docker container. Contributed by Eric Yang\n",
      "commitDate": "11/05/18 4:56 PM",
      "commitName": "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,29 @@\n+  public void buildContainerLaunchCommand(AbstractLauncher launcher,\n+      Service service, ComponentInstance instance,\n+      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n+      Map\u003cString, String\u003e tokensForSubstitution)\n+          throws IOException, SliderException {\n+    Component component \u003d instance.getComponent().getComponentSpec();\n+    boolean useEntryPoint \u003d Boolean.parseBoolean(component\n+        .getConfiguration().getEnv(Environment\n+          .YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.name()));\n+    if (useEntryPoint) {\n+      String launchCommand \u003d component.getLaunchCommand();\n+      if (!StringUtils.isEmpty(launchCommand)) {\n+        launcher.addCommand(launchCommand);\n+      }\n+    } else {\n+      // substitute launch command\n+      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n+      // docker container may have empty commands\n+      if (!StringUtils.isEmpty(launchCommand)) {\n+        launchCommand \u003d ProviderUtils\n+            .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n+        CommandLineBuilder operation \u003d new CommandLineBuilder();\n+        operation.add(launchCommand);\n+        operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n+        launcher.addCommand(operation.build());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerLaunchCommand(AbstractLauncher launcher,\n      Service service, ComponentInstance instance,\n      SliderFileSystem fileSystem, Configuration yarnConf, Container container,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      Map\u003cString, String\u003e tokensForSubstitution)\n          throws IOException, SliderException {\n    Component component \u003d instance.getComponent().getComponentSpec();\n    boolean useEntryPoint \u003d Boolean.parseBoolean(component\n        .getConfiguration().getEnv(Environment\n          .YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.name()));\n    if (useEntryPoint) {\n      String launchCommand \u003d component.getLaunchCommand();\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launcher.addCommand(launchCommand);\n      }\n    } else {\n      // substitute launch command\n      String launchCommand \u003d compLaunchContext.getLaunchCommand();\n      // docker container may have empty commands\n      if (!StringUtils.isEmpty(launchCommand)) {\n        launchCommand \u003d ProviderUtils\n            .substituteStrWithTokens(launchCommand, tokensForSubstitution);\n        CommandLineBuilder operation \u003d new CommandLineBuilder();\n        operation.add(launchCommand);\n        operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\n        launcher.addCommand(operation.build());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/docker/DockerProviderService.java"
    }
  }
}