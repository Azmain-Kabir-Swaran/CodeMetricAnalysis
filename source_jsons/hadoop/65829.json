{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStore.java",
  "functionName": "removeAuthoritativeDirFlag",
  "functionId": "removeAuthoritativeDirFlag___pathSet-Set__Path__(modifiers-final)__state-AncestorState(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
  "functionStartLine": 1711,
  "functionEndLine": 1772,
  "numCommitsSeen": 69,
  "timeTaken": 4711,
  "changeHistory": [
    "49df83899543586bbcaf80f01399ade031cf68b0",
    "ea25f4de236611d388e14a710ebe5d6872c421b6",
    "c58e11bf521d746842ce16724211a2a0339d7b61",
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
    "e02eb24e0a9139418120027b694492e0738df20a",
    "d7232857d8d1e10cdac171acdc931187e45fd6be"
  ],
  "changeHistoryShort": {
    "49df83899543586bbcaf80f01399ade031cf68b0": "Ybodychange",
    "ea25f4de236611d388e14a710ebe5d6872c421b6": "Ybodychange",
    "c58e11bf521d746842ce16724211a2a0339d7b61": "Ybodychange",
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": "Ybodychange",
    "e02eb24e0a9139418120027b694492e0738df20a": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "d7232857d8d1e10cdac171acdc931187e45fd6be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49df83899543586bbcaf80f01399ade031cf68b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16697. Tune/audit S3A authoritative mode.\n\nContains:\n\nHADOOP-16474. S3Guard ProgressiveRenameTracker to mark destination\n              dirirectory as authoritative on success.\nHADOOP-16684. S3guard bucket info to list a bit more about\n              authoritative paths.\nHADOOP-16722. S3GuardTool to support FilterFileSystem.\n\nThis patch improves the marking of newly created/import directory\ntrees in S3Guard DynamoDB tables as authoritative.\n\nSpecific changes:\n\n * Renamed directories are marked as authoritative if the entire\n   operation succeeded (HADOOP-16474).\n * When updating parent table entries as part of any table write,\n   there\u0027s no overwriting of their authoritative flag.\n\ns3guard import changes:\n\n* new -verbose flag to print out what is going on.\n\n* The \"s3guard import\" command lets you declare that a directory tree\nis to be marked as authoritative\n\n  hadoop s3guard import -authoritative -verbose s3a://bucket/path\n\nWhen importing a listing and a file is found, the import tool queries\nthe metastore and only updates the entry if the file is different from\nbefore, where different \u003d\u003d new timestamp, etag, or length. S3Guard can get\ntimestamp differences due to clock skew in PUT operations.\n\nAs the recursive list performed by the import command doesn\u0027t retrieve the\nversionID, the existing entry may in fact be more complete.\nWhen updating an existing due to clock skew the existing version ID\nis propagated to the new entry (note: the etags must match; this is needed\nto deal with inconsistent listings).\n\nThere is a new s3guard command to audit a s3guard bucket/path\u0027s\nauthoritative state:\n\n  hadoop s3guard authoritative -check-config s3a://bucket/path\n\nThis is primarily for testing/auditing.\n\nThe s3guard bucket-info command also provides some more details on the\nauthoritative state of a store (HADOOP-16684).\n\nChange-Id: I58001341c04f6f3597fcb4fcb1581ccefeb77d91\n",
      "commitDate": "10/01/20 3:11 AM",
      "commitName": "49df83899543586bbcaf80f01399ade031cf68b0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "26/11/19 7:36 AM",
      "commitNameOld": "ea25f4de236611d388e14a710ebe5d6872c421b6",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 44.82,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,62 @@\n   private void removeAuthoritativeDirFlag(\n       final Set\u003cPath\u003e pathSet,\n       final AncestorState state) throws IOException {\n \n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n+        if (path.isRoot()) {\n+          LOG.debug(\"ignoring root path\");\n+          return null;\n+        }\n         if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n           // there\u0027s already an entry for this path\n           LOG.debug(\"Ignoring update of entry already in the state map\");\n           return null;\n         }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n         if (ddbPathMetadata \u003d\u003d null) {\n           // there is no entry.\n           LOG.debug(\"No parent {}; skipping\", path);\n           return null;\n         }\n         if (ddbPathMetadata.isDeleted()) {\n           // the parent itself is deleted\n           LOG.debug(\"Parent has been deleted {}; skipping\", path);\n           return null;\n         }\n         if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n           // the parent itself is deleted\n           LOG.debug(\"Parent is not a directory {}; skipping\", path);\n           return null;\n         }\n         LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n+        ddbPathMetadata.setLastUpdated(ttlTimeProvider.getNow());\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n       if (!metas.isEmpty()) {\n         innerPut(metas, state);\n       }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (path.isRoot()) {\n          LOG.debug(\"ignoring root path\");\n          return null;\n        }\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if (ddbPathMetadata \u003d\u003d null) {\n          // there is no entry.\n          LOG.debug(\"No parent {}; skipping\", path);\n          return null;\n        }\n        if (ddbPathMetadata.isDeleted()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent has been deleted {}; skipping\", path);\n          return null;\n        }\n        if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent is not a directory {}; skipping\", path);\n          return null;\n        }\n        LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        ddbPathMetadata.setLastUpdated(ttlTimeProvider.getNow());\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "ea25f4de236611d388e14a710ebe5d6872c421b6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16709. S3Guard: Make authoritative mode exclusive for metadata - don\u0027t check for expiry for authoritative paths (#1721). Contributed by Gabor Bota.\n\n",
      "commitDate": "26/11/19 7:36 AM",
      "commitName": "ea25f4de236611d388e14a710ebe5d6872c421b6",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "16/10/19 1:41 AM",
      "commitNameOld": "bbcf0b91d6f5eb697d09e45505b0e72e193c3d75",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 41.29,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private void removeAuthoritativeDirFlag(\n       final Set\u003cPath\u003e pathSet,\n       final AncestorState state) throws IOException {\n \n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n         if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n           // there\u0027s already an entry for this path\n           LOG.debug(\"Ignoring update of entry already in the state map\");\n           return null;\n         }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n         if (ddbPathMetadata \u003d\u003d null) {\n           // there is no entry.\n           LOG.debug(\"No parent {}; skipping\", path);\n           return null;\n         }\n         if (ddbPathMetadata.isDeleted()) {\n           // the parent itself is deleted\n           LOG.debug(\"Parent has been deleted {}; skipping\", path);\n           return null;\n         }\n         if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n           // the parent itself is deleted\n           LOG.debug(\"Parent is not a directory {}; skipping\", path);\n           return null;\n         }\n         LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n       if (!metas.isEmpty()) {\n-        innerPut(metas, state, ttlTimeProvider);\n+        innerPut(metas, state);\n       }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if (ddbPathMetadata \u003d\u003d null) {\n          // there is no entry.\n          LOG.debug(\"No parent {}; skipping\", path);\n          return null;\n        }\n        if (ddbPathMetadata.isDeleted()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent has been deleted {}; skipping\", path);\n          return null;\n        }\n        if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent is not a directory {}; skipping\", path);\n          return null;\n        }\n        LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "c58e11bf521d746842ce16724211a2a0339d7b61": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
      "commitDate": "17/07/19 7:24 AM",
      "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "12/07/19 5:02 AM",
      "commitNameOld": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private void removeAuthoritativeDirFlag(\n       final Set\u003cPath\u003e pathSet,\n       final AncestorState state) throws IOException {\n \n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n         if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n           // there\u0027s already an entry for this path\n           LOG.debug(\"Ignoring update of entry already in the state map\");\n           return null;\n         }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n         if (ddbPathMetadata \u003d\u003d null) {\n           // there is no entry.\n           LOG.debug(\"No parent {}; skipping\", path);\n           return null;\n         }\n         if (ddbPathMetadata.isDeleted()) {\n           // the parent itself is deleted\n           LOG.debug(\"Parent has been deleted {}; skipping\", path);\n           return null;\n         }\n         if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n           // the parent itself is deleted\n           LOG.debug(\"Parent is not a directory {}; skipping\", path);\n           return null;\n         }\n         LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n       if (!metas.isEmpty()) {\n-        innerPut(metas, state, timeProvider);\n+        innerPut(metas, state, ttlTimeProvider);\n       }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if (ddbPathMetadata \u003d\u003d null) {\n          // there is no entry.\n          LOG.debug(\"No parent {}; skipping\", path);\n          return null;\n        }\n        if (ddbPathMetadata.isDeleted()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent has been deleted {}; skipping\", path);\n          return null;\n        }\n        if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent is not a directory {}; skipping\", path);\n          return null;\n        }\n        LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state, ttlTimeProvider);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16384: S3A: Avoid inconsistencies between DDB and S3.\n\nContributed by Steve Loughran\n\nContains\n\n- HADOOP-16397. Hadoop S3Guard Prune command to support a -tombstone option.\n- HADOOP-16406. ITestDynamoDBMetadataStore.testProvisionTable times out intermittently\n\nThis patch doesn\u0027t fix the underlying problem but it\n\n* changes some tests to clean up better\n* does a lot more in logging operations in against DDB, if enabled\n* adds an entry point to dump the state of the metastore and s3 tables (precursor to fsck)\n* adds a purge entry point to help clean up after a test run has got a store into a mess\n* s3guard prune command adds -tombstone option to only clear tombstones\n\nThe outcome is that tests should pass consistently and if problems occur we have better diagnostics.\n\nChange-Id: I3eca3f5529d7f6fec398c0ff0472919f08f054eb\n",
      "commitDate": "12/07/19 5:02 AM",
      "commitName": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "08/07/19 10:27 AM",
      "commitNameOld": "de6b7bc67ace7744adb0320ee7de79cf28259d2d",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 3.77,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,57 @@\n   private void removeAuthoritativeDirFlag(\n       final Set\u003cPath\u003e pathSet,\n       final AncestorState state) throws IOException {\n \n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n         if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n           // there\u0027s already an entry for this path\n           LOG.debug(\"Ignoring update of entry already in the state map\");\n           return null;\n         }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n-        if(ddbPathMetadata \u003d\u003d null) {\n+        if (ddbPathMetadata \u003d\u003d null) {\n+          // there is no entry.\n+          LOG.debug(\"No parent {}; skipping\", path);\n           return null;\n         }\n-        LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n+        if (ddbPathMetadata.isDeleted()) {\n+          // the parent itself is deleted\n+          LOG.debug(\"Parent has been deleted {}; skipping\", path);\n+          return null;\n+        }\n+        if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n+          // the parent itself is deleted\n+          LOG.debug(\"Parent is not a directory {}; skipping\", path);\n+          return null;\n+        }\n+        LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n       if (!metas.isEmpty()) {\n         innerPut(metas, state, timeProvider);\n       }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if (ddbPathMetadata \u003d\u003d null) {\n          // there is no entry.\n          LOG.debug(\"No parent {}; skipping\", path);\n          return null;\n        }\n        if (ddbPathMetadata.isDeleted()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent has been deleted {}; skipping\", path);\n          return null;\n        }\n        if (!ddbPathMetadata.getFileStatus().isDirectory()) {\n          // the parent itself is deleted\n          LOG.debug(\"Parent is not a directory {}; skipping\", path);\n          return null;\n        }\n        LOG.debug(\"Setting isAuthoritativeDir\u003d\u003dfalse on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state, timeProvider);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/06/19 9:05 AM",
          "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 3.7,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,45 @@\n-  private void removeAuthoritativeDirFlag(Set\u003cPath\u003e pathSet)\n-      throws IOException {\n+  private void removeAuthoritativeDirFlag(\n+      final Set\u003cPath\u003e pathSet,\n+      final AncestorState state) throws IOException {\n+\n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n+        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n+          // there\u0027s already an entry for this path\n+          LOG.debug(\"Ignoring update of entry already in the state map\");\n+          return null;\n+        }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n         if(ddbPathMetadata \u003d\u003d null) {\n           return null;\n         }\n         LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n-      innerPut(metas);\n+      if (!metas.isEmpty()) {\n+        innerPut(metas, state, timeProvider);\n+      }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if(ddbPathMetadata \u003d\u003d null) {\n          return null;\n        }\n        LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state, timeProvider);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[pathSet-Set\u003cPath\u003e]",
            "newValue": "[pathSet-Set\u003cPath\u003e(modifiers-final), state-AncestorState(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/06/19 9:05 AM",
          "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 3.7,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,45 @@\n-  private void removeAuthoritativeDirFlag(Set\u003cPath\u003e pathSet)\n-      throws IOException {\n+  private void removeAuthoritativeDirFlag(\n+      final Set\u003cPath\u003e pathSet,\n+      final AncestorState state) throws IOException {\n+\n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n+        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n+          // there\u0027s already an entry for this path\n+          LOG.debug(\"Ignoring update of entry already in the state map\");\n+          return null;\n+        }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n         if(ddbPathMetadata \u003d\u003d null) {\n           return null;\n         }\n         LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n-      innerPut(metas);\n+      if (!metas.isEmpty()) {\n+        innerPut(metas, state, timeProvider);\n+      }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if(ddbPathMetadata \u003d\u003d null) {\n          return null;\n        }\n        LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state, timeProvider);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
          "commitDate": "20/06/19 1:56 AM",
          "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "16/06/19 9:05 AM",
          "commitNameOld": "f9cc9e162175444efe9d5b07ecb9a795f750ca3c",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 3.7,
          "commitsBetweenForRepo": 44,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,45 @@\n-  private void removeAuthoritativeDirFlag(Set\u003cPath\u003e pathSet)\n-      throws IOException {\n+  private void removeAuthoritativeDirFlag(\n+      final Set\u003cPath\u003e pathSet,\n+      final AncestorState state) throws IOException {\n+\n     AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n \n     Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n       try {\n+        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n+          // there\u0027s already an entry for this path\n+          LOG.debug(\"Ignoring update of entry already in the state map\");\n+          return null;\n+        }\n         DDBPathMetadata ddbPathMetadata \u003d get(path);\n         if(ddbPathMetadata \u003d\u003d null) {\n           return null;\n         }\n         LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n         ddbPathMetadata.setAuthoritativeDir(false);\n         return ddbPathMetadata;\n       } catch (IOException e) {\n         String msg \u003d String.format(\"IOException while getting PathMetadata \"\n             + \"on path: %s.\", path);\n         LOG.error(msg, e);\n         rIOException.set(e);\n         return null;\n       }\n     }).filter(Objects::nonNull).collect(Collectors.toSet());\n \n     try {\n       LOG.debug(\"innerPut on metas: {}\", metas);\n-      innerPut(metas);\n+      if (!metas.isEmpty()) {\n+        innerPut(metas, state, timeProvider);\n+      }\n     } catch (IOException e) {\n       String msg \u003d String.format(\"IOException while setting false \"\n           + \"authoritative directory flag on: %s.\", metas);\n       LOG.error(msg, e);\n       rIOException.set(e);\n     }\n \n     if (rIOException.get() !\u003d null) {\n       throw rIOException.get();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void removeAuthoritativeDirFlag(\n      final Set\u003cPath\u003e pathSet,\n      final AncestorState state) throws IOException {\n\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        if (state !\u003d null \u0026\u0026 state.get(path) !\u003d null) {\n          // there\u0027s already an entry for this path\n          LOG.debug(\"Ignoring update of entry already in the state map\");\n          return null;\n        }\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if(ddbPathMetadata \u003d\u003d null) {\n          return null;\n        }\n        LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      if (!metas.isEmpty()) {\n        innerPut(metas, state, timeProvider);\n      }\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[pathSet-Set\u003cPath\u003e]",
            "newValue": "[pathSet-Set\u003cPath\u003e(modifiers-final), state-AncestorState(modifiers-final)]"
          }
        }
      ]
    },
    "d7232857d8d1e10cdac171acdc931187e45fd6be": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14154 Persist isAuthoritative bit in DynamoDBMetaStore (Contributed by Gabor Bota)\n",
      "commitDate": "17/08/18 10:15 AM",
      "commitName": "d7232857d8d1e10cdac171acdc931187e45fd6be",
      "commitAuthor": "Aaron Fabbri",
      "diff": "@@ -0,0 +1,36 @@\n+  private void removeAuthoritativeDirFlag(Set\u003cPath\u003e pathSet)\n+      throws IOException {\n+    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n+\n+    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n+      try {\n+        DDBPathMetadata ddbPathMetadata \u003d get(path);\n+        if(ddbPathMetadata \u003d\u003d null) {\n+          return null;\n+        }\n+        LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n+        ddbPathMetadata.setAuthoritativeDir(false);\n+        return ddbPathMetadata;\n+      } catch (IOException e) {\n+        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n+            + \"on path: %s.\", path);\n+        LOG.error(msg, e);\n+        rIOException.set(e);\n+        return null;\n+      }\n+    }).filter(Objects::nonNull).collect(Collectors.toSet());\n+\n+    try {\n+      LOG.debug(\"innerPut on metas: {}\", metas);\n+      innerPut(metas);\n+    } catch (IOException e) {\n+      String msg \u003d String.format(\"IOException while setting false \"\n+          + \"authoritative directory flag on: %s.\", metas);\n+      LOG.error(msg, e);\n+      rIOException.set(e);\n+    }\n+\n+    if (rIOException.get() !\u003d null) {\n+      throw rIOException.get();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeAuthoritativeDirFlag(Set\u003cPath\u003e pathSet)\n      throws IOException {\n    AtomicReference\u003cIOException\u003e rIOException \u003d new AtomicReference\u003c\u003e();\n\n    Set\u003cDDBPathMetadata\u003e metas \u003d pathSet.stream().map(path -\u003e {\n      try {\n        DDBPathMetadata ddbPathMetadata \u003d get(path);\n        if(ddbPathMetadata \u003d\u003d null) {\n          return null;\n        }\n        LOG.debug(\"Setting false isAuthoritativeDir on {}\", ddbPathMetadata);\n        ddbPathMetadata.setAuthoritativeDir(false);\n        return ddbPathMetadata;\n      } catch (IOException e) {\n        String msg \u003d String.format(\"IOException while getting PathMetadata \"\n            + \"on path: %s.\", path);\n        LOG.error(msg, e);\n        rIOException.set(e);\n        return null;\n      }\n    }).filter(Objects::nonNull).collect(Collectors.toSet());\n\n    try {\n      LOG.debug(\"innerPut on metas: {}\", metas);\n      innerPut(metas);\n    } catch (IOException e) {\n      String msg \u003d String.format(\"IOException while setting false \"\n          + \"authoritative directory flag on: %s.\", metas);\n      LOG.error(msg, e);\n      rIOException.set(e);\n    }\n\n    if (rIOException.get() !\u003d null) {\n      throw rIOException.get();\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}