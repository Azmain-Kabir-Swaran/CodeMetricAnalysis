{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LdapGroupsMapping.java",
  "functionName": "getDirContext",
  "functionId": "getDirContext",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
  "functionStartLine": 652,
  "functionEndLine": 683,
  "numCommitsSeen": 29,
  "timeTaken": 3649,
  "changeHistory": [
    "62efb6300619670d3e0554c3ba14c264fa0c705b",
    "f257497b0f964c171961be4ad527983f24f9be31",
    "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000",
    "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
    "2216bde322961c0fe33b5822510880a65d5c45fd",
    "d82bc8501869be78780fc09752dbf7af918c14af",
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855"
  ],
  "changeHistoryShort": {
    "62efb6300619670d3e0554c3ba14c264fa0c705b": "Ybodychange",
    "f257497b0f964c171961be4ad527983f24f9be31": "Ybodychange",
    "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000": "Ybodychange",
    "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2216bde322961c0fe33b5822510880a65d5c45fd": "Ybodychange",
    "d82bc8501869be78780fc09752dbf7af918c14af": "Ybodychange",
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855": "Yintroduced"
  },
  "changeHistoryDetails": {
    "62efb6300619670d3e0554c3ba14c264fa0c705b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16245. Restrict the effect of LdapGroupsMapping SSL configurations to avoid interfering with other SSL connections. Contributed by Erik Krogen.\n",
      "commitDate": "26/07/19 11:16 AM",
      "commitName": "62efb6300619670d3e0554c3ba14c264fa0c705b",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "08/05/19 10:49 PM",
      "commitNameOld": "f257497b0f964c171961be4ad527983f24f9be31",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 78.52,
      "commitsBetweenForRepo": 592,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,32 @@\n   private DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n       Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n       env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCtxFactoryClassName);\n       env.put(Context.PROVIDER_URL, currentLdapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n-        if (!keystore.isEmpty()) {\n-          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n-        }\n-        if (!keystorePass.isEmpty()) {\n-          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n-        }\n-        if (!truststore.isEmpty()) {\n-          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n-        }\n-        if (!truststorePass.isEmpty()) {\n-          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n-              truststorePass);\n-        }\n+        // It is necessary to use a custom socket factory rather than setting\n+        // system properties to configure these options to avoid interfering\n+        // with other SSL factories throughout the system\n+        LdapSslSocketFactory.setConfigurations(keystore, keystorePass,\n+            truststore, truststorePass);\n+        env.put(\"java.naming.ldap.factory.socket\",\n+            LdapSslSocketFactory.class.getName());\n       }\n \n       env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);\n       env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);\n \n       env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n           String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n       env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n           String.valueOf(READ_TIMEOUT_DEFAULT)));\n \n       ctx \u003d new InitialDirContext(env);\n     }\n     return ctx;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCtxFactoryClassName);\n      env.put(Context.PROVIDER_URL, currentLdapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        // It is necessary to use a custom socket factory rather than setting\n        // system properties to configure these options to avoid interfering\n        // with other SSL factories throughout the system\n        LdapSslSocketFactory.setConfigurations(keystore, keystorePass,\n            truststore, truststorePass);\n        env.put(\"java.naming.ldap.factory.socket\",\n            LdapSslSocketFactory.class.getName());\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);\n      env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n    return ctx;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "f257497b0f964c171961be4ad527983f24f9be31": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16299. [JDK 11] Build fails without specifying -Djavac.version\u003d11\n\nSigned-off-by: Takanobu Asanuma \u003ctasanuma@apache.org\u003e\n",
      "commitDate": "08/05/19 10:49 PM",
      "commitName": "f257497b0f964c171961be4ad527983f24f9be31",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/05/19 12:58 PM",
      "commitNameOld": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.41,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n       Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n-      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n+      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCtxFactoryClassName);\n       env.put(Context.PROVIDER_URL, currentLdapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n         if (!keystore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n         }\n         if (!keystorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n         }\n         if (!truststore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n         }\n         if (!truststorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStorePassword\",\n               truststorePass);\n         }\n       }\n \n       env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);\n       env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);\n \n       env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n           String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n       env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n           String.valueOf(READ_TIMEOUT_DEFAULT)));\n \n       ctx \u003d new InitialDirContext(env);\n     }\n     return ctx;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCtxFactoryClassName);\n      env.put(Context.PROVIDER_URL, currentLdapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        if (!keystore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        }\n        if (!keystorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n        }\n        if (!truststore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n        }\n        if (!truststorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n              truststorePass);\n        }\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);\n      env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n    return ctx;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16125. Support multiple bind users in LdapGroupsMapping. Contributed by Lukas Majercak.\n",
      "commitDate": "25/02/19 1:39 PM",
      "commitName": "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "12/12/18 11:10 AM",
      "commitNameOld": "76efeacd5f8563bd02b5b2f09c59cee3acdad8c7",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 75.1,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n       Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n       env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n       env.put(Context.PROVIDER_URL, currentLdapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n         if (!keystore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n         }\n         if (!keystorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n         }\n         if (!truststore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n         }\n         if (!truststorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStorePassword\",\n               truststorePass);\n         }\n       }\n \n-      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n-      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n+      env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);\n+      env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);\n \n       env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n           String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n       env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n           String.valueOf(READ_TIMEOUT_DEFAULT)));\n \n       ctx \u003d new InitialDirContext(env);\n     }\n     return ctx;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n      env.put(Context.PROVIDER_URL, currentLdapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        if (!keystore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        }\n        if (!keystorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n        }\n        if (!truststore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n        }\n        if (!truststorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n              truststorePass);\n        }\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, currentBindUser.username);\n      env.put(Context.SECURITY_CREDENTIALS, currentBindUser.password);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n    return ctx;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-15950. Failover for LdapGroupsMapping. Contributed by Lukas Majercak.\n",
      "commitDate": "03/12/18 12:10 PM",
      "commitName": "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-15950. Failover for LdapGroupsMapping. Contributed by Lukas Majercak.\n",
          "commitDate": "03/12/18 12:10 PM",
          "commitName": "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "29/03/18 5:16 PM",
          "commitNameOld": "2216bde322961c0fe33b5822510880a65d5c45fd",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 248.83,
          "commitsBetweenForRepo": 2455,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  DirContext getDirContext() throws NamingException {\n+  private DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n-      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n-      env.put(Context.INITIAL_CONTEXT_FACTORY,\n-          com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n-      env.put(Context.PROVIDER_URL, ldapUrl);\n+      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n+      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n+      env.put(Context.PROVIDER_URL, currentLdapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n         if (!keystore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n         }\n         if (!keystorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n         }\n         if (!truststore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n         }\n         if (!truststorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStorePassword\",\n               truststorePass);\n         }\n       }\n \n       env.put(Context.SECURITY_PRINCIPAL, bindUser);\n       env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n \n       env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n           String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n       env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n           String.valueOf(READ_TIMEOUT_DEFAULT)));\n \n       ctx \u003d new InitialDirContext(env);\n     }\n     return ctx;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n      env.put(Context.PROVIDER_URL, currentLdapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        if (!keystore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        }\n        if (!keystorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n        }\n        if (!truststore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n        }\n        if (!truststorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n              truststorePass);\n        }\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n    return ctx;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15950. Failover for LdapGroupsMapping. Contributed by Lukas Majercak.\n",
          "commitDate": "03/12/18 12:10 PM",
          "commitName": "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "29/03/18 5:16 PM",
          "commitNameOld": "2216bde322961c0fe33b5822510880a65d5c45fd",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 248.83,
          "commitsBetweenForRepo": 2455,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,38 @@\n-  DirContext getDirContext() throws NamingException {\n+  private DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n-      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n-      env.put(Context.INITIAL_CONTEXT_FACTORY,\n-          com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n-      env.put(Context.PROVIDER_URL, ldapUrl);\n+      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n+      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n+      env.put(Context.PROVIDER_URL, currentLdapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n         if (!keystore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n         }\n         if (!keystorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n         }\n         if (!truststore.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n         }\n         if (!truststorePass.isEmpty()) {\n           System.setProperty(\"javax.net.ssl.trustStorePassword\",\n               truststorePass);\n         }\n       }\n \n       env.put(Context.SECURITY_PRINCIPAL, bindUser);\n       env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n \n       env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n           String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n       env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n           String.valueOf(READ_TIMEOUT_DEFAULT)));\n \n       ctx \u003d new InitialDirContext(env);\n     }\n     return ctx;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003c\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY, ldapCxtFactoryClass.getName());\n      env.put(Context.PROVIDER_URL, currentLdapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        if (!keystore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        }\n        if (!keystorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n        }\n        if (!truststore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n        }\n        if (!truststorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n              truststorePass);\n        }\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n    return ctx;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
          "extendedDetails": {}
        }
      ]
    },
    "2216bde322961c0fe33b5822510880a65d5c45fd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12862. LDAP Group Mapping over SSL can not specify trust store. Contributed by Wei-Chiu Chuang and Konstantin Shvachko.",
      "commitDate": "29/03/18 5:16 PM",
      "commitName": "2216bde322961c0fe33b5822510880a65d5c45fd",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 254.82,
      "commitsBetweenForRepo": 2011,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,39 @@\n   DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n       Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n       env.put(Context.INITIAL_CONTEXT_FACTORY,\n           com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n       env.put(Context.PROVIDER_URL, ldapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n-        System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n+        if (!keystore.isEmpty()) {\n+          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n+        }\n+        if (!keystorePass.isEmpty()) {\n+          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n+        }\n+        if (!truststore.isEmpty()) {\n+          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n+        }\n+        if (!truststorePass.isEmpty()) {\n+          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n+              truststorePass);\n+        }\n       }\n \n       env.put(Context.SECURITY_PRINCIPAL, bindUser);\n       env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n \n       env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n           String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n       env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n           String.valueOf(READ_TIMEOUT_DEFAULT)));\n \n       ctx \u003d new InitialDirContext(env);\n     }\n     return ctx;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY,\n          com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n      env.put(Context.PROVIDER_URL, ldapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        if (!keystore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        }\n        if (!keystorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n        }\n        if (!truststore.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStore\", truststore);\n        }\n        if (!truststorePass.isEmpty()) {\n          System.setProperty(\"javax.net.ssl.trustStorePassword\",\n              truststorePass);\n        }\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n    return ctx;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "d82bc8501869be78780fc09752dbf7af918c14af": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13105. Support timeouts in LDAP queries in LdapGroupsMapping. Contributed by Mingliang Liu.\n",
      "commitDate": "03/06/16 4:38 PM",
      "commitName": "d82bc8501869be78780fc09752dbf7af918c14af",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "19/05/16 7:15 AM",
      "commitNameOld": "182fc1986a984ed0be6bed297390a830c2305af1",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 15.39,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,29 @@\n   DirContext getDirContext() throws NamingException {\n     if (ctx \u003d\u003d null) {\n       // Set up the initial environment for LDAP connectivity\n       Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n       env.put(Context.INITIAL_CONTEXT_FACTORY,\n           com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n       env.put(Context.PROVIDER_URL, ldapUrl);\n       env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n \n       // Set up SSL security, if necessary\n       if (useSsl) {\n         env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n         System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n         System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n       }\n \n       env.put(Context.SECURITY_PRINCIPAL, bindUser);\n       env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n \n+      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n+          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n+      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n+          String.valueOf(READ_TIMEOUT_DEFAULT)));\n+\n       ctx \u003d new InitialDirContext(env);\n     }\n \n     return ctx;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY,\n          com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n      env.put(Context.PROVIDER_URL, ldapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n\n      env.put(\"com.sun.jndi.ldap.connect.timeout\", conf.get(CONNECTION_TIMEOUT,\n          String.valueOf(CONNECTION_TIMEOUT_DEFAULT)));\n      env.put(\"com.sun.jndi.ldap.read.timeout\", conf.get(READ_TIMEOUT,\n          String.valueOf(READ_TIMEOUT_DEFAULT)));\n\n      ctx \u003d new InitialDirContext(env);\n    }\n\n    return ctx;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8121. Active Directory Group Mapping Service. Contributed by Jonathan Natkins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1302740 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/12 6:00 PM",
      "commitName": "21426e6e42a2f1c0f5a0eca23ad62057901e4855",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,24 @@\n+  DirContext getDirContext() throws NamingException {\n+    if (ctx \u003d\u003d null) {\n+      // Set up the initial environment for LDAP connectivity\n+      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n+      env.put(Context.INITIAL_CONTEXT_FACTORY,\n+          com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n+      env.put(Context.PROVIDER_URL, ldapUrl);\n+      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+\n+      // Set up SSL security, if necessary\n+      if (useSsl) {\n+        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n+        System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n+      }\n+\n+      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n+      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n+\n+      ctx \u003d new InitialDirContext(env);\n+    }\n+\n+    return ctx;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  DirContext getDirContext() throws NamingException {\n    if (ctx \u003d\u003d null) {\n      // Set up the initial environment for LDAP connectivity\n      Hashtable\u003cString, String\u003e env \u003d new Hashtable\u003cString, String\u003e();\n      env.put(Context.INITIAL_CONTEXT_FACTORY,\n          com.sun.jndi.ldap.LdapCtxFactory.class.getName());\n      env.put(Context.PROVIDER_URL, ldapUrl);\n      env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n\n      // Set up SSL security, if necessary\n      if (useSsl) {\n        env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n        System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n        System.setProperty(\"javax.net.ssl.keyStorePassword\", keystorePass);\n      }\n\n      env.put(Context.SECURITY_PRINCIPAL, bindUser);\n      env.put(Context.SECURITY_CREDENTIALS, bindPassword);\n\n      ctx \u003d new InitialDirContext(env);\n    }\n\n    return ctx;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java"
    }
  }
}