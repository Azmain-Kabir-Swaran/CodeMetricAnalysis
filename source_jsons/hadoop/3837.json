{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "create",
  "functionId": "create___f-Path(modifiers-final)__permission-FsPermission(modifiers-final)__overwrite-boolean(modifiers-final)__bufferSize-int(modifiers-final)__replication-short(modifiers-final)__blockSize-long(modifiers-final)__progress-Progressable(modifiers-final)__favoredNodes-InetSocketAddress[](modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 504,
  "functionEndLine": 535,
  "numCommitsSeen": 262,
  "timeTaken": 6627,
  "changeHistory": [
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
    "687233f20d24c29041929dd0a99d963cec54b6df",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "1c030c6e58dc83152f933323bb7743ad47f5af27",
    "2efea952139b30dd1c881eed0b443ffa72be6dce",
    "8767e4cde172b6e6070e3fd45325ede617b99343",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec"
  ],
  "changeHistoryShort": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": "Ybodychange",
    "687233f20d24c29041929dd0a99d963cec54b6df": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "1c030c6e58dc83152f933323bb7743ad47f5af27": "Yfilerename",
    "2efea952139b30dd1c881eed0b443ffa72be6dce": "Ybodychange",
    "8767e4cde172b6e6070e3fd45325ede617b99343": "Ymultichange(Ybodychange,Yparametermetachange)",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16885. Encryption zone file copy failure leaks a temp file\n\n\r\nContributed by Xiaoyu Yao.\r\n\r\nContains HDFS-14892. Close the output stream if createWrappedOutputStream() fails\r\n\r\nCopying file through the FsShell command into an HDFS encryption zone where\r\nthe caller lacks permissions is leaks a temp ._COPYING file\r\nand potentially a wrapped stream unclosed.\r\n\r\nThis is a convergence of a fix for S3 meeting an issue in HDFS.\r\n\r\nS3: a HEAD against a file can cache a 404, \r\n -you must not do any existence checks, including deleteOnExit(),\r\n  until the file is written. \r\n\r\nHence: HADOOP-16490, only register files for deletion the create worked\r\nand the upload is not direct. \r\n\r\nHDFS-14892. HDFS doesn\u0027t close wrapped streams when IOEs are raised on\r\ncreate() failures. Which means that an entry is retained on the NN.\r\n-you need to register a file with deleteOnExit() even if the file wasn\u0027t\r\ncreated.\r\n\r\nThis patch:\r\n\r\n* Moves the deleteOnExit to ensure the created file get deleted cleanly.\r\n* Fixes HDFS to close the wrapped stream on failures.\r\n\r\n\r\n",
      "commitDate": "02/03/20 5:22 AM",
      "commitName": "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "20/02/20 6:56 PM",
      "commitNameOld": "2338d25dc7150d75fbda84cc95422380b5622224",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 10.43,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public HdfsDataOutputStream create(final Path f,\n       final FsPermission permission, final boolean overwrite,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final InetSocketAddress[] favoredNodes)\n       throws IOException {\n     statistics.incrementWriteOps(1);\n     storageStatistics.incrementOpCounter(OpType.CREATE);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n       public HdfsDataOutputStream doCall(final Path p) throws IOException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                 : EnumSet.of(CreateFlag.CREATE),\n             true, replication, blockSize, progress, bufferSize, null,\n             favoredNodes);\n-        return dfs.createWrappedOutputStream(out, statistics);\n+        return safelyCreateWrappedOutputStream(out);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.create(p, permission, overwrite, bufferSize, replication,\n               blockSize, progress, favoredNodes);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n      throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.CREATE);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return safelyCreateWrappedOutputStream(out);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "687233f20d24c29041929dd0a99d963cec54b6df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13065. Add a new interface for retrieving FS and FC Statistics (Mingliang Liu via cmccabe)\n",
      "commitDate": "11/05/16 1:45 PM",
      "commitName": "687233f20d24c29041929dd0a99d963cec54b6df",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/05/16 7:30 PM",
      "commitNameOld": "45a753ccf79d334513c7bc8f2b81c89a4697075d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 8.76,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   public HdfsDataOutputStream create(final Path f,\n       final FsPermission permission, final boolean overwrite,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final InetSocketAddress[] favoredNodes)\n       throws IOException {\n     statistics.incrementWriteOps(1);\n+    storageStatistics.incrementOpCounter(OpType.CREATE);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n       public HdfsDataOutputStream doCall(final Path p) throws IOException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                 : EnumSet.of(CreateFlag.CREATE),\n             true, replication, blockSize, progress, bufferSize, null,\n             favoredNodes);\n         return dfs.createWrappedOutputStream(out, statistics);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.create(p, permission, overwrite, bufferSize, replication,\n               blockSize, progress, favoredNodes);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n      throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.CREATE);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 1:39 AM",
      "commitNameOld": "8fd55202468b28422b0df888641c9b08906fe4a7",
      "commitAuthorOld": "",
      "daysBetweenCommits": 4.42,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   public HdfsDataOutputStream create(final Path f,\n       final FsPermission permission, final boolean overwrite,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final InetSocketAddress[] favoredNodes)\n-          throws IOException {\n+      throws IOException {\n     statistics.incrementWriteOps(1);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n-      public HdfsDataOutputStream doCall(final Path p)\n-          throws IOException, UnresolvedLinkException {\n+      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                 : EnumSet.of(CreateFlag.CREATE),\n             true, replication, blockSize, progress, bufferSize, null,\n             favoredNodes);\n         return dfs.createWrappedOutputStream(out, statistics);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.create(p, permission, overwrite, bufferSize, replication,\n               blockSize, progress, favoredNodes);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n      throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "1c030c6e58dc83152f933323bb7743ad47f5af27": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8740. Move DistributedFileSystem to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "27/09/15 10:54 AM",
      "commitName": "1c030c6e58dc83152f933323bb7743ad47f5af27",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "27/09/15 1:42 AM",
      "commitNameOld": "f0f984e4e63d0dbafe93062a122ee051330db301",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n          throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p)\n          throws IOException, UnresolvedLinkException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
      }
    },
    "2efea952139b30dd1c881eed0b443ffa72be6dce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6391. Get the Key/IV from the NameNode for encrypted files in DFSClient. Contributed by Charles Lamb and Andrew Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1606220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/14 1:43 PM",
      "commitName": "2efea952139b30dd1c881eed0b443ffa72be6dce",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/06/14 11:13 AM",
      "commitNameOld": "c5b7236d9c3240f6cefc1782bc7926a678d104f4",
      "commitAuthorOld": "",
      "daysBetweenCommits": 11.1,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public HdfsDataOutputStream create(final Path f,\n       final FsPermission permission, final boolean overwrite,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final InetSocketAddress[] favoredNodes)\n           throws IOException {\n     statistics.incrementWriteOps(1);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n       public HdfsDataOutputStream doCall(final Path p)\n           throws IOException, UnresolvedLinkException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                 : EnumSet.of(CreateFlag.CREATE),\n             true, replication, blockSize, progress, bufferSize, null,\n             favoredNodes);\n-        return new HdfsDataOutputStream(out, statistics);\n+        return dfs.createWrappedOutputStream(out, statistics);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.create(p, permission, overwrite, bufferSize, replication,\n               blockSize, progress, favoredNodes);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n          throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p)\n          throws IOException, UnresolvedLinkException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "8767e4cde172b6e6070e3fd45325ede617b99343": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 2:31 PM",
      "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/13 2:31 PM",
          "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "13/06/13 11:11 AM",
          "commitNameOld": "7e1744ccf9a9b5b035afbb182aad123a1d1d357f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 28.14,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,32 @@\n-  public HdfsDataOutputStream create(Path f, FsPermission permission,\n-      boolean overwrite, int bufferSize, short replication, long blockSize,\n-      Progressable progress, InetSocketAddress[] favoredNodes) throws IOException {\n+  public HdfsDataOutputStream create(final Path f,\n+      final FsPermission permission, final boolean overwrite,\n+      final int bufferSize, final short replication, final long blockSize,\n+      final Progressable progress, final InetSocketAddress[] favoredNodes)\n+          throws IOException {\n     statistics.incrementWriteOps(1);\n-    final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n-        overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n-            : EnumSet.of(CreateFlag.CREATE),\n-        true, replication, blockSize, progress, bufferSize, null, favoredNodes);\n-    return new HdfsDataOutputStream(out, statistics);\n+    Path absF \u003d fixRelativePart(f);\n+    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n+      @Override\n+      public HdfsDataOutputStream doCall(final Path p)\n+          throws IOException, UnresolvedLinkException {\n+        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n+            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n+                : EnumSet.of(CreateFlag.CREATE),\n+            true, replication, blockSize, progress, bufferSize, null,\n+            favoredNodes);\n+        return new HdfsDataOutputStream(out, statistics);\n+      }\n+      @Override\n+      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n+          throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n+          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n+              blockSize, progress, favoredNodes);\n+        }\n+        throw new UnsupportedOperationException(\"Cannot create with\" +\n+            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n+            + f + \" -\u003e \" + p);\n+      }\n+    }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n          throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p)\n          throws IOException, UnresolvedLinkException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return new HdfsDataOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-9418.  Add symlink support to DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502373 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/07/13 2:31 PM",
          "commitName": "8767e4cde172b6e6070e3fd45325ede617b99343",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "13/06/13 11:11 AM",
          "commitNameOld": "7e1744ccf9a9b5b035afbb182aad123a1d1d357f",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 28.14,
          "commitsBetweenForRepo": 172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,32 @@\n-  public HdfsDataOutputStream create(Path f, FsPermission permission,\n-      boolean overwrite, int bufferSize, short replication, long blockSize,\n-      Progressable progress, InetSocketAddress[] favoredNodes) throws IOException {\n+  public HdfsDataOutputStream create(final Path f,\n+      final FsPermission permission, final boolean overwrite,\n+      final int bufferSize, final short replication, final long blockSize,\n+      final Progressable progress, final InetSocketAddress[] favoredNodes)\n+          throws IOException {\n     statistics.incrementWriteOps(1);\n-    final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n-        overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n-            : EnumSet.of(CreateFlag.CREATE),\n-        true, replication, blockSize, progress, bufferSize, null, favoredNodes);\n-    return new HdfsDataOutputStream(out, statistics);\n+    Path absF \u003d fixRelativePart(f);\n+    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n+      @Override\n+      public HdfsDataOutputStream doCall(final Path p)\n+          throws IOException, UnresolvedLinkException {\n+        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n+            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n+                : EnumSet.of(CreateFlag.CREATE),\n+            true, replication, blockSize, progress, bufferSize, null,\n+            favoredNodes);\n+        return new HdfsDataOutputStream(out, statistics);\n+      }\n+      @Override\n+      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n+          throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n+          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n+              blockSize, progress, favoredNodes);\n+        }\n+        throw new UnsupportedOperationException(\"Cannot create with\" +\n+            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n+            + f + \" -\u003e \" + p);\n+      }\n+    }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public HdfsDataOutputStream create(final Path f,\n      final FsPermission permission, final boolean overwrite,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final InetSocketAddress[] favoredNodes)\n          throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p)\n          throws IOException, UnresolvedLinkException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n                : EnumSet.of(CreateFlag.CREATE),\n            true, replication, blockSize, progress, bufferSize, null,\n            favoredNodes);\n        return new HdfsDataOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.create(p, permission, overwrite, bufferSize, replication,\n              blockSize, progress, favoredNodes);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path, permission-FsPermission, overwrite-boolean, bufferSize-int, replication-short, blockSize-long, progress-Progressable, favoredNodes-InetSocketAddress[]]",
            "newValue": "[f-Path(modifiers-final), permission-FsPermission(modifiers-final), overwrite-boolean(modifiers-final), bufferSize-int(modifiers-final), replication-short(modifiers-final), blockSize-long(modifiers-final), progress-Progressable(modifiers-final), favoredNodes-InetSocketAddress[](modifiers-final)]"
          }
        }
      ]
    },
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 1:39 PM",
      "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,10 @@\n+  public HdfsDataOutputStream create(Path f, FsPermission permission,\n+      boolean overwrite, int bufferSize, short replication, long blockSize,\n+      Progressable progress, InetSocketAddress[] favoredNodes) throws IOException {\n+    statistics.incrementWriteOps(1);\n+    final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n+        overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n+            : EnumSet.of(CreateFlag.CREATE),\n+        true, replication, blockSize, progress, bufferSize, null, favoredNodes);\n+    return new HdfsDataOutputStream(out, statistics);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public HdfsDataOutputStream create(Path f, FsPermission permission,\n      boolean overwrite, int bufferSize, short replication, long blockSize,\n      Progressable progress, InetSocketAddress[] favoredNodes) throws IOException {\n    statistics.incrementWriteOps(1);\n    final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n        overwrite ? EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)\n            : EnumSet.of(CreateFlag.CREATE),\n        true, replication, blockSize, progress, bufferSize, null, favoredNodes);\n    return new HdfsDataOutputStream(out, statistics);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}