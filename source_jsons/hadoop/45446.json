{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineWriter.java",
  "functionName": "doPosting",
  "functionId": "doPosting___obj-Object(modifiers-final)__path-String(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineWriter.java",
  "functionStartLine": 108,
  "functionEndLine": 142,
  "numCommitsSeen": 39,
  "timeTaken": 3833,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "882f2f04644a13cadb93070d5545f7a4f8691fde",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "5d58858bb6dfc07272ef099d60ca7cfb3b04423c": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "882f2f04644a13cadb93070d5545f7a4f8691fde": "Ymovefromfile",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n   private ClientResponse doPosting(final Object obj, final String path)\n       throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n         @Override\n         public ClientResponse run() throws Exception {\n           return doPostingObject(obj, path);\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         throw (IOException)cause;\n       } else {\n         throw new IOException(cause);\n       }\n     } catch (InterruptedException ie) {\n       throw (IOException)new InterruptedIOException().initCause(ie);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getStatusInfo().getStatusCode()\n             !\u003d ClientResponse.Status.OK.getStatusCode()) {\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg);\n       if (resp !\u003d null) {\n         msg +\u003d \" HTTP error code: \" + resp.getStatus();\n-        if (LOG.isDebugEnabled()) {\n-          String output \u003d resp.getEntity(String.class);\n-          LOG.debug(\"HTTP error code: \" + resp.getStatus()\n-              + \" Server response : \\n\" + output);\n-        }\n+        LOG.debug(\"HTTP error code: {} Server response : \\n{}\",\n+            resp.getStatus(), resp.getEntity(String.class));\n       }\n       throw new YarnException(msg);\n     }\n     return resp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ClientResponse doPosting(final Object obj, final String path)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPostingObject(obj, path);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        throw (IOException)cause;\n      } else {\n        throw new IOException(cause);\n      }\n    } catch (InterruptedException ie) {\n      throw (IOException)new InterruptedIOException().initCause(ie);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getStatusInfo().getStatusCode()\n            !\u003d ClientResponse.Status.OK.getStatusCode()) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (resp !\u003d null) {\n        msg +\u003d \" HTTP error code: \" + resp.getStatus();\n        LOG.debug(\"HTTP error code: {} Server response : \\n{}\",\n            resp.getStatus(), resp.getEntity(String.class));\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineWriter.java",
      "extendedDetails": {}
    },
    "5d58858bb6dfc07272ef099d60ca7cfb3b04423c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9613. [JDK8] Update jersey version to latest 1.x release.\n",
      "commitDate": "20/06/16 4:05 PM",
      "commitName": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "10/03/16 10:51 AM",
      "commitNameOld": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 102.18,
      "commitsBetweenForRepo": 636,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   private ClientResponse doPosting(final Object obj, final String path)\n       throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n         @Override\n         public ClientResponse run() throws Exception {\n           return doPostingObject(obj, path);\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         throw (IOException)cause;\n       } else {\n         throw new IOException(cause);\n       }\n     } catch (InterruptedException ie) {\n       throw (IOException)new InterruptedIOException().initCause(ie);\n     }\n     if (resp \u003d\u003d null ||\n-        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n+        resp.getStatusInfo().getStatusCode()\n+            !\u003d ClientResponse.Status.OK.getStatusCode()) {\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg);\n       if (resp !\u003d null) {\n         msg +\u003d \" HTTP error code: \" + resp.getStatus();\n         if (LOG.isDebugEnabled()) {\n           String output \u003d resp.getEntity(String.class);\n           LOG.debug(\"HTTP error code: \" + resp.getStatus()\n               + \" Server response : \\n\" + output);\n         }\n       }\n       throw new YarnException(msg);\n     }\n     return resp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ClientResponse doPosting(final Object obj, final String path)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPostingObject(obj, path);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        throw (IOException)cause;\n      } else {\n        throw new IOException(cause);\n      }\n    } catch (InterruptedException ie) {\n      throw (IOException)new InterruptedIOException().initCause(ie);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getStatusInfo().getStatusCode()\n            !\u003d ClientResponse.Status.OK.getStatusCode()) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (resp !\u003d null) {\n        msg +\u003d \" HTTP error code: \" + resp.getStatus();\n        if (LOG.isDebugEnabled()) {\n          String output \u003d resp.getEntity(String.class);\n          LOG.debug(\"HTTP error code: \" + resp.getStatus()\n              + \" Server response : \\n\" + output);\n        }\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineWriter.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "23/12/15 5:26 AM",
      "commitNameOld": "882f2f04644a13cadb93070d5545f7a4f8691fde",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 78.23,
      "commitsBetweenForRepo": 495,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,37 @@\n   private ClientResponse doPosting(final Object obj, final String path)\n       throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n         @Override\n         public ClientResponse run() throws Exception {\n           return doPostingObject(obj, path);\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n-      throw new IOException(e.getCause());\n+      Throwable cause \u003d e.getCause();\n+      if (cause instanceof IOException) {\n+        throw (IOException)cause;\n+      } else {\n+        throw new IOException(cause);\n+      }\n     } catch (InterruptedException ie) {\n-      throw new IOException(ie);\n+      throw (IOException)new InterruptedIOException().initCause(ie);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg);\n-      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n-        String output \u003d resp.getEntity(String.class);\n-        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n-            + \" Server response : \\n\" + output);\n+      if (resp !\u003d null) {\n+        msg +\u003d \" HTTP error code: \" + resp.getStatus();\n+        if (LOG.isDebugEnabled()) {\n+          String output \u003d resp.getEntity(String.class);\n+          LOG.debug(\"HTTP error code: \" + resp.getStatus()\n+              + \" Server response : \\n\" + output);\n+        }\n       }\n       throw new YarnException(msg);\n     }\n     return resp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ClientResponse doPosting(final Object obj, final String path)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPostingObject(obj, path);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        throw (IOException)cause;\n      } else {\n        throw new IOException(cause);\n      }\n    } catch (InterruptedException ie) {\n      throw (IOException)new InterruptedIOException().initCause(ie);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (resp !\u003d null) {\n        msg +\u003d \" HTTP error code: \" + resp.getStatus();\n        if (LOG.isDebugEnabled()) {\n          String output \u003d resp.getEntity(String.class);\n          LOG.debug(\"HTTP error code: \" + resp.getStatus()\n              + \" Server response : \\n\" + output);\n        }\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineWriter.java",
      "extendedDetails": {}
    },
    "882f2f04644a13cadb93070d5545f7a4f8691fde": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-4234. New put APIs in TimelineClient for ats v1.5. Contributed by Xuan Gong.\n",
      "commitDate": "23/12/15 5:26 AM",
      "commitName": "882f2f04644a13cadb93070d5545f7a4f8691fde",
      "commitAuthor": "Junping Du",
      "commitDateOld": "22/12/15 7:42 PM",
      "commitNameOld": "8c180a13c82ab9d60f595e6942e35d51024dab53",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private ClientResponse doPosting(final Object obj, final String path)\n       throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n         @Override\n         public ClientResponse run() throws Exception {\n           return doPostingObject(obj, path);\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n-        throw new IOException(e.getCause());\n+      throw new IOException(e.getCause());\n     } catch (InterruptedException ie) {\n       throw new IOException(ie);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg);\n       if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n         String output \u003d resp.getEntity(String.class);\n         LOG.debug(\"HTTP error code: \" + resp.getStatus()\n             + \" Server response : \\n\" + output);\n       }\n       throw new YarnException(msg);\n     }\n     return resp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ClientResponse doPosting(final Object obj, final String path)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPostingObject(obj, path);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new IOException(e.getCause());\n    } catch (InterruptedException ie) {\n      throw new IOException(ie);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n        String output \u003d resp.getEntity(String.class);\n        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n            + \" Server response : \\n\" + output);\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineWriter.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineWriter.java",
        "oldMethodName": "doPosting",
        "newMethodName": "doPosting"
      }
    },
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-3287. Made TimelineClient put methods do as the correct login context. Contributed by Daryn Sharp and Jonathan Eagles.\n",
      "commitDate": "09/03/15 1:54 PM",
      "commitName": "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3287. Made TimelineClient put methods do as the correct login context. Contributed by Daryn Sharp and Jonathan Eagles.\n",
          "commitDate": "09/03/15 1:54 PM",
          "commitName": "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "06/03/15 1:32 PM",
          "commitNameOld": "d1abc5d4fc00bb1b226066684556ba16ace71744",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.97,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,29 @@\n-  private ClientResponse doPosting(Object obj, String path) throws IOException, YarnException {\n+  private ClientResponse doPosting(final Object obj, final String path)\n+      throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n-      resp \u003d doPostingObject(obj, path);\n-    } catch (RuntimeException re) {\n-      // runtime exception is expected if the client cannot connect the server\n-      String msg \u003d\n-          \"Failed to get the response from the timeline server.\";\n-      LOG.error(msg, re);\n-      throw re;\n+      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n+        @Override\n+        public ClientResponse run() throws Exception {\n+          return doPostingObject(obj, path);\n+        }\n+      });\n+    } catch (UndeclaredThrowableException e) {\n+        throw new IOException(e.getCause());\n+    } catch (InterruptedException ie) {\n+      throw new IOException(ie);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg);\n       if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n         String output \u003d resp.getEntity(String.class);\n         LOG.debug(\"HTTP error code: \" + resp.getStatus()\n             + \" Server response : \\n\" + output);\n       }\n       throw new YarnException(msg);\n     }\n     return resp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ClientResponse doPosting(final Object obj, final String path)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPostingObject(obj, path);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n        throw new IOException(e.getCause());\n    } catch (InterruptedException ie) {\n      throw new IOException(ie);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n        String output \u003d resp.getEntity(String.class);\n        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n            + \" Server response : \\n\" + output);\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-3287. Made TimelineClient put methods do as the correct login context. Contributed by Daryn Sharp and Jonathan Eagles.\n",
          "commitDate": "09/03/15 1:54 PM",
          "commitName": "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "06/03/15 1:32 PM",
          "commitNameOld": "d1abc5d4fc00bb1b226066684556ba16ace71744",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.97,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,29 @@\n-  private ClientResponse doPosting(Object obj, String path) throws IOException, YarnException {\n+  private ClientResponse doPosting(final Object obj, final String path)\n+      throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n-      resp \u003d doPostingObject(obj, path);\n-    } catch (RuntimeException re) {\n-      // runtime exception is expected if the client cannot connect the server\n-      String msg \u003d\n-          \"Failed to get the response from the timeline server.\";\n-      LOG.error(msg, re);\n-      throw re;\n+      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n+        @Override\n+        public ClientResponse run() throws Exception {\n+          return doPostingObject(obj, path);\n+        }\n+      });\n+    } catch (UndeclaredThrowableException e) {\n+        throw new IOException(e.getCause());\n+    } catch (InterruptedException ie) {\n+      throw new IOException(ie);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg);\n       if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n         String output \u003d resp.getEntity(String.class);\n         LOG.debug(\"HTTP error code: \" + resp.getStatus()\n             + \" Server response : \\n\" + output);\n       }\n       throw new YarnException(msg);\n     }\n     return resp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ClientResponse doPosting(final Object obj, final String path)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPostingObject(obj, path);\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n        throw new IOException(e.getCause());\n    } catch (InterruptedException ie) {\n      throw new IOException(ie);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n        String output \u003d resp.getEntity(String.class);\n        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n            + \" Server response : \\n\" + output);\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
          "extendedDetails": {
            "oldValue": "[obj-Object, path-String]",
            "newValue": "[obj-Object(modifiers-final), path-String(modifiers-final)]"
          }
        }
      ]
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  private ClientResponse doPosting(Object obj, String path) throws IOException, YarnException {\n+    ClientResponse resp;\n+    try {\n+      resp \u003d doPostingObject(obj, path);\n+    } catch (RuntimeException re) {\n+      // runtime exception is expected if the client cannot connect the server\n+      String msg \u003d\n+          \"Failed to get the response from the timeline server.\";\n+      LOG.error(msg, re);\n+      throw re;\n+    }\n+    if (resp \u003d\u003d null ||\n+        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n+      String msg \u003d\n+          \"Failed to get the response from the timeline server.\";\n+      LOG.error(msg);\n+      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n+        String output \u003d resp.getEntity(String.class);\n+        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n+            + \" Server response : \\n\" + output);\n+      }\n+      throw new YarnException(msg);\n+    }\n+    return resp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ClientResponse doPosting(Object obj, String path) throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d doPostingObject(obj, path);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw re;\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n        String output \u003d resp.getEntity(String.class);\n        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n            + \" Server response : \\n\" + output);\n      }\n      throw new YarnException(msg);\n    }\n    return resp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}