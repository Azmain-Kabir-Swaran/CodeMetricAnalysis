{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VolumeManagerImpl.java",
  "functionName": "initCsiAdaptorCache",
  "functionId": "initCsiAdaptorCache___adaptorMap-Map__String,CsiAdaptorProtocol__(modifiers-final)__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/VolumeManagerImpl.java",
  "functionStartLine": 78,
  "functionEndLine": 114,
  "numCommitsSeen": 3,
  "timeTaken": 1046,
  "changeHistory": [
    "5fb14e0635f850c63e009f954b8539a401d0f90a"
  ],
  "changeHistoryShort": {
    "5fb14e0635f850c63e009f954b8539a401d0f90a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5fb14e0635f850c63e009f954b8539a401d0f90a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8953. [CSI] CSI driver adaptor module support in NodeManager. Contributed by Weiwei Yang.\n",
      "commitDate": "19/11/18 6:32 PM",
      "commitName": "5fb14e0635f850c63e009f954b8539a401d0f90a",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,37 @@\n+  private void initCsiAdaptorCache(\n+      final Map\u003cString, CsiAdaptorProtocol\u003e adaptorMap, Configuration conf)\n+      throws IOException, YarnException {\n+    LOG.info(\"Initializing cache for csi-driver-adaptors\");\n+    String[] addresses \u003d\n+        conf.getStrings(YarnConfiguration.NM_CSI_ADAPTOR_ADDRESSES);\n+    if (addresses !\u003d null \u0026\u0026 addresses.length \u003e 0) {\n+      for (String addr : addresses) {\n+        LOG.info(\"Found csi-driver-adaptor socket address: \" + addr);\n+        InetSocketAddress address \u003d NetUtils.createSocketAddr(addr);\n+        YarnRPC rpc \u003d YarnRPC.create(conf);\n+        UserGroupInformation currentUser \u003d\n+            UserGroupInformation.getCurrentUser();\n+        CsiAdaptorProtocol adaptorClient \u003d NMProxy\n+            .createNMProxy(conf, CsiAdaptorProtocol.class, currentUser, rpc,\n+                address);\n+        // Attempt to resolve the driver by contacting to\n+        // the diver\u0027s identity service on the given address.\n+        // If the call failed, the initialization is also failed\n+        // in order running into inconsistent state.\n+        LOG.info(\"Retrieving info from csi-driver-adaptor on address \" + addr);\n+        GetPluginInfoResponse response \u003d\n+            adaptorClient.getPluginInfo(GetPluginInfoRequest.newInstance());\n+        if (!Strings.isNullOrEmpty(response.getDriverName())) {\n+          String driverName \u003d response.getDriverName();\n+          if (adaptorMap.containsKey(driverName)) {\n+            throw new YarnException(\n+                \"Duplicate driver adaptor found,\" + \" driver name: \"\n+                    + driverName);\n+          }\n+          adaptorMap.put(driverName, adaptorClient);\n+          LOG.info(\"CSI Adaptor added to the cache, adaptor name: \" + driverName\n+              + \", driver version: \" + response.getVersion());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initCsiAdaptorCache(\n      final Map\u003cString, CsiAdaptorProtocol\u003e adaptorMap, Configuration conf)\n      throws IOException, YarnException {\n    LOG.info(\"Initializing cache for csi-driver-adaptors\");\n    String[] addresses \u003d\n        conf.getStrings(YarnConfiguration.NM_CSI_ADAPTOR_ADDRESSES);\n    if (addresses !\u003d null \u0026\u0026 addresses.length \u003e 0) {\n      for (String addr : addresses) {\n        LOG.info(\"Found csi-driver-adaptor socket address: \" + addr);\n        InetSocketAddress address \u003d NetUtils.createSocketAddr(addr);\n        YarnRPC rpc \u003d YarnRPC.create(conf);\n        UserGroupInformation currentUser \u003d\n            UserGroupInformation.getCurrentUser();\n        CsiAdaptorProtocol adaptorClient \u003d NMProxy\n            .createNMProxy(conf, CsiAdaptorProtocol.class, currentUser, rpc,\n                address);\n        // Attempt to resolve the driver by contacting to\n        // the diver\u0027s identity service on the given address.\n        // If the call failed, the initialization is also failed\n        // in order running into inconsistent state.\n        LOG.info(\"Retrieving info from csi-driver-adaptor on address \" + addr);\n        GetPluginInfoResponse response \u003d\n            adaptorClient.getPluginInfo(GetPluginInfoRequest.newInstance());\n        if (!Strings.isNullOrEmpty(response.getDriverName())) {\n          String driverName \u003d response.getDriverName();\n          if (adaptorMap.containsKey(driverName)) {\n            throw new YarnException(\n                \"Duplicate driver adaptor found,\" + \" driver name: \"\n                    + driverName);\n          }\n          adaptorMap.put(driverName, adaptorClient);\n          LOG.info(\"CSI Adaptor added to the cache, adaptor name: \" + driverName\n              + \", driver version: \" + response.getVersion());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/VolumeManagerImpl.java"
    }
  }
}