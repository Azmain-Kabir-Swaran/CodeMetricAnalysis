{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalResourcesTrackerImpl.java",
  "functionName": "remove",
  "functionId": "remove___rem-LocalizedResource__delService-DeletionService",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
  "functionStartLine": 382,
  "functionEndLine": 406,
  "numCommitsSeen": 23,
  "timeTaken": 7975,
  "changeHistory": [
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
    "66598697a6e777615334ebde5ba7738135da83ae",
    "3e0203a3a428460c1eb9f0f265fb520737b64d55",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "dbc82dbdfb2c00d2193d3f300277cba6494d84d7",
    "02a81203bd0ff6116e3c68d376b3af3838231986",
    "8fb67650b146573c20ae010e28b1eca6e16433b3",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Ybodychange",
    "3e0203a3a428460c1eb9f0f265fb520737b64d55": "Ybodychange",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "dbc82dbdfb2c00d2193d3f300277cba6494d84d7": "Ybodychange",
    "02a81203bd0ff6116e3c68d376b3af3838231986": "Ybodychange",
    "8fb67650b146573c20ae010e28b1eca6e16433b3": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "547f18cb96aeda55cc19b38be2be4d631b3a5f4f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6366. Refactor the NodeManager DeletionService to support additional DeletionTask types. Contributed by Shane Kumpf.\n",
      "commitDate": "31/05/17 3:45 AM",
      "commitName": "547f18cb96aeda55cc19b38be2be4d631b3a5f4f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/05/17 7:37 AM",
      "commitNameOld": "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.84,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n  // current synchronization guaranteed by crude RLS event for cleanup\n     LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n       LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n           + \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n         || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n       // internal error\n       LOG.error(\"Attempt to remove resource: \" + rsrc\n           + \" with non-zero refcount\");\n       return false;\n     } else { // ResourceState is LOCALIZED or INIT\n       if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n-        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n+        FileDeletionTask deletionTask \u003d new FileDeletionTask(delService,\n+            getUser(), getPathToDelete(rsrc.getLocalPath()), null);\n+        delService.delete(deletionTask);\n       }\n       removeResource(rem.getRequest());\n       LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      return false;\n    } else { // ResourceState is LOCALIZED or INIT\n      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n        FileDeletionTask deletionTask \u003d new FileDeletionTask(delService,\n            getUser(), getPathToDelete(rsrc.getLocalPath()), null);\n        delService.delete(deletionTask);\n      }\n      removeResource(rem.getRequest());\n      LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\n      return true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/08/13 12:51 PM",
      "commitNameOld": "3e0203a3a428460c1eb9f0f265fb520737b64d55",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 296.82,
      "commitsBetweenForRepo": 1990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n  // current synchronization guaranteed by crude RLS event for cleanup\n     LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n       LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n           + \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n         || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n       // internal error\n       LOG.error(\"Attempt to remove resource: \" + rsrc\n           + \" with non-zero refcount\");\n       return false;\n     } else { // ResourceState is LOCALIZED or INIT\n-      localrsrc.remove(rem.getRequest());\n       if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n         delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n       }\n-      decrementFileCountForLocalCacheDirectory(rem.getRequest(), rsrc);\n+      removeResource(rem.getRequest());\n       LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      return false;\n    } else { // ResourceState is LOCALIZED or INIT\n      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n      }\n      removeResource(rem.getRequest());\n      LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\n      return true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "3e0203a3a428460c1eb9f0f265fb520737b64d55": {
      "type": "Ybodychange",
      "commitMessage": "YARN-985. Nodemanager should log where a resource was localized (Ravi Prakash via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1511100 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/08/13 12:51 PM",
      "commitName": "3e0203a3a428460c1eb9f0f265fb520737b64d55",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "19/04/13 3:35 PM",
      "commitNameOld": "c570309b078d3c6080e89cd90c7c2157a270aaca",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 108.89,
      "commitsBetweenForRepo": 677,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n  // current synchronization guaranteed by crude RLS event for cleanup\n     LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n       LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n           + \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n         || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n       // internal error\n       LOG.error(\"Attempt to remove resource: \" + rsrc\n           + \" with non-zero refcount\");\n       return false;\n     } else { // ResourceState is LOCALIZED or INIT\n       localrsrc.remove(rem.getRequest());\n       if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n         delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n       }\n       decrementFileCountForLocalCacheDirectory(rem.getRequest(), rsrc);\n+      LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      return false;\n    } else { // ResourceState is LOCALIZED or INIT\n      localrsrc.remove(rem.getRequest());\n      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n      }\n      decrementFileCountForLocalCacheDirectory(rem.getRequest(), rsrc);\n      LOG.info(\"Removed \" + rsrc.getLocalPath() + \" from localized cache\");\n      return true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-467. Modify public distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/13 10:00 PM",
      "commitName": "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 237.98,
      "commitsBetweenForRepo": 1219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n  // current synchronization guaranteed by crude RLS event for cleanup\n     LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n       LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n           + \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n         || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n       // internal error\n       LOG.error(\"Attempt to remove resource: \" + rsrc\n           + \" with non-zero refcount\");\n       return false;\n     } else { // ResourceState is LOCALIZED or INIT\n       localrsrc.remove(rem.getRequest());\n       if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n         delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n       }\n+      decrementFileCountForLocalCacheDirectory(rem.getRequest(), rsrc);\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      return false;\n    } else { // ResourceState is LOCALIZED or INIT\n      localrsrc.remove(rem.getRequest());\n      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n      }\n      decrementFileCountForLocalCacheDirectory(rem.getRequest(), rsrc);\n      return true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      return false;\n    } else { // ResourceState is LOCALIZED or INIT\n      localrsrc.remove(rem.getRequest());\n      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n      }\n      return true;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
      }
    },
    "dbc82dbdfb2c00d2193d3f300277cba6494d84d7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3379. Fixed LocalResourceTracker in NodeManager to remove deleted cache entries correctly. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1200747 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11 10:30 PM",
      "commitName": "dbc82dbdfb2c00d2193d3f300277cba6494d84d7",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/10/11 9:45 PM",
      "commitNameOld": "11b9dd4e844c762f8c53e5fafa25f29eece1bc87",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 31.07,
      "commitsBetweenForRepo": 267,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n  // current synchronization guaranteed by crude RLS event for cleanup\n     LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n       LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n           + \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n         || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n       // internal error\n       LOG.error(\"Attempt to remove resource: \" + rsrc\n           + \" with non-zero refcount\");\n-      assert false;\n       return false;\n+    } else { // ResourceState is LOCALIZED or INIT\n+      localrsrc.remove(rem.getRequest());\n+      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n+        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n+      }\n+      return true;\n     }\n-    if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n-      delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n-    }\n-    return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      return false;\n    } else { // ResourceState is LOCALIZED or INIT\n      localrsrc.remove(rem.getRequest());\n      if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n        delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n      }\n      return true;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "02a81203bd0ff6116e3c68d376b3af3838231986": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2751. Modified NodeManager to stop leaving around local files after application finishes. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1180071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/10/11 8:23 AM",
      "commitName": "02a81203bd0ff6116e3c68d376b3af3838231986",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/09/11 11:21 PM",
      "commitNameOld": "8fb67650b146573c20ae010e28b1eca6e16433b3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.38,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n-    // current synchronization guaranteed by crude RLS event for cleanup\n+ // current synchronization guaranteed by crude RLS event for cleanup\n     LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n-      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() +\n-          \" from \" + getUser());\n+      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n+          + \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n-        || ResourceState.DOWNLOADING.equals(rsrc.getState())\n-        || rsrc !\u003d rem) {\n+        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n       // internal error\n-      LOG.error(\"Attempt to remove resource: \" + rsrc + \" with non-zero refcount\");\n+      LOG.error(\"Attempt to remove resource: \" + rsrc\n+          + \" with non-zero refcount\");\n       assert false;\n       return false;\n     }\n-    localrsrc.remove(rem.getRequest());\n     if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n-      delService.delete(getUser(), rsrc.getLocalPath());\n+      delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest()\n          + \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState()) || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc\n          + \" with non-zero refcount\");\n      assert false;\n      return false;\n    }\n    if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n      delService.delete(getUser(), getPathToDelete(rsrc.getLocalPath()));\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "8fb67650b146573c20ae010e28b1eca6e16433b3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2691. Finish up the cleanup of distributed cache file resources and related tests. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1167676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/11 11:21 PM",
      "commitName": "8fb67650b146573c20ae010e28b1eca6e16433b3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 17.26,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   public boolean remove(LocalizedResource rem, DeletionService delService) {\n     // current synchronization guaranteed by crude RLS event for cleanup\n-    LocalizedResource rsrc \u003d localrsrc.remove(rem.getRequest());\n+    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n     if (null \u003d\u003d rsrc) {\n       LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() +\n           \" from \" + getUser());\n       return true;\n     }\n     if (rsrc.getRefCount() \u003e 0\n         || ResourceState.DOWNLOADING.equals(rsrc.getState())\n         || rsrc !\u003d rem) {\n       // internal error\n-      LOG.error(\"Attempt to remove resource with non-zero refcount\");\n+      LOG.error(\"Attempt to remove resource: \" + rsrc + \" with non-zero refcount\");\n       assert false;\n       return false;\n     }\n+    localrsrc.remove(rem.getRequest());\n     if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n       delService.delete(getUser(), rsrc.getLocalPath());\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n    // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.get(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() +\n          \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState())\n        || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource: \" + rsrc + \" with non-zero refcount\");\n      assert false;\n      return false;\n    }\n    localrsrc.remove(rem.getRequest());\n    if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n      delService.delete(getUser(), rsrc.getLocalPath());\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n    // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.remove(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() +\n          \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState())\n        || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource with non-zero refcount\");\n      assert false;\n      return false;\n    }\n    if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n      delService.delete(getUser(), rsrc.getLocalPath());\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public boolean remove(LocalizedResource rem, DeletionService delService) {\n+    // current synchronization guaranteed by crude RLS event for cleanup\n+    LocalizedResource rsrc \u003d localrsrc.remove(rem.getRequest());\n+    if (null \u003d\u003d rsrc) {\n+      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() +\n+          \" from \" + getUser());\n+      return true;\n+    }\n+    if (rsrc.getRefCount() \u003e 0\n+        || ResourceState.DOWNLOADING.equals(rsrc.getState())\n+        || rsrc !\u003d rem) {\n+      // internal error\n+      LOG.error(\"Attempt to remove resource with non-zero refcount\");\n+      assert false;\n+      return false;\n+    }\n+    if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n+      delService.delete(getUser(), rsrc.getLocalPath());\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean remove(LocalizedResource rem, DeletionService delService) {\n    // current synchronization guaranteed by crude RLS event for cleanup\n    LocalizedResource rsrc \u003d localrsrc.remove(rem.getRequest());\n    if (null \u003d\u003d rsrc) {\n      LOG.error(\"Attempt to remove absent resource: \" + rem.getRequest() +\n          \" from \" + getUser());\n      return true;\n    }\n    if (rsrc.getRefCount() \u003e 0\n        || ResourceState.DOWNLOADING.equals(rsrc.getState())\n        || rsrc !\u003d rem) {\n      // internal error\n      LOG.error(\"Attempt to remove resource with non-zero refcount\");\n      assert false;\n      return false;\n    }\n    if (ResourceState.LOCALIZED.equals(rsrc.getState())) {\n      delService.delete(getUser(), rsrc.getLocalPath());\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
    }
  }
}