{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AHSWebServices.java",
  "functionName": "getContainerLogsInfo",
  "functionId": "getContainerLogsInfo___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID))__nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID))__redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\"))__manualRedirection-boolean(annotations-@QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)-@DefaultValue(\"false\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
  "functionStartLine": 221,
  "functionEndLine": 237,
  "numCommitsSeen": 101,
  "timeTaken": 7498,
  "changeHistory": [
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "8d1981806feb8278966c02a9eff42d72541bb35e",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "34424e98a618a9fefce800746168be2b72e17de9",
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "cf695577aa6d9715b77ab7309ecd792ef226c439"
  ],
  "changeHistoryShort": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": "Ybodychange",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "8d1981806feb8278966c02a9eff42d72541bb35e": "Ybodychange",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "34424e98a618a9fefce800746168be2b72e17de9": "Ymultichange(Yparameterchange,Ybodychange)",
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ybodychange",
    "cf695577aa6d9715b77ab7309ecd792ef226c439": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
      "commitDate": "28/04/20 9:53 AM",
      "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,17 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n-      @DefaultValue(\"false\") boolean redirected_from_node) {\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n+      @DefaultValue(\"false\") boolean manualRedirection) {\n     initForReadableEndpoints(res);\n \n     WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n         LogServlet.createRequestFromContainerId(containerIdStr);\n \n     return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n-        redirected_from_node, null);\n+        redirectedFromNode, null, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n      @DefaultValue(\"false\") boolean manualRedirection) {\n    initForReadableEndpoints(res);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        LogServlet.createRequestFromContainerId(containerIdStr);\n\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n        redirectedFromNode, null, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirected_from_node-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), manualRedirection-boolean(annotations-@QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)-@DefaultValue(\"false\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,17 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n-      @DefaultValue(\"false\") boolean redirected_from_node) {\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n+      @DefaultValue(\"false\") boolean manualRedirection) {\n     initForReadableEndpoints(res);\n \n     WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n         LogServlet.createRequestFromContainerId(containerIdStr);\n \n     return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n-        redirected_from_node, null);\n+        redirectedFromNode, null, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n      @DefaultValue(\"false\") boolean manualRedirection) {\n    initForReadableEndpoints(res);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        LogServlet.createRequestFromContainerId(containerIdStr);\n\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n        redirectedFromNode, null, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal\n",
      "commitDate": "06/02/20 3:25 AM",
      "commitName": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/01/20 8:16 AM",
      "commitNameOld": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 30.8,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,15 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirected_from_node) {\n     initForReadableEndpoints(res);\n-    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,\n+\n+    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n+        LogServlet.createRequestFromContainerId(containerIdStr);\n+\n+    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n         redirected_from_node, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    initForReadableEndpoints(res);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        LogServlet.createRequestFromContainerId(containerIdStr);\n\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n        redirected_from_node, null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal\n",
      "commitDate": "06/01/20 8:16 AM",
      "commitName": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/01/20 7:26 AM",
      "commitNameOld": "768ee22e9e73543d2fb193d9b6ec34a247cb0411",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,11 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirected_from_node) {\n-    ContainerId containerId \u003d null;\n     initForReadableEndpoints(res);\n-    try {\n-      containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (IllegalArgumentException e) {\n-      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n-    }\n-\n-    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n-        .getApplicationId();\n-    AppInfo appInfo;\n-    try {\n-      appInfo \u003d super.getApp(req, res, appId.toString());\n-    } catch (Exception ex) {\n-      // directly find logs from HDFS.\n-      return LogWebServiceUtils\n-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n-              false);\n-    }\n-    // if the application finishes, directly find logs\n-    // from HDFS.\n-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n-      return LogWebServiceUtils\n-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n-              false);\n-    }\n-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n-      String appOwner \u003d appInfo.getUser();\n-      String nodeHttpAddress \u003d null;\n-      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n-        try {\n-          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n-        } catch (Exception ex) {\n-          LOG.debug(\"{}\", ex);\n-        }\n-      }\n-      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n-        ContainerInfo containerInfo;\n-        try {\n-          containerInfo \u003d super.getContainer(\n-              req, res, appId.toString(),\n-              containerId.getApplicationAttemptId().toString(),\n-              containerId.toString());\n-        } catch (Exception ex) {\n-          // return log meta for the aggregated logs if exists.\n-          // It will also return empty log meta for the local logs.\n-          return LogWebServiceUtils\n-              .getContainerLogMeta(factory, appId, appOwner, null,\n-                  containerIdStr, true);\n-        }\n-        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n-        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n-        // we would only get log meta for aggregated logs instead of\n-        // re-directing the request\n-        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n-            || redirected_from_node) {\n-          // return log meta for the aggregated logs if exists.\n-          // It will also return empty log meta for the local logs.\n-          // If this is the redirect request from NM, we should not\n-          // re-direct the request back. Simply output the aggregated log meta.\n-          return LogWebServiceUtils\n-              .getContainerLogMeta(factory, appId, appOwner, null,\n-                  containerIdStr, true);\n-        }\n-      }\n-      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n-      String resURI \u003d JOINER.join(\n-          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),\n-          NM_DOWNLOAD_URI_STR, uri);\n-      String query \u003d req.getQueryString();\n-      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n-        resURI +\u003d \"?\" + query;\n-      }\n-      ResponseBuilder response \u003d Response.status(\n-          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n-      response.header(\"Location\", resURI);\n-      return response.build();\n-    } else {\n-      throw new NotFoundException(\n-          \"The application is not at Running or Finished State.\");\n-    }\n+    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,\n+        redirected_from_node, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    initForReadableEndpoints(res);\n    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,\n        redirected_from_node, null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/10/18 4:26 PM",
      "commitNameOld": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 155.0,
      "commitsBetweenForRepo": 1186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,89 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirected_from_node) {\n     ContainerId containerId \u003d null;\n     initForReadableEndpoints(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n               false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n       return LogWebServiceUtils\n           .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n               false);\n     }\n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n         } catch (Exception ex) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(ex.getMessage());\n-          }\n+          LOG.debug(\"{}\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d super.getContainer(\n               req, res, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString());\n         } catch (Exception ex) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           return LogWebServiceUtils\n               .getContainerLogMeta(factory, appId, appOwner, null,\n                   containerIdStr, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get log meta for aggregated logs instead of\n         // re-directing the request\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirected_from_node) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           // If this is the redirect request from NM, we should not\n           // re-direct the request back. Simply output the aggregated log meta.\n           return LogWebServiceUtils\n               .getContainerLogMeta(factory, appId, appOwner, null,\n                   containerIdStr, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"{}\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirected_from_node) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "8d1981806feb8278966c02a9eff42d72541bb35e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
      "commitDate": "11/10/18 4:26 PM",
      "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "10/05/18 7:05 PM",
      "commitNameOld": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 153.89,
      "commitsBetweenForRepo": 1245,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,91 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirected_from_node) {\n     ContainerId containerId \u003d null;\n     initForReadableEndpoints(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n-      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n-    if (isFinishedState(appInfo.getAppState())) {\n-      return getContainerLogMeta(appId, null, null,\n-          containerIdStr, false);\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n     }\n-    if (isRunningState(appInfo.getAppState())) {\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n         } catch (Exception ex) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(ex.getMessage());\n           }\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d super.getContainer(\n               req, res, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString());\n         } catch (Exception ex) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n-          return getContainerLogMeta(appId, appOwner, null,\n-              containerIdStr, true);\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get log meta for aggregated logs instead of\n         // re-directing the request\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirected_from_node) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           // If this is the redirect request from NM, we should not\n           // re-direct the request back. Simply output the aggregated log meta.\n-          return getContainerLogMeta(appId, appOwner, null,\n-              containerIdStr, true);\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n-      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirected_from_node) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(conf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "31/08/17 4:41 PM",
      "commitNameOld": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 252.1,
      "commitsBetweenForRepo": 2411,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirected_from_node) {\n     ContainerId containerId \u003d null;\n-    init(res);\n+    initForReadableEndpoints(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (isFinishedState(appInfo.getAppState())) {\n       return getContainerLogMeta(appId, null, null,\n           containerIdStr, false);\n     }\n     if (isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n         } catch (Exception ex) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(ex.getMessage());\n           }\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d super.getContainer(\n               req, res, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString());\n         } catch (Exception ex) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           return getContainerLogMeta(appId, appOwner, null,\n               containerIdStr, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get log meta for aggregated logs instead of\n         // re-directing the request\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirected_from_node) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           // If this is the redirect request from NM, we should not\n           // re-direct the request back. Simply output the aggregated log meta.\n           return getContainerLogMeta(appId, appOwner, null,\n               containerIdStr, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n       String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirected_from_node) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "34424e98a618a9fefce800746168be2b72e17de9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6314. Potential infinite redirection on YARN log redirection web service. Contributed by Xuan Gong.\n\n(cherry picked from commit 5a9dda796f0e73060ada794ad5752cc6a237ab2e)\n",
      "commitDate": "14/03/17 2:58 AM",
      "commitName": "34424e98a618a9fefce800746168be2b72e17de9",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6314. Potential infinite redirection on YARN log redirection web service. Contributed by Xuan Gong.\n\n(cherry picked from commit 5a9dda796f0e73060ada794ad5752cc6a237ab2e)\n",
          "commitDate": "14/03/17 2:58 AM",
          "commitName": "34424e98a618a9fefce800746168be2b72e17de9",
          "commitAuthor": "Junping Du",
          "commitDateOld": "15/02/17 9:05 AM",
          "commitNameOld": "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 26.7,
          "commitsBetweenForRepo": 163,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,85 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n-      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirected_from_node) {\n     ContainerId containerId \u003d null;\n     init(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n+\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (isFinishedState(appInfo.getAppState())) {\n       return getContainerLogMeta(appId, null, null,\n           containerIdStr, false);\n     }\n     if (isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n         } catch (Exception ex) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(ex.getMessage());\n           }\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d super.getContainer(\n               req, res, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString());\n         } catch (Exception ex) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           return getContainerLogMeta(appId, appOwner, null,\n               containerIdStr, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get log meta for aggregated logs instead of\n         // re-directing the request\n-        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirected_from_node) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n           return getContainerLogMeta(appId, appOwner, null,\n               containerIdStr, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n       String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirected_from_node) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirected_from_node-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6314. Potential infinite redirection on YARN log redirection web service. Contributed by Xuan Gong.\n\n(cherry picked from commit 5a9dda796f0e73060ada794ad5752cc6a237ab2e)\n",
          "commitDate": "14/03/17 2:58 AM",
          "commitName": "34424e98a618a9fefce800746168be2b72e17de9",
          "commitAuthor": "Junping Du",
          "commitDateOld": "15/02/17 9:05 AM",
          "commitNameOld": "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 26.7,
          "commitsBetweenForRepo": 163,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,79 +1,85 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n-      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirected_from_node) {\n     ContainerId containerId \u003d null;\n     init(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n+\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (isFinishedState(appInfo.getAppState())) {\n       return getContainerLogMeta(appId, null, null,\n           containerIdStr, false);\n     }\n     if (isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n         } catch (Exception ex) {\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(ex.getMessage());\n           }\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d super.getContainer(\n               req, res, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString());\n         } catch (Exception ex) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           return getContainerLogMeta(appId, appOwner, null,\n               containerIdStr, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get log meta for aggregated logs instead of\n         // re-directing the request\n-        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirected_from_node) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n           return getContainerLogMeta(appId, appOwner, null,\n               containerIdStr, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n       String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirected_from_node) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirected_from_node) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.\n",
      "commitDate": "07/02/17 2:13 AM",
      "commitName": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.\n",
          "commitDate": "07/02/17 2:13 AM",
          "commitName": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 5.06,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"containerid\") String containerIdStr) {\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n     ContainerId containerId \u003d null;\n     init(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (isFinishedState(appInfo.getAppState())) {\n       return getContainerLogMeta(appId, null, null,\n           containerIdStr, false);\n     }\n     if (isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n-      ContainerInfo containerInfo;\n-      try {\n-        containerInfo \u003d super.getContainer(\n-            req, res, appId.toString(),\n-            containerId.getApplicationAttemptId().toString(),\n-            containerId.toString());\n-      } catch (Exception ex) {\n-        // return log meta for the aggregated logs if exists.\n-        // It will also return empty log meta for the local logs.\n-        return getContainerLogMeta(appId, appOwner, null,\n-            containerIdStr, true);\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n       }\n-      String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d super.getContainer(\n+              req, res, appId.toString(),\n+              containerId.getApplicationAttemptId().toString(),\n+              containerId.toString());\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return getContainerLogMeta(appId, appOwner, null,\n+              containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return getContainerLogMeta(appId, appOwner, null,\n+              containerIdStr, true);\n+        }\n+      }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n-      String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n+      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(\"containerid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.\n",
          "commitDate": "07/02/17 2:13 AM",
          "commitName": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 5.06,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"containerid\") String containerIdStr) {\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n     ContainerId containerId \u003d null;\n     init(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (isFinishedState(appInfo.getAppState())) {\n       return getContainerLogMeta(appId, null, null,\n           containerIdStr, false);\n     }\n     if (isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n-      ContainerInfo containerInfo;\n-      try {\n-        containerInfo \u003d super.getContainer(\n-            req, res, appId.toString(),\n-            containerId.getApplicationAttemptId().toString(),\n-            containerId.toString());\n-      } catch (Exception ex) {\n-        // return log meta for the aggregated logs if exists.\n-        // It will also return empty log meta for the local logs.\n-        return getContainerLogMeta(appId, appOwner, null,\n-            containerIdStr, true);\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n       }\n-      String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d super.getContainer(\n+              req, res, appId.toString(),\n+              containerId.getApplicationAttemptId().toString(),\n+              containerId.toString());\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return getContainerLogMeta(appId, appOwner, null,\n+              containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return getContainerLogMeta(appId, appOwner, null,\n+              containerIdStr, true);\n+        }\n+      }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n-      String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n+      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.\n",
          "commitDate": "07/02/17 2:13 AM",
          "commitName": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/02/17 12:41 AM",
          "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 5.06,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,79 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"containerid\") String containerIdStr) {\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n     ContainerId containerId \u003d null;\n     init(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (isFinishedState(appInfo.getAppState())) {\n       return getContainerLogMeta(appId, null, null,\n           containerIdStr, false);\n     }\n     if (isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n-      ContainerInfo containerInfo;\n-      try {\n-        containerInfo \u003d super.getContainer(\n-            req, res, appId.toString(),\n-            containerId.getApplicationAttemptId().toString(),\n-            containerId.toString());\n-      } catch (Exception ex) {\n-        // return log meta for the aggregated logs if exists.\n-        // It will also return empty log meta for the local logs.\n-        return getContainerLogMeta(appId, appOwner, null,\n-            containerIdStr, true);\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n       }\n-      String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d super.getContainer(\n+              req, res, appId.toString(),\n+              containerId.getApplicationAttemptId().toString(),\n+              containerId.toString());\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return getContainerLogMeta(appId, appOwner, null,\n+              containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return getContainerLogMeta(appId, appOwner, null,\n+              containerIdStr, true);\n+        }\n+      }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n-      String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n+      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(conf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d super.getContainer(\n              req, res, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString());\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return getContainerLogMeta(appId, appOwner, null,\n              containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(getAbsoluteNMWebAddress(nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(\"containerid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID))]"
          }
        }
      ]
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/01/17 4:20 PM",
      "commitNameOld": "cf695577aa6d9715b77ab7309ecd792ef226c439",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.96,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public Response getContainerLogsInfo(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"containerid\") String containerIdStr) {\n     ContainerId containerId \u003d null;\n     init(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (Exception e) {\n+    } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d super.getApp(req, res, appId.toString());\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n-      return getContainerLogMeta(appId, null, null, containerIdStr);\n+      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n     }\n-    String appOwner \u003d appInfo.getUser();\n-    ContainerInfo containerInfo;\n-    try {\n-      containerInfo \u003d super.getContainer(\n-          req, res, appId.toString(),\n-          containerId.getApplicationAttemptId().toString(),\n-          containerId.toString());\n-    } catch (Exception ex) {\n-      if (isFinishedState(appInfo.getAppState())) {\n-        // directly find logs from HDFS.\n-        return getContainerLogMeta(appId, appOwner, null, containerIdStr);\n-      }\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-          \"Can not get ContainerInfo for the container: \" + containerId);\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (isFinishedState(appInfo.getAppState())) {\n+      return getContainerLogMeta(appId, null, null,\n+          containerIdStr, false);\n     }\n-    String nodeId \u003d containerInfo.getNodeId();\n     if (isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      ContainerInfo containerInfo;\n+      try {\n+        containerInfo \u003d super.getContainer(\n+            req, res, appId.toString(),\n+            containerId.getApplicationAttemptId().toString(),\n+            containerId.toString());\n+      } catch (Exception ex) {\n+        // return log meta for the aggregated logs if exists.\n+        // It will also return empty log meta for the local logs.\n+        return getContainerLogMeta(appId, appOwner, null,\n+            containerIdStr, true);\n+      }\n       String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n       String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n-    } else if (isFinishedState(appInfo.getAppState())) {\n-      return getContainerLogMeta(appId, appOwner, nodeId,\n-              containerIdStr);\n     } else {\n-      return createBadResponse(Status.NOT_FOUND,\n+      throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"containerid\") String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr, false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, null, null,\n          containerIdStr, false);\n    }\n    if (isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      ContainerInfo containerInfo;\n      try {\n        containerInfo \u003d super.getContainer(\n            req, res, appId.toString(),\n            containerId.getApplicationAttemptId().toString(),\n            containerId.toString());\n      } catch (Exception ex) {\n        // return log meta for the aggregated logs if exists.\n        // It will also return empty log meta for the local logs.\n        return getContainerLogMeta(appId, appOwner, null,\n            containerIdStr, true);\n      }\n      String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "cf695577aa6d9715b77ab7309ecd792ef226c439": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6011. Add a new web service to list the files on a container in AHSWebService. Contributed by Xuan Gong.\n",
      "commitDate": "16/01/17 4:20 PM",
      "commitName": "cf695577aa6d9715b77ab7309ecd792ef226c439",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,56 @@\n+  public Response getContainerLogsInfo(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"containerid\") String containerIdStr) {\n+    ContainerId containerId \u003d null;\n+    init(res);\n+    try {\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (Exception e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n+        .getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d super.getApp(req, res, appId.toString());\n+    } catch (Exception ex) {\n+      // directly find logs from HDFS.\n+      return getContainerLogMeta(appId, null, null, containerIdStr);\n+    }\n+    String appOwner \u003d appInfo.getUser();\n+    ContainerInfo containerInfo;\n+    try {\n+      containerInfo \u003d super.getContainer(\n+          req, res, appId.toString(),\n+          containerId.getApplicationAttemptId().toString(),\n+          containerId.toString());\n+    } catch (Exception ex) {\n+      if (isFinishedState(appInfo.getAppState())) {\n+        // directly find logs from HDFS.\n+        return getContainerLogMeta(appId, appOwner, null, containerIdStr);\n+      }\n+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+          \"Can not get ContainerInfo for the container: \" + containerId);\n+    }\n+    String nodeId \u003d containerInfo.getNodeId();\n+    if (isRunningState(appInfo.getAppState())) {\n+      String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      ResponseBuilder response \u003d Response.status(\n+          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else if (isFinishedState(appInfo.getAppState())) {\n+      return getContainerLogMeta(appId, appOwner, nodeId,\n+              containerIdStr);\n+    } else {\n+      return createBadResponse(Status.NOT_FOUND,\n+          \"The application is not at Running or Finished State.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"containerid\") String containerIdStr) {\n    ContainerId containerId \u003d null;\n    init(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (Exception e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d super.getApp(req, res, appId.toString());\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return getContainerLogMeta(appId, null, null, containerIdStr);\n    }\n    String appOwner \u003d appInfo.getUser();\n    ContainerInfo containerInfo;\n    try {\n      containerInfo \u003d super.getContainer(\n          req, res, appId.toString(),\n          containerId.getApplicationAttemptId().toString(),\n          containerId.toString());\n    } catch (Exception ex) {\n      if (isFinishedState(appInfo.getAppState())) {\n        // directly find logs from HDFS.\n        return getContainerLogMeta(appId, appOwner, null, containerIdStr);\n      }\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          \"Can not get ContainerInfo for the container: \" + containerId);\n    }\n    String nodeId \u003d containerInfo.getNodeId();\n    if (isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(nodeHttpAddress, NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else if (isFinishedState(appInfo.getAppState())) {\n      return getContainerLogMeta(appId, appOwner, nodeId,\n              containerIdStr);\n    } else {\n      return createBadResponse(Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java"
    }
  }
}