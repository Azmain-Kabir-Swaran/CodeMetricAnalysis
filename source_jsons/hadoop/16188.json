{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterRpcClient.java",
  "functionName": "invoke",
  "functionId": "invoke___nsId-String__retryCount-int__method-Method(modifiers-final)__obj-Object(modifiers-final)__params-Object(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
  "functionStartLine": 537,
  "functionEndLine": 577,
  "numCommitsSeen": 35,
  "timeTaken": 4343,
  "changeHistory": [
    "263413e83840c7795a988e3939cd292d020c8d5f",
    "8e779a151e20528ceda1b5b44812412f4ae7f83d",
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "8896d20b91520053a6bbfb680adb345cd24f4142",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "263413e83840c7795a988e3939cd292d020c8d5f": "Ybodychange",
    "8e779a151e20528ceda1b5b44812412f4ae7f83d": "Ybodychange",
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "8896d20b91520053a6bbfb680adb345cd24f4142": "Ymultichange(Yparameterchange,Ybodychange)",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "263413e83840c7795a988e3939cd292d020c8d5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15112. RBF: Do not return FileNotFoundException when a subcluster is unavailable.\n",
      "commitDate": "16/01/20 10:39 AM",
      "commitName": "263413e83840c7795a988e3939cd292d020c8d5f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "01/11/19 10:14 AM",
      "commitNameOld": "f18bbdd9d84cc1a23d33524f5cb61321cdb1b926",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 76.06,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,41 @@\n   private Object invoke(String nsId, int retryCount, final Method method,\n       final Object obj, final Object... params) throws IOException {\n     try {\n       return method.invoke(obj, params);\n     } catch (IllegalAccessException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (IllegalArgumentException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (InvocationTargetException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         IOException ioe \u003d (IOException) cause;\n \n         // Check if we should retry.\n         RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n         if (decision \u003d\u003d RetryDecision.RETRY) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpRetries();\n           }\n \n           // retry\n           return invoke(nsId, ++retryCount, method, obj, params);\n         } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n           // failover, invoker looks for standby exceptions for failover.\n           if (ioe instanceof StandbyException) {\n             throw ioe;\n-          } else if (ioe instanceof ConnectException ||\n-              ioe instanceof ConnectTimeoutException) {\n+          } else if (isUnavailableException(ioe)) {\n             throw ioe;\n           } else {\n             throw new StandbyException(ioe.getMessage());\n           }\n         } else {\n           throw ioe;\n         }\n       } else {\n         throw new IOException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invoke(String nsId, int retryCount, final Method method,\n      final Object obj, final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpRetries();\n          }\n\n          // retry\n          return invoke(nsId, ++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else if (isUnavailableException(ioe)) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "8e779a151e20528ceda1b5b44812412f4ae7f83d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14721. RBF: ProxyOpComplete is not accurate in FederationRPCPerformanceMonitor. Contributed by xuzq.\n",
      "commitDate": "29/08/19 7:38 AM",
      "commitName": "8e779a151e20528ceda1b5b44812412f4ae7f83d",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "28/08/19 10:48 AM",
      "commitNameOld": "48cb58390655b87506fb8b620e4aafd11e38bb34",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,42 @@\n   private Object invoke(String nsId, int retryCount, final Method method,\n       final Object obj, final Object... params) throws IOException {\n     try {\n       return method.invoke(obj, params);\n     } catch (IllegalAccessException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (IllegalArgumentException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (InvocationTargetException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         IOException ioe \u003d (IOException) cause;\n \n         // Check if we should retry.\n         RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n         if (decision \u003d\u003d RetryDecision.RETRY) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpRetries();\n           }\n \n           // retry\n           return invoke(nsId, ++retryCount, method, obj, params);\n         } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n           // failover, invoker looks for standby exceptions for failover.\n           if (ioe instanceof StandbyException) {\n             throw ioe;\n           } else if (ioe instanceof ConnectException ||\n               ioe instanceof ConnectTimeoutException) {\n             throw ioe;\n           } else {\n             throw new StandbyException(ioe.getMessage());\n           }\n         } else {\n-          if (ioe instanceof RemoteException) {\n-            RemoteException re \u003d (RemoteException) ioe;\n-            ioe \u003d re.unwrapRemoteException();\n-            ioe \u003d getCleanException(ioe);\n-          }\n           throw ioe;\n         }\n       } else {\n         throw new IOException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invoke(String nsId, int retryCount, final Method method,\n      final Object obj, final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpRetries();\n          }\n\n          // retry\n          return invoke(nsId, ++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else if (ioe instanceof ConnectException ||\n              ioe instanceof ConnectTimeoutException) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "50aee18a84fcbca38be4272cfa0d33aadafe076d",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   private Object invoke(String nsId, int retryCount, final Method method,\n       final Object obj, final Object... params) throws IOException {\n     try {\n       return method.invoke(obj, params);\n     } catch (IllegalAccessException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (IllegalArgumentException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (InvocationTargetException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         IOException ioe \u003d (IOException) cause;\n \n         // Check if we should retry.\n         RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n         if (decision \u003d\u003d RetryDecision.RETRY) {\n           if (this.rpcMonitor !\u003d null) {\n             this.rpcMonitor.proxyOpRetries();\n           }\n \n           // retry\n           return invoke(nsId, ++retryCount, method, obj, params);\n         } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n           // failover, invoker looks for standby exceptions for failover.\n           if (ioe instanceof StandbyException) {\n             throw ioe;\n+          } else if (ioe instanceof ConnectException ||\n+              ioe instanceof ConnectTimeoutException) {\n+            throw ioe;\n           } else {\n             throw new StandbyException(ioe.getMessage());\n           }\n         } else {\n           if (ioe instanceof RemoteException) {\n             RemoteException re \u003d (RemoteException) ioe;\n             ioe \u003d re.unwrapRemoteException();\n             ioe \u003d getCleanException(ioe);\n           }\n           throw ioe;\n         }\n       } else {\n         throw new IOException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invoke(String nsId, int retryCount, final Method method,\n      final Object obj, final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpRetries();\n          }\n\n          // retry\n          return invoke(nsId, ++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else if (ioe instanceof ConnectException ||\n              ioe instanceof ConnectTimeoutException) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          if (ioe instanceof RemoteException) {\n            RemoteException re \u003d (RemoteException) ioe;\n            ioe \u003d re.unwrapRemoteException();\n            ioe \u003d getCleanException(ioe);\n          }\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Object invoke(String nsId, int retryCount, final Method method,\n      final Object obj, final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpRetries();\n          }\n\n          // retry\n          return invoke(nsId, ++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          if (ioe instanceof RemoteException) {\n            RemoteException re \u003d (RemoteException) ioe;\n            ioe \u003d re.unwrapRemoteException();\n            ioe \u003d getCleanException(ioe);\n          }\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
      }
    },
    "8896d20b91520053a6bbfb680adb345cd24f4142": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13119. RBF: Manage unavailable clusters. Contributed by Yiqun Lin.\n",
      "commitDate": "19/02/18 5:37 PM",
      "commitName": "8896d20b91520053a6bbfb680adb345cd24f4142",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13119. RBF: Manage unavailable clusters. Contributed by Yiqun Lin.\n",
          "commitDate": "19/02/18 5:37 PM",
          "commitName": "8896d20b91520053a6bbfb680adb345cd24f4142",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "12/01/18 4:25 PM",
          "commitNameOld": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 38.05,
          "commitsBetweenForRepo": 233,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,44 @@\n-  private Object invoke(int retryCount, final Method method, final Object obj,\n-      final Object... params) throws IOException {\n+  private Object invoke(String nsId, int retryCount, final Method method,\n+      final Object obj, final Object... params) throws IOException {\n     try {\n       return method.invoke(obj, params);\n     } catch (IllegalAccessException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (IllegalArgumentException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (InvocationTargetException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         IOException ioe \u003d (IOException) cause;\n+\n         // Check if we should retry.\n-        RetryDecision decision \u003d shouldRetry(ioe, retryCount);\n+        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n         if (decision \u003d\u003d RetryDecision.RETRY) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpRetries();\n+          }\n+\n           // retry\n-          return invoke(++retryCount, method, obj, params);\n+          return invoke(nsId, ++retryCount, method, obj, params);\n         } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n           // failover, invoker looks for standby exceptions for failover.\n           if (ioe instanceof StandbyException) {\n             throw ioe;\n           } else {\n             throw new StandbyException(ioe.getMessage());\n           }\n         } else {\n           if (ioe instanceof RemoteException) {\n             RemoteException re \u003d (RemoteException) ioe;\n             ioe \u003d re.unwrapRemoteException();\n             ioe \u003d getCleanException(ioe);\n           }\n           throw ioe;\n         }\n       } else {\n         throw new IOException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invoke(String nsId, int retryCount, final Method method,\n      final Object obj, final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpRetries();\n          }\n\n          // retry\n          return invoke(nsId, ++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          if (ioe instanceof RemoteException) {\n            RemoteException re \u003d (RemoteException) ioe;\n            ioe \u003d re.unwrapRemoteException();\n            ioe \u003d getCleanException(ioe);\n          }\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {
            "oldValue": "[retryCount-int, method-Method(modifiers-final), obj-Object(modifiers-final), params-Object(modifiers-final)]",
            "newValue": "[nsId-String, retryCount-int, method-Method(modifiers-final), obj-Object(modifiers-final), params-Object(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13119. RBF: Manage unavailable clusters. Contributed by Yiqun Lin.\n",
          "commitDate": "19/02/18 5:37 PM",
          "commitName": "8896d20b91520053a6bbfb680adb345cd24f4142",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "12/01/18 4:25 PM",
          "commitNameOld": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 38.05,
          "commitsBetweenForRepo": 233,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,44 @@\n-  private Object invoke(int retryCount, final Method method, final Object obj,\n-      final Object... params) throws IOException {\n+  private Object invoke(String nsId, int retryCount, final Method method,\n+      final Object obj, final Object... params) throws IOException {\n     try {\n       return method.invoke(obj, params);\n     } catch (IllegalAccessException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (IllegalArgumentException e) {\n       LOG.error(\"Unexpected exception while proxying API\", e);\n       return null;\n     } catch (InvocationTargetException e) {\n       Throwable cause \u003d e.getCause();\n       if (cause instanceof IOException) {\n         IOException ioe \u003d (IOException) cause;\n+\n         // Check if we should retry.\n-        RetryDecision decision \u003d shouldRetry(ioe, retryCount);\n+        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n         if (decision \u003d\u003d RetryDecision.RETRY) {\n+          if (this.rpcMonitor !\u003d null) {\n+            this.rpcMonitor.proxyOpRetries();\n+          }\n+\n           // retry\n-          return invoke(++retryCount, method, obj, params);\n+          return invoke(nsId, ++retryCount, method, obj, params);\n         } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n           // failover, invoker looks for standby exceptions for failover.\n           if (ioe instanceof StandbyException) {\n             throw ioe;\n           } else {\n             throw new StandbyException(ioe.getMessage());\n           }\n         } else {\n           if (ioe instanceof RemoteException) {\n             RemoteException re \u003d (RemoteException) ioe;\n             ioe \u003d re.unwrapRemoteException();\n             ioe \u003d getCleanException(ioe);\n           }\n           throw ioe;\n         }\n       } else {\n         throw new IOException(e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Object invoke(String nsId, int retryCount, final Method method,\n      final Object obj, final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount, nsId);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          if (this.rpcMonitor !\u003d null) {\n            this.rpcMonitor.proxyOpRetries();\n          }\n\n          // retry\n          return invoke(nsId, ++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          if (ioe instanceof RemoteException) {\n            RemoteException re \u003d (RemoteException) ioe;\n            ioe \u003d re.unwrapRemoteException();\n            ioe \u003d getCleanException(ioe);\n          }\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,39 @@\n+  private Object invoke(int retryCount, final Method method, final Object obj,\n+      final Object... params) throws IOException {\n+    try {\n+      return method.invoke(obj, params);\n+    } catch (IllegalAccessException e) {\n+      LOG.error(\"Unexpected exception while proxying API\", e);\n+      return null;\n+    } catch (IllegalArgumentException e) {\n+      LOG.error(\"Unexpected exception while proxying API\", e);\n+      return null;\n+    } catch (InvocationTargetException e) {\n+      Throwable cause \u003d e.getCause();\n+      if (cause instanceof IOException) {\n+        IOException ioe \u003d (IOException) cause;\n+        // Check if we should retry.\n+        RetryDecision decision \u003d shouldRetry(ioe, retryCount);\n+        if (decision \u003d\u003d RetryDecision.RETRY) {\n+          // retry\n+          return invoke(++retryCount, method, obj, params);\n+        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n+          // failover, invoker looks for standby exceptions for failover.\n+          if (ioe instanceof StandbyException) {\n+            throw ioe;\n+          } else {\n+            throw new StandbyException(ioe.getMessage());\n+          }\n+        } else {\n+          if (ioe instanceof RemoteException) {\n+            RemoteException re \u003d (RemoteException) ioe;\n+            ioe \u003d re.unwrapRemoteException();\n+            ioe \u003d getCleanException(ioe);\n+          }\n+          throw ioe;\n+        }\n+      } else {\n+        throw new IOException(e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Object invoke(int retryCount, final Method method, final Object obj,\n      final Object... params) throws IOException {\n    try {\n      return method.invoke(obj, params);\n    } catch (IllegalAccessException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (IllegalArgumentException e) {\n      LOG.error(\"Unexpected exception while proxying API\", e);\n      return null;\n    } catch (InvocationTargetException e) {\n      Throwable cause \u003d e.getCause();\n      if (cause instanceof IOException) {\n        IOException ioe \u003d (IOException) cause;\n        // Check if we should retry.\n        RetryDecision decision \u003d shouldRetry(ioe, retryCount);\n        if (decision \u003d\u003d RetryDecision.RETRY) {\n          // retry\n          return invoke(++retryCount, method, obj, params);\n        } else if (decision \u003d\u003d RetryDecision.FAILOVER_AND_RETRY) {\n          // failover, invoker looks for standby exceptions for failover.\n          if (ioe instanceof StandbyException) {\n            throw ioe;\n          } else {\n            throw new StandbyException(ioe.getMessage());\n          }\n        } else {\n          if (ioe instanceof RemoteException) {\n            RemoteException re \u003d (RemoteException) ioe;\n            ioe \u003d re.unwrapRemoteException();\n            ioe \u003d getCleanException(ioe);\n          }\n          throw ioe;\n        }\n      } else {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
    }
  }
}