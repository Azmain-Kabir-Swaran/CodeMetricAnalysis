{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerVolumePublisher.java",
  "functionName": "publishVolume",
  "functionId": "publishVolume___volume-VolumeMetaData",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/volume/csi/ContainerVolumePublisher.java",
  "functionStartLine": 137,
  "functionEndLine": 176,
  "numCommitsSeen": 3,
  "timeTaken": 1214,
  "changeHistory": [
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d"
  ],
  "changeHistoryShort": {
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9038. [CSI] Add ability to publish/unpublish volumes on node managers. Contributed by Weiwei Yang.\n",
      "commitDate": "03/01/19 10:40 PM",
      "commitName": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,40 @@\n+  private Map\u003cString, String\u003e publishVolume(VolumeMetaData volume)\n+      throws IOException, YarnException {\n+    Map\u003cString, String\u003e bindVolumes \u003d new HashMap\u003c\u003e();\n+    // compose a local mount for CSI volume with the container ID\n+    File localMount \u003d getLocalVolumeMountPath(\n+        localMountRoot, volume.getVolumeId().toString());\n+    File localStaging \u003d getLocalVolumeStagingPath(\n+        localMountRoot, volume.getVolumeId().toString());\n+    LOG.info(\"Volume {}, local mount path: {}, local staging path {}\",\n+        volume.getVolumeId().toString(), localMount, localStaging);\n+\n+    NodePublishVolumeRequest publishRequest \u003d NodePublishVolumeRequest\n+        .newInstance(volume.getVolumeId().getId(), // volume Id\n+            false, // read only flag\n+            localMount.getAbsolutePath(), // target path\n+            localStaging.getAbsolutePath(), // staging path\n+            new ValidateVolumeCapabilitiesRequest.VolumeCapability(\n+                ValidateVolumeCapabilitiesRequest\n+                    .AccessMode.SINGLE_NODE_WRITER,\n+                ValidateVolumeCapabilitiesRequest.VolumeType.FILE_SYSTEM,\n+                ImmutableList.of()), // capability\n+            ImmutableMap.of(), // publish context\n+            ImmutableMap.of());  // secrets\n+\n+    // make sure the volume is a known type\n+    if (runtime.getCsiClients().get(volume.getDriverName()) \u003d\u003d null) {\n+      throw new YarnException(\"No csi-adaptor is found that can talk\"\n+          + \" to csi-driver \" + volume.getDriverName());\n+    }\n+\n+    // publish volume to node\n+    LOG.info(\"Publish volume on NM, request {}\",\n+        publishRequest.toString());\n+    runtime.getCsiClients().get(volume.getDriverName())\n+        .nodePublishVolume(publishRequest);\n+    // once succeed, bind the container to this mount\n+    String containerMountPath \u003d volume.getMountPoint();\n+    bindVolumes.put(localMount.getAbsolutePath(), containerMountPath);\n+    return bindVolumes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, String\u003e publishVolume(VolumeMetaData volume)\n      throws IOException, YarnException {\n    Map\u003cString, String\u003e bindVolumes \u003d new HashMap\u003c\u003e();\n    // compose a local mount for CSI volume with the container ID\n    File localMount \u003d getLocalVolumeMountPath(\n        localMountRoot, volume.getVolumeId().toString());\n    File localStaging \u003d getLocalVolumeStagingPath(\n        localMountRoot, volume.getVolumeId().toString());\n    LOG.info(\"Volume {}, local mount path: {}, local staging path {}\",\n        volume.getVolumeId().toString(), localMount, localStaging);\n\n    NodePublishVolumeRequest publishRequest \u003d NodePublishVolumeRequest\n        .newInstance(volume.getVolumeId().getId(), // volume Id\n            false, // read only flag\n            localMount.getAbsolutePath(), // target path\n            localStaging.getAbsolutePath(), // staging path\n            new ValidateVolumeCapabilitiesRequest.VolumeCapability(\n                ValidateVolumeCapabilitiesRequest\n                    .AccessMode.SINGLE_NODE_WRITER,\n                ValidateVolumeCapabilitiesRequest.VolumeType.FILE_SYSTEM,\n                ImmutableList.of()), // capability\n            ImmutableMap.of(), // publish context\n            ImmutableMap.of());  // secrets\n\n    // make sure the volume is a known type\n    if (runtime.getCsiClients().get(volume.getDriverName()) \u003d\u003d null) {\n      throw new YarnException(\"No csi-adaptor is found that can talk\"\n          + \" to csi-driver \" + volume.getDriverName());\n    }\n\n    // publish volume to node\n    LOG.info(\"Publish volume on NM, request {}\",\n        publishRequest.toString());\n    runtime.getCsiClients().get(volume.getDriverName())\n        .nodePublishVolume(publishRequest);\n    // once succeed, bind the container to this mount\n    String containerMountPath \u003d volume.getMountPoint();\n    bindVolumes.put(localMount.getAbsolutePath(), containerMountPath);\n    return bindVolumes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/volume/csi/ContainerVolumePublisher.java"
    }
  }
}