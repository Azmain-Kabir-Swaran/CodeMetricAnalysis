{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "onContainersAllocated",
  "functionId": "onContainersAllocated___allocatedContainers-List__Container__",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java",
  "functionStartLine": 511,
  "functionEndLine": 560,
  "numCommitsSeen": 2,
  "timeTaken": 417,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,50 @@\n+    public void onContainersAllocated(List\u003cContainer\u003e allocatedContainers) {\n+      LOG.info(\"Got response from RM for container ask, allocatedCnt\u003d\"\n+          + allocatedContainers.size());\n+      for (Container container : allocatedContainers) {\n+        LaunchContainerRunnable containerLauncher;\n+        String componentType;\n+        Resource rsrc \u003d container.getResource();\n+        if (launchNameNode\n+            \u0026\u0026 rsrc.getMemorySize() \u003e\u003d amOptions.getNameNodeMemoryMB()\n+            \u0026\u0026 rsrc.getVirtualCores() \u003e\u003d amOptions.getNameNodeVirtualCores()\n+            \u0026\u0026 namenodeContainer \u003d\u003d null) {\n+          namenodeContainer \u003d container;\n+          componentType \u003d \"NAMENODE\";\n+          containerLauncher \u003d new LaunchContainerRunnable(container, true);\n+        } else if (rsrc.getMemorySize() \u003e\u003d amOptions.getDataNodeMemoryMB()\n+            \u0026\u0026 rsrc.getVirtualCores() \u003e\u003d amOptions.getDataNodeVirtualCores()\n+            \u0026\u0026 numAllocatedDataNodeContainers.get() \u003c numTotalDataNodes) {\n+          if (launchNameNode \u0026\u0026 namenodeContainer \u003d\u003d null) {\n+            LOG.error(\"Received a container with following resources suited \"\n+                + \"for a DataNode but no NameNode container exists: \"\n+                + \"containerMem\u003d\" + rsrc.getMemorySize() + \", containerVcores\u003d\"\n+                + rsrc.getVirtualCores());\n+            continue;\n+          }\n+          numAllocatedDataNodeContainers.getAndIncrement();\n+          datanodeContainers.put(container.getId(), container);\n+          componentType \u003d \"DATANODE\";\n+          containerLauncher \u003d new LaunchContainerRunnable(container, false);\n+        } else {\n+          LOG.warn(\"Received unwanted container allocation: \" + container);\n+          nmClientAsync.stopContainerAsync(container.getId(),\n+              container.getNodeId());\n+          continue;\n+        }\n+        LOG.info(\"Launching \" + componentType + \" on a new container.\"\n+            + \", containerId\u003d\" + container.getId() + \", containerNode\u003d\"\n+            + container.getNodeId().getHost() + \":\"\n+            + container.getNodeId().getPort() + \", containerNodeURI\u003d\"\n+            + container.getNodeHttpAddress() + \", containerResourceMemory\u003d\"\n+            + rsrc.getMemorySize() + \", containerResourceVirtualCores\u003d\"\n+            + rsrc.getVirtualCores());\n+        Thread launchThread \u003d new Thread(containerLauncher);\n+\n+        // launch and start the container on a separate thread to keep\n+        // the main thread unblocked\n+        // as all containers may not be allocated at one go.\n+        launchThreads.add(launchThread);\n+        launchThread.start();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersAllocated(List\u003cContainer\u003e allocatedContainers) {\n      LOG.info(\"Got response from RM for container ask, allocatedCnt\u003d\"\n          + allocatedContainers.size());\n      for (Container container : allocatedContainers) {\n        LaunchContainerRunnable containerLauncher;\n        String componentType;\n        Resource rsrc \u003d container.getResource();\n        if (launchNameNode\n            \u0026\u0026 rsrc.getMemorySize() \u003e\u003d amOptions.getNameNodeMemoryMB()\n            \u0026\u0026 rsrc.getVirtualCores() \u003e\u003d amOptions.getNameNodeVirtualCores()\n            \u0026\u0026 namenodeContainer \u003d\u003d null) {\n          namenodeContainer \u003d container;\n          componentType \u003d \"NAMENODE\";\n          containerLauncher \u003d new LaunchContainerRunnable(container, true);\n        } else if (rsrc.getMemorySize() \u003e\u003d amOptions.getDataNodeMemoryMB()\n            \u0026\u0026 rsrc.getVirtualCores() \u003e\u003d amOptions.getDataNodeVirtualCores()\n            \u0026\u0026 numAllocatedDataNodeContainers.get() \u003c numTotalDataNodes) {\n          if (launchNameNode \u0026\u0026 namenodeContainer \u003d\u003d null) {\n            LOG.error(\"Received a container with following resources suited \"\n                + \"for a DataNode but no NameNode container exists: \"\n                + \"containerMem\u003d\" + rsrc.getMemorySize() + \", containerVcores\u003d\"\n                + rsrc.getVirtualCores());\n            continue;\n          }\n          numAllocatedDataNodeContainers.getAndIncrement();\n          datanodeContainers.put(container.getId(), container);\n          componentType \u003d \"DATANODE\";\n          containerLauncher \u003d new LaunchContainerRunnable(container, false);\n        } else {\n          LOG.warn(\"Received unwanted container allocation: \" + container);\n          nmClientAsync.stopContainerAsync(container.getId(),\n              container.getNodeId());\n          continue;\n        }\n        LOG.info(\"Launching \" + componentType + \" on a new container.\"\n            + \", containerId\u003d\" + container.getId() + \", containerNode\u003d\"\n            + container.getNodeId().getHost() + \":\"\n            + container.getNodeId().getPort() + \", containerNodeURI\u003d\"\n            + container.getNodeHttpAddress() + \", containerResourceMemory\u003d\"\n            + rsrc.getMemorySize() + \", containerResourceVirtualCores\u003d\"\n            + rsrc.getVirtualCores());\n        Thread launchThread \u003d new Thread(containerLauncher);\n\n        // launch and start the container on a separate thread to keep\n        // the main thread unblocked\n        // as all containers may not be allocated at one go.\n        launchThreads.add(launchThread);\n        launchThread.start();\n      }\n    }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java"
    }
  }
}