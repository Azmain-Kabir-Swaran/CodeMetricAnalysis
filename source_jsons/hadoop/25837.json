{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "applyConcurrentTaskLimits",
  "functionId": "applyConcurrentTaskLimits",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 918,
  "functionEndLine": 947,
  "numCommitsSeen": 82,
  "timeTaken": 2388,
  "changeHistory": [
    "a5c0476a990ec1e7eb34ce2462a45aa52cc1350d",
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
    "4228de94028f1e10ca59ce23e963e488fe566909"
  ],
  "changeHistoryShort": {
    "a5c0476a990ec1e7eb34ce2462a45aa52cc1350d": "Ybodychange",
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": "Ybodychange",
    "4228de94028f1e10ca59ce23e963e488fe566909": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a5c0476a990ec1e7eb34ce2462a45aa52cc1350d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6697. Concurrent task limits should only be applied when necessary. Contributed by Nathan Roberts.\n",
      "commitDate": "27/06/17 6:50 PM",
      "commitName": "a5c0476a990ec1e7eb34ce2462a45aa52cc1350d",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "16/02/17 11:41 AM",
      "commitNameOld": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 131.26,
      "commitsBetweenForRepo": 717,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   private void applyConcurrentTaskLimits() {\n     int numScheduledMaps \u003d scheduledRequests.maps.size();\n-    if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0) {\n+    if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0 \u0026\u0026\n+        getJob().getTotalMaps() \u003e maxRunningMaps) {\n       int maxRequestedMaps \u003d Math.max(0,\n           maxRunningMaps - assignedRequests.maps.size());\n       int numScheduledFailMaps \u003d scheduledRequests.earlierFailedMaps.size();\n       int failedMapRequestLimit \u003d Math.min(maxRequestedMaps,\n           numScheduledFailMaps);\n       int normalMapRequestLimit \u003d Math.min(\n           maxRequestedMaps - failedMapRequestLimit,\n           numScheduledMaps - numScheduledFailMaps);\n       setRequestLimit(PRIORITY_FAST_FAIL_MAP, mapResourceRequest,\n           failedMapRequestLimit);\n       setRequestLimit(PRIORITY_MAP, mapResourceRequest, normalMapRequestLimit);\n       setRequestLimit(PRIORITY_OPPORTUNISTIC_MAP, mapResourceRequest,\n           normalMapRequestLimit);\n     }\n \n     int numScheduledReduces \u003d scheduledRequests.reduces.size();\n-    if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0) {\n+    if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0 \u0026\u0026\n+        getJob().getTotalReduces() \u003e maxRunningReduces) {\n       int maxRequestedReduces \u003d Math.max(0,\n           maxRunningReduces - assignedRequests.reduces.size());\n       int reduceRequestLimit \u003d Math.min(maxRequestedReduces,\n           numScheduledReduces);\n       setRequestLimit(PRIORITY_REDUCE, reduceResourceRequest,\n           reduceRequestLimit);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyConcurrentTaskLimits() {\n    int numScheduledMaps \u003d scheduledRequests.maps.size();\n    if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0 \u0026\u0026\n        getJob().getTotalMaps() \u003e maxRunningMaps) {\n      int maxRequestedMaps \u003d Math.max(0,\n          maxRunningMaps - assignedRequests.maps.size());\n      int numScheduledFailMaps \u003d scheduledRequests.earlierFailedMaps.size();\n      int failedMapRequestLimit \u003d Math.min(maxRequestedMaps,\n          numScheduledFailMaps);\n      int normalMapRequestLimit \u003d Math.min(\n          maxRequestedMaps - failedMapRequestLimit,\n          numScheduledMaps - numScheduledFailMaps);\n      setRequestLimit(PRIORITY_FAST_FAIL_MAP, mapResourceRequest,\n          failedMapRequestLimit);\n      setRequestLimit(PRIORITY_MAP, mapResourceRequest, normalMapRequestLimit);\n      setRequestLimit(PRIORITY_OPPORTUNISTIC_MAP, mapResourceRequest,\n          normalMapRequestLimit);\n    }\n\n    int numScheduledReduces \u003d scheduledRequests.reduces.size();\n    if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0 \u0026\u0026\n        getJob().getTotalReduces() \u003e maxRunningReduces) {\n      int maxRequestedReduces \u003d Math.max(0,\n          maxRunningReduces - assignedRequests.reduces.size());\n      int reduceRequestLimit \u003d Math.min(maxRequestedReduces,\n          numScheduledReduces);\n      setRequestLimit(PRIORITY_REDUCE, reduceResourceRequest,\n          reduceRequestLimit);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6703. Add flag to allow MapReduce AM to request for OPPORTUNISTIC containers. Contributed by Arun Suresh\n",
      "commitDate": "24/05/16 7:47 PM",
      "commitName": "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/05/16 3:25 PM",
      "commitNameOld": "c9bb96fa81fc925e33ccc0b02c98cc2d929df120",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private void applyConcurrentTaskLimits() {\n     int numScheduledMaps \u003d scheduledRequests.maps.size();\n     if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0) {\n       int maxRequestedMaps \u003d Math.max(0,\n           maxRunningMaps - assignedRequests.maps.size());\n       int numScheduledFailMaps \u003d scheduledRequests.earlierFailedMaps.size();\n       int failedMapRequestLimit \u003d Math.min(maxRequestedMaps,\n           numScheduledFailMaps);\n       int normalMapRequestLimit \u003d Math.min(\n           maxRequestedMaps - failedMapRequestLimit,\n           numScheduledMaps - numScheduledFailMaps);\n       setRequestLimit(PRIORITY_FAST_FAIL_MAP, mapResourceRequest,\n           failedMapRequestLimit);\n       setRequestLimit(PRIORITY_MAP, mapResourceRequest, normalMapRequestLimit);\n+      setRequestLimit(PRIORITY_OPPORTUNISTIC_MAP, mapResourceRequest,\n+          normalMapRequestLimit);\n     }\n \n     int numScheduledReduces \u003d scheduledRequests.reduces.size();\n     if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0) {\n       int maxRequestedReduces \u003d Math.max(0,\n           maxRunningReduces - assignedRequests.reduces.size());\n       int reduceRequestLimit \u003d Math.min(maxRequestedReduces,\n           numScheduledReduces);\n       setRequestLimit(PRIORITY_REDUCE, reduceResourceRequest,\n           reduceRequestLimit);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyConcurrentTaskLimits() {\n    int numScheduledMaps \u003d scheduledRequests.maps.size();\n    if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0) {\n      int maxRequestedMaps \u003d Math.max(0,\n          maxRunningMaps - assignedRequests.maps.size());\n      int numScheduledFailMaps \u003d scheduledRequests.earlierFailedMaps.size();\n      int failedMapRequestLimit \u003d Math.min(maxRequestedMaps,\n          numScheduledFailMaps);\n      int normalMapRequestLimit \u003d Math.min(\n          maxRequestedMaps - failedMapRequestLimit,\n          numScheduledMaps - numScheduledFailMaps);\n      setRequestLimit(PRIORITY_FAST_FAIL_MAP, mapResourceRequest,\n          failedMapRequestLimit);\n      setRequestLimit(PRIORITY_MAP, mapResourceRequest, normalMapRequestLimit);\n      setRequestLimit(PRIORITY_OPPORTUNISTIC_MAP, mapResourceRequest,\n          normalMapRequestLimit);\n    }\n\n    int numScheduledReduces \u003d scheduledRequests.reduces.size();\n    if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0) {\n      int maxRequestedReduces \u003d Math.max(0,\n          maxRunningReduces - assignedRequests.reduces.size());\n      int reduceRequestLimit \u003d Math.min(maxRequestedReduces,\n          numScheduledReduces);\n      setRequestLimit(PRIORITY_REDUCE, reduceResourceRequest,\n          reduceRequestLimit);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "4228de94028f1e10ca59ce23e963e488fe566909": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5583. Ability to limit running map and reduce tasks. Contributed by Jason Lowe.\n",
      "commitDate": "03/03/15 2:02 AM",
      "commitName": "4228de94028f1e10ca59ce23e963e488fe566909",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,26 @@\n+  private void applyConcurrentTaskLimits() {\n+    int numScheduledMaps \u003d scheduledRequests.maps.size();\n+    if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0) {\n+      int maxRequestedMaps \u003d Math.max(0,\n+          maxRunningMaps - assignedRequests.maps.size());\n+      int numScheduledFailMaps \u003d scheduledRequests.earlierFailedMaps.size();\n+      int failedMapRequestLimit \u003d Math.min(maxRequestedMaps,\n+          numScheduledFailMaps);\n+      int normalMapRequestLimit \u003d Math.min(\n+          maxRequestedMaps - failedMapRequestLimit,\n+          numScheduledMaps - numScheduledFailMaps);\n+      setRequestLimit(PRIORITY_FAST_FAIL_MAP, mapResourceRequest,\n+          failedMapRequestLimit);\n+      setRequestLimit(PRIORITY_MAP, mapResourceRequest, normalMapRequestLimit);\n+    }\n+\n+    int numScheduledReduces \u003d scheduledRequests.reduces.size();\n+    if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0) {\n+      int maxRequestedReduces \u003d Math.max(0,\n+          maxRunningReduces - assignedRequests.reduces.size());\n+      int reduceRequestLimit \u003d Math.min(maxRequestedReduces,\n+          numScheduledReduces);\n+      setRequestLimit(PRIORITY_REDUCE, reduceResourceRequest,\n+          reduceRequestLimit);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void applyConcurrentTaskLimits() {\n    int numScheduledMaps \u003d scheduledRequests.maps.size();\n    if (maxRunningMaps \u003e 0 \u0026\u0026 numScheduledMaps \u003e 0) {\n      int maxRequestedMaps \u003d Math.max(0,\n          maxRunningMaps - assignedRequests.maps.size());\n      int numScheduledFailMaps \u003d scheduledRequests.earlierFailedMaps.size();\n      int failedMapRequestLimit \u003d Math.min(maxRequestedMaps,\n          numScheduledFailMaps);\n      int normalMapRequestLimit \u003d Math.min(\n          maxRequestedMaps - failedMapRequestLimit,\n          numScheduledMaps - numScheduledFailMaps);\n      setRequestLimit(PRIORITY_FAST_FAIL_MAP, mapResourceRequest,\n          failedMapRequestLimit);\n      setRequestLimit(PRIORITY_MAP, mapResourceRequest, normalMapRequestLimit);\n    }\n\n    int numScheduledReduces \u003d scheduledRequests.reduces.size();\n    if (maxRunningReduces \u003e 0 \u0026\u0026 numScheduledReduces \u003e 0) {\n      int maxRequestedReduces \u003d Math.max(0,\n          maxRunningReduces - assignedRequests.reduces.size());\n      int reduceRequestLimit \u003d Math.min(maxRequestedReduces,\n          numScheduledReduces);\n      setRequestLimit(PRIORITY_REDUCE, reduceResourceRequest,\n          reduceRequestLimit);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}