{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerImpl.java",
  "functionName": "updateAttemptMetrics",
  "functionId": "updateAttemptMetrics___container-RMContainerImpl",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
  "functionStartLine": 731,
  "functionEndLine": 751,
  "numCommitsSeen": 84,
  "timeTaken": 4361,
  "changeHistory": [
    "251f528814c4a4647cac0af6effb9a73135db180",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "c9fb040c87423acb754fb7c3605d38dcf07b22ee"
  ],
  "changeHistoryShort": {
    "251f528814c4a4647cac0af6effb9a73135db180": "Ybodychange",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ymultichange(Yrename,Ybodychange)",
    "c9fb040c87423acb754fb7c3605d38dcf07b22ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "251f528814c4a4647cac0af6effb9a73135db180": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8222. Fix potential NPE when gets RMApp from RM context. Contributed by Tao Yang.\n",
      "commitDate": "02/05/18 2:54 AM",
      "commitName": "251f528814c4a4647cac0af6effb9a73135db180",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "add993e26a3c96f77dfd42086f186a139966019e",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 91.02,
      "commitsBetweenForRepo": 1229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     private static void updateAttemptMetrics(RMContainerImpl container) {\n       Resource resource \u003d container.getContainer().getResource();\n-      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n-          .get(container.getApplicationAttemptId().getApplicationId())\n-          .getCurrentAppAttempt();\n-\n-      if (rmAttempt !\u003d null) {\n-        long usedMillis \u003d container.finishTime - container.creationTime;\n-        rmAttempt.getRMAppAttemptMetrics()\n-            .updateAggregateAppResourceUsage(resource, usedMillis);\n-        // If this is a preempted container, update preemption metrics\n-        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n-            .getExitStatus()) {\n+      RMApp app \u003d container.rmContext.getRMApps()\n+          .get(container.getApplicationAttemptId().getApplicationId());\n+      if (app !\u003d null) {\n+        RMAppAttempt rmAttempt \u003d app.getCurrentAppAttempt();\n+        if (rmAttempt !\u003d null) {\n+          long usedMillis \u003d container.finishTime - container.creationTime;\n           rmAttempt.getRMAppAttemptMetrics()\n-              .updatePreemptionInfo(resource, container);\n-          rmAttempt.getRMAppAttemptMetrics()\n-              .updateAggregatePreemptedAppResourceUsage(resource, usedMillis);\n+              .updateAggregateAppResourceUsage(resource, usedMillis);\n+          // If this is a preempted container, update preemption metrics\n+          if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n+              .getExitStatus()) {\n+            rmAttempt.getRMAppAttemptMetrics()\n+                .updatePreemptionInfo(resource, container);\n+            rmAttempt.getRMAppAttemptMetrics()\n+                .updateAggregatePreemptedAppResourceUsage(resource, usedMillis);\n+          }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      Resource resource \u003d container.getContainer().getResource();\n      RMApp app \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId());\n      if (app !\u003d null) {\n        RMAppAttempt rmAttempt \u003d app.getCurrentAppAttempt();\n        if (rmAttempt !\u003d null) {\n          long usedMillis \u003d container.finishTime - container.creationTime;\n          rmAttempt.getRMAppAttemptMetrics()\n              .updateAggregateAppResourceUsage(resource, usedMillis);\n          // If this is a preempted container, update preemption metrics\n          if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n              .getExitStatus()) {\n            rmAttempt.getRMAppAttemptMetrics()\n                .updatePreemptionInfo(resource, container);\n            rmAttempt.getRMAppAttemptMetrics()\n                .updateAggregatePreemptedAppResourceUsage(resource, usedMillis);\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
      "extendedDetails": {}
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "11/09/17 8:52 PM",
      "commitNameOld": "e74d1be04be47969943b0501a4f335b0b5188287",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.52,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,20 @@\n     private static void updateAttemptMetrics(RMContainerImpl container) {\n       Resource resource \u003d container.getContainer().getResource();\n       RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n           .get(container.getApplicationAttemptId().getApplicationId())\n           .getCurrentAppAttempt();\n \n       if (rmAttempt !\u003d null) {\n         long usedMillis \u003d container.finishTime - container.creationTime;\n-        long memorySeconds \u003d resource.getMemorySize()\n-                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n-        long vcoreSeconds \u003d resource.getVirtualCores()\n-                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         rmAttempt.getRMAppAttemptMetrics()\n-                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n+            .updateAggregateAppResourceUsage(resource, usedMillis);\n         // If this is a preempted container, update preemption metrics\n         if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n-                .getExitStatus()) {\n-          rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n-                  container);\n+            .getExitStatus()) {\n           rmAttempt.getRMAppAttemptMetrics()\n-                  .updateAggregatePreemptedAppResourceUsage(memorySeconds,\n-                          vcoreSeconds);\n+              .updatePreemptionInfo(resource, container);\n+          rmAttempt.getRMAppAttemptMetrics()\n+              .updateAggregatePreemptedAppResourceUsage(resource, usedMillis);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      Resource resource \u003d container.getContainer().getResource();\n      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId())\n          .getCurrentAppAttempt();\n\n      if (rmAttempt !\u003d null) {\n        long usedMillis \u003d container.finishTime - container.creationTime;\n        rmAttempt.getRMAppAttemptMetrics()\n            .updateAggregateAppResourceUsage(resource, usedMillis);\n        // If this is a preempted container, update preemption metrics\n        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n            .getExitStatus()) {\n          rmAttempt.getRMAppAttemptMetrics()\n              .updatePreemptionInfo(resource, container);\n          rmAttempt.getRMAppAttemptMetrics()\n              .updateAggregatePreemptedAppResourceUsage(resource, usedMillis);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
      "extendedDetails": {}
    },
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4218. Metric for resource*time that was preempted. Contributed by Chang Li.\n",
      "commitDate": "10/11/16 2:35 PM",
      "commitName": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "07/11/16 10:14 AM",
      "commitNameOld": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.18,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n     private static void updateAttemptMetrics(RMContainerImpl container) {\n-      // If this is a preempted container, update preemption metrics\n       Resource resource \u003d container.getContainer().getResource();\n       RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n           .get(container.getApplicationAttemptId().getApplicationId())\n           .getCurrentAppAttempt();\n \n       if (rmAttempt !\u003d null) {\n-        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n-            .getExitStatus()) {\n-            rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n-              container);\n-          }\n-        \n         long usedMillis \u003d container.finishTime - container.creationTime;\n         long memorySeconds \u003d resource.getMemorySize()\n                               * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         long vcoreSeconds \u003d resource.getVirtualCores()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         rmAttempt.getRMAppAttemptMetrics()\n                   .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n+        // If this is a preempted container, update preemption metrics\n+        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n+                .getExitStatus()) {\n+          rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n+                  container);\n+          rmAttempt.getRMAppAttemptMetrics()\n+                  .updateAggregatePreemptedAppResourceUsage(memorySeconds,\n+                          vcoreSeconds);\n+        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      Resource resource \u003d container.getContainer().getResource();\n      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId())\n          .getCurrentAppAttempt();\n\n      if (rmAttempt !\u003d null) {\n        long usedMillis \u003d container.finishTime - container.creationTime;\n        long memorySeconds \u003d resource.getMemorySize()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        long vcoreSeconds \u003d resource.getVirtualCores()\n                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        rmAttempt.getRMAppAttemptMetrics()\n                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n        // If this is a preempted container, update preemption metrics\n        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n                .getExitStatus()) {\n          rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n                  container);\n          rmAttempt.getRMAppAttemptMetrics()\n                  .updateAggregatePreemptedAppResourceUsage(memorySeconds,\n                          vcoreSeconds);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 23.83,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     private static void updateAttemptMetrics(RMContainerImpl container) {\n       // If this is a preempted container, update preemption metrics\n       Resource resource \u003d container.getContainer().getResource();\n       RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n           .get(container.getApplicationAttemptId().getApplicationId())\n           .getCurrentAppAttempt();\n \n       if (rmAttempt !\u003d null) {\n         if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n             .getExitStatus()) {\n             rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n               container);\n           }\n         \n         long usedMillis \u003d container.finishTime - container.creationTime;\n-        long memorySeconds \u003d resource.getMemory()\n+        long memorySeconds \u003d resource.getMemorySize()\n                               * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         long vcoreSeconds \u003d resource.getVirtualCores()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         rmAttempt.getRMAppAttemptMetrics()\n                   .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      // If this is a preempted container, update preemption metrics\n      Resource resource \u003d container.getContainer().getResource();\n      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId())\n          .getCurrentAppAttempt();\n\n      if (rmAttempt !\u003d null) {\n        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n            .getExitStatus()) {\n            rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n              container);\n          }\n        \n        long usedMillis \u003d container.finishTime - container.creationTime;\n        long memorySeconds \u003d resource.getMemorySize()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        long vcoreSeconds \u003d resource.getVirtualCores()\n                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        rmAttempt.getRMAppAttemptMetrics()\n                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/08/15 8:38 AM",
      "commitNameOld": "3cd02b95224e9d43fd63a4ef9ac5c44f113f710d",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 51.2,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n     private static void updateAttemptMetrics(RMContainerImpl container) {\n       // If this is a preempted container, update preemption metrics\n       Resource resource \u003d container.getContainer().getResource();\n       RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n           .get(container.getApplicationAttemptId().getApplicationId())\n           .getCurrentAppAttempt();\n-      if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n-        .getExitStatus()) {\n-        rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n-          container);\n-      }\n \n       if (rmAttempt !\u003d null) {\n+        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n+            .getExitStatus()) {\n+            rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n+              container);\n+          }\n+        \n         long usedMillis \u003d container.finishTime - container.creationTime;\n         long memorySeconds \u003d resource.getMemory()\n                               * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         long vcoreSeconds \u003d resource.getVirtualCores()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n         rmAttempt.getRMAppAttemptMetrics()\n                   .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      // If this is a preempted container, update preemption metrics\n      Resource resource \u003d container.getContainer().getResource();\n      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId())\n          .getCurrentAppAttempt();\n\n      if (rmAttempt !\u003d null) {\n        if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n            .getExitStatus()) {\n            rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n              container);\n          }\n        \n        long usedMillis \u003d container.finishTime - container.creationTime;\n        long memorySeconds \u003d resource.getMemory()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        long vcoreSeconds \u003d resource.getVirtualCores()\n                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        rmAttempt.getRMAppAttemptMetrics()\n                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
          "commitDate": "10/09/14 6:20 PM",
          "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
          "commitAuthor": "Jian He",
          "commitDateOld": "15/07/14 2:48 PM",
          "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthorOld": "Mayank Bansal",
          "daysBetweenCommits": 57.15,
          "commitsBetweenForRepo": 476,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,22 @@\n-    private static void updateMetricsIfPreempted(RMContainerImpl container) {\n+    private static void updateAttemptMetrics(RMContainerImpl container) {\n       // If this is a preempted container, update preemption metrics\n+      Resource resource \u003d container.getContainer().getResource();\n+      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n+          .get(container.getApplicationAttemptId().getApplicationId())\n+          .getCurrentAppAttempt();\n       if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n         .getExitStatus()) {\n-\n-        Resource resource \u003d container.getContainer().getResource();\n-        RMAppAttempt rmAttempt \u003d\n-            container.rmContext.getRMApps()\n-              .get(container.getApplicationAttemptId().getApplicationId())\n-              .getCurrentAppAttempt();\n         rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n           container);\n       }\n+\n+      if (rmAttempt !\u003d null) {\n+        long usedMillis \u003d container.finishTime - container.creationTime;\n+        long memorySeconds \u003d resource.getMemory()\n+                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+        long vcoreSeconds \u003d resource.getVirtualCores()\n+                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+        rmAttempt.getRMAppAttemptMetrics()\n+                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      // If this is a preempted container, update preemption metrics\n      Resource resource \u003d container.getContainer().getResource();\n      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId())\n          .getCurrentAppAttempt();\n      if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n        .getExitStatus()) {\n        rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n          container);\n      }\n\n      if (rmAttempt !\u003d null) {\n        long usedMillis \u003d container.finishTime - container.creationTime;\n        long memorySeconds \u003d resource.getMemory()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        long vcoreSeconds \u003d resource.getVirtualCores()\n                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        rmAttempt.getRMAppAttemptMetrics()\n                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
          "extendedDetails": {
            "oldValue": "updateMetricsIfPreempted",
            "newValue": "updateAttemptMetrics"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
          "commitDate": "10/09/14 6:20 PM",
          "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
          "commitAuthor": "Jian He",
          "commitDateOld": "15/07/14 2:48 PM",
          "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthorOld": "Mayank Bansal",
          "daysBetweenCommits": 57.15,
          "commitsBetweenForRepo": 476,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,22 @@\n-    private static void updateMetricsIfPreempted(RMContainerImpl container) {\n+    private static void updateAttemptMetrics(RMContainerImpl container) {\n       // If this is a preempted container, update preemption metrics\n+      Resource resource \u003d container.getContainer().getResource();\n+      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n+          .get(container.getApplicationAttemptId().getApplicationId())\n+          .getCurrentAppAttempt();\n       if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n         .getExitStatus()) {\n-\n-        Resource resource \u003d container.getContainer().getResource();\n-        RMAppAttempt rmAttempt \u003d\n-            container.rmContext.getRMApps()\n-              .get(container.getApplicationAttemptId().getApplicationId())\n-              .getCurrentAppAttempt();\n         rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n           container);\n       }\n+\n+      if (rmAttempt !\u003d null) {\n+        long usedMillis \u003d container.finishTime - container.creationTime;\n+        long memorySeconds \u003d resource.getMemory()\n+                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+        long vcoreSeconds \u003d resource.getVirtualCores()\n+                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n+        rmAttempt.getRMAppAttemptMetrics()\n+                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n+      }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private static void updateAttemptMetrics(RMContainerImpl container) {\n      // If this is a preempted container, update preemption metrics\n      Resource resource \u003d container.getContainer().getResource();\n      RMAppAttempt rmAttempt \u003d container.rmContext.getRMApps()\n          .get(container.getApplicationAttemptId().getApplicationId())\n          .getCurrentAppAttempt();\n      if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n        .getExitStatus()) {\n        rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n          container);\n      }\n\n      if (rmAttempt !\u003d null) {\n        long usedMillis \u003d container.finishTime - container.creationTime;\n        long memorySeconds \u003d resource.getMemory()\n                              * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        long vcoreSeconds \u003d resource.getVirtualCores()\n                             * usedMillis / DateUtils.MILLIS_PER_SECOND;\n        rmAttempt.getRMAppAttemptMetrics()\n                  .updateAggregateAppResourceUsage(memorySeconds,vcoreSeconds);\n      }\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "c9fb040c87423acb754fb7c3605d38dcf07b22ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2181. Added preemption info to logs and RM web UI. Contributed by Wangda Tan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 1:03 PM",
      "commitName": "c9fb040c87423acb754fb7c3605d38dcf07b22ee",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,14 @@\n+    private static void updateMetricsIfPreempted(RMContainerImpl container) {\n+      // If this is a preempted container, update preemption metrics\n+      if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n+        .getExitStatus()) {\n+\n+        Resource resource \u003d container.getContainer().getResource();\n+        RMAppAttempt rmAttempt \u003d\n+            container.rmContext.getRMApps()\n+              .get(container.getApplicationAttemptId().getApplicationId())\n+              .getCurrentAppAttempt();\n+        rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n+          container);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static void updateMetricsIfPreempted(RMContainerImpl container) {\n      // If this is a preempted container, update preemption metrics\n      if (ContainerExitStatus.PREEMPTED \u003d\u003d container.finishedStatus\n        .getExitStatus()) {\n\n        Resource resource \u003d container.getContainer().getResource();\n        RMAppAttempt rmAttempt \u003d\n            container.rmContext.getRMApps()\n              .get(container.getApplicationAttemptId().getApplicationId())\n              .getCurrentAppAttempt();\n        rmAttempt.getRMAppAttemptMetrics().updatePreemptionInfo(resource,\n          container);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainerImpl.java"
    }
  }
}