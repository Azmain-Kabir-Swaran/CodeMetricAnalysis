{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativePmemMappableBlockLoader.java",
  "functionName": "getRecoveredMappableBlock",
  "functionId": "getRecoveredMappableBlock___cacheFile-File__bpid-String__volumeIndex-byte",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/NativePmemMappableBlockLoader.java",
  "functionStartLine": 195,
  "functionEndLine": 216,
  "numCommitsSeen": 3,
  "timeTaken": 1586,
  "changeHistory": [
    "d79cce20abbbf321f6dcce03f4087544124a7cd2"
  ],
  "changeHistoryShort": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14740. Recover data blocks from persistent memory read cache during datanode restarts. Contributed by Feilong He.\n",
      "commitDate": "01/01/20 10:14 PM",
      "commitName": "d79cce20abbbf321f6dcce03f4087544124a7cd2",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,22 @@\n+  public MappableBlock getRecoveredMappableBlock(\n+      File cacheFile, String bpid, byte volumeIndex) throws IOException {\n+    NativeIO.POSIX.PmemMappedRegion region \u003d\n+        NativeIO.POSIX.Pmem.mapBlock(cacheFile.getAbsolutePath(),\n+            cacheFile.length(), true);\n+    if (region \u003d\u003d null) {\n+      throw new IOException(\"Failed to recover the block \"\n+          + cacheFile.getName() + \" in persistent storage.\");\n+    }\n+    ExtendedBlockId key \u003d\n+        new ExtendedBlockId(super.getBlockId(cacheFile), bpid);\n+    MappableBlock mappableBlock \u003d new NativePmemMappedBlock(\n+        region.getAddress(), region.getLength(), key);\n+    PmemVolumeManager.getInstance().recoverBlockKeyToVolume(key, volumeIndex);\n+\n+    String path \u003d PmemVolumeManager.getInstance().getCachePath(key);\n+    long addr \u003d mappableBlock.getAddress();\n+    long length \u003d mappableBlock.getLength();\n+    LOG.info(\"Recovering persistent memory cache for block {}, \" +\n+        \"path \u003d {}, address \u003d {}, length \u003d {}\", key, path, addr, length);\n+    return mappableBlock;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public MappableBlock getRecoveredMappableBlock(\n      File cacheFile, String bpid, byte volumeIndex) throws IOException {\n    NativeIO.POSIX.PmemMappedRegion region \u003d\n        NativeIO.POSIX.Pmem.mapBlock(cacheFile.getAbsolutePath(),\n            cacheFile.length(), true);\n    if (region \u003d\u003d null) {\n      throw new IOException(\"Failed to recover the block \"\n          + cacheFile.getName() + \" in persistent storage.\");\n    }\n    ExtendedBlockId key \u003d\n        new ExtendedBlockId(super.getBlockId(cacheFile), bpid);\n    MappableBlock mappableBlock \u003d new NativePmemMappedBlock(\n        region.getAddress(), region.getLength(), key);\n    PmemVolumeManager.getInstance().recoverBlockKeyToVolume(key, volumeIndex);\n\n    String path \u003d PmemVolumeManager.getInstance().getCachePath(key);\n    long addr \u003d mappableBlock.getAddress();\n    long length \u003d mappableBlock.getLength();\n    LOG.info(\"Recovering persistent memory cache for block {}, \" +\n        \"path \u003d {}, address \u003d {}, length \u003d {}\", key, path, addr, length);\n    return mappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/NativePmemMappableBlockLoader.java"
    }
  }
}