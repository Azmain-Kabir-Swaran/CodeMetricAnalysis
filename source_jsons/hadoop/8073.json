{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EditLogFileInputStream.java",
  "functionName": "getInputStream",
  "functionId": "getInputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
  "functionStartLine": 418,
  "functionEndLine": 420,
  "numCommitsSeen": 37,
  "timeTaken": 1230,
  "changeHistory": [
    "d8a23834614581a292aad214dddcbcc4bbe86d27",
    "df801074c929d5414b92cc9fc0cc8a2794e02751",
    "1d54e2b33122161ac577c390282f575b214f2e4e"
  ],
  "changeHistoryShort": {
    "d8a23834614581a292aad214dddcbcc4bbe86d27": "Ybodychange",
    "df801074c929d5414b92cc9fc0cc8a2794e02751": "Ybodychange",
    "1d54e2b33122161ac577c390282f575b214f2e4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d8a23834614581a292aad214dddcbcc4bbe86d27": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5538. URLConnectionFactory should pick up the SSL related configuration by default. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 5:16 PM",
      "commitName": "d8a23834614581a292aad214dddcbcc4bbe86d27",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/07/13 10:35 PM",
      "commitNameOld": "da8e962e39bd41b73b53966826c82e741b08010b",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 137.82,
      "commitsBetweenForRepo": 868,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,37 @@\n     public InputStream getInputStream() throws IOException {\n       return SecurityUtil.doAsCurrentUser(\n           new PrivilegedExceptionAction\u003cInputStream\u003e() {\n             @Override\n             public InputStream run() throws IOException {\n-              HttpURLConnection connection \u003d (HttpURLConnection)\n-                  SecurityUtil.openSecureHttpConnection(url);\n+              HttpURLConnection connection;\n+              try {\n+                connection \u003d (HttpURLConnection)\n+                    connectionFactory.openConnection(url, isSpnegoEnabled);\n+              } catch (AuthenticationException e) {\n+                throw new IOException(e);\n+              }\n               \n               if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n                 throw new HttpGetFailedException(\n                     \"Fetch of \" + url +\n                     \" failed with status code \" + connection.getResponseCode() +\n                     \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n                     connection);\n               }\n         \n               String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n               if (contentLength !\u003d null) {\n                 advertisedSize \u003d Long.parseLong(contentLength);\n                 if (advertisedSize \u003c\u003d 0) {\n                   throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n                       contentLength);\n                 }\n               } else {\n                 throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n                                       \"by the server when trying to fetch \" + url);\n               }\n         \n               return connection.getInputStream();\n             }\n           });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public InputStream getInputStream() throws IOException {\n      return SecurityUtil.doAsCurrentUser(\n          new PrivilegedExceptionAction\u003cInputStream\u003e() {\n            @Override\n            public InputStream run() throws IOException {\n              HttpURLConnection connection;\n              try {\n                connection \u003d (HttpURLConnection)\n                    connectionFactory.openConnection(url, isSpnegoEnabled);\n              } catch (AuthenticationException e) {\n                throw new IOException(e);\n              }\n              \n              if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n                throw new HttpGetFailedException(\n                    \"Fetch of \" + url +\n                    \" failed with status code \" + connection.getResponseCode() +\n                    \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n                    connection);\n              }\n        \n              String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n              if (contentLength !\u003d null) {\n                advertisedSize \u003d Long.parseLong(contentLength);\n                if (advertisedSize \u003c\u003d 0) {\n                  throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n                      contentLength);\n                }\n              } else {\n                throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n                                      \"by the server when trying to fetch \" + url);\n              }\n        \n              return connection.getInputStream();\n            }\n          });\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "df801074c929d5414b92cc9fc0cc8a2794e02751": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 2:42 PM",
      "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "10/07/12 8:37 PM",
      "commitNameOld": "2c27b5826daafbcda460f7f0e803f2504753db05",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 57.75,
      "commitsBetweenForRepo": 350,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,32 @@\n     public InputStream getInputStream() throws IOException {\n-      HttpURLConnection connection \u003d (HttpURLConnection)\n-          SecurityUtil.openSecureHttpConnection(url);\n-      \n-      if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n-        throw new HttpGetFailedException(\n-            \"Fetch of \" + url +\n-            \" failed with status code \" + connection.getResponseCode() +\n-            \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n-            connection);\n-      }\n-\n-      String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n-      if (contentLength !\u003d null) {\n-        advertisedSize \u003d Long.parseLong(contentLength);\n-        if (advertisedSize \u003c\u003d 0) {\n-          throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n-              contentLength);\n-        }\n-      } else {\n-        throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n-                              \"by the server when trying to fetch \" + url);\n-      }\n-\n-      return connection.getInputStream();\n+      return SecurityUtil.doAsCurrentUser(\n+          new PrivilegedExceptionAction\u003cInputStream\u003e() {\n+            @Override\n+            public InputStream run() throws IOException {\n+              HttpURLConnection connection \u003d (HttpURLConnection)\n+                  SecurityUtil.openSecureHttpConnection(url);\n+              \n+              if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n+                throw new HttpGetFailedException(\n+                    \"Fetch of \" + url +\n+                    \" failed with status code \" + connection.getResponseCode() +\n+                    \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n+                    connection);\n+              }\n+        \n+              String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n+              if (contentLength !\u003d null) {\n+                advertisedSize \u003d Long.parseLong(contentLength);\n+                if (advertisedSize \u003c\u003d 0) {\n+                  throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n+                      contentLength);\n+                }\n+              } else {\n+                throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n+                                      \"by the server when trying to fetch \" + url);\n+              }\n+        \n+              return connection.getInputStream();\n+            }\n+          });\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public InputStream getInputStream() throws IOException {\n      return SecurityUtil.doAsCurrentUser(\n          new PrivilegedExceptionAction\u003cInputStream\u003e() {\n            @Override\n            public InputStream run() throws IOException {\n              HttpURLConnection connection \u003d (HttpURLConnection)\n                  SecurityUtil.openSecureHttpConnection(url);\n              \n              if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n                throw new HttpGetFailedException(\n                    \"Fetch of \" + url +\n                    \" failed with status code \" + connection.getResponseCode() +\n                    \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n                    connection);\n              }\n        \n              String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n              if (contentLength !\u003d null) {\n                advertisedSize \u003d Long.parseLong(contentLength);\n                if (advertisedSize \u003c\u003d 0) {\n                  throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n                      contentLength);\n                }\n              } else {\n                throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n                                      \"by the server when trying to fetch \" + url);\n              }\n        \n              return connection.getInputStream();\n            }\n          });\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java",
      "extendedDetails": {}
    },
    "1d54e2b33122161ac577c390282f575b214f2e4e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3571. Allow EditLogFileInputStream to read from a remote URL. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/12 2:46 PM",
      "commitName": "1d54e2b33122161ac577c390282f575b214f2e4e",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+    public InputStream getInputStream() throws IOException {\n+      HttpURLConnection connection \u003d (HttpURLConnection)\n+          SecurityUtil.openSecureHttpConnection(url);\n+      \n+      if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n+        throw new HttpGetFailedException(\n+            \"Fetch of \" + url +\n+            \" failed with status code \" + connection.getResponseCode() +\n+            \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n+            connection);\n+      }\n+\n+      String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n+      if (contentLength !\u003d null) {\n+        advertisedSize \u003d Long.parseLong(contentLength);\n+        if (advertisedSize \u003c\u003d 0) {\n+          throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n+              contentLength);\n+        }\n+      } else {\n+        throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n+                              \"by the server when trying to fetch \" + url);\n+      }\n+\n+      return connection.getInputStream();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public InputStream getInputStream() throws IOException {\n      HttpURLConnection connection \u003d (HttpURLConnection)\n          SecurityUtil.openSecureHttpConnection(url);\n      \n      if (connection.getResponseCode() !\u003d HttpURLConnection.HTTP_OK) {\n        throw new HttpGetFailedException(\n            \"Fetch of \" + url +\n            \" failed with status code \" + connection.getResponseCode() +\n            \"\\nResponse message:\\n\" + connection.getResponseMessage(),\n            connection);\n      }\n\n      String contentLength \u003d connection.getHeaderField(CONTENT_LENGTH);\n      if (contentLength !\u003d null) {\n        advertisedSize \u003d Long.parseLong(contentLength);\n        if (advertisedSize \u003c\u003d 0) {\n          throw new IOException(\"Invalid \" + CONTENT_LENGTH + \" header: \" +\n              contentLength);\n        }\n      } else {\n        throw new IOException(CONTENT_LENGTH + \" header is not provided \" +\n                              \"by the server when trying to fetch \" + url);\n      }\n\n      return connection.getInputStream();\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EditLogFileInputStream.java"
    }
  }
}