{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryWithSnapshotFeature.java",
  "functionName": "getChildrenList",
  "functionId": "getChildrenList___currentDir-INodeDirectory(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
  "functionStartLine": 194,
  "functionEndLine": 237,
  "numCommitsSeen": 122,
  "timeTaken": 4402,
  "changeHistory": [
    "346caa209571dedf1331b2658d5702b45dd40bfe",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823",
    "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
    "a3bf2083867db5d848ea14f145d120f02b820af2",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16"
  ],
  "changeHistoryShort": {
    "346caa209571dedf1331b2658d5702b45dd40bfe": "Ybodychange",
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": "Ybodychange",
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": "Ymultichange(Yfilerename,Ymodifierchange)",
    "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": "Ybodychange",
    "a3bf2083867db5d848ea14f145d120f02b820af2": "Ybodychange",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": "Ybodychange",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": "Ybodychange",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": "Ybodychange",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": "Yintroduced"
  },
  "changeHistoryDetails": {
    "346caa209571dedf1331b2658d5702b45dd40bfe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13227. Add a method to calculate cumulative diff over multiple snapshots in DirectoryDiffList.  Contributed by Shashikant Banerjee\n",
      "commitDate": "06/03/18 1:35 PM",
      "commitName": "346caa209571dedf1331b2658d5702b45dd40bfe",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "02/03/18 5:47 PM",
      "commitNameOld": "ba82e5c488ca0081534c1e40810b3f9e7da9eaad",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.82,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,44 @@\n     private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n-            for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null;\n-                d \u003d d.getPosterior()) {\n+            DirectoryDiffList directoryDiffList \u003d\n+                currentDir.getDirectoryWithSnapshotFeature().diffs;\n+            final int diffIndex \u003d\n+                directoryDiffList.getDiffIndexById(getSnapshotId());\n+            List\u003cDirectoryDiff\u003e diffList \u003d directoryDiffList\n+                .getDiffListBetweenSnapshots(diffIndex,\n+                    directoryDiffList.asList().size(), currentDir);\n+            for (DirectoryDiff d : diffList) {\n               combined.combinePosterior(d.diff, null);\n             }\n-            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n-                currentDir.getChildrenList(Snapshot.CURRENT_STATE_ID)));\n+            children \u003d combined.apply2Current(ReadOnlyList.Util\n+                .asList(currentDir.getChildrenList(Snapshot.CURRENT_STATE_ID)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            DirectoryDiffList directoryDiffList \u003d\n                currentDir.getDirectoryWithSnapshotFeature().diffs;\n            final int diffIndex \u003d\n                directoryDiffList.getDiffIndexById(getSnapshotId());\n            List\u003cDirectoryDiff\u003e diffList \u003d directoryDiffList\n                .getDiffListBetweenSnapshots(diffIndex,\n                    directoryDiffList.asList().size(), currentDir);\n            for (DirectoryDiff d : diffList) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util\n                .asList(currentDir.getChildrenList(Snapshot.CURRENT_STATE_ID)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n\n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n\n        @Override\n        public int size() {\n          return childrenSize;\n        }\n\n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "70cff9e2f0c8f78c1dc54a064182971bb2106795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5715. Use Snapshot ID to indicate the corresponding Snapshot for a FileDiff/DirectoryDiff. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 12:52 PM",
      "commitName": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/12/13 2:13 AM",
      "commitNameOld": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 24.44,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n             for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; \n                 d \u003d d.getPosterior()) {\n               combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n-                currentDir.getChildrenList(null)));\n+                currentDir.getChildrenList(Snapshot.CURRENT_STATE_ID)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; \n                d \u003d d.getPosterior()) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                currentDir.getChildrenList(Snapshot.CURRENT_STATE_ID)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n\n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n\n        @Override\n        public int size() {\n          return childrenSize;\n        }\n\n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
      "extendedDetails": {}
    },
    "44a6560b5da3f79d2299579a36e7a2a60a91f823": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/13 2:13 AM",
      "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-    ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n+    private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n-            for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n+            for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; \n+                d \u003d d.getPosterior()) {\n               combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                 currentDir.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n-    \n+\n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n-    \n+\n         @Override\n         public int size() {\n           return childrenSize;\n         }\n-    \n+\n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; \n                d \u003d d.getPosterior()) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                currentDir.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n\n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n\n        @Override\n        public int size() {\n          return childrenSize;\n        }\n\n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5632. Flatten INodeDirectory hierarchy: Replace INodeDirectoryWithSnapshot with DirectoryWithSnapshotFeature.  Contributed by jing9 \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550917 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/12/13 2:13 AM",
          "commitName": "44a6560b5da3f79d2299579a36e7a2a60a91f823",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "13/12/13 6:00 PM",
          "commitNameOld": "d63cfdbf1a5389acb27e8cd61f4c14d8eaedb26f",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-    ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n+    private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n-            for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n+            for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; \n+                d \u003d d.getPosterior()) {\n               combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                 currentDir.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n-    \n+\n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n-    \n+\n         @Override\n         public int size() {\n           return childrenSize;\n         }\n-    \n+\n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for (DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; \n                d \u003d d.getPosterior()) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                currentDir.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n\n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n\n        @Override\n        public int size() {\n          return childrenSize;\n        }\n\n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryWithSnapshotFeature.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4446. Support file snapshots with diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/13 6:18 PM",
      "commitName": "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4446. Support file snapshots with diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/02/13 6:18 PM",
          "commitName": "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "02/02/13 12:39 PM",
          "commitNameOld": "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 5.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-    ReadOnlyList\u003cINode\u003e getChildrenList() {\n+    ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n             for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n               combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n-                getCurrentINode().getChildrenList(null)));\n+                currentDir.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                currentDir.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[currentDir-INodeDirectory(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4446. Support file snapshots with diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1443825 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/02/13 6:18 PM",
          "commitName": "4f7d921324c7fa9623c34688e3f2aa57fbfcb8b3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "02/02/13 12:39 PM",
          "commitNameOld": "24d96cbcdb80a2de4ada7aa70056a481da24fcc5",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 5.24,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n-    ReadOnlyList\u003cINode\u003e getChildrenList() {\n+    ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n             for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n               combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n-                getCurrentINode().getChildrenList(null)));\n+                currentDir.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList(final INodeDirectory currentDir) {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                currentDir.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f4fe09687f9d13e3e552eaaa012399a5bf246d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4447. Refactor INodeDirectoryWithSnapshot for supporting general INode diff lists.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1440216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 3:25 PM",
      "commitName": "6f4fe09687f9d13e3e552eaaa012399a5bf246d3",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/01/13 1:31 PM",
      "commitNameOld": "66ea187228c899cadf23d10c7032c8efe1aa0df4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     ReadOnlyList\u003cINode\u003e getChildrenList() {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final ChildrenDiff combined \u003d new ChildrenDiff();\n-            for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n+            for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n               combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n-                INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n+                getCurrentINode().getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList() {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for(DirectoryDiff d \u003d DirectoryDiff.this; d !\u003d null; d \u003d d.getPosterior()) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                getCurrentINode().getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "a3bf2083867db5d848ea14f145d120f02b820af2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/13 4:01 PM",
      "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/01/13 7:09 PM",
      "commitNameOld": "12e8ba804f9454d9bb07099e35ce7ef63c0d4e1e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     ReadOnlyList\u003cINode\u003e getChildrenList() {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n-            final Diff combined \u003d new Diff();\n+            final ChildrenDiff combined \u003d new ChildrenDiff();\n             for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n-              combined.combinePostDiff(d.diff, null);\n+              combined.combinePosterior(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                 INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList() {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ChildrenDiff combined \u003d new ChildrenDiff();\n            for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n              combined.combinePosterior(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/13 1:33 PM",
      "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/01/13 6:48 PM",
      "commitNameOld": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     ReadOnlyList\u003cINode\u003e getChildrenList() {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final Diff combined \u003d new Diff();\n             for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n-              combined.combinePostDiff(d.diff, null, false);\n+              combined.combinePostDiff(d.diff, null);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                 INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList() {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final Diff combined \u003d new Diff();\n            for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n              combined.combinePostDiff(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:48 PM",
      "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/01/13 4:43 AM",
      "commitNameOld": "7856221d4a4701565bb21259d839c8c402e72f49",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.59,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     ReadOnlyList\u003cINode\u003e getChildrenList() {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n             final Diff combined \u003d new Diff();\n             for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n-              combined.combinePostDiff(d.diff, null);\n+              combined.combinePostDiff(d.diff, null, false);\n             }\n             children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                 INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList() {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final Diff combined \u003d new Diff();\n            for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n              combined.combinePostDiff(d.diff, null, false);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/01/13 10:20 PM",
      "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/01/13 8:44 AM",
      "commitNameOld": "2d4097840c29116e9b000c158ce841d27863ad6e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.57,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n     ReadOnlyList\u003cINode\u003e getChildrenList() {\n       return new ReadOnlyList\u003cINode\u003e() {\n         private List\u003cINode\u003e children \u003d null;\n \n         private List\u003cINode\u003e initChildren() {\n           if (children \u003d\u003d null) {\n-            final ReadOnlyList\u003cINode\u003e posterior \u003d posteriorDiff !\u003d null?\n-                posteriorDiff.getChildrenList()\n-                : INodeDirectoryWithSnapshot.this.getChildrenList(null);\n-            children \u003d diff.apply2Current(ReadOnlyList.Util.asList(posterior));\n+            final Diff combined \u003d new Diff();\n+            for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n+              combined.combinePostDiff(d.diff, null);\n+            }\n+            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n+                INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n           }\n           return children;\n         }\n \n         @Override\n         public Iterator\u003cINode\u003e iterator() {\n           return initChildren().iterator();\n         }\n     \n         @Override\n         public boolean isEmpty() {\n           return childrenSize \u003d\u003d 0;\n         }\n     \n         @Override\n         public int size() {\n           return childrenSize;\n         }\n     \n         @Override\n         public INode get(int i) {\n           return initChildren().get(i);\n         }\n       };\n     }\n\\ No newline at end of file\n",
      "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList() {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final Diff combined \u003d new Diff();\n            for(SnapshotDiff d \u003d SnapshotDiff.this; d !\u003d null; d \u003d d.posteriorDiff) {\n              combined.combinePostDiff(d.diff, null);\n            }\n            children \u003d combined.apply2Current(ReadOnlyList.Util.asList(\n                INodeDirectoryWithSnapshot.this.getChildrenList(null)));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/12 5:30 PM",
      "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,35 @@\n+    ReadOnlyList\u003cINode\u003e getChildrenList() {\n+      return new ReadOnlyList\u003cINode\u003e() {\n+        private List\u003cINode\u003e children \u003d null;\n+\n+        private List\u003cINode\u003e initChildren() {\n+          if (children \u003d\u003d null) {\n+            final ReadOnlyList\u003cINode\u003e posterior \u003d posteriorDiff !\u003d null?\n+                posteriorDiff.getChildrenList()\n+                : INodeDirectoryWithSnapshot.this.getChildrenList(null);\n+            children \u003d diff.apply2Current(ReadOnlyList.Util.asList(posterior));\n+          }\n+          return children;\n+        }\n+\n+        @Override\n+        public Iterator\u003cINode\u003e iterator() {\n+          return initChildren().iterator();\n+        }\n+    \n+        @Override\n+        public boolean isEmpty() {\n+          return childrenSize \u003d\u003d 0;\n+        }\n+    \n+        @Override\n+        public int size() {\n+          return childrenSize;\n+        }\n+    \n+        @Override\n+        public INode get(int i) {\n+          return initChildren().get(i);\n+        }\n+      };\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    ReadOnlyList\u003cINode\u003e getChildrenList() {\n      return new ReadOnlyList\u003cINode\u003e() {\n        private List\u003cINode\u003e children \u003d null;\n\n        private List\u003cINode\u003e initChildren() {\n          if (children \u003d\u003d null) {\n            final ReadOnlyList\u003cINode\u003e posterior \u003d posteriorDiff !\u003d null?\n                posteriorDiff.getChildrenList()\n                : INodeDirectoryWithSnapshot.this.getChildrenList(null);\n            children \u003d diff.apply2Current(ReadOnlyList.Util.asList(posterior));\n          }\n          return children;\n        }\n\n        @Override\n        public Iterator\u003cINode\u003e iterator() {\n          return initChildren().iterator();\n        }\n    \n        @Override\n        public boolean isEmpty() {\n          return childrenSize \u003d\u003d 0;\n        }\n    \n        @Override\n        public int size() {\n          return childrenSize;\n        }\n    \n        @Override\n        public INode get(int i) {\n          return initChildren().get(i);\n        }\n      };\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}