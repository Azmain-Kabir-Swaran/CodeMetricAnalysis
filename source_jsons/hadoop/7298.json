{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EditLogTailer.java",
  "functionName": "doWork",
  "functionId": "doWork",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
  "functionStartLine": 473,
  "functionEndLine": 541,
  "numCommitsSeen": 62,
  "timeTaken": 5377,
  "changeHistory": [
    "0f598aed13d0fc55908bab3f1653f20084153299",
    "827dbb11e24be294b40088a8aa46086ba8ca4ba8",
    "b24efa11ea2b3ecbae6578058aea89b6823d18d8",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
    "8e7548d33be9c4874daab18b2e774bdc2ed216d3",
    "8def51a708e5de8a57689b8c9b3fd034cfd2cd78",
    "f43a20c529ac3f104add95b222de6580757b3763",
    "527933f4f351a3df5e369c8bb6e2cfc4937e0836",
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
    "5e26de982b1ab68fffeb897fef4c97458ad46708",
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa",
    "d880c7cc784cf636b2590fd98ea7c8ee67065a30",
    "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
    "20a6560bdfd8c4e3b6c3ac9b0f0f62d32e3a2191",
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58",
    "f87a4b40bc99e76602a75906df31747cfdbff78a"
  ],
  "changeHistoryShort": {
    "0f598aed13d0fc55908bab3f1653f20084153299": "Ybodychange",
    "827dbb11e24be294b40088a8aa46086ba8ca4ba8": "Ybodychange",
    "b24efa11ea2b3ecbae6578058aea89b6823d18d8": "Ybodychange",
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": "Ybodychange",
    "8e7548d33be9c4874daab18b2e774bdc2ed216d3": "Ybodychange",
    "8def51a708e5de8a57689b8c9b3fd034cfd2cd78": "Ybodychange",
    "f43a20c529ac3f104add95b222de6580757b3763": "Ybodychange",
    "527933f4f351a3df5e369c8bb6e2cfc4937e0836": "Ybodychange",
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9": "Ybodychange",
    "5e26de982b1ab68fffeb897fef4c97458ad46708": "Ymultichange(Yrename,Ymodifierchange)",
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa": "Ybodychange",
    "d880c7cc784cf636b2590fd98ea7c8ee67065a30": "Ybodychange",
    "9a07ba8945407cd8f63169faf9e0faa4311d38c7": "Ybodychange",
    "20a6560bdfd8c4e3b6c3ac9b0f0f62d32e3a2191": "Ybodychange",
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58": "Ybodychange",
    "f87a4b40bc99e76602a75906df31747cfdbff78a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0f598aed13d0fc55908bab3f1653f20084153299": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14276. [SBN read] Reduce tailing overhead. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "21/08/19 1:55 PM",
      "commitName": "0f598aed13d0fc55908bab3f1653f20084153299",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "07/08/19 9:25 AM",
      "commitNameOld": "827dbb11e24be294b40088a8aa46086ba8ca4ba8",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 14.19,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,69 @@\n     private void doWork() {\n       long currentSleepTimeMs \u003d sleepTimeMs;\n       while (shouldRun) {\n         long editsTailed  \u003d 0;\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n-          // triggered. \n+          // triggered.\n+          boolean triggeredLogRoll \u003d false;\n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n+            triggeredLogRoll \u003d true;\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           // Prevent reading of name system while being modified. The full\n           // name system lock will be acquired to further block even the block\n           // state updates.\n           namesystem.cpLockInterruptibly();\n           long startTime \u003d Time.monotonicNow();\n           try {\n             NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                 startTime - lastLoadTimeMs);\n             editsTailed \u003d doTailEdits();\n           } finally {\n             namesystem.cpUnlock();\n             NameNode.getNameNodeMetrics().addEditLogTailTime(\n                 Time.monotonicNow() - startTime);\n           }\n           //Update NameDirSize Metric\n-          namesystem.getFSImage().getStorage().updateNameDirSize();\n+          if (triggeredLogRoll) {\n+            namesystem.getFSImage().getStorage().updateNameDirSize();\n+          }\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n           if (editsTailed \u003d\u003d 0 \u0026\u0026 maxSleepTimeMs \u003e 0) {\n             // If no edits were tailed, apply exponential backoff\n             // before tailing again. Double the current sleep time on each\n             // empty response, but don\u0027t exceed the max. If the sleep time\n             // was configured as 0, start the backoff at 1 ms.\n             currentSleepTimeMs \u003d Math.min(maxSleepTimeMs,\n                 (currentSleepTimeMs \u003d\u003d 0 ? 1 : currentSleepTimeMs) * 2);\n           } else {\n             currentSleepTimeMs \u003d sleepTimeMs; // reset to initial sleep time\n           }\n           EditLogTailer.this.sleep(currentSleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted: {}\", e.getMessage());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      long currentSleepTimeMs \u003d sleepTimeMs;\n      while (shouldRun) {\n        long editsTailed  \u003d 0;\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered.\n          boolean triggeredLogRoll \u003d false;\n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n            triggeredLogRoll \u003d true;\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          long startTime \u003d Time.monotonicNow();\n          try {\n            NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                startTime - lastLoadTimeMs);\n            editsTailed \u003d doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n            NameNode.getNameNodeMetrics().addEditLogTailTime(\n                Time.monotonicNow() - startTime);\n          }\n          //Update NameDirSize Metric\n          if (triggeredLogRoll) {\n            namesystem.getFSImage().getStorage().updateNameDirSize();\n          }\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          if (editsTailed \u003d\u003d 0 \u0026\u0026 maxSleepTimeMs \u003e 0) {\n            // If no edits were tailed, apply exponential backoff\n            // before tailing again. Double the current sleep time on each\n            // empty response, but don\u0027t exceed the max. If the sleep time\n            // was configured as 0, start the backoff at 1 ms.\n            currentSleepTimeMs \u003d Math.min(maxSleepTimeMs,\n                (currentSleepTimeMs \u003d\u003d 0 ? 1 : currentSleepTimeMs) * 2);\n          } else {\n            currentSleepTimeMs \u003d sleepTimeMs; // reset to initial sleep time\n          }\n          EditLogTailer.this.sleep(currentSleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted: {}\", e.getMessage());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "827dbb11e24be294b40088a8aa46086ba8ca4ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14370. Add exponential backoff to the edit log tailer to avoid spinning on empty edit tail requests. Contributed by Erik Krogen.\n",
      "commitDate": "07/08/19 9:25 AM",
      "commitName": "827dbb11e24be294b40088a8aa46086ba8ca4ba8",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "14/06/19 1:37 PM",
      "commitNameOld": "b24efa11ea2b3ecbae6578058aea89b6823d18d8",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 53.83,
      "commitsBetweenForRepo": 445,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,65 @@\n     private void doWork() {\n+      long currentSleepTimeMs \u003d sleepTimeMs;\n       while (shouldRun) {\n+        long editsTailed  \u003d 0;\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           // Prevent reading of name system while being modified. The full\n           // name system lock will be acquired to further block even the block\n           // state updates.\n           namesystem.cpLockInterruptibly();\n           long startTime \u003d Time.monotonicNow();\n           try {\n             NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                 startTime - lastLoadTimeMs);\n-            doTailEdits();\n+            editsTailed \u003d doTailEdits();\n           } finally {\n             namesystem.cpUnlock();\n             NameNode.getNameNodeMetrics().addEditLogTailTime(\n                 Time.monotonicNow() - startTime);\n           }\n           //Update NameDirSize Metric\n           namesystem.getFSImage().getStorage().updateNameDirSize();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n-          Thread.sleep(sleepTimeMs);\n+          if (editsTailed \u003d\u003d 0 \u0026\u0026 maxSleepTimeMs \u003e 0) {\n+            // If no edits were tailed, apply exponential backoff\n+            // before tailing again. Double the current sleep time on each\n+            // empty response, but don\u0027t exceed the max. If the sleep time\n+            // was configured as 0, start the backoff at 1 ms.\n+            currentSleepTimeMs \u003d Math.min(maxSleepTimeMs,\n+                (currentSleepTimeMs \u003d\u003d 0 ? 1 : currentSleepTimeMs) * 2);\n+          } else {\n+            currentSleepTimeMs \u003d sleepTimeMs; // reset to initial sleep time\n+          }\n+          EditLogTailer.this.sleep(currentSleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted: {}\", e.getMessage());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      long currentSleepTimeMs \u003d sleepTimeMs;\n      while (shouldRun) {\n        long editsTailed  \u003d 0;\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          long startTime \u003d Time.monotonicNow();\n          try {\n            NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                startTime - lastLoadTimeMs);\n            editsTailed \u003d doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n            NameNode.getNameNodeMetrics().addEditLogTailTime(\n                Time.monotonicNow() - startTime);\n          }\n          //Update NameDirSize Metric\n          namesystem.getFSImage().getStorage().updateNameDirSize();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          if (editsTailed \u003d\u003d 0 \u0026\u0026 maxSleepTimeMs \u003e 0) {\n            // If no edits were tailed, apply exponential backoff\n            // before tailing again. Double the current sleep time on each\n            // empty response, but don\u0027t exceed the max. If the sleep time\n            // was configured as 0, start the backoff at 1 ms.\n            currentSleepTimeMs \u003d Math.min(maxSleepTimeMs,\n                (currentSleepTimeMs \u003d\u003d 0 ? 1 : currentSleepTimeMs) * 2);\n          } else {\n            currentSleepTimeMs \u003d sleepTimeMs; // reset to initial sleep time\n          }\n          EditLogTailer.this.sleep(currentSleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted: {}\", e.getMessage());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "b24efa11ea2b3ecbae6578058aea89b6823d18d8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14549. EditLogTailer shouldn\u0027t output full stack trace when interrupted. Contributed by Inigo Goiri.\n",
      "commitDate": "14/06/19 1:37 PM",
      "commitName": "b24efa11ea2b3ecbae6578058aea89b6823d18d8",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "13/03/19 1:15 PM",
      "commitNameOld": "66357574ae1da09ced735da36bf7d80a40c3fa1b",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 93.01,
      "commitsBetweenForRepo": 594,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           // Prevent reading of name system while being modified. The full\n           // name system lock will be acquired to further block even the block\n           // state updates.\n           namesystem.cpLockInterruptibly();\n           long startTime \u003d Time.monotonicNow();\n           try {\n             NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                 startTime - lastLoadTimeMs);\n             doTailEdits();\n           } finally {\n             namesystem.cpUnlock();\n             NameNode.getNameNodeMetrics().addEditLogTailTime(\n                 Time.monotonicNow() - startTime);\n           }\n           //Update NameDirSize Metric\n           namesystem.getFSImage().getStorage().updateNameDirSize();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n-          LOG.warn(\"Edit log tailer interrupted\", e);\n+          LOG.warn(\"Edit log tailer interrupted: {}\", e.getMessage());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          long startTime \u003d Time.monotonicNow();\n          try {\n            NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                startTime - lastLoadTimeMs);\n            doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n            NameNode.getNameNodeMetrics().addEditLogTailTime(\n                Time.monotonicNow() - startTime);\n          }\n          //Update NameDirSize Metric\n          namesystem.getFSImage().getStorage().updateNameDirSize();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted: {}\", e.getMessage());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "eca1a4bfe952fc184fe90dde50bac9b0e5293568": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13695. Move logging to slf4j in HDFS package. Contributed by Ian Pickering.\n",
      "commitDate": "06/09/18 2:48 PM",
      "commitName": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "07/08/18 4:13 PM",
      "commitNameOld": "0f8cb127cd759cdc6422d19d8b28f21198ddfd61",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 29.94,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           // Prevent reading of name system while being modified. The full\n           // name system lock will be acquired to further block even the block\n           // state updates.\n           namesystem.cpLockInterruptibly();\n           long startTime \u003d Time.monotonicNow();\n           try {\n             NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                 startTime - lastLoadTimeMs);\n             doTailEdits();\n           } finally {\n             namesystem.cpUnlock();\n             NameNode.getNameNodeMetrics().addEditLogTailTime(\n                 Time.monotonicNow() - startTime);\n           }\n           //Update NameDirSize Metric\n           namesystem.getFSImage().getStorage().updateNameDirSize();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n-          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n+          LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          long startTime \u003d Time.monotonicNow();\n          try {\n            NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                startTime - lastLoadTimeMs);\n            doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n            NameNode.getNameNodeMetrics().addEditLogTailTime(\n                Time.monotonicNow() - startTime);\n          }\n          //Update NameDirSize Metric\n          namesystem.getFSImage().getStorage().updateNameDirSize();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "8e7548d33be9c4874daab18b2e774bdc2ed216d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13641. Add metrics for edit log tailing. Contributed by Chao Sun.\n",
      "commitDate": "13/06/18 5:05 AM",
      "commitName": "8e7548d33be9c4874daab18b2e774bdc2ed216d3",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "31/05/18 2:56 PM",
      "commitNameOld": "ebe5853a458150b7e42fe7434851bfcbe25e354d",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 12.59,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,53 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           // Prevent reading of name system while being modified. The full\n           // name system lock will be acquired to further block even the block\n           // state updates.\n           namesystem.cpLockInterruptibly();\n+          long startTime \u003d Time.monotonicNow();\n           try {\n+            NameNode.getNameNodeMetrics().addEditLogTailInterval(\n+                startTime - lastLoadTimeMs);\n             doTailEdits();\n           } finally {\n             namesystem.cpUnlock();\n+            NameNode.getNameNodeMetrics().addEditLogTailTime(\n+                Time.monotonicNow() - startTime);\n           }\n           //Update NameDirSize Metric\n           namesystem.getFSImage().getStorage().updateNameDirSize();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          long startTime \u003d Time.monotonicNow();\n          try {\n            NameNode.getNameNodeMetrics().addEditLogTailInterval(\n                startTime - lastLoadTimeMs);\n            doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n            NameNode.getNameNodeMetrics().addEditLogTailTime(\n                Time.monotonicNow() - startTime);\n          }\n          //Update NameDirSize Metric\n          namesystem.getFSImage().getStorage().updateNameDirSize();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "8def51a708e5de8a57689b8c9b3fd034cfd2cd78": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9229. Expose size of NameNode directory as a metric. Contributed by Surendra Singh Lilhore.\n\nChange-Id: I985627a5d1400249d72d084283ef366d5ac6e07b\n",
      "commitDate": "29/10/15 11:23 AM",
      "commitName": "8def51a708e5de8a57689b8c9b3fd034cfd2cd78",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "21/09/15 8:54 PM",
      "commitNameOld": "dfd807afab0fae3839c9cc5d552aa0304444f956",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 37.6,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           // Prevent reading of name system while being modified. The full\n           // name system lock will be acquired to further block even the block\n           // state updates.\n           namesystem.cpLockInterruptibly();\n           try {\n             doTailEdits();\n           } finally {\n             namesystem.cpUnlock();\n           }\n+          //Update NameDirSize Metric\n+          namesystem.getFSImage().getStorage().updateNameDirSize();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          try {\n            doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n          }\n          //Update NameDirSize Metric\n          namesystem.getFSImage().getStorage().updateNameDirSize();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "f43a20c529ac3f104add95b222de6580757b3763": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7097. Allow block reports to be processed during checkpointing on standby name node. (kihwal via wang)\n",
      "commitDate": "25/11/14 3:37 PM",
      "commitName": "f43a20c529ac3f104add95b222de6580757b3763",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/03/14 4:32 PM",
      "commitNameOld": "c2ef7e239eb0e81cf8a3e971378e9e696202de67",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 246.0,
      "commitsBetweenForRepo": 2003,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,46 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n-          doTailEdits();\n+          // Prevent reading of name system while being modified. The full\n+          // name system lock will be acquired to further block even the block\n+          // state updates.\n+          namesystem.cpLockInterruptibly();\n+          try {\n+            doTailEdits();\n+          } finally {\n+            namesystem.cpUnlock();\n+          }\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           terminate(1, t);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          // Prevent reading of name system while being modified. The full\n          // name system lock will be acquired to further block even the block\n          // state updates.\n          namesystem.cpLockInterruptibly();\n          try {\n            doTailEdits();\n          } finally {\n            namesystem.cpUnlock();\n          }\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "527933f4f351a3df5e369c8bb6e2cfc4937e0836": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3666. Plumb more exception messages to terminate. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362270 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 2:26 PM",
      "commitName": "527933f4f351a3df5e369c8bb6e2cfc4937e0836",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/07/12 12:01 PM",
      "commitNameOld": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 4.1,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           doTailEdits();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n-          terminate(1, t.getMessage());\n+          terminate(1, t);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          doTailEdits();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3582. Hook daemon process exit for testing. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 10:58 AM",
      "commitName": "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "23/05/12 1:42 PM",
      "commitNameOld": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 48.89,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           doTailEdits();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n-          LOG.error(\"Unknown error encountered while tailing edits. \" +\n+          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n-          runtime.exit(1);\n+          terminate(1, t.getMessage());\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          doTailEdits();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.fatal(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          terminate(1, t.getMessage());\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "5e26de982b1ab68fffeb897fef4c97458ad46708": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "HDFS-2924. Standby checkpointing fails to authenticate in secure cluster. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/12 10:22 AM",
      "commitName": "5e26de982b1ab68fffeb897fef4c97458ad46708",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-2924. Standby checkpointing fails to authenticate in secure cluster. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242439 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/02/12 10:22 AM",
          "commitName": "5e26de982b1ab68fffeb897fef4c97458ad46708",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "09/02/12 9:39 AM",
          "commitNameOld": "bad0a2a4a14efe2f1d19015d3d59aa3c75faa2db",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-    public void run() {\n+    private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           doTailEdits();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           runtime.exit(1);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          doTailEdits();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          runtime.exit(1);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
          "extendedDetails": {
            "oldValue": "run",
            "newValue": "doWork"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2924. Standby checkpointing fails to authenticate in secure cluster. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1242439 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/02/12 10:22 AM",
          "commitName": "5e26de982b1ab68fffeb897fef4c97458ad46708",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "09/02/12 9:39 AM",
          "commitNameOld": "bad0a2a4a14efe2f1d19015d3d59aa3c75faa2db",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-    public void run() {\n+    private void doWork() {\n       while (shouldRun) {\n         try {\n           // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n           // read any more transactions since the last time a roll was\n           // triggered. \n           if (tooLongSinceLastLoad() \u0026\u0026\n               lastRollTriggerTxId \u003c lastLoadedTxnId) {\n             triggerActiveLogRoll();\n           }\n           /**\n            * Check again in case someone calls {@link EditLogTailer#stop} while\n            * we\u0027re triggering an edit log roll, since ipc.Client catches and\n            * ignores {@link InterruptedException} in a few places. This fixes\n            * the bug described in HDFS-2823.\n            */\n           if (!shouldRun) {\n             break;\n           }\n           doTailEdits();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           runtime.exit(1);\n         }\n \n         try {\n           Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void doWork() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          doTailEdits();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          runtime.exit(1);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2737. Automatically trigger log rolls periodically on the active NN. Contributed by Todd Lipcon and Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1234256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/01/12 7:17 PM",
      "commitName": "c3e62de9ce952aa8572b3cae6a8497b8fdef40aa",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "16/01/12 2:16 PM",
      "commitNameOld": "d880c7cc784cf636b2590fd98ea7c8ee67065a30",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 4.21,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,38 @@\n     public void run() {\n       while (shouldRun) {\n         try {\n+          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n+          // read any more transactions since the last time a roll was\n+          // triggered. \n+          if (tooLongSinceLastLoad() \u0026\u0026\n+              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n+            triggerActiveLogRoll();\n+          }\n+          /**\n+           * Check again in case someone calls {@link EditLogTailer#stop} while\n+           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n+           * ignores {@link InterruptedException} in a few places. This fixes\n+           * the bug described in HDFS-2823.\n+           */\n+          if (!shouldRun) {\n+            break;\n+          }\n           doTailEdits();\n         } catch (EditLogInputException elie) {\n           LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n           LOG.error(\"Unknown error encountered while tailing edits. \" +\n               \"Shutting down standby NN.\", t);\n           runtime.exit(1);\n         }\n \n         try {\n-          Thread.sleep(sleepTime);\n+          Thread.sleep(sleepTimeMs);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        try {\n          // There\u0027s no point in triggering a log roll if the Standby hasn\u0027t\n          // read any more transactions since the last time a roll was\n          // triggered. \n          if (tooLongSinceLastLoad() \u0026\u0026\n              lastRollTriggerTxId \u003c lastLoadedTxnId) {\n            triggerActiveLogRoll();\n          }\n          /**\n           * Check again in case someone calls {@link EditLogTailer#stop} while\n           * we\u0027re triggering an edit log roll, since ipc.Client catches and\n           * ignores {@link InterruptedException} in a few places. This fixes\n           * the bug described in HDFS-2823.\n           */\n          if (!shouldRun) {\n            break;\n          }\n          doTailEdits();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          runtime.exit(1);\n        }\n\n        try {\n          Thread.sleep(sleepTimeMs);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "d880c7cc784cf636b2590fd98ea7c8ee67065a30": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2772. On transition to active, standby should not swallow ELIE. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1232197 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/12 2:16 PM",
      "commitName": "d880c7cc784cf636b2590fd98ea7c8ee67065a30",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "06/01/12 12:44 PM",
      "commitNameOld": "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 10.06,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n     public void run() {\n       while (shouldRun) {\n         try {\n           doTailEdits();\n+        } catch (EditLogInputException elie) {\n+          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n         } catch (InterruptedException ie) {\n           // interrupter should have already set shouldRun to false\n           continue;\n         } catch (Throwable t) {\n-          LOG.error(\"Error encountered while tailing edits. Shutting down \" +\n-              \"standby NN.\", t);\n+          LOG.error(\"Unknown error encountered while tailing edits. \" +\n+              \"Shutting down standby NN.\", t);\n           runtime.exit(1);\n         }\n \n         try {\n           Thread.sleep(sleepTime);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        try {\n          doTailEdits();\n        } catch (EditLogInputException elie) {\n          LOG.warn(\"Error while reading edits from disk. Will try again.\", elie);\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Unknown error encountered while tailing edits. \" +\n              \"Shutting down standby NN.\", t);\n          runtime.exit(1);\n        }\n\n        try {\n          Thread.sleep(sleepTime);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "9a07ba8945407cd8f63169faf9e0faa4311d38c7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2709. Appropriately handle error conditions in EditLogTailer. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1228390 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/12 12:44 PM",
      "commitName": "9a07ba8945407cd8f63169faf9e0faa4311d38c7",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/01/12 4:22 PM",
      "commitNameOld": "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,20 @@\n     public void run() {\n       while (shouldRun) {\n         try {\n-          try {\n-            doTailEdits();\n-          } catch (IOException e) {\n-            if (e.getCause() instanceof RuntimeException) {\n-              throw (RuntimeException)e.getCause();\n-            } else if (e.getCause() instanceof Error) {\n-              throw (Error)e.getCause();\n-            }\n-                \n-            // Will try again\n-            LOG.info(\"Got error, will try again.\", e);\n-          }\n+          doTailEdits();\n+        } catch (InterruptedException ie) {\n+          // interrupter should have already set shouldRun to false\n+          continue;\n         } catch (Throwable t) {\n-          // TODO(HA): What should we do in this case? Shutdown the standby NN?\n-          LOG.error(\"Edit log tailer received throwable\", t);\n-          lastError \u003d t;\n+          LOG.error(\"Error encountered while tailing edits. Shutting down \" +\n+              \"standby NN.\", t);\n+          runtime.exit(1);\n         }\n \n         try {\n           Thread.sleep(sleepTime);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        try {\n          doTailEdits();\n        } catch (InterruptedException ie) {\n          // interrupter should have already set shouldRun to false\n          continue;\n        } catch (Throwable t) {\n          LOG.error(\"Error encountered while tailing edits. Shutting down \" +\n              \"standby NN.\", t);\n          runtime.exit(1);\n        }\n\n        try {\n          Thread.sleep(sleepTime);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "20a6560bdfd8c4e3b6c3ac9b0f0f62d32e3a2191": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2692. Fix bugs related to failover from/into safe mode. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1225709 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/12/11 4:30 PM",
      "commitName": "20a6560bdfd8c4e3b6c3ac9b0f0f62d32e3a2191",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "20/12/11 7:03 PM",
      "commitNameOld": "36d1c49486587c2dbb193e8538b1d4510c462fa6",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.89,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,28 @@\n     public void run() {\n       while (shouldRun) {\n         try {\n           try {\n             doTailEdits();\n           } catch (IOException e) {\n+            if (e.getCause() instanceof RuntimeException) {\n+              throw (RuntimeException)e.getCause();\n+            } else if (e.getCause() instanceof Error) {\n+              throw (Error)e.getCause();\n+            }\n+                \n             // Will try again\n             LOG.info(\"Got error, will try again.\", e);\n           }\n         } catch (Throwable t) {\n           // TODO(HA): What should we do in this case? Shutdown the standby NN?\n           LOG.error(\"Edit log tailer received throwable\", t);\n+          lastError \u003d t;\n         }\n \n         try {\n           Thread.sleep(sleepTime);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        try {\n          try {\n            doTailEdits();\n          } catch (IOException e) {\n            if (e.getCause() instanceof RuntimeException) {\n              throw (RuntimeException)e.getCause();\n            } else if (e.getCause() instanceof Error) {\n              throw (Error)e.getCause();\n            }\n                \n            // Will try again\n            LOG.info(\"Got error, will try again.\", e);\n          }\n        } catch (Throwable t) {\n          // TODO(HA): What should we do in this case? Shutdown the standby NN?\n          LOG.error(\"Edit log tailer received throwable\", t);\n          lastError \u003d t;\n        }\n\n        try {\n          Thread.sleep(sleepTime);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2634. Standby needs to ingest latest edit logs before transitioning to active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1212187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 3:55 PM",
      "commitName": "2481474bd9c50a23e4fd2eea67ac2dea11ca1f58",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "30/11/11 1:46 PM",
      "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,21 @@\n     public void run() {\n       while (shouldRun) {\n         try {\n-          long lastTxnId \u003d image.getLastAppliedTxId();\n-          \n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"lastTxnId: \" + lastTxnId);\n-          }\n           try {\n-            // At least one record should be available.\n-            Collection\u003cEditLogInputStream\u003e streams \u003d editLog\n-                .selectInputStreams(lastTxnId + 1, lastTxnId + 1, false);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"edit streams to load from: \" + streams.size());\n-            }\n-            \n-            long editsLoaded \u003d image.loadEdits(streams, namesystem);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"editsLoaded: \" + editsLoaded);\n-            }\n+            doTailEdits();\n           } catch (IOException e) {\n             // Will try again\n             LOG.info(\"Got error, will try again.\", e);\n           }\n         } catch (Throwable t) {\n           // TODO(HA): What should we do in this case? Shutdown the standby NN?\n           LOG.error(\"Edit log tailer received throwable\", t);\n         }\n \n         try {\n           Thread.sleep(sleepTime);\n         } catch (InterruptedException e) {\n           LOG.warn(\"Edit log tailer interrupted\", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        try {\n          try {\n            doTailEdits();\n          } catch (IOException e) {\n            // Will try again\n            LOG.info(\"Got error, will try again.\", e);\n          }\n        } catch (Throwable t) {\n          // TODO(HA): What should we do in this case? Shutdown the standby NN?\n          LOG.error(\"Edit log tailer received throwable\", t);\n        }\n\n        try {\n          Thread.sleep(sleepTime);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java",
      "extendedDetails": {}
    },
    "f87a4b40bc99e76602a75906df31747cfdbff78a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1975. Support for sharing the namenode state from active to standby. Contributed by Jitendra Nath Pandey, Aaron T Myers, and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 1:46 PM",
      "commitName": "f87a4b40bc99e76602a75906df31747cfdbff78a",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,36 @@\n+    public void run() {\n+      while (shouldRun) {\n+        try {\n+          long lastTxnId \u003d image.getLastAppliedTxId();\n+          \n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"lastTxnId: \" + lastTxnId);\n+          }\n+          try {\n+            // At least one record should be available.\n+            Collection\u003cEditLogInputStream\u003e streams \u003d editLog\n+                .selectInputStreams(lastTxnId + 1, lastTxnId + 1, false);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"edit streams to load from: \" + streams.size());\n+            }\n+            \n+            long editsLoaded \u003d image.loadEdits(streams, namesystem);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"editsLoaded: \" + editsLoaded);\n+            }\n+          } catch (IOException e) {\n+            // Will try again\n+            LOG.info(\"Got error, will try again.\", e);\n+          }\n+        } catch (Throwable t) {\n+          // TODO(HA): What should we do in this case? Shutdown the standby NN?\n+          LOG.error(\"Edit log tailer received throwable\", t);\n+        }\n+\n+        try {\n+          Thread.sleep(sleepTime);\n+        } catch (InterruptedException e) {\n+          LOG.warn(\"Edit log tailer interrupted\", e);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        try {\n          long lastTxnId \u003d image.getLastAppliedTxId();\n          \n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"lastTxnId: \" + lastTxnId);\n          }\n          try {\n            // At least one record should be available.\n            Collection\u003cEditLogInputStream\u003e streams \u003d editLog\n                .selectInputStreams(lastTxnId + 1, lastTxnId + 1, false);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"edit streams to load from: \" + streams.size());\n            }\n            \n            long editsLoaded \u003d image.loadEdits(streams, namesystem);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"editsLoaded: \" + editsLoaded);\n            }\n          } catch (IOException e) {\n            // Will try again\n            LOG.info(\"Got error, will try again.\", e);\n          }\n        } catch (Throwable t) {\n          // TODO(HA): What should we do in this case? Shutdown the standby NN?\n          LOG.error(\"Edit log tailer received throwable\", t);\n        }\n\n        try {\n          Thread.sleep(sleepTime);\n        } catch (InterruptedException e) {\n          LOG.warn(\"Edit log tailer interrupted\", e);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/EditLogTailer.java"
    }
  }
}