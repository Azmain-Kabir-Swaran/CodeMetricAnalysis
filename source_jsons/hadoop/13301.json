{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "removeDecomNodeFromList",
  "functionId": "removeDecomNodeFromList___nodeList-List__DatanodeDescriptor__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 1011,
  "functionEndLine": 1019,
  "numCommitsSeen": 184,
  "timeTaken": 5277,
  "changeHistory": [
    "8602692338d6f493647205e0241e4116211fab75",
    "10ab7d595ece59f2d00b406ba8812c6295a4187f",
    "a7bfb25d2bbab0a329712d1efb143edc49a4076d",
    "be7dd8333a7e56e732171db0781786987de03195",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "371f4a59059322000a40eb4bdf5386b96b626ece",
    "233a7aa34f37350bf7bcdd9c84b97d613e7344c9"
  ],
  "changeHistoryShort": {
    "8602692338d6f493647205e0241e4116211fab75": "Ymultichange(Ymodifierchange,Ybodychange)",
    "10ab7d595ece59f2d00b406ba8812c6295a4187f": "Ybodychange",
    "a7bfb25d2bbab0a329712d1efb143edc49a4076d": "Ybodychange",
    "be7dd8333a7e56e732171db0781786987de03195": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "371f4a59059322000a40eb4bdf5386b96b626ece": "Ymodifierchange",
    "233a7aa34f37350bf7bcdd9c84b97d613e7344c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8602692338d6f493647205e0241e4116211fab75": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-9371. Code cleanup for DatanodeManager. Contributed by Jing Zhao.\n",
      "commitDate": "15/12/15 10:47 AM",
      "commitName": "8602692338d6f493647205e0241e4116211fab75",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9371. Code cleanup for DatanodeManager. Contributed by Jing Zhao.\n",
          "commitDate": "15/12/15 10:47 AM",
          "commitName": "8602692338d6f493647205e0241e4116211fab75",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "01/12/15 4:09 PM",
          "commitNameOld": "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 13.78,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,9 @@\n-  private void removeDecomNodeFromList(\n+  private static void removeDecomNodeFromList(\n       final List\u003cDatanodeDescriptor\u003e nodeList) {\n-    Iterator\u003cDatanodeDescriptor\u003e it\u003dnull;\n-    for (it \u003d nodeList.iterator(); it.hasNext();) {\n+    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n       DatanodeDescriptor node \u003d it.next();\n       if (node.isDecommissioned()) {\n         it.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void removeDecomNodeFromList(\n      final List\u003cDatanodeDescriptor\u003e nodeList) {\n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if (node.isDecommissioned()) {\n        it.remove();\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9371. Code cleanup for DatanodeManager. Contributed by Jing Zhao.\n",
          "commitDate": "15/12/15 10:47 AM",
          "commitName": "8602692338d6f493647205e0241e4116211fab75",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "01/12/15 4:09 PM",
          "commitNameOld": "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 13.78,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,9 @@\n-  private void removeDecomNodeFromList(\n+  private static void removeDecomNodeFromList(\n       final List\u003cDatanodeDescriptor\u003e nodeList) {\n-    Iterator\u003cDatanodeDescriptor\u003e it\u003dnull;\n-    for (it \u003d nodeList.iterator(); it.hasNext();) {\n+    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n       DatanodeDescriptor node \u003d it.next();\n       if (node.isDecommissioned()) {\n         it.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void removeDecomNodeFromList(\n      final List\u003cDatanodeDescriptor\u003e nodeList) {\n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if (node.isDecommissioned()) {\n        it.remove();\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "10ab7d595ece59f2d00b406ba8812c6295a4187f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8780. Fetching live/dead datanode list with arg true for removeDecommissionNode,returns list with decom node. (Contributed by J.Andreina)\n",
      "commitDate": "21/09/15 11:55 PM",
      "commitName": "10ab7d595ece59f2d00b406ba8812c6295a4187f",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "04/09/15 11:45 AM",
      "commitNameOld": "715b9c649982bff91d1f9eae656ba3b82178e1a3",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 17.51,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,10 @@\n-  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n-    // If the include list is empty, any nodes are welcomed and it does not\n-    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n-    if (!hostFileManager.hasIncludes()) {\n-      return;\n-    }\n-\n-    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n+  private void removeDecomNodeFromList(\n+      final List\u003cDatanodeDescriptor\u003e nodeList) {\n+    Iterator\u003cDatanodeDescriptor\u003e it\u003dnull;\n+    for (it \u003d nodeList.iterator(); it.hasNext();) {\n       DatanodeDescriptor node \u003d it.next();\n-      if ((!hostFileManager.isIncluded(node)) \u0026\u0026 (!hostFileManager.isExcluded(node))\n-          \u0026\u0026 node.isDecommissioned()) {\n-        // Include list is not empty, an existing datanode does not appear\n-        // in both include or exclude lists and it has been decommissioned.\n-        // Remove it from the node list.\n+      if (node.isDecommissioned()) {\n         it.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeDecomNodeFromList(\n      final List\u003cDatanodeDescriptor\u003e nodeList) {\n    Iterator\u003cDatanodeDescriptor\u003e it\u003dnull;\n    for (it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if (node.isDecommissioned()) {\n        it.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "a7bfb25d2bbab0a329712d1efb143edc49a4076d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3934. duplicative dfs_hosts entries handled wrong. (cmccabe)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489065 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 10:14 AM",
      "commitName": "a7bfb25d2bbab0a329712d1efb143edc49a4076d",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "28/05/13 1:17 PM",
      "commitNameOld": "4bb72210c266707806f3ce3e974968a9a137b25b",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n     // If the include list is empty, any nodes are welcomed and it does not\n     // make sense to exclude any nodes from the cluster. Therefore, no remove.\n-    if (hostsReader.getHosts().isEmpty()) {\n+    if (!hostFileManager.hasIncludes()) {\n       return;\n     }\n-    \n+\n     for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n       DatanodeDescriptor node \u003d it.next();\n-      if ((!inHostsList(node)) \u0026\u0026 (!inExcludedHostsList(node))\n+      if ((!hostFileManager.isIncluded(node)) \u0026\u0026 (!hostFileManager.isExcluded(node))\n           \u0026\u0026 node.isDecommissioned()) {\n         // Include list is not empty, an existing datanode does not appear\n         // in both include or exclude lists and it has been decommissioned.\n         // Remove it from the node list.\n         it.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n    // If the include list is empty, any nodes are welcomed and it does not\n    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n    if (!hostFileManager.hasIncludes()) {\n      return;\n    }\n\n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if ((!hostFileManager.isIncluded(node)) \u0026\u0026 (!hostFileManager.isExcluded(node))\n          \u0026\u0026 node.isDecommissioned()) {\n        // Include list is not empty, an existing datanode does not appear\n        // in both include or exclude lists and it has been decommissioned.\n        // Remove it from the node list.\n        it.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "be7dd8333a7e56e732171db0781786987de03195": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3144. Refactor DatanodeID#getName by use. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/12 3:12 PM",
      "commitName": "be7dd8333a7e56e732171db0781786987de03195",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "31/03/12 8:41 PM",
      "commitNameOld": "0663dbaac0a19719ddf9cd4290ba893bfca69da2",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n     // If the include list is empty, any nodes are welcomed and it does not\n     // make sense to exclude any nodes from the cluster. Therefore, no remove.\n     if (hostsReader.getHosts().isEmpty()) {\n       return;\n     }\n     \n     for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n       DatanodeDescriptor node \u003d it.next();\n-      if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n+      if ((!inHostsList(node)) \u0026\u0026 (!inExcludedHostsList(node))\n           \u0026\u0026 node.isDecommissioned()) {\n         // Include list is not empty, an existing datanode does not appear\n         // in both include or exclude lists and it has been decommissioned.\n         // Remove it from the node list.\n         it.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n    // If the include list is empty, any nodes are welcomed and it does not\n    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n    if (hostsReader.getHosts().isEmpty()) {\n      return;\n    }\n    \n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if ((!inHostsList(node)) \u0026\u0026 (!inExcludedHostsList(node))\n          \u0026\u0026 node.isDecommissioned()) {\n        // Include list is not empty, an existing datanode does not appear\n        // in both include or exclude lists and it has been decommissioned.\n        // Remove it from the node list.\n        it.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n    // If the include list is empty, any nodes are welcomed and it does not\n    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n    if (hostsReader.getHosts().isEmpty()) {\n      return;\n    }\n    \n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n          \u0026\u0026 node.isDecommissioned()) {\n        // Include list is not empty, an existing datanode does not appear\n        // in both include or exclude lists and it has been decommissioned.\n        // Remove it from the node list.\n        it.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n    // If the include list is empty, any nodes are welcomed and it does not\n    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n    if (hostsReader.getHosts().isEmpty()) {\n      return;\n    }\n    \n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n          \u0026\u0026 node.isDecommissioned()) {\n        // Include list is not empty, an existing datanode does not appear\n        // in both include or exclude lists and it has been decommissioned.\n        // Remove it from the node list.\n        it.remove();\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
      }
    },
    "371f4a59059322000a40eb4bdf5386b96b626ece": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-2228. Move block and datanode code from FSNamesystem to BlockManager and DatanodeManager.  (szetszwo)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/11 3:06 AM",
      "commitName": "371f4a59059322000a40eb4bdf5386b96b626ece",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/08/11 3:55 PM",
      "commitNameOld": "7fac946ac983e31613fd62836c8ac9c4a579210a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-  public void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n+  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n     // If the include list is empty, any nodes are welcomed and it does not\n     // make sense to exclude any nodes from the cluster. Therefore, no remove.\n     if (hostsReader.getHosts().isEmpty()) {\n       return;\n     }\n     \n     for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n       DatanodeDescriptor node \u003d it.next();\n       if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n           \u0026\u0026 node.isDecommissioned()) {\n         // Include list is not empty, an existing datanode does not appear\n         // in both include or exclude lists and it has been decommissioned.\n         // Remove it from the node list.\n         it.remove();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n    // If the include list is empty, any nodes are welcomed and it does not\n    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n    if (hostsReader.getHosts().isEmpty()) {\n      return;\n    }\n    \n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n          \u0026\u0026 node.isDecommissioned()) {\n        // Include list is not empty, an existing datanode does not appear\n        // in both include or exclude lists and it has been decommissioned.\n        // Remove it from the node list.\n        it.remove();\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[private]"
      }
    },
    "233a7aa34f37350bf7bcdd9c84b97d613e7344c9": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2167.  Move dnsToSwitchMapping and hostsReader from FSNamesystem to DatanodeManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149455 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/11 9:20 PM",
      "commitName": "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,18 @@\n+  public void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n+    // If the include list is empty, any nodes are welcomed and it does not\n+    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n+    if (hostsReader.getHosts().isEmpty()) {\n+      return;\n+    }\n+    \n+    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n+      DatanodeDescriptor node \u003d it.next();\n+      if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n+          \u0026\u0026 node.isDecommissioned()) {\n+        // Include list is not empty, an existing datanode does not appear\n+        // in both include or exclude lists and it has been decommissioned.\n+        // Remove it from the node list.\n+        it.remove();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeDecomNodeFromList(final List\u003cDatanodeDescriptor\u003e nodeList) {\n    // If the include list is empty, any nodes are welcomed and it does not\n    // make sense to exclude any nodes from the cluster. Therefore, no remove.\n    if (hostsReader.getHosts().isEmpty()) {\n      return;\n    }\n    \n    for (Iterator\u003cDatanodeDescriptor\u003e it \u003d nodeList.iterator(); it.hasNext();) {\n      DatanodeDescriptor node \u003d it.next();\n      if ((!inHostsList(node, null)) \u0026\u0026 (!inExcludedHostsList(node, null))\n          \u0026\u0026 node.isDecommissioned()) {\n        // Include list is not empty, an existing datanode does not appear\n        // in both include or exclude lists and it has been decommissioned.\n        // Remove it from the node list.\n        it.remove();\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
    }
  }
}