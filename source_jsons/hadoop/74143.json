{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultImpersonationProvider.java",
  "functionName": "init",
  "functionId": "init___configurationPrefix-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
  "functionStartLine": 68,
  "functionEndLine": 100,
  "numCommitsSeen": 7,
  "timeTaken": 1230,
  "changeHistory": [
    "5f0b924360b345f491c2d6693882f1069c7f3508",
    "64ed72a047a1ff20e07aaf18ebdb5f5d29569829"
  ],
  "changeHistoryShort": {
    "5f0b924360b345f491c2d6693882f1069c7f3508": "Ybodychange",
    "64ed72a047a1ff20e07aaf18ebdb5f5d29569829": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f0b924360b345f491c2d6693882f1069c7f3508": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15395. DefaultImpersonationProvider fails to parse proxy user config if username has . in it. Contributed by Ajay Kumar.\n",
      "commitDate": "25/07/18 8:39 AM",
      "commitName": "5f0b924360b345f491c2d6693882f1069c7f3508",
      "commitAuthor": "Mukul Kumar Singh",
      "commitDateOld": "18/10/15 6:05 AM",
      "commitNameOld": "0ab3f9d56465bf31668159c562305a3b8222004c",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1011.11,
      "commitsBetweenForRepo": 7427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public void init(String configurationPrefix) {\n     configPrefix \u003d configurationPrefix +\n         (configurationPrefix.endsWith(\".\") ? \"\" : \".\");\n     \n     // constructing regex to match the following patterns:\n     //   $configPrefix.[ANY].users\n     //   $configPrefix.[ANY].groups\n     //   $configPrefix.[ANY].hosts\n     //\n     String prefixRegEx \u003d configPrefix.replace(\".\", \"\\\\.\");\n-    String usersGroupsRegEx \u003d prefixRegEx + \"[^.]*(\" +\n+    String usersGroupsRegEx \u003d prefixRegEx + \"[\\\\S]*(\" +\n         Pattern.quote(CONF_USERS) + \"|\" + Pattern.quote(CONF_GROUPS) + \")\";\n-    String hostsRegEx \u003d prefixRegEx + \"[^.]*\" + Pattern.quote(CONF_HOSTS);\n+    String hostsRegEx \u003d prefixRegEx + \"[\\\\S]*\" + Pattern.quote(CONF_HOSTS);\n \n   // get list of users and groups per proxyuser\n     Map\u003cString,String\u003e allMatchKeys \u003d \n         conf.getValByRegex(usersGroupsRegEx);\n     for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {  \n       String aclKey \u003d getAclKey(entry.getKey());\n       if (!proxyUserAcl.containsKey(aclKey)) {\n         proxyUserAcl.put(aclKey, new AccessControlList(\n             allMatchKeys.get(aclKey + CONF_USERS) ,\n             allMatchKeys.get(aclKey + CONF_GROUPS)));\n       }\n     }\n \n     // get hosts per proxyuser\n     allMatchKeys \u003d conf.getValByRegex(hostsRegEx);\n     for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {\n       proxyHosts.put(entry.getKey(),\n           new MachineList(entry.getValue()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(String configurationPrefix) {\n    configPrefix \u003d configurationPrefix +\n        (configurationPrefix.endsWith(\".\") ? \"\" : \".\");\n    \n    // constructing regex to match the following patterns:\n    //   $configPrefix.[ANY].users\n    //   $configPrefix.[ANY].groups\n    //   $configPrefix.[ANY].hosts\n    //\n    String prefixRegEx \u003d configPrefix.replace(\".\", \"\\\\.\");\n    String usersGroupsRegEx \u003d prefixRegEx + \"[\\\\S]*(\" +\n        Pattern.quote(CONF_USERS) + \"|\" + Pattern.quote(CONF_GROUPS) + \")\";\n    String hostsRegEx \u003d prefixRegEx + \"[\\\\S]*\" + Pattern.quote(CONF_HOSTS);\n\n  // get list of users and groups per proxyuser\n    Map\u003cString,String\u003e allMatchKeys \u003d \n        conf.getValByRegex(usersGroupsRegEx);\n    for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {  \n      String aclKey \u003d getAclKey(entry.getKey());\n      if (!proxyUserAcl.containsKey(aclKey)) {\n        proxyUserAcl.put(aclKey, new AccessControlList(\n            allMatchKeys.get(aclKey + CONF_USERS) ,\n            allMatchKeys.get(aclKey + CONF_GROUPS)));\n      }\n    }\n\n    // get hosts per proxyuser\n    allMatchKeys \u003d conf.getValByRegex(hostsRegEx);\n    for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {\n      proxyHosts.put(entry.getKey(),\n          new MachineList(entry.getValue()));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java",
      "extendedDetails": {}
    },
    "64ed72a047a1ff20e07aaf18ebdb5f5d29569829": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10817. ProxyUsers configuration should support configurable prefixes. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611780 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 12:42 PM",
      "commitName": "64ed72a047a1ff20e07aaf18ebdb5f5d29569829",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,33 @@\n+  public void init(String configurationPrefix) {\n+    configPrefix \u003d configurationPrefix +\n+        (configurationPrefix.endsWith(\".\") ? \"\" : \".\");\n+    \n+    // constructing regex to match the following patterns:\n+    //   $configPrefix.[ANY].users\n+    //   $configPrefix.[ANY].groups\n+    //   $configPrefix.[ANY].hosts\n+    //\n+    String prefixRegEx \u003d configPrefix.replace(\".\", \"\\\\.\");\n+    String usersGroupsRegEx \u003d prefixRegEx + \"[^.]*(\" +\n+        Pattern.quote(CONF_USERS) + \"|\" + Pattern.quote(CONF_GROUPS) + \")\";\n+    String hostsRegEx \u003d prefixRegEx + \"[^.]*\" + Pattern.quote(CONF_HOSTS);\n+\n+  // get list of users and groups per proxyuser\n+    Map\u003cString,String\u003e allMatchKeys \u003d \n+        conf.getValByRegex(usersGroupsRegEx);\n+    for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {  \n+      String aclKey \u003d getAclKey(entry.getKey());\n+      if (!proxyUserAcl.containsKey(aclKey)) {\n+        proxyUserAcl.put(aclKey, new AccessControlList(\n+            allMatchKeys.get(aclKey + CONF_USERS) ,\n+            allMatchKeys.get(aclKey + CONF_GROUPS)));\n+      }\n+    }\n+\n+    // get hosts per proxyuser\n+    allMatchKeys \u003d conf.getValByRegex(hostsRegEx);\n+    for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {\n+      proxyHosts.put(entry.getKey(),\n+          new MachineList(entry.getValue()));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(String configurationPrefix) {\n    configPrefix \u003d configurationPrefix +\n        (configurationPrefix.endsWith(\".\") ? \"\" : \".\");\n    \n    // constructing regex to match the following patterns:\n    //   $configPrefix.[ANY].users\n    //   $configPrefix.[ANY].groups\n    //   $configPrefix.[ANY].hosts\n    //\n    String prefixRegEx \u003d configPrefix.replace(\".\", \"\\\\.\");\n    String usersGroupsRegEx \u003d prefixRegEx + \"[^.]*(\" +\n        Pattern.quote(CONF_USERS) + \"|\" + Pattern.quote(CONF_GROUPS) + \")\";\n    String hostsRegEx \u003d prefixRegEx + \"[^.]*\" + Pattern.quote(CONF_HOSTS);\n\n  // get list of users and groups per proxyuser\n    Map\u003cString,String\u003e allMatchKeys \u003d \n        conf.getValByRegex(usersGroupsRegEx);\n    for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {  \n      String aclKey \u003d getAclKey(entry.getKey());\n      if (!proxyUserAcl.containsKey(aclKey)) {\n        proxyUserAcl.put(aclKey, new AccessControlList(\n            allMatchKeys.get(aclKey + CONF_USERS) ,\n            allMatchKeys.get(aclKey + CONF_GROUPS)));\n      }\n    }\n\n    // get hosts per proxyuser\n    allMatchKeys \u003d conf.getValByRegex(hostsRegEx);\n    for(Entry\u003cString, String\u003e entry : allMatchKeys.entrySet()) {\n      proxyHosts.put(entry.getKey(),\n          new MachineList(entry.getValue()));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/authorize/DefaultImpersonationProvider.java"
    }
  }
}