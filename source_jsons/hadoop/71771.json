{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MiniKdc.java",
  "functionName": "createPrincipal",
  "functionId": "createPrincipal___keytabFile-File__principals-String",
  "sourceFilePath": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
  "functionStartLine": 400,
  "functionEndLine": 410,
  "numCommitsSeen": 16,
  "timeTaken": 1214,
  "changeHistory": [
    "916140604ffef59466ba30832478311d3e6249bd",
    "23abbd8f649150d1c73834aea36de8ed53b3023c",
    "1d1ab587e4e92ce3aea4cb144811f69145cb3b33"
  ],
  "changeHistoryShort": {
    "916140604ffef59466ba30832478311d3e6249bd": "Ymultichange(Ymodifierchange,Ybodychange)",
    "23abbd8f649150d1c73834aea36de8ed53b3023c": "Ybodychange",
    "1d1ab587e4e92ce3aea4cb144811f69145cb3b33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "916140604ffef59466ba30832478311d3e6249bd": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-12911. Upgrade Hadoop MiniKDC with Kerby. Contributed by Jiajia Li\n",
      "commitDate": "27/05/16 11:23 PM",
      "commitName": "916140604ffef59466ba30832478311d3e6249bd",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-12911. Upgrade Hadoop MiniKDC with Kerby. Contributed by Jiajia Li\n",
          "commitDate": "27/05/16 11:23 PM",
          "commitName": "916140604ffef59466ba30832478311d3e6249bd",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "18/12/15 4:08 PM",
          "commitNameOld": "8fb70a031b323634ddc51ff6aff4f376baef68c8",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 161.26,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,11 @@\n-  public void createPrincipal(File keytabFile, String ... principals)\n+  public synchronized void createPrincipal(File keytabFile,\n+                                           String ... principals)\n           throws Exception {\n-    String generatedPassword \u003d UUID.randomUUID().toString();\n-    Keytab keytab \u003d new Keytab();\n-    List\u003cKeytabEntry\u003e entries \u003d new ArrayList\u003cKeytabEntry\u003e();\n-    for (String principal : principals) {\n-      createPrincipal(principal, generatedPassword);\n-      principal \u003d principal + \"@\" + getRealm();\n-      KerberosTime timestamp \u003d new KerberosTime();\n-      for (Map.Entry\u003cEncryptionType, EncryptionKey\u003e entry : KerberosKeyFactory\n-              .getKerberosKeys(principal, generatedPassword).entrySet()) {\n-        EncryptionKey ekey \u003d entry.getValue();\n-        byte keyVersion \u003d (byte) ekey.getKeyVersion();\n-        entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,\n-                ekey));\n-      }\n+    simpleKdc.createPrincipals(principals);\n+    if (keytabFile.exists() \u0026\u0026 !keytabFile.delete()) {\n+      LOG.error(\"Failed to delete keytab file: \" + keytabFile);\n     }\n-    keytab.setEntries(entries);\n-    keytab.write(keytabFile);\n+    for (String principal : principals) {\n+      simpleKdc.getKadmin().exportKeytab(keytabFile, principal);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createPrincipal(File keytabFile,\n                                           String ... principals)\n          throws Exception {\n    simpleKdc.createPrincipals(principals);\n    if (keytabFile.exists() \u0026\u0026 !keytabFile.delete()) {\n      LOG.error(\"Failed to delete keytab file: \" + keytabFile);\n    }\n    for (String principal : principals) {\n      simpleKdc.getKadmin().exportKeytab(keytabFile, principal);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12911. Upgrade Hadoop MiniKDC with Kerby. Contributed by Jiajia Li\n",
          "commitDate": "27/05/16 11:23 PM",
          "commitName": "916140604ffef59466ba30832478311d3e6249bd",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "18/12/15 4:08 PM",
          "commitNameOld": "8fb70a031b323634ddc51ff6aff4f376baef68c8",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 161.26,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,11 @@\n-  public void createPrincipal(File keytabFile, String ... principals)\n+  public synchronized void createPrincipal(File keytabFile,\n+                                           String ... principals)\n           throws Exception {\n-    String generatedPassword \u003d UUID.randomUUID().toString();\n-    Keytab keytab \u003d new Keytab();\n-    List\u003cKeytabEntry\u003e entries \u003d new ArrayList\u003cKeytabEntry\u003e();\n-    for (String principal : principals) {\n-      createPrincipal(principal, generatedPassword);\n-      principal \u003d principal + \"@\" + getRealm();\n-      KerberosTime timestamp \u003d new KerberosTime();\n-      for (Map.Entry\u003cEncryptionType, EncryptionKey\u003e entry : KerberosKeyFactory\n-              .getKerberosKeys(principal, generatedPassword).entrySet()) {\n-        EncryptionKey ekey \u003d entry.getValue();\n-        byte keyVersion \u003d (byte) ekey.getKeyVersion();\n-        entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,\n-                ekey));\n-      }\n+    simpleKdc.createPrincipals(principals);\n+    if (keytabFile.exists() \u0026\u0026 !keytabFile.delete()) {\n+      LOG.error(\"Failed to delete keytab file: \" + keytabFile);\n     }\n-    keytab.setEntries(entries);\n-    keytab.write(keytabFile);\n+    for (String principal : principals) {\n+      simpleKdc.getKadmin().exportKeytab(keytabFile, principal);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void createPrincipal(File keytabFile,\n                                           String ... principals)\n          throws Exception {\n    simpleKdc.createPrincipals(principals);\n    if (keytabFile.exists() \u0026\u0026 !keytabFile.delete()) {\n      LOG.error(\"Failed to delete keytab file: \" + keytabFile);\n    }\n    for (String principal : principals) {\n      simpleKdc.getKadmin().exportKeytab(keytabFile, principal);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
          "extendedDetails": {}
        }
      ]
    },
    "23abbd8f649150d1c73834aea36de8ed53b3023c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9860. Remove class HackedKeytab and HackedKeytabEncoder from hadoop-minikdc once jira DIRSERVER-1882 solved. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1515652 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/13 3:52 PM",
      "commitName": "23abbd8f649150d1c73834aea36de8ed53b3023c",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "12/08/13 5:23 PM",
      "commitNameOld": "1d1ab587e4e92ce3aea4cb144811f69145cb3b33",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.94,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void createPrincipal(File keytabFile, String ... principals)\n           throws Exception {\n     String generatedPassword \u003d UUID.randomUUID().toString();\n-    HackedKeytab keytab \u003d new HackedKeytab();\n+    Keytab keytab \u003d new Keytab();\n     List\u003cKeytabEntry\u003e entries \u003d new ArrayList\u003cKeytabEntry\u003e();\n     for (String principal : principals) {\n       createPrincipal(principal, generatedPassword);\n       principal \u003d principal + \"@\" + getRealm();\n       KerberosTime timestamp \u003d new KerberosTime();\n       for (Map.Entry\u003cEncryptionType, EncryptionKey\u003e entry : KerberosKeyFactory\n               .getKerberosKeys(principal, generatedPassword).entrySet()) {\n         EncryptionKey ekey \u003d entry.getValue();\n         byte keyVersion \u003d (byte) ekey.getKeyVersion();\n         entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,\n                 ekey));\n       }\n     }\n     keytab.setEntries(entries);\n-    keytab.write(keytabFile, principals.length);\n+    keytab.write(keytabFile);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createPrincipal(File keytabFile, String ... principals)\n          throws Exception {\n    String generatedPassword \u003d UUID.randomUUID().toString();\n    Keytab keytab \u003d new Keytab();\n    List\u003cKeytabEntry\u003e entries \u003d new ArrayList\u003cKeytabEntry\u003e();\n    for (String principal : principals) {\n      createPrincipal(principal, generatedPassword);\n      principal \u003d principal + \"@\" + getRealm();\n      KerberosTime timestamp \u003d new KerberosTime();\n      for (Map.Entry\u003cEncryptionType, EncryptionKey\u003e entry : KerberosKeyFactory\n              .getKerberosKeys(principal, generatedPassword).entrySet()) {\n        EncryptionKey ekey \u003d entry.getValue();\n        byte keyVersion \u003d (byte) ekey.getKeyVersion();\n        entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,\n                ekey));\n      }\n    }\n    keytab.setEntries(entries);\n    keytab.write(keytabFile);\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
      "extendedDetails": {}
    },
    "1d1ab587e4e92ce3aea4cb144811f69145cb3b33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9848. Create a MiniKDC for use with security testing. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1513308 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/13 5:23 PM",
      "commitName": "1d1ab587e4e92ce3aea4cb144811f69145cb3b33",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,20 @@\n+  public void createPrincipal(File keytabFile, String ... principals)\n+          throws Exception {\n+    String generatedPassword \u003d UUID.randomUUID().toString();\n+    HackedKeytab keytab \u003d new HackedKeytab();\n+    List\u003cKeytabEntry\u003e entries \u003d new ArrayList\u003cKeytabEntry\u003e();\n+    for (String principal : principals) {\n+      createPrincipal(principal, generatedPassword);\n+      principal \u003d principal + \"@\" + getRealm();\n+      KerberosTime timestamp \u003d new KerberosTime();\n+      for (Map.Entry\u003cEncryptionType, EncryptionKey\u003e entry : KerberosKeyFactory\n+              .getKerberosKeys(principal, generatedPassword).entrySet()) {\n+        EncryptionKey ekey \u003d entry.getValue();\n+        byte keyVersion \u003d (byte) ekey.getKeyVersion();\n+        entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,\n+                ekey));\n+      }\n+    }\n+    keytab.setEntries(entries);\n+    keytab.write(keytabFile, principals.length);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void createPrincipal(File keytabFile, String ... principals)\n          throws Exception {\n    String generatedPassword \u003d UUID.randomUUID().toString();\n    HackedKeytab keytab \u003d new HackedKeytab();\n    List\u003cKeytabEntry\u003e entries \u003d new ArrayList\u003cKeytabEntry\u003e();\n    for (String principal : principals) {\n      createPrincipal(principal, generatedPassword);\n      principal \u003d principal + \"@\" + getRealm();\n      KerberosTime timestamp \u003d new KerberosTime();\n      for (Map.Entry\u003cEncryptionType, EncryptionKey\u003e entry : KerberosKeyFactory\n              .getKerberosKeys(principal, generatedPassword).entrySet()) {\n        EncryptionKey ekey \u003d entry.getValue();\n        byte keyVersion \u003d (byte) ekey.getKeyVersion();\n        entries.add(new KeytabEntry(principal, 1L, timestamp, keyVersion,\n                ekey));\n      }\n    }\n    keytab.setEntries(entries);\n    keytab.write(keytabFile, principals.length);\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java"
    }
  }
}