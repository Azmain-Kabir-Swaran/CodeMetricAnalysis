{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NumaResourceAllocator.java",
  "functionName": "parseMemory",
  "functionId": "parseMemory___outputLines-String[]__nodeId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/numa/NumaResourceAllocator.java",
  "functionStartLine": 175,
  "functionEndLine": 200,
  "numCommitsSeen": 3,
  "timeTaken": 892,
  "changeHistory": [
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd"
  ],
  "changeHistoryShort": {
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5764. NUMA awareness support for launching containers. Contributed by Devaraj K.\n",
      "commitDate": "13/03/18 12:36 PM",
      "commitName": "a82d4a2e3a6a5448e371cef0cb86d5dbe4871ccd",
      "commitAuthor": "Miklos Szegedi",
      "diff": "@@ -0,0 +1,26 @@\n+  private long parseMemory(String[] outputLines, String nodeId)\n+      throws YarnException {\n+    long memory \u003d 0;\n+    String units;\n+    Pattern patternNodeMem \u003d Pattern\n+        .compile(NUMA_NODE_MEMORY_REGEX.replace(NUMA_NODE, nodeId));\n+    for (String line : outputLines) {\n+      Matcher matcherNodeMem \u003d patternNodeMem.matcher(line);\n+      if (matcherNodeMem.find()) {\n+        try {\n+          memory \u003d Long.parseLong(matcherNodeMem.group(1));\n+          units \u003d matcherNodeMem.group(2);\n+          if (GB.equals(units)) {\n+            memory \u003d memory * 1024;\n+          } else if (KB.equals(units)) {\n+            memory \u003d memory / 1024;\n+          }\n+        } catch (Exception ex) {\n+          throw new YarnException(\"Failed to get memory for node:\" + nodeId,\n+              ex);\n+        }\n+        break;\n+      }\n+    }\n+    return memory;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long parseMemory(String[] outputLines, String nodeId)\n      throws YarnException {\n    long memory \u003d 0;\n    String units;\n    Pattern patternNodeMem \u003d Pattern\n        .compile(NUMA_NODE_MEMORY_REGEX.replace(NUMA_NODE, nodeId));\n    for (String line : outputLines) {\n      Matcher matcherNodeMem \u003d patternNodeMem.matcher(line);\n      if (matcherNodeMem.find()) {\n        try {\n          memory \u003d Long.parseLong(matcherNodeMem.group(1));\n          units \u003d matcherNodeMem.group(2);\n          if (GB.equals(units)) {\n            memory \u003d memory * 1024;\n          } else if (KB.equals(units)) {\n            memory \u003d memory / 1024;\n          }\n        } catch (Exception ex) {\n          throw new YarnException(\"Failed to get memory for node:\" + nodeId,\n              ex);\n        }\n        break;\n      }\n    }\n    return memory;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/numa/NumaResourceAllocator.java"
    }
  }
}