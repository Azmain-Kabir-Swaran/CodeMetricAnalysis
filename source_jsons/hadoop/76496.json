{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeIO.java",
  "functionName": "getCreateForWriteFileOutputStream",
  "functionId": "getCreateForWriteFileOutputStream___f-File__permissions-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java",
  "functionStartLine": 971,
  "functionEndLine": 1007,
  "numCommitsSeen": 39,
  "timeTaken": 2126,
  "changeHistory": [
    "638801cce16fc1dc3259c541dc30a599faaddda1"
  ],
  "changeHistoryShort": {
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,37 @@\n+  public static FileOutputStream getCreateForWriteFileOutputStream(File f, int permissions)\n+      throws IOException {\n+    if (!Shell.WINDOWS) {\n+      // Use the native wrapper around open(2)\n+      try {\n+        FileDescriptor fd \u003d NativeIO.POSIX.open(f.getAbsolutePath(),\n+            NativeIO.POSIX.O_WRONLY | NativeIO.POSIX.O_CREAT\n+                | NativeIO.POSIX.O_EXCL, permissions);\n+        return new FileOutputStream(fd);\n+      } catch (NativeIOException nioe) {\n+        if (nioe.getErrno() \u003d\u003d Errno.EEXIST) {\n+          throw new AlreadyExistsException(nioe);\n+        }\n+        throw nioe;\n+      }\n+    } else {\n+      // Use the Windows native APIs to create equivalent FileOutputStream\n+      try {\n+        FileDescriptor fd \u003d NativeIO.Windows.createFile(f.getCanonicalPath(),\n+            NativeIO.Windows.GENERIC_WRITE,\n+            NativeIO.Windows.FILE_SHARE_DELETE\n+                | NativeIO.Windows.FILE_SHARE_READ\n+                | NativeIO.Windows.FILE_SHARE_WRITE,\n+            NativeIO.Windows.CREATE_NEW);\n+        NativeIO.POSIX.chmod(f.getCanonicalPath(), permissions);\n+        return new FileOutputStream(fd);\n+      } catch (NativeIOException nioe) {\n+        if (nioe.getErrorCode() \u003d\u003d 80) {\n+          // ERROR_FILE_EXISTS\n+          // 80 (0x50)\n+          // The file exists\n+          throw new AlreadyExistsException(nioe);\n+        }\n+        throw nioe;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static FileOutputStream getCreateForWriteFileOutputStream(File f, int permissions)\n      throws IOException {\n    if (!Shell.WINDOWS) {\n      // Use the native wrapper around open(2)\n      try {\n        FileDescriptor fd \u003d NativeIO.POSIX.open(f.getAbsolutePath(),\n            NativeIO.POSIX.O_WRONLY | NativeIO.POSIX.O_CREAT\n                | NativeIO.POSIX.O_EXCL, permissions);\n        return new FileOutputStream(fd);\n      } catch (NativeIOException nioe) {\n        if (nioe.getErrno() \u003d\u003d Errno.EEXIST) {\n          throw new AlreadyExistsException(nioe);\n        }\n        throw nioe;\n      }\n    } else {\n      // Use the Windows native APIs to create equivalent FileOutputStream\n      try {\n        FileDescriptor fd \u003d NativeIO.Windows.createFile(f.getCanonicalPath(),\n            NativeIO.Windows.GENERIC_WRITE,\n            NativeIO.Windows.FILE_SHARE_DELETE\n                | NativeIO.Windows.FILE_SHARE_READ\n                | NativeIO.Windows.FILE_SHARE_WRITE,\n            NativeIO.Windows.CREATE_NEW);\n        NativeIO.POSIX.chmod(f.getCanonicalPath(), permissions);\n        return new FileOutputStream(fd);\n      } catch (NativeIOException nioe) {\n        if (nioe.getErrorCode() \u003d\u003d 80) {\n          // ERROR_FILE_EXISTS\n          // 80 (0x50)\n          // The file exists\n          throw new AlreadyExistsException(nioe);\n        }\n        throw nioe;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/nativeio/NativeIO.java"
    }
  }
}