{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcfsBasedProcessTree.java",
  "functionName": "setMemInfo",
  "functionId": "setMemInfo___key-String__value-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
  "functionStartLine": 925,
  "functionEndLine": 969,
  "numCommitsSeen": 30,
  "timeTaken": 2494,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1",
    "06579878dfca0b634aaecfe63bb90c46113b3037"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1": "Ybodychange",
    "06579878dfca0b634aaecfe63bb90c46113b3037": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n     public void setMemInfo(String key, String value) {\n       MemInfo info \u003d MemInfo.getMemInfoByName(key);\n       int val \u003d 0;\n       try {\n         val \u003d Integer.parseInt(value.trim());\n       } catch (NumberFormatException ne) {\n         LOG.error(\"Error in parsing : \" + info + \" : value\" + value.trim());\n         return;\n       }\n       if (info \u003d\u003d null) {\n         return;\n       }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"setMemInfo : memInfo : \" + info);\n-      }\n+      LOG.debug(\"setMemInfo : memInfo : {}\", info);\n       switch (info) {\n       case SIZE:\n         size \u003d val;\n         break;\n       case RSS:\n         rss \u003d val;\n         break;\n       case PSS:\n         pss \u003d val;\n         break;\n       case SHARED_CLEAN:\n         sharedClean \u003d val;\n         break;\n       case SHARED_DIRTY:\n         sharedDirty \u003d val;\n         break;\n       case PRIVATE_CLEAN:\n         privateClean \u003d val;\n         break;\n       case PRIVATE_DIRTY:\n         privateDirty \u003d val;\n         break;\n       case REFERENCED:\n         referenced \u003d val;\n         break;\n       case ANONYMOUS:\n         anonymous \u003d val;\n         break;\n       default:\n         break;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setMemInfo(String key, String value) {\n      MemInfo info \u003d MemInfo.getMemInfoByName(key);\n      int val \u003d 0;\n      try {\n        val \u003d Integer.parseInt(value.trim());\n      } catch (NumberFormatException ne) {\n        LOG.error(\"Error in parsing : \" + info + \" : value\" + value.trim());\n        return;\n      }\n      if (info \u003d\u003d null) {\n        return;\n      }\n      LOG.debug(\"setMemInfo : memInfo : {}\", info);\n      switch (info) {\n      case SIZE:\n        size \u003d val;\n        break;\n      case RSS:\n        rss \u003d val;\n        break;\n      case PSS:\n        pss \u003d val;\n        break;\n      case SHARED_CLEAN:\n        sharedClean \u003d val;\n        break;\n      case SHARED_DIRTY:\n        sharedDirty \u003d val;\n        break;\n      case PRIVATE_CLEAN:\n        privateClean \u003d val;\n        break;\n      case PRIVATE_DIRTY:\n        privateDirty \u003d val;\n        break;\n      case REFERENCED:\n        referenced \u003d val;\n        break;\n      case ANONYMOUS:\n        anonymous \u003d val;\n        break;\n      default:\n        break;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5551. Ignore file backed pages from memory computation when smaps is enabled. Contributed by Rajesh Balamohan\n",
      "commitDate": "11/10/16 8:12 AM",
      "commitName": "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "08/06/16 5:11 PM",
      "commitNameOld": "1500a0a3009e453c9f05a93df7a78b4e185eef30",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 124.63,
      "commitsBetweenForRepo": 938,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n     public void setMemInfo(String key, String value) {\n       MemInfo info \u003d MemInfo.getMemInfoByName(key);\n       int val \u003d 0;\n       try {\n         val \u003d Integer.parseInt(value.trim());\n       } catch (NumberFormatException ne) {\n         LOG.error(\"Error in parsing : \" + info + \" : value\" + value.trim());\n         return;\n       }\n       if (info \u003d\u003d null) {\n         return;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"setMemInfo : memInfo : \" + info);\n       }\n       switch (info) {\n       case SIZE:\n         size \u003d val;\n         break;\n       case RSS:\n         rss \u003d val;\n         break;\n       case PSS:\n         pss \u003d val;\n         break;\n       case SHARED_CLEAN:\n         sharedClean \u003d val;\n         break;\n       case SHARED_DIRTY:\n         sharedDirty \u003d val;\n         break;\n       case PRIVATE_CLEAN:\n         privateClean \u003d val;\n         break;\n       case PRIVATE_DIRTY:\n         privateDirty \u003d val;\n         break;\n       case REFERENCED:\n         referenced \u003d val;\n         break;\n+      case ANONYMOUS:\n+        anonymous \u003d val;\n+        break;\n       default:\n         break;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void setMemInfo(String key, String value) {\n      MemInfo info \u003d MemInfo.getMemInfoByName(key);\n      int val \u003d 0;\n      try {\n        val \u003d Integer.parseInt(value.trim());\n      } catch (NumberFormatException ne) {\n        LOG.error(\"Error in parsing : \" + info + \" : value\" + value.trim());\n        return;\n      }\n      if (info \u003d\u003d null) {\n        return;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setMemInfo : memInfo : \" + info);\n      }\n      switch (info) {\n      case SIZE:\n        size \u003d val;\n        break;\n      case RSS:\n        rss \u003d val;\n        break;\n      case PSS:\n        pss \u003d val;\n        break;\n      case SHARED_CLEAN:\n        sharedClean \u003d val;\n        break;\n      case SHARED_DIRTY:\n        sharedDirty \u003d val;\n        break;\n      case PRIVATE_CLEAN:\n        privateClean \u003d val;\n        break;\n      case PRIVATE_DIRTY:\n        privateDirty \u003d val;\n        break;\n      case REFERENCED:\n        referenced \u003d val;\n        break;\n      case ANONYMOUS:\n        anonymous \u003d val;\n        break;\n      default:\n        break;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "06579878dfca0b634aaecfe63bb90c46113b3037": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1775. Enhanced ProcfsBasedProcessTree to optionally add the ability to use smaps for obtaining used memory information. Contributed by Rajesh Balamohan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 5:01 PM",
      "commitName": "06579878dfca0b634aaecfe63bb90c46113b3037",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,44 @@\n+    public void setMemInfo(String key, String value) {\n+      MemInfo info \u003d MemInfo.getMemInfoByName(key);\n+      int val \u003d 0;\n+      try {\n+        val \u003d Integer.parseInt(value.trim());\n+      } catch (NumberFormatException ne) {\n+        LOG.error(\"Error in parsing : \" + info + \" : value\" + value.trim());\n+        return;\n+      }\n+      if (info \u003d\u003d null) {\n+        return;\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"setMemInfo : memInfo : \" + info);\n+      }\n+      switch (info) {\n+      case SIZE:\n+        size \u003d val;\n+        break;\n+      case RSS:\n+        rss \u003d val;\n+        break;\n+      case PSS:\n+        pss \u003d val;\n+        break;\n+      case SHARED_CLEAN:\n+        sharedClean \u003d val;\n+        break;\n+      case SHARED_DIRTY:\n+        sharedDirty \u003d val;\n+        break;\n+      case PRIVATE_CLEAN:\n+        privateClean \u003d val;\n+        break;\n+      case PRIVATE_DIRTY:\n+        privateDirty \u003d val;\n+        break;\n+      case REFERENCED:\n+        referenced \u003d val;\n+        break;\n+      default:\n+        break;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void setMemInfo(String key, String value) {\n      MemInfo info \u003d MemInfo.getMemInfoByName(key);\n      int val \u003d 0;\n      try {\n        val \u003d Integer.parseInt(value.trim());\n      } catch (NumberFormatException ne) {\n        LOG.error(\"Error in parsing : \" + info + \" : value\" + value.trim());\n        return;\n      }\n      if (info \u003d\u003d null) {\n        return;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setMemInfo : memInfo : \" + info);\n      }\n      switch (info) {\n      case SIZE:\n        size \u003d val;\n        break;\n      case RSS:\n        rss \u003d val;\n        break;\n      case PSS:\n        pss \u003d val;\n        break;\n      case SHARED_CLEAN:\n        sharedClean \u003d val;\n        break;\n      case SHARED_DIRTY:\n        sharedDirty \u003d val;\n        break;\n      case PRIVATE_CLEAN:\n        privateClean \u003d val;\n        break;\n      case PRIVATE_DIRTY:\n        privateDirty \u003d val;\n        break;\n      case REFERENCED:\n        referenced \u003d val;\n        break;\n      default:\n        break;\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
    }
  }
}