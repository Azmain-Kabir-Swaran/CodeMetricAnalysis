{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "fetchApplicationLogs",
  "functionId": "fetchApplicationLogs___options-ContainerLogsRequest__logCliHelper-LogCLIHelpers__useRegex-boolean__ignoreSizeLimit-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 1154,
  "functionEndLine": 1199,
  "numCommitsSeen": 131,
  "timeTaken": 4951,
  "changeHistory": [
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
    "4e1f56e111a88c2bc600aaa601010295075676c9",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "ef1757790d89cc72f88f5330761b1c8901c59e94"
  ],
  "changeHistoryShort": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yparameterchange,Ybodychange)",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ymultichange(Yparameterchange,Ybodychange)",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": "Ybodychange",
    "4e1f56e111a88c2bc600aaa601010295075676c9": "Ymultichange(Yexceptionschange,Ybodychange)",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "ef1757790d89cc72f88f5330761b1c8901c59e94": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,46 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n-      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,\n-      YarnException {\n+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n+      throws IOException, YarnException {\n     // If the application has finished, we would fetch the logs\n     // from HDFS.\n     // If the application is still running, we would get the full\n     // list of the containers first, then fetch the logs for each\n     // container from NM.\n     int resultCode \u003d -1;\n     if (options.isAppFinished()) {\n       ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n-          options, logCliHelper, useRegex);\n+          options, logCliHelper, useRegex, ignoreSizeLimit);\n       if (newOptions \u003d\u003d null) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + options.getLogTypes() + \" for the application: \"\n             + options.getAppId());\n       } else {\n         resultCode \u003d\n             logCliHelper.dumpAllContainersLogs(newOptions);\n       }\n     } else {\n       List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n           getContainersLogRequestForRunningApplication(options);\n-      for (ContainerLogsRequest container : containerLogRequests) {\n+\n+      // get all matched container log types and check the total log size.\n+      Map\u003cString, ContainerLogsRequest\u003e matchedLogTypes \u003d\n+          getMatchedLogTypesForRunningApp(containerLogRequests,\n+              useRegex, ignoreSizeLimit);\n+\n+      for (Entry\u003cString, ContainerLogsRequest\u003e container\n+          : matchedLogTypes.entrySet()) {\n         int result \u003d printContainerLogsFromRunningApplication(getConf(),\n-            container, logCliHelper, useRegex);\n+            container.getValue(), logCliHelper,\n+            useRegex, ignoreSizeLimit);\n         if (result \u003d\u003d 0) {\n           resultCode \u003d 0;\n         }\n       }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n      throws IOException, YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d -1;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper, useRegex, ignoreSizeLimit);\n      if (newOptions \u003d\u003d null) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + options.getLogTypes() + \" for the application: \"\n            + options.getAppId());\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n\n      // get all matched container log types and check the total log size.\n      Map\u003cString, ContainerLogsRequest\u003e matchedLogTypes \u003d\n          getMatchedLogTypesForRunningApp(containerLogRequests,\n              useRegex, ignoreSizeLimit);\n\n      for (Entry\u003cString, ContainerLogsRequest\u003e container\n          : matchedLogTypes.entrySet()) {\n        int result \u003d printContainerLogsFromRunningApplication(getConf(),\n            container.getValue(), logCliHelper,\n            useRegex, ignoreSizeLimit);\n        if (result \u003d\u003d 0) {\n          resultCode \u003d 0;\n        }\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[options-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean]",
            "newValue": "[options-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean, ignoreSizeLimit-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,46 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n-      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,\n-      YarnException {\n+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n+      throws IOException, YarnException {\n     // If the application has finished, we would fetch the logs\n     // from HDFS.\n     // If the application is still running, we would get the full\n     // list of the containers first, then fetch the logs for each\n     // container from NM.\n     int resultCode \u003d -1;\n     if (options.isAppFinished()) {\n       ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n-          options, logCliHelper, useRegex);\n+          options, logCliHelper, useRegex, ignoreSizeLimit);\n       if (newOptions \u003d\u003d null) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + options.getLogTypes() + \" for the application: \"\n             + options.getAppId());\n       } else {\n         resultCode \u003d\n             logCliHelper.dumpAllContainersLogs(newOptions);\n       }\n     } else {\n       List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n           getContainersLogRequestForRunningApplication(options);\n-      for (ContainerLogsRequest container : containerLogRequests) {\n+\n+      // get all matched container log types and check the total log size.\n+      Map\u003cString, ContainerLogsRequest\u003e matchedLogTypes \u003d\n+          getMatchedLogTypesForRunningApp(containerLogRequests,\n+              useRegex, ignoreSizeLimit);\n+\n+      for (Entry\u003cString, ContainerLogsRequest\u003e container\n+          : matchedLogTypes.entrySet()) {\n         int result \u003d printContainerLogsFromRunningApplication(getConf(),\n-            container, logCliHelper, useRegex);\n+            container.getValue(), logCliHelper,\n+            useRegex, ignoreSizeLimit);\n         if (result \u003d\u003d 0) {\n           resultCode \u003d 0;\n         }\n       }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n      throws IOException, YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d -1;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper, useRegex, ignoreSizeLimit);\n      if (newOptions \u003d\u003d null) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + options.getLogTypes() + \" for the application: \"\n            + options.getAppId());\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n\n      // get all matched container log types and check the total log size.\n      Map\u003cString, ContainerLogsRequest\u003e matchedLogTypes \u003d\n          getMatchedLogTypesForRunningApp(containerLogRequests,\n              useRegex, ignoreSizeLimit);\n\n      for (Entry\u003cString, ContainerLogsRequest\u003e container\n          : matchedLogTypes.entrySet()) {\n        int result \u003d printContainerLogsFromRunningApplication(getConf(),\n            container.getValue(), logCliHelper,\n            useRegex, ignoreSizeLimit);\n        if (result \u003d\u003d 0) {\n          resultCode \u003d 0;\n        }\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n-      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n+      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,\n+      YarnException {\n     // If the application has finished, we would fetch the logs\n     // from HDFS.\n     // If the application is still running, we would get the full\n     // list of the containers first, then fetch the logs for each\n     // container from NM.\n     int resultCode \u003d -1;\n     if (options.isAppFinished()) {\n       ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n-          options, logCliHelper);\n+          options, logCliHelper, useRegex);\n       if (newOptions \u003d\u003d null) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + options.getLogTypes() + \" for the application: \"\n             + options.getAppId());\n       } else {\n         resultCode \u003d\n             logCliHelper.dumpAllContainersLogs(newOptions);\n       }\n     } else {\n       List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n           getContainersLogRequestForRunningApplication(options);\n       for (ContainerLogsRequest container : containerLogRequests) {\n         int result \u003d printContainerLogsFromRunningApplication(getConf(),\n-            container, logCliHelper);\n+            container, logCliHelper, useRegex);\n         if (result \u003d\u003d 0) {\n           resultCode \u003d 0;\n         }\n       }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,\n      YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d -1;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper, useRegex);\n      if (newOptions \u003d\u003d null) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + options.getLogTypes() + \" for the application: \"\n            + options.getAppId());\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n      for (ContainerLogsRequest container : containerLogRequests) {\n        int result \u003d printContainerLogsFromRunningApplication(getConf(),\n            container, logCliHelper, useRegex);\n        if (result \u003d\u003d 0) {\n          resultCode \u003d 0;\n        }\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[options-ContainerLogsRequest, logCliHelper-LogCLIHelpers]",
            "newValue": "[options-ContainerLogsRequest, logCliHelper-LogCLIHelpers, useRegex-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n-      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n+      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,\n+      YarnException {\n     // If the application has finished, we would fetch the logs\n     // from HDFS.\n     // If the application is still running, we would get the full\n     // list of the containers first, then fetch the logs for each\n     // container from NM.\n     int resultCode \u003d -1;\n     if (options.isAppFinished()) {\n       ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n-          options, logCliHelper);\n+          options, logCliHelper, useRegex);\n       if (newOptions \u003d\u003d null) {\n         System.err.println(\"Can not find any log file matching the pattern: \"\n             + options.getLogTypes() + \" for the application: \"\n             + options.getAppId());\n       } else {\n         resultCode \u003d\n             logCliHelper.dumpAllContainersLogs(newOptions);\n       }\n     } else {\n       List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n           getContainersLogRequestForRunningApplication(options);\n       for (ContainerLogsRequest container : containerLogRequests) {\n         int result \u003d printContainerLogsFromRunningApplication(getConf(),\n-            container, logCliHelper);\n+            container, logCliHelper, useRegex);\n         if (result \u003d\u003d 0) {\n           resultCode \u003d 0;\n         }\n       }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper, boolean useRegex) throws IOException,\n      YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d -1;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper, useRegex);\n      if (newOptions \u003d\u003d null) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + options.getLogTypes() + \" for the application: \"\n            + options.getAppId());\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n      for (ContainerLogsRequest container : containerLogRequests) {\n        int result \u003d printContainerLogsFromRunningApplication(getConf(),\n            container, logCliHelper, useRegex);\n        if (result \u003d\u003d 0) {\n          resultCode \u003d 0;\n        }\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
      "commitDate": "22/06/16 9:48 PM",
      "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/06/16 4:05 PM",
      "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,37 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n       LogCLIHelpers logCliHelper) throws IOException, YarnException {\n     // If the application has finished, we would fetch the logs\n     // from HDFS.\n     // If the application is still running, we would get the full\n     // list of the containers first, then fetch the logs for each\n     // container from NM.\n-    int resultCode \u003d 0;\n+    int resultCode \u003d -1;\n     if (options.isAppFinished()) {\n       ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n           options, logCliHelper);\n       if (newOptions \u003d\u003d null) {\n-        resultCode \u003d -1;\n+        System.err.println(\"Can not find any log file matching the pattern: \"\n+            + options.getLogTypes() + \" for the application: \"\n+            + options.getAppId());\n       } else {\n         resultCode \u003d\n             logCliHelper.dumpAllContainersLogs(newOptions);\n       }\n     } else {\n       List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n           getContainersLogRequestForRunningApplication(options);\n       for (ContainerLogsRequest container : containerLogRequests) {\n-        printContainerLogsFromRunningApplication(getConf(), container,\n-            logCliHelper);\n+        int result \u003d printContainerLogsFromRunningApplication(getConf(),\n+            container, logCliHelper);\n+        if (result \u003d\u003d 0) {\n+          resultCode \u003d 0;\n+        }\n       }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d -1;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper);\n      if (newOptions \u003d\u003d null) {\n        System.err.println(\"Can not find any log file matching the pattern: \"\n            + options.getLogTypes() + \" for the application: \"\n            + options.getAppId());\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n      for (ContainerLogsRequest container : containerLogRequests) {\n        int result \u003d printContainerLogsFromRunningApplication(getConf(),\n            container, logCliHelper);\n        if (result \u003d\u003d 0) {\n          resultCode \u003d 0;\n        }\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "4e1f56e111a88c2bc600aaa601010295075676c9": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-5141. Get Container logs for the Running application from Yarn Logs CommandLine. Contributed by Xuan Gong.\n",
      "commitDate": "29/05/16 9:23 AM",
      "commitName": "4e1f56e111a88c2bc600aaa601010295075676c9",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-5141. Get Container logs for the Running application from Yarn Logs CommandLine. Contributed by Xuan Gong.\n",
          "commitDate": "29/05/16 9:23 AM",
          "commitName": "4e1f56e111a88c2bc600aaa601010295075676c9",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.4,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,32 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n-      LogCLIHelpers logCliHelper) throws IOException {\n-    // TODO: YARN-5141. To get container logs for the Running applications.\n+      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n+    // If the application has finished, we would fetch the logs\n+    // from HDFS.\n+    // If the application is still running, we would get the full\n+    // list of the containers first, then fetch the logs for each\n+    // container from NM.\n     int resultCode \u003d 0;\n-    ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n-        options, logCliHelper);\n-    if (newOptions \u003d\u003d null) {\n-      resultCode \u003d -1;\n+    if (options.isAppFinished()) {\n+      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n+          options, logCliHelper);\n+      if (newOptions \u003d\u003d null) {\n+        resultCode \u003d -1;\n+      } else {\n+        resultCode \u003d\n+            logCliHelper.dumpAllContainersLogs(newOptions);\n+      }\n     } else {\n-      resultCode \u003d\n-          logCliHelper.dumpAllContainersLogs(newOptions);\n+      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n+          getContainersLogRequestForRunningApplication(options);\n+      for (ContainerLogsRequest container : containerLogRequests) {\n+        printContainerLogsFromRunningApplication(getConf(), container,\n+            logCliHelper);\n+      }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d 0;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper);\n      if (newOptions \u003d\u003d null) {\n        resultCode \u003d -1;\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n      for (ContainerLogsRequest container : containerLogRequests) {\n        printContainerLogsFromRunningApplication(getConf(), container,\n            logCliHelper);\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5141. Get Container logs for the Running application from Yarn Logs CommandLine. Contributed by Xuan Gong.\n",
          "commitDate": "29/05/16 9:23 AM",
          "commitName": "4e1f56e111a88c2bc600aaa601010295075676c9",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "26/05/16 11:49 PM",
          "commitNameOld": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 2.4,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,32 @@\n   private int fetchApplicationLogs(ContainerLogsRequest options,\n-      LogCLIHelpers logCliHelper) throws IOException {\n-    // TODO: YARN-5141. To get container logs for the Running applications.\n+      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n+    // If the application has finished, we would fetch the logs\n+    // from HDFS.\n+    // If the application is still running, we would get the full\n+    // list of the containers first, then fetch the logs for each\n+    // container from NM.\n     int resultCode \u003d 0;\n-    ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n-        options, logCliHelper);\n-    if (newOptions \u003d\u003d null) {\n-      resultCode \u003d -1;\n+    if (options.isAppFinished()) {\n+      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n+          options, logCliHelper);\n+      if (newOptions \u003d\u003d null) {\n+        resultCode \u003d -1;\n+      } else {\n+        resultCode \u003d\n+            logCliHelper.dumpAllContainersLogs(newOptions);\n+      }\n     } else {\n-      resultCode \u003d\n-          logCliHelper.dumpAllContainersLogs(newOptions);\n+      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n+          getContainersLogRequestForRunningApplication(options);\n+      for (ContainerLogsRequest container : containerLogRequests) {\n+        printContainerLogsFromRunningApplication(getConf(), container,\n+            logCliHelper);\n+      }\n     }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n           + options.getAppId() + \" with the appOwner: \"\n           + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper) throws IOException, YarnException {\n    // If the application has finished, we would fetch the logs\n    // from HDFS.\n    // If the application is still running, we would get the full\n    // list of the containers first, then fetch the logs for each\n    // container from NM.\n    int resultCode \u003d 0;\n    if (options.isAppFinished()) {\n      ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n          options, logCliHelper);\n      if (newOptions \u003d\u003d null) {\n        resultCode \u003d -1;\n      } else {\n        resultCode \u003d\n            logCliHelper.dumpAllContainersLogs(newOptions);\n      }\n    } else {\n      List\u003cContainerLogsRequest\u003e containerLogRequests \u003d\n          getContainersLogRequestForRunningApplication(options);\n      for (ContainerLogsRequest container : containerLogRequests) {\n        printContainerLogsFromRunningApplication(getConf(), container,\n            logCliHelper);\n      }\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,19 @@\n-  private int fetchApplicationLogs(ApplicationId appId, String appOwner,\n-      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n-    int resultCode \u003d\n-        logCliHelper.dumpAllContainersLogs(appId, appOwner, localDir);\n+  private int fetchApplicationLogs(ContainerLogsRequest options,\n+      LogCLIHelpers logCliHelper) throws IOException {\n+    // TODO: YARN-5141. To get container logs for the Running applications.\n+    int resultCode \u003d 0;\n+    ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n+        options, logCliHelper);\n+    if (newOptions \u003d\u003d null) {\n+      resultCode \u003d -1;\n+    } else {\n+      resultCode \u003d\n+          logCliHelper.dumpAllContainersLogs(newOptions);\n+    }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n-          + appId + \" with the appOwner: \" + appOwner);\n+          + options.getAppId() + \" with the appOwner: \"\n+          + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper) throws IOException {\n    // TODO: YARN-5141. To get container logs for the Running applications.\n    int resultCode \u003d 0;\n    ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n        options, logCliHelper);\n    if (newOptions \u003d\u003d null) {\n      resultCode \u003d -1;\n    } else {\n      resultCode \u003d\n          logCliHelper.dumpAllContainersLogs(newOptions);\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, logCliHelper-LogCLIHelpers, localDir-String]",
            "newValue": "[options-ContainerLogsRequest, logCliHelper-LogCLIHelpers]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,19 @@\n-  private int fetchApplicationLogs(ApplicationId appId, String appOwner,\n-      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n-    int resultCode \u003d\n-        logCliHelper.dumpAllContainersLogs(appId, appOwner, localDir);\n+  private int fetchApplicationLogs(ContainerLogsRequest options,\n+      LogCLIHelpers logCliHelper) throws IOException {\n+    // TODO: YARN-5141. To get container logs for the Running applications.\n+    int resultCode \u003d 0;\n+    ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n+        options, logCliHelper);\n+    if (newOptions \u003d\u003d null) {\n+      resultCode \u003d -1;\n+    } else {\n+      resultCode \u003d\n+          logCliHelper.dumpAllContainersLogs(newOptions);\n+    }\n     if (resultCode \u003d\u003d -1) {\n       System.err.println(\"Can not find the logs for the application: \"\n-          + appId + \" with the appOwner: \" + appOwner);\n+          + options.getAppId() + \" with the appOwner: \"\n+          + options.getAppOwner());\n     }\n     return resultCode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int fetchApplicationLogs(ContainerLogsRequest options,\n      LogCLIHelpers logCliHelper) throws IOException {\n    // TODO: YARN-5141. To get container logs for the Running applications.\n    int resultCode \u003d 0;\n    ContainerLogsRequest newOptions \u003d getMatchedLogOptions(\n        options, logCliHelper);\n    if (newOptions \u003d\u003d null) {\n      resultCode \u003d -1;\n    } else {\n      resultCode \u003d\n          logCliHelper.dumpAllContainersLogs(newOptions);\n    }\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + options.getAppId() + \" with the appOwner: \"\n          + options.getAppOwner());\n    }\n    return resultCode;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "ef1757790d89cc72f88f5330761b1c8901c59e94": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
      "commitDate": "18/05/16 10:14 AM",
      "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,10 @@\n+  private int fetchApplicationLogs(ApplicationId appId, String appOwner,\n+      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n+    int resultCode \u003d\n+        logCliHelper.dumpAllContainersLogs(appId, appOwner, localDir);\n+    if (resultCode \u003d\u003d -1) {\n+      System.err.println(\"Can not find the logs for the application: \"\n+          + appId + \" with the appOwner: \" + appOwner);\n+    }\n+    return resultCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int fetchApplicationLogs(ApplicationId appId, String appOwner,\n      LogCLIHelpers logCliHelper, String localDir) throws IOException {\n    int resultCode \u003d\n        logCliHelper.dumpAllContainersLogs(appId, appOwner, localDir);\n    if (resultCode \u003d\u003d -1) {\n      System.err.println(\"Can not find the logs for the application: \"\n          + appId + \" with the appOwner: \" + appOwner);\n    }\n    return resultCode;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}