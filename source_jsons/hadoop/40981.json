{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSQueueConverter.java",
  "functionName": "emitOrderingPolicy",
  "functionId": "emitOrderingPolicy___queueName-String__queue-FSQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
  "functionStartLine": 255,
  "functionEndLine": 281,
  "numCommitsSeen": 9,
  "timeTaken": 3416,
  "changeHistory": [
    "9a297ff31d3e5d16ac648de584d430fc856afefe",
    "e6377972113db844d7e7b99867fad19d3cbc58bd",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "9a297ff31d3e5d16ac648de584d430fc856afefe": "Ybodychange",
    "e6377972113db844d7e7b99867fad19d3cbc58bd": "Ybodychange",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": "Ybodychange",
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a297ff31d3e5d16ac648de584d430fc856afefe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10197. FS-CS converter: fix emitted ordering policy string and max-am-resource percent value. Contributed by Peter Bacsko\n",
      "commitDate": "26/03/20 4:35 AM",
      "commitName": "9a297ff31d3e5d16ac648de584d430fc856afefe",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "12/03/20 4:18 AM",
      "commitNameOld": "38d87883b6d4fe6a974e99b937b03cab55bc3820",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void emitOrderingPolicy(String queueName, FSQueue queue) {\n     if (queue instanceof FSLeafQueue) {\n       String policy \u003d queue.getPolicy().getName();\n \n       switch (policy) {\n       case DominantResourceFairnessPolicy.NAME:\n         capacitySchedulerConfig.set(PREFIX + queueName\n-            + \".ordering-policy\", FairSharePolicy.NAME);\n+            + \".ordering-policy\", FAIR_POLICY);\n         break;\n       case FairSharePolicy.NAME:\n         capacitySchedulerConfig.set(PREFIX + queueName\n-            + \".ordering-policy\", FairSharePolicy.NAME);\n+            + \".ordering-policy\", FAIR_POLICY);\n         if (drfUsed) {\n           ruleHandler.handleFairAsDrf(queueName);\n         }\n         break;\n       case FifoPolicy.NAME:\n         capacitySchedulerConfig.set(PREFIX + queueName\n-            + \".ordering-policy\", FifoPolicy.NAME);\n+            + \".ordering-policy\", FIFO_POLICY);\n         break;\n       default:\n         String msg \u003d String.format(\"Unexpected ordering policy \" +\n             \"on queue %s: %s\", queue, policy);\n         conversionOptions.handleConversionError(msg);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitOrderingPolicy(String queueName, FSQueue queue) {\n    if (queue instanceof FSLeafQueue) {\n      String policy \u003d queue.getPolicy().getName();\n\n      switch (policy) {\n      case DominantResourceFairnessPolicy.NAME:\n        capacitySchedulerConfig.set(PREFIX + queueName\n            + \".ordering-policy\", FAIR_POLICY);\n        break;\n      case FairSharePolicy.NAME:\n        capacitySchedulerConfig.set(PREFIX + queueName\n            + \".ordering-policy\", FAIR_POLICY);\n        if (drfUsed) {\n          ruleHandler.handleFairAsDrf(queueName);\n        }\n        break;\n      case FifoPolicy.NAME:\n        capacitySchedulerConfig.set(PREFIX + queueName\n            + \".ordering-policy\", FIFO_POLICY);\n        break;\n      default:\n        String msg \u003d String.format(\"Unexpected ordering policy \" +\n            \"on queue %s: %s\", queue, policy);\n        conversionOptions.handleConversionError(msg);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "e6377972113db844d7e7b99867fad19d3cbc58bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10127. Remove setting App Ordering Policy to ParentQueue in FSQueueConverter\n\nContributed by Peter Bacsko.\n",
      "commitDate": "11/02/20 8:31 AM",
      "commitName": "e6377972113db844d7e7b99867fad19d3cbc58bd",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "28/01/20 6:22 AM",
      "commitNameOld": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 14.09,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   private void emitOrderingPolicy(String queueName, FSQueue queue) {\n-    String policy \u003d queue.getPolicy().getName();\n+    if (queue instanceof FSLeafQueue) {\n+      String policy \u003d queue.getPolicy().getName();\n \n-    switch (policy) {\n-    case DominantResourceFairnessPolicy.NAME:\n-      capacitySchedulerConfig.set(PREFIX + queueName\n-          + \".ordering-policy\", FairSharePolicy.NAME);\n-      break;\n-    case FairSharePolicy.NAME:\n-      capacitySchedulerConfig.set(PREFIX + queueName\n-          + \".ordering-policy\", FairSharePolicy.NAME);\n-      if (drfUsed) {\n-        ruleHandler.handleFairAsDrf(queueName);\n+      switch (policy) {\n+      case DominantResourceFairnessPolicy.NAME:\n+        capacitySchedulerConfig.set(PREFIX + queueName\n+            + \".ordering-policy\", FairSharePolicy.NAME);\n+        break;\n+      case FairSharePolicy.NAME:\n+        capacitySchedulerConfig.set(PREFIX + queueName\n+            + \".ordering-policy\", FairSharePolicy.NAME);\n+        if (drfUsed) {\n+          ruleHandler.handleFairAsDrf(queueName);\n+        }\n+        break;\n+      case FifoPolicy.NAME:\n+        capacitySchedulerConfig.set(PREFIX + queueName\n+            + \".ordering-policy\", FifoPolicy.NAME);\n+        break;\n+      default:\n+        String msg \u003d String.format(\"Unexpected ordering policy \" +\n+            \"on queue %s: %s\", queue, policy);\n+        conversionOptions.handleConversionError(msg);\n       }\n-      break;\n-    case FifoPolicy.NAME:\n-      capacitySchedulerConfig.set(PREFIX + queueName\n-          + \".ordering-policy\", FifoPolicy.NAME);\n-      break;\n-    default:\n-      String msg \u003d String.format(\"Unexpected ordering policy \" +\n-          \"on queue %s: %s\", queue, policy);\n-      conversionOptions.handleConversionError(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitOrderingPolicy(String queueName, FSQueue queue) {\n    if (queue instanceof FSLeafQueue) {\n      String policy \u003d queue.getPolicy().getName();\n\n      switch (policy) {\n      case DominantResourceFairnessPolicy.NAME:\n        capacitySchedulerConfig.set(PREFIX + queueName\n            + \".ordering-policy\", FairSharePolicy.NAME);\n        break;\n      case FairSharePolicy.NAME:\n        capacitySchedulerConfig.set(PREFIX + queueName\n            + \".ordering-policy\", FairSharePolicy.NAME);\n        if (drfUsed) {\n          ruleHandler.handleFairAsDrf(queueName);\n        }\n        break;\n      case FifoPolicy.NAME:\n        capacitySchedulerConfig.set(PREFIX + queueName\n            + \".ordering-policy\", FifoPolicy.NAME);\n        break;\n      default:\n        String msg \u003d String.format(\"Unexpected ordering policy \" +\n            \"on queue %s: %s\", queue, policy);\n        conversionOptions.handleConversionError(msg);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
      "commitDate": "28/01/20 6:22 AM",
      "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "12/01/20 4:48 AM",
      "commitNameOld": "24e6a9e43a210cdecaa8e87926eef09c869988f9",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 16.07,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void emitOrderingPolicy(String queueName, FSQueue queue) {\n     String policy \u003d queue.getPolicy().getName();\n \n     switch (policy) {\n+    case DominantResourceFairnessPolicy.NAME:\n+      capacitySchedulerConfig.set(PREFIX + queueName\n+          + \".ordering-policy\", FairSharePolicy.NAME);\n+      break;\n     case FairSharePolicy.NAME:\n       capacitySchedulerConfig.set(PREFIX + queueName\n           + \".ordering-policy\", FairSharePolicy.NAME);\n-      fifoOrFairSharePolicyUsed \u003d true;\n+      if (drfUsed) {\n+        ruleHandler.handleFairAsDrf(queueName);\n+      }\n       break;\n     case FifoPolicy.NAME:\n       capacitySchedulerConfig.set(PREFIX + queueName\n           + \".ordering-policy\", FifoPolicy.NAME);\n-      fifoOrFairSharePolicyUsed \u003d true;\n-      break;\n-    case DominantResourceFairnessPolicy.NAME:\n-      // DRF is not supported on a queue level,\n-      // it has to be global\n-      drfPolicyUsedOnQueueLevel \u003d true;\n       break;\n     default:\n       String msg \u003d String.format(\"Unexpected ordering policy \" +\n           \"on queue %s: %s\", queue, policy);\n       conversionOptions.handleConversionError(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitOrderingPolicy(String queueName, FSQueue queue) {\n    String policy \u003d queue.getPolicy().getName();\n\n    switch (policy) {\n    case DominantResourceFairnessPolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FairSharePolicy.NAME);\n      break;\n    case FairSharePolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FairSharePolicy.NAME);\n      if (drfUsed) {\n        ruleHandler.handleFairAsDrf(queueName);\n      }\n      break;\n    case FifoPolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FifoPolicy.NAME);\n      break;\n    default:\n      String msg \u003d String.format(\"Unexpected ordering policy \" +\n          \"on queue %s: %s\", queue, policy);\n      conversionOptions.handleConversionError(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "24e6a9e43a210cdecaa8e87926eef09c869988f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10067. Add dry-run feature to FS-CS converter tool. Contributed by Peter Bacsko\n",
      "commitDate": "12/01/20 4:48 AM",
      "commitName": "24e6a9e43a210cdecaa8e87926eef09c869988f9",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/10/19 8:19 AM",
      "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 89.9,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   private void emitOrderingPolicy(String queueName, FSQueue queue) {\n     String policy \u003d queue.getPolicy().getName();\n \n     switch (policy) {\n     case FairSharePolicy.NAME:\n       capacitySchedulerConfig.set(PREFIX + queueName\n           + \".ordering-policy\", FairSharePolicy.NAME);\n       fifoOrFairSharePolicyUsed \u003d true;\n       break;\n     case FifoPolicy.NAME:\n       capacitySchedulerConfig.set(PREFIX + queueName\n           + \".ordering-policy\", FifoPolicy.NAME);\n       fifoOrFairSharePolicyUsed \u003d true;\n       break;\n     case DominantResourceFairnessPolicy.NAME:\n       // DRF is not supported on a queue level,\n       // it has to be global\n       drfPolicyUsedOnQueueLevel \u003d true;\n       break;\n     default:\n-      throw new ConversionException(\"Unexpected ordering policy \" +\n-          \"on queue \" + queueName + \": \" + policy);\n+      String msg \u003d String.format(\"Unexpected ordering policy \" +\n+          \"on queue %s: %s\", queue, policy);\n+      conversionOptions.handleConversionError(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitOrderingPolicy(String queueName, FSQueue queue) {\n    String policy \u003d queue.getPolicy().getName();\n\n    switch (policy) {\n    case FairSharePolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FairSharePolicy.NAME);\n      fifoOrFairSharePolicyUsed \u003d true;\n      break;\n    case FifoPolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FifoPolicy.NAME);\n      fifoOrFairSharePolicyUsed \u003d true;\n      break;\n    case DominantResourceFairnessPolicy.NAME:\n      // DRF is not supported on a queue level,\n      // it has to be global\n      drfPolicyUsedOnQueueLevel \u003d true;\n      break;\n    default:\n      String msg \u003d String.format(\"Unexpected ordering policy \" +\n          \"on queue %s: %s\", queue, policy);\n      conversionOptions.handleConversionError(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,24 @@\n+  private void emitOrderingPolicy(String queueName, FSQueue queue) {\n+    String policy \u003d queue.getPolicy().getName();\n+\n+    switch (policy) {\n+    case FairSharePolicy.NAME:\n+      capacitySchedulerConfig.set(PREFIX + queueName\n+          + \".ordering-policy\", FairSharePolicy.NAME);\n+      fifoOrFairSharePolicyUsed \u003d true;\n+      break;\n+    case FifoPolicy.NAME:\n+      capacitySchedulerConfig.set(PREFIX + queueName\n+          + \".ordering-policy\", FifoPolicy.NAME);\n+      fifoOrFairSharePolicyUsed \u003d true;\n+      break;\n+    case DominantResourceFairnessPolicy.NAME:\n+      // DRF is not supported on a queue level,\n+      // it has to be global\n+      drfPolicyUsedOnQueueLevel \u003d true;\n+      break;\n+    default:\n+      throw new ConversionException(\"Unexpected ordering policy \" +\n+          \"on queue \" + queueName + \": \" + policy);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitOrderingPolicy(String queueName, FSQueue queue) {\n    String policy \u003d queue.getPolicy().getName();\n\n    switch (policy) {\n    case FairSharePolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FairSharePolicy.NAME);\n      fifoOrFairSharePolicyUsed \u003d true;\n      break;\n    case FifoPolicy.NAME:\n      capacitySchedulerConfig.set(PREFIX + queueName\n          + \".ordering-policy\", FifoPolicy.NAME);\n      fifoOrFairSharePolicyUsed \u003d true;\n      break;\n    case DominantResourceFairnessPolicy.NAME:\n      // DRF is not supported on a queue level,\n      // it has to be global\n      drfPolicyUsedOnQueueLevel \u003d true;\n      break;\n    default:\n      throw new ConversionException(\"Unexpected ordering policy \" +\n          \"on queue \" + queueName + \": \" + policy);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java"
    }
  }
}