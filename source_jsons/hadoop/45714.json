{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationIndexedFileController.java",
  "functionName": "getNodeLogFileToRead",
  "functionId": "getNodeLogFileToRead___nodeFiles-List__FileStatus____nodeId-String__appId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
  "functionStartLine": 752,
  "functionEndLine": 767,
  "numCommitsSeen": 18,
  "timeTaken": 2184,
  "changeHistory": [
    "583f4594314b3db25b57b1e46ea8026eab21f932",
    "e718ac597f2225cb4946e1ac4b3986c336645643",
    "4d53ef7eefb14661d824924e503a910de1ae997f",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc"
  ],
  "changeHistoryShort": {
    "583f4594314b3db25b57b1e46ea8026eab21f932": "Ybodychange",
    "e718ac597f2225cb4946e1ac4b3986c336645643": "Ybodychange",
    "4d53ef7eefb14661d824924e503a910de1ae997f": "Ybodychange",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "583f4594314b3db25b57b1e46ea8026eab21f932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\n\nChange-Id: I16e081f21c5f80160564c49cc49d103bd8eb7e16\n",
      "commitDate": "07/03/18 3:46 PM",
      "commitName": "583f4594314b3db25b57b1e46ea8026eab21f932",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 3:46 PM",
      "commitNameOld": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,16 @@\n   public List\u003cFileStatus\u003e getNodeLogFileToRead(\n       List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n       throws IOException {\n     List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n-    List\u003cFileStatus\u003e files \u003d new ArrayList\u003c\u003e(nodeFiles);\n-    for (FileStatus file : files) {\n-      String nodeName \u003d file.getPath().getName();\n+    for (FileStatus thisNodeFile : nodeFiles) {\n+      String nodeName \u003d thisNodeFile.getPath().getName();\n       if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n           || nodeName.contains(LogAggregationUtils\n           .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n               LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n           !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n-        if (nodeName.equals(appId + \".har\")) {\n-          Path p \u003d new Path(\"har:///\" + file.getPath().toUri().getRawPath());\n-          files \u003d Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));\n-          continue;\n-        }\n-        listOfFiles.add(file);\n+        listOfFiles.add(thisNodeFile);\n       }\n     }\n     return listOfFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFileStatus\u003e getNodeLogFileToRead(\n      List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n      throws IOException {\n    List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n    for (FileStatus thisNodeFile : nodeFiles) {\n      String nodeName \u003d thisNodeFile.getPath().getName();\n      if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n          || nodeName.contains(LogAggregationUtils\n          .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n              LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n          !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n        listOfFiles.add(thisNodeFile);\n      }\n    }\n    return listOfFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
      "extendedDetails": {}
    },
    "e718ac597f2225cb4946e1ac4b3986c336645643": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\"\n\nThis reverts commit 4d53ef7eefb14661d824924e503a910de1ae997f.\n",
      "commitDate": "07/03/18 3:46 PM",
      "commitName": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 11:30 AM",
      "commitNameOld": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,22 @@\n   public List\u003cFileStatus\u003e getNodeLogFileToRead(\n       List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n       throws IOException {\n     List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n-    for (FileStatus thisNodeFile : nodeFiles) {\n-      String nodeName \u003d thisNodeFile.getPath().getName();\n+    List\u003cFileStatus\u003e files \u003d new ArrayList\u003c\u003e(nodeFiles);\n+    for (FileStatus file : files) {\n+      String nodeName \u003d file.getPath().getName();\n       if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n           || nodeName.contains(LogAggregationUtils\n           .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n               LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n           !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n-        listOfFiles.add(thisNodeFile);\n+        if (nodeName.equals(appId + \".har\")) {\n+          Path p \u003d new Path(\"har:///\" + file.getPath().toUri().getRawPath());\n+          files \u003d Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));\n+          continue;\n+        }\n+        listOfFiles.add(file);\n       }\n     }\n     return listOfFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFileStatus\u003e getNodeLogFileToRead(\n      List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n      throws IOException {\n    List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n    List\u003cFileStatus\u003e files \u003d new ArrayList\u003c\u003e(nodeFiles);\n    for (FileStatus file : files) {\n      String nodeName \u003d file.getPath().getName();\n      if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n          || nodeName.contains(LogAggregationUtils\n          .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n              LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n          !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n        if (nodeName.equals(appId + \".har\")) {\n          Path p \u003d new Path(\"har:///\" + file.getPath().toUri().getRawPath());\n          files \u003d Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));\n          continue;\n        }\n        listOfFiles.add(file);\n      }\n    }\n    return listOfFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
      "extendedDetails": {}
    },
    "4d53ef7eefb14661d824924e503a910de1ae997f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\n\nChange-Id: Ie16e34039d57df50128c73b37516ad0bc7c9590e\n",
      "commitDate": "07/03/18 11:30 AM",
      "commitName": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/02/18 6:28 PM",
      "commitNameOld": "d4c98579e36df7eeb788352d7b76cd2c7448c511",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 23.71,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,16 @@\n   public List\u003cFileStatus\u003e getNodeLogFileToRead(\n       List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n       throws IOException {\n     List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n-    List\u003cFileStatus\u003e files \u003d new ArrayList\u003c\u003e(nodeFiles);\n-    for (FileStatus file : files) {\n-      String nodeName \u003d file.getPath().getName();\n+    for (FileStatus thisNodeFile : nodeFiles) {\n+      String nodeName \u003d thisNodeFile.getPath().getName();\n       if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n           || nodeName.contains(LogAggregationUtils\n           .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n               LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n           !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n-        if (nodeName.equals(appId + \".har\")) {\n-          Path p \u003d new Path(\"har:///\" + file.getPath().toUri().getRawPath());\n-          files \u003d Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));\n-          continue;\n-        }\n-        listOfFiles.add(file);\n+        listOfFiles.add(thisNodeFile);\n       }\n     }\n     return listOfFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFileStatus\u003e getNodeLogFileToRead(\n      List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n      throws IOException {\n    List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n    for (FileStatus thisNodeFile : nodeFiles) {\n      String nodeName \u003d thisNodeFile.getPath().getName();\n      if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n          || nodeName.contains(LogAggregationUtils\n          .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n              LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n          !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n        listOfFiles.add(thisNodeFile);\n      }\n    }\n    return listOfFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
      "extendedDetails": {}
    },
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,22 @@\n+  public List\u003cFileStatus\u003e getNodeLogFileToRead(\n+      List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n+      throws IOException {\n+    List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n+    List\u003cFileStatus\u003e files \u003d new ArrayList\u003c\u003e(nodeFiles);\n+    for (FileStatus file : files) {\n+      String nodeName \u003d file.getPath().getName();\n+      if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n+          || nodeName.contains(LogAggregationUtils\n+          .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n+              LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n+          !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n+        if (nodeName.equals(appId + \".har\")) {\n+          Path p \u003d new Path(\"har:///\" + file.getPath().toUri().getRawPath());\n+          files \u003d Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));\n+          continue;\n+        }\n+        listOfFiles.add(file);\n+      }\n+    }\n+    return listOfFiles;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFileStatus\u003e getNodeLogFileToRead(\n      List\u003cFileStatus\u003e nodeFiles, String nodeId, ApplicationId appId)\n      throws IOException {\n    List\u003cFileStatus\u003e listOfFiles \u003d new ArrayList\u003c\u003e();\n    List\u003cFileStatus\u003e files \u003d new ArrayList\u003c\u003e(nodeFiles);\n    for (FileStatus file : files) {\n      String nodeName \u003d file.getPath().getName();\n      if ((nodeId \u003d\u003d null || nodeId.isEmpty()\n          || nodeName.contains(LogAggregationUtils\n          .getNodeString(nodeId))) \u0026\u0026 !nodeName.endsWith(\n              LogAggregationUtils.TMP_FILE_SUFFIX) \u0026\u0026\n          !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\n        if (nodeName.equals(appId + \".har\")) {\n          Path p \u003d new Path(\"har:///\" + file.getPath().toUri().getRawPath());\n          files \u003d Arrays.asList(HarFs.get(p.toUri(), conf).listStatus(p));\n          continue;\n        }\n        listOfFiles.add(file);\n      }\n    }\n    return listOfFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java"
    }
  }
}