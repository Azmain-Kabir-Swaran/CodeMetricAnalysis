{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReservationInputValidator.java",
  "functionName": "validateReservationDefinition",
  "functionId": "validateReservationDefinition___reservationId-ReservationId__contract-ReservationDefinition__plan-Plan__auditConstant-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/ReservationInputValidator.java",
  "functionStartLine": 75,
  "functionEndLine": 180,
  "numCommitsSeen": 11,
  "timeTaken": 2509,
  "changeHistory": [
    "25932da6d1ee56299c8f9911576a42792c435407",
    "28d97b79b69bb2be02d9320105e155eeed6f9e78",
    "1bbd023275db535ab80fcb60e022151e9679d468",
    "b930dc3ec06afa479a249490976e3e127d201706",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "25932da6d1ee56299c8f9911576a42792c435407": "Ybodychange",
    "28d97b79b69bb2be02d9320105e155eeed6f9e78": "Ybodychange",
    "1bbd023275db535ab80fcb60e022151e9679d468": "Ybodychange",
    "b930dc3ec06afa479a249490976e3e127d201706": "Ybodychange",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25932da6d1ee56299c8f9911576a42792c435407": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5516. Add REST API for supporting recurring reservations. (Sean Po via Subru).\n",
      "commitDate": "26/10/17 12:10 PM",
      "commitName": "25932da6d1ee56299c8f9911576a42792c435407",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:46 PM",
      "commitNameOld": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 49.81,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,106 @@\n   private void validateReservationDefinition(ReservationId reservationId,\n       ReservationDefinition contract, Plan plan, String auditConstant)\n       throws YarnException {\n     String message \u003d \"\";\n     // check if deadline is in the past\n     if (contract \u003d\u003d null) {\n       message \u003d \"Missing reservation definition.\"\n           + \" Please try again by specifying a reservation definition.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n       message \u003d \"The specified deadline: \" + contract.getDeadline()\n           + \" is the past. Please try again with deadline in the future.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // Check if at least one RR has been specified\n     ReservationRequests resReqs \u003d contract.getReservationRequests();\n     if (resReqs \u003d\u003d null) {\n       message \u003d \"No resources have been specified to reserve.\"\n           + \"Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n     if (resReq \u003d\u003d null || resReq.isEmpty()) {\n       message \u003d \"No resources have been specified to reserve.\"\n           + \" Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // compute minimum duration and max gang size\n     long minDuration \u003d 0;\n     Resource maxGangSize \u003d Resource.newInstance(0, 0);\n     ReservationRequestInterpreter type \u003d\n         contract.getReservationRequests().getInterpreter();\n     for (ReservationRequest rr : resReq) {\n       if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n           || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n         minDuration \u003d Math.max(minDuration, rr.getDuration());\n       } else {\n         minDuration +\u003d rr.getDuration();\n       }\n       maxGangSize \u003d Resources.max(plan.getResourceCalculator(),\n           plan.getTotalCapacity(), maxGangSize,\n           Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n     }\n     // verify the allocation is possible (skip for ANY)\n     long duration \u003d contract.getDeadline() - contract.getArrival();\n     if (duration \u003c minDuration \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d \"The time difference (\" + (duration) + \") between arrival (\"\n           + contract.getArrival() + \") \" + \"and deadline (\"\n           + contract.getDeadline() + \") must \"\n           + \" be greater or equal to the minimum resource duration (\"\n           + minDuration + \")\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the largest gang does not exceed the inventory available\n     // capacity (skip for ANY)\n     if (Resources.greaterThan(plan.getResourceCalculator(),\n         plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d \"The size of the largest gang in the reservation definition (\"\n           + maxGangSize + \") exceed the capacity available (\"\n           + plan.getTotalCapacity() + \" )\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the recurrence is a positive long value.\n     String recurrenceExpression \u003d contract.getRecurrenceExpression();\n     try {\n       long recurrence \u003d Long.parseLong(recurrenceExpression);\n       if (recurrence \u003c 0) {\n         message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n             + \" again with a non-negative long value as period.\";\n         throw RPCUtil.getRemoteException(message);\n       }\n       // verify duration is less than recurrence for periodic reservations\n       if (recurrence \u003e 0 \u0026\u0026 duration \u003e recurrence) {\n         message \u003d \"Duration of the requested reservation: \" + duration\n             + \" is greater than the recurrence: \" + recurrence\n             + \". Please try again with a smaller duration.\";\n         throw RPCUtil.getRemoteException(message);\n       }\n+      // verify maximum period is divisible by recurrence expression.\n+      if (recurrence \u003e 0 \u0026\u0026 plan.getMaximumPeriodicity() % recurrence !\u003d 0) {\n+        message \u003d \"The maximum periodicity: \" + plan.getMaximumPeriodicity() +\n+            \" must be divisible by the recurrence expression provided: \" +\n+            recurrence + \". Please try again with a recurrence expression\" +\n+            \" that satisfies this requirement.\";\n+        throw RPCUtil.getRemoteException(message);\n+      }\n     } catch (NumberFormatException e) {\n       message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n           + \" again with a non-negative long value as period.\";\n       throw RPCUtil.getRemoteException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateReservationDefinition(ReservationId reservationId,\n      ReservationDefinition contract, Plan plan, String auditConstant)\n      throws YarnException {\n    String message \u003d \"\";\n    // check if deadline is in the past\n    if (contract \u003d\u003d null) {\n      message \u003d \"Missing reservation definition.\"\n          + \" Please try again by specifying a reservation definition.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n      message \u003d \"The specified deadline: \" + contract.getDeadline()\n          + \" is the past. Please try again with deadline in the future.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // Check if at least one RR has been specified\n    ReservationRequests resReqs \u003d contract.getReservationRequests();\n    if (resReqs \u003d\u003d null) {\n      message \u003d \"No resources have been specified to reserve.\"\n          + \"Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n    if (resReq \u003d\u003d null || resReq.isEmpty()) {\n      message \u003d \"No resources have been specified to reserve.\"\n          + \" Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // compute minimum duration and max gang size\n    long minDuration \u003d 0;\n    Resource maxGangSize \u003d Resource.newInstance(0, 0);\n    ReservationRequestInterpreter type \u003d\n        contract.getReservationRequests().getInterpreter();\n    for (ReservationRequest rr : resReq) {\n      if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n          || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n        minDuration \u003d Math.max(minDuration, rr.getDuration());\n      } else {\n        minDuration +\u003d rr.getDuration();\n      }\n      maxGangSize \u003d Resources.max(plan.getResourceCalculator(),\n          plan.getTotalCapacity(), maxGangSize,\n          Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n    }\n    // verify the allocation is possible (skip for ANY)\n    long duration \u003d contract.getDeadline() - contract.getArrival();\n    if (duration \u003c minDuration \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d \"The time difference (\" + (duration) + \") between arrival (\"\n          + contract.getArrival() + \") \" + \"and deadline (\"\n          + contract.getDeadline() + \") must \"\n          + \" be greater or equal to the minimum resource duration (\"\n          + minDuration + \")\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the largest gang does not exceed the inventory available\n    // capacity (skip for ANY)\n    if (Resources.greaterThan(plan.getResourceCalculator(),\n        plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d \"The size of the largest gang in the reservation definition (\"\n          + maxGangSize + \") exceed the capacity available (\"\n          + plan.getTotalCapacity() + \" )\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the recurrence is a positive long value.\n    String recurrenceExpression \u003d contract.getRecurrenceExpression();\n    try {\n      long recurrence \u003d Long.parseLong(recurrenceExpression);\n      if (recurrence \u003c 0) {\n        message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n            + \" again with a non-negative long value as period.\";\n        throw RPCUtil.getRemoteException(message);\n      }\n      // verify duration is less than recurrence for periodic reservations\n      if (recurrence \u003e 0 \u0026\u0026 duration \u003e recurrence) {\n        message \u003d \"Duration of the requested reservation: \" + duration\n            + \" is greater than the recurrence: \" + recurrence\n            + \". Please try again with a smaller duration.\";\n        throw RPCUtil.getRemoteException(message);\n      }\n      // verify maximum period is divisible by recurrence expression.\n      if (recurrence \u003e 0 \u0026\u0026 plan.getMaximumPeriodicity() % recurrence !\u003d 0) {\n        message \u003d \"The maximum periodicity: \" + plan.getMaximumPeriodicity() +\n            \" must be divisible by the recurrence expression provided: \" +\n            recurrence + \". Please try again with a recurrence expression\" +\n            \" that satisfies this requirement.\";\n        throw RPCUtil.getRemoteException(message);\n      }\n    } catch (NumberFormatException e) {\n      message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n          + \" again with a non-negative long value as period.\";\n      throw RPCUtil.getRemoteException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/ReservationInputValidator.java",
      "extendedDetails": {}
    },
    "28d97b79b69bb2be02d9320105e155eeed6f9e78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6687. Validate that the duration of the periodic reservation is less than the periodicity. (subru via curino)\n",
      "commitDate": "11/08/17 4:58 PM",
      "commitName": "28d97b79b69bb2be02d9320105e155eeed6f9e78",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "27/12/16 1:35 PM",
      "commitNameOld": "1bbd023275db535ab80fcb60e022151e9679d468",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 227.1,
      "commitsBetweenForRepo": 1266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,107 @@\n   private void validateReservationDefinition(ReservationId reservationId,\n       ReservationDefinition contract, Plan plan, String auditConstant)\n       throws YarnException {\n     String message \u003d \"\";\n     // check if deadline is in the past\n     if (contract \u003d\u003d null) {\n       message \u003d\n           \"Missing reservation definition.\"\n               + \" Please try again by specifying a reservation definition.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n       message \u003d\n           \"The specified deadline: \" + contract.getDeadline()\n               + \" is the past. Please try again with deadline in the future.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // Check if at least one RR has been specified\n     ReservationRequests resReqs \u003d contract.getReservationRequests();\n     if (resReqs \u003d\u003d null) {\n       message \u003d\n           \"No resources have been specified to reserve.\"\n               + \"Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n     if (resReq \u003d\u003d null || resReq.isEmpty()) {\n       message \u003d\n           \"No resources have been specified to reserve.\"\n               + \" Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // compute minimum duration and max gang size\n     long minDuration \u003d 0;\n     Resource maxGangSize \u003d Resource.newInstance(0, 0);\n     ReservationRequestInterpreter type \u003d\n         contract.getReservationRequests().getInterpreter();\n     for (ReservationRequest rr : resReq) {\n       if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n           || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n         minDuration \u003d Math.max(minDuration, rr.getDuration());\n       } else {\n         minDuration +\u003d rr.getDuration();\n       }\n       maxGangSize \u003d\n           Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               maxGangSize,\n               Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n     }\n     // verify the allocation is possible (skip for ANY)\n-    if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n+    long duration \u003d contract.getDeadline() - contract.getArrival();\n+    if (duration \u003c minDuration\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d\n           \"The time difference (\"\n-              + (contract.getDeadline() - contract.getArrival())\n+              + (duration)\n               + \") between arrival (\" + contract.getArrival() + \") \"\n               + \"and deadline (\" + contract.getDeadline() + \") must \"\n               + \" be greater or equal to the minimum resource duration (\"\n               + minDuration + \")\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the largest gang does not exceed the inventory available\n     // capacity (skip for ANY)\n     if (Resources.greaterThan(plan.getResourceCalculator(),\n         plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d\n           \"The size of the largest gang in the reservation definition (\"\n               + maxGangSize + \") exceed the capacity available (\"\n               + plan.getTotalCapacity() + \" )\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the recurrence is a positive long value.\n     String recurrenceExpression \u003d contract.getRecurrenceExpression();\n     try {\n-      Long recurrence \u003d Long.parseLong(recurrenceExpression);\n+      long recurrence \u003d Long.parseLong(recurrenceExpression);\n       if (recurrence \u003c 0) {\n         message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n-            + \" again with a non-negative long value as period\";\n+            + \" again with a non-negative long value as period.\";\n+        throw RPCUtil.getRemoteException(message);\n+      }\n+      // verify duration is less than recurrence for periodic reservations\n+      if (recurrence \u003e 0 \u0026\u0026 duration \u003e recurrence) {\n+        message \u003d \"Duration of the requested reservation: \" + duration\n+            + \" is greater than the recurrence: \" + recurrence\n+            + \". Please try again with a smaller duration.\";\n         throw RPCUtil.getRemoteException(message);\n       }\n     } catch (NumberFormatException e) {\n       message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n-          + \" again with a non-negative long value as period\";\n+          + \" again with a non-negative long value as period.\";\n       throw RPCUtil.getRemoteException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateReservationDefinition(ReservationId reservationId,\n      ReservationDefinition contract, Plan plan, String auditConstant)\n      throws YarnException {\n    String message \u003d \"\";\n    // check if deadline is in the past\n    if (contract \u003d\u003d null) {\n      message \u003d\n          \"Missing reservation definition.\"\n              + \" Please try again by specifying a reservation definition.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n      message \u003d\n          \"The specified deadline: \" + contract.getDeadline()\n              + \" is the past. Please try again with deadline in the future.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // Check if at least one RR has been specified\n    ReservationRequests resReqs \u003d contract.getReservationRequests();\n    if (resReqs \u003d\u003d null) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \"Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n    if (resReq \u003d\u003d null || resReq.isEmpty()) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \" Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // compute minimum duration and max gang size\n    long minDuration \u003d 0;\n    Resource maxGangSize \u003d Resource.newInstance(0, 0);\n    ReservationRequestInterpreter type \u003d\n        contract.getReservationRequests().getInterpreter();\n    for (ReservationRequest rr : resReq) {\n      if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n          || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n        minDuration \u003d Math.max(minDuration, rr.getDuration());\n      } else {\n        minDuration +\u003d rr.getDuration();\n      }\n      maxGangSize \u003d\n          Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              maxGangSize,\n              Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n    }\n    // verify the allocation is possible (skip for ANY)\n    long duration \u003d contract.getDeadline() - contract.getArrival();\n    if (duration \u003c minDuration\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The time difference (\"\n              + (duration)\n              + \") between arrival (\" + contract.getArrival() + \") \"\n              + \"and deadline (\" + contract.getDeadline() + \") must \"\n              + \" be greater or equal to the minimum resource duration (\"\n              + minDuration + \")\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the largest gang does not exceed the inventory available\n    // capacity (skip for ANY)\n    if (Resources.greaterThan(plan.getResourceCalculator(),\n        plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The size of the largest gang in the reservation definition (\"\n              + maxGangSize + \") exceed the capacity available (\"\n              + plan.getTotalCapacity() + \" )\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the recurrence is a positive long value.\n    String recurrenceExpression \u003d contract.getRecurrenceExpression();\n    try {\n      long recurrence \u003d Long.parseLong(recurrenceExpression);\n      if (recurrence \u003c 0) {\n        message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n            + \" again with a non-negative long value as period.\";\n        throw RPCUtil.getRemoteException(message);\n      }\n      // verify duration is less than recurrence for periodic reservations\n      if (recurrence \u003e 0 \u0026\u0026 duration \u003e recurrence) {\n        message \u003d \"Duration of the requested reservation: \" + duration\n            + \" is greater than the recurrence: \" + recurrence\n            + \". Please try again with a smaller duration.\";\n        throw RPCUtil.getRemoteException(message);\n      }\n    } catch (NumberFormatException e) {\n      message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n          + \" again with a non-negative long value as period.\";\n      throw RPCUtil.getRemoteException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/ReservationInputValidator.java",
      "extendedDetails": {}
    },
    "1bbd023275db535ab80fcb60e022151e9679d468": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5962. Spelling errors in logging and exceptions for resource manager code (gsohn via rkanter)\n",
      "commitDate": "27/12/16 1:35 PM",
      "commitName": "1bbd023275db535ab80fcb60e022151e9679d468",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "26/08/16 4:58 PM",
      "commitNameOld": "b930dc3ec06afa479a249490976e3e127d201706",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 122.9,
      "commitsBetweenForRepo": 830,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,99 @@\n   private void validateReservationDefinition(ReservationId reservationId,\n       ReservationDefinition contract, Plan plan, String auditConstant)\n       throws YarnException {\n     String message \u003d \"\";\n     // check if deadline is in the past\n     if (contract \u003d\u003d null) {\n       message \u003d\n           \"Missing reservation definition.\"\n               + \" Please try again by specifying a reservation definition.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n       message \u003d\n           \"The specified deadline: \" + contract.getDeadline()\n               + \" is the past. Please try again with deadline in the future.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // Check if at least one RR has been specified\n     ReservationRequests resReqs \u003d contract.getReservationRequests();\n     if (resReqs \u003d\u003d null) {\n       message \u003d\n           \"No resources have been specified to reserve.\"\n               + \"Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n     if (resReq \u003d\u003d null || resReq.isEmpty()) {\n       message \u003d\n           \"No resources have been specified to reserve.\"\n               + \" Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // compute minimum duration and max gang size\n     long minDuration \u003d 0;\n     Resource maxGangSize \u003d Resource.newInstance(0, 0);\n     ReservationRequestInterpreter type \u003d\n         contract.getReservationRequests().getInterpreter();\n     for (ReservationRequest rr : resReq) {\n       if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n           || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n         minDuration \u003d Math.max(minDuration, rr.getDuration());\n       } else {\n         minDuration +\u003d rr.getDuration();\n       }\n       maxGangSize \u003d\n           Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               maxGangSize,\n               Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n     }\n     // verify the allocation is possible (skip for ANY)\n     if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d\n           \"The time difference (\"\n               + (contract.getDeadline() - contract.getArrival())\n               + \") between arrival (\" + contract.getArrival() + \") \"\n               + \"and deadline (\" + contract.getDeadline() + \") must \"\n               + \" be greater or equal to the minimum resource duration (\"\n               + minDuration + \")\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the largest gang does not exceed the inventory available\n     // capacity (skip for ANY)\n     if (Resources.greaterThan(plan.getResourceCalculator(),\n         plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d\n-          \"The size of the largest gang in the reservation refinition (\"\n+          \"The size of the largest gang in the reservation definition (\"\n               + maxGangSize + \") exceed the capacity available (\"\n               + plan.getTotalCapacity() + \" )\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the recurrence is a positive long value.\n     String recurrenceExpression \u003d contract.getRecurrenceExpression();\n     try {\n       Long recurrence \u003d Long.parseLong(recurrenceExpression);\n       if (recurrence \u003c 0) {\n         message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n             + \" again with a non-negative long value as period\";\n         throw RPCUtil.getRemoteException(message);\n       }\n     } catch (NumberFormatException e) {\n       message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n           + \" again with a non-negative long value as period\";\n       throw RPCUtil.getRemoteException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateReservationDefinition(ReservationId reservationId,\n      ReservationDefinition contract, Plan plan, String auditConstant)\n      throws YarnException {\n    String message \u003d \"\";\n    // check if deadline is in the past\n    if (contract \u003d\u003d null) {\n      message \u003d\n          \"Missing reservation definition.\"\n              + \" Please try again by specifying a reservation definition.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n      message \u003d\n          \"The specified deadline: \" + contract.getDeadline()\n              + \" is the past. Please try again with deadline in the future.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // Check if at least one RR has been specified\n    ReservationRequests resReqs \u003d contract.getReservationRequests();\n    if (resReqs \u003d\u003d null) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \"Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n    if (resReq \u003d\u003d null || resReq.isEmpty()) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \" Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // compute minimum duration and max gang size\n    long minDuration \u003d 0;\n    Resource maxGangSize \u003d Resource.newInstance(0, 0);\n    ReservationRequestInterpreter type \u003d\n        contract.getReservationRequests().getInterpreter();\n    for (ReservationRequest rr : resReq) {\n      if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n          || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n        minDuration \u003d Math.max(minDuration, rr.getDuration());\n      } else {\n        minDuration +\u003d rr.getDuration();\n      }\n      maxGangSize \u003d\n          Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              maxGangSize,\n              Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n    }\n    // verify the allocation is possible (skip for ANY)\n    if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The time difference (\"\n              + (contract.getDeadline() - contract.getArrival())\n              + \") between arrival (\" + contract.getArrival() + \") \"\n              + \"and deadline (\" + contract.getDeadline() + \") must \"\n              + \" be greater or equal to the minimum resource duration (\"\n              + minDuration + \")\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the largest gang does not exceed the inventory available\n    // capacity (skip for ANY)\n    if (Resources.greaterThan(plan.getResourceCalculator(),\n        plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The size of the largest gang in the reservation definition (\"\n              + maxGangSize + \") exceed the capacity available (\"\n              + plan.getTotalCapacity() + \" )\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the recurrence is a positive long value.\n    String recurrenceExpression \u003d contract.getRecurrenceExpression();\n    try {\n      Long recurrence \u003d Long.parseLong(recurrenceExpression);\n      if (recurrence \u003c 0) {\n        message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n            + \" again with a non-negative long value as period\";\n        throw RPCUtil.getRemoteException(message);\n      }\n    } catch (NumberFormatException e) {\n      message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n          + \" again with a non-negative long value as period\";\n      throw RPCUtil.getRemoteException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/ReservationInputValidator.java",
      "extendedDetails": {}
    },
    "b930dc3ec06afa479a249490976e3e127d201706": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5327. API changes required to support recurring reservations in the YARN ReservationSystem. (Sangeetha Abdu Jyothi via Subru).\n",
      "commitDate": "26/08/16 4:58 PM",
      "commitName": "b930dc3ec06afa479a249490976e3e127d201706",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "25/05/16 4:55 PM",
      "commitNameOld": "013532a95e63d7c53e601be530021d6d5a15ab7f",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 93.0,
      "commitsBetweenForRepo": 758,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,99 @@\n   private void validateReservationDefinition(ReservationId reservationId,\n       ReservationDefinition contract, Plan plan, String auditConstant)\n       throws YarnException {\n     String message \u003d \"\";\n     // check if deadline is in the past\n     if (contract \u003d\u003d null) {\n       message \u003d\n           \"Missing reservation definition.\"\n               + \" Please try again by specifying a reservation definition.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n       message \u003d\n           \"The specified deadline: \" + contract.getDeadline()\n               + \" is the past. Please try again with deadline in the future.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // Check if at least one RR has been specified\n     ReservationRequests resReqs \u003d contract.getReservationRequests();\n     if (resReqs \u003d\u003d null) {\n       message \u003d\n           \"No resources have been specified to reserve.\"\n               + \"Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n     if (resReq \u003d\u003d null || resReq.isEmpty()) {\n       message \u003d\n           \"No resources have been specified to reserve.\"\n               + \" Please try again by specifying the resources to reserve.\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // compute minimum duration and max gang size\n     long minDuration \u003d 0;\n     Resource maxGangSize \u003d Resource.newInstance(0, 0);\n     ReservationRequestInterpreter type \u003d\n         contract.getReservationRequests().getInterpreter();\n     for (ReservationRequest rr : resReq) {\n       if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n           || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n         minDuration \u003d Math.max(minDuration, rr.getDuration());\n       } else {\n         minDuration +\u003d rr.getDuration();\n       }\n       maxGangSize \u003d\n           Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               maxGangSize,\n               Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n     }\n     // verify the allocation is possible (skip for ANY)\n     if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d\n           \"The time difference (\"\n               + (contract.getDeadline() - contract.getArrival())\n               + \") between arrival (\" + contract.getArrival() + \") \"\n               + \"and deadline (\" + contract.getDeadline() + \") must \"\n               + \" be greater or equal to the minimum resource duration (\"\n               + minDuration + \")\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n     // check that the largest gang does not exceed the inventory available\n     // capacity (skip for ANY)\n     if (Resources.greaterThan(plan.getResourceCalculator(),\n         plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n         \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n       message \u003d\n           \"The size of the largest gang in the reservation refinition (\"\n               + maxGangSize + \") exceed the capacity available (\"\n               + plan.getTotalCapacity() + \" )\";\n       RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n           \"validate reservation input definition\", \"ClientRMService\", message);\n       throw RPCUtil.getRemoteException(message);\n     }\n+    // check that the recurrence is a positive long value.\n+    String recurrenceExpression \u003d contract.getRecurrenceExpression();\n+    try {\n+      Long recurrence \u003d Long.parseLong(recurrenceExpression);\n+      if (recurrence \u003c 0) {\n+        message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n+            + \" again with a non-negative long value as period\";\n+        throw RPCUtil.getRemoteException(message);\n+      }\n+    } catch (NumberFormatException e) {\n+      message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n+          + \" again with a non-negative long value as period\";\n+      throw RPCUtil.getRemoteException(message);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateReservationDefinition(ReservationId reservationId,\n      ReservationDefinition contract, Plan plan, String auditConstant)\n      throws YarnException {\n    String message \u003d \"\";\n    // check if deadline is in the past\n    if (contract \u003d\u003d null) {\n      message \u003d\n          \"Missing reservation definition.\"\n              + \" Please try again by specifying a reservation definition.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n      message \u003d\n          \"The specified deadline: \" + contract.getDeadline()\n              + \" is the past. Please try again with deadline in the future.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // Check if at least one RR has been specified\n    ReservationRequests resReqs \u003d contract.getReservationRequests();\n    if (resReqs \u003d\u003d null) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \"Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n    if (resReq \u003d\u003d null || resReq.isEmpty()) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \" Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // compute minimum duration and max gang size\n    long minDuration \u003d 0;\n    Resource maxGangSize \u003d Resource.newInstance(0, 0);\n    ReservationRequestInterpreter type \u003d\n        contract.getReservationRequests().getInterpreter();\n    for (ReservationRequest rr : resReq) {\n      if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n          || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n        minDuration \u003d Math.max(minDuration, rr.getDuration());\n      } else {\n        minDuration +\u003d rr.getDuration();\n      }\n      maxGangSize \u003d\n          Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              maxGangSize,\n              Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n    }\n    // verify the allocation is possible (skip for ANY)\n    if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The time difference (\"\n              + (contract.getDeadline() - contract.getArrival())\n              + \") between arrival (\" + contract.getArrival() + \") \"\n              + \"and deadline (\" + contract.getDeadline() + \") must \"\n              + \" be greater or equal to the minimum resource duration (\"\n              + minDuration + \")\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the largest gang does not exceed the inventory available\n    // capacity (skip for ANY)\n    if (Resources.greaterThan(plan.getResourceCalculator(),\n        plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The size of the largest gang in the reservation refinition (\"\n              + maxGangSize + \") exceed the capacity available (\"\n              + plan.getTotalCapacity() + \" )\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the recurrence is a positive long value.\n    String recurrenceExpression \u003d contract.getRecurrenceExpression();\n    try {\n      Long recurrence \u003d Long.parseLong(recurrenceExpression);\n      if (recurrence \u003c 0) {\n        message \u003d \"Negative Period : \" + recurrenceExpression + \". Please try\"\n            + \" again with a non-negative long value as period\";\n        throw RPCUtil.getRemoteException(message);\n      }\n    } catch (NumberFormatException e) {\n      message \u003d \"Invalid period \" + recurrenceExpression + \". Please try\"\n          + \" again with a non-negative long value as period\";\n      throw RPCUtil.getRemoteException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/ReservationInputValidator.java",
      "extendedDetails": {}
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,85 @@\n+  private void validateReservationDefinition(ReservationId reservationId,\n+      ReservationDefinition contract, Plan plan, String auditConstant)\n+      throws YarnException {\n+    String message \u003d \"\";\n+    // check if deadline is in the past\n+    if (contract \u003d\u003d null) {\n+      message \u003d\n+          \"Missing reservation definition.\"\n+              + \" Please try again by specifying a reservation definition.\";\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n+          \"validate reservation input definition\", \"ClientRMService\", message);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n+    if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n+      message \u003d\n+          \"The specified deadline: \" + contract.getDeadline()\n+              + \" is the past. Please try again with deadline in the future.\";\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n+          \"validate reservation input definition\", \"ClientRMService\", message);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n+    // Check if at least one RR has been specified\n+    ReservationRequests resReqs \u003d contract.getReservationRequests();\n+    if (resReqs \u003d\u003d null) {\n+      message \u003d\n+          \"No resources have been specified to reserve.\"\n+              + \"Please try again by specifying the resources to reserve.\";\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n+          \"validate reservation input definition\", \"ClientRMService\", message);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n+    List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n+    if (resReq \u003d\u003d null || resReq.isEmpty()) {\n+      message \u003d\n+          \"No resources have been specified to reserve.\"\n+              + \" Please try again by specifying the resources to reserve.\";\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n+          \"validate reservation input definition\", \"ClientRMService\", message);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n+    // compute minimum duration and max gang size\n+    long minDuration \u003d 0;\n+    Resource maxGangSize \u003d Resource.newInstance(0, 0);\n+    ReservationRequestInterpreter type \u003d\n+        contract.getReservationRequests().getInterpreter();\n+    for (ReservationRequest rr : resReq) {\n+      if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n+          || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n+        minDuration \u003d Math.max(minDuration, rr.getDuration());\n+      } else {\n+        minDuration +\u003d rr.getDuration();\n+      }\n+      maxGangSize \u003d\n+          Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n+              maxGangSize,\n+              Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n+    }\n+    // verify the allocation is possible (skip for ANY)\n+    if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n+        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n+      message \u003d\n+          \"The time difference (\"\n+              + (contract.getDeadline() - contract.getArrival())\n+              + \") between arrival (\" + contract.getArrival() + \") \"\n+              + \"and deadline (\" + contract.getDeadline() + \") must \"\n+              + \" be greater or equal to the minimum resource duration (\"\n+              + minDuration + \")\";\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n+          \"validate reservation input definition\", \"ClientRMService\", message);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n+    // check that the largest gang does not exceed the inventory available\n+    // capacity (skip for ANY)\n+    if (Resources.greaterThan(plan.getResourceCalculator(),\n+        plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n+        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n+      message \u003d\n+          \"The size of the largest gang in the reservation refinition (\"\n+              + maxGangSize + \") exceed the capacity available (\"\n+              + plan.getTotalCapacity() + \" )\";\n+      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n+          \"validate reservation input definition\", \"ClientRMService\", message);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateReservationDefinition(ReservationId reservationId,\n      ReservationDefinition contract, Plan plan, String auditConstant)\n      throws YarnException {\n    String message \u003d \"\";\n    // check if deadline is in the past\n    if (contract \u003d\u003d null) {\n      message \u003d\n          \"Missing reservation definition.\"\n              + \" Please try again by specifying a reservation definition.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    if (contract.getDeadline() \u003c\u003d clock.getTime()) {\n      message \u003d\n          \"The specified deadline: \" + contract.getDeadline()\n              + \" is the past. Please try again with deadline in the future.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // Check if at least one RR has been specified\n    ReservationRequests resReqs \u003d contract.getReservationRequests();\n    if (resReqs \u003d\u003d null) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \"Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    List\u003cReservationRequest\u003e resReq \u003d resReqs.getReservationResources();\n    if (resReq \u003d\u003d null || resReq.isEmpty()) {\n      message \u003d\n          \"No resources have been specified to reserve.\"\n              + \" Please try again by specifying the resources to reserve.\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // compute minimum duration and max gang size\n    long minDuration \u003d 0;\n    Resource maxGangSize \u003d Resource.newInstance(0, 0);\n    ReservationRequestInterpreter type \u003d\n        contract.getReservationRequests().getInterpreter();\n    for (ReservationRequest rr : resReq) {\n      if (type \u003d\u003d ReservationRequestInterpreter.R_ALL\n          || type \u003d\u003d ReservationRequestInterpreter.R_ANY) {\n        minDuration \u003d Math.max(minDuration, rr.getDuration());\n      } else {\n        minDuration +\u003d rr.getDuration();\n      }\n      maxGangSize \u003d\n          Resources.max(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              maxGangSize,\n              Resources.multiply(rr.getCapability(), rr.getConcurrency()));\n    }\n    // verify the allocation is possible (skip for ANY)\n    if (contract.getDeadline() - contract.getArrival() \u003c minDuration\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The time difference (\"\n              + (contract.getDeadline() - contract.getArrival())\n              + \") between arrival (\" + contract.getArrival() + \") \"\n              + \"and deadline (\" + contract.getDeadline() + \") must \"\n              + \" be greater or equal to the minimum resource duration (\"\n              + minDuration + \")\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n    // check that the largest gang does not exceed the inventory available\n    // capacity (skip for ANY)\n    if (Resources.greaterThan(plan.getResourceCalculator(),\n        plan.getTotalCapacity(), maxGangSize, plan.getTotalCapacity())\n        \u0026\u0026 type !\u003d ReservationRequestInterpreter.R_ANY) {\n      message \u003d\n          \"The size of the largest gang in the reservation refinition (\"\n              + maxGangSize + \") exceed the capacity available (\"\n              + plan.getTotalCapacity() + \" )\";\n      RMAuditLogger.logFailure(\"UNKNOWN\", auditConstant,\n          \"validate reservation input definition\", \"ClientRMService\", message);\n      throw RPCUtil.getRemoteException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/ReservationInputValidator.java"
    }
  }
}