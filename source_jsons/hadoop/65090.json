{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Tasks.java",
  "functionName": "waitFor",
  "functionId": "waitFor___futures-Collection__Future__?____",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/commit/Tasks.java",
  "functionStartLine": 350,
  "functionEndLine": 375,
  "numCommitsSeen": 1,
  "timeTaken": 1174,
  "changeHistory": [
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c"
  ],
  "changeHistoryShort": {
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,26 @@\n+  private static void waitFor(Collection\u003cFuture\u003c?\u003e\u003e futures) {\n+    int size \u003d futures.size();\n+    LOG.debug(\"Waiting for {} tasks to complete\", size);\n+    int oldNumFinished \u003d 0;\n+    while (true) {\n+      int numFinished \u003d (int) futures.stream().filter(Future::isDone).count();\n+\n+      if (oldNumFinished !\u003d numFinished) {\n+        LOG.debug(\"Finished count -\u003e {}/{}\", numFinished, size);\n+        oldNumFinished \u003d numFinished;\n+      }\n+\n+      if (numFinished \u003d\u003d size) {\n+        // all of the futures are done, stop looping\n+        break;\n+      } else {\n+        try {\n+          Thread.sleep(10);\n+        } catch (InterruptedException e) {\n+          futures.forEach(future -\u003e future.cancel(true));\n+          Thread.currentThread().interrupt();\n+          break;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void waitFor(Collection\u003cFuture\u003c?\u003e\u003e futures) {\n    int size \u003d futures.size();\n    LOG.debug(\"Waiting for {} tasks to complete\", size);\n    int oldNumFinished \u003d 0;\n    while (true) {\n      int numFinished \u003d (int) futures.stream().filter(Future::isDone).count();\n\n      if (oldNumFinished !\u003d numFinished) {\n        LOG.debug(\"Finished count -\u003e {}/{}\", numFinished, size);\n        oldNumFinished \u003d numFinished;\n      }\n\n      if (numFinished \u003d\u003d size) {\n        // all of the futures are done, stop looping\n        break;\n      } else {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException e) {\n          futures.forEach(future -\u003e future.cancel(true));\n          Thread.currentThread().interrupt();\n          break;\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/commit/Tasks.java"
    }
  }
}