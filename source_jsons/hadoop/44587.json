{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "createCommandOpts",
  "functionId": "createCommandOpts",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 903,
  "functionEndLine": 994,
  "numCommitsSeen": 52,
  "timeTaken": 4827,
  "changeHistory": [
    "ee3355be3cd1cd956296a1b79b264177ff139ce6",
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "1a84c24b0cf6674fa755403971fa57d8e412b320",
    "83a2ffec408fc3ebb89ab13ab4788d9f02fae33b",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "429347289c7787364e654334cd84115ae40bb22d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "d169f5052fe83debcea7cf2f317dcd990890a857",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "ef1757790d89cc72f88f5330761b1c8901c59e94",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835"
  ],
  "changeHistoryShort": {
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": "Ybodychange",
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ybodychange",
    "1a84c24b0cf6674fa755403971fa57d8e412b320": "Ybodychange",
    "83a2ffec408fc3ebb89ab13ab4788d9f02fae33b": "Ybodychange",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ybodychange",
    "429347289c7787364e654334cd84115ae40bb22d": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ybodychange",
    "d169f5052fe83debcea7cf2f317dcd990890a857": "Ybodychange",
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": "Ybodychange",
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ybodychange",
    "ef1757790d89cc72f88f5330761b1c8901c59e94": "Ybodychange",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ee3355be3cd1cd956296a1b79b264177ff139ce6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8303. YarnClient should contact TimelineReader for application/attempt/container report.\n",
      "commitDate": "16/11/18 4:28 AM",
      "commitName": "ee3355be3cd1cd956296a1b79b264177ff139ce6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 156.87,
      "commitsBetweenForRepo": 1287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,92 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will print all available logs.\"\n         + \" Work with -log_files to get only specific logs. If specified, the\"\n         + \" applicationId can be omitted\");\n+    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. \"\n+        + \"By default, it will take default cluster id from the RM\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will print all available logs. Work with -log_files \"\n         + \"to get only specific logs.\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n         \"Specify comma-separated value \"\n         + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n         + \"fetch all the log files for the container.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n         true, \"Specify comma-separated value \"\n         + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n         + \"fetch all the log files for the container.\");\n     logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n     logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileRegexOpt.setArgName(\"Log File Pattern\");\n     opts.addOption(logFileRegexOpt);\n     opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n         \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n         + \"containerIds which belong to the specific Application. \"\n         + \"You can combine this with --nodeAddress to get containerIds \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\"\n         + \" retry client to get the container logs for the running \"\n         + \"applications. Use a negative value to make retry forever. \"\n         + \"The default value is 30.\");\n     opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true,\n         \"Work with --client_max_retries to create a retry client. \"\n         + \"The default value is 1000.\");\n     opts.addOption(SIZE_LIMIT_OPTION, true, \"Use this option to limit \"\n         + \"the size of the total logs which could be fetched. \"\n         + \"By default, we only allow to fetch at most \"\n         + LOG_SIZE_LIMIT_DEFAULT + \" MB logs. If the total log size is \"\n         + \"larger than the specified number, the CLI would fail. \"\n         + \"The user could specify -1 to ignore the size limit \"\n         + \"and fetch all logs.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n+    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\n     opts.getOption(CLIENT_RETRY_INTERVAL_OPTION)\n         .setArgName(\"Retry Interval\");\n     opts.getOption(SIZE_LIMIT_OPTION).setArgName(\"Size Limit\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will print all available logs.\"\n        + \" Work with -log_files to get only specific logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. \"\n        + \"By default, it will take default cluster id from the RM\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will print all available logs. Work with -log_files \"\n        + \"to get only specific logs.\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n        \"Specify comma-separated value \"\n        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n        true, \"Specify comma-separated value \"\n        + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n    logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileRegexOpt.setArgName(\"Log File Pattern\");\n    opts.addOption(logFileRegexOpt);\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\"\n        + \" retry client to get the container logs for the running \"\n        + \"applications. Use a negative value to make retry forever. \"\n        + \"The default value is 30.\");\n    opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true,\n        \"Work with --client_max_retries to create a retry client. \"\n        + \"The default value is 1000.\");\n    opts.addOption(SIZE_LIMIT_OPTION, true, \"Use this option to limit \"\n        + \"the size of the total logs which could be fetched. \"\n        + \"By default, we only allow to fetch at most \"\n        + LOG_SIZE_LIMIT_DEFAULT + \" MB logs. If the total log size is \"\n        + \"larger than the specified number, the CLI would fail. \"\n        + \"The user could specify -1 to ignore the size limit \"\n        + \"and fetch all logs.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\n    opts.getOption(CLIENT_RETRY_INTERVAL_OPTION)\n        .setArgName(\"Retry Interval\");\n    opts.getOption(SIZE_LIMIT_OPTION).setArgName(\"Size Limit\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "15/09/17 3:33 PM",
      "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 14.05,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,89 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will print all available logs.\"\n         + \" Work with -log_files to get only specific logs. If specified, the\"\n         + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will print all available logs. Work with -log_files \"\n         + \"to get only specific logs.\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n         \"Specify comma-separated value \"\n         + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n         + \"fetch all the log files for the container.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n         true, \"Specify comma-separated value \"\n         + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n         + \"fetch all the log files for the container.\");\n     logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n     logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileRegexOpt.setArgName(\"Log File Pattern\");\n     opts.addOption(logFileRegexOpt);\n     opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n         \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n         + \"containerIds which belong to the specific Application. \"\n         + \"You can combine this with --nodeAddress to get containerIds \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\"\n         + \" retry client to get the container logs for the running \"\n         + \"applications. Use a negative value to make retry forever. \"\n         + \"The default value is 30.\");\n     opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true,\n         \"Work with --client_max_retries to create a retry client. \"\n         + \"The default value is 1000.\");\n+    opts.addOption(SIZE_LIMIT_OPTION, true, \"Use this option to limit \"\n+        + \"the size of the total logs which could be fetched. \"\n+        + \"By default, we only allow to fetch at most \"\n+        + LOG_SIZE_LIMIT_DEFAULT + \" MB logs. If the total log size is \"\n+        + \"larger than the specified number, the CLI would fail. \"\n+        + \"The user could specify -1 to ignore the size limit \"\n+        + \"and fetch all logs.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\n     opts.getOption(CLIENT_RETRY_INTERVAL_OPTION)\n         .setArgName(\"Retry Interval\");\n+    opts.getOption(SIZE_LIMIT_OPTION).setArgName(\"Size Limit\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will print all available logs.\"\n        + \" Work with -log_files to get only specific logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will print all available logs. Work with -log_files \"\n        + \"to get only specific logs.\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n        \"Specify comma-separated value \"\n        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n        true, \"Specify comma-separated value \"\n        + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n    logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileRegexOpt.setArgName(\"Log File Pattern\");\n    opts.addOption(logFileRegexOpt);\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\"\n        + \" retry client to get the container logs for the running \"\n        + \"applications. Use a negative value to make retry forever. \"\n        + \"The default value is 30.\");\n    opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true,\n        \"Work with --client_max_retries to create a retry client. \"\n        + \"The default value is 1000.\");\n    opts.addOption(SIZE_LIMIT_OPTION, true, \"Use this option to limit \"\n        + \"the size of the total logs which could be fetched. \"\n        + \"By default, we only allow to fetch at most \"\n        + LOG_SIZE_LIMIT_DEFAULT + \" MB logs. If the total log size is \"\n        + \"larger than the specified number, the CLI would fail. \"\n        + \"The user could specify -1 to ignore the size limit \"\n        + \"and fetch all logs.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\n    opts.getOption(CLIENT_RETRY_INTERVAL_OPTION)\n        .setArgName(\"Retry Interval\");\n    opts.getOption(SIZE_LIMIT_OPTION).setArgName(\"Size Limit\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "1a84c24b0cf6674fa755403971fa57d8e412b320": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7174. Add retry logic in LogsCLI when fetch running application logs. Contributed by Xuan Gong.\n",
      "commitDate": "15/09/17 3:33 PM",
      "commitName": "1a84c24b0cf6674fa755403971fa57d8e412b320",
      "commitAuthor": "Junping Du",
      "commitDateOld": "08/09/17 3:16 PM",
      "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 7.01,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,81 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will print all available logs.\"\n         + \" Work with -log_files to get only specific logs. If specified, the\"\n         + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will print all available logs. Work with -log_files \"\n         + \"to get only specific logs.\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n         \"Specify comma-separated value \"\n         + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n         + \"fetch all the log files for the container.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n         true, \"Specify comma-separated value \"\n         + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n         + \"fetch all the log files for the container.\");\n     logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n     logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileRegexOpt.setArgName(\"Log File Pattern\");\n     opts.addOption(logFileRegexOpt);\n     opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n         \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n         + \"containerIds which belong to the specific Application. \"\n         + \"You can combine this with --nodeAddress to get containerIds \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n+    opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\"\n+        + \" retry client to get the container logs for the running \"\n+        + \"applications. Use a negative value to make retry forever. \"\n+        + \"The default value is 30.\");\n+    opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true,\n+        \"Work with --client_max_retries to create a retry client. \"\n+        + \"The default value is 1000.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n+    opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\n+    opts.getOption(CLIENT_RETRY_INTERVAL_OPTION)\n+        .setArgName(\"Retry Interval\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will print all available logs.\"\n        + \" Work with -log_files to get only specific logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will print all available logs. Work with -log_files \"\n        + \"to get only specific logs.\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n        \"Specify comma-separated value \"\n        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n        true, \"Specify comma-separated value \"\n        + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n    logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileRegexOpt.setArgName(\"Log File Pattern\");\n    opts.addOption(logFileRegexOpt);\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\"\n        + \" retry client to get the container logs for the running \"\n        + \"applications. Use a negative value to make retry forever. \"\n        + \"The default value is 30.\");\n    opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true,\n        \"Work with --client_max_retries to create a retry client. \"\n        + \"The default value is 1000.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\n    opts.getOption(CLIENT_RETRY_INTERVAL_OPTION)\n        .setArgName(\"Retry Interval\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "83a2ffec408fc3ebb89ab13ab4788d9f02fae33b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5470. Addedum to differentiate exactly matching of log-files with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "08/08/16 2:28 PM",
      "commitName": "83a2ffec408fc3ebb89ab13ab4788d9f02fae33b",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "05/08/16 10:55 AM",
      "commitNameOld": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,71 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will print all available logs.\"\n         + \" Work with -log_files to get only specific logs. If specified, the\"\n         + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will print all available logs. Work with -log_files \"\n         + \"to get only specific logs.\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n         \"Specify comma-separated value \"\n-        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\"to \"\n-        + \"fetch all the log files for the container. Specific -regex \"\n-        + \"for using java regex to find matched log files.\");\n+        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n+        + \"fetch all the log files for the container.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n-    opts.addOption(REGEX_OPTION, false, \"Work with -log_files to find \"\n-        + \"matched files by using java regex.\");\n+    Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n+        true, \"Specify comma-separated value \"\n+        + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n+        + \"fetch all the log files for the container.\");\n+    logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n+    logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n+    logFileRegexOpt.setArgName(\"Log File Pattern\");\n+    opts.addOption(logFileRegexOpt);\n     opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n         \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n         + \"containerIds which belong to the specific Application. \"\n         + \"You can combine this with --nodeAddress to get containerIds \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will print all available logs.\"\n        + \" Work with -log_files to get only specific logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will print all available logs. Work with -log_files \"\n        + \"to get only specific logs.\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n        \"Specify comma-separated value \"\n        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    Option logFileRegexOpt \u003d new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION,\n        true, \"Specify comma-separated value \"\n        + \"to get matched log files by using java regex. Use \\\".*\\\" to \"\n        + \"fetch all the log files for the container.\");\n    logFileRegexOpt.setValueSeparator(\u0027,\u0027);\n    logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileRegexOpt.setArgName(\"Log File Pattern\");\n    opts.addOption(logFileRegexOpt);\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "commitDateOld": "02/08/16 10:41 AM",
      "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,66 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will print all available logs.\"\n         + \" Work with -log_files to get only specific logs. If specified, the\"\n         + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will print all available logs. Work with -log_files \"\n         + \"to get only specific logs.\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n         \"Specify comma-separated value \"\n-        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n-        + \"log files for the container. It also supports Java Regex.\");\n+        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\"to \"\n+        + \"fetch all the log files for the container. Specific -regex \"\n+        + \"for using java regex to find matched log files.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n+    opts.addOption(REGEX_OPTION, false, \"Work with -log_files to find \"\n+        + \"matched files by using java regex.\");\n     opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n         \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n         + \"containerIds which belong to the specific Application. \"\n         + \"You can combine this with --nodeAddress to get containerIds \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will print all available logs.\"\n        + \" Work with -log_files to get only specific logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will print all available logs. Work with -log_files \"\n        + \"to get only specific logs.\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n        \"Specify comma-separated value \"\n        + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\"to \"\n        + \"fetch all the log files for the container. Specific -regex \"\n        + \"for using java regex to find matched log files.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(REGEX_OPTION, false, \"Work with -log_files to find \"\n        + \"matched files by using java regex.\");\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "429347289c7787364e654334cd84115ae40bb22d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5363. For AM containers, or for containers of running-apps, \"yarn logs\" incorrectly only (tries to) shows syslog file-type by default. (Contributed by Vinod Kumar Vavilapalli)\n",
      "commitDate": "14/07/16 10:20 AM",
      "commitName": "429347289c7787364e654334cd84115ae40bb22d",
      "commitAuthor": "Xuan",
      "commitDateOld": "13/07/16 2:52 PM",
      "commitNameOld": "d18050522c5c6bd9e32eb9a1be4ffe2288624c40",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n-        + \"By default, it will only print syslog if the application is running.\"\n-        + \" Work with -logFiles to get other logs. If specified, the\"\n+        + \"By default, it will print all available logs.\"\n+        + \" Work with -log_files to get only specific logs. If specified, the\"\n         + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n-        + \"By default, it will only print out syslog. Work with -logFiles \"\n-        + \"to get other logs\");\n+        + \"By default, it will print all available logs. Work with -log_files \"\n+        + \"to get only specific logs.\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n-    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n+    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n         \"Specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n         + \"log files for the container. It also supports Java Regex.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n         \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n         + \"containerIds which belong to the specific Application. \"\n         + \"You can combine this with --nodeAddress to get containerIds \"\n         + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will print all available logs.\"\n        + \" Work with -log_files to get only specific logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will print all available logs. Work with -log_files \"\n        + \"to get only specific logs.\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(PER_CONTAINER_LOG_FILES_OPTION, true,\n        \"Specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container. It also supports Java Regex.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/07/16 8:29 AM",
      "commitNameOld": "7705812c7e3a9f3f774130e25443fda249c08c9c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,63 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will only print syslog if the application is running.\"\n         + \" Work with -logFiles to get other logs. If specified, the\"\n         + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will only print out syslog. Work with -logFiles \"\n         + \"to get other logs\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n         \"Specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n         + \"log files for the container. It also supports Java Regex.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n-    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n+    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n+        \"Show the container log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n-        + \"for all the containers on the specific NodeManager. \"\n-        + \"Currently, this option can only be used for finished \"\n-        + \"applications.\");\n+        + \"for all the containers on the specific NodeManager.\");\n+    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n+        + \"containerIds which belong to the specific Application. \"\n+        + \"You can combine this with --nodeAddress to get containerIds \"\n+        + \"for all the containers on the specific NodeManager.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is running.\"\n        + \" Work with -logFiles to get other logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container. It also supports Java Regex.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false,\n        \"Show the container log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \"\n        + \"containerIds which belong to the specific Application. \"\n        + \"You can combine this with --nodeAddress to get containerIds \"\n        + \"for all the containers on the specific NodeManager.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "d169f5052fe83debcea7cf2f317dcd990890a857": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5227. Yarn logs command: no need to specify applicationId when\nspecifying containerId. Contributed by Gergely Novák\n",
      "commitDate": "06/07/16 10:43 AM",
      "commitName": "d169f5052fe83debcea7cf2f317dcd990890a857",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/06/16 9:48 PM",
      "commitNameOld": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 13.54,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n-    appIdOpt.setRequired(true);\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n-        + \"By default, it will only print syslog if the application is runing.\"\n-        + \" Work with -logFiles to get other logs.\");\n+        + \"By default, it will only print syslog if the application is running.\"\n+        + \" Work with -logFiles to get other logs. If specified, the\"\n+        + \" applicationId can be omitted\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will only print out syslog. Work with -logFiles \"\n         + \"to get other logs\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n         \"Specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n         + \"log files for the container. It also supports Java Regex.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager. \"\n         + \"Currently, this option can only be used for finished \"\n         + \"applications.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is running.\"\n        + \" Work with -logFiles to get other logs. If specified, the\"\n        + \" applicationId can be omitted\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container. It also supports Java Regex.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager. \"\n        + \"Currently, this option can only be used for finished \"\n        + \"applications.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5266. Wrong exit code while trying to get app logs using regex via CLI. Contributed by Xuan Gong\n",
      "commitDate": "22/06/16 9:48 PM",
      "commitName": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/06/16 4:05 PM",
      "commitNameOld": "5d58858bb6dfc07272ef099d60ca7cfb3b04423c",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     appIdOpt.setRequired(true);\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will only print syslog if the application is runing.\"\n         + \" Work with -logFiles to get other logs.\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will only print out syslog. Work with -logFiles \"\n         + \"to get other logs\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n-        \"Work with -am/-containerId and specify comma-separated value \"\n+        \"Specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n         + \"log files for the container. It also supports Java Regex.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager. \"\n         + \"Currently, this option can only be used for finished \"\n         + \"applications.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n         + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n         + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    appIdOpt.setRequired(true);\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is runing.\"\n        + \" Work with -logFiles to get other logs.\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container. It also supports Java Regex.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager. \"\n        + \"Currently, this option can only be used for finished \"\n        + \"applications.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "0bc05e40fa7e183efe8463ada459c621da3ce3bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5088. Improve \"yarn log\" command-line to read the last K bytes for the log files. Contributed by Xuan Gong\n",
      "commitDate": "01/06/16 1:44 PM",
      "commitName": "0bc05e40fa7e183efe8463ada459c621da3ce3bf",
      "commitAuthor": "Xuan",
      "commitDateOld": "29/05/16 9:23 AM",
      "commitNameOld": "4e1f56e111a88c2bc600aaa601010295075676c9",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 3.18,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,60 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     appIdOpt.setRequired(true);\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will only print syslog if the application is runing.\"\n         + \" Work with -logFiles to get other logs.\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will only print out syslog. Work with -logFiles \"\n         + \"to get other logs\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n         \"Work with -am/-containerId and specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n         + \"log files for the container. It also supports Java Regex.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager. \"\n         + \"Currently, this option can only be used for finished \"\n         + \"applications.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n+    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n+        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n+        + \"the end and positive values as bytes to read from the beginning.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n+    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    appIdOpt.setRequired(true);\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is runing.\"\n        + \" Work with -logFiles to get other logs.\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Work with -am/-containerId and specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container. It also supports Java Regex.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager. \"\n        + \"Currently, this option can only be used for finished \"\n        + \"applications.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file\u0027s first \u0027n\u0027 bytes \"\n        + \"or the last \u0027n\u0027 bytes. Use negative values as bytes to read from \"\n        + \"the end and positive values as bytes to read from the beginning.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "commitDateOld": "18/05/16 10:14 AM",
      "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 8.57,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     appIdOpt.setRequired(true);\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will only print syslog if the application is runing.\"\n         + \" Work with -logFiles to get other logs.\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will only print out syslog. Work with -logFiles \"\n         + \"to get other logs\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n         \"Work with -am/-containerId and specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n-        + \"log files for the container.\");\n+        + \"log files for the container. It also supports Java Regex.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager. \"\n         + \"Currently, this option can only be used for finished \"\n         + \"applications.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n     opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n         + \"container logs. The container logs will be stored based on the \"\n         + \"node the container ran on.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n     opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    appIdOpt.setRequired(true);\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is runing.\"\n        + \" Work with -logFiles to get other logs.\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Work with -am/-containerId and specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container. It also supports Java Regex.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager. \"\n        + \"Currently, this option can only be used for finished \"\n        + \"applications.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "ef1757790d89cc72f88f5330761b1c8901c59e94": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
      "commitDate": "18/05/16 10:14 AM",
      "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "14/05/16 12:19 PM",
      "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 3.91,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,56 @@\n   private Options createCommandOpts() {\n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     Option appIdOpt \u003d\n         new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n     appIdOpt.setRequired(true);\n     opts.addOption(appIdOpt);\n     opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n         + \"By default, it will only print syslog if the application is runing.\"\n         + \" Work with -logFiles to get other logs.\");\n     opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n         + \"nodename:port\");\n     opts.addOption(APP_OWNER_OPTION, true,\n         \"AppOwner (assumed to be current user if not specified)\");\n     Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n         \"Prints the AM Container logs for this application. \"\n         + \"Specify comma-separated value to get logs for related AM \"\n         + \"Container. For example, If we specify -am 1,2, we will get \"\n         + \"the logs for the first AM Container as well as the second \"\n         + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n         + \"To get logs for the latest AM Container, use -am -1. \"\n         + \"By default, it will only print out syslog. Work with -logFiles \"\n         + \"to get other logs\");\n     amOption.setValueSeparator(\u0027,\u0027);\n     amOption.setArgs(Option.UNLIMITED_VALUES);\n     amOption.setArgName(\"AM Containers\");\n     opts.addOption(amOption);\n     Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n         \"Work with -am/-containerId and specify comma-separated value \"\n         + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n         + \"log files for the container.\");\n     logFileOpt.setValueSeparator(\u0027,\u0027);\n     logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n     logFileOpt.setArgName(\"Log File Name\");\n     opts.addOption(logFileOpt);\n     opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n         + \"including log-file names, the size of the log files. \"\n         + \"You can combine this with --containerId to get log metadata for \"\n         + \"the specific container, or with --nodeAddress to get log metadata \"\n         + \"for all the containers on the specific NodeManager. \"\n         + \"Currently, this option can only be used for finished \"\n         + \"applications.\");\n     opts.addOption(LIST_NODES_OPTION, false,\n         \"Show the list of nodes that successfully aggregated logs. \"\n         + \"This option can only be used with finished applications.\");\n+    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n+        + \"container logs. The container logs will be stored based on the \"\n+        + \"node the container ran on.\");\n     opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n     opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n     opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n     opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n     opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n+    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n     return opts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    appIdOpt.setRequired(true);\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is runing.\"\n        + \" Work with -logFiles to get other logs.\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Work with -am/-containerId and specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager. \"\n        + \"Currently, this option can only be used for finished \"\n        + \"applications.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \"\n        + \"container logs. The container logs will be stored based on the \"\n        + \"node the container ran on.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 2:16 PM",
      "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,52 @@\n+  private Options createCommandOpts() {\n+    Options opts \u003d new Options();\n+    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n+    Option appIdOpt \u003d\n+        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n+    appIdOpt.setRequired(true);\n+    opts.addOption(appIdOpt);\n+    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n+        + \"By default, it will only print syslog if the application is runing.\"\n+        + \" Work with -logFiles to get other logs.\");\n+    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n+        + \"nodename:port\");\n+    opts.addOption(APP_OWNER_OPTION, true,\n+        \"AppOwner (assumed to be current user if not specified)\");\n+    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n+        \"Prints the AM Container logs for this application. \"\n+        + \"Specify comma-separated value to get logs for related AM \"\n+        + \"Container. For example, If we specify -am 1,2, we will get \"\n+        + \"the logs for the first AM Container as well as the second \"\n+        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n+        + \"To get logs for the latest AM Container, use -am -1. \"\n+        + \"By default, it will only print out syslog. Work with -logFiles \"\n+        + \"to get other logs\");\n+    amOption.setValueSeparator(\u0027,\u0027);\n+    amOption.setArgs(Option.UNLIMITED_VALUES);\n+    amOption.setArgName(\"AM Containers\");\n+    opts.addOption(amOption);\n+    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n+        \"Work with -am/-containerId and specify comma-separated value \"\n+        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n+        + \"log files for the container.\");\n+    logFileOpt.setValueSeparator(\u0027,\u0027);\n+    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n+    logFileOpt.setArgName(\"Log File Name\");\n+    opts.addOption(logFileOpt);\n+    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n+        + \"including log-file names, the size of the log files. \"\n+        + \"You can combine this with --containerId to get log metadata for \"\n+        + \"the specific container, or with --nodeAddress to get log metadata \"\n+        + \"for all the containers on the specific NodeManager. \"\n+        + \"Currently, this option can only be used for finished \"\n+        + \"applications.\");\n+    opts.addOption(LIST_NODES_OPTION, false,\n+        \"Show the list of nodes that successfully aggregated logs. \"\n+        + \"This option can only be used with finished applications.\");\n+    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n+    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n+    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n+    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n+    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n+    return opts;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Options createCommandOpts() {\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    Option appIdOpt \u003d\n        new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\n    appIdOpt.setRequired(true);\n    opts.addOption(appIdOpt);\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \"\n        + \"By default, it will only print syslog if the application is runing.\"\n        + \" Work with -logFiles to get other logs.\");\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \"\n        + \"nodename:port\");\n    opts.addOption(APP_OWNER_OPTION, true,\n        \"AppOwner (assumed to be current user if not specified)\");\n    Option amOption \u003d new Option(AM_CONTAINER_OPTION, true,\n        \"Prints the AM Container logs for this application. \"\n        + \"Specify comma-separated value to get logs for related AM \"\n        + \"Container. For example, If we specify -am 1,2, we will get \"\n        + \"the logs for the first AM Container as well as the second \"\n        + \"AM Container. To get logs for all AM Containers, use -am ALL. \"\n        + \"To get logs for the latest AM Container, use -am -1. \"\n        + \"By default, it will only print out syslog. Work with -logFiles \"\n        + \"to get other logs\");\n    amOption.setValueSeparator(\u0027,\u0027);\n    amOption.setArgs(Option.UNLIMITED_VALUES);\n    amOption.setArgName(\"AM Containers\");\n    opts.addOption(amOption);\n    Option logFileOpt \u003d new Option(CONTAINER_LOG_FILES, true,\n        \"Work with -am/-containerId and specify comma-separated value \"\n        + \"to get specified container log files. Use \\\"ALL\\\" to fetch all the \"\n        + \"log files for the container.\");\n    logFileOpt.setValueSeparator(\u0027,\u0027);\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\n    logFileOpt.setArgName(\"Log File Name\");\n    opts.addOption(logFileOpt);\n    opts.addOption(SHOW_META_INFO, false, \"Show the log metadata, \"\n        + \"including log-file names, the size of the log files. \"\n        + \"You can combine this with --containerId to get log metadata for \"\n        + \"the specific container, or with --nodeAddress to get log metadata \"\n        + \"for all the containers on the specific NodeManager. \"\n        + \"Currently, this option can only be used for finished \"\n        + \"applications.\");\n    opts.addOption(LIST_NODES_OPTION, false,\n        \"Show the list of nodes that successfully aggregated logs. \"\n        + \"This option can only be used with finished applications.\");\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\n    return opts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}