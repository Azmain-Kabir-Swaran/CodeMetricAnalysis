{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerClientConfigHandler.java",
  "functionName": "writeDockerCredentialsToPath",
  "functionId": "writeDockerCredentialsToPath___outConfigFile-File__credentials-Credentials",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
  "functionStartLine": 159,
  "functionEndLine": 187,
  "numCommitsSeen": 6,
  "timeTaken": 2792,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "4827e9a9085b306bc379cb6e0b1fe4b92326edcd",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
    "5e013d50d1a98d37accf8c6b07b14254ad4f3639",
    "eb2449d5398e9ac869bc088e10d838a7f13deac0"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "4827e9a9085b306bc379cb6e0b1fe4b92326edcd": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": "Ybodychange",
    "5e013d50d1a98d37accf8c6b07b14254ad4f3639": "Ybodychange",
    "eb2449d5398e9ac869bc088e10d838a7f13deac0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "29/05/18 12:43 PM",
      "commitNameOld": "4827e9a9085b306bc379cb6e0b1fe4b92326edcd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 290.15,
      "commitsBetweenForRepo": 2275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,29 @@\n   public static boolean writeDockerCredentialsToPath(File outConfigFile,\n       Credentials credentials) throws IOException {\n     boolean foundDockerCred \u003d false;\n     if (credentials.numberOfTokens() \u003e 0) {\n       ObjectMapper mapper \u003d new ObjectMapper();\n       ObjectNode rootNode \u003d mapper.createObjectNode();\n       ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n       for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n         if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n           foundDockerCred \u003d true;\n           DockerCredentialTokenIdentifier ti \u003d\n               (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n           ObjectNode registryCredNode \u003d mapper.createObjectNode();\n           registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n           registryCredNode.put(CONFIG_AUTH_KEY,\n               new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Prepared token for write: \" + tk.toString());\n-          }\n+          LOG.debug(\"Prepared token for write: {}\", tk);\n         }\n       }\n       if (foundDockerCred) {\n         rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n         String json \u003d mapper.writerWithDefaultPrettyPrinter()\n             .writeValueAsString(rootNode);\n         FileUtils.writeStringToFile(\n             outConfigFile, json, StandardCharsets.UTF_8);\n       }\n     }\n     return foundDockerCred;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean writeDockerCredentialsToPath(File outConfigFile,\n      Credentials credentials) throws IOException {\n    boolean foundDockerCred \u003d false;\n    if (credentials.numberOfTokens() \u003e 0) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      ObjectNode rootNode \u003d mapper.createObjectNode();\n      ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n          foundDockerCred \u003d true;\n          DockerCredentialTokenIdentifier ti \u003d\n              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n          registryCredNode.put(CONFIG_AUTH_KEY,\n              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n          LOG.debug(\"Prepared token for write: {}\", tk);\n        }\n      }\n      if (foundDockerCred) {\n        rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n        String json \u003d mapper.writerWithDefaultPrettyPrinter()\n            .writeValueAsString(rootNode);\n        FileUtils.writeStringToFile(\n            outConfigFile, json, StandardCharsets.UTF_8);\n      }\n    }\n    return foundDockerCred;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
      "extendedDetails": {}
    },
    "4827e9a9085b306bc379cb6e0b1fe4b92326edcd": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8329. Docker client configuration can still be set incorrectly. Contributed by Shane Kumpf\n",
      "commitDate": "29/05/18 12:43 PM",
      "commitName": "4827e9a9085b306bc379cb6e0b1fe4b92326edcd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8329. Docker client configuration can still be set incorrectly. Contributed by Shane Kumpf\n",
          "commitDate": "29/05/18 12:43 PM",
          "commitName": "4827e9a9085b306bc379cb6e0b1fe4b92326edcd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "27/04/18 6:10 AM",
          "commitNameOld": "914d6b5cb143f4f9cadd9d689ea4e278383a6779",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 32.27,
          "commitsBetweenForRepo": 248,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  public static void writeDockerCredentialsToPath(File outConfigFile,\n+  public static boolean writeDockerCredentialsToPath(File outConfigFile,\n       Credentials credentials) throws IOException {\n-    ObjectMapper mapper \u003d new ObjectMapper();\n-    ObjectNode rootNode \u003d mapper.createObjectNode();\n-    ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n     boolean foundDockerCred \u003d false;\n     if (credentials.numberOfTokens() \u003e 0) {\n+      ObjectMapper mapper \u003d new ObjectMapper();\n+      ObjectNode rootNode \u003d mapper.createObjectNode();\n+      ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n       for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n         if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n           foundDockerCred \u003d true;\n           DockerCredentialTokenIdentifier ti \u003d\n               (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n           ObjectNode registryCredNode \u003d mapper.createObjectNode();\n           registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n           registryCredNode.put(CONFIG_AUTH_KEY,\n               new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Prepared token for write: \" + tk.toString());\n           }\n         }\n       }\n+      if (foundDockerCred) {\n+        rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n+        String json \u003d mapper.writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(rootNode);\n+        FileUtils.writeStringToFile(\n+            outConfigFile, json, StandardCharsets.UTF_8);\n+      }\n     }\n-    if (foundDockerCred) {\n-      rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n-      String json \u003d\n-          mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n-      FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n-    }\n+    return foundDockerCred;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean writeDockerCredentialsToPath(File outConfigFile,\n      Credentials credentials) throws IOException {\n    boolean foundDockerCred \u003d false;\n    if (credentials.numberOfTokens() \u003e 0) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      ObjectNode rootNode \u003d mapper.createObjectNode();\n      ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n          foundDockerCred \u003d true;\n          DockerCredentialTokenIdentifier ti \u003d\n              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n          registryCredNode.put(CONFIG_AUTH_KEY,\n              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Prepared token for write: \" + tk.toString());\n          }\n        }\n      }\n      if (foundDockerCred) {\n        rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n        String json \u003d mapper.writerWithDefaultPrettyPrinter()\n            .writeValueAsString(rootNode);\n        FileUtils.writeStringToFile(\n            outConfigFile, json, StandardCharsets.UTF_8);\n      }\n    }\n    return foundDockerCred;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8329. Docker client configuration can still be set incorrectly. Contributed by Shane Kumpf\n",
          "commitDate": "29/05/18 12:43 PM",
          "commitName": "4827e9a9085b306bc379cb6e0b1fe4b92326edcd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "27/04/18 6:10 AM",
          "commitNameOld": "914d6b5cb143f4f9cadd9d689ea4e278383a6779",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 32.27,
          "commitsBetweenForRepo": 248,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  public static void writeDockerCredentialsToPath(File outConfigFile,\n+  public static boolean writeDockerCredentialsToPath(File outConfigFile,\n       Credentials credentials) throws IOException {\n-    ObjectMapper mapper \u003d new ObjectMapper();\n-    ObjectNode rootNode \u003d mapper.createObjectNode();\n-    ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n     boolean foundDockerCred \u003d false;\n     if (credentials.numberOfTokens() \u003e 0) {\n+      ObjectMapper mapper \u003d new ObjectMapper();\n+      ObjectNode rootNode \u003d mapper.createObjectNode();\n+      ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n       for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n         if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n           foundDockerCred \u003d true;\n           DockerCredentialTokenIdentifier ti \u003d\n               (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n           ObjectNode registryCredNode \u003d mapper.createObjectNode();\n           registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n           registryCredNode.put(CONFIG_AUTH_KEY,\n               new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Prepared token for write: \" + tk.toString());\n           }\n         }\n       }\n+      if (foundDockerCred) {\n+        rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n+        String json \u003d mapper.writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(rootNode);\n+        FileUtils.writeStringToFile(\n+            outConfigFile, json, StandardCharsets.UTF_8);\n+      }\n     }\n-    if (foundDockerCred) {\n-      rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n-      String json \u003d\n-          mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n-      FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n-    }\n+    return foundDockerCred;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean writeDockerCredentialsToPath(File outConfigFile,\n      Credentials credentials) throws IOException {\n    boolean foundDockerCred \u003d false;\n    if (credentials.numberOfTokens() \u003e 0) {\n      ObjectMapper mapper \u003d new ObjectMapper();\n      ObjectNode rootNode \u003d mapper.createObjectNode();\n      ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n          foundDockerCred \u003d true;\n          DockerCredentialTokenIdentifier ti \u003d\n              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n          registryCredNode.put(CONFIG_AUTH_KEY,\n              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Prepared token for write: \" + tk.toString());\n          }\n        }\n      }\n      if (foundDockerCred) {\n        rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n        String json \u003d mapper.writerWithDefaultPrettyPrinter()\n            .writeValueAsString(rootNode);\n        FileUtils.writeStringToFile(\n            outConfigFile, json, StandardCharsets.UTF_8);\n      }\n    }\n    return foundDockerCred;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
      "commitDate": "17/04/18 6:57 AM",
      "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/03/18 12:12 AM",
      "commitNameOld": "5e013d50d1a98d37accf8c6b07b14254ad4f3639",
      "commitAuthorOld": "fang zhenyi",
      "daysBetweenCommits": 33.28,
      "commitsBetweenForRepo": 330,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,29 @@\n   public static void writeDockerCredentialsToPath(File outConfigFile,\n       Credentials credentials) throws IOException {\n     ObjectMapper mapper \u003d new ObjectMapper();\n     ObjectNode rootNode \u003d mapper.createObjectNode();\n     ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n+    boolean foundDockerCred \u003d false;\n     if (credentials.numberOfTokens() \u003e 0) {\n       for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n         if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n+          foundDockerCred \u003d true;\n           DockerCredentialTokenIdentifier ti \u003d\n               (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n           ObjectNode registryCredNode \u003d mapper.createObjectNode();\n           registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n           registryCredNode.put(CONFIG_AUTH_KEY,\n               new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Prepared token for write: \" + tk.toString());\n           }\n         }\n       }\n     }\n-    rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n-    String json \u003d\n-        mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n-    FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n+    if (foundDockerCred) {\n+      rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n+      String json \u003d\n+          mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n+      FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeDockerCredentialsToPath(File outConfigFile,\n      Credentials credentials) throws IOException {\n    ObjectMapper mapper \u003d new ObjectMapper();\n    ObjectNode rootNode \u003d mapper.createObjectNode();\n    ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n    boolean foundDockerCred \u003d false;\n    if (credentials.numberOfTokens() \u003e 0) {\n      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n          foundDockerCred \u003d true;\n          DockerCredentialTokenIdentifier ti \u003d\n              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n          registryCredNode.put(CONFIG_AUTH_KEY,\n              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Prepared token for write: \" + tk.toString());\n          }\n        }\n      }\n    }\n    if (foundDockerCred) {\n      rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n      String json \u003d\n          mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n      FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
      "extendedDetails": {}
    },
    "5e013d50d1a98d37accf8c6b07b14254ad4f3639": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15305. Replace FileUtils.writeStringToFile(File, String) with (File, String, Charset) to fix deprecation warnings.\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "15/03/18 12:12 AM",
      "commitName": "5e013d50d1a98d37accf8c6b07b14254ad4f3639",
      "commitAuthor": "fang zhenyi",
      "commitDateOld": "08/02/18 11:35 AM",
      "commitNameOld": "eb2449d5398e9ac869bc088e10d838a7f13deac0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 34.48,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public static void writeDockerCredentialsToPath(File outConfigFile,\n       Credentials credentials) throws IOException {\n     ObjectMapper mapper \u003d new ObjectMapper();\n     ObjectNode rootNode \u003d mapper.createObjectNode();\n     ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n     if (credentials.numberOfTokens() \u003e 0) {\n       for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n         if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n           DockerCredentialTokenIdentifier ti \u003d\n               (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n           ObjectNode registryCredNode \u003d mapper.createObjectNode();\n           registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n           registryCredNode.put(CONFIG_AUTH_KEY,\n               new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Prepared token for write: \" + tk.toString());\n           }\n         }\n       }\n     }\n     rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n     String json \u003d\n         mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n-    FileUtils.writeStringToFile(outConfigFile, json, Charset.defaultCharset());\n+    FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeDockerCredentialsToPath(File outConfigFile,\n      Credentials credentials) throws IOException {\n    ObjectMapper mapper \u003d new ObjectMapper();\n    ObjectNode rootNode \u003d mapper.createObjectNode();\n    ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n    if (credentials.numberOfTokens() \u003e 0) {\n      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n          DockerCredentialTokenIdentifier ti \u003d\n              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n          registryCredNode.put(CONFIG_AUTH_KEY,\n              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Prepared token for write: \" + tk.toString());\n          }\n        }\n      }\n    }\n    rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n    String json \u003d\n        mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n    FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
      "extendedDetails": {}
    },
    "eb2449d5398e9ac869bc088e10d838a7f13deac0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5428. Allow for specifying the docker client configuration directory. Contributed by Shane Kumpf\n",
      "commitDate": "08/02/18 11:35 AM",
      "commitName": "eb2449d5398e9ac869bc088e10d838a7f13deac0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,25 @@\n+  public static void writeDockerCredentialsToPath(File outConfigFile,\n+      Credentials credentials) throws IOException {\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    ObjectNode rootNode \u003d mapper.createObjectNode();\n+    ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n+    if (credentials.numberOfTokens() \u003e 0) {\n+      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n+        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n+          DockerCredentialTokenIdentifier ti \u003d\n+              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n+          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n+          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n+          registryCredNode.put(CONFIG_AUTH_KEY,\n+              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Prepared token for write: \" + tk.toString());\n+          }\n+        }\n+      }\n+    }\n+    rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n+    String json \u003d\n+        mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n+    FileUtils.writeStringToFile(outConfigFile, json, Charset.defaultCharset());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void writeDockerCredentialsToPath(File outConfigFile,\n      Credentials credentials) throws IOException {\n    ObjectMapper mapper \u003d new ObjectMapper();\n    ObjectNode rootNode \u003d mapper.createObjectNode();\n    ObjectNode registryUrlNode \u003d mapper.createObjectNode();\n    if (credentials.numberOfTokens() \u003e 0) {\n      for (Token\u003c? extends TokenIdentifier\u003e tk : credentials.getAllTokens()) {\n        if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\n          DockerCredentialTokenIdentifier ti \u003d\n              (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\n          ObjectNode registryCredNode \u003d mapper.createObjectNode();\n          registryUrlNode.put(ti.getRegistryUrl(), registryCredNode);\n          registryCredNode.put(CONFIG_AUTH_KEY,\n              new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Prepared token for write: \" + tk.toString());\n          }\n        }\n      }\n    }\n    rootNode.put(CONFIG_AUTHS_KEY, registryUrlNode);\n    String json \u003d\n        mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\n    FileUtils.writeStringToFile(outConfigFile, json, Charset.defaultCharset());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java"
    }
  }
}