{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "createNonRecursive",
  "functionId": "createNonRecursive___f-Path(modifiers-final)__permission-FsPermission(modifiers-final)__flag-EnumSet__CreateFlag__(modifiers-final)__bufferSize-int(modifiers-final)__replication-short(modifiers-final)__blockSize-long(modifiers-final)__progress-Progressable(modifiers-final)__checksumOpt-ChecksumOpt(modifiers-final)__favoredNodes-InetSocketAddress[](modifiers-final)__ecPolicyName-String(modifiers-final)__storagePolicyName-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 643,
  "functionEndLine": 674,
  "numCommitsSeen": 179,
  "timeTaken": 4270,
  "changeHistory": [
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
    "0d7a5ac5f526801367a9ec963e6d72783b637d55",
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52"
  ],
  "changeHistoryShort": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": "Ybodychange",
    "0d7a5ac5f526801367a9ec963e6d72783b637d55": "Ymultichange(Yparameterchange,Ybodychange)",
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16885. Encryption zone file copy failure leaks a temp file\n\n\r\nContributed by Xiaoyu Yao.\r\n\r\nContains HDFS-14892. Close the output stream if createWrappedOutputStream() fails\r\n\r\nCopying file through the FsShell command into an HDFS encryption zone where\r\nthe caller lacks permissions is leaks a temp ._COPYING file\r\nand potentially a wrapped stream unclosed.\r\n\r\nThis is a convergence of a fix for S3 meeting an issue in HDFS.\r\n\r\nS3: a HEAD against a file can cache a 404, \r\n -you must not do any existence checks, including deleteOnExit(),\r\n  until the file is written. \r\n\r\nHence: HADOOP-16490, only register files for deletion the create worked\r\nand the upload is not direct. \r\n\r\nHDFS-14892. HDFS doesn\u0027t close wrapped streams when IOEs are raised on\r\ncreate() failures. Which means that an entry is retained on the NN.\r\n-you need to register a file with deleteOnExit() even if the file wasn\u0027t\r\ncreated.\r\n\r\nThis patch:\r\n\r\n* Moves the deleteOnExit to ensure the created file get deleted cleanly.\r\n* Fixes HDFS to close the wrapped stream on failures.\r\n\r\n\r\n",
      "commitDate": "02/03/20 5:22 AM",
      "commitName": "0dd8956f2e4bd7cd2315ef23703e4b2da1a0d073",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "20/02/20 6:56 PM",
      "commitNameOld": "2338d25dc7150d75fbda84cc95422380b5622224",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 10.43,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private HdfsDataOutputStream createNonRecursive(final Path f,\n       final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final ChecksumOpt checksumOpt,\n       final InetSocketAddress[] favoredNodes, final String ecPolicyName,\n       final String storagePolicyName) throws IOException {\n     statistics.incrementWriteOps(1);\n     storageStatistics.incrementOpCounter(OpType.CREATE);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n       public HdfsDataOutputStream doCall(final Path p) throws IOException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             flag, false, replication, blockSize, progress, bufferSize,\n             checksumOpt, favoredNodes, ecPolicyName, storagePolicyName);\n-        return dfs.createWrappedOutputStream(out, statistics);\n+        return safelyCreateWrappedOutputStream(out);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n               replication, blockSize, progress, checksumOpt, favoredNodes,\n               ecPolicyName, storagePolicyName);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private HdfsDataOutputStream createNonRecursive(final Path f,\n      final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final ChecksumOpt checksumOpt,\n      final InetSocketAddress[] favoredNodes, final String ecPolicyName,\n      final String storagePolicyName) throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.CREATE);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            flag, false, replication, blockSize, progress, bufferSize,\n            checksumOpt, favoredNodes, ecPolicyName, storagePolicyName);\n        return safelyCreateWrappedOutputStream(out);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n              replication, blockSize, progress, checksumOpt, favoredNodes,\n              ecPolicyName, storagePolicyName);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "0d7a5ac5f526801367a9ec963e6d72783b637d55": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
      "commitDate": "14/02/19 8:43 AM",
      "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
          "commitDate": "14/02/19 8:43 AM",
          "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "05/02/19 3:51 AM",
          "commitNameOld": "f365957c6326f88734bc0a5d01cfb7eac713db20",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 9.2,
          "commitsBetweenForRepo": 68,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n   private HdfsDataOutputStream createNonRecursive(final Path f,\n       final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final ChecksumOpt checksumOpt,\n-      final InetSocketAddress[] favoredNodes, final String ecPolicyName)\n-      throws IOException {\n+      final InetSocketAddress[] favoredNodes, final String ecPolicyName,\n+      final String storagePolicyName) throws IOException {\n     statistics.incrementWriteOps(1);\n     storageStatistics.incrementOpCounter(OpType.CREATE);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n       public HdfsDataOutputStream doCall(final Path p) throws IOException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             flag, false, replication, blockSize, progress, bufferSize,\n-            checksumOpt, favoredNodes, ecPolicyName);\n+            checksumOpt, favoredNodes, ecPolicyName, storagePolicyName);\n         return dfs.createWrappedOutputStream(out, statistics);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n               replication, blockSize, progress, checksumOpt, favoredNodes,\n-              ecPolicyName);\n+              ecPolicyName, storagePolicyName);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private HdfsDataOutputStream createNonRecursive(final Path f,\n      final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final ChecksumOpt checksumOpt,\n      final InetSocketAddress[] favoredNodes, final String ecPolicyName,\n      final String storagePolicyName) throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.CREATE);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            flag, false, replication, blockSize, progress, bufferSize,\n            checksumOpt, favoredNodes, ecPolicyName, storagePolicyName);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n              replication, blockSize, progress, checksumOpt, favoredNodes,\n              ecPolicyName, storagePolicyName);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path(modifiers-final), permission-FsPermission(modifiers-final), flag-EnumSet\u003cCreateFlag\u003e(modifiers-final), bufferSize-int(modifiers-final), replication-short(modifiers-final), blockSize-long(modifiers-final), progress-Progressable(modifiers-final), checksumOpt-ChecksumOpt(modifiers-final), favoredNodes-InetSocketAddress[](modifiers-final), ecPolicyName-String(modifiers-final)]",
            "newValue": "[f-Path(modifiers-final), permission-FsPermission(modifiers-final), flag-EnumSet\u003cCreateFlag\u003e(modifiers-final), bufferSize-int(modifiers-final), replication-short(modifiers-final), blockSize-long(modifiers-final), progress-Progressable(modifiers-final), checksumOpt-ChecksumOpt(modifiers-final), favoredNodes-InetSocketAddress[](modifiers-final), ecPolicyName-String(modifiers-final), storagePolicyName-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13209. DistributedFileSystem.create should allow an option to provide StoragePolicy. Contributed by Ayush Saxena.\n",
          "commitDate": "14/02/19 8:43 AM",
          "commitName": "0d7a5ac5f526801367a9ec963e6d72783b637d55",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "05/02/19 3:51 AM",
          "commitNameOld": "f365957c6326f88734bc0a5d01cfb7eac713db20",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 9.2,
          "commitsBetweenForRepo": 68,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n   private HdfsDataOutputStream createNonRecursive(final Path f,\n       final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n       final int bufferSize, final short replication, final long blockSize,\n       final Progressable progress, final ChecksumOpt checksumOpt,\n-      final InetSocketAddress[] favoredNodes, final String ecPolicyName)\n-      throws IOException {\n+      final InetSocketAddress[] favoredNodes, final String ecPolicyName,\n+      final String storagePolicyName) throws IOException {\n     statistics.incrementWriteOps(1);\n     storageStatistics.incrementOpCounter(OpType.CREATE);\n     Path absF \u003d fixRelativePart(f);\n     return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n       @Override\n       public HdfsDataOutputStream doCall(final Path p) throws IOException {\n         final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n             flag, false, replication, blockSize, progress, bufferSize,\n-            checksumOpt, favoredNodes, ecPolicyName);\n+            checksumOpt, favoredNodes, ecPolicyName, storagePolicyName);\n         return dfs.createWrappedOutputStream(out, statistics);\n       }\n       @Override\n       public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n           throws IOException {\n         if (fs instanceof DistributedFileSystem) {\n           DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n           return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n               replication, blockSize, progress, checksumOpt, favoredNodes,\n-              ecPolicyName);\n+              ecPolicyName, storagePolicyName);\n         }\n         throw new UnsupportedOperationException(\"Cannot create with\" +\n             \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n             + f + \" -\u003e \" + p);\n       }\n     }.resolve(this, absF);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private HdfsDataOutputStream createNonRecursive(final Path f,\n      final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final ChecksumOpt checksumOpt,\n      final InetSocketAddress[] favoredNodes, final String ecPolicyName,\n      final String storagePolicyName) throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.CREATE);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            flag, false, replication, blockSize, progress, bufferSize,\n            checksumOpt, favoredNodes, ecPolicyName, storagePolicyName);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n              replication, blockSize, progress, checksumOpt, favoredNodes,\n              ecPolicyName, storagePolicyName);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14394. Provide Builder pattern for DistributedFileSystem.create. (lei)\n",
      "commitDate": "15/06/17 10:59 AM",
      "commitName": "5e7cfdca7b73a88bf3c3f1e5eb794a24218cce52",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,32 @@\n+  private HdfsDataOutputStream createNonRecursive(final Path f,\n+      final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n+      final int bufferSize, final short replication, final long blockSize,\n+      final Progressable progress, final ChecksumOpt checksumOpt,\n+      final InetSocketAddress[] favoredNodes, final String ecPolicyName)\n+      throws IOException {\n+    statistics.incrementWriteOps(1);\n+    storageStatistics.incrementOpCounter(OpType.CREATE);\n+    Path absF \u003d fixRelativePart(f);\n+    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n+      @Override\n+      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n+        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n+            flag, false, replication, blockSize, progress, bufferSize,\n+            checksumOpt, favoredNodes, ecPolicyName);\n+        return dfs.createWrappedOutputStream(out, statistics);\n+      }\n+      @Override\n+      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n+          throws IOException {\n+        if (fs instanceof DistributedFileSystem) {\n+          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n+          return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n+              replication, blockSize, progress, checksumOpt, favoredNodes,\n+              ecPolicyName);\n+        }\n+        throw new UnsupportedOperationException(\"Cannot create with\" +\n+            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n+            + f + \" -\u003e \" + p);\n+      }\n+    }.resolve(this, absF);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private HdfsDataOutputStream createNonRecursive(final Path f,\n      final FsPermission permission, final EnumSet\u003cCreateFlag\u003e flag,\n      final int bufferSize, final short replication, final long blockSize,\n      final Progressable progress, final ChecksumOpt checksumOpt,\n      final InetSocketAddress[] favoredNodes, final String ecPolicyName)\n      throws IOException {\n    statistics.incrementWriteOps(1);\n    storageStatistics.incrementOpCounter(OpType.CREATE);\n    Path absF \u003d fixRelativePart(f);\n    return new FileSystemLinkResolver\u003cHdfsDataOutputStream\u003e() {\n      @Override\n      public HdfsDataOutputStream doCall(final Path p) throws IOException {\n        final DFSOutputStream out \u003d dfs.create(getPathName(f), permission,\n            flag, false, replication, blockSize, progress, bufferSize,\n            checksumOpt, favoredNodes, ecPolicyName);\n        return dfs.createWrappedOutputStream(out, statistics);\n      }\n      @Override\n      public HdfsDataOutputStream next(final FileSystem fs, final Path p)\n          throws IOException {\n        if (fs instanceof DistributedFileSystem) {\n          DistributedFileSystem myDfs \u003d (DistributedFileSystem)fs;\n          return myDfs.createNonRecursive(p, permission, flag, bufferSize,\n              replication, blockSize, progress, checksumOpt, favoredNodes,\n              ecPolicyName);\n        }\n        throw new UnsupportedOperationException(\"Cannot create with\" +\n            \" favoredNodes through a symlink to a non-DistributedFileSystem: \"\n            + f + \" -\u003e \" + p);\n      }\n    }.resolve(this, absF);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}