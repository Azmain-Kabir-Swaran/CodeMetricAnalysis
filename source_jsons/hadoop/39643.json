{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "getAMResourceLimitPerPartition",
  "functionId": "getAMResourceLimitPerPartition___nodePartition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 659,
  "functionEndLine": 661,
  "numCommitsSeen": 267,
  "timeTaken": 6034,
  "changeHistory": [
    "b08ecf5c7589b055e93b2907413213f36097724d",
    "07b0fb996a32020678bd2ce482b672f0434651f0",
    "56e4f6237ae8b1852e82b186e08db3934f79a9db",
    "bdd90110e6904b59746812d9a093924a65e72280",
    "14dd647c556016d351f425ee956ccf800ccb9ce2",
    "c53420f58364b11fbda1dace7679d45534533382"
  ],
  "changeHistoryShort": {
    "b08ecf5c7589b055e93b2907413213f36097724d": "Ymultichange(Ymodifierchange,Ybodychange)",
    "07b0fb996a32020678bd2ce482b672f0434651f0": "Ybodychange",
    "56e4f6237ae8b1852e82b186e08db3934f79a9db": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "bdd90110e6904b59746812d9a093924a65e72280": "Ybodychange",
    "14dd647c556016d351f425ee956ccf800ccb9ce2": "Ybodychange",
    "c53420f58364b11fbda1dace7679d45534533382": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b08ecf5c7589b055e93b2907413213f36097724d": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4304. AM max resource configuration per partition to be displayed/updated correctly in UI and in various partition related metrics. (Sunil G via wangda)\n",
      "commitDate": "17/01/16 7:11 PM",
      "commitName": "b08ecf5c7589b055e93b2907413213f36097724d",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4304. AM max resource configuration per partition to be displayed/updated correctly in UI and in various partition related metrics. (Sunil G via wangda)\n",
          "commitDate": "17/01/16 7:11 PM",
          "commitName": "b08ecf5c7589b055e93b2907413213f36097724d",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/01/16 3:51 PM",
          "commitNameOld": "109e528ef5d8df07443373751266b4417acc981a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.14,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,3 @@\n-  public synchronized Resource getAMResourceLimitPerPartition(\n-      String nodePartition) {\n-    /*\n-     * For non-labeled partition, get the max value from resources currently\n-     * available to the queue and the absolute resources guaranteed for the\n-     * partition in the queue. For labeled partition, consider only the absolute\n-     * resources guaranteed. Multiply this value (based on labeled/\n-     * non-labeled), * with per-partition am-resource-percent to get the max am\n-     * resource limit for this queue and partition.\n-     */\n-    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n-        resourceCalculator,\n-        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n-        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n-\n-    Resource queueCurrentLimit \u003d Resources.none();\n-    // For non-labeled partition, we need to consider the current queue\n-    // usage limit.\n-    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n-      synchronized (queueResourceLimitsInfo) {\n-        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n-      }\n-    }\n-\n-    float amResourcePercent \u003d queueCapacities\n-        .getMaxAMResourcePercentage(nodePartition);\n-\n-    // Current usable resource for this queue and partition is the max of\n-    // queueCurrentLimit and queuePartitionResource.\n-    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n-        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n-\n-    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n-        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n-        minimumAllocation);\n-\n-    metrics.setAMResouceLimit(amResouceLimit);\n-    queueUsage.setAMLimit(nodePartition, amResouceLimit);\n-    return amResouceLimit;\n+  public Resource getAMResourceLimitPerPartition(String nodePartition) {\n+    return queueUsage.getAMLimit(nodePartition);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource getAMResourceLimitPerPartition(String nodePartition) {\n    return queueUsage.getAMLimit(nodePartition);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4304. AM max resource configuration per partition to be displayed/updated correctly in UI and in various partition related metrics. (Sunil G via wangda)\n",
          "commitDate": "17/01/16 7:11 PM",
          "commitName": "b08ecf5c7589b055e93b2907413213f36097724d",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/01/16 3:51 PM",
          "commitNameOld": "109e528ef5d8df07443373751266b4417acc981a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.14,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,3 @@\n-  public synchronized Resource getAMResourceLimitPerPartition(\n-      String nodePartition) {\n-    /*\n-     * For non-labeled partition, get the max value from resources currently\n-     * available to the queue and the absolute resources guaranteed for the\n-     * partition in the queue. For labeled partition, consider only the absolute\n-     * resources guaranteed. Multiply this value (based on labeled/\n-     * non-labeled), * with per-partition am-resource-percent to get the max am\n-     * resource limit for this queue and partition.\n-     */\n-    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n-        resourceCalculator,\n-        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n-        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n-\n-    Resource queueCurrentLimit \u003d Resources.none();\n-    // For non-labeled partition, we need to consider the current queue\n-    // usage limit.\n-    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n-      synchronized (queueResourceLimitsInfo) {\n-        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n-      }\n-    }\n-\n-    float amResourcePercent \u003d queueCapacities\n-        .getMaxAMResourcePercentage(nodePartition);\n-\n-    // Current usable resource for this queue and partition is the max of\n-    // queueCurrentLimit and queuePartitionResource.\n-    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n-        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n-\n-    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n-        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n-        minimumAllocation);\n-\n-    metrics.setAMResouceLimit(amResouceLimit);\n-    queueUsage.setAMLimit(nodePartition, amResouceLimit);\n-    return amResouceLimit;\n+  public Resource getAMResourceLimitPerPartition(String nodePartition) {\n+    return queueUsage.getAMLimit(nodePartition);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource getAMResourceLimitPerPartition(String nodePartition) {\n    return queueUsage.getAMLimit(nodePartition);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "07b0fb996a32020678bd2ce482b672f0434651f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4418. AM Resource Limit per partition can be updated to ResourceUsage as well. (Sunil G via wangda)\n",
      "commitDate": "14/12/15 11:24 AM",
      "commitName": "07b0fb996a32020678bd2ce482b672f0434651f0",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/12/15 10:52 AM",
      "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public synchronized Resource getAMResourceLimitPerPartition(\n       String nodePartition) {\n     /*\n      * For non-labeled partition, get the max value from resources currently\n      * available to the queue and the absolute resources guaranteed for the\n      * partition in the queue. For labeled partition, consider only the absolute\n      * resources guaranteed. Multiply this value (based on labeled/\n      * non-labeled), * with per-partition am-resource-percent to get the max am\n      * resource limit for this queue and partition.\n      */\n     Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n         resourceCalculator,\n         labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n         queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n \n     Resource queueCurrentLimit \u003d Resources.none();\n     // For non-labeled partition, we need to consider the current queue\n     // usage limit.\n     if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       synchronized (queueResourceLimitsInfo) {\n         queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n       }\n     }\n \n     float amResourcePercent \u003d queueCapacities\n         .getMaxAMResourcePercentage(nodePartition);\n \n     // Current usable resource for this queue and partition is the max of\n     // queueCurrentLimit and queuePartitionResource.\n     Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n         lastClusterResource, queueCurrentLimit, queuePartitionResource);\n \n     Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n         resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n         minimumAllocation);\n \n     metrics.setAMResouceLimit(amResouceLimit);\n+    queueUsage.setAMLimit(nodePartition, amResouceLimit);\n     return amResouceLimit;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Resource getAMResourceLimitPerPartition(\n      String nodePartition) {\n    /*\n     * For non-labeled partition, get the max value from resources currently\n     * available to the queue and the absolute resources guaranteed for the\n     * partition in the queue. For labeled partition, consider only the absolute\n     * resources guaranteed. Multiply this value (based on labeled/\n     * non-labeled), * with per-partition am-resource-percent to get the max am\n     * resource limit for this queue and partition.\n     */\n    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator,\n        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n\n    Resource queueCurrentLimit \u003d Resources.none();\n    // For non-labeled partition, we need to consider the current queue\n    // usage limit.\n    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      synchronized (queueResourceLimitsInfo) {\n        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      }\n    }\n\n    float amResourcePercent \u003d queueCapacities\n        .getMaxAMResourcePercentage(nodePartition);\n\n    // Current usable resource for this queue and partition is the max of\n    // queueCurrentLimit and queuePartitionResource.\n    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n\n    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n        minimumAllocation);\n\n    metrics.setAMResouceLimit(amResouceLimit);\n    queueUsage.setAMLimit(nodePartition, amResouceLimit);\n    return amResouceLimit;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "56e4f6237ae8b1852e82b186e08db3934f79a9db": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3216. Max-AM-Resource-Percentage should respect node labels. (Sunil G via wangda)\n",
      "commitDate": "26/10/15 4:44 PM",
      "commitName": "56e4f6237ae8b1852e82b186e08db3934f79a9db",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3216. Max-AM-Resource-Percentage should respect node labels. (Sunil G via wangda)\n",
          "commitDate": "26/10/15 4:44 PM",
          "commitName": "56e4f6237ae8b1852e82b186e08db3934f79a9db",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "26/10/15 1:07 PM",
          "commitNameOld": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,39 @@\n-  public synchronized Resource getAMResourceLimit() {\n-     /* \n-      * The limit to the amount of resources which can be consumed by\n-      * application masters for applications running in the queue\n-      * is calculated by taking the greater of the max resources currently\n-      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n-      * resources guaranteed for the queue and multiplying it by the am\n-      * resource percent.\n-      *\n-      * This is to allow a queue to grow its (proportional) application \n-      * master resource use up to its max capacity when other queues are \n-      * idle but to scale back down to it\u0027s guaranteed capacity as they \n-      * become busy.\n-      *\n-      */\n-     Resource queueCurrentLimit;\n-     synchronized (queueResourceLimitsInfo) {\n-       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n-     }\n-     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n-       absoluteCapacityResource, queueCurrentLimit);\n-    Resource amResouceLimit \u003d\n-        Resources.multiplyAndNormalizeUp(resourceCalculator, queueCap,\n-            maxAMResourcePerQueuePercent, minimumAllocation);\n+  public synchronized Resource getAMResourceLimitPerPartition(\n+      String nodePartition) {\n+    /*\n+     * For non-labeled partition, get the max value from resources currently\n+     * available to the queue and the absolute resources guaranteed for the\n+     * partition in the queue. For labeled partition, consider only the absolute\n+     * resources guaranteed. Multiply this value (based on labeled/\n+     * non-labeled), * with per-partition am-resource-percent to get the max am\n+     * resource limit for this queue and partition.\n+     */\n+    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n+        resourceCalculator,\n+        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n+        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n+\n+    Resource queueCurrentLimit \u003d Resources.none();\n+    // For non-labeled partition, we need to consider the current queue\n+    // usage limit.\n+    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n+      synchronized (queueResourceLimitsInfo) {\n+        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n+      }\n+    }\n+\n+    float amResourcePercent \u003d queueCapacities\n+        .getMaxAMResourcePercentage(nodePartition);\n+\n+    // Current usable resource for this queue and partition is the max of\n+    // queueCurrentLimit and queuePartitionResource.\n+    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n+        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n+\n+    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n+        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n+        minimumAllocation);\n \n     metrics.setAMResouceLimit(amResouceLimit);\n     return amResouceLimit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Resource getAMResourceLimitPerPartition(\n      String nodePartition) {\n    /*\n     * For non-labeled partition, get the max value from resources currently\n     * available to the queue and the absolute resources guaranteed for the\n     * partition in the queue. For labeled partition, consider only the absolute\n     * resources guaranteed. Multiply this value (based on labeled/\n     * non-labeled), * with per-partition am-resource-percent to get the max am\n     * resource limit for this queue and partition.\n     */\n    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator,\n        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n\n    Resource queueCurrentLimit \u003d Resources.none();\n    // For non-labeled partition, we need to consider the current queue\n    // usage limit.\n    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      synchronized (queueResourceLimitsInfo) {\n        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      }\n    }\n\n    float amResourcePercent \u003d queueCapacities\n        .getMaxAMResourcePercentage(nodePartition);\n\n    // Current usable resource for this queue and partition is the max of\n    // queueCurrentLimit and queuePartitionResource.\n    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n\n    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n        minimumAllocation);\n\n    metrics.setAMResouceLimit(amResouceLimit);\n    return amResouceLimit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "getAMResourceLimit",
            "newValue": "getAMResourceLimitPerPartition"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3216. Max-AM-Resource-Percentage should respect node labels. (Sunil G via wangda)\n",
          "commitDate": "26/10/15 4:44 PM",
          "commitName": "56e4f6237ae8b1852e82b186e08db3934f79a9db",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "26/10/15 1:07 PM",
          "commitNameOld": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,39 @@\n-  public synchronized Resource getAMResourceLimit() {\n-     /* \n-      * The limit to the amount of resources which can be consumed by\n-      * application masters for applications running in the queue\n-      * is calculated by taking the greater of the max resources currently\n-      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n-      * resources guaranteed for the queue and multiplying it by the am\n-      * resource percent.\n-      *\n-      * This is to allow a queue to grow its (proportional) application \n-      * master resource use up to its max capacity when other queues are \n-      * idle but to scale back down to it\u0027s guaranteed capacity as they \n-      * become busy.\n-      *\n-      */\n-     Resource queueCurrentLimit;\n-     synchronized (queueResourceLimitsInfo) {\n-       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n-     }\n-     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n-       absoluteCapacityResource, queueCurrentLimit);\n-    Resource amResouceLimit \u003d\n-        Resources.multiplyAndNormalizeUp(resourceCalculator, queueCap,\n-            maxAMResourcePerQueuePercent, minimumAllocation);\n+  public synchronized Resource getAMResourceLimitPerPartition(\n+      String nodePartition) {\n+    /*\n+     * For non-labeled partition, get the max value from resources currently\n+     * available to the queue and the absolute resources guaranteed for the\n+     * partition in the queue. For labeled partition, consider only the absolute\n+     * resources guaranteed. Multiply this value (based on labeled/\n+     * non-labeled), * with per-partition am-resource-percent to get the max am\n+     * resource limit for this queue and partition.\n+     */\n+    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n+        resourceCalculator,\n+        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n+        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n+\n+    Resource queueCurrentLimit \u003d Resources.none();\n+    // For non-labeled partition, we need to consider the current queue\n+    // usage limit.\n+    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n+      synchronized (queueResourceLimitsInfo) {\n+        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n+      }\n+    }\n+\n+    float amResourcePercent \u003d queueCapacities\n+        .getMaxAMResourcePercentage(nodePartition);\n+\n+    // Current usable resource for this queue and partition is the max of\n+    // queueCurrentLimit and queuePartitionResource.\n+    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n+        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n+\n+    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n+        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n+        minimumAllocation);\n \n     metrics.setAMResouceLimit(amResouceLimit);\n     return amResouceLimit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Resource getAMResourceLimitPerPartition(\n      String nodePartition) {\n    /*\n     * For non-labeled partition, get the max value from resources currently\n     * available to the queue and the absolute resources guaranteed for the\n     * partition in the queue. For labeled partition, consider only the absolute\n     * resources guaranteed. Multiply this value (based on labeled/\n     * non-labeled), * with per-partition am-resource-percent to get the max am\n     * resource limit for this queue and partition.\n     */\n    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator,\n        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n\n    Resource queueCurrentLimit \u003d Resources.none();\n    // For non-labeled partition, we need to consider the current queue\n    // usage limit.\n    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      synchronized (queueResourceLimitsInfo) {\n        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      }\n    }\n\n    float amResourcePercent \u003d queueCapacities\n        .getMaxAMResourcePercentage(nodePartition);\n\n    // Current usable resource for this queue and partition is the max of\n    // queueCurrentLimit and queuePartitionResource.\n    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n\n    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n        minimumAllocation);\n\n    metrics.setAMResouceLimit(amResouceLimit);\n    return amResouceLimit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[nodePartition-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3216. Max-AM-Resource-Percentage should respect node labels. (Sunil G via wangda)\n",
          "commitDate": "26/10/15 4:44 PM",
          "commitName": "56e4f6237ae8b1852e82b186e08db3934f79a9db",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "26/10/15 1:07 PM",
          "commitNameOld": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,39 @@\n-  public synchronized Resource getAMResourceLimit() {\n-     /* \n-      * The limit to the amount of resources which can be consumed by\n-      * application masters for applications running in the queue\n-      * is calculated by taking the greater of the max resources currently\n-      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n-      * resources guaranteed for the queue and multiplying it by the am\n-      * resource percent.\n-      *\n-      * This is to allow a queue to grow its (proportional) application \n-      * master resource use up to its max capacity when other queues are \n-      * idle but to scale back down to it\u0027s guaranteed capacity as they \n-      * become busy.\n-      *\n-      */\n-     Resource queueCurrentLimit;\n-     synchronized (queueResourceLimitsInfo) {\n-       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n-     }\n-     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n-       absoluteCapacityResource, queueCurrentLimit);\n-    Resource amResouceLimit \u003d\n-        Resources.multiplyAndNormalizeUp(resourceCalculator, queueCap,\n-            maxAMResourcePerQueuePercent, minimumAllocation);\n+  public synchronized Resource getAMResourceLimitPerPartition(\n+      String nodePartition) {\n+    /*\n+     * For non-labeled partition, get the max value from resources currently\n+     * available to the queue and the absolute resources guaranteed for the\n+     * partition in the queue. For labeled partition, consider only the absolute\n+     * resources guaranteed. Multiply this value (based on labeled/\n+     * non-labeled), * with per-partition am-resource-percent to get the max am\n+     * resource limit for this queue and partition.\n+     */\n+    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n+        resourceCalculator,\n+        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n+        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n+\n+    Resource queueCurrentLimit \u003d Resources.none();\n+    // For non-labeled partition, we need to consider the current queue\n+    // usage limit.\n+    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n+      synchronized (queueResourceLimitsInfo) {\n+        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n+      }\n+    }\n+\n+    float amResourcePercent \u003d queueCapacities\n+        .getMaxAMResourcePercentage(nodePartition);\n+\n+    // Current usable resource for this queue and partition is the max of\n+    // queueCurrentLimit and queuePartitionResource.\n+    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n+        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n+\n+    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n+        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n+        minimumAllocation);\n \n     metrics.setAMResouceLimit(amResouceLimit);\n     return amResouceLimit;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Resource getAMResourceLimitPerPartition(\n      String nodePartition) {\n    /*\n     * For non-labeled partition, get the max value from resources currently\n     * available to the queue and the absolute resources guaranteed for the\n     * partition in the queue. For labeled partition, consider only the absolute\n     * resources guaranteed. Multiply this value (based on labeled/\n     * non-labeled), * with per-partition am-resource-percent to get the max am\n     * resource limit for this queue and partition.\n     */\n    Resource queuePartitionResource \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator,\n        labelManager.getResourceByLabel(nodePartition, lastClusterResource),\n        queueCapacities.getAbsoluteCapacity(nodePartition), minimumAllocation);\n\n    Resource queueCurrentLimit \u003d Resources.none();\n    // For non-labeled partition, we need to consider the current queue\n    // usage limit.\n    if (nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      synchronized (queueResourceLimitsInfo) {\n        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      }\n    }\n\n    float amResourcePercent \u003d queueCapacities\n        .getMaxAMResourcePercentage(nodePartition);\n\n    // Current usable resource for this queue and partition is the max of\n    // queueCurrentLimit and queuePartitionResource.\n    Resource queuePartitionUsableResource \u003d Resources.max(resourceCalculator,\n        lastClusterResource, queueCurrentLimit, queuePartitionResource);\n\n    Resource amResouceLimit \u003d Resources.multiplyAndNormalizeUp(\n        resourceCalculator, queuePartitionUsableResource, amResourcePercent,\n        minimumAllocation);\n\n    metrics.setAMResouceLimit(amResouceLimit);\n    return amResouceLimit;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "bdd90110e6904b59746812d9a093924a65e72280": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3494. Expose AM resource limit and usage in CS QueueMetrics. Contributed by Rohith Sharmaks\n",
      "commitDate": "21/04/15 8:06 PM",
      "commitName": "bdd90110e6904b59746812d9a093924a65e72280",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/04/15 5:12 PM",
      "commitNameOld": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public synchronized Resource getAMResourceLimit() {\n      /* \n       * The limit to the amount of resources which can be consumed by\n       * application masters for applications running in the queue\n       * is calculated by taking the greater of the max resources currently\n       * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n       * resources guaranteed for the queue and multiplying it by the am\n       * resource percent.\n       *\n       * This is to allow a queue to grow its (proportional) application \n       * master resource use up to its max capacity when other queues are \n       * idle but to scale back down to it\u0027s guaranteed capacity as they \n       * become busy.\n       *\n       */\n      Resource queueCurrentLimit;\n      synchronized (queueResourceLimitsInfo) {\n        queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      }\n      Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n        absoluteCapacityResource, queueCurrentLimit);\n-     return Resources.multiplyAndNormalizeUp( \n-          resourceCalculator,\n-          queueCap, \n-          maxAMResourcePerQueuePercent, minimumAllocation);\n+    Resource amResouceLimit \u003d\n+        Resources.multiplyAndNormalizeUp(resourceCalculator, queueCap,\n+            maxAMResourcePerQueuePercent, minimumAllocation);\n+\n+    metrics.setAMResouceLimit(amResouceLimit);\n+    return amResouceLimit;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Resource getAMResourceLimit() {\n     /* \n      * The limit to the amount of resources which can be consumed by\n      * application masters for applications running in the queue\n      * is calculated by taking the greater of the max resources currently\n      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n      * resources guaranteed for the queue and multiplying it by the am\n      * resource percent.\n      *\n      * This is to allow a queue to grow its (proportional) application \n      * master resource use up to its max capacity when other queues are \n      * idle but to scale back down to it\u0027s guaranteed capacity as they \n      * become busy.\n      *\n      */\n     Resource queueCurrentLimit;\n     synchronized (queueResourceLimitsInfo) {\n       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n     }\n     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n       absoluteCapacityResource, queueCurrentLimit);\n    Resource amResouceLimit \u003d\n        Resources.multiplyAndNormalizeUp(resourceCalculator, queueCap,\n            maxAMResourcePerQueuePercent, minimumAllocation);\n\n    metrics.setAMResouceLimit(amResouceLimit);\n    return amResouceLimit;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "14dd647c556016d351f425ee956ccf800ccb9ce2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
      "commitDate": "02/03/15 5:52 PM",
      "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/02/15 2:58 PM",
      "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.12,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized Resource getAMResourceLimit() {\n      /* \n       * The limit to the amount of resources which can be consumed by\n       * application masters for applications running in the queue\n       * is calculated by taking the greater of the max resources currently\n       * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n       * resources guaranteed for the queue and multiplying it by the am\n       * resource percent.\n       *\n       * This is to allow a queue to grow its (proportional) application \n       * master resource use up to its max capacity when other queues are \n       * idle but to scale back down to it\u0027s guaranteed capacity as they \n       * become busy.\n       *\n       */\n-     Resource queueMaxCap;\n-     synchronized (queueHeadroomInfo) {\n-       queueMaxCap \u003d queueHeadroomInfo.getQueueMaxCap();\n+     Resource queueCurrentLimit;\n+     synchronized (queueResourceLimitsInfo) {\n+       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      }\n      Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n-       absoluteCapacityResource, queueMaxCap);\n+       absoluteCapacityResource, queueCurrentLimit);\n      return Resources.multiplyAndNormalizeUp( \n           resourceCalculator,\n           queueCap, \n           maxAMResourcePerQueuePercent, minimumAllocation);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Resource getAMResourceLimit() {\n     /* \n      * The limit to the amount of resources which can be consumed by\n      * application masters for applications running in the queue\n      * is calculated by taking the greater of the max resources currently\n      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n      * resources guaranteed for the queue and multiplying it by the am\n      * resource percent.\n      *\n      * This is to allow a queue to grow its (proportional) application \n      * master resource use up to its max capacity when other queues are \n      * idle but to scale back down to it\u0027s guaranteed capacity as they \n      * become busy.\n      *\n      */\n     Resource queueCurrentLimit;\n     synchronized (queueResourceLimitsInfo) {\n       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n     }\n     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n       absoluteCapacityResource, queueCurrentLimit);\n     return Resources.multiplyAndNormalizeUp( \n          resourceCalculator,\n          queueCap, \n          maxAMResourcePerQueuePercent, minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "c53420f58364b11fbda1dace7679d45534533382": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2637. Fixed max-am-resource-percent calculation in CapacityScheduler when activating applications. Contributed by Craig Welch\n",
      "commitDate": "13/01/15 5:32 PM",
      "commitName": "c53420f58364b11fbda1dace7679d45534533382",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,26 @@\n+  public synchronized Resource getAMResourceLimit() {\n+     /* \n+      * The limit to the amount of resources which can be consumed by\n+      * application masters for applications running in the queue\n+      * is calculated by taking the greater of the max resources currently\n+      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n+      * resources guaranteed for the queue and multiplying it by the am\n+      * resource percent.\n+      *\n+      * This is to allow a queue to grow its (proportional) application \n+      * master resource use up to its max capacity when other queues are \n+      * idle but to scale back down to it\u0027s guaranteed capacity as they \n+      * become busy.\n+      *\n+      */\n+     Resource queueMaxCap;\n+     synchronized (queueHeadroomInfo) {\n+       queueMaxCap \u003d queueHeadroomInfo.getQueueMaxCap();\n+     }\n+     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n+       absoluteCapacityResource, queueMaxCap);\n+     return Resources.multiplyAndNormalizeUp( \n+          resourceCalculator,\n+          queueCap, \n+          maxAMResourcePerQueuePercent, minimumAllocation);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Resource getAMResourceLimit() {\n     /* \n      * The limit to the amount of resources which can be consumed by\n      * application masters for applications running in the queue\n      * is calculated by taking the greater of the max resources currently\n      * available to the queue (see absoluteMaxAvailCapacity) and the absolute\n      * resources guaranteed for the queue and multiplying it by the am\n      * resource percent.\n      *\n      * This is to allow a queue to grow its (proportional) application \n      * master resource use up to its max capacity when other queues are \n      * idle but to scale back down to it\u0027s guaranteed capacity as they \n      * become busy.\n      *\n      */\n     Resource queueMaxCap;\n     synchronized (queueHeadroomInfo) {\n       queueMaxCap \u003d queueHeadroomInfo.getQueueMaxCap();\n     }\n     Resource queueCap \u003d Resources.max(resourceCalculator, lastClusterResource,\n       absoluteCapacityResource, queueMaxCap);\n     return Resources.multiplyAndNormalizeUp( \n          resourceCalculator,\n          queueCap, \n          maxAMResourcePerQueuePercent, minimumAllocation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}