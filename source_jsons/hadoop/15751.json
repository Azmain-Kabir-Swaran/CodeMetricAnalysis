{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSFileSystem.java",
  "functionName": "createFileStatus",
  "functionId": "createFileStatus___parent-Path__json-JSONObject",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
  "functionStartLine": 1098,
  "functionEndLine": 1132,
  "numCommitsSeen": 51,
  "timeTaken": 2901,
  "changeHistory": [
    "0e560f3b8d194c10dce06443979df4074e14b0db",
    "107c177782a24a16c66113841f2fc5144f56207b",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
    "cba973f036a2c8fcc21a5826b8306247ec154c7b",
    "bb84f1fccb18c6c7373851e05d2451d55e908242",
    "a7bcc9535860214380e235641d1d5d2dd15aee58",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "0e560f3b8d194c10dce06443979df4074e14b0db": "Ybodychange",
    "107c177782a24a16c66113841f2fc5144f56207b": "Ybodychange",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": "Ybodychange",
    "cba973f036a2c8fcc21a5826b8306247ec154c7b": "Ybodychange",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange",
    "a7bcc9535860214380e235641d1d5d2dd15aee58": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e560f3b8d194c10dce06443979df4074e14b0db": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12681. Make HdfsLocatedFileStatus a subtype of LocatedFileStatus\n",
      "commitDate": "29/11/17 8:28 PM",
      "commitName": "0e560f3b8d194c10dce06443979df4074e14b0db",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "11/10/17 12:29 PM",
      "commitNameOld": "8acdf5c2742c081f3e0e96e13eb940a39964a58f",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 49.37,
      "commitsBetweenForRepo": 366,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n   private FileStatus createFileStatus(Path parent, JSONObject json) {\n     String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n     Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n     FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n     long len \u003d (Long) json.get(LENGTH_JSON);\n     String owner \u003d (String) json.get(OWNER_JSON);\n     String group \u003d (String) json.get(GROUP_JSON);\n     final FsPermission permission \u003d toFsPermission(json);\n     long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n     long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n     long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n     short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n \n     final Boolean aclBit \u003d (Boolean) json.get(ACL_BIT_JSON);\n     final Boolean encBit \u003d (Boolean) json.get(ENC_BIT_JSON);\n     final Boolean erasureBit \u003d (Boolean) json.get(EC_BIT_JSON);\n     final Boolean snapshotEnabledBit \u003d (Boolean) json.get(SNAPSHOT_BIT_JSON);\n     final boolean aBit \u003d (aclBit !\u003d null) ? aclBit : false;\n     final boolean eBit \u003d (encBit !\u003d null) ? encBit : false;\n     final boolean ecBit \u003d (erasureBit !\u003d null) ? erasureBit : false;\n     final boolean seBit \u003d\n         (snapshotEnabledBit !\u003d null) ? snapshotEnabledBit : false;\n     if (aBit || eBit || ecBit || seBit) {\n       // include this for compatibility with 2.x\n       FsPermissionExtension deprecatedPerm \u003d\n           new FsPermissionExtension(permission, aBit, eBit, ecBit);\n       FileStatus fileStatus \u003d new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n           replication, blockSize, mTime, aTime, deprecatedPerm, owner, group,\n-          null, path, aBit, eBit, ecBit);\n-      if (seBit) {\n-        fileStatus.setSnapShotEnabledFlag(seBit);\n-      }\n+          null, path, FileStatus.attributes(aBit, eBit, ecBit, seBit));\n       return fileStatus;\n     } else {\n       return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n           replication, blockSize, mTime, aTime, permission, owner, group, path);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    final FsPermission permission \u003d toFsPermission(json);\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n\n    final Boolean aclBit \u003d (Boolean) json.get(ACL_BIT_JSON);\n    final Boolean encBit \u003d (Boolean) json.get(ENC_BIT_JSON);\n    final Boolean erasureBit \u003d (Boolean) json.get(EC_BIT_JSON);\n    final Boolean snapshotEnabledBit \u003d (Boolean) json.get(SNAPSHOT_BIT_JSON);\n    final boolean aBit \u003d (aclBit !\u003d null) ? aclBit : false;\n    final boolean eBit \u003d (encBit !\u003d null) ? encBit : false;\n    final boolean ecBit \u003d (erasureBit !\u003d null) ? erasureBit : false;\n    final boolean seBit \u003d\n        (snapshotEnabledBit !\u003d null) ? snapshotEnabledBit : false;\n    if (aBit || eBit || ecBit || seBit) {\n      // include this for compatibility with 2.x\n      FsPermissionExtension deprecatedPerm \u003d\n          new FsPermissionExtension(permission, aBit, eBit, ecBit);\n      FileStatus fileStatus \u003d new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n          replication, blockSize, mTime, aTime, deprecatedPerm, owner, group,\n          null, path, FileStatus.attributes(aBit, eBit, ecBit, seBit));\n      return fileStatus;\n    } else {\n      return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n          replication, blockSize, mTime, aTime, permission, owner, group, path);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "107c177782a24a16c66113841f2fc5144f56207b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12455. WebHDFS - Adding \"snapshot enabled\" status to ListStatus query result. Contributed by Ajay Kumar.\n",
      "commitDate": "03/10/17 1:02 PM",
      "commitName": "107c177782a24a16c66113841f2fc5144f56207b",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "14/09/17 3:02 PM",
      "commitNameOld": "2f867115a819327a50cf9c8caa56e0e5a85cabb9",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 18.92,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,38 @@\n   private FileStatus createFileStatus(Path parent, JSONObject json) {\n     String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n     Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n     FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n     long len \u003d (Long) json.get(LENGTH_JSON);\n     String owner \u003d (String) json.get(OWNER_JSON);\n     String group \u003d (String) json.get(GROUP_JSON);\n     final FsPermission permission \u003d toFsPermission(json);\n     long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n     long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n     long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n     short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n \n     final Boolean aclBit \u003d (Boolean) json.get(ACL_BIT_JSON);\n     final Boolean encBit \u003d (Boolean) json.get(ENC_BIT_JSON);\n     final Boolean erasureBit \u003d (Boolean) json.get(EC_BIT_JSON);\n+    final Boolean snapshotEnabledBit \u003d (Boolean) json.get(SNAPSHOT_BIT_JSON);\n     final boolean aBit \u003d (aclBit !\u003d null) ? aclBit : false;\n     final boolean eBit \u003d (encBit !\u003d null) ? encBit : false;\n     final boolean ecBit \u003d (erasureBit !\u003d null) ? erasureBit : false;\n-    if (aBit || eBit || ecBit) {\n+    final boolean seBit \u003d\n+        (snapshotEnabledBit !\u003d null) ? snapshotEnabledBit : false;\n+    if (aBit || eBit || ecBit || seBit) {\n       // include this for compatibility with 2.x\n       FsPermissionExtension deprecatedPerm \u003d\n           new FsPermissionExtension(permission, aBit, eBit, ecBit);\n-      return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n+      FileStatus fileStatus \u003d new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n           replication, blockSize, mTime, aTime, deprecatedPerm, owner, group,\n           null, path, aBit, eBit, ecBit);\n+      if (seBit) {\n+        fileStatus.setSnapShotEnabledFlag(seBit);\n+      }\n+      return fileStatus;\n+    } else {\n+      return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n+          replication, blockSize, mTime, aTime, permission, owner, group, path);\n     }\n-    return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n-        replication, blockSize, mTime, aTime, permission, owner, group, path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    final FsPermission permission \u003d toFsPermission(json);\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n\n    final Boolean aclBit \u003d (Boolean) json.get(ACL_BIT_JSON);\n    final Boolean encBit \u003d (Boolean) json.get(ENC_BIT_JSON);\n    final Boolean erasureBit \u003d (Boolean) json.get(EC_BIT_JSON);\n    final Boolean snapshotEnabledBit \u003d (Boolean) json.get(SNAPSHOT_BIT_JSON);\n    final boolean aBit \u003d (aclBit !\u003d null) ? aclBit : false;\n    final boolean eBit \u003d (encBit !\u003d null) ? encBit : false;\n    final boolean ecBit \u003d (erasureBit !\u003d null) ? erasureBit : false;\n    final boolean seBit \u003d\n        (snapshotEnabledBit !\u003d null) ? snapshotEnabledBit : false;\n    if (aBit || eBit || ecBit || seBit) {\n      // include this for compatibility with 2.x\n      FsPermissionExtension deprecatedPerm \u003d\n          new FsPermissionExtension(permission, aBit, eBit, ecBit);\n      FileStatus fileStatus \u003d new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n          replication, blockSize, mTime, aTime, deprecatedPerm, owner, group,\n          null, path, aBit, eBit, ecBit);\n      if (seBit) {\n        fileStatus.setSnapShotEnabledFlag(seBit);\n      }\n      return fileStatus;\n    } else {\n      return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n          replication, blockSize, mTime, aTime, permission, owner, group, path);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6984. Serialize FileStatus via protobuf.\n",
      "commitDate": "02/08/17 12:12 PM",
      "commitName": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "12/07/17 2:15 PM",
      "commitNameOld": "931a49800ef05ee0a6fdc143be1799abb228735d",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private FileStatus createFileStatus(Path parent, JSONObject json) {\n     String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n     Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n     FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n     long len \u003d (Long) json.get(LENGTH_JSON);\n     String owner \u003d (String) json.get(OWNER_JSON);\n     String group \u003d (String) json.get(GROUP_JSON);\n     final FsPermission permission \u003d toFsPermission(json);\n     long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n     long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n     long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n     short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n-    FileStatus fileStatus \u003d null;\n \n-    switch (type) {\n-      case FILE:\n-      case DIRECTORY:\n-        fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n-                                    replication, blockSize, mTime, aTime,\n-                                    permission, owner, group, path);\n-        break;\n-      case SYMLINK:\n-        Path symLink \u003d null;\n-        fileStatus \u003d new FileStatus(len, false,\n-                                    replication, blockSize, mTime, aTime,\n-                                    permission, owner, group, symLink,\n-                                    path);\n+    final Boolean aclBit \u003d (Boolean) json.get(ACL_BIT_JSON);\n+    final Boolean encBit \u003d (Boolean) json.get(ENC_BIT_JSON);\n+    final Boolean erasureBit \u003d (Boolean) json.get(EC_BIT_JSON);\n+    final boolean aBit \u003d (aclBit !\u003d null) ? aclBit : false;\n+    final boolean eBit \u003d (encBit !\u003d null) ? encBit : false;\n+    final boolean ecBit \u003d (erasureBit !\u003d null) ? erasureBit : false;\n+    if (aBit || eBit || ecBit) {\n+      // include this for compatibility with 2.x\n+      FsPermissionExtension deprecatedPerm \u003d\n+          new FsPermissionExtension(permission, aBit, eBit, ecBit);\n+      return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n+          replication, blockSize, mTime, aTime, deprecatedPerm, owner, group,\n+          null, path, aBit, eBit, ecBit);\n     }\n-    return fileStatus;\n+    return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n+        replication, blockSize, mTime, aTime, permission, owner, group, path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    final FsPermission permission \u003d toFsPermission(json);\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n\n    final Boolean aclBit \u003d (Boolean) json.get(ACL_BIT_JSON);\n    final Boolean encBit \u003d (Boolean) json.get(ENC_BIT_JSON);\n    final Boolean erasureBit \u003d (Boolean) json.get(EC_BIT_JSON);\n    final boolean aBit \u003d (aclBit !\u003d null) ? aclBit : false;\n    final boolean eBit \u003d (encBit !\u003d null) ? encBit : false;\n    final boolean ecBit \u003d (erasureBit !\u003d null) ? erasureBit : false;\n    if (aBit || eBit || ecBit) {\n      // include this for compatibility with 2.x\n      FsPermissionExtension deprecatedPerm \u003d\n          new FsPermissionExtension(permission, aBit, eBit, ecBit);\n      return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n          replication, blockSize, mTime, aTime, deprecatedPerm, owner, group,\n          null, path, aBit, eBit, ecBit);\n    }\n    return new FileStatus(len, FILE_TYPE.DIRECTORY \u003d\u003d type,\n        replication, blockSize, mTime, aTime, permission, owner, group, path);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "cba973f036a2c8fcc21a5826b8306247ec154c7b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10832. Propagate ACL bit and isEncrypted bit in HttpFS FileStatus permissions.\n",
      "commitDate": "09/09/16 12:12 PM",
      "commitName": "cba973f036a2c8fcc21a5826b8306247ec154c7b",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "25/04/15 9:41 PM",
      "commitNameOld": "8f3946cd4013eaeaafbaf7d038f3920f74c8457e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 502.6,
      "commitsBetweenForRepo": 3747,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   private FileStatus createFileStatus(Path parent, JSONObject json) {\n     String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n     Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n     FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n     long len \u003d (Long) json.get(LENGTH_JSON);\n     String owner \u003d (String) json.get(OWNER_JSON);\n     String group \u003d (String) json.get(GROUP_JSON);\n-    FsPermission permission \u003d\n-      new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n+    final FsPermission permission \u003d toFsPermission(json);\n     long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n     long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n     long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n     short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n     FileStatus fileStatus \u003d null;\n \n     switch (type) {\n       case FILE:\n       case DIRECTORY:\n         fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n                                     replication, blockSize, mTime, aTime,\n                                     permission, owner, group, path);\n         break;\n       case SYMLINK:\n         Path symLink \u003d null;\n         fileStatus \u003d new FileStatus(len, false,\n                                     replication, blockSize, mTime, aTime,\n                                     permission, owner, group, symLink,\n                                     path);\n     }\n     return fileStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    final FsPermission permission \u003d toFsPermission(json);\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n    FileStatus fileStatus \u003d null;\n\n    switch (type) {\n      case FILE:\n      case DIRECTORY:\n        fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n                                    replication, blockSize, mTime, aTime,\n                                    permission, owner, group, path);\n        break;\n      case SYMLINK:\n        Path symLink \u003d null;\n        fileStatus \u003d new FileStatus(len, false,\n                                    replication, blockSize, mTime, aTime,\n                                    permission, owner, group, symLink,\n                                    path);\n    }\n    return fileStatus;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "05/09/14 9:36 PM",
      "commitNameOld": "339d21f273a7c32be989c2cc2b3b1f0dd8a2ec0f",
      "commitAuthorOld": "",
      "daysBetweenCommits": 24.04,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   private FileStatus createFileStatus(Path parent, JSONObject json) {\n     String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n     Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n     FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n     long len \u003d (Long) json.get(LENGTH_JSON);\n     String owner \u003d (String) json.get(OWNER_JSON);\n     String group \u003d (String) json.get(GROUP_JSON);\n     FsPermission permission \u003d\n       new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n     long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n     long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n     long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n     short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n-    boolean isLazyPersist \u003d ((Boolean) json.get(LAZY_PERSIST_JSON)).booleanValue();\n     FileStatus fileStatus \u003d null;\n \n     switch (type) {\n       case FILE:\n       case DIRECTORY:\n         fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n-                                    replication, blockSize, false, mTime, aTime,\n-                                    permission, owner, group, null, path);\n+                                    replication, blockSize, mTime, aTime,\n+                                    permission, owner, group, path);\n         break;\n       case SYMLINK:\n         Path symLink \u003d null;\n         fileStatus \u003d new FileStatus(len, false,\n-                                    replication, blockSize, isLazyPersist, mTime, aTime,\n+                                    replication, blockSize, mTime, aTime,\n                                     permission, owner, group, symLink,\n                                     path);\n     }\n     return fileStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    FsPermission permission \u003d\n      new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n    FileStatus fileStatus \u003d null;\n\n    switch (type) {\n      case FILE:\n      case DIRECTORY:\n        fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n                                    replication, blockSize, mTime, aTime,\n                                    permission, owner, group, path);\n        break;\n      case SYMLINK:\n        Path symLink \u003d null;\n        fileStatus \u003d new FileStatus(len, false,\n                                    replication, blockSize, mTime, aTime,\n                                    permission, owner, group, symLink,\n                                    path);\n    }\n    return fileStatus;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "a7bcc9535860214380e235641d1d5d2dd15aee58": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6921. Add LazyPersist flag to FileStatus. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "a7bcc9535860214380e235641d1d5d2dd15aee58",
      "commitAuthor": "arp",
      "commitDateOld": "07/08/14 9:58 PM",
      "commitNameOld": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 19.99,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private FileStatus createFileStatus(Path parent, JSONObject json) {\n     String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n     Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n     FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n     long len \u003d (Long) json.get(LENGTH_JSON);\n     String owner \u003d (String) json.get(OWNER_JSON);\n     String group \u003d (String) json.get(GROUP_JSON);\n     FsPermission permission \u003d\n       new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n     long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n     long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n     long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n     short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n+    boolean isLazyPersist \u003d ((Boolean) json.get(LAZY_PERSIST_JSON)).booleanValue();\n     FileStatus fileStatus \u003d null;\n \n     switch (type) {\n       case FILE:\n       case DIRECTORY:\n         fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n-                                    replication, blockSize, mTime, aTime,\n-                                    permission, owner, group, path);\n+                                    replication, blockSize, false, mTime, aTime,\n+                                    permission, owner, group, null, path);\n         break;\n       case SYMLINK:\n         Path symLink \u003d null;\n         fileStatus \u003d new FileStatus(len, false,\n-                                    replication, blockSize, mTime, aTime,\n+                                    replication, blockSize, isLazyPersist, mTime, aTime,\n                                     permission, owner, group, symLink,\n                                     path);\n     }\n     return fileStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    FsPermission permission \u003d\n      new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n    boolean isLazyPersist \u003d ((Boolean) json.get(LAZY_PERSIST_JSON)).booleanValue();\n    FileStatus fileStatus \u003d null;\n\n    switch (type) {\n      case FILE:\n      case DIRECTORY:\n        fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n                                    replication, blockSize, false, mTime, aTime,\n                                    permission, owner, group, null, path);\n        break;\n      case SYMLINK:\n        Path symLink \u003d null;\n        fileStatus \u003d new FileStatus(len, false,\n                                    replication, blockSize, isLazyPersist, mTime, aTime,\n                                    permission, owner, group, symLink,\n                                    path);\n    }\n    return fileStatus;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,31 @@\n+  private FileStatus createFileStatus(Path parent, JSONObject json) {\n+    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n+    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n+    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n+    long len \u003d (Long) json.get(LENGTH_JSON);\n+    String owner \u003d (String) json.get(OWNER_JSON);\n+    String group \u003d (String) json.get(GROUP_JSON);\n+    FsPermission permission \u003d\n+      new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n+    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n+    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n+    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n+    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n+    FileStatus fileStatus \u003d null;\n+\n+    switch (type) {\n+      case FILE:\n+      case DIRECTORY:\n+        fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n+                                    replication, blockSize, mTime, aTime,\n+                                    permission, owner, group, path);\n+        break;\n+      case SYMLINK:\n+        Path symLink \u003d null;\n+        fileStatus \u003d new FileStatus(len, false,\n+                                    replication, blockSize, mTime, aTime,\n+                                    permission, owner, group, symLink,\n+                                    path);\n+    }\n+    return fileStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus createFileStatus(Path parent, JSONObject json) {\n    String pathSuffix \u003d (String) json.get(PATH_SUFFIX_JSON);\n    Path path \u003d (pathSuffix.equals(\"\")) ? parent : new Path(parent, pathSuffix);\n    FILE_TYPE type \u003d FILE_TYPE.valueOf((String) json.get(TYPE_JSON));\n    long len \u003d (Long) json.get(LENGTH_JSON);\n    String owner \u003d (String) json.get(OWNER_JSON);\n    String group \u003d (String) json.get(GROUP_JSON);\n    FsPermission permission \u003d\n      new FsPermission(Short.parseShort((String) json.get(PERMISSION_JSON), 8));\n    long aTime \u003d (Long) json.get(ACCESS_TIME_JSON);\n    long mTime \u003d (Long) json.get(MODIFICATION_TIME_JSON);\n    long blockSize \u003d (Long) json.get(BLOCK_SIZE_JSON);\n    short replication \u003d ((Long) json.get(REPLICATION_JSON)).shortValue();\n    FileStatus fileStatus \u003d null;\n\n    switch (type) {\n      case FILE:\n      case DIRECTORY:\n        fileStatus \u003d new FileStatus(len, (type \u003d\u003d FILE_TYPE.DIRECTORY),\n                                    replication, blockSize, mTime, aTime,\n                                    permission, owner, group, path);\n        break;\n      case SYMLINK:\n        Path symLink \u003d null;\n        fileStatus \u003d new FileStatus(len, false,\n                                    replication, blockSize, mTime, aTime,\n                                    permission, owner, group, symLink,\n                                    path);\n    }\n    return fileStatus;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/client/HttpFSFileSystem.java"
    }
  }
}