{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ValueAggregatorJob.java",
  "functionName": "createValueAggregatorJob",
  "functionId": "createValueAggregatorJob___conf-Configuration__args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java",
  "functionStartLine": 119,
  "functionEndLine": 188,
  "numCommitsSeen": 5,
  "timeTaken": 4543,
  "changeHistory": [
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5800. Use Job#getInstance instead of deprecated constructors. (aajisaka)\n",
      "commitDate": "03/02/15 2:30 PM",
      "commitName": "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1258.93,
      "commitsBetweenForRepo": 8487,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public static Job createValueAggregatorJob(Configuration conf, String args[])\n       throws IOException {\n \n     GenericOptionsParser genericParser \n       \u003d new GenericOptionsParser(conf, args);\n     args \u003d genericParser.getRemainingArgs();\n     \n     if (args.length \u003c 2) {\n       System.out.println(\"usage: inputDirs outDir \"\n           + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n       GenericOptionsParser.printGenericCommandUsage(System.out);\n       System.exit(2);\n     }\n     String inputDir \u003d args[0];\n     String outputDir \u003d args[1];\n     int numOfReducers \u003d 1;\n     if (args.length \u003e 2) {\n       numOfReducers \u003d Integer.parseInt(args[2]);\n     }\n \n     Class\u003c? extends InputFormat\u003e theInputFormat \u003d null;\n     if (args.length \u003e 3 \u0026\u0026 \n         args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n       theInputFormat \u003d TextInputFormat.class;\n     } else {\n       theInputFormat \u003d SequenceFileInputFormat.class;\n     }\n \n     Path specFile \u003d null;\n \n     if (args.length \u003e 4) {\n       specFile \u003d new Path(args[4]);\n     }\n \n     String jobName \u003d \"\";\n     \n     if (args.length \u003e 5) {\n       jobName \u003d args[5];\n     }\n \n     if (specFile !\u003d null) {\n       conf.addResource(specFile);\n     }\n     String userJarFile \u003d conf.get(ValueAggregatorJobBase.USER_JAR);\n     if (userJarFile !\u003d null) {\n       conf.set(MRJobConfig.JAR, userJarFile);\n     }\n \n-    Job theJob \u003d new Job(conf);\n+    Job theJob \u003d Job.getInstance(conf);\n     if (userJarFile \u003d\u003d null) {\n       theJob.setJarByClass(ValueAggregator.class);\n     } \n     theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n \n     FileInputFormat.addInputPaths(theJob, inputDir);\n \n     theJob.setInputFormatClass(theInputFormat);\n     \n     theJob.setMapperClass(ValueAggregatorMapper.class);\n     FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n     theJob.setOutputFormatClass(TextOutputFormat.class);\n     theJob.setMapOutputKeyClass(Text.class);\n     theJob.setMapOutputValueClass(Text.class);\n     theJob.setOutputKeyClass(Text.class);\n     theJob.setOutputValueClass(Text.class);\n     theJob.setReducerClass(ValueAggregatorReducer.class);\n     theJob.setCombinerClass(ValueAggregatorCombiner.class);\n     theJob.setNumReduceTasks(numOfReducers);\n     return theJob;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Job createValueAggregatorJob(Configuration conf, String args[])\n      throws IOException {\n\n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(2);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d null;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n\n    if (specFile !\u003d null) {\n      conf.addResource(specFile);\n    }\n    String userJarFile \u003d conf.get(ValueAggregatorJobBase.USER_JAR);\n    if (userJarFile !\u003d null) {\n      conf.set(MRJobConfig.JAR, userJarFile);\n    }\n\n    Job theJob \u003d Job.getInstance(conf);\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } \n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormatClass(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormatClass(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Job createValueAggregatorJob(Configuration conf, String args[])\n      throws IOException {\n\n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(2);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d null;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n\n    if (specFile !\u003d null) {\n      conf.addResource(specFile);\n    }\n    String userJarFile \u003d conf.get(ValueAggregatorJobBase.USER_JAR);\n    if (userJarFile !\u003d null) {\n      conf.set(MRJobConfig.JAR, userJarFile);\n    }\n\n    Job theJob \u003d new Job(conf);\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } \n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormatClass(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormatClass(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Job createValueAggregatorJob(Configuration conf, String args[])\n      throws IOException {\n\n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(2);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d null;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n\n    if (specFile !\u003d null) {\n      conf.addResource(specFile);\n    }\n    String userJarFile \u003d conf.get(ValueAggregatorJobBase.USER_JAR);\n    if (userJarFile !\u003d null) {\n      conf.set(MRJobConfig.JAR, userJarFile);\n    }\n\n    Job theJob \u003d new Job(conf);\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } \n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormatClass(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormatClass(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,70 @@\n+  public static Job createValueAggregatorJob(Configuration conf, String args[])\n+      throws IOException {\n+\n+    GenericOptionsParser genericParser \n+      \u003d new GenericOptionsParser(conf, args);\n+    args \u003d genericParser.getRemainingArgs();\n+    \n+    if (args.length \u003c 2) {\n+      System.out.println(\"usage: inputDirs outDir \"\n+          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n+      GenericOptionsParser.printGenericCommandUsage(System.out);\n+      System.exit(2);\n+    }\n+    String inputDir \u003d args[0];\n+    String outputDir \u003d args[1];\n+    int numOfReducers \u003d 1;\n+    if (args.length \u003e 2) {\n+      numOfReducers \u003d Integer.parseInt(args[2]);\n+    }\n+\n+    Class\u003c? extends InputFormat\u003e theInputFormat \u003d null;\n+    if (args.length \u003e 3 \u0026\u0026 \n+        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n+      theInputFormat \u003d TextInputFormat.class;\n+    } else {\n+      theInputFormat \u003d SequenceFileInputFormat.class;\n+    }\n+\n+    Path specFile \u003d null;\n+\n+    if (args.length \u003e 4) {\n+      specFile \u003d new Path(args[4]);\n+    }\n+\n+    String jobName \u003d \"\";\n+    \n+    if (args.length \u003e 5) {\n+      jobName \u003d args[5];\n+    }\n+\n+    if (specFile !\u003d null) {\n+      conf.addResource(specFile);\n+    }\n+    String userJarFile \u003d conf.get(ValueAggregatorJobBase.USER_JAR);\n+    if (userJarFile !\u003d null) {\n+      conf.set(MRJobConfig.JAR, userJarFile);\n+    }\n+\n+    Job theJob \u003d new Job(conf);\n+    if (userJarFile \u003d\u003d null) {\n+      theJob.setJarByClass(ValueAggregator.class);\n+    } \n+    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n+\n+    FileInputFormat.addInputPaths(theJob, inputDir);\n+\n+    theJob.setInputFormatClass(theInputFormat);\n+    \n+    theJob.setMapperClass(ValueAggregatorMapper.class);\n+    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n+    theJob.setOutputFormatClass(TextOutputFormat.class);\n+    theJob.setMapOutputKeyClass(Text.class);\n+    theJob.setMapOutputValueClass(Text.class);\n+    theJob.setOutputKeyClass(Text.class);\n+    theJob.setOutputValueClass(Text.class);\n+    theJob.setReducerClass(ValueAggregatorReducer.class);\n+    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n+    theJob.setNumReduceTasks(numOfReducers);\n+    return theJob;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Job createValueAggregatorJob(Configuration conf, String args[])\n      throws IOException {\n\n    GenericOptionsParser genericParser \n      \u003d new GenericOptionsParser(conf, args);\n    args \u003d genericParser.getRemainingArgs();\n    \n    if (args.length \u003c 2) {\n      System.out.println(\"usage: inputDirs outDir \"\n          + \"[numOfReducer [textinputformat|seq [specfile [jobName]]]]\");\n      GenericOptionsParser.printGenericCommandUsage(System.out);\n      System.exit(2);\n    }\n    String inputDir \u003d args[0];\n    String outputDir \u003d args[1];\n    int numOfReducers \u003d 1;\n    if (args.length \u003e 2) {\n      numOfReducers \u003d Integer.parseInt(args[2]);\n    }\n\n    Class\u003c? extends InputFormat\u003e theInputFormat \u003d null;\n    if (args.length \u003e 3 \u0026\u0026 \n        args[3].compareToIgnoreCase(\"textinputformat\") \u003d\u003d 0) {\n      theInputFormat \u003d TextInputFormat.class;\n    } else {\n      theInputFormat \u003d SequenceFileInputFormat.class;\n    }\n\n    Path specFile \u003d null;\n\n    if (args.length \u003e 4) {\n      specFile \u003d new Path(args[4]);\n    }\n\n    String jobName \u003d \"\";\n    \n    if (args.length \u003e 5) {\n      jobName \u003d args[5];\n    }\n\n    if (specFile !\u003d null) {\n      conf.addResource(specFile);\n    }\n    String userJarFile \u003d conf.get(ValueAggregatorJobBase.USER_JAR);\n    if (userJarFile !\u003d null) {\n      conf.set(MRJobConfig.JAR, userJarFile);\n    }\n\n    Job theJob \u003d new Job(conf);\n    if (userJarFile \u003d\u003d null) {\n      theJob.setJarByClass(ValueAggregator.class);\n    } \n    theJob.setJobName(\"ValueAggregatorJob: \" + jobName);\n\n    FileInputFormat.addInputPaths(theJob, inputDir);\n\n    theJob.setInputFormatClass(theInputFormat);\n    \n    theJob.setMapperClass(ValueAggregatorMapper.class);\n    FileOutputFormat.setOutputPath(theJob, new Path(outputDir));\n    theJob.setOutputFormatClass(TextOutputFormat.class);\n    theJob.setMapOutputKeyClass(Text.class);\n    theJob.setMapOutputValueClass(Text.class);\n    theJob.setOutputKeyClass(Text.class);\n    theJob.setOutputValueClass(Text.class);\n    theJob.setReducerClass(ValueAggregatorReducer.class);\n    theJob.setCombinerClass(ValueAggregatorCombiner.class);\n    theJob.setNumReduceTasks(numOfReducers);\n    return theJob;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/aggregate/ValueAggregatorJob.java"
    }
  }
}