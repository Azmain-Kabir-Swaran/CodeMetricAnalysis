{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "reserve",
  "functionId": "reserve___node-SchedulerNode__schedulerKey-SchedulerRequestKey__rmContainer-RMContainer__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 583,
  "functionEndLine": 619,
  "numCommitsSeen": 186,
  "timeTaken": 15164,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "6772d07fdc0ad7d0cd1be851bf83ae0208abd391",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ymovefromfile",
    "6772d07fdc0ad7d0cd1be851bf83ae0208abd391": "Ymultichange(Ymovefromfile,Yparameterchange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yrename,Yparameterchange)",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "24/09/19 1:51 PM",
      "commitNameOld": "c2731d4b6399f88f76341ed697e80652ed1b61ea",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 182.6,
      "commitsBetweenForRepo": 717,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,37 @@\n   public RMContainer reserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Container container) {\n     writeLock.lock();\n     try {\n       // Create RMContainer if necessary\n       if (rmContainer \u003d\u003d null) {\n         rmContainer \u003d new RMContainerImpl(container, schedulerKey,\n             getApplicationAttemptId(), node.getNodeID(),\n             appSchedulingInfo.getUser(), rmContext);\n       }\n       if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n         attemptResourceUsage.incReserved(node.getPartition(),\n             container.getResource());\n-        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n+\n+        ResourceScheduler scheduler \u003d this.rmContext.getScheduler();\n+        String qn \u003d this.getQueueName();\n+        if (scheduler instanceof CapacityScheduler) {\n+          qn \u003d ((CapacityScheduler)scheduler).normalizeQueueName(qn);\n+        }\n+        ((RMContainerImpl) rmContainer).setQueueName(qn);\n \n         // Reset the re-reservation count\n         resetReReservations(schedulerKey);\n       } else{\n         // Note down the re-reservation\n         addReReservation(schedulerKey);\n       }\n \n       commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    writeLock.lock();\n    try {\n      // Create RMContainer if necessary\n      if (rmContainer \u003d\u003d null) {\n        rmContainer \u003d new RMContainerImpl(container, schedulerKey,\n            getApplicationAttemptId(), node.getNodeID(),\n            appSchedulingInfo.getUser(), rmContext);\n      }\n      if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n        attemptResourceUsage.incReserved(node.getPartition(),\n            container.getResource());\n\n        ResourceScheduler scheduler \u003d this.rmContext.getScheduler();\n        String qn \u003d this.getQueueName();\n        if (scheduler instanceof CapacityScheduler) {\n          qn \u003d ((CapacityScheduler)scheduler).normalizeQueueName(qn);\n        }\n        ((RMContainerImpl) rmContainer).setQueueName(qn);\n\n        // Reset the re-reservation count\n        resetReReservations(schedulerKey);\n      } else{\n        // Note down the re-reservation\n        addReReservation(schedulerKey);\n      }\n\n      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public RMContainer reserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Container container) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       // Create RMContainer if necessary\n       if (rmContainer \u003d\u003d null) {\n         rmContainer \u003d new RMContainerImpl(container, schedulerKey,\n             getApplicationAttemptId(), node.getNodeID(),\n             appSchedulingInfo.getUser(), rmContext);\n       }\n       if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n         attemptResourceUsage.incReserved(node.getPartition(),\n             container.getResource());\n         ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n         // Reset the re-reservation count\n         resetReReservations(schedulerKey);\n       } else{\n         // Note down the re-reservation\n         addReReservation(schedulerKey);\n       }\n \n       commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    writeLock.lock();\n    try {\n      // Create RMContainer if necessary\n      if (rmContainer \u003d\u003d null) {\n        rmContainer \u003d new RMContainerImpl(container, schedulerKey,\n            getApplicationAttemptId(), node.getNodeID(),\n            appSchedulingInfo.getUser(), rmContext);\n      }\n      if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n        attemptResourceUsage.incReserved(node.getPartition(),\n            container.getResource());\n        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n        // Reset the re-reservation count\n        resetReReservations(schedulerKey);\n      } else{\n        // Note down the re-reservation\n        addReReservation(schedulerKey);\n      }\n\n      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public RMContainer reserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Container container) {\n     try {\n       writeLock.lock();\n       // Create RMContainer if necessary\n       if (rmContainer \u003d\u003d null) {\n-        rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n-            node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n+        rmContainer \u003d new RMContainerImpl(container, schedulerKey,\n+            getApplicationAttemptId(), node.getNodeID(),\n+            appSchedulingInfo.getUser(), rmContext);\n       }\n       if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n         attemptResourceUsage.incReserved(node.getPartition(),\n             container.getResource());\n         ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n         // Reset the re-reservation count\n         resetReReservations(schedulerKey);\n       } else{\n         // Note down the re-reservation\n         addReReservation(schedulerKey);\n       }\n \n       commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    try {\n      writeLock.lock();\n      // Create RMContainer if necessary\n      if (rmContainer \u003d\u003d null) {\n        rmContainer \u003d new RMContainerImpl(container, schedulerKey,\n            getApplicationAttemptId(), node.getNodeID(),\n            appSchedulingInfo.getUser(), rmContext);\n      }\n      if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n        attemptResourceUsage.incReserved(node.getPartition(),\n            container.getResource());\n        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n        // Reset the re-reservation count\n        resetReReservations(schedulerKey);\n      } else{\n        // Note down the re-reservation\n        addReReservation(schedulerKey);\n      }\n\n      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/10/16 5:23 PM",
      "commitNameOld": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 33.74,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public RMContainer reserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Container container) {\n     try {\n       writeLock.lock();\n       // Create RMContainer if necessary\n       if (rmContainer \u003d\u003d null) {\n         rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n             node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n+      }\n+      if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n         attemptResourceUsage.incReserved(node.getPartition(),\n             container.getResource());\n         ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n         // Reset the re-reservation count\n         resetReReservations(schedulerKey);\n       } else{\n         // Note down the re-reservation\n         addReReservation(schedulerKey);\n       }\n \n       commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    try {\n      writeLock.lock();\n      // Create RMContainer if necessary\n      if (rmContainer \u003d\u003d null) {\n        rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n            node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n      }\n      if (rmContainer.getState() \u003d\u003d RMContainerState.NEW) {\n        attemptResourceUsage.incReserved(node.getPartition(),\n            container.getResource());\n        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n        // Reset the re-reservation count\n        resetReReservations(schedulerKey);\n      } else{\n        // Note down the re-reservation\n        addReReservation(schedulerKey);\n      }\n\n      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  public synchronized RMContainer reserve(SchedulerNode node,\n+  public RMContainer reserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Container container) {\n-    // Create RMContainer if necessary\n-    if (rmContainer \u003d\u003d null) {\n-      rmContainer \u003d\n-          new RMContainerImpl(container, getApplicationAttemptId(),\n-              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n-      attemptResourceUsage.incReserved(node.getPartition(),\n-          container.getResource());\n-      ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n+    try {\n+      writeLock.lock();\n+      // Create RMContainer if necessary\n+      if (rmContainer \u003d\u003d null) {\n+        rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n+            node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n+        attemptResourceUsage.incReserved(node.getPartition(),\n+            container.getResource());\n+        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n-      // Reset the re-reservation count\n-      resetReReservations(schedulerKey);\n-    } else {\n-      // Note down the re-reservation\n-      addReReservation(schedulerKey);\n+        // Reset the re-reservation count\n+        resetReReservations(schedulerKey);\n+      } else{\n+        // Note down the re-reservation\n+        addReReservation(schedulerKey);\n+      }\n+\n+      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n+\n+      return rmContainer;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    \n-    commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n-    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    try {\n      writeLock.lock();\n      // Create RMContainer if necessary\n      if (rmContainer \u003d\u003d null) {\n        rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n            node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n        attemptResourceUsage.incReserved(node.getPartition(),\n            container.getResource());\n        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n        // Reset the re-reservation count\n        resetReReservations(schedulerKey);\n      } else{\n        // Note down the re-reservation\n        addReReservation(schedulerKey);\n      }\n\n      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  public synchronized RMContainer reserve(SchedulerNode node,\n+  public RMContainer reserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Container container) {\n-    // Create RMContainer if necessary\n-    if (rmContainer \u003d\u003d null) {\n-      rmContainer \u003d\n-          new RMContainerImpl(container, getApplicationAttemptId(),\n-              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n-      attemptResourceUsage.incReserved(node.getPartition(),\n-          container.getResource());\n-      ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n+    try {\n+      writeLock.lock();\n+      // Create RMContainer if necessary\n+      if (rmContainer \u003d\u003d null) {\n+        rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n+            node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n+        attemptResourceUsage.incReserved(node.getPartition(),\n+            container.getResource());\n+        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n-      // Reset the re-reservation count\n-      resetReReservations(schedulerKey);\n-    } else {\n-      // Note down the re-reservation\n-      addReReservation(schedulerKey);\n+        // Reset the re-reservation count\n+        resetReReservations(schedulerKey);\n+      } else{\n+        // Note down the re-reservation\n+        addReReservation(schedulerKey);\n+      }\n+\n+      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n+\n+      return rmContainer;\n+    } finally {\n+      writeLock.unlock();\n     }\n-    \n-    commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n-    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    try {\n      writeLock.lock();\n      // Create RMContainer if necessary\n      if (rmContainer \u003d\u003d null) {\n        rmContainer \u003d new RMContainerImpl(container, getApplicationAttemptId(),\n            node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n        attemptResourceUsage.incReserved(node.getPartition(),\n            container.getResource());\n        ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n        // Reset the re-reservation count\n        resetReReservations(schedulerKey);\n      } else{\n        // Note down the re-reservation\n        addReReservation(schedulerKey);\n      }\n\n      commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,23 @@\n   public synchronized RMContainer reserve(SchedulerNode node,\n-      Priority priority, RMContainer rmContainer, Container container) {\n+      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n+      Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d\n           new RMContainerImpl(container, getApplicationAttemptId(),\n               node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n       attemptResourceUsage.incReserved(node.getPartition(),\n           container.getResource());\n       ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n \n       // Reset the re-reservation count\n-      resetReReservations(priority);\n+      resetReReservations(schedulerKey);\n     } else {\n       // Note down the re-reservation\n-      addReReservation(priority);\n+      addReReservation(schedulerKey);\n     }\n     \n-    commonReserve(node, priority, rmContainer, container.getResource());\n+    commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d\n          new RMContainerImpl(container, getApplicationAttemptId(),\n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n      attemptResourceUsage.incReserved(node.getPartition(),\n          container.getResource());\n      ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n\n      // Reset the re-reservation count\n      resetReReservations(schedulerKey);\n    } else {\n      // Note down the re-reservation\n      addReReservation(schedulerKey);\n    }\n    \n    commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n    return rmContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[node-SchedulerNode, priority-Priority, rmContainer-RMContainer, container-Container]",
            "newValue": "[node-SchedulerNode, schedulerKey-SchedulerRequestKey, rmContainer-RMContainer, container-Container]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,23 @@\n   public synchronized RMContainer reserve(SchedulerNode node,\n-      Priority priority, RMContainer rmContainer, Container container) {\n+      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n+      Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d\n           new RMContainerImpl(container, getApplicationAttemptId(),\n               node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n       attemptResourceUsage.incReserved(node.getPartition(),\n           container.getResource());\n       ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n \n       // Reset the re-reservation count\n-      resetReReservations(priority);\n+      resetReReservations(schedulerKey);\n     } else {\n       // Note down the re-reservation\n-      addReReservation(priority);\n+      addReReservation(schedulerKey);\n     }\n     \n-    commonReserve(node, priority, rmContainer, container.getResource());\n+    commonReserve(node, schedulerKey, rmContainer, container.getResource());\n \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d\n          new RMContainerImpl(container, getApplicationAttemptId(),\n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n      attemptResourceUsage.incReserved(node.getPartition(),\n          container.getResource());\n      ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n\n      // Reset the re-reservation count\n      resetReReservations(schedulerKey);\n    } else {\n      // Note down the re-reservation\n      addReReservation(schedulerKey);\n    }\n    \n    commonReserve(node, schedulerKey, rmContainer, container.getResource());\n\n    return rmContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/02/16 6:33 PM",
      "commitNameOld": "c684f2b007a4808dafbe1c1d3ce01758e281d329",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 70.72,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   public synchronized RMContainer reserve(SchedulerNode node,\n       Priority priority, RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d\n           new RMContainerImpl(container, getApplicationAttemptId(),\n               node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n       attemptResourceUsage.incReserved(node.getPartition(),\n           container.getResource());\n+      ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n \n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n     \n     commonReserve(node, priority, rmContainer, container.getResource());\n \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node,\n      Priority priority, RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d\n          new RMContainerImpl(container, getApplicationAttemptId(),\n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n      attemptResourceUsage.incReserved(node.getPartition(),\n          container.getResource());\n      ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());\n\n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    \n    commonReserve(node, priority, rmContainer, container.getResource());\n\n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.85,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,21 @@\n-  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n-      RMContainer rmContainer, Container container) {\n+  public synchronized RMContainer reserve(SchedulerNode node,\n+      Priority priority, RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n-      rmContainer \u003d \n-          new RMContainerImpl(container, getApplicationAttemptId(), \n+      rmContainer \u003d\n+          new RMContainerImpl(container, getApplicationAttemptId(),\n               node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n       attemptResourceUsage.incReserved(node.getPartition(),\n           container.getResource());\n-      \n+\n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n-    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n-        container.getResource(), node.getNodeID(), priority));\n     \n-    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(priority);\n-    if (reservedContainers \u003d\u003d null) {\n-      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n-      this.reservedContainers.put(priority, reservedContainers);\n-    }\n-    reservedContainers.put(node.getNodeID(), rmContainer);\n-\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n-          + \" reserved container \" + rmContainer + \" on node \" + node\n-          + \". This attempt currently has \" + reservedContainers.size()\n-          + \" reserved containers at priority \" + priority\n-          + \"; currentReservation \" + container.getResource());\n-    }\n+    commonReserve(node, priority, rmContainer, container.getResource());\n \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node,\n      Priority priority, RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d\n          new RMContainerImpl(container, getApplicationAttemptId(),\n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n      attemptResourceUsage.incReserved(node.getPartition(),\n          container.getResource());\n\n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    \n    commonReserve(node, priority, rmContainer, container.getResource());\n\n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 9:30 PM",
      "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n       RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d \n           new RMContainerImpl(container, getApplicationAttemptId(), \n               node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n-        \n-      Resources.addTo(currentReservation, container.getResource());\n+      attemptResourceUsage.incReserved(node.getPartition(),\n+          container.getResource());\n       \n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n     rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n         container.getResource(), node.getNodeID(), priority));\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(priority);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n       this.reservedContainers.put(priority, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n           + \" reserved container \" + rmContainer + \" on node \" + node\n           + \". This attempt currently has \" + reservedContainers.size()\n           + \" reserved containers at priority \" + priority\n-          + \"; currentReservation \" + currentReservation.getMemory());\n+          + \"; currentReservation \" + container.getResource());\n     }\n \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n      attemptResourceUsage.incReserved(node.getPartition(),\n          container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n          + \" reserved container \" + rmContainer + \" on node \" + node\n          + \". This attempt currently has \" + reservedContainers.size()\n          + \" reserved containers at priority \" + priority\n          + \"; currentReservation \" + container.getResource());\n    }\n\n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1892. Improved some logs in the scheduler. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587717 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/14 1:37 PM",
      "commitName": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "26/02/14 12:20 PM",
      "commitNameOld": "0fbc7fe816007b4e330604e9f8bae6b1e4b448bc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 48.01,
      "commitsBetweenForRepo": 374,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n       RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d \n           new RMContainerImpl(container, getApplicationAttemptId(), \n               node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n         \n       Resources.addTo(currentReservation, container.getResource());\n       \n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n     rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n         container.getResource(), node.getNodeID(), priority));\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(priority);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n       this.reservedContainers.put(priority, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n-    \n-    LOG.info(\"Application \" + getApplicationId() \n-        + \" reserved container \" + rmContainer\n-        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n-        + \" at priority \" + priority \n-        + \"; currentReservation \" + currentReservation.getMemory());\n-    \n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n+          + \" reserved container \" + rmContainer + \" on node \" + node\n+          + \". This attempt currently has \" + reservedContainers.size()\n+          + \" reserved containers at priority \" + priority\n+          + \"; currentReservation \" + currentReservation.getMemory());\n+    }\n+\n     return rmContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n          + \" reserved container \" + rmContainer + \" on node \" + node\n          + \". This attempt currently has \" + reservedContainers.size()\n          + \" reserved containers at priority \" + priority\n          + \"; currentReservation \" + currentReservation.getMemory());\n    }\n\n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/01/14 7:04 AM",
      "commitNameOld": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.57,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n       RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d \n           new RMContainerImpl(container, getApplicationAttemptId(), \n-              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n-              rmContext.getContainerAllocationExpirer());\n+              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n         \n       Resources.addTo(currentReservation, container.getResource());\n       \n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n     rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n         container.getResource(), node.getNodeID(), priority));\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(priority);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n       this.reservedContainers.put(priority, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n     \n     LOG.info(\"Application \" + getApplicationId() \n         + \" reserved container \" + rmContainer\n         + \" on node \" + node + \", currently has \" + reservedContainers.size()\n         + \" at priority \" + priority \n         + \"; currentReservation \" + currentReservation.getMemory());\n     \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), appSchedulingInfo.getUser(), rmContext);\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:11 PM",
      "commitNameOld": "b4eb963c3c3e0b123003d7b32cdf7c9202cfb441",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
        "oldMethodName": "reserve",
        "newMethodName": "reserve"
      }
    },
    "6772d07fdc0ad7d0cd1be851bf83ae0208abd391": {
      "type": "Ymultichange(Ymovefromfile,Yparameterchange)",
      "commitMessage": "YARN-1335. Move duplicate code from FSSchedulerApp and FiCaSchedulerApp into SchedulerApplication (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:15 PM",
      "commitName": "6772d07fdc0ad7d0cd1be851bf83ae0208abd391",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-1335. Move duplicate code from FSSchedulerApp and FiCaSchedulerApp into SchedulerApplication (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535582 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/10/13 4:15 PM",
          "commitName": "6772d07fdc0ad7d0cd1be851bf83ae0208abd391",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "23/10/13 7:30 PM",
          "commitNameOld": "b3195f1283c4524c32e67640e965b70e96530fcc",
          "commitAuthorOld": "Jonathan Turner Eagles",
          "daysBetweenCommits": 0.86,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n       RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d \n           new RMContainerImpl(container, getApplicationAttemptId(), \n               node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n               rmContext.getContainerAllocationExpirer());\n         \n       Resources.addTo(currentReservation, container.getResource());\n       \n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n     rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n         container.getResource(), node.getNodeID(), priority));\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(priority);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n       this.reservedContainers.put(priority, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n     \n     LOG.info(\"Application \" + getApplicationId() \n         + \" reserved container \" + rmContainer\n         + \" on node \" + node + \", currently has \" + reservedContainers.size()\n         + \" at priority \" + priority \n         + \"; currentReservation \" + currentReservation.getMemory());\n     \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
            "oldMethodName": "reserve",
            "newMethodName": "reserve"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1335. Move duplicate code from FSSchedulerApp and FiCaSchedulerApp into SchedulerApplication (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535582 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/10/13 4:15 PM",
          "commitName": "6772d07fdc0ad7d0cd1be851bf83ae0208abd391",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "23/10/13 7:30 PM",
          "commitNameOld": "b3195f1283c4524c32e67640e965b70e96530fcc",
          "commitAuthorOld": "Jonathan Turner Eagles",
          "daysBetweenCommits": 0.86,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n-  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n       RMContainer rmContainer, Container container) {\n     // Create RMContainer if necessary\n     if (rmContainer \u003d\u003d null) {\n       rmContainer \u003d \n           new RMContainerImpl(container, getApplicationAttemptId(), \n               node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n               rmContext.getContainerAllocationExpirer());\n         \n       Resources.addTo(currentReservation, container.getResource());\n       \n       // Reset the re-reservation count\n       resetReReservations(priority);\n     } else {\n       // Note down the re-reservation\n       addReReservation(priority);\n     }\n     rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n         container.getResource(), node.getNodeID(), priority));\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(priority);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n       this.reservedContainers.put(priority, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n     \n     LOG.info(\"Application \" + getApplicationId() \n         + \" reserved container \" + rmContainer\n         + \" on node \" + node + \", currently has \" + reservedContainers.size()\n         + \" at priority \" + priority \n         + \"; currentReservation \" + currentReservation.getMemory());\n     \n     return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplication.java",
          "extendedDetails": {
            "oldValue": "[node-FSSchedulerNode, priority-Priority, rmContainer-RMContainer, container-Container]",
            "newValue": "[node-SchedulerNode, priority-Priority, rmContainer-RMContainer, container-Container]"
          }
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n-      RMContainer reservedContainer) {\n-    // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n-      // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n-      }\n+  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+      RMContainer rmContainer, Container container) {\n+    // Create RMContainer if necessary\n+    if (rmContainer \u003d\u003d null) {\n+      rmContainer \u003d \n+          new RMContainerImpl(container, getApplicationAttemptId(), \n+              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n+              rmContext.getContainerAllocationExpirer());\n+        \n+      Resources.addTo(currentReservation, container.getResource());\n       \n-      // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n-            \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n-            \" on node \" + this);\n-      }\n-\n-      LOG.info(\"Updated reserved container \" + \n-          reservedContainer.getContainer().getId() + \" on node \" + \n-          this + \" for application \" + application);\n+      // Reset the re-reservation count\n+      resetReReservations(priority);\n     } else {\n-      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n-          \" on node \" + this + \" for application \" + application);\n+      // Note down the re-reservation\n+      addReReservation(priority);\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n+        container.getResource(), node.getNodeID(), priority));\n+    \n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    if (reservedContainers \u003d\u003d null) {\n+      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n+      this.reservedContainers.put(priority, reservedContainers);\n+    }\n+    reservedContainers.put(node.getNodeID(), rmContainer);\n+    \n+    LOG.info(\"Application \" + getApplicationId() \n+        + \" reserved container \" + rmContainer\n+        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n+        + \" at priority \" + priority \n+        + \"; currentReservation \" + currentReservation.getMemory());\n+    \n+    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
            "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
            "oldMethodName": "reserveResource",
            "newMethodName": "reserve"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n-      RMContainer reservedContainer) {\n-    // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n-      // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n-      }\n+  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+      RMContainer rmContainer, Container container) {\n+    // Create RMContainer if necessary\n+    if (rmContainer \u003d\u003d null) {\n+      rmContainer \u003d \n+          new RMContainerImpl(container, getApplicationAttemptId(), \n+              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n+              rmContext.getContainerAllocationExpirer());\n+        \n+      Resources.addTo(currentReservation, container.getResource());\n       \n-      // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n-            \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n-            \" on node \" + this);\n-      }\n-\n-      LOG.info(\"Updated reserved container \" + \n-          reservedContainer.getContainer().getId() + \" on node \" + \n-          this + \" for application \" + application);\n+      // Reset the re-reservation count\n+      resetReReservations(priority);\n     } else {\n-      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n-          \" on node \" + this + \" for application \" + application);\n+      // Note down the re-reservation\n+      addReReservation(priority);\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n+        container.getResource(), node.getNodeID(), priority));\n+    \n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    if (reservedContainers \u003d\u003d null) {\n+      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n+      this.reservedContainers.put(priority, reservedContainers);\n+    }\n+    reservedContainers.put(node.getNodeID(), rmContainer);\n+    \n+    LOG.info(\"Application \" + getApplicationId() \n+        + \" reserved container \" + rmContainer\n+        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n+        + \" at priority \" + priority \n+        + \"; currentReservation \" + currentReservation.getMemory());\n+    \n+    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "RMContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n-      RMContainer reservedContainer) {\n-    // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n-      // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n-      }\n+  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+      RMContainer rmContainer, Container container) {\n+    // Create RMContainer if necessary\n+    if (rmContainer \u003d\u003d null) {\n+      rmContainer \u003d \n+          new RMContainerImpl(container, getApplicationAttemptId(), \n+              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n+              rmContext.getContainerAllocationExpirer());\n+        \n+      Resources.addTo(currentReservation, container.getResource());\n       \n-      // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n-            \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n-            \" on node \" + this);\n-      }\n-\n-      LOG.info(\"Updated reserved container \" + \n-          reservedContainer.getContainer().getId() + \" on node \" + \n-          this + \" for application \" + application);\n+      // Reset the re-reservation count\n+      resetReReservations(priority);\n     } else {\n-      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n-          \" on node \" + this + \" for application \" + application);\n+      // Note down the re-reservation\n+      addReReservation(priority);\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n+        container.getResource(), node.getNodeID(), priority));\n+    \n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    if (reservedContainers \u003d\u003d null) {\n+      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n+      this.reservedContainers.put(priority, reservedContainers);\n+    }\n+    reservedContainers.put(node.getNodeID(), rmContainer);\n+    \n+    LOG.info(\"Application \" + getApplicationId() \n+        + \" reserved container \" + rmContainer\n+        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n+        + \" at priority \" + priority \n+        + \"; currentReservation \" + currentReservation.getMemory());\n+    \n+    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n-      RMContainer reservedContainer) {\n-    // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n-      // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n-      }\n+  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+      RMContainer rmContainer, Container container) {\n+    // Create RMContainer if necessary\n+    if (rmContainer \u003d\u003d null) {\n+      rmContainer \u003d \n+          new RMContainerImpl(container, getApplicationAttemptId(), \n+              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n+              rmContext.getContainerAllocationExpirer());\n+        \n+      Resources.addTo(currentReservation, container.getResource());\n       \n-      // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n-            \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n-            \" on node \" + this);\n-      }\n-\n-      LOG.info(\"Updated reserved container \" + \n-          reservedContainer.getContainer().getId() + \" on node \" + \n-          this + \" for application \" + application);\n+      // Reset the re-reservation count\n+      resetReReservations(priority);\n     } else {\n-      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n-          \" on node \" + this + \" for application \" + application);\n+      // Note down the re-reservation\n+      addReReservation(priority);\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n+        container.getResource(), node.getNodeID(), priority));\n+    \n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    if (reservedContainers \u003d\u003d null) {\n+      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n+      this.reservedContainers.put(priority, reservedContainers);\n+    }\n+    reservedContainers.put(node.getNodeID(), rmContainer);\n+    \n+    LOG.info(\"Application \" + getApplicationId() \n+        + \" reserved container \" + rmContainer\n+        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n+        + \" at priority \" + priority \n+        + \"; currentReservation \" + currentReservation.getMemory());\n+    \n+    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "reserveResource",
            "newValue": "reserve"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "16/07/12 3:41 PM",
          "commitNameOld": "30099efb3525265f8b9fccd2709d45327f5b6724",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public synchronized void reserveResource(\n-      SchedulerApp application, Priority priority, \n-      RMContainer reservedContainer) {\n-    // Check if it\u0027s already reserved\n-    if (this.reservedContainer !\u003d null) {\n-      // Sanity check\n-      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-            \" container \" + reservedContainer +\n-            \" on node \" + reservedContainer.getReservedNode() + \n-            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n-            \" on node \" + this.reservedContainer.getReservedNode());\n-      }\n+  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n+      RMContainer rmContainer, Container container) {\n+    // Create RMContainer if necessary\n+    if (rmContainer \u003d\u003d null) {\n+      rmContainer \u003d \n+          new RMContainerImpl(container, getApplicationAttemptId(), \n+              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n+              rmContext.getContainerAllocationExpirer());\n+        \n+      Resources.addTo(currentReservation, container.getResource());\n       \n-      // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n-          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n-        throw new IllegalStateException(\"Trying to reserve\" +\n-        \t\t\" container \" + reservedContainer + \n-            \" for application \" + application.getApplicationId() + \n-            \" when currently\" +\n-            \" reserved container \" + this.reservedContainer +\n-            \" on node \" + this);\n-      }\n-\n-      LOG.info(\"Updated reserved container \" + \n-          reservedContainer.getContainer().getId() + \" on node \" + \n-          this + \" for application \" + application);\n+      // Reset the re-reservation count\n+      resetReReservations(priority);\n     } else {\n-      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n-          \" on node \" + this + \" for application \" + application);\n+      // Note down the re-reservation\n+      addReReservation(priority);\n     }\n-    this.reservedContainer \u003d reservedContainer;\n+    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n+        container.getResource(), node.getNodeID(), priority));\n+    \n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    if (reservedContainers \u003d\u003d null) {\n+      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n+      this.reservedContainers.put(priority, reservedContainers);\n+    }\n+    reservedContainers.put(node.getNodeID(), rmContainer);\n+    \n+    LOG.info(\"Application \" + getApplicationId() \n+        + \" reserved container \" + rmContainer\n+        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n+        + \" at priority \" + priority \n+        + \"; currentReservation \" + currentReservation.getMemory());\n+    \n+    return rmContainer;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized RMContainer reserve(FSSchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container) {\n    // Create RMContainer if necessary\n    if (rmContainer \u003d\u003d null) {\n      rmContainer \u003d \n          new RMContainerImpl(container, getApplicationAttemptId(), \n              node.getNodeID(), rmContext.getDispatcher().getEventHandler(), \n              rmContext.getContainerAllocationExpirer());\n        \n      Resources.addTo(currentReservation, container.getResource());\n      \n      // Reset the re-reservation count\n      resetReReservations(priority);\n    } else {\n      // Note down the re-reservation\n      addReReservation(priority);\n    }\n    rmContainer.handle(new RMContainerReservedEvent(container.getId(), \n        container.getResource(), node.getNodeID(), priority));\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n    \n    LOG.info(\"Application \" + getApplicationId() \n        + \" reserved container \" + rmContainer\n        + \" on node \" + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority \n        + \"; currentReservation \" + currentReservation.getMemory());\n    \n    return rmContainer;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApp, priority-Priority, reservedContainer-RMContainer]",
            "newValue": "[node-FSSchedulerNode, priority-Priority, rmContainer-RMContainer, container-Container]"
          }
        }
      ]
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/08/11 4:27 PM",
      "commitNameOld": "fb6ecb9b27798a923ca290ba5d23368e3a820a6c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public synchronized void reserveResource(\n       SchedulerApp application, Priority priority, \n       RMContainer reservedContainer) {\n     // Check if it\u0027s already reserved\n     if (this.reservedContainer !\u003d null) {\n       // Sanity check\n       if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n             \" container \" + reservedContainer +\n             \" on node \" + reservedContainer.getReservedNode() + \n             \" when currently\" + \" reserved resource \" + this.reservedContainer +\n             \" on node \" + this.reservedContainer.getReservedNode());\n       }\n       \n       // Cannot reserve more than one application on a given node!\n-      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n-          reservedContainer.getContainer().getId().getAppAttemptId())) {\n+      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n+          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n         throw new IllegalStateException(\"Trying to reserve\" +\n         \t\t\" container \" + reservedContainer + \n             \" for application \" + application.getApplicationId() + \n             \" when currently\" +\n             \" reserved container \" + this.reservedContainer +\n             \" on node \" + this);\n       }\n \n       LOG.info(\"Updated reserved container \" + \n           reservedContainer.getContainer().getId() + \" on node \" + \n           this + \" for application \" + application);\n     } else {\n       LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n           \" on node \" + this + \" for application \" + application);\n     }\n     this.reservedContainer \u003d reservedContainer;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApp application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getApplicationAttemptId().equals(\n          reservedContainer.getContainer().getId().getApplicationAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApp application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n          reservedContainer.getContainer().getId().getAppAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,34 @@\n+  public synchronized void reserveResource(\n+      SchedulerApp application, Priority priority, \n+      RMContainer reservedContainer) {\n+    // Check if it\u0027s already reserved\n+    if (this.reservedContainer !\u003d null) {\n+      // Sanity check\n+      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n+        throw new IllegalStateException(\"Trying to reserve\" +\n+            \" container \" + reservedContainer +\n+            \" on node \" + reservedContainer.getReservedNode() + \n+            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n+            \" on node \" + this.reservedContainer.getReservedNode());\n+      }\n+      \n+      // Cannot reserve more than one application on a given node!\n+      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n+          reservedContainer.getContainer().getId().getAppAttemptId())) {\n+        throw new IllegalStateException(\"Trying to reserve\" +\n+        \t\t\" container \" + reservedContainer + \n+            \" for application \" + application.getApplicationId() + \n+            \" when currently\" +\n+            \" reserved container \" + this.reservedContainer +\n+            \" on node \" + this);\n+      }\n+\n+      LOG.info(\"Updated reserved container \" + \n+          reservedContainer.getContainer().getId() + \" on node \" + \n+          this + \" for application \" + application);\n+    } else {\n+      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n+          \" on node \" + this + \" for application \" + application);\n+    }\n+    this.reservedContainer \u003d reservedContainer;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reserveResource(\n      SchedulerApp application, Priority priority, \n      RMContainer reservedContainer) {\n    // Check if it\u0027s already reserved\n    if (this.reservedContainer !\u003d null) {\n      // Sanity check\n      if (!reservedContainer.getContainer().getNodeId().equals(getNodeID())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n            \" container \" + reservedContainer +\n            \" on node \" + reservedContainer.getReservedNode() + \n            \" when currently\" + \" reserved resource \" + this.reservedContainer +\n            \" on node \" + this.reservedContainer.getReservedNode());\n      }\n      \n      // Cannot reserve more than one application on a given node!\n      if (!this.reservedContainer.getContainer().getId().getAppAttemptId().equals(\n          reservedContainer.getContainer().getId().getAppAttemptId())) {\n        throw new IllegalStateException(\"Trying to reserve\" +\n        \t\t\" container \" + reservedContainer + \n            \" for application \" + application.getApplicationId() + \n            \" when currently\" +\n            \" reserved container \" + this.reservedContainer +\n            \" on node \" + this);\n      }\n\n      LOG.info(\"Updated reserved container \" + \n          reservedContainer.getContainer().getId() + \" on node \" + \n          this + \" for application \" + application);\n    } else {\n      LOG.info(\"Reserved container \" + reservedContainer.getContainer().getId() + \n          \" on node \" + this + \" for application \" + application);\n    }\n    this.reservedContainer \u003d reservedContainer;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerNode.java"
    }
  }
}