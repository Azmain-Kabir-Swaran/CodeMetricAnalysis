{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppCatalogSolrClient.java",
  "functionName": "deployApp",
  "functionId": "deployApp___id-String__service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/java/org/apache/hadoop/yarn/appcatalog/application/AppCatalogSolrClient.java",
  "functionStartLine": 252,
  "functionEndLine": 300,
  "numCommitsSeen": 7,
  "timeTaken": 1682,
  "changeHistory": [
    "b2cdf809bce10f680048cacf45806f0abb4f4804",
    "35b0a381e7bc8bbf74adfa51feee1d54d8675c06",
    "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e"
  ],
  "changeHistoryShort": {
    "b2cdf809bce10f680048cacf45806f0abb4f4804": "Ybodychange",
    "35b0a381e7bc8bbf74adfa51feee1d54d8675c06": "Ybodychange",
    "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2cdf809bce10f680048cacf45806f0abb4f4804": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9281. Add express upgrade button to Appcatalog UI. Contributed by Eric Yang\n",
      "commitDate": "13/04/19 8:55 AM",
      "commitName": "b2cdf809bce10f680048cacf45806f0abb4f4804",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "01/04/19 9:21 AM",
      "commitNameOld": "35b0a381e7bc8bbf74adfa51feee1d54d8675c06",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 11.98,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   public void deployApp(String id, Service service) throws SolrServerException,\n       IOException {\n     long download \u003d 0;\n     ObjectMapper mapper \u003d new ObjectMapper();\n     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n     SolrClient solr \u003d getSolrClient();\n     // Find application information from AppStore\n     SolrQuery query \u003d new SolrQuery();\n     query.setQuery(\"id:\" + id);\n     query.setFilterQueries(\"type_s:AppStoreEntry\");\n     query.setRows(1);\n     QueryResponse response \u003d solr.query(query);\n     Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n     AppStoreEntry entry \u003d new AppStoreEntry();\n     while (appList.hasNext()) {\n       SolrDocument d \u003d appList.next();\n       entry.setOrg(d.get(\"org_s\").toString());\n       entry.setName(d.get(\"name_s\").toString());\n       entry.setDesc(d.get(\"desc_s\").toString());\n       entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\n       entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\n       download \u003d entry.getDownload() + 1;\n \n       // Update download count\n       docs.add(incrementDownload(d, download));\n     }\n \n     // increment download count for application\n \n     if (service!\u003dnull) {\n       // Register deployed application instance with AppList\n       SolrInputDocument request \u003d new SolrInputDocument();\n       String name \u003d service.getName();\n       request.addField(\"type_s\", \"AppEntry\");\n       request.addField(\"id\", name);\n       request.addField(\"name_s\", name);\n       request.addField(\"app_s\", entry.getOrg()+\"/\"+entry.getName());\n       request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n       docs.add(request);\n     }\n \n-    // Commit Solr changes.\n-    UpdateResponse detailsResponse \u003d solr.add(docs);\n-    if (detailsResponse.getStatus() !\u003d 0) {\n+    try {\n+      commitSolrChanges(solr, docs);\n+    } catch (IOException e) {\n       throw new IOException(\"Unable to register docker instance \"\n-          + \"with application entry.\");\n+          + \"with application entry.\", e);\n     }\n-    solr.commit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deployApp(String id, Service service) throws SolrServerException,\n      IOException {\n    long download \u003d 0;\n    ObjectMapper mapper \u003d new ObjectMapper();\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n    SolrClient solr \u003d getSolrClient();\n    // Find application information from AppStore\n    SolrQuery query \u003d new SolrQuery();\n    query.setQuery(\"id:\" + id);\n    query.setFilterQueries(\"type_s:AppStoreEntry\");\n    query.setRows(1);\n    QueryResponse response \u003d solr.query(query);\n    Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n    AppStoreEntry entry \u003d new AppStoreEntry();\n    while (appList.hasNext()) {\n      SolrDocument d \u003d appList.next();\n      entry.setOrg(d.get(\"org_s\").toString());\n      entry.setName(d.get(\"name_s\").toString());\n      entry.setDesc(d.get(\"desc_s\").toString());\n      entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\n      entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\n      download \u003d entry.getDownload() + 1;\n\n      // Update download count\n      docs.add(incrementDownload(d, download));\n    }\n\n    // increment download count for application\n\n    if (service!\u003dnull) {\n      // Register deployed application instance with AppList\n      SolrInputDocument request \u003d new SolrInputDocument();\n      String name \u003d service.getName();\n      request.addField(\"type_s\", \"AppEntry\");\n      request.addField(\"id\", name);\n      request.addField(\"name_s\", name);\n      request.addField(\"app_s\", entry.getOrg()+\"/\"+entry.getName());\n      request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n      docs.add(request);\n    }\n\n    try {\n      commitSolrChanges(solr, docs);\n    } catch (IOException e) {\n      throw new IOException(\"Unable to register docker instance \"\n          + \"with application entry.\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/java/org/apache/hadoop/yarn/appcatalog/application/AppCatalogSolrClient.java",
      "extendedDetails": {}
    },
    "35b0a381e7bc8bbf74adfa51feee1d54d8675c06": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9255. Improve recommend applications order and fix findbugs warnings. Contributed by Eric Yang\n",
      "commitDate": "01/04/19 9:21 AM",
      "commitName": "35b0a381e7bc8bbf74adfa51feee1d54d8675c06",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "29/03/19 1:51 PM",
      "commitNameOld": "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void deployApp(String id, Service service) throws SolrServerException,\n       IOException {\n     long download \u003d 0;\n     ObjectMapper mapper \u003d new ObjectMapper();\n     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n     SolrClient solr \u003d getSolrClient();\n     // Find application information from AppStore\n     SolrQuery query \u003d new SolrQuery();\n     query.setQuery(\"id:\" + id);\n     query.setFilterQueries(\"type_s:AppStoreEntry\");\n     query.setRows(1);\n     QueryResponse response \u003d solr.query(query);\n     Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n     AppStoreEntry entry \u003d new AppStoreEntry();\n     while (appList.hasNext()) {\n       SolrDocument d \u003d appList.next();\n       entry.setOrg(d.get(\"org_s\").toString());\n       entry.setName(d.get(\"name_s\").toString());\n       entry.setDesc(d.get(\"desc_s\").toString());\n-      entry.setLike(Integer.valueOf(d.get(\"like_i\").toString()));\n-      entry.setDownload(Integer.valueOf(d.get(\"download_i\").toString()));\n+      entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\n+      entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\n       download \u003d entry.getDownload() + 1;\n \n       // Update download count\n       docs.add(incrementDownload(d, download));\n     }\n \n     // increment download count for application\n \n     if (service!\u003dnull) {\n       // Register deployed application instance with AppList\n       SolrInputDocument request \u003d new SolrInputDocument();\n       String name \u003d service.getName();\n       request.addField(\"type_s\", \"AppEntry\");\n       request.addField(\"id\", name);\n       request.addField(\"name_s\", name);\n       request.addField(\"app_s\", entry.getOrg()+\"/\"+entry.getName());\n       request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n       docs.add(request);\n     }\n \n     // Commit Solr changes.\n     UpdateResponse detailsResponse \u003d solr.add(docs);\n     if (detailsResponse.getStatus() !\u003d 0) {\n       throw new IOException(\"Unable to register docker instance \"\n           + \"with application entry.\");\n     }\n     solr.commit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deployApp(String id, Service service) throws SolrServerException,\n      IOException {\n    long download \u003d 0;\n    ObjectMapper mapper \u003d new ObjectMapper();\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n    SolrClient solr \u003d getSolrClient();\n    // Find application information from AppStore\n    SolrQuery query \u003d new SolrQuery();\n    query.setQuery(\"id:\" + id);\n    query.setFilterQueries(\"type_s:AppStoreEntry\");\n    query.setRows(1);\n    QueryResponse response \u003d solr.query(query);\n    Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n    AppStoreEntry entry \u003d new AppStoreEntry();\n    while (appList.hasNext()) {\n      SolrDocument d \u003d appList.next();\n      entry.setOrg(d.get(\"org_s\").toString());\n      entry.setName(d.get(\"name_s\").toString());\n      entry.setDesc(d.get(\"desc_s\").toString());\n      entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\n      entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\n      download \u003d entry.getDownload() + 1;\n\n      // Update download count\n      docs.add(incrementDownload(d, download));\n    }\n\n    // increment download count for application\n\n    if (service!\u003dnull) {\n      // Register deployed application instance with AppList\n      SolrInputDocument request \u003d new SolrInputDocument();\n      String name \u003d service.getName();\n      request.addField(\"type_s\", \"AppEntry\");\n      request.addField(\"id\", name);\n      request.addField(\"name_s\", name);\n      request.addField(\"app_s\", entry.getOrg()+\"/\"+entry.getName());\n      request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n      docs.add(request);\n    }\n\n    // Commit Solr changes.\n    UpdateResponse detailsResponse \u003d solr.add(docs);\n    if (detailsResponse.getStatus() !\u003d 0) {\n      throw new IOException(\"Unable to register docker instance \"\n          + \"with application entry.\");\n    }\n    solr.commit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/java/org/apache/hadoop/yarn/appcatalog/application/AppCatalogSolrClient.java",
      "extendedDetails": {}
    },
    "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7129. Application Catalog for YARN applications. Contributed by Eric Yang\n",
      "commitDate": "29/03/19 1:51 PM",
      "commitName": "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,50 @@\n+  public void deployApp(String id, Service service) throws SolrServerException,\n+      IOException {\n+    long download \u003d 0;\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n+    SolrClient solr \u003d getSolrClient();\n+    // Find application information from AppStore\n+    SolrQuery query \u003d new SolrQuery();\n+    query.setQuery(\"id:\" + id);\n+    query.setFilterQueries(\"type_s:AppStoreEntry\");\n+    query.setRows(1);\n+    QueryResponse response \u003d solr.query(query);\n+    Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n+    AppStoreEntry entry \u003d new AppStoreEntry();\n+    while (appList.hasNext()) {\n+      SolrDocument d \u003d appList.next();\n+      entry.setOrg(d.get(\"org_s\").toString());\n+      entry.setName(d.get(\"name_s\").toString());\n+      entry.setDesc(d.get(\"desc_s\").toString());\n+      entry.setLike(Integer.valueOf(d.get(\"like_i\").toString()));\n+      entry.setDownload(Integer.valueOf(d.get(\"download_i\").toString()));\n+      download \u003d entry.getDownload() + 1;\n+\n+      // Update download count\n+      docs.add(incrementDownload(d, download));\n+    }\n+\n+    // increment download count for application\n+\n+    if (service!\u003dnull) {\n+      // Register deployed application instance with AppList\n+      SolrInputDocument request \u003d new SolrInputDocument();\n+      String name \u003d service.getName();\n+      request.addField(\"type_s\", \"AppEntry\");\n+      request.addField(\"id\", name);\n+      request.addField(\"name_s\", name);\n+      request.addField(\"app_s\", entry.getOrg()+\"/\"+entry.getName());\n+      request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n+      docs.add(request);\n+    }\n+\n+    // Commit Solr changes.\n+    UpdateResponse detailsResponse \u003d solr.add(docs);\n+    if (detailsResponse.getStatus() !\u003d 0) {\n+      throw new IOException(\"Unable to register docker instance \"\n+          + \"with application entry.\");\n+    }\n+    solr.commit();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void deployApp(String id, Service service) throws SolrServerException,\n      IOException {\n    long download \u003d 0;\n    ObjectMapper mapper \u003d new ObjectMapper();\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    Collection\u003cSolrInputDocument\u003e docs \u003d new HashSet\u003cSolrInputDocument\u003e();\n    SolrClient solr \u003d getSolrClient();\n    // Find application information from AppStore\n    SolrQuery query \u003d new SolrQuery();\n    query.setQuery(\"id:\" + id);\n    query.setFilterQueries(\"type_s:AppStoreEntry\");\n    query.setRows(1);\n    QueryResponse response \u003d solr.query(query);\n    Iterator\u003cSolrDocument\u003e appList \u003d response.getResults().listIterator();\n    AppStoreEntry entry \u003d new AppStoreEntry();\n    while (appList.hasNext()) {\n      SolrDocument d \u003d appList.next();\n      entry.setOrg(d.get(\"org_s\").toString());\n      entry.setName(d.get(\"name_s\").toString());\n      entry.setDesc(d.get(\"desc_s\").toString());\n      entry.setLike(Integer.valueOf(d.get(\"like_i\").toString()));\n      entry.setDownload(Integer.valueOf(d.get(\"download_i\").toString()));\n      download \u003d entry.getDownload() + 1;\n\n      // Update download count\n      docs.add(incrementDownload(d, download));\n    }\n\n    // increment download count for application\n\n    if (service!\u003dnull) {\n      // Register deployed application instance with AppList\n      SolrInputDocument request \u003d new SolrInputDocument();\n      String name \u003d service.getName();\n      request.addField(\"type_s\", \"AppEntry\");\n      request.addField(\"id\", name);\n      request.addField(\"name_s\", name);\n      request.addField(\"app_s\", entry.getOrg()+\"/\"+entry.getName());\n      request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\n      docs.add(request);\n    }\n\n    // Commit Solr changes.\n    UpdateResponse detailsResponse \u003d solr.add(docs);\n    if (detailsResponse.getStatus() !\u003d 0) {\n      throw new IOException(\"Unable to register docker instance \"\n          + \"with application entry.\");\n    }\n    solr.commit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-catalog/hadoop-yarn-applications-catalog-webapp/src/main/java/org/apache/hadoop/yarn/appcatalog/application/AppCatalogSolrClient.java"
    }
  }
}