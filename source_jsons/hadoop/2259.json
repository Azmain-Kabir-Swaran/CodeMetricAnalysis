{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSClient.java",
  "functionName": "primitiveMkdir",
  "functionId": "primitiveMkdir___src-String__absPermission-FsPermission__createParent-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
  "functionStartLine": 2482,
  "functionEndLine": 2504,
  "numCommitsSeen": 330,
  "timeTaken": 9110,
  "changeHistory": [
    "328c855a578b90362d33dc822075f9b828df6f1e",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "892ade689f9bcce76daae8f66fc00a49bee8548e",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "c4ccbe62c0857261b197a68c1e03a02e92f21a38",
    "2116d0520e528c44fa280f2a5b28594c6d6fc28a",
    "82b981cca493d2efaa4bdbe79a2f9615f866ee06"
  ],
  "changeHistoryShort": {
    "328c855a578b90362d33dc822075f9b828df6f1e": "Ybodychange",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "892ade689f9bcce76daae8f66fc00a49bee8548e": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d": "Ybodychange",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ybodychange",
    "c4ccbe62c0857261b197a68c1e03a02e92f21a38": "Ybodychange",
    "2116d0520e528c44fa280f2a5b28594c6d6fc28a": "Ybodychange",
    "82b981cca493d2efaa4bdbe79a2f9615f866ee06": "Yintroduced"
  },
  "changeHistoryDetails": {
    "328c855a578b90362d33dc822075f9b828df6f1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10650. DFSClient#mkdirs and DFSClient#primitiveMkdir should use default directory permission. Contributed by John Zhuge.\n",
      "commitDate": "28/07/16 1:15 PM",
      "commitName": "328c855a578b90362d33dc822075f9b828df6f1e",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "16/05/16 11:53 PM",
      "commitNameOld": "9fe5828f05accc6746cb08a43916f7557dac533a",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 72.56,
      "commitsBetweenForRepo": 614,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission,\n       boolean createParent) throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n-      absPermission \u003d applyUMask(null);\n+      absPermission \u003d applyUMaskDir(null);\n     }\n-\n     LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n     try (TraceScope ignored \u003d tracer.newScope(\"mkdir\")) {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n           InvalidPathException.class,\n           FileAlreadyExistsException.class,\n           FileNotFoundException.class,\n           ParentNotDirectoryException.class,\n           SafeModeException.class,\n           NSQuotaExceededException.class,\n           DSQuotaExceededException.class,\n           QuotaByStorageTypeExceededException.class,\n           UnresolvedPathException.class,\n           SnapshotAccessControlException.class);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission,\n      boolean createParent) throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMaskDir(null);\n    }\n    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n    try (TraceScope ignored \u003d tracer.newScope(\"mkdir\")) {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n          InvalidPathException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          SafeModeException.class,\n          NSQuotaExceededException.class,\n          DSQuotaExceededException.class,\n          QuotaByStorageTypeExceededException.class,\n          UnresolvedPathException.class,\n          SnapshotAccessControlException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,24 @@\n-  public boolean primitiveMkdir(String src, FsPermission absPermission, \n-    boolean createParent)\n-    throws IOException {\n+  public boolean primitiveMkdir(String src, FsPermission absPermission,\n+      boolean createParent) throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d applyUMask(null);\n-    } \n+    }\n \n     LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n-    TraceScope scope \u003d tracer.newScope(\"mkdir\");\n-    try {\n+    try (TraceScope ignored \u003d tracer.newScope(\"mkdir\")) {\n       return namenode.mkdirs(src, absPermission, createParent);\n-    } catch(RemoteException re) {\n+    } catch (RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n-                                     InvalidPathException.class,\n-                                     FileAlreadyExistsException.class,\n-                                     FileNotFoundException.class,\n-                                     ParentNotDirectoryException.class,\n-                                     SafeModeException.class,\n-                                     NSQuotaExceededException.class,\n-                                     DSQuotaExceededException.class,\n-                                     QuotaByStorageTypeExceededException.class,\n-                                     UnresolvedPathException.class,\n-                                     SnapshotAccessControlException.class);\n-    } finally {\n-      scope.close();\n+          InvalidPathException.class,\n+          FileAlreadyExistsException.class,\n+          FileNotFoundException.class,\n+          ParentNotDirectoryException.class,\n+          SafeModeException.class,\n+          NSQuotaExceededException.class,\n+          DSQuotaExceededException.class,\n+          QuotaByStorageTypeExceededException.class,\n+          UnresolvedPathException.class,\n+          SnapshotAccessControlException.class);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission,\n      boolean createParent) throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    }\n\n    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n    try (TraceScope ignored \u003d tracer.newScope(\"mkdir\")) {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch (RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n          InvalidPathException.class,\n          FileAlreadyExistsException.class,\n          FileNotFoundException.class,\n          ParentNotDirectoryException.class,\n          SafeModeException.class,\n          NSQuotaExceededException.class,\n          DSQuotaExceededException.class,\n          QuotaByStorageTypeExceededException.class,\n          UnresolvedPathException.class,\n          SnapshotAccessControlException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d applyUMask(null);\n     } \n \n-    if(LOG.isDebugEnabled()) {\n-      LOG.debug(src + \": masked\u003d\" + absPermission);\n-    }\n+    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n     TraceScope scope \u003d tracer.newScope(\"mkdir\");\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      QuotaByStorageTypeExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n    TraceScope scope \u003d tracer.newScope(\"mkdir\");\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     QuotaByStorageTypeExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,30 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d applyUMask(null);\n     } \n \n-    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n+    if(LOG.isDebugEnabled()) {\n+      LOG.debug(src + \": masked\u003d\" + absPermission);\n+    }\n     TraceScope scope \u003d tracer.newScope(\"mkdir\");\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      QuotaByStorageTypeExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    TraceScope scope \u003d tracer.newScope(\"mkdir\");\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     QuotaByStorageTypeExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d applyUMask(null);\n     } \n \n-    if(LOG.isDebugEnabled()) {\n-      LOG.debug(src + \": masked\u003d\" + absPermission);\n-    }\n+    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n     TraceScope scope \u003d tracer.newScope(\"mkdir\");\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      QuotaByStorageTypeExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    LOG.debug(\"{}: masked\u003d{}\", src, absPermission);\n    TraceScope scope \u003d tracer.newScope(\"mkdir\");\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     QuotaByStorageTypeExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "892ade689f9bcce76daae8f66fc00a49bee8548e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9080. Update htrace version to 4.0.1 (cmccabe)\n",
      "commitDate": "28/09/15 7:42 AM",
      "commitName": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d applyUMask(null);\n     } \n \n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + absPermission);\n     }\n-    TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n+    TraceScope scope \u003d tracer.newScope(\"mkdir\");\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      QuotaByStorageTypeExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    TraceScope scope \u003d tracer.newScope(\"mkdir\");\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     QuotaByStorageTypeExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     QuotaByStorageTypeExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8231. StackTrace displayed at client while QuotaByStorageType exceeds (Contributed by J.Andreina and Xiaoyu Yao)\n",
      "commitDate": "24/04/15 12:21 AM",
      "commitName": "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "23/04/15 5:33 PM",
      "commitNameOld": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d applyUMask(null);\n     } \n \n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + absPermission);\n     }\n     TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n+                                     QuotaByStorageTypeExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     QuotaByStorageTypeExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "10/04/15 11:40 AM",
      "commitNameOld": "7660da95cb67cbfe034aa8fa2a5bf0f8c9fdf41a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n-      absPermission \u003d \n-        FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n+      absPermission \u003d applyUMask(null);\n     } \n \n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + absPermission);\n     }\n     TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d applyUMask(null);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "c4ccbe62c0857261b197a68c1e03a02e92f21a38": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7189. Add trace spans for DFSClient metadata operations. (Colin P. McCabe via yliu)\n",
      "commitDate": "15/01/15 8:23 AM",
      "commitName": "c4ccbe62c0857261b197a68c1e03a02e92f21a38",
      "commitAuthor": "yliu",
      "commitDateOld": "12/01/15 10:50 PM",
      "commitNameOld": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d \n         FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n     } \n \n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + absPermission);\n     }\n+    TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n                                      UnresolvedPathException.class,\n                                      SnapshotAccessControlException.class);\n+    } finally {\n+      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d \n        FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    TraceScope scope \u003d Trace.startSpan(\"mkdir\", traceSampler);\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "2116d0520e528c44fa280f2a5b28594c6d6fc28a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4148. Disallow write/modify operations on files and directories in a snapshot. Contributed by Brandon Li.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1409023 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/12 3:26 PM",
      "commitName": "2116d0520e528c44fa280f2a5b28594c6d6fc28a",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "29/10/12 7:09 AM",
      "commitNameOld": "564adec5b5d5264897572f68d9e19a916f887c0d",
      "commitAuthorOld": "",
      "daysBetweenCommits": 15.39,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public boolean primitiveMkdir(String src, FsPermission absPermission, \n     boolean createParent)\n     throws IOException {\n     checkOpen();\n     if (absPermission \u003d\u003d null) {\n       absPermission \u003d \n         FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n     } \n \n     if(LOG.isDebugEnabled()) {\n       LOG.debug(src + \": masked\u003d\" + absPermission);\n     }\n     try {\n       return namenode.mkdirs(src, absPermission, createParent);\n     } catch(RemoteException re) {\n       throw re.unwrapRemoteException(AccessControlException.class,\n                                      InvalidPathException.class,\n                                      FileAlreadyExistsException.class,\n                                      FileNotFoundException.class,\n                                      ParentNotDirectoryException.class,\n                                      SafeModeException.class,\n                                      NSQuotaExceededException.class,\n                                      DSQuotaExceededException.class,\n-                                     UnresolvedPathException.class);\n+                                     UnresolvedPathException.class,\n+                                     SnapshotAccessControlException.class);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d \n        FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     UnresolvedPathException.class,\n                                     SnapshotAccessControlException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "82b981cca493d2efaa4bdbe79a2f9615f866ee06": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3890. filecontext mkdirs doesn\u0027t apply umask as expected (Tom Graves via daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381606 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 7:06 AM",
      "commitName": "82b981cca493d2efaa4bdbe79a2f9615f866ee06",
      "commitAuthor": "Daryn Sharp",
      "diff": "@@ -0,0 +1,26 @@\n+  public boolean primitiveMkdir(String src, FsPermission absPermission, \n+    boolean createParent)\n+    throws IOException {\n+    checkOpen();\n+    if (absPermission \u003d\u003d null) {\n+      absPermission \u003d \n+        FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n+    } \n+\n+    if(LOG.isDebugEnabled()) {\n+      LOG.debug(src + \": masked\u003d\" + absPermission);\n+    }\n+    try {\n+      return namenode.mkdirs(src, absPermission, createParent);\n+    } catch(RemoteException re) {\n+      throw re.unwrapRemoteException(AccessControlException.class,\n+                                     InvalidPathException.class,\n+                                     FileAlreadyExistsException.class,\n+                                     FileNotFoundException.class,\n+                                     ParentNotDirectoryException.class,\n+                                     SafeModeException.class,\n+                                     NSQuotaExceededException.class,\n+                                     DSQuotaExceededException.class,\n+                                     UnresolvedPathException.class);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean primitiveMkdir(String src, FsPermission absPermission, \n    boolean createParent)\n    throws IOException {\n    checkOpen();\n    if (absPermission \u003d\u003d null) {\n      absPermission \u003d \n        FsPermission.getDefault().applyUMask(dfsClientConf.uMask);\n    } \n\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(src + \": masked\u003d\" + absPermission);\n    }\n    try {\n      return namenode.mkdirs(src, absPermission, createParent);\n    } catch(RemoteException re) {\n      throw re.unwrapRemoteException(AccessControlException.class,\n                                     InvalidPathException.class,\n                                     FileAlreadyExistsException.class,\n                                     FileNotFoundException.class,\n                                     ParentNotDirectoryException.class,\n                                     SafeModeException.class,\n                                     NSQuotaExceededException.class,\n                                     DSQuotaExceededException.class,\n                                     UnresolvedPathException.class);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
    }
  }
}