{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StreamXmlRecordReader.java",
  "functionName": "fastReadUntilMatch",
  "functionId": "fastReadUntilMatch___textPat-String__includePat-boolean__outBufOrNull-DataOutputBuffer",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
  "functionStartLine": 237,
  "functionEndLine": 273,
  "numCommitsSeen": 5,
  "timeTaken": 4388,
  "changeHistory": [
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean fastReadUntilMatch(String textPat, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException {\n    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n    int m \u003d 0;\n    boolean match \u003d false;\n    int msup \u003d cpat.length;\n    int LL \u003d 120000 * 10;\n\n    bin_.mark(LL); // large number to invalidate mark\n    while (true) {\n      int b \u003d bin_.read();\n      if (b \u003d\u003d -1) break;\n\n      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n      if (c \u003d\u003d cpat[m]) {\n        m++;\n        if (m \u003d\u003d msup) {\n          match \u003d true;\n          break;\n        }\n      } else {\n        bin_.mark(LL); // rest mark so we could jump back if we found a match\n        if (outBufOrNull !\u003d null) {\n          outBufOrNull.write(cpat, 0, m);\n          outBufOrNull.write(c);\n        }\n        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n        m \u003d 0;\n      }\n    }\n    if (!includePat \u0026\u0026 match) {\n      bin_.reset();\n    } else if (outBufOrNull !\u003d null) {\n      outBufOrNull.write(cpat);\n      pos_ +\u003d msup;\n    }\n    return match;\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
        "newPath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean fastReadUntilMatch(String textPat, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException {\n    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n    int m \u003d 0;\n    boolean match \u003d false;\n    int msup \u003d cpat.length;\n    int LL \u003d 120000 * 10;\n\n    bin_.mark(LL); // large number to invalidate mark\n    while (true) {\n      int b \u003d bin_.read();\n      if (b \u003d\u003d -1) break;\n\n      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n      if (c \u003d\u003d cpat[m]) {\n        m++;\n        if (m \u003d\u003d msup) {\n          match \u003d true;\n          break;\n        }\n      } else {\n        bin_.mark(LL); // rest mark so we could jump back if we found a match\n        if (outBufOrNull !\u003d null) {\n          outBufOrNull.write(cpat, 0, m);\n          outBufOrNull.write(c);\n        }\n        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n        m \u003d 0;\n      }\n    }\n    if (!includePat \u0026\u0026 match) {\n      bin_.reset();\n    } else if (outBufOrNull !\u003d null) {\n      outBufOrNull.write(cpat);\n      pos_ +\u003d msup;\n    }\n    return match;\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean fastReadUntilMatch(String textPat, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException {\n    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n    int m \u003d 0;\n    boolean match \u003d false;\n    int msup \u003d cpat.length;\n    int LL \u003d 120000 * 10;\n\n    bin_.mark(LL); // large number to invalidate mark\n    while (true) {\n      int b \u003d bin_.read();\n      if (b \u003d\u003d -1) break;\n\n      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n      if (c \u003d\u003d cpat[m]) {\n        m++;\n        if (m \u003d\u003d msup) {\n          match \u003d true;\n          break;\n        }\n      } else {\n        bin_.mark(LL); // rest mark so we could jump back if we found a match\n        if (outBufOrNull !\u003d null) {\n          outBufOrNull.write(cpat, 0, m);\n          outBufOrNull.write(c);\n        }\n        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n        m \u003d 0;\n      }\n    }\n    if (!includePat \u0026\u0026 match) {\n      bin_.reset();\n    } else if (outBufOrNull !\u003d null) {\n      outBufOrNull.write(cpat);\n      pos_ +\u003d msup;\n    }\n    return match;\n  }",
      "path": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java",
        "newPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,37 @@\n+  boolean fastReadUntilMatch(String textPat, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException {\n+    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n+    int m \u003d 0;\n+    boolean match \u003d false;\n+    int msup \u003d cpat.length;\n+    int LL \u003d 120000 * 10;\n+\n+    bin_.mark(LL); // large number to invalidate mark\n+    while (true) {\n+      int b \u003d bin_.read();\n+      if (b \u003d\u003d -1) break;\n+\n+      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n+      if (c \u003d\u003d cpat[m]) {\n+        m++;\n+        if (m \u003d\u003d msup) {\n+          match \u003d true;\n+          break;\n+        }\n+      } else {\n+        bin_.mark(LL); // rest mark so we could jump back if we found a match\n+        if (outBufOrNull !\u003d null) {\n+          outBufOrNull.write(cpat, 0, m);\n+          outBufOrNull.write(c);\n+        }\n+        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n+        m \u003d 0;\n+      }\n+    }\n+    if (!includePat \u0026\u0026 match) {\n+      bin_.reset();\n+    } else if (outBufOrNull !\u003d null) {\n+      outBufOrNull.write(cpat);\n+      pos_ +\u003d msup;\n+    }\n+    return match;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean fastReadUntilMatch(String textPat, boolean includePat, DataOutputBuffer outBufOrNull) throws IOException {\n    byte[] cpat \u003d textPat.getBytes(\"UTF-8\");\n    int m \u003d 0;\n    boolean match \u003d false;\n    int msup \u003d cpat.length;\n    int LL \u003d 120000 * 10;\n\n    bin_.mark(LL); // large number to invalidate mark\n    while (true) {\n      int b \u003d bin_.read();\n      if (b \u003d\u003d -1) break;\n\n      byte c \u003d (byte) b; // this assumes eight-bit matching. OK with UTF-8\n      if (c \u003d\u003d cpat[m]) {\n        m++;\n        if (m \u003d\u003d msup) {\n          match \u003d true;\n          break;\n        }\n      } else {\n        bin_.mark(LL); // rest mark so we could jump back if we found a match\n        if (outBufOrNull !\u003d null) {\n          outBufOrNull.write(cpat, 0, m);\n          outBufOrNull.write(c);\n        }\n        pos_ +\u003d m + 1; // skip m chars, +1 for \u0027c\u0027\n        m \u003d 0;\n      }\n    }\n    if (!includePat \u0026\u0026 match) {\n      bin_.reset();\n    } else if (outBufOrNull !\u003d null) {\n      outBufOrNull.write(cpat);\n      pos_ +\u003d msup;\n    }\n    return match;\n  }",
      "path": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamXmlRecordReader.java"
    }
  }
}