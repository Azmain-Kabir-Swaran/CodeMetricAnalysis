{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "signalToContainer",
  "functionId": "signalToContainer___containerId-String(annotations-@PathParam(RMWSConsts.CONTAINERID))__command-String(annotations-@PathParam(RMWSConsts.COMMAND))__hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2850,
  "functionEndLine": 2874,
  "numCommitsSeen": 106,
  "timeTaken": 2119,
  "changeHistory": [
    "30b20969336126efe989e5e913d446645a2cb8fc",
    "544876fe127780415c6d5dcfa8c8934eeafe6815"
  ],
  "changeHistoryShort": {
    "30b20969336126efe989e5e913d446645a2cb8fc": "Ybodychange",
    "544876fe127780415c6d5dcfa8c8934eeafe6815": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30b20969336126efe989e5e913d446645a2cb8fc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9986. Allow app owner to signal container via RMWebServices. Contributed by kyungwan nam.\n",
      "commitDate": "19/11/19 3:35 AM",
      "commitName": "30b20969336126efe989e5e913d446645a2cb8fc",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "16/10/19 5:44 AM",
      "commitNameOld": "090f73a9aaeb4c03032a78c0a837478b527c27e0",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 33.95,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public Response signalToContainer(\n       @PathParam(RMWSConsts.CONTAINERID) String containerId,\n       @PathParam(RMWSConsts.COMMAND) String command,\n       @Context HttpServletRequest hsr)\n       throws AuthorizationException {\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n-    initForWritableEndpoints(callerUGI, true);\n+    initForWritableEndpoints(callerUGI, false);\n     if (!EnumUtils.isValidEnum(\n         SignalContainerCommand.class, command.toUpperCase())) {\n       String errMsg \u003d\n           \"Invalid command: \" + command.toUpperCase() + \", valid commands are: \"\n               + Arrays.asList(SignalContainerCommand.values());\n       return Response.status(Status.BAD_REQUEST).entity(errMsg).build();\n     }\n     try {\n       ContainerId containerIdObj \u003d ContainerId.fromString(containerId);\n       rm.getClientRMService().signalToContainer(SignalContainerRequest\n           .newInstance(containerIdObj,\n               SignalContainerCommand.valueOf(command.toUpperCase())));\n     } catch (Exception e) {\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n           .entity(e.getMessage()).build();\n     }\n     return Response.status(Status.OK).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response signalToContainer(\n      @PathParam(RMWSConsts.CONTAINERID) String containerId,\n      @PathParam(RMWSConsts.COMMAND) String command,\n      @Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, false);\n    if (!EnumUtils.isValidEnum(\n        SignalContainerCommand.class, command.toUpperCase())) {\n      String errMsg \u003d\n          \"Invalid command: \" + command.toUpperCase() + \", valid commands are: \"\n              + Arrays.asList(SignalContainerCommand.values());\n      return Response.status(Status.BAD_REQUEST).entity(errMsg).build();\n    }\n    try {\n      ContainerId containerIdObj \u003d ContainerId.fromString(containerId);\n      rm.getClientRMService().signalToContainer(SignalContainerRequest\n          .newInstance(containerIdObj,\n              SignalContainerCommand.valueOf(command.toUpperCase())));\n    } catch (Exception e) {\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(e.getMessage()).build();\n    }\n    return Response.status(Status.OK).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "544876fe127780415c6d5dcfa8c8934eeafe6815": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8693. Add signalToContainer REST API for RMWebServices. Contributed by Tao Yang.\n",
      "commitDate": "29/05/19 1:34 AM",
      "commitName": "544876fe127780415c6d5dcfa8c8934eeafe6815",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,25 @@\n+  public Response signalToContainer(\n+      @PathParam(RMWSConsts.CONTAINERID) String containerId,\n+      @PathParam(RMWSConsts.COMMAND) String command,\n+      @Context HttpServletRequest hsr)\n+      throws AuthorizationException {\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    initForWritableEndpoints(callerUGI, true);\n+    if (!EnumUtils.isValidEnum(\n+        SignalContainerCommand.class, command.toUpperCase())) {\n+      String errMsg \u003d\n+          \"Invalid command: \" + command.toUpperCase() + \", valid commands are: \"\n+              + Arrays.asList(SignalContainerCommand.values());\n+      return Response.status(Status.BAD_REQUEST).entity(errMsg).build();\n+    }\n+    try {\n+      ContainerId containerIdObj \u003d ContainerId.fromString(containerId);\n+      rm.getClientRMService().signalToContainer(SignalContainerRequest\n+          .newInstance(containerIdObj,\n+              SignalContainerCommand.valueOf(command.toUpperCase())));\n+    } catch (Exception e) {\n+      return Response.status(Status.INTERNAL_SERVER_ERROR)\n+          .entity(e.getMessage()).build();\n+    }\n+    return Response.status(Status.OK).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response signalToContainer(\n      @PathParam(RMWSConsts.CONTAINERID) String containerId,\n      @PathParam(RMWSConsts.COMMAND) String command,\n      @Context HttpServletRequest hsr)\n      throws AuthorizationException {\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n    if (!EnumUtils.isValidEnum(\n        SignalContainerCommand.class, command.toUpperCase())) {\n      String errMsg \u003d\n          \"Invalid command: \" + command.toUpperCase() + \", valid commands are: \"\n              + Arrays.asList(SignalContainerCommand.values());\n      return Response.status(Status.BAD_REQUEST).entity(errMsg).build();\n    }\n    try {\n      ContainerId containerIdObj \u003d ContainerId.fromString(containerId);\n      rm.getClientRMService().signalToContainer(SignalContainerRequest\n          .newInstance(containerIdObj,\n              SignalContainerCommand.valueOf(command.toUpperCase())));\n    } catch (Exception e) {\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(e.getMessage()).build();\n    }\n    return Response.status(Status.OK).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}