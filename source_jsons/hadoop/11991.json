{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "recoverRbwImpl",
  "functionId": "recoverRbwImpl___rbw-ReplicaInPipeline__b-ExtendedBlock__newGS-long__minBytesRcvd-long__maxBytesRcvd-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 1537,
  "functionEndLine": 1595,
  "numCommitsSeen": 330,
  "timeTaken": 6747,
  "changeHistory": [
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
    "8c2c8128328d465ec9699d0573bef69019742512",
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b"
  ],
  "changeHistoryShort": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": "Ybodychange",
    "8c2c8128328d465ec9699d0573bef69019742512": "Ybodychange",
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ymultichange(Yparameterchange,Ybodychange)",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": "Ymultichange(Ymodifierchange,Ybodychange)",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15150. Introduce read write lock to Datanode. Contributed Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "11/02/20 8:00 AM",
      "commitName": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "28/01/20 10:10 AM",
      "commitNameOld": "1839c467f60cbb8592d446694ec3d7710cda5142",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 13.91,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n       // check generation stamp\n       long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n       if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n           replicaGenerationStamp \u003e newGS) {\n         throw new ReplicaNotFoundException(\n             ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                 \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                 newGS + \"].\");\n       }\n \n       // check replica length\n       long bytesAcked \u003d rbw.getBytesAcked();\n       long numBytes \u003d rbw.getNumBytes();\n       if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n         throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n             rbw + \": BytesAcked \u003d \" + bytesAcked +\n             \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n             minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n       }\n \n       long bytesOnDisk \u003d rbw.getBytesOnDisk();\n       long blockDataLength \u003d rbw.getReplicaInfo().getBlockDataLength();\n       if (bytesOnDisk !\u003d blockDataLength) {\n         LOG.info(\"Resetting bytesOnDisk to match blockDataLength (\u003d{}) for \" +\n             \"replica {}\", blockDataLength, rbw);\n         bytesOnDisk \u003d blockDataLength;\n         rbw.setLastChecksumAndDataLen(bytesOnDisk, null);\n       }\n \n       if (bytesOnDisk \u003c bytesAcked) {\n         throw new ReplicaNotFoundException(\"Found fewer bytesOnDisk than \" +\n             \"bytesAcked for replica \" + rbw);\n       }\n \n       FsVolumeReference ref \u003d rbw.getReplicaInfo()\n           .getVolume().obtainReference();\n       try {\n         // Truncate the potentially corrupt portion.\n         // If the source was client and the last node in the pipeline was lost,\n         // any corrupt data written after the acked length can go unnoticed.\n         if (bytesOnDisk \u003e bytesAcked) {\n           rbw.getReplicaInfo().truncateBlock(bytesAcked);\n           rbw.setNumBytes(bytesAcked);\n           rbw.setLastChecksumAndDataLen(bytesAcked, null);\n         }\n \n         // bump the replica\u0027s generation stamp to newGS\n         rbw.getReplicaInfo().bumpReplicaGS(newGS);\n       } catch (IOException e) {\n         IOUtils.cleanup(null, ref);\n         throw e;\n       }\n       return new ReplicaHandler(rbw, ref);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n      // check generation stamp\n      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n          replicaGenerationStamp \u003e newGS) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                newGS + \"].\");\n      }\n\n      // check replica length\n      long bytesAcked \u003d rbw.getBytesAcked();\n      long numBytes \u003d rbw.getNumBytes();\n      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n            rbw + \": BytesAcked \u003d \" + bytesAcked +\n            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n      }\n\n      long bytesOnDisk \u003d rbw.getBytesOnDisk();\n      long blockDataLength \u003d rbw.getReplicaInfo().getBlockDataLength();\n      if (bytesOnDisk !\u003d blockDataLength) {\n        LOG.info(\"Resetting bytesOnDisk to match blockDataLength (\u003d{}) for \" +\n            \"replica {}\", blockDataLength, rbw);\n        bytesOnDisk \u003d blockDataLength;\n        rbw.setLastChecksumAndDataLen(bytesOnDisk, null);\n      }\n\n      if (bytesOnDisk \u003c bytesAcked) {\n        throw new ReplicaNotFoundException(\"Found fewer bytesOnDisk than \" +\n            \"bytesAcked for replica \" + rbw);\n      }\n\n      FsVolumeReference ref \u003d rbw.getReplicaInfo()\n          .getVolume().obtainReference();\n      try {\n        // Truncate the potentially corrupt portion.\n        // If the source was client and the last node in the pipeline was lost,\n        // any corrupt data written after the acked length can go unnoticed.\n        if (bytesOnDisk \u003e bytesAcked) {\n          rbw.getReplicaInfo().truncateBlock(bytesAcked);\n          rbw.setNumBytes(bytesAcked);\n          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n        }\n\n        // bump the replica\u0027s generation stamp to newGS\n        rbw.getReplicaInfo().bumpReplicaGS(newGS);\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(rbw, ref);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "8c2c8128328d465ec9699d0573bef69019742512": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11472. Fix inconsistent replica size after a data pipeline failure. Contributed by Erik Krogen and Wei-Chiu Chuang.",
      "commitDate": "20/07/17 2:47 PM",
      "commitName": "8c2c8128328d465ec9699d0573bef69019742512",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "14/07/17 1:41 PM",
      "commitNameOld": "8d86a93915ee00318289535d9c78e48b75c8359d",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,59 @@\n   private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       // check generation stamp\n       long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n       if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n           replicaGenerationStamp \u003e newGS) {\n         throw new ReplicaNotFoundException(\n             ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                 \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                 newGS + \"].\");\n       }\n \n       // check replica length\n       long bytesAcked \u003d rbw.getBytesAcked();\n       long numBytes \u003d rbw.getNumBytes();\n       if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n         throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n             rbw + \": BytesAcked \u003d \" + bytesAcked +\n             \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n             minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n       }\n \n+      long bytesOnDisk \u003d rbw.getBytesOnDisk();\n+      long blockDataLength \u003d rbw.getReplicaInfo().getBlockDataLength();\n+      if (bytesOnDisk !\u003d blockDataLength) {\n+        LOG.info(\"Resetting bytesOnDisk to match blockDataLength (\u003d{}) for \" +\n+            \"replica {}\", blockDataLength, rbw);\n+        bytesOnDisk \u003d blockDataLength;\n+        rbw.setLastChecksumAndDataLen(bytesOnDisk, null);\n+      }\n+\n+      if (bytesOnDisk \u003c bytesAcked) {\n+        throw new ReplicaNotFoundException(\"Found fewer bytesOnDisk than \" +\n+            \"bytesAcked for replica \" + rbw);\n+      }\n+\n       FsVolumeReference ref \u003d rbw.getReplicaInfo()\n           .getVolume().obtainReference();\n       try {\n         // Truncate the potentially corrupt portion.\n         // If the source was client and the last node in the pipeline was lost,\n         // any corrupt data written after the acked length can go unnoticed.\n-        if (numBytes \u003e bytesAcked) {\n+        if (bytesOnDisk \u003e bytesAcked) {\n           rbw.getReplicaInfo().truncateBlock(bytesAcked);\n           rbw.setNumBytes(bytesAcked);\n           rbw.setLastChecksumAndDataLen(bytesAcked, null);\n         }\n \n         // bump the replica\u0027s generation stamp to newGS\n         rbw.getReplicaInfo().bumpReplicaGS(newGS);\n       } catch (IOException e) {\n         IOUtils.cleanup(null, ref);\n         throw e;\n       }\n       return new ReplicaHandler(rbw, ref);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // check generation stamp\n      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n          replicaGenerationStamp \u003e newGS) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                newGS + \"].\");\n      }\n\n      // check replica length\n      long bytesAcked \u003d rbw.getBytesAcked();\n      long numBytes \u003d rbw.getNumBytes();\n      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n            rbw + \": BytesAcked \u003d \" + bytesAcked +\n            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n      }\n\n      long bytesOnDisk \u003d rbw.getBytesOnDisk();\n      long blockDataLength \u003d rbw.getReplicaInfo().getBlockDataLength();\n      if (bytesOnDisk !\u003d blockDataLength) {\n        LOG.info(\"Resetting bytesOnDisk to match blockDataLength (\u003d{}) for \" +\n            \"replica {}\", blockDataLength, rbw);\n        bytesOnDisk \u003d blockDataLength;\n        rbw.setLastChecksumAndDataLen(bytesOnDisk, null);\n      }\n\n      if (bytesOnDisk \u003c bytesAcked) {\n        throw new ReplicaNotFoundException(\"Found fewer bytesOnDisk than \" +\n            \"bytesAcked for replica \" + rbw);\n      }\n\n      FsVolumeReference ref \u003d rbw.getReplicaInfo()\n          .getVolume().obtainReference();\n      try {\n        // Truncate the potentially corrupt portion.\n        // If the source was client and the last node in the pipeline was lost,\n        // any corrupt data written after the acked length can go unnoticed.\n        if (bytesOnDisk \u003e bytesAcked) {\n          rbw.getReplicaInfo().truncateBlock(bytesAcked);\n          rbw.setNumBytes(bytesAcked);\n          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n        }\n\n        // bump the replica\u0027s generation stamp to newGS\n        rbw.getReplicaInfo().bumpReplicaGS(newGS);\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(rbw, ref);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "13/09/16 12:54 PM",
          "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "10/09/16 6:22 PM",
          "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  private ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n+  private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       // check generation stamp\n       long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n       if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n           replicaGenerationStamp \u003e newGS) {\n         throw new ReplicaNotFoundException(\n             ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                 \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                 newGS + \"].\");\n       }\n \n       // check replica length\n       long bytesAcked \u003d rbw.getBytesAcked();\n       long numBytes \u003d rbw.getNumBytes();\n       if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n         throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n             rbw + \": BytesAcked \u003d \" + bytesAcked +\n             \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n             minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n       }\n \n-      FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+      FsVolumeReference ref \u003d rbw.getReplicaInfo()\n+          .getVolume().obtainReference();\n       try {\n         // Truncate the potentially corrupt portion.\n         // If the source was client and the last node in the pipeline was lost,\n         // any corrupt data written after the acked length can go unnoticed.\n         if (numBytes \u003e bytesAcked) {\n-          final File replicafile \u003d rbw.getBlockFile();\n-          truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+          rbw.getReplicaInfo().truncateBlock(bytesAcked);\n           rbw.setNumBytes(bytesAcked);\n           rbw.setLastChecksumAndDataLen(bytesAcked, null);\n         }\n \n         // bump the replica\u0027s generation stamp to newGS\n-        bumpReplicaGS(rbw, newGS);\n+        rbw.getReplicaInfo().bumpReplicaGS(newGS);\n       } catch (IOException e) {\n         IOUtils.cleanup(null, ref);\n         throw e;\n       }\n       return new ReplicaHandler(rbw, ref);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // check generation stamp\n      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n          replicaGenerationStamp \u003e newGS) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                newGS + \"].\");\n      }\n\n      // check replica length\n      long bytesAcked \u003d rbw.getBytesAcked();\n      long numBytes \u003d rbw.getNumBytes();\n      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n            rbw + \": BytesAcked \u003d \" + bytesAcked +\n            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n      }\n\n      FsVolumeReference ref \u003d rbw.getReplicaInfo()\n          .getVolume().obtainReference();\n      try {\n        // Truncate the potentially corrupt portion.\n        // If the source was client and the last node in the pipeline was lost,\n        // any corrupt data written after the acked length can go unnoticed.\n        if (numBytes \u003e bytesAcked) {\n          rbw.getReplicaInfo().truncateBlock(bytesAcked);\n          rbw.setNumBytes(bytesAcked);\n          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n        }\n\n        // bump the replica\u0027s generation stamp to newGS\n        rbw.getReplicaInfo().bumpReplicaGS(newGS);\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(rbw, ref);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[rbw-ReplicaBeingWritten, b-ExtendedBlock, newGS-long, minBytesRcvd-long, maxBytesRcvd-long]",
            "newValue": "[rbw-ReplicaInPipeline, b-ExtendedBlock, newGS-long, minBytesRcvd-long, maxBytesRcvd-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
          "commitDate": "13/09/16 12:54 PM",
          "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "10/09/16 6:22 PM",
          "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  private ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n+  private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       // check generation stamp\n       long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n       if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n           replicaGenerationStamp \u003e newGS) {\n         throw new ReplicaNotFoundException(\n             ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                 \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                 newGS + \"].\");\n       }\n \n       // check replica length\n       long bytesAcked \u003d rbw.getBytesAcked();\n       long numBytes \u003d rbw.getNumBytes();\n       if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n         throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n             rbw + \": BytesAcked \u003d \" + bytesAcked +\n             \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n             minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n       }\n \n-      FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+      FsVolumeReference ref \u003d rbw.getReplicaInfo()\n+          .getVolume().obtainReference();\n       try {\n         // Truncate the potentially corrupt portion.\n         // If the source was client and the last node in the pipeline was lost,\n         // any corrupt data written after the acked length can go unnoticed.\n         if (numBytes \u003e bytesAcked) {\n-          final File replicafile \u003d rbw.getBlockFile();\n-          truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+          rbw.getReplicaInfo().truncateBlock(bytesAcked);\n           rbw.setNumBytes(bytesAcked);\n           rbw.setLastChecksumAndDataLen(bytesAcked, null);\n         }\n \n         // bump the replica\u0027s generation stamp to newGS\n-        bumpReplicaGS(rbw, newGS);\n+        rbw.getReplicaInfo().bumpReplicaGS(newGS);\n       } catch (IOException e) {\n         IOUtils.cleanup(null, ref);\n         throw e;\n       }\n       return new ReplicaHandler(rbw, ref);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReplicaHandler recoverRbwImpl(ReplicaInPipeline rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // check generation stamp\n      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n          replicaGenerationStamp \u003e newGS) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                newGS + \"].\");\n      }\n\n      // check replica length\n      long bytesAcked \u003d rbw.getBytesAcked();\n      long numBytes \u003d rbw.getNumBytes();\n      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n            rbw + \": BytesAcked \u003d \" + bytesAcked +\n            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n      }\n\n      FsVolumeReference ref \u003d rbw.getReplicaInfo()\n          .getVolume().obtainReference();\n      try {\n        // Truncate the potentially corrupt portion.\n        // If the source was client and the last node in the pipeline was lost,\n        // any corrupt data written after the acked length can go unnoticed.\n        if (numBytes \u003e bytesAcked) {\n          rbw.getReplicaInfo().truncateBlock(bytesAcked);\n          rbw.setNumBytes(bytesAcked);\n          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n        }\n\n        // bump the replica\u0027s generation stamp to newGS\n        rbw.getReplicaInfo().bumpReplicaGS(newGS);\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(rbw, ref);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
      "commitDate": "08/08/16 12:02 PM",
      "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
          "commitDate": "08/08/16 12:02 PM",
          "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/07/16 7:40 PM",
          "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 30.68,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,45 @@\n-  private synchronized ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n+  private ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    // check generation stamp\n-    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n-    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n-        replicaGenerationStamp \u003e newGS) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n-          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n-          newGS + \"].\");\n-    }\n-    \n-    // check replica length\n-    long bytesAcked \u003d rbw.getBytesAcked();\n-    long numBytes \u003d rbw.getNumBytes();\n-    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n-      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n-          rbw + \": BytesAcked \u003d \" + bytesAcked + \n-          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n-          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n-    }\n-\n-    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n-    try {\n-      // Truncate the potentially corrupt portion.\n-      // If the source was client and the last node in the pipeline was lost,\n-      // any corrupt data written after the acked length can go unnoticed.\n-      if (numBytes \u003e bytesAcked) {\n-        final File replicafile \u003d rbw.getBlockFile();\n-        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n-        rbw.setNumBytes(bytesAcked);\n-        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+      // check generation stamp\n+      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n+      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n+          replicaGenerationStamp \u003e newGS) {\n+        throw new ReplicaNotFoundException(\n+            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n+                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n+                newGS + \"].\");\n       }\n \n-      // bump the replica\u0027s generation stamp to newGS\n-      bumpReplicaGS(rbw, newGS);\n-    } catch (IOException e) {\n-      IOUtils.cleanup(null, ref);\n-      throw e;\n+      // check replica length\n+      long bytesAcked \u003d rbw.getBytesAcked();\n+      long numBytes \u003d rbw.getNumBytes();\n+      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n+        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n+            rbw + \": BytesAcked \u003d \" + bytesAcked +\n+            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n+            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n+      }\n+\n+      FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+      try {\n+        // Truncate the potentially corrupt portion.\n+        // If the source was client and the last node in the pipeline was lost,\n+        // any corrupt data written after the acked length can go unnoticed.\n+        if (numBytes \u003e bytesAcked) {\n+          final File replicafile \u003d rbw.getBlockFile();\n+          truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+          rbw.setNumBytes(bytesAcked);\n+          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+        }\n+\n+        // bump the replica\u0027s generation stamp to newGS\n+        bumpReplicaGS(rbw, newGS);\n+      } catch (IOException e) {\n+        IOUtils.cleanup(null, ref);\n+        throw e;\n+      }\n+      return new ReplicaHandler(rbw, ref);\n     }\n-    return new ReplicaHandler(rbw, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // check generation stamp\n      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n          replicaGenerationStamp \u003e newGS) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                newGS + \"].\");\n      }\n\n      // check replica length\n      long bytesAcked \u003d rbw.getBytesAcked();\n      long numBytes \u003d rbw.getNumBytes();\n      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n            rbw + \": BytesAcked \u003d \" + bytesAcked +\n            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n      }\n\n      FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n      try {\n        // Truncate the potentially corrupt portion.\n        // If the source was client and the last node in the pipeline was lost,\n        // any corrupt data written after the acked length can go unnoticed.\n        if (numBytes \u003e bytesAcked) {\n          final File replicafile \u003d rbw.getBlockFile();\n          truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n          rbw.setNumBytes(bytesAcked);\n          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n        }\n\n        // bump the replica\u0027s generation stamp to newGS\n        bumpReplicaGS(rbw, newGS);\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(rbw, ref);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
          "commitDate": "08/08/16 12:02 PM",
          "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/07/16 7:40 PM",
          "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 30.68,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,45 @@\n-  private synchronized ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n+  private ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    // check generation stamp\n-    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n-    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n-        replicaGenerationStamp \u003e newGS) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n-          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n-          newGS + \"].\");\n-    }\n-    \n-    // check replica length\n-    long bytesAcked \u003d rbw.getBytesAcked();\n-    long numBytes \u003d rbw.getNumBytes();\n-    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n-      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n-          rbw + \": BytesAcked \u003d \" + bytesAcked + \n-          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n-          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n-    }\n-\n-    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n-    try {\n-      // Truncate the potentially corrupt portion.\n-      // If the source was client and the last node in the pipeline was lost,\n-      // any corrupt data written after the acked length can go unnoticed.\n-      if (numBytes \u003e bytesAcked) {\n-        final File replicafile \u003d rbw.getBlockFile();\n-        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n-        rbw.setNumBytes(bytesAcked);\n-        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+      // check generation stamp\n+      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n+      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n+          replicaGenerationStamp \u003e newGS) {\n+        throw new ReplicaNotFoundException(\n+            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n+                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n+                newGS + \"].\");\n       }\n \n-      // bump the replica\u0027s generation stamp to newGS\n-      bumpReplicaGS(rbw, newGS);\n-    } catch (IOException e) {\n-      IOUtils.cleanup(null, ref);\n-      throw e;\n+      // check replica length\n+      long bytesAcked \u003d rbw.getBytesAcked();\n+      long numBytes \u003d rbw.getNumBytes();\n+      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n+        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n+            rbw + \": BytesAcked \u003d \" + bytesAcked +\n+            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n+            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n+      }\n+\n+      FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+      try {\n+        // Truncate the potentially corrupt portion.\n+        // If the source was client and the last node in the pipeline was lost,\n+        // any corrupt data written after the acked length can go unnoticed.\n+        if (numBytes \u003e bytesAcked) {\n+          final File replicafile \u003d rbw.getBlockFile();\n+          truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+          rbw.setNumBytes(bytesAcked);\n+          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+        }\n+\n+        // bump the replica\u0027s generation stamp to newGS\n+        bumpReplicaGS(rbw, newGS);\n+      } catch (IOException e) {\n+        IOUtils.cleanup(null, ref);\n+        throw e;\n+      }\n+      return new ReplicaHandler(rbw, ref);\n     }\n-    return new ReplicaHandler(rbw, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      // check generation stamp\n      long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n      if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n          replicaGenerationStamp \u003e newGS) {\n        throw new ReplicaNotFoundException(\n            ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n                \". Expected GS range is [\" + b.getGenerationStamp() + \", \" +\n                newGS + \"].\");\n      }\n\n      // check replica length\n      long bytesAcked \u003d rbw.getBytesAcked();\n      long numBytes \u003d rbw.getNumBytes();\n      if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd) {\n        throw new ReplicaNotFoundException(\"Unmatched length replica \" +\n            rbw + \": BytesAcked \u003d \" + bytesAcked +\n            \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" +\n            minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n      }\n\n      FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n      try {\n        // Truncate the potentially corrupt portion.\n        // If the source was client and the last node in the pipeline was lost,\n        // any corrupt data written after the acked length can go unnoticed.\n        if (numBytes \u003e bytesAcked) {\n          final File replicafile \u003d rbw.getBlockFile();\n          truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n          rbw.setNumBytes(bytesAcked);\n          rbw.setLastChecksumAndDataLen(bytesAcked, null);\n        }\n\n        // bump the replica\u0027s generation stamp to newGS\n        bumpReplicaGS(rbw, newGS);\n      } catch (IOException e) {\n        IOUtils.cleanup(null, ref);\n        throw e;\n      }\n      return new ReplicaHandler(rbw, ref);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
      "commitDate": "04/04/16 6:02 PM",
      "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,43 @@\n+  private synchronized ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n+      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n+      throws IOException {\n+    // check generation stamp\n+    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n+    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n+        replicaGenerationStamp \u003e newGS) {\n+      throw new ReplicaNotFoundException(\n+          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n+          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n+          newGS + \"].\");\n+    }\n+    \n+    // check replica length\n+    long bytesAcked \u003d rbw.getBytesAcked();\n+    long numBytes \u003d rbw.getNumBytes();\n+    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n+      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n+          rbw + \": BytesAcked \u003d \" + bytesAcked + \n+          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n+          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n+    }\n+\n+    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+    try {\n+      // Truncate the potentially corrupt portion.\n+      // If the source was client and the last node in the pipeline was lost,\n+      // any corrupt data written after the acked length can go unnoticed.\n+      if (numBytes \u003e bytesAcked) {\n+        final File replicafile \u003d rbw.getBlockFile();\n+        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+        rbw.setNumBytes(bytesAcked);\n+        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+      }\n+\n+      // bump the replica\u0027s generation stamp to newGS\n+      bumpReplicaGS(rbw, newGS);\n+    } catch (IOException e) {\n+      IOUtils.cleanup(null, ref);\n+      throw e;\n+    }\n+    return new ReplicaHandler(rbw, ref);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized ReplicaHandler recoverRbwImpl(ReplicaBeingWritten rbw,\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    long bytesAcked \u003d rbw.getBytesAcked();\n    long numBytes \u003d rbw.getNumBytes();\n    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          rbw + \": BytesAcked \u003d \" + bytesAcked + \n          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n    try {\n      // Truncate the potentially corrupt portion.\n      // If the source was client and the last node in the pipeline was lost,\n      // any corrupt data written after the acked length can go unnoticed.\n      if (numBytes \u003e bytesAcked) {\n        final File replicafile \u003d rbw.getBlockFile();\n        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n        rbw.setNumBytes(bytesAcked);\n        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n      }\n\n      // bump the replica\u0027s generation stamp to newGS\n      bumpReplicaGS(rbw, newGS);\n    } catch (IOException e) {\n      IOUtils.cleanup(null, ref);\n      throw e;\n    }\n    return new ReplicaHandler(rbw, ref);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java"
    }
  }
}