{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FixedLengthRecordReader.java",
  "functionName": "nextKeyValue",
  "functionId": "nextKeyValue",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FixedLengthRecordReader.java",
  "functionStartLine": 134,
  "functionEndLine": 175,
  "numCommitsSeen": 3,
  "timeTaken": 444,
  "changeHistory": [
    "eeda370249d3f65a36718942a15867f79654ff66"
  ],
  "changeHistoryShort": {
    "eeda370249d3f65a36718942a15867f79654ff66": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eeda370249d3f65a36718942a15867f79654ff66": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-1176. FixedLengthInputFormat and FixedLengthRecordReader (Mariappan Asokan and BitsOfInfo via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540931 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/11/13 7:06 PM",
      "commitName": "eeda370249d3f65a36718942a15867f79654ff66",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,42 @@\n+  public synchronized boolean nextKeyValue() throws IOException {\n+    if (key \u003d\u003d null) {\n+      key \u003d new LongWritable();\n+    }\n+    if (value \u003d\u003d null) {\n+      value \u003d new BytesWritable(new byte[recordLength]);\n+    }\n+    boolean dataRead \u003d false;\n+    value.setSize(recordLength);\n+    byte[] record \u003d value.getBytes();\n+    if (numRecordsRemainingInSplit \u003e 0) {\n+      key.set(pos);\n+      int offset \u003d 0;\n+      int numBytesToRead \u003d recordLength;\n+      int numBytesRead \u003d 0;\n+      while (numBytesToRead \u003e 0) {\n+        numBytesRead \u003d inputStream.read(record, offset, numBytesToRead);\n+        if (numBytesRead \u003d\u003d -1) {\n+          // EOF\n+          break;\n+        }\n+        offset +\u003d numBytesRead;\n+        numBytesToRead -\u003d numBytesRead;\n+      }\n+      numBytesRead \u003d recordLength - numBytesToRead;\n+      pos +\u003d numBytesRead;\n+      if (numBytesRead \u003e 0) {\n+        dataRead \u003d true;\n+        if (numBytesRead \u003e\u003d recordLength) {\n+          if (!isCompressedInput) {\n+            numRecordsRemainingInSplit--;\n+          }\n+        } else {\n+          throw new IOException(\"Partial record(length \u003d \" + numBytesRead\n+              + \") found at the end of split.\");\n+        }\n+      } else {\n+        numRecordsRemainingInSplit \u003d 0L; // End of input.\n+      }\n+    }\n+    return dataRead;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized boolean nextKeyValue() throws IOException {\n    if (key \u003d\u003d null) {\n      key \u003d new LongWritable();\n    }\n    if (value \u003d\u003d null) {\n      value \u003d new BytesWritable(new byte[recordLength]);\n    }\n    boolean dataRead \u003d false;\n    value.setSize(recordLength);\n    byte[] record \u003d value.getBytes();\n    if (numRecordsRemainingInSplit \u003e 0) {\n      key.set(pos);\n      int offset \u003d 0;\n      int numBytesToRead \u003d recordLength;\n      int numBytesRead \u003d 0;\n      while (numBytesToRead \u003e 0) {\n        numBytesRead \u003d inputStream.read(record, offset, numBytesToRead);\n        if (numBytesRead \u003d\u003d -1) {\n          // EOF\n          break;\n        }\n        offset +\u003d numBytesRead;\n        numBytesToRead -\u003d numBytesRead;\n      }\n      numBytesRead \u003d recordLength - numBytesToRead;\n      pos +\u003d numBytesRead;\n      if (numBytesRead \u003e 0) {\n        dataRead \u003d true;\n        if (numBytesRead \u003e\u003d recordLength) {\n          if (!isCompressedInput) {\n            numRecordsRemainingInSplit--;\n          }\n        } else {\n          throw new IOException(\"Partial record(length \u003d \" + numBytesRead\n              + \") found at the end of split.\");\n        }\n      } else {\n        numRecordsRemainingInSplit \u003d 0L; // End of input.\n      }\n    }\n    return dataRead;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FixedLengthRecordReader.java"
    }
  }
}