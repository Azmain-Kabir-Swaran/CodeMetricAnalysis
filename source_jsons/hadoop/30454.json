{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineWebServices.java",
  "functionName": "getEntity",
  "functionId": "getEntity___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__entityType-String(annotations-@PathParam(\"entityType\"))__entityId-String(annotations-@PathParam(\"entityId\"))__fields-String(annotations-@QueryParam(\"fields\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
  "functionStartLine": 151,
  "functionEndLine": 182,
  "numCommitsSeen": 29,
  "timeTaken": 2698,
  "changeHistory": [
    "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "892ada8fb35d57a1120d548fdefb056824aa939f",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "23b2e43f5d678517e33590d15dec73225b9c5682",
    "484faadffec97f8e454cf18b821f6ef12a27616c"
  ],
  "changeHistoryShort": {
    "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "892ada8fb35d57a1120d548fdefb056824aa939f": "Ybodychange",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "23b2e43f5d678517e33590d15dec73225b9c5682": "Ybodychange",
    "484faadffec97f8e454cf18b821f6ef12a27616c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8415. TimelineWebServices.getEntity should throw ForbiddenException instead of 404 when ACL checks fail. Contributed by Suma Shivaprasad.\n",
      "commitDate": "02/07/18 3:34 PM",
      "commitName": "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/08/17 2:56 AM",
      "commitNameOld": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 329.53,
      "commitsBetweenForRepo": 3004,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     TimelineEntity entity \u003d null;\n     try {\n       entity \u003d timelineDataManager.getEntity(\n           parseStr(entityType),\n           parseStr(entityId),\n           parseFieldsStr(fields, \",\"),\n           getUser(req));\n+    } catch (YarnException e) {\n+      // The user doesn\u0027t have the access to override the existing domain.\n+      LOG.info(e.getMessage(), e);\n+      throw new ForbiddenException(e);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(e);\n     } catch (Exception e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new NotFoundException(\"Timeline entity \"\n           + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n           + \" is not found\");\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineDataManager.getEntity(\n          parseStr(entityType),\n          parseStr(entityId),\n          parseFieldsStr(fields, \",\"),\n          getUser(req));\n    } catch (YarnException e) {\n      // The user doesn\u0027t have the access to override the existing domain.\n      LOG.info(e.getMessage(), e);\n      throw new ForbiddenException(e);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(e);\n    } catch (Exception e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new NotFoundException(\"Timeline entity \"\n          + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n          + \" is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "07/12/15 1:46 AM",
      "commitNameOld": "01a641bc447c464b2830d58addd482f47dbd92ae",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 94.38,
      "commitsBetweenForRepo": 603,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     TimelineEntity entity \u003d null;\n     try {\n       entity \u003d timelineDataManager.getEntity(\n           parseStr(entityType),\n           parseStr(entityId),\n           parseFieldsStr(fields, \",\"),\n           getUser(req));\n     } catch (IllegalArgumentException e) {\n-      throw new BadRequestException(\n-          \"requested invalid field.\");\n+      throw new BadRequestException(e);\n     } catch (Exception e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new NotFoundException(\"Timeline entity \"\n           + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n           + \" is not found\");\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineDataManager.getEntity(\n          parseStr(entityType),\n          parseStr(entityId),\n          parseFieldsStr(fields, \",\"),\n          getUser(req));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(e);\n    } catch (Exception e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new NotFoundException(\"Timeline entity \"\n          + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n          + \" is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 12:21 AM",
      "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/07/14 9:33 PM",
      "commitNameOld": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.12,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,29 @@\n   public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     TimelineEntity entity \u003d null;\n     try {\n-      EnumSet\u003cField\u003e fieldEnums \u003d parseFieldsStr(fields, \",\");\n-      boolean modified \u003d extendFields(fieldEnums);\n-      entity \u003d\n-          store.getEntity(parseStr(entityId), parseStr(entityType),\n-              fieldEnums);\n-      if (entity !\u003d null) {\n-        // check ACLs\n-        UserGroupInformation callerUGI \u003d getUser(req);\n-        if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n-          entity \u003d null;\n-        } else {\n-          // clean up the system data\n-          if (modified) {\n-            entity.setPrimaryFilters(null);\n-          } else {\n-            cleanupOwnerInfo(entity);\n-          }\n-        }\n-      }\n+      entity \u003d timelineDataManager.getEntity(\n+          parseStr(entityType),\n+          parseStr(entityId),\n+          parseFieldsStr(fields, \",\"),\n+          getUser(req));\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\n           \"requested invalid field.\");\n-    } catch (IOException e) {\n-      LOG.error(\"Error getting entity\", e);\n-      throw new WebApplicationException(e,\n-          Response.Status.INTERNAL_SERVER_ERROR);\n-    } catch (YarnException e) {\n+    } catch (Exception e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new NotFoundException(\"Timeline entity \"\n           + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n           + \" is not found\");\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineDataManager.getEntity(\n          parseStr(entityType),\n          parseStr(entityId),\n          parseFieldsStr(fields, \",\"),\n          getUser(req));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (Exception e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new NotFoundException(\"Timeline entity \"\n          + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n          + \" is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      EnumSet\u003cField\u003e fieldEnums \u003d parseFieldsStr(fields, \",\");\n      boolean modified \u003d extendFields(fieldEnums);\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              fieldEnums);\n      if (entity !\u003d null) {\n        // check ACLs\n        UserGroupInformation callerUGI \u003d getUser(req);\n        if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n          entity \u003d null;\n        } else {\n          // clean up the system data\n          if (modified) {\n            entity.setPrimaryFilters(null);\n          } else {\n            cleanupOwnerInfo(entity);\n          }\n        }\n      }\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (YarnException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new NotFoundException(\"Timeline entity \"\n          + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n          + \" is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java"
      }
    },
    "892ada8fb35d57a1120d548fdefb056824aa939f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1937. Added owner-only ACLs support for Timeline Client and server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597186 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 2:19 PM",
      "commitName": "892ada8fb35d57a1120d548fdefb056824aa939f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/03/14 11:14 AM",
      "commitNameOld": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 60.13,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,47 @@\n   public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     TimelineEntity entity \u003d null;\n     try {\n+      EnumSet\u003cField\u003e fieldEnums \u003d parseFieldsStr(fields, \",\");\n+      boolean modified \u003d extendFields(fieldEnums);\n       entity \u003d\n           store.getEntity(parseStr(entityId), parseStr(entityType),\n-              parseFieldsStr(fields, \",\"));\n+              fieldEnums);\n+      if (entity !\u003d null) {\n+        // check ACLs\n+        UserGroupInformation callerUGI \u003d getUser(req);\n+        if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n+          entity \u003d null;\n+        } else {\n+          // clean up the system data\n+          if (modified) {\n+            entity.setPrimaryFilters(null);\n+          } else {\n+            cleanupOwnerInfo(entity);\n+          }\n+        }\n+      }\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\n           \"requested invalid field.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n+    } catch (YarnException e) {\n+      LOG.error(\"Error getting entity\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n-      throw new WebApplicationException(Response.Status.NOT_FOUND);\n+      throw new NotFoundException(\"Timeline entity \"\n+          + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n+          + \" is not found\");\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      EnumSet\u003cField\u003e fieldEnums \u003d parseFieldsStr(fields, \",\");\n      boolean modified \u003d extendFields(fieldEnums);\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              fieldEnums);\n      if (entity !\u003d null) {\n        // check ACLs\n        UserGroupInformation callerUGI \u003d getUser(req);\n        if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n          entity \u003d null;\n        } else {\n          // clean up the system data\n          if (modified) {\n            entity.setPrimaryFilters(null);\n          } else {\n            cleanupOwnerInfo(entity);\n          }\n        }\n      }\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    } catch (YarnException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new NotFoundException(\"Timeline entity \"\n          + new EntityIdentifier(parseStr(entityId), parseStr(entityType))\n          + \" is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public ATSEntity getEntity(\n+  public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n-    ATSEntity entity \u003d null;\n+    TimelineEntity entity \u003d null;\n     try {\n       entity \u003d\n           store.getEntity(parseStr(entityId), parseStr(entityType),\n               parseFieldsStr(fields, \",\"));\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\n           \"requested invalid field.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new WebApplicationException(Response.Status.NOT_FOUND);\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              parseFieldsStr(fields, \",\"));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new WebApplicationException(Response.Status.NOT_FOUND);\n    }\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public ATSEntity getEntity(\n+  public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n-    ATSEntity entity \u003d null;\n+    TimelineEntity entity \u003d null;\n     try {\n       entity \u003d\n           store.getEntity(parseStr(entityId), parseStr(entityType),\n               parseFieldsStr(fields, \",\"));\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\n           \"requested invalid field.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new WebApplicationException(Response.Status.NOT_FOUND);\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              parseFieldsStr(fields, \",\"));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new WebApplicationException(Response.Status.NOT_FOUND);\n    }\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldValue": "ATSEntity",
            "newValue": "TimelineEntity"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public ATSEntity getEntity(\n+  public TimelineEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n-    ATSEntity entity \u003d null;\n+    TimelineEntity entity \u003d null;\n     try {\n       entity \u003d\n           store.getEntity(parseStr(entityId), parseStr(entityType),\n               parseFieldsStr(fields, \",\"));\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\n           \"requested invalid field.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new WebApplicationException(Response.Status.NOT_FOUND);\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              parseFieldsStr(fields, \",\"));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new WebApplicationException(Response.Status.NOT_FOUND);\n    }\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "23b2e43f5d678517e33590d15dec73225b9c5682": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1635. Implemented a Leveldb based ApplicationTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 6:15 PM",
      "commitName": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/02/14 9:02 AM",
      "commitNameOld": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.38,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   public ATSEntity getEntity(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @PathParam(\"entityId\") String entityId,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     ATSEntity entity \u003d null;\n     try {\n       entity \u003d\n           store.getEntity(parseStr(entityId), parseStr(entityType),\n               parseFieldsStr(fields, \",\"));\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\n           \"requested invalid field.\");\n+    } catch (IOException e) {\n+      LOG.error(\"Error getting entity\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (entity \u003d\u003d null) {\n       throw new WebApplicationException(Response.Status.NOT_FOUND);\n     }\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    ATSEntity entity \u003d null;\n    try {\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              parseFieldsStr(fields, \",\"));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (entity \u003d\u003d null) {\n      throw new WebApplicationException(Response.Status.NOT_FOUND);\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java",
      "extendedDetails": {}
    },
    "484faadffec97f8e454cf18b821f6ef12a27616c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1636. Augmented Application-history server\u0027s web-services to also expose new APIs for retrieving and storing timeline information. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 9:02 AM",
      "commitName": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public ATSEntity getEntity(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"entityType\") String entityType,\n+      @PathParam(\"entityId\") String entityId,\n+      @QueryParam(\"fields\") String fields) {\n+    init(res);\n+    ATSEntity entity \u003d null;\n+    try {\n+      entity \u003d\n+          store.getEntity(parseStr(entityId), parseStr(entityType),\n+              parseFieldsStr(fields, \",\"));\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\n+          \"requested invalid field.\");\n+    }\n+    if (entity \u003d\u003d null) {\n+      throw new WebApplicationException(Response.Status.NOT_FOUND);\n+    }\n+    return entity;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEntity getEntity(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @PathParam(\"entityId\") String entityId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    ATSEntity entity \u003d null;\n    try {\n      entity \u003d\n          store.getEntity(parseStr(entityId), parseStr(entityType),\n              parseFieldsStr(fields, \",\"));\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\n          \"requested invalid field.\");\n    }\n    if (entity \u003d\u003d null) {\n      throw new WebApplicationException(Response.Status.NOT_FOUND);\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java"
    }
  }
}