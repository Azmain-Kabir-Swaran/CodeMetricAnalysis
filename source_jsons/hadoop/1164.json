{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockStoragePolicy.java",
  "functionName": "chooseStorageTypes",
  "functionId": "chooseStorageTypes___replication-short(modifiers-final)__chosen-Iterable__StorageType__(modifiers-final)__unavailables-EnumSet__StorageType__(modifiers-final)__isNewBlock-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
  "functionStartLine": 135,
  "functionEndLine": 168,
  "numCommitsSeen": 58,
  "timeTaken": 4213,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "122cad6aec5839d8d515c5008425ecb34f2fa56b",
    "12f4df043fb6922c6ce1c470a2e020b4111f8739",
    "073bbd805c6680f47bbfcc6e8efd708ad729bca4",
    "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
    "ac5e8aed7ca1e9493f96f8795d0caafd5282b9a7"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "122cad6aec5839d8d515c5008425ecb34f2fa56b": "Ybodychange",
    "12f4df043fb6922c6ce1c470a2e020b4111f8739": "Yfilerename",
    "073bbd805c6680f47bbfcc6e8efd708ad729bca4": "Ymovefromfile",
    "e69954d22cc97eb3818c8ee7c3f623a5d0497b54": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "ac5e8aed7ca1e9493f96f8795d0caafd5282b9a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/06/15 11:41 AM",
      "commitNameOld": "122cad6aec5839d8d515c5008425ecb34f2fa56b",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 102.0,
      "commitsBetweenForRepo": 671,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n       final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n-    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003c\u003e();\n     final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n         replication, chosen, excess);\n     final int expectedSize \u003d storageTypes.size() - excess.size();\n-    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003c\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n       if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n             getCreationFallback(unavailables)\n             : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n     // remove excess storage types after fallback replacement.\n     diff(storageTypes, excess, null);\n     if (storageTypes.size() \u003c expectedSize) {\n       LOG.warn(\"Failed to place enough replicas: expected size is {}\"\n           + \" but only {} storage types can be selected (replication\u003d{},\"\n           + \" selected\u003d{}, unavailable\u003d{}\" + \", removed\u003d{}\" + \", policy\u003d{}\"\n           + \")\", expectedSize, storageTypes.size(), replication, storageTypes,\n           unavailables, removed, this);\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003c\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003c\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is {}\"\n          + \" but only {} storage types can be selected (replication\u003d{},\"\n          + \" selected\u003d{}, unavailable\u003d{}\" + \", removed\u003d{}\" + \", policy\u003d{}\"\n          + \")\", expectedSize, storageTypes.size(), replication, storageTypes,\n          unavailables, removed, this);\n    }\n    return storageTypes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
      "extendedDetails": {}
    },
    "122cad6aec5839d8d515c5008425ecb34f2fa56b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6564. Use slf4j instead of common-logging in hdfs-client. Contributed by Rakesh R.\n",
      "commitDate": "23/06/15 11:41 AM",
      "commitName": "122cad6aec5839d8d515c5008425ecb34f2fa56b",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "18/05/15 11:36 AM",
      "commitNameOld": "a2190bf15d25e01fb4b220ba6401ce2f787a5c61",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 36.0,
      "commitsBetweenForRepo": 256,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,34 @@\n   public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n       final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n     final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n     final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n         replication, chosen, excess);\n     final int expectedSize \u003d storageTypes.size() - excess.size();\n     final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n       if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n             getCreationFallback(unavailables)\n             : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n     // remove excess storage types after fallback replacement.\n     diff(storageTypes, excess, null);\n     if (storageTypes.size() \u003c expectedSize) {\n-      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize\n-          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n-          + \"(replication\u003d\" + replication\n-          + \", selected\u003d\" + storageTypes\n-          + \", unavailable\u003d\" + unavailables\n-          + \", removed\u003d\" + removed\n-          + \", policy\u003d\" + this + \")\");\n+      LOG.warn(\"Failed to place enough replicas: expected size is {}\"\n+          + \" but only {} storage types can be selected (replication\u003d{},\"\n+          + \" selected\u003d{}, unavailable\u003d{}\" + \", removed\u003d{}\" + \", policy\u003d{}\"\n+          + \")\", expectedSize, storageTypes.size(), replication, storageTypes,\n+          unavailables, removed, this);\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is {}\"\n          + \" but only {} storage types can be selected (replication\u003d{},\"\n          + \" selected\u003d{}, unavailable\u003d{}\" + \", removed\u003d{}\" + \", policy\u003d{}\"\n          + \")\", expectedSize, storageTypes.size(), replication, storageTypes,\n          unavailables, removed, this);\n    }\n    return storageTypes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
      "extendedDetails": {}
    },
    "12f4df043fb6922c6ce1c470a2e020b4111f8739": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8218. Move classes that used by ClientProtocol into hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "22/04/15 11:33 AM",
      "commitName": "12f4df043fb6922c6ce1c470a2e020b4111f8739",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/04/15 11:28 AM",
      "commitNameOld": "252e69f562383383cf539b29f1da68676b7ce0c0",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize\n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java"
      }
    },
    "073bbd805c6680f47bbfcc6e8efd708ad729bca4": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-7081. Add new DistributedFileSystem API for getting all the existing storage policies. Contributed by Jing Zhao.\n",
      "commitDate": "24/09/14 10:05 AM",
      "commitName": "073bbd805c6680f47bbfcc6e8efd708ad729bca4",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/09/14 9:09 AM",
      "commitNameOld": "7af4c3888bf7be0822dc880170e5e3d09e9280f1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n       final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n     final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n     final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n         replication, chosen, excess);\n     final int expectedSize \u003d storageTypes.size() - excess.size();\n     final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n       if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n             getCreationFallback(unavailables)\n             : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n     // remove excess storage types after fallback replacement.\n     diff(storageTypes, excess, null);\n     if (storageTypes.size() \u003c expectedSize) {\n-      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n+      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize\n           + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n           + \"(replication\u003d\" + replication\n           + \", selected\u003d\" + storageTypes\n           + \", unavailable\u003d\" + unavailables\n           + \", removed\u003d\" + removed\n           + \", policy\u003d\" + this + \")\");\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize\n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/BlockStoragePolicy.java",
        "oldMethodName": "chooseStorageTypes",
        "newMethodName": "chooseStorageTypes"
      }
    },
    "e69954d22cc97eb3818c8ee7c3f623a5d0497b54": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/14 4:42 PM",
      "commitName": "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/14 4:42 PM",
          "commitName": "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/08/14 4:41 PM",
          "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private static List\u003cStorageType\u003e selectStorageTypes(\n-      final BlockStoragePolicy storagePolicy,\n-      final short replication,\n+  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n-      final EnumSet\u003cStorageType\u003e unavailableStorages,\n+      final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n-    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n-        replication, chosen);\n-    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n+        replication, chosen, excess);\n+    final int expectedSize \u003d storageTypes.size() - excess.size();\n+    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n-      if (unavailableStorages.contains(t)) {\n+      if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n-            storagePolicy.getCreationFallback(unavailableStorages)\n-            : storagePolicy.getReplicationFallback(unavailableStorages);\n+            getCreationFallback(unavailables)\n+            : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n-    if (storageTypes.size() \u003c replication) {\n-      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n+    // remove excess storage types after fallback replacement.\n+    diff(storageTypes, excess, null);\n+    if (storageTypes.size() \u003c expectedSize) {\n+      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n           + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n-          + \"(selected\u003d\" + storageTypes\n-          + \", unavailable\u003d\" + unavailableStorages\n+          + \"(replication\u003d\" + replication\n+          + \", selected\u003d\" + storageTypes\n+          + \", unavailable\u003d\" + unavailables\n           + \", removed\u003d\" + removed\n-          + \", policy\u003d\" + storagePolicy + \")\");\n+          + \", policy\u003d\" + this + \")\");\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
            "oldMethodName": "selectStorageTypes",
            "newMethodName": "chooseStorageTypes"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/14 4:42 PM",
          "commitName": "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/08/14 4:41 PM",
          "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private static List\u003cStorageType\u003e selectStorageTypes(\n-      final BlockStoragePolicy storagePolicy,\n-      final short replication,\n+  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n-      final EnumSet\u003cStorageType\u003e unavailableStorages,\n+      final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n-    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n-        replication, chosen);\n-    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n+        replication, chosen, excess);\n+    final int expectedSize \u003d storageTypes.size() - excess.size();\n+    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n-      if (unavailableStorages.contains(t)) {\n+      if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n-            storagePolicy.getCreationFallback(unavailableStorages)\n-            : storagePolicy.getReplicationFallback(unavailableStorages);\n+            getCreationFallback(unavailables)\n+            : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n-    if (storageTypes.size() \u003c replication) {\n-      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n+    // remove excess storage types after fallback replacement.\n+    diff(storageTypes, excess, null);\n+    if (storageTypes.size() \u003c expectedSize) {\n+      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n           + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n-          + \"(selected\u003d\" + storageTypes\n-          + \", unavailable\u003d\" + unavailableStorages\n+          + \"(replication\u003d\" + replication\n+          + \", selected\u003d\" + storageTypes\n+          + \", unavailable\u003d\" + unavailables\n           + \", removed\u003d\" + removed\n-          + \", policy\u003d\" + storagePolicy + \")\");\n+          + \", policy\u003d\" + this + \")\");\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/14 4:42 PM",
          "commitName": "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/08/14 4:41 PM",
          "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private static List\u003cStorageType\u003e selectStorageTypes(\n-      final BlockStoragePolicy storagePolicy,\n-      final short replication,\n+  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n-      final EnumSet\u003cStorageType\u003e unavailableStorages,\n+      final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n-    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n-        replication, chosen);\n-    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n+        replication, chosen, excess);\n+    final int expectedSize \u003d storageTypes.size() - excess.size();\n+    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n-      if (unavailableStorages.contains(t)) {\n+      if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n-            storagePolicy.getCreationFallback(unavailableStorages)\n-            : storagePolicy.getReplicationFallback(unavailableStorages);\n+            getCreationFallback(unavailables)\n+            : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n-    if (storageTypes.size() \u003c replication) {\n-      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n+    // remove excess storage types after fallback replacement.\n+    diff(storageTypes, excess, null);\n+    if (storageTypes.size() \u003c expectedSize) {\n+      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n           + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n-          + \"(selected\u003d\" + storageTypes\n-          + \", unavailable\u003d\" + unavailableStorages\n+          + \"(replication\u003d\" + replication\n+          + \", selected\u003d\" + storageTypes\n+          + \", unavailable\u003d\" + unavailables\n           + \", removed\u003d\" + removed\n-          + \", policy\u003d\" + storagePolicy + \")\");\n+          + \", policy\u003d\" + this + \")\");\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/14 4:42 PM",
          "commitName": "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/08/14 4:41 PM",
          "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private static List\u003cStorageType\u003e selectStorageTypes(\n-      final BlockStoragePolicy storagePolicy,\n-      final short replication,\n+  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n-      final EnumSet\u003cStorageType\u003e unavailableStorages,\n+      final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n-    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n-        replication, chosen);\n-    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n+        replication, chosen, excess);\n+    final int expectedSize \u003d storageTypes.size() - excess.size();\n+    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n-      if (unavailableStorages.contains(t)) {\n+      if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n-            storagePolicy.getCreationFallback(unavailableStorages)\n-            : storagePolicy.getReplicationFallback(unavailableStorages);\n+            getCreationFallback(unavailables)\n+            : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n-    if (storageTypes.size() \u003c replication) {\n-      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n+    // remove excess storage types after fallback replacement.\n+    diff(storageTypes, excess, null);\n+    if (storageTypes.size() \u003c expectedSize) {\n+      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n           + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n-          + \"(selected\u003d\" + storageTypes\n-          + \", unavailable\u003d\" + unavailableStorages\n+          + \"(replication\u003d\" + replication\n+          + \", selected\u003d\" + storageTypes\n+          + \", unavailable\u003d\" + unavailables\n           + \", removed\u003d\" + removed\n-          + \", policy\u003d\" + storagePolicy + \")\");\n+          + \", policy\u003d\" + this + \")\");\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
          "extendedDetails": {
            "oldValue": "selectStorageTypes",
            "newValue": "chooseStorageTypes"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6906. Archival Storage: Add more tests for BlockStoragePolicy. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1619628 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/14 4:42 PM",
          "commitName": "e69954d22cc97eb3818c8ee7c3f623a5d0497b54",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "21/08/14 4:41 PM",
          "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private static List\u003cStorageType\u003e selectStorageTypes(\n-      final BlockStoragePolicy storagePolicy,\n-      final short replication,\n+  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n       final Iterable\u003cStorageType\u003e chosen,\n-      final EnumSet\u003cStorageType\u003e unavailableStorages,\n+      final EnumSet\u003cStorageType\u003e unavailables,\n       final boolean isNewBlock) {\n-    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n-        replication, chosen);\n-    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n+    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n+        replication, chosen, excess);\n+    final int expectedSize \u003d storageTypes.size() - excess.size();\n+    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n     for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n       // replace/remove unavailable storage types.\n       final StorageType t \u003d storageTypes.get(i);\n-      if (unavailableStorages.contains(t)) {\n+      if (unavailables.contains(t)) {\n         final StorageType fallback \u003d isNewBlock?\n-            storagePolicy.getCreationFallback(unavailableStorages)\n-            : storagePolicy.getReplicationFallback(unavailableStorages);\n+            getCreationFallback(unavailables)\n+            : getReplicationFallback(unavailables);\n         if (fallback \u003d\u003d null) {\n           removed.add(storageTypes.remove(i));\n         } else {\n           storageTypes.set(i, fallback);\n         }\n       }\n     }\n-    if (storageTypes.size() \u003c replication) {\n-      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n+    // remove excess storage types after fallback replacement.\n+    diff(storageTypes, excess, null);\n+    if (storageTypes.size() \u003c expectedSize) {\n+      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n           + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n-          + \"(selected\u003d\" + storageTypes\n-          + \", unavailable\u003d\" + unavailableStorages\n+          + \"(replication\u003d\" + replication\n+          + \", selected\u003d\" + storageTypes\n+          + \", unavailable\u003d\" + unavailables\n           + \", removed\u003d\" + removed\n-          + \", policy\u003d\" + storagePolicy + \")\");\n+          + \", policy\u003d\" + this + \")\");\n     }\n     return storageTypes;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cStorageType\u003e chooseStorageTypes(final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailables,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e excess \u003d new LinkedList\u003cStorageType\u003e();\n    final List\u003cStorageType\u003e storageTypes \u003d chooseStorageTypes(\n        replication, chosen, excess);\n    final int expectedSize \u003d storageTypes.size() - excess.size();\n    final List\u003cStorageType\u003e removed \u003d new LinkedList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailables.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            getCreationFallback(unavailables)\n            : getReplicationFallback(unavailables);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    // remove excess storage types after fallback replacement.\n    diff(storageTypes, excess, null);\n    if (storageTypes.size() \u003c expectedSize) {\n      LOG.warn(\"Failed to place enough replicas: expected size is \" + expectedSize \n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(replication\u003d\" + replication\n          + \", selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailables\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + this + \")\");\n    }\n    return storageTypes;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockStoragePolicy.java",
          "extendedDetails": {
            "oldValue": "[storagePolicy-BlockStoragePolicy(modifiers-final), replication-short(modifiers-final), chosen-Iterable\u003cStorageType\u003e(modifiers-final), unavailableStorages-EnumSet\u003cStorageType\u003e(modifiers-final), isNewBlock-boolean(modifiers-final)]",
            "newValue": "[replication-short(modifiers-final), chosen-Iterable\u003cStorageType\u003e(modifiers-final), unavailables-EnumSet\u003cStorageType\u003e(modifiers-final), isNewBlock-boolean(modifiers-final)]"
          }
        }
      ]
    },
    "ac5e8aed7ca1e9493f96f8795d0caafd5282b9a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6686. Change BlockPlacementPolicy to use fallback when some storage types are unavailable.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1612880 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 10:25 AM",
      "commitName": "ac5e8aed7ca1e9493f96f8795d0caafd5282b9a7",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,33 @@\n+  private static List\u003cStorageType\u003e selectStorageTypes(\n+      final BlockStoragePolicy storagePolicy,\n+      final short replication,\n+      final Iterable\u003cStorageType\u003e chosen,\n+      final EnumSet\u003cStorageType\u003e unavailableStorages,\n+      final boolean isNewBlock) {\n+    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n+        replication, chosen);\n+    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n+    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n+      // replace/remove unavailable storage types.\n+      final StorageType t \u003d storageTypes.get(i);\n+      if (unavailableStorages.contains(t)) {\n+        final StorageType fallback \u003d isNewBlock?\n+            storagePolicy.getCreationFallback(unavailableStorages)\n+            : storagePolicy.getReplicationFallback(unavailableStorages);\n+        if (fallback \u003d\u003d null) {\n+          removed.add(storageTypes.remove(i));\n+        } else {\n+          storageTypes.set(i, fallback);\n+        }\n+      }\n+    }\n+    if (storageTypes.size() \u003c replication) {\n+      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n+          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n+          + \"(selected\u003d\" + storageTypes\n+          + \", unavailable\u003d\" + unavailableStorages\n+          + \", removed\u003d\" + removed\n+          + \", policy\u003d\" + storagePolicy + \")\");\n+    }\n+    return storageTypes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cStorageType\u003e selectStorageTypes(\n      final BlockStoragePolicy storagePolicy,\n      final short replication,\n      final Iterable\u003cStorageType\u003e chosen,\n      final EnumSet\u003cStorageType\u003e unavailableStorages,\n      final boolean isNewBlock) {\n    final List\u003cStorageType\u003e storageTypes \u003d storagePolicy.chooseStorageTypes(\n        replication, chosen);\n    final List\u003cStorageType\u003e removed \u003d new ArrayList\u003cStorageType\u003e();\n    for(int i \u003d storageTypes.size() - 1; i \u003e\u003d 0; i--) {\n      // replace/remove unavailable storage types.\n      final StorageType t \u003d storageTypes.get(i);\n      if (unavailableStorages.contains(t)) {\n        final StorageType fallback \u003d isNewBlock?\n            storagePolicy.getCreationFallback(unavailableStorages)\n            : storagePolicy.getReplicationFallback(unavailableStorages);\n        if (fallback \u003d\u003d null) {\n          removed.add(storageTypes.remove(i));\n        } else {\n          storageTypes.set(i, fallback);\n        }\n      }\n    }\n    if (storageTypes.size() \u003c replication) {\n      LOG.warn(\"Failed to place enough replicas: replication is \" + replication\n          + \" but only \" + storageTypes.size() + \" storage types can be selected \"\n          + \"(selected\u003d\" + storageTypes\n          + \", unavailable\u003d\" + unavailableStorages\n          + \", removed\u003d\" + removed\n          + \", policy\u003d\" + storagePolicy + \")\");\n    }\n    return storageTypes;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java"
    }
  }
}