{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppSchedulingInfo.java",
  "functionName": "move",
  "functionId": "move___newQueue-Queue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
  "functionStartLine": 595,
  "functionEndLine": 631,
  "numCommitsSeen": 80,
  "timeTaken": 6000,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "937ef39b3ff90f72392b7a319e4346344db34e03",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "9ca54f4810de182195263bd594afb56dab564105",
    "1831be8e737fd423a9f3d590767b944147e85641",
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "7360cec692be5dcc3377ae5082fe22870caac96b",
    "981679e6d7650141fc8737c7e13b16d8b795b408"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "937ef39b3ff90f72392b7a319e4346344db34e03": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "9ca54f4810de182195263bd594afb56dab564105": "Ybodychange",
    "1831be8e737fd423a9f3d590767b944147e85641": "Ymultichange(Ymodifierchange,Ybodychange)",
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "7360cec692be5dcc3377ae5082fe22870caac96b": "Ybodychange",
    "981679e6d7650141fc8737c7e13b16d8b795b408": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void move(Queue newQueue) {\n+    this.writeLock.lock();\n     try {\n-      this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       for (AppPlacementAllocator ap : schedulerKeyToAppPlacementAllocator\n           .values()) {\n         PendingAsk ask \u003d ap.getPendingAsk(ResourceRequest.ANY);\n         if (ask.getCount() \u003e 0) {\n           oldMetrics.decrPendingResources(\n               ap.getPrimaryRequestedNodePartition(),\n               user, ask.getCount(), ask.getPerAllocationResource());\n           newMetrics.incrPendingResources(\n               ap.getPrimaryRequestedNodePartition(),\n               user, ask.getCount(), ask.getPerAllocationResource());\n \n           Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n               ask.getCount());\n           // Update Queue\n           queue.decPendingResource(\n               ap.getPrimaryRequestedNodePartition(), delta);\n           newQueue.incPendingResource(\n               ap.getPrimaryRequestedNodePartition(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n       abstractUsersManager.deactivateApplication(user, applicationId);\n       abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n       if (!schedulerKeys.isEmpty()) {\n         abstractUsersManager.activateApplication(user, applicationId);\n       }\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    this.writeLock.lock();\n    try {\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (AppPlacementAllocator ap : schedulerKeyToAppPlacementAllocator\n          .values()) {\n        PendingAsk ask \u003d ap.getPendingAsk(ResourceRequest.ANY);\n        if (ask.getCount() \u003e 0) {\n          oldMetrics.decrPendingResources(\n              ap.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n          newMetrics.incrPendingResources(\n              ap.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n\n          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n              ask.getCount());\n          // Update Queue\n          queue.decPendingResource(\n              ap.getPrimaryRequestedNodePartition(), delta);\n          newQueue.incPendingResource(\n              ap.getPrimaryRequestedNodePartition(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      abstractUsersManager.deactivateApplication(user, applicationId);\n      abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n      if (!schedulerKeys.isEmpty()) {\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "937ef39b3ff90f72392b7a319e4346344db34e03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8421: when moving app, activeUsers is increased, even though app does not have outstanding request. Contributed by Kyungwan Nam\n",
      "commitDate": "16/07/18 9:24 AM",
      "commitName": "937ef39b3ff90f72392b7a319e4346344db34e03",
      "commitAuthor": "Eric E Payne",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "f8c5f5b23732a1e35f012c1a6850bed09c8a5180",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 166.29,
      "commitsBetweenForRepo": 1764,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   public void move(Queue newQueue) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       for (AppPlacementAllocator ap : schedulerKeyToAppPlacementAllocator\n           .values()) {\n         PendingAsk ask \u003d ap.getPendingAsk(ResourceRequest.ANY);\n         if (ask.getCount() \u003e 0) {\n           oldMetrics.decrPendingResources(\n               ap.getPrimaryRequestedNodePartition(),\n               user, ask.getCount(), ask.getPerAllocationResource());\n           newMetrics.incrPendingResources(\n               ap.getPrimaryRequestedNodePartition(),\n               user, ask.getCount(), ask.getPerAllocationResource());\n \n           Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n               ask.getCount());\n           // Update Queue\n           queue.decPendingResource(\n               ap.getPrimaryRequestedNodePartition(), delta);\n           newQueue.incPendingResource(\n               ap.getPrimaryRequestedNodePartition(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n       abstractUsersManager.deactivateApplication(user, applicationId);\n       abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n-      abstractUsersManager.activateApplication(user, applicationId);\n+      if (!schedulerKeys.isEmpty()) {\n+        abstractUsersManager.activateApplication(user, applicationId);\n+      }\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (AppPlacementAllocator ap : schedulerKeyToAppPlacementAllocator\n          .values()) {\n        PendingAsk ask \u003d ap.getPendingAsk(ResourceRequest.ANY);\n        if (ask.getCount() \u003e 0) {\n          oldMetrics.decrPendingResources(\n              ap.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n          newMetrics.incrPendingResources(\n              ap.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n\n          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n              ask.getCount());\n          // Update Queue\n          queue.decPendingResource(\n              ap.getPrimaryRequestedNodePartition(), delta);\n          newQueue.incPendingResource(\n              ap.getPrimaryRequestedNodePartition(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      abstractUsersManager.deactivateApplication(user, applicationId);\n      abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n      if (!schedulerKeys.isEmpty()) {\n        abstractUsersManager.activateApplication(user, applicationId);\n      }\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "08/09/17 9:24 AM",
      "commitNameOld": "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 62.19,
      "commitsBetweenForRepo": 599,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public void move(Queue newQueue) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-      for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n-        PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n+      for (AppPlacementAllocator ap : schedulerKeyToAppPlacementAllocator\n+          .values()) {\n+        PendingAsk ask \u003d ap.getPendingAsk(ResourceRequest.ANY);\n         if (ask.getCount() \u003e 0) {\n           oldMetrics.decrPendingResources(\n-              ps.getPrimaryRequestedNodePartition(),\n+              ap.getPrimaryRequestedNodePartition(),\n               user, ask.getCount(), ask.getPerAllocationResource());\n           newMetrics.incrPendingResources(\n-              ps.getPrimaryRequestedNodePartition(),\n+              ap.getPrimaryRequestedNodePartition(),\n               user, ask.getCount(), ask.getPerAllocationResource());\n \n           Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n               ask.getCount());\n           // Update Queue\n           queue.decPendingResource(\n-              ps.getPrimaryRequestedNodePartition(), delta);\n+              ap.getPrimaryRequestedNodePartition(), delta);\n           newQueue.incPendingResource(\n-              ps.getPrimaryRequestedNodePartition(), delta);\n+              ap.getPrimaryRequestedNodePartition(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n       abstractUsersManager.deactivateApplication(user, applicationId);\n       abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n       abstractUsersManager.activateApplication(user, applicationId);\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (AppPlacementAllocator ap : schedulerKeyToAppPlacementAllocator\n          .values()) {\n        PendingAsk ask \u003d ap.getPendingAsk(ResourceRequest.ANY);\n        if (ask.getCount() \u003e 0) {\n          oldMetrics.decrPendingResources(\n              ap.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n          newMetrics.incrPendingResources(\n              ap.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n\n          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n              ask.getCount());\n          // Update Queue\n          queue.decPendingResource(\n              ap.getPrimaryRequestedNodePartition(), delta);\n          newQueue.incPendingResource(\n              ap.getPrimaryRequestedNodePartition(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      abstractUsersManager.deactivateApplication(user, applicationId);\n      abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n      abstractUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "05/04/17 11:28 AM",
      "commitNameOld": "87e2ef8c985bb72a916477e8783359f2859f7890",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 74.9,
      "commitsBetweenForRepo": 382,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public void move(Queue newQueue) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n         PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n         if (ask.getCount() \u003e 0) {\n-          oldMetrics.decrPendingResources(user, ask.getCount(),\n-              ask.getPerAllocationResource());\n-          newMetrics.incrPendingResources(user, ask.getCount(),\n-              ask.getPerAllocationResource());\n+          oldMetrics.decrPendingResources(\n+              ps.getPrimaryRequestedNodePartition(),\n+              user, ask.getCount(), ask.getPerAllocationResource());\n+          newMetrics.incrPendingResources(\n+              ps.getPrimaryRequestedNodePartition(),\n+              user, ask.getCount(), ask.getPerAllocationResource());\n \n           Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n               ask.getCount());\n           // Update Queue\n           queue.decPendingResource(\n               ps.getPrimaryRequestedNodePartition(), delta);\n           newQueue.incPendingResource(\n               ps.getPrimaryRequestedNodePartition(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n       abstractUsersManager.deactivateApplication(user, applicationId);\n       abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n       abstractUsersManager.activateApplication(user, applicationId);\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n        PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n        if (ask.getCount() \u003e 0) {\n          oldMetrics.decrPendingResources(\n              ps.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n          newMetrics.incrPendingResources(\n              ps.getPrimaryRequestedNodePartition(),\n              user, ask.getCount(), ask.getPerAllocationResource());\n\n          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n              ask.getCount());\n          // Update Queue\n          queue.decPendingResource(\n              ps.getPrimaryRequestedNodePartition(), delta);\n          newQueue.incPendingResource(\n              ps.getPrimaryRequestedNodePartition(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      abstractUsersManager.deactivateApplication(user, applicationId);\n      abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n      abstractUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 34.02,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void move(Queue newQueue) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n         PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n         if (ask.getCount() \u003e 0) {\n           oldMetrics.decrPendingResources(user, ask.getCount(),\n               ask.getPerAllocationResource());\n           newMetrics.incrPendingResources(user, ask.getCount(),\n               ask.getPerAllocationResource());\n \n           Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n               ask.getCount());\n           // Update Queue\n           queue.decPendingResource(\n               ps.getPrimaryRequestedNodePartition(), delta);\n           newQueue.incPendingResource(\n               ps.getPrimaryRequestedNodePartition(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n-      activeUsersManager.deactivateApplication(user, applicationId);\n-      activeUsersManager \u003d newQueue.getActiveUsersManager();\n-      activeUsersManager.activateApplication(user, applicationId);\n+      abstractUsersManager.deactivateApplication(user, applicationId);\n+      abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n+      abstractUsersManager.activateApplication(user, applicationId);\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n        PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n        if (ask.getCount() \u003e 0) {\n          oldMetrics.decrPendingResources(user, ask.getCount(),\n              ask.getPerAllocationResource());\n          newMetrics.incrPendingResources(user, ask.getCount(),\n              ask.getPerAllocationResource());\n\n          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n              ask.getCount());\n          // Update Queue\n          queue.decPendingResource(\n              ps.getPrimaryRequestedNodePartition(), delta);\n          newQueue.incPendingResource(\n              ps.getPrimaryRequestedNodePartition(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      abstractUsersManager.deactivateApplication(user, applicationId);\n      abstractUsersManager \u003d newQueue.getAbstractUsersManager();\n      abstractUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   public void move(Queue newQueue) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n-        ResourceRequest request \u003d ps.getResourceRequest(ResourceRequest.ANY);\n-        if (request !\u003d null \u0026\u0026 request.getNumContainers() \u003e 0) {\n-          oldMetrics.decrPendingResources(user, request.getNumContainers(),\n-              request.getCapability());\n-          newMetrics.incrPendingResources(user, request.getNumContainers(),\n-              request.getCapability());\n+        PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n+        if (ask.getCount() \u003e 0) {\n+          oldMetrics.decrPendingResources(user, ask.getCount(),\n+              ask.getPerAllocationResource());\n+          newMetrics.incrPendingResources(user, ask.getCount(),\n+              ask.getPerAllocationResource());\n \n-          Resource delta \u003d Resources.multiply(request.getCapability(),\n-              request.getNumContainers());\n+          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n+              ask.getCount());\n           // Update Queue\n-          queue.decPendingResource(request.getNodeLabelExpression(), delta);\n-          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n+          queue.decPendingResource(\n+              ps.getPrimaryRequestedNodePartition(), delta);\n+          newQueue.incPendingResource(\n+              ps.getPrimaryRequestedNodePartition(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n       activeUsersManager.deactivateApplication(user, applicationId);\n       activeUsersManager \u003d newQueue.getActiveUsersManager();\n       activeUsersManager.activateApplication(user, applicationId);\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n        PendingAsk ask \u003d ps.getPendingAsk(ResourceRequest.ANY);\n        if (ask.getCount() \u003e 0) {\n          oldMetrics.decrPendingResources(user, ask.getCount(),\n              ask.getPerAllocationResource());\n          newMetrics.incrPendingResources(user, ask.getCount(),\n              ask.getPerAllocationResource());\n\n          Resource delta \u003d Resources.multiply(ask.getPerAllocationResource(),\n              ask.getCount());\n          // Update Queue\n          queue.decPendingResource(\n              ps.getPrimaryRequestedNodePartition(), delta);\n          newQueue.incPendingResource(\n              ps.getPrimaryRequestedNodePartition(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      activeUsersManager.deactivateApplication(user, applicationId);\n      activeUsersManager \u003d newQueue.getActiveUsersManager();\n      activeUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "9ca54f4810de182195263bd594afb56dab564105": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5906. Update AppSchedulingInfo to use SchedulingPlacementSet. Contributed by Wangda Tan.\n",
      "commitDate": "28/12/16 9:18 AM",
      "commitName": "9ca54f4810de182195263bd594afb56dab564105",
      "commitAuthor": "Sunil G",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void move(Queue newQueue) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-      for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n-        ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n-        if (request !\u003d null) {\n+      for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n+        ResourceRequest request \u003d ps.getResourceRequest(ResourceRequest.ANY);\n+        if (request !\u003d null \u0026\u0026 request.getNumContainers() \u003e 0) {\n           oldMetrics.decrPendingResources(user, request.getNumContainers(),\n               request.getCapability());\n           newMetrics.incrPendingResources(user, request.getNumContainers(),\n               request.getCapability());\n \n           Resource delta \u003d Resources.multiply(request.getCapability(),\n               request.getNumContainers());\n           // Update Queue\n           queue.decPendingResource(request.getNodeLabelExpression(), delta);\n           newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n         }\n       }\n       oldMetrics.moveAppFrom(this);\n       newMetrics.moveAppTo(this);\n       activeUsersManager.deactivateApplication(user, applicationId);\n       activeUsersManager \u003d newQueue.getActiveUsersManager();\n       activeUsersManager.activateApplication(user, applicationId);\n       this.queue \u003d newQueue;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (SchedulingPlacementSet ps : schedulerKeyToPlacementSets.values()) {\n        ResourceRequest request \u003d ps.getResourceRequest(ResourceRequest.ANY);\n        if (request !\u003d null \u0026\u0026 request.getNumContainers() \u003e 0) {\n          oldMetrics.decrPendingResources(user, request.getNumContainers(),\n              request.getCapability());\n          newMetrics.incrPendingResources(user, request.getNumContainers(),\n              request.getCapability());\n\n          Resource delta \u003d Resources.multiply(request.getCapability(),\n              request.getNumContainers());\n          // Update Queue\n          queue.decPendingResource(request.getNodeLabelExpression(), delta);\n          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      activeUsersManager.deactivateApplication(user, applicationId);\n      activeUsersManager \u003d newQueue.getActiveUsersManager();\n      activeUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "1831be8e737fd423a9f3d590767b944147e85641": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
      "commitDate": "27/09/16 11:54 AM",
      "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
          "commitDate": "27/09/16 11:54 AM",
          "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/09/16 1:31 PM",
          "commitNameOld": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n-  public synchronized void move(Queue newQueue) {\n-    QueueMetrics oldMetrics \u003d queue.getMetrics();\n-    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-    for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n-      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n-      if (request !\u003d null) {\n-        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n-            request.getCapability());\n-        newMetrics.incrPendingResources(user, request.getNumContainers(),\n-            request.getCapability());\n-        \n-        Resource delta \u003d Resources.multiply(request.getCapability(),\n-            request.getNumContainers()); \n-        // Update Queue\n-        queue.decPendingResource(request.getNodeLabelExpression(), delta);\n-        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n+  public void move(Queue newQueue) {\n+    try {\n+      this.writeLock.lock();\n+      QueueMetrics oldMetrics \u003d queue.getMetrics();\n+      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+      for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n+        ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n+        if (request !\u003d null) {\n+          oldMetrics.decrPendingResources(user, request.getNumContainers(),\n+              request.getCapability());\n+          newMetrics.incrPendingResources(user, request.getNumContainers(),\n+              request.getCapability());\n+\n+          Resource delta \u003d Resources.multiply(request.getCapability(),\n+              request.getNumContainers());\n+          // Update Queue\n+          queue.decPendingResource(request.getNodeLabelExpression(), delta);\n+          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n+        }\n       }\n+      oldMetrics.moveAppFrom(this);\n+      newMetrics.moveAppTo(this);\n+      activeUsersManager.deactivateApplication(user, applicationId);\n+      activeUsersManager \u003d newQueue.getActiveUsersManager();\n+      activeUsersManager.activateApplication(user, applicationId);\n+      this.queue \u003d newQueue;\n+    } finally {\n+      this.writeLock.unlock();\n     }\n-    oldMetrics.moveAppFrom(this);\n-    newMetrics.moveAppTo(this);\n-    activeUsersManager.deactivateApplication(user, applicationId);\n-    activeUsersManager \u003d newQueue.getActiveUsersManager();\n-    activeUsersManager.activateApplication(user, applicationId);\n-    this.queue \u003d newQueue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n        ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n        if (request !\u003d null) {\n          oldMetrics.decrPendingResources(user, request.getNumContainers(),\n              request.getCapability());\n          newMetrics.incrPendingResources(user, request.getNumContainers(),\n              request.getCapability());\n\n          Resource delta \u003d Resources.multiply(request.getCapability(),\n              request.getNumContainers());\n          // Update Queue\n          queue.decPendingResource(request.getNodeLabelExpression(), delta);\n          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      activeUsersManager.deactivateApplication(user, applicationId);\n      activeUsersManager \u003d newQueue.getActiveUsersManager();\n      activeUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
          "commitDate": "27/09/16 11:54 AM",
          "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/09/16 1:31 PM",
          "commitNameOld": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,30 @@\n-  public synchronized void move(Queue newQueue) {\n-    QueueMetrics oldMetrics \u003d queue.getMetrics();\n-    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-    for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n-      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n-      if (request !\u003d null) {\n-        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n-            request.getCapability());\n-        newMetrics.incrPendingResources(user, request.getNumContainers(),\n-            request.getCapability());\n-        \n-        Resource delta \u003d Resources.multiply(request.getCapability(),\n-            request.getNumContainers()); \n-        // Update Queue\n-        queue.decPendingResource(request.getNodeLabelExpression(), delta);\n-        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n+  public void move(Queue newQueue) {\n+    try {\n+      this.writeLock.lock();\n+      QueueMetrics oldMetrics \u003d queue.getMetrics();\n+      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+      for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n+        ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n+        if (request !\u003d null) {\n+          oldMetrics.decrPendingResources(user, request.getNumContainers(),\n+              request.getCapability());\n+          newMetrics.incrPendingResources(user, request.getNumContainers(),\n+              request.getCapability());\n+\n+          Resource delta \u003d Resources.multiply(request.getCapability(),\n+              request.getNumContainers());\n+          // Update Queue\n+          queue.decPendingResource(request.getNodeLabelExpression(), delta);\n+          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n+        }\n       }\n+      oldMetrics.moveAppFrom(this);\n+      newMetrics.moveAppTo(this);\n+      activeUsersManager.deactivateApplication(user, applicationId);\n+      activeUsersManager \u003d newQueue.getActiveUsersManager();\n+      activeUsersManager.activateApplication(user, applicationId);\n+      this.queue \u003d newQueue;\n+    } finally {\n+      this.writeLock.unlock();\n     }\n-    oldMetrics.moveAppFrom(this);\n-    newMetrics.moveAppTo(this);\n-    activeUsersManager.deactivateApplication(user, applicationId);\n-    activeUsersManager \u003d newQueue.getActiveUsersManager();\n-    activeUsersManager.activateApplication(user, applicationId);\n-    this.queue \u003d newQueue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void move(Queue newQueue) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n        ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n        if (request !\u003d null) {\n          oldMetrics.decrPendingResources(user, request.getNumContainers(),\n              request.getCapability());\n          newMetrics.incrPendingResources(user, request.getNumContainers(),\n              request.getCapability());\n\n          Resource delta \u003d Resources.multiply(request.getCapability(),\n              request.getNumContainers());\n          // Update Queue\n          queue.decPendingResource(request.getNodeLabelExpression(), delta);\n          newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n        }\n      }\n      oldMetrics.moveAppFrom(this);\n      newMetrics.moveAppTo(this);\n      activeUsersManager.deactivateApplication(user, applicationId);\n      activeUsersManager \u003d newQueue.getActiveUsersManager();\n      activeUsersManager.activateApplication(user, applicationId);\n      this.queue \u003d newQueue;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4524. Cleanup AppSchedulingInfo. (Karthik Kambatla via wangda)\n\n(cherry picked from commit 05fa852d7567b7590d6b53bbf925f8f424736514)\n",
      "commitDate": "30/12/15 3:39 PM",
      "commitName": "4e4b3a8465a8433e78e015cb1ce7e0dc1ebeb523",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/11/15 11:09 AM",
      "commitNameOld": "796638d9bc86235b9f3e5d1a3a9a25bbf5c04d1c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 48.19,
      "commitsBetweenForRepo": 287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n-  synchronized public void move(Queue newQueue) {\n+  public synchronized void move(Queue newQueue) {\n     QueueMetrics oldMetrics \u003d queue.getMetrics();\n     QueueMetrics newMetrics \u003d newQueue.getMetrics();\n     for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n       ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n       if (request !\u003d null) {\n         oldMetrics.decrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         newMetrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         \n         Resource delta \u003d Resources.multiply(request.getCapability(),\n             request.getNumContainers()); \n         // Update Queue\n         queue.decPendingResource(request.getNodeLabelExpression(), delta);\n         newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n       }\n     }\n     oldMetrics.moveAppFrom(this);\n     newMetrics.moveAppTo(this);\n     activeUsersManager.deactivateApplication(user, applicationId);\n     activeUsersManager \u003d newQueue.getActiveUsersManager();\n     activeUsersManager.activateApplication(user, applicationId);\n     this.queue \u003d newQueue;\n-    this.queueName \u003d newQueue.getQueueName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n      if (request !\u003d null) {\n        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        newMetrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        \n        Resource delta \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers()); \n        // Update Queue\n        queue.decPendingResource(request.getNodeLabelExpression(), delta);\n        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n      }\n    }\n    oldMetrics.moveAppFrom(this);\n    newMetrics.moveAppTo(this);\n    activeUsersManager.deactivateApplication(user, applicationId);\n    activeUsersManager \u003d newQueue.getActiveUsersManager();\n    activeUsersManager.activateApplication(user, applicationId);\n    this.queue \u003d newQueue;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.85,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   synchronized public void move(Queue newQueue) {\n     QueueMetrics oldMetrics \u003d queue.getMetrics();\n     QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-    for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n+    for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n       ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n       if (request !\u003d null) {\n         oldMetrics.decrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         newMetrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         \n         Resource delta \u003d Resources.multiply(request.getCapability(),\n             request.getNumContainers()); \n         // Update Queue\n         queue.decPendingResource(request.getNodeLabelExpression(), delta);\n         newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n       }\n     }\n     oldMetrics.moveAppFrom(this);\n     newMetrics.moveAppTo(this);\n     activeUsersManager.deactivateApplication(user, applicationId);\n     activeUsersManager \u003d newQueue.getActiveUsersManager();\n     activeUsersManager.activateApplication(user, applicationId);\n     this.queue \u003d newQueue;\n     this.queueName \u003d newQueue.getQueueName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    for (Map\u003cString, ResourceRequest\u003e asks : resourceRequestMap.values()) {\n      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n      if (request !\u003d null) {\n        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        newMetrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        \n        Resource delta \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers()); \n        // Update Queue\n        queue.decPendingResource(request.getNodeLabelExpression(), delta);\n        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n      }\n    }\n    oldMetrics.moveAppFrom(this);\n    newMetrics.moveAppTo(this);\n    activeUsersManager.deactivateApplication(user, applicationId);\n    activeUsersManager \u003d newQueue.getActiveUsersManager();\n    activeUsersManager.activateApplication(user, applicationId);\n    this.queue \u003d newQueue;\n    this.queueName \u003d newQueue.getQueueName();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/03/15 10:42 AM",
      "commitNameOld": "6bc7710ec7f2592c4c87dd940fbe5827ef81fe72",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   synchronized public void move(Queue newQueue) {\n     QueueMetrics oldMetrics \u003d queue.getMetrics();\n     QueueMetrics newMetrics \u003d newQueue.getMetrics();\n     for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n       ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n       if (request !\u003d null) {\n         oldMetrics.decrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         newMetrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n+        \n+        Resource delta \u003d Resources.multiply(request.getCapability(),\n+            request.getNumContainers()); \n+        // Update Queue\n+        queue.decPendingResource(request.getNodeLabelExpression(), delta);\n+        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n       }\n     }\n     oldMetrics.moveAppFrom(this);\n     newMetrics.moveAppTo(this);\n     activeUsersManager.deactivateApplication(user, applicationId);\n     activeUsersManager \u003d newQueue.getActiveUsersManager();\n     activeUsersManager.activateApplication(user, applicationId);\n     this.queue \u003d newQueue;\n     this.queueName \u003d newQueue.getQueueName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n      if (request !\u003d null) {\n        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        newMetrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        \n        Resource delta \u003d Resources.multiply(request.getCapability(),\n            request.getNumContainers()); \n        // Update Queue\n        queue.decPendingResource(request.getNodeLabelExpression(), delta);\n        newQueue.incPendingResource(request.getNodeLabelExpression(), delta);\n      }\n    }\n    oldMetrics.moveAppFrom(this);\n    newMetrics.moveAppTo(this);\n    activeUsersManager.deactivateApplication(user, applicationId);\n    activeUsersManager \u003d newQueue.getActiveUsersManager();\n    activeUsersManager.activateApplication(user, applicationId);\n    this.queue \u003d newQueue;\n    this.queueName \u003d newQueue.getQueueName();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "7360cec692be5dcc3377ae5082fe22870caac96b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2378. Added support for moving applications across queues in CapacityScheduler. Contributed by Subramaniam Venkatraman Krishnan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 11:00 PM",
      "commitName": "7360cec692be5dcc3377ae5082fe22870caac96b",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/08/14 6:15 PM",
      "commitNameOld": "04ae5603707e53cc6b12c57bbd9d95f1c8e770a7",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 11.2,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   synchronized public void move(Queue newQueue) {\n     QueueMetrics oldMetrics \u003d queue.getMetrics();\n     QueueMetrics newMetrics \u003d newQueue.getMetrics();\n     for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n       ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n       if (request !\u003d null) {\n         oldMetrics.decrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n         newMetrics.incrPendingResources(user, request.getNumContainers(),\n             request.getCapability());\n       }\n     }\n     oldMetrics.moveAppFrom(this);\n     newMetrics.moveAppTo(this);\n     activeUsersManager.deactivateApplication(user, applicationId);\n     activeUsersManager \u003d newQueue.getActiveUsersManager();\n     activeUsersManager.activateApplication(user, applicationId);\n     this.queue \u003d newQueue;\n+    this.queueName \u003d newQueue.getQueueName();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n      if (request !\u003d null) {\n        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        newMetrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n      }\n    }\n    oldMetrics.moveAppFrom(this);\n    newMetrics.moveAppTo(this);\n    activeUsersManager.deactivateApplication(user, applicationId);\n    activeUsersManager \u003d newQueue.getActiveUsersManager();\n    activeUsersManager.activateApplication(user, applicationId);\n    this.queue \u003d newQueue;\n    this.queueName \u003d newQueue.getQueueName();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "981679e6d7650141fc8737c7e13b16d8b795b408": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1498. Common scheduler changes for moving apps between queues (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563021 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 4:14 PM",
      "commitName": "981679e6d7650141fc8737c7e13b16d8b795b408",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,19 @@\n+  synchronized public void move(Queue newQueue) {\n+    QueueMetrics oldMetrics \u003d queue.getMetrics();\n+    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+    for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n+      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n+      if (request !\u003d null) {\n+        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n+            request.getCapability());\n+        newMetrics.incrPendingResources(user, request.getNumContainers(),\n+            request.getCapability());\n+      }\n+    }\n+    oldMetrics.moveAppFrom(this);\n+    newMetrics.moveAppTo(this);\n+    activeUsersManager.deactivateApplication(user, applicationId);\n+    activeUsersManager \u003d newQueue.getActiveUsersManager();\n+    activeUsersManager.activateApplication(user, applicationId);\n+    this.queue \u003d newQueue;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized public void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    for (Map\u003cString, ResourceRequest\u003e asks : requests.values()) {\n      ResourceRequest request \u003d asks.get(ResourceRequest.ANY);\n      if (request !\u003d null) {\n        oldMetrics.decrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n        newMetrics.incrPendingResources(user, request.getNumContainers(),\n            request.getCapability());\n      }\n    }\n    oldMetrics.moveAppFrom(this);\n    newMetrics.moveAppTo(this);\n    activeUsersManager.deactivateApplication(user, applicationId);\n    activeUsersManager \u003d newQueue.getActiveUsersManager();\n    activeUsersManager.activateApplication(user, applicationId);\n    this.queue \u003d newQueue;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java"
    }
  }
}