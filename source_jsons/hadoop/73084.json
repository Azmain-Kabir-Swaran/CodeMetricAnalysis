{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpensslSecureRandom.java",
  "functionName": "next",
  "functionId": "next___numBits-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/random/OpensslSecureRandom.java",
  "functionStartLine": 106,
  "functionEndLine": 118,
  "numCommitsSeen": 4,
  "timeTaken": 544,
  "changeHistory": [
    "905c90b066503c966ff78e3d1add57f4aff6e9c6"
  ],
  "changeHistoryShort": {
    "905c90b066503c966ff78e3d1add57f4aff6e9c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "905c90b066503c966ff78e3d1add57f4aff6e9c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10734. Implement high-performance secure random number sources. (Yi Liu via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 6:29 PM",
      "commitName": "905c90b066503c966ff78e3d1add57f4aff6e9c6",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,13 @@\n+  final protected int next(int numBits) {\n+    Preconditions.checkArgument(numBits \u003e\u003d 0 \u0026\u0026 numBits \u003c\u003d 32);\n+    int numBytes \u003d (numBits + 7) / 8;\n+    byte b[] \u003d new byte[numBytes];\n+    int next \u003d 0;\n+    \n+    nextBytes(b);\n+    for (int i \u003d 0; i \u003c numBytes; i++) {\n+      next \u003d (next \u003c\u003c 8) + (b[i] \u0026 0xFF);\n+    }\n+    \n+    return next \u003e\u003e\u003e (numBytes * 8 - numBits);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  final protected int next(int numBits) {\n    Preconditions.checkArgument(numBits \u003e\u003d 0 \u0026\u0026 numBits \u003c\u003d 32);\n    int numBytes \u003d (numBits + 7) / 8;\n    byte b[] \u003d new byte[numBytes];\n    int next \u003d 0;\n    \n    nextBytes(b);\n    for (int i \u003d 0; i \u003c numBytes; i++) {\n      next \u003d (next \u003c\u003c 8) + (b[i] \u0026 0xFF);\n    }\n    \n    return next \u003e\u003e\u003e (numBytes * 8 - numBits);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/random/OpensslSecureRandom.java"
    }
  }
}