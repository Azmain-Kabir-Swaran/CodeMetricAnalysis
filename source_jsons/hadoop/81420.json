{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ScriptBasedMapping.java",
  "functionName": "resolve",
  "functionId": "resolve___names-List__String__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
  "functionStartLine": 174,
  "functionEndLine": 210,
  "numCommitsSeen": 20,
  "timeTaken": 1022,
  "changeHistory": [
    "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
    "783dbb4125900c5ec9bc28a4d57643581af8a63d",
    "29b51cc116a1e1732c06f8c4a69b2ecf012064a4",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "b2f65c276da2c4420a0974a7e2d75e081abf5d63": "Ybodychange",
    "783dbb4125900c5ec9bc28a4d57643581af8a63d": "Ybodychange",
    "29b51cc116a1e1732c06f8c4a69b2ecf012064a4": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b2f65c276da2c4420a0974a7e2d75e081abf5d63": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5168. Add cross node dependency support to BlockPlacementPolicy.  Contributed by Nikola Vujic\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592179 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/14 4:02 AM",
      "commitName": "b2f65c276da2c4420a0974a7e2d75e081abf5d63",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/09/13 8:24 AM",
      "commitNameOld": "8a66e493ba03f710b353638647013401d18f413c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 218.82,
      "commitsBetweenForRepo": 1525,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n       List\u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n \n       if (names.isEmpty()) {\n         return m;\n       }\n \n       if (scriptName \u003d\u003d null) {\n         for (String name : names) {\n           m.add(NetworkTopology.DEFAULT_RACK);\n         }\n         return m;\n       }\n \n-      String output \u003d runResolveCommand(names);\n+      String output \u003d runResolveCommand(names, scriptName);\n       if (output !\u003d null) {\n         StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n         while (allSwitchInfo.hasMoreTokens()) {\n           String switchInfo \u003d allSwitchInfo.nextToken();\n           m.add(switchInfo);\n         }\n \n         if (m.size() !\u003d names.size()) {\n           // invalid number of entries returned by the script\n           LOG.error(\"Script \" + scriptName + \" returned \"\n               + Integer.toString(m.size()) + \" values when \"\n               + Integer.toString(names.size()) + \" were expected.\");\n           return null;\n         }\n       } else {\n         // an error occurred. return null to signify this.\n         // (exn was already logged in runResolveCommand)\n         return null;\n       }\n \n       return m;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n      List\u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n\n      if (names.isEmpty()) {\n        return m;\n      }\n\n      if (scriptName \u003d\u003d null) {\n        for (String name : names) {\n          m.add(NetworkTopology.DEFAULT_RACK);\n        }\n        return m;\n      }\n\n      String output \u003d runResolveCommand(names, scriptName);\n      if (output !\u003d null) {\n        StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n        while (allSwitchInfo.hasMoreTokens()) {\n          String switchInfo \u003d allSwitchInfo.nextToken();\n          m.add(switchInfo);\n        }\n\n        if (m.size() !\u003d names.size()) {\n          // invalid number of entries returned by the script\n          LOG.error(\"Script \" + scriptName + \" returned \"\n              + Integer.toString(m.size()) + \" values when \"\n              + Integer.toString(names.size()) + \" were expected.\");\n          return null;\n        }\n      } else {\n        // an error occurred. return null to signify this.\n        // (exn was already logged in runResolveCommand)\n        return null;\n      }\n\n      return m;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "783dbb4125900c5ec9bc28a4d57643581af8a63d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7777 a base class for DNSToSwitchMapping implementations\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1206515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/11/11 9:45 AM",
      "commitName": "783dbb4125900c5ec9bc28a4d57643581af8a63d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/10/11 7:26 PM",
      "commitNameOld": "29b51cc116a1e1732c06f8c4a69b2ecf012064a4",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 29.64,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n-    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n-    \n-    if (names.isEmpty()) {\n-      return m;\n-    }\n+      List\u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n \n-    if (scriptName \u003d\u003d null) {\n-      for (int i \u003d 0; i \u003c names.size(); i++) {\n-        m.add(NetworkTopology.DEFAULT_RACK);\n+      if (names.isEmpty()) {\n+        return m;\n       }\n-      return m;\n-    }\n-    \n-    String output \u003d runResolveCommand(names);\n-    if (output !\u003d null) {\n-      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n-      while (allSwitchInfo.hasMoreTokens()) {\n-        String switchInfo \u003d allSwitchInfo.nextToken();\n-        m.add(switchInfo);\n+\n+      if (scriptName \u003d\u003d null) {\n+        for (String name : names) {\n+          m.add(NetworkTopology.DEFAULT_RACK);\n+        }\n+        return m;\n       }\n-      \n-      if (m.size() !\u003d names.size()) {\n-        // invalid number of entries returned by the script\n-        LOG.error(\"Script \" + scriptName + \" returned \"\n-            + Integer.toString(m.size()) + \" values when \"\n-            + Integer.toString(names.size()) + \" were expected.\");\n+\n+      String output \u003d runResolveCommand(names);\n+      if (output !\u003d null) {\n+        StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n+        while (allSwitchInfo.hasMoreTokens()) {\n+          String switchInfo \u003d allSwitchInfo.nextToken();\n+          m.add(switchInfo);\n+        }\n+\n+        if (m.size() !\u003d names.size()) {\n+          // invalid number of entries returned by the script\n+          LOG.error(\"Script \" + scriptName + \" returned \"\n+              + Integer.toString(m.size()) + \" values when \"\n+              + Integer.toString(names.size()) + \" were expected.\");\n+          return null;\n+        }\n+      } else {\n+        // an error occurred. return null to signify this.\n+        // (exn was already logged in runResolveCommand)\n         return null;\n       }\n-    } else {\n-      // an error occurred. return null to signify this.\n-      // (exn was already logged in runResolveCommand)\n-      return null;\n-    }\n-    \n-    return m;\n-  }\n\\ No newline at end of file\n+\n+      return m;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n      List\u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n\n      if (names.isEmpty()) {\n        return m;\n      }\n\n      if (scriptName \u003d\u003d null) {\n        for (String name : names) {\n          m.add(NetworkTopology.DEFAULT_RACK);\n        }\n        return m;\n      }\n\n      String output \u003d runResolveCommand(names);\n      if (output !\u003d null) {\n        StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n        while (allSwitchInfo.hasMoreTokens()) {\n          String switchInfo \u003d allSwitchInfo.nextToken();\n          m.add(switchInfo);\n        }\n\n        if (m.size() !\u003d names.size()) {\n          // invalid number of entries returned by the script\n          LOG.error(\"Script \" + scriptName + \" returned \"\n              + Integer.toString(m.size()) + \" values when \"\n              + Integer.toString(names.size()) + \" were expected.\");\n          return null;\n        }\n      } else {\n        // an error occurred. return null to signify this.\n        // (exn was already logged in runResolveCommand)\n        return null;\n      }\n\n      return m;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "29b51cc116a1e1732c06f8c4a69b2ecf012064a4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7424. Log an error if the topology script doesn\u0027t handle multiple args. Contributed by Uma Maheswara Rao G\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190139 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 7:26 PM",
      "commitName": "29b51cc116a1e1732c06f8c4a69b2ecf012064a4",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "27/10/11 9:29 AM",
      "commitNameOld": "a3c0a0e799688b790bacf55b5d8f7b6b70e9cc5f",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n     public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n     List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n     \n     if (names.isEmpty()) {\n       return m;\n     }\n \n     if (scriptName \u003d\u003d null) {\n       for (int i \u003d 0; i \u003c names.size(); i++) {\n         m.add(NetworkTopology.DEFAULT_RACK);\n       }\n       return m;\n     }\n     \n     String output \u003d runResolveCommand(names);\n     if (output !\u003d null) {\n       StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n       while (allSwitchInfo.hasMoreTokens()) {\n         String switchInfo \u003d allSwitchInfo.nextToken();\n         m.add(switchInfo);\n       }\n       \n       if (m.size() !\u003d names.size()) {\n         // invalid number of entries returned by the script\n-        LOG.warn(\"Script \" + scriptName + \" returned \"\n+        LOG.error(\"Script \" + scriptName + \" returned \"\n             + Integer.toString(m.size()) + \" values when \"\n             + Integer.toString(names.size()) + \" were expected.\");\n         return null;\n       }\n     } else {\n       // an error occurred. return null to signify this.\n       // (exn was already logged in runResolveCommand)\n       return null;\n     }\n     \n     return m;\n   }\n\\ No newline at end of file\n",
      "actualSource": "    public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n    \n    if (names.isEmpty()) {\n      return m;\n    }\n\n    if (scriptName \u003d\u003d null) {\n      for (int i \u003d 0; i \u003c names.size(); i++) {\n        m.add(NetworkTopology.DEFAULT_RACK);\n      }\n      return m;\n    }\n    \n    String output \u003d runResolveCommand(names);\n    if (output !\u003d null) {\n      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n      while (allSwitchInfo.hasMoreTokens()) {\n        String switchInfo \u003d allSwitchInfo.nextToken();\n        m.add(switchInfo);\n      }\n      \n      if (m.size() !\u003d names.size()) {\n        // invalid number of entries returned by the script\n        LOG.error(\"Script \" + scriptName + \" returned \"\n            + Integer.toString(m.size()) + \" values when \"\n            + Integer.toString(names.size()) + \" were expected.\");\n        return null;\n      }\n    } else {\n      // an error occurred. return null to signify this.\n      // (exn was already logged in runResolveCommand)\n      return null;\n    }\n    \n    return m;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n    \n    if (names.isEmpty()) {\n      return m;\n    }\n\n    if (scriptName \u003d\u003d null) {\n      for (int i \u003d 0; i \u003c names.size(); i++) {\n        m.add(NetworkTopology.DEFAULT_RACK);\n      }\n      return m;\n    }\n    \n    String output \u003d runResolveCommand(names);\n    if (output !\u003d null) {\n      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n      while (allSwitchInfo.hasMoreTokens()) {\n        String switchInfo \u003d allSwitchInfo.nextToken();\n        m.add(switchInfo);\n      }\n      \n      if (m.size() !\u003d names.size()) {\n        // invalid number of entries returned by the script\n        LOG.warn(\"Script \" + scriptName + \" returned \"\n            + Integer.toString(m.size()) + \" values when \"\n            + Integer.toString(names.size()) + \" were expected.\");\n        return null;\n      }\n    } else {\n      // an error occurred. return null to signify this.\n      // (exn was already logged in runResolveCommand)\n      return null;\n    }\n    \n    return m;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n    \n    if (names.isEmpty()) {\n      return m;\n    }\n\n    if (scriptName \u003d\u003d null) {\n      for (int i \u003d 0; i \u003c names.size(); i++) {\n        m.add(NetworkTopology.DEFAULT_RACK);\n      }\n      return m;\n    }\n    \n    String output \u003d runResolveCommand(names);\n    if (output !\u003d null) {\n      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n      while (allSwitchInfo.hasMoreTokens()) {\n        String switchInfo \u003d allSwitchInfo.nextToken();\n        m.add(switchInfo);\n      }\n      \n      if (m.size() !\u003d names.size()) {\n        // invalid number of entries returned by the script\n        LOG.warn(\"Script \" + scriptName + \" returned \"\n            + Integer.toString(m.size()) + \" values when \"\n            + Integer.toString(names.size()) + \" were expected.\");\n        return null;\n      }\n    } else {\n      // an error occurred. return null to signify this.\n      // (exn was already logged in runResolveCommand)\n      return null;\n    }\n    \n    return m;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/ScriptBasedMapping.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n    \n    if (names.isEmpty()) {\n      return m;\n    }\n\n    if (scriptName \u003d\u003d null) {\n      for (int i \u003d 0; i \u003c names.size(); i++) {\n        m.add(NetworkTopology.DEFAULT_RACK);\n      }\n      return m;\n    }\n    \n    String output \u003d runResolveCommand(names);\n    if (output !\u003d null) {\n      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n      while (allSwitchInfo.hasMoreTokens()) {\n        String switchInfo \u003d allSwitchInfo.nextToken();\n        m.add(switchInfo);\n      }\n      \n      if (m.size() !\u003d names.size()) {\n        // invalid number of entries returned by the script\n        LOG.warn(\"Script \" + scriptName + \" returned \"\n            + Integer.toString(m.size()) + \" values when \"\n            + Integer.toString(names.size()) + \" were expected.\");\n        return null;\n      }\n    } else {\n      // an error occurred. return null to signify this.\n      // (exn was already logged in runResolveCommand)\n      return null;\n    }\n    \n    return m;\n  }",
      "path": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/ScriptBasedMapping.java",
        "newPath": "common/src/java/org/apache/hadoop/net/ScriptBasedMapping.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,37 @@\n+  public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n+    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n+    \n+    if (names.isEmpty()) {\n+      return m;\n+    }\n+\n+    if (scriptName \u003d\u003d null) {\n+      for (int i \u003d 0; i \u003c names.size(); i++) {\n+        m.add(NetworkTopology.DEFAULT_RACK);\n+      }\n+      return m;\n+    }\n+    \n+    String output \u003d runResolveCommand(names);\n+    if (output !\u003d null) {\n+      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n+      while (allSwitchInfo.hasMoreTokens()) {\n+        String switchInfo \u003d allSwitchInfo.nextToken();\n+        m.add(switchInfo);\n+      }\n+      \n+      if (m.size() !\u003d names.size()) {\n+        // invalid number of entries returned by the script\n+        LOG.warn(\"Script \" + scriptName + \" returned \"\n+            + Integer.toString(m.size()) + \" values when \"\n+            + Integer.toString(names.size()) + \" were expected.\");\n+        return null;\n+      }\n+    } else {\n+      // an error occurred. return null to signify this.\n+      // (exn was already logged in runResolveCommand)\n+      return null;\n+    }\n+    \n+    return m;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e resolve(List\u003cString\u003e names) {\n    List \u003cString\u003e m \u003d new ArrayList\u003cString\u003e(names.size());\n    \n    if (names.isEmpty()) {\n      return m;\n    }\n\n    if (scriptName \u003d\u003d null) {\n      for (int i \u003d 0; i \u003c names.size(); i++) {\n        m.add(NetworkTopology.DEFAULT_RACK);\n      }\n      return m;\n    }\n    \n    String output \u003d runResolveCommand(names);\n    if (output !\u003d null) {\n      StringTokenizer allSwitchInfo \u003d new StringTokenizer(output);\n      while (allSwitchInfo.hasMoreTokens()) {\n        String switchInfo \u003d allSwitchInfo.nextToken();\n        m.add(switchInfo);\n      }\n      \n      if (m.size() !\u003d names.size()) {\n        // invalid number of entries returned by the script\n        LOG.warn(\"Script \" + scriptName + \" returned \"\n            + Integer.toString(m.size()) + \" values when \"\n            + Integer.toString(names.size()) + \" were expected.\");\n        return null;\n      }\n    } else {\n      // an error occurred. return null to signify this.\n      // (exn was already logged in runResolveCommand)\n      return null;\n    }\n    \n    return m;\n  }",
      "path": "src/java/org/apache/hadoop/net/ScriptBasedMapping.java"
    }
  }
}