{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterClientRMService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java",
  "functionStartLine": 150,
  "functionEndLine": 188,
  "numCommitsSeen": 8,
  "timeTaken": 1692,
  "changeHistory": [
    "c83644deacc5d39b4fbba6913fff0a8d6cbd345b",
    "7444406d6d48846d06b04e82587885bb8632a16c",
    "80e1904000923819c98ae68456cb0452c255d5f3"
  ],
  "changeHistoryShort": {
    "c83644deacc5d39b4fbba6913fff0a8d6cbd345b": "Ybodychange",
    "7444406d6d48846d06b04e82587885bb8632a16c": "Ybodychange",
    "80e1904000923819c98ae68456cb0452c255d5f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c83644deacc5d39b4fbba6913fff0a8d6cbd345b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10110. Adding RouterPolicyProvider for RM Federation.\n\nContributed by Bilwa S T.\n",
      "commitDate": "13/03/20 4:26 AM",
      "commitName": "c83644deacc5d39b4fbba6913fff0a8d6cbd345b",
      "commitAuthor": "Bilwa",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "5dc7d6e0f3f46277f0615d61755970a7aa28b8d7",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 548.04,
      "commitsBetweenForRepo": 3652,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,39 @@\n   protected void serviceStart() throws Exception {\n     LOG.info(\"Starting Router ClientRMService\");\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     UserGroupInformation.setConfiguration(conf);\n \n     this.listenerEndpoint \u003d\n         conf.getSocketAddr(YarnConfiguration.ROUTER_BIND_HOST,\n             YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n             YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_ADDRESS,\n             YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PORT);\n \n     int maxCacheSize \u003d\n         conf.getInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE,\n             YarnConfiguration.DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE);\n     this.userPipelineMap \u003d Collections.synchronizedMap(\n         new LRUCacheHashMap\u003cString, RequestInterceptorChainWrapper\u003e(\n             maxCacheSize, true));\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     int numWorkerThreads \u003d\n         serverConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT,\n             YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT);\n \n     this.server \u003d rpc.getServer(ApplicationClientProtocol.class, this,\n         listenerEndpoint, serverConf, null, numWorkerThreads);\n \n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n+      refreshServiceAcls(conf, RouterPolicyProvider.getInstance());\n+    }\n+\n     this.server.start();\n     LOG.info(\"Router ClientRMService listening on address: \"\n         + this.server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    LOG.info(\"Starting Router ClientRMService\");\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    UserGroupInformation.setConfiguration(conf);\n\n    this.listenerEndpoint \u003d\n        conf.getSocketAddr(YarnConfiguration.ROUTER_BIND_HOST,\n            YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_ADDRESS,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PORT);\n\n    int maxCacheSize \u003d\n        conf.getInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE,\n            YarnConfiguration.DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE);\n    this.userPipelineMap \u003d Collections.synchronizedMap(\n        new LRUCacheHashMap\u003cString, RequestInterceptorChainWrapper\u003e(\n            maxCacheSize, true));\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    int numWorkerThreads \u003d\n        serverConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT);\n\n    this.server \u003d rpc.getServer(ApplicationClientProtocol.class, this,\n        listenerEndpoint, serverConf, null, numWorkerThreads);\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      refreshServiceAcls(conf, RouterPolicyProvider.getInstance());\n    }\n\n    this.server.start();\n    LOG.info(\"Router ClientRMService listening on address: \"\n        + this.server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java",
      "extendedDetails": {}
    },
    "7444406d6d48846d06b04e82587885bb8632a16c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5413. Create a proxy chain for ResourceManager Admin API in the Router. (Giovanni Matteo Fumarola via Subru).\n\n(cherry picked from commit 67846a5519b5905c2d925cf4c602f715b653e72c)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "7444406d6d48846d06b04e82587885bb8632a16c",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "80e1904000923819c98ae68456cb0452c255d5f3",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   protected void serviceStart() throws Exception {\n     LOG.info(\"Starting Router ClientRMService\");\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     UserGroupInformation.setConfiguration(conf);\n \n     this.listenerEndpoint \u003d\n-        conf.getSocketAddr(YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n+        conf.getSocketAddr(YarnConfiguration.ROUTER_BIND_HOST,\n+            YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n             YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_ADDRESS,\n             YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PORT);\n \n     int maxCacheSize \u003d\n-        conf.getInt(YarnConfiguration.ROUTER_CLIENTRM_PIPELINE_CACHE_MAX_SIZE,\n-            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PIPELINE_CACHE_MAX_SIZE);\n+        conf.getInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE,\n+            YarnConfiguration.DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE);\n     this.userPipelineMap \u003d Collections.synchronizedMap(\n         new LRUCacheHashMap\u003cString, RequestInterceptorChainWrapper\u003e(\n             maxCacheSize, true));\n \n     Configuration serverConf \u003d new Configuration(conf);\n \n     int numWorkerThreads \u003d\n         serverConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT,\n             YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT);\n \n     this.server \u003d rpc.getServer(ApplicationClientProtocol.class, this,\n         listenerEndpoint, serverConf, null, numWorkerThreads);\n \n     this.server.start();\n     LOG.info(\"Router ClientRMService listening on address: \"\n         + this.server.getListenerAddress());\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    LOG.info(\"Starting Router ClientRMService\");\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    UserGroupInformation.setConfiguration(conf);\n\n    this.listenerEndpoint \u003d\n        conf.getSocketAddr(YarnConfiguration.ROUTER_BIND_HOST,\n            YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_ADDRESS,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PORT);\n\n    int maxCacheSize \u003d\n        conf.getInt(YarnConfiguration.ROUTER_PIPELINE_CACHE_MAX_SIZE,\n            YarnConfiguration.DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE);\n    this.userPipelineMap \u003d Collections.synchronizedMap(\n        new LRUCacheHashMap\u003cString, RequestInterceptorChainWrapper\u003e(\n            maxCacheSize, true));\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    int numWorkerThreads \u003d\n        serverConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT);\n\n    this.server \u003d rpc.getServer(ApplicationClientProtocol.class, this,\n        listenerEndpoint, serverConf, null, numWorkerThreads);\n\n    this.server.start();\n    LOG.info(\"Router ClientRMService listening on address: \"\n        + this.server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java",
      "extendedDetails": {}
    },
    "80e1904000923819c98ae68456cb0452c255d5f3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5411. Create a proxy chain for ApplicationClientProtocol in the Router. (Giovanni Matteo Fumarola via Subru).\n\n(cherry picked from commit 4846069061b6baa06da3b524b9e36567dd368388)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "80e1904000923819c98ae68456cb0452c255d5f3",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,32 @@\n+  protected void serviceStart() throws Exception {\n+    LOG.info(\"Starting Router ClientRMService\");\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+    UserGroupInformation.setConfiguration(conf);\n+\n+    this.listenerEndpoint \u003d\n+        conf.getSocketAddr(YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n+            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_ADDRESS,\n+            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PORT);\n+\n+    int maxCacheSize \u003d\n+        conf.getInt(YarnConfiguration.ROUTER_CLIENTRM_PIPELINE_CACHE_MAX_SIZE,\n+            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PIPELINE_CACHE_MAX_SIZE);\n+    this.userPipelineMap \u003d Collections.synchronizedMap(\n+        new LRUCacheHashMap\u003cString, RequestInterceptorChainWrapper\u003e(\n+            maxCacheSize, true));\n+\n+    Configuration serverConf \u003d new Configuration(conf);\n+\n+    int numWorkerThreads \u003d\n+        serverConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT,\n+            YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT);\n+\n+    this.server \u003d rpc.getServer(ApplicationClientProtocol.class, this,\n+        listenerEndpoint, serverConf, null, numWorkerThreads);\n+\n+    this.server.start();\n+    LOG.info(\"Router ClientRMService listening on address: \"\n+        + this.server.getListenerAddress());\n+    super.serviceStart();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    LOG.info(\"Starting Router ClientRMService\");\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    UserGroupInformation.setConfiguration(conf);\n\n    this.listenerEndpoint \u003d\n        conf.getSocketAddr(YarnConfiguration.ROUTER_CLIENTRM_ADDRESS,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_ADDRESS,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PORT);\n\n    int maxCacheSize \u003d\n        conf.getInt(YarnConfiguration.ROUTER_CLIENTRM_PIPELINE_CACHE_MAX_SIZE,\n            YarnConfiguration.DEFAULT_ROUTER_CLIENTRM_PIPELINE_CACHE_MAX_SIZE);\n    this.userPipelineMap \u003d Collections.synchronizedMap(\n        new LRUCacheHashMap\u003cString, RequestInterceptorChainWrapper\u003e(\n            maxCacheSize, true));\n\n    Configuration serverConf \u003d new Configuration(conf);\n\n    int numWorkerThreads \u003d\n        serverConf.getInt(YarnConfiguration.RM_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_CLIENT_THREAD_COUNT);\n\n    this.server \u003d rpc.getServer(ApplicationClientProtocol.class, this,\n        listenerEndpoint, serverConf, null, numWorkerThreads);\n\n    this.server.start();\n    LOG.info(\"Router ClientRMService listening on address: \"\n        + this.server.getListenerAddress());\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/clientrm/RouterClientRMService.java"
    }
  }
}