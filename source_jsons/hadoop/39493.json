{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCSQueue.java",
  "functionName": "isIntraQueueHierarchyPreemptionDisabled",
  "functionId": "isIntraQueueHierarchyPreemptionDisabled___q-CSQueue__configuration-CapacitySchedulerConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
  "functionStartLine": 979,
  "functionEndLine": 1003,
  "numCommitsSeen": 76,
  "timeTaken": 1671,
  "changeHistory": [
    "949721508467968d5f46170353716ad04349cd6f"
  ],
  "changeHistoryShort": {
    "949721508467968d5f46170353716ad04349cd6f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "949721508467968d5f46170353716ad04349cd6f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7813. Capacity Scheduler Intra-queue Preemption should be configurable for each queue. Contributed by Eric Payne\n",
      "commitDate": "19/02/18 12:06 PM",
      "commitName": "949721508467968d5f46170353716ad04349cd6f",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,25 @@\n+  private boolean isIntraQueueHierarchyPreemptionDisabled(CSQueue q,\n+      CapacitySchedulerConfiguration configuration) {\n+    boolean systemWideIntraQueuePreemption \u003d\n+        csContext.getConfiguration().getBoolean(\n+            CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED,\n+            CapacitySchedulerConfiguration\n+            .DEFAULT_INTRAQUEUE_PREEMPTION_ENABLED);\n+    // Intra-queue preemption is disabled for this queue if the system-wide\n+    // intra-queue preemption flag is false\n+    if (!systemWideIntraQueuePreemption) return true;\n+\n+    // Check if this is the root queue and the root queue\u0027s intra-queue\n+    // preemption disable switch is set\n+    CSQueue parentQ \u003d q.getParent();\n+    if (parentQ \u003d\u003d null) {\n+      return configuration\n+          .getIntraQueuePreemptionDisabled(q.getQueuePath(), false);\n+    }\n+\n+    // At this point, the master preemption switch is enabled down to this\n+    // queue\u0027s level. Determine whether or not intra-queue preemption is enabled\n+    // down to this queu\u0027s level and return that value.\n+    return configuration.getIntraQueuePreemptionDisabled(q.getQueuePath(),\n+        parentQ.getIntraQueuePreemptionDisabledInHierarchy());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isIntraQueueHierarchyPreemptionDisabled(CSQueue q,\n      CapacitySchedulerConfiguration configuration) {\n    boolean systemWideIntraQueuePreemption \u003d\n        csContext.getConfiguration().getBoolean(\n            CapacitySchedulerConfiguration.INTRAQUEUE_PREEMPTION_ENABLED,\n            CapacitySchedulerConfiguration\n            .DEFAULT_INTRAQUEUE_PREEMPTION_ENABLED);\n    // Intra-queue preemption is disabled for this queue if the system-wide\n    // intra-queue preemption flag is false\n    if (!systemWideIntraQueuePreemption) return true;\n\n    // Check if this is the root queue and the root queue\u0027s intra-queue\n    // preemption disable switch is set\n    CSQueue parentQ \u003d q.getParent();\n    if (parentQ \u003d\u003d null) {\n      return configuration\n          .getIntraQueuePreemptionDisabled(q.getQueuePath(), false);\n    }\n\n    // At this point, the master preemption switch is enabled down to this\n    // queue\u0027s level. Determine whether or not intra-queue preemption is enabled\n    // down to this queu\u0027s level and return that value.\n    return configuration.getIntraQueuePreemptionDisabled(q.getQueuePath(),\n        parentQ.getIntraQueuePreemptionDisabledInHierarchy());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java"
    }
  }
}