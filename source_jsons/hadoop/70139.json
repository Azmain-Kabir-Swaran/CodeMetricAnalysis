{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WasbRemoteCallHelper.java",
  "functionName": "retryableRequest",
  "functionId": "retryableRequest___urls-String[]__path-String__queryParams-List__NameValuePair____httpMethod-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/WasbRemoteCallHelper.java",
  "functionStartLine": 109,
  "functionEndLine": 232,
  "numCommitsSeen": 5,
  "timeTaken": 1460,
  "changeHistory": [
    "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329"
  ],
  "changeHistoryShort": {
    "b0e78ae085928c82ae63a05a29a628c2e289c0fc": "Ybodychange",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0e78ae085928c82ae63a05a29a628c2e289c0fc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14640. Azure: Support affinity for service running on localhost and reuse SPNEGO hadoop.auth cookie for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak.\n",
      "commitDate": "17/07/17 2:27 AM",
      "commitName": "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "30/06/17 4:53 PM",
      "commitNameOld": "38996fdcf0987d1da00ce46f8284d8fcdce57329",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 16.4,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,124 @@\n   protected String retryableRequest(String[] urls, String path,\n       List\u003cNameValuePair\u003e queryParams, String httpMethod) throws IOException {\n     HttpResponse response \u003d null;\n     HttpUriRequest httpRequest \u003d null;\n \n-    for (int retry \u003d 0, index \u003d\n-         random.nextInt(urls.length);; retry++, index++) {\n+    /**\n+     * Get the index of local url if any. If list of urls contains strings like\n+     * \"https://localhost:\" or \"http://localhost\", consider it as local url and\n+     * give it affinity more than other urls in the list.\n+     */\n+\n+    int indexOfLocalUrl \u003d -1;\n+    for (int i \u003d 0; i \u003c urls.length; i++) {\n+      if (urls[i].toLowerCase().startsWith(\"https://localhost:\") || urls[i]\n+          .toLowerCase().startsWith(\"http://localhost:\")) {\n+        indexOfLocalUrl \u003d i;\n+      }\n+    }\n+\n+    boolean requiresNewAuth \u003d false;\n+    for (int retry \u003d 0, index \u003d (indexOfLocalUrl !\u003d -1)\n+                                ? indexOfLocalUrl\n+                                : random\n+                                    .nextInt(urls.length);; retry++, index++) {\n       if (index \u003e\u003d urls.length) {\n         index \u003d index % urls.length;\n       }\n-\n+      /**\n+       * If the first request fails to localhost, then randomly pick the next url\n+       * from the remaining urls in the list, so that load can be balanced.\n+       */\n+      if (indexOfLocalUrl !\u003d -1 \u0026\u0026 retry \u003d\u003d 1) {\n+        index \u003d (index + random.nextInt(urls.length)) % urls.length;\n+        if (index \u003d\u003d indexOfLocalUrl) {\n+          index \u003d (index + 1) % urls.length;\n+        }\n+      }\n       try {\n         httpRequest \u003d\n-            getHttpRequest(urls, path, queryParams, index, httpMethod);\n-\n+            getHttpRequest(urls, path, queryParams, index, httpMethod,\n+                requiresNewAuth);\n         httpRequest.setHeader(\"Accept\", APPLICATION_JSON);\n         response \u003d client.execute(httpRequest);\n         StatusLine statusLine \u003d response.getStatusLine();\n         if (statusLine \u003d\u003d null\n             || statusLine.getStatusCode() !\u003d HttpStatus.SC_OK) {\n+          requiresNewAuth \u003d\n+              (statusLine \u003d\u003d null)\n+                  || (statusLine.getStatusCode() \u003d\u003d HttpStatus.SC_UNAUTHORIZED);\n+\n           throw new WasbRemoteCallException(\n               httpRequest.getURI().toString() + \":\" + ((statusLine !\u003d null)\n                                                        ? statusLine.toString()\n                                                        : \"NULL\"));\n+        } else {\n+          requiresNewAuth \u003d false;\n         }\n \n         Header contentTypeHeader \u003d response.getFirstHeader(\"Content-Type\");\n         if (contentTypeHeader \u003d\u003d null || !APPLICATION_JSON\n             .equals(contentTypeHeader.getValue())) {\n           throw new WasbRemoteCallException(\n               httpRequest.getURI().toString() + \":\"\n                   + \"Content-Type mismatch: expected: \" + APPLICATION_JSON\n                   + \", got \" + ((contentTypeHeader !\u003d null) ? contentTypeHeader\n                   .getValue() : \"NULL\"));\n         }\n \n         Header contentLengthHeader \u003d response.getFirstHeader(\"Content-Length\");\n         if (contentLengthHeader \u003d\u003d null) {\n           throw new WasbRemoteCallException(\n               httpRequest.getURI().toString() + \":\"\n                   + \"Content-Length header missing\");\n         }\n \n         try {\n           if (Integer.parseInt(contentLengthHeader.getValue())\n               \u003e MAX_CONTENT_LENGTH) {\n             throw new WasbRemoteCallException(\n                 httpRequest.getURI().toString() + \":\" + \"Content-Length:\"\n                     + contentLengthHeader.getValue() + \"exceeded max:\"\n                     + MAX_CONTENT_LENGTH);\n           }\n         } catch (NumberFormatException nfe) {\n           throw new WasbRemoteCallException(\n               httpRequest.getURI().toString() + \":\"\n                   + \"Invalid Content-Length value :\" + contentLengthHeader\n                   .getValue());\n         }\n \n         BufferedReader rd \u003d null;\n         StringBuilder responseBody \u003d new StringBuilder();\n         try {\n           rd \u003d new BufferedReader(\n               new InputStreamReader(response.getEntity().getContent(),\n                   StandardCharsets.UTF_8));\n           String responseLine \u003d \"\";\n           while ((responseLine \u003d rd.readLine()) !\u003d null) {\n             responseBody.append(responseLine);\n           }\n         } finally {\n           rd.close();\n         }\n         return responseBody.toString();\n       } catch (URISyntaxException uriSyntaxEx) {\n         throw new WasbRemoteCallException(\"Encountered URISyntaxException \"\n             + \"while building the HttpGetRequest to remote service\",\n             uriSyntaxEx);\n       } catch (IOException e) {\n         LOG.debug(e.getMessage(), e);\n         try {\n           shouldRetry(e, retry, (httpRequest !\u003d null)\n                                 ? httpRequest.getURI().toString()\n                                 : urls[index]);\n         } catch (IOException ioex) {\n           String message \u003d\n               \"Encountered error while making remote call to \" + String\n                   .join(\",\", urls) + \" retried \" + retry + \" time(s).\";\n           LOG.error(message, ioex);\n           throw new WasbRemoteCallException(message, ioex);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String retryableRequest(String[] urls, String path,\n      List\u003cNameValuePair\u003e queryParams, String httpMethod) throws IOException {\n    HttpResponse response \u003d null;\n    HttpUriRequest httpRequest \u003d null;\n\n    /**\n     * Get the index of local url if any. If list of urls contains strings like\n     * \"https://localhost:\" or \"http://localhost\", consider it as local url and\n     * give it affinity more than other urls in the list.\n     */\n\n    int indexOfLocalUrl \u003d -1;\n    for (int i \u003d 0; i \u003c urls.length; i++) {\n      if (urls[i].toLowerCase().startsWith(\"https://localhost:\") || urls[i]\n          .toLowerCase().startsWith(\"http://localhost:\")) {\n        indexOfLocalUrl \u003d i;\n      }\n    }\n\n    boolean requiresNewAuth \u003d false;\n    for (int retry \u003d 0, index \u003d (indexOfLocalUrl !\u003d -1)\n                                ? indexOfLocalUrl\n                                : random\n                                    .nextInt(urls.length);; retry++, index++) {\n      if (index \u003e\u003d urls.length) {\n        index \u003d index % urls.length;\n      }\n      /**\n       * If the first request fails to localhost, then randomly pick the next url\n       * from the remaining urls in the list, so that load can be balanced.\n       */\n      if (indexOfLocalUrl !\u003d -1 \u0026\u0026 retry \u003d\u003d 1) {\n        index \u003d (index + random.nextInt(urls.length)) % urls.length;\n        if (index \u003d\u003d indexOfLocalUrl) {\n          index \u003d (index + 1) % urls.length;\n        }\n      }\n      try {\n        httpRequest \u003d\n            getHttpRequest(urls, path, queryParams, index, httpMethod,\n                requiresNewAuth);\n        httpRequest.setHeader(\"Accept\", APPLICATION_JSON);\n        response \u003d client.execute(httpRequest);\n        StatusLine statusLine \u003d response.getStatusLine();\n        if (statusLine \u003d\u003d null\n            || statusLine.getStatusCode() !\u003d HttpStatus.SC_OK) {\n          requiresNewAuth \u003d\n              (statusLine \u003d\u003d null)\n                  || (statusLine.getStatusCode() \u003d\u003d HttpStatus.SC_UNAUTHORIZED);\n\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\" + ((statusLine !\u003d null)\n                                                       ? statusLine.toString()\n                                                       : \"NULL\"));\n        } else {\n          requiresNewAuth \u003d false;\n        }\n\n        Header contentTypeHeader \u003d response.getFirstHeader(\"Content-Type\");\n        if (contentTypeHeader \u003d\u003d null || !APPLICATION_JSON\n            .equals(contentTypeHeader.getValue())) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\"\n                  + \"Content-Type mismatch: expected: \" + APPLICATION_JSON\n                  + \", got \" + ((contentTypeHeader !\u003d null) ? contentTypeHeader\n                  .getValue() : \"NULL\"));\n        }\n\n        Header contentLengthHeader \u003d response.getFirstHeader(\"Content-Length\");\n        if (contentLengthHeader \u003d\u003d null) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\"\n                  + \"Content-Length header missing\");\n        }\n\n        try {\n          if (Integer.parseInt(contentLengthHeader.getValue())\n              \u003e MAX_CONTENT_LENGTH) {\n            throw new WasbRemoteCallException(\n                httpRequest.getURI().toString() + \":\" + \"Content-Length:\"\n                    + contentLengthHeader.getValue() + \"exceeded max:\"\n                    + MAX_CONTENT_LENGTH);\n          }\n        } catch (NumberFormatException nfe) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\"\n                  + \"Invalid Content-Length value :\" + contentLengthHeader\n                  .getValue());\n        }\n\n        BufferedReader rd \u003d null;\n        StringBuilder responseBody \u003d new StringBuilder();\n        try {\n          rd \u003d new BufferedReader(\n              new InputStreamReader(response.getEntity().getContent(),\n                  StandardCharsets.UTF_8));\n          String responseLine \u003d \"\";\n          while ((responseLine \u003d rd.readLine()) !\u003d null) {\n            responseBody.append(responseLine);\n          }\n        } finally {\n          rd.close();\n        }\n        return responseBody.toString();\n      } catch (URISyntaxException uriSyntaxEx) {\n        throw new WasbRemoteCallException(\"Encountered URISyntaxException \"\n            + \"while building the HttpGetRequest to remote service\",\n            uriSyntaxEx);\n      } catch (IOException e) {\n        LOG.debug(e.getMessage(), e);\n        try {\n          shouldRetry(e, retry, (httpRequest !\u003d null)\n                                ? httpRequest.getURI().toString()\n                                : urls[index]);\n        } catch (IOException ioex) {\n          String message \u003d\n              \"Encountered error while making remote call to \" + String\n                  .join(\",\", urls) + \" retried \" + retry + \" time(s).\";\n          LOG.error(message, ioex);\n          throw new WasbRemoteCallException(message, ioex);\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/WasbRemoteCallHelper.java",
      "extendedDetails": {}
    },
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14443. Azure: Support retry and client side failover for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak\n",
      "commitDate": "30/06/17 4:53 PM",
      "commitName": "38996fdcf0987d1da00ce46f8284d8fcdce57329",
      "commitAuthor": "Mingliang Liu",
      "diff": "@@ -0,0 +1,92 @@\n+  protected String retryableRequest(String[] urls, String path,\n+      List\u003cNameValuePair\u003e queryParams, String httpMethod) throws IOException {\n+    HttpResponse response \u003d null;\n+    HttpUriRequest httpRequest \u003d null;\n+\n+    for (int retry \u003d 0, index \u003d\n+         random.nextInt(urls.length);; retry++, index++) {\n+      if (index \u003e\u003d urls.length) {\n+        index \u003d index % urls.length;\n+      }\n+\n+      try {\n+        httpRequest \u003d\n+            getHttpRequest(urls, path, queryParams, index, httpMethod);\n+\n+        httpRequest.setHeader(\"Accept\", APPLICATION_JSON);\n+        response \u003d client.execute(httpRequest);\n+        StatusLine statusLine \u003d response.getStatusLine();\n+        if (statusLine \u003d\u003d null\n+            || statusLine.getStatusCode() !\u003d HttpStatus.SC_OK) {\n+          throw new WasbRemoteCallException(\n+              httpRequest.getURI().toString() + \":\" + ((statusLine !\u003d null)\n+                                                       ? statusLine.toString()\n+                                                       : \"NULL\"));\n+        }\n+\n+        Header contentTypeHeader \u003d response.getFirstHeader(\"Content-Type\");\n+        if (contentTypeHeader \u003d\u003d null || !APPLICATION_JSON\n+            .equals(contentTypeHeader.getValue())) {\n+          throw new WasbRemoteCallException(\n+              httpRequest.getURI().toString() + \":\"\n+                  + \"Content-Type mismatch: expected: \" + APPLICATION_JSON\n+                  + \", got \" + ((contentTypeHeader !\u003d null) ? contentTypeHeader\n+                  .getValue() : \"NULL\"));\n+        }\n+\n+        Header contentLengthHeader \u003d response.getFirstHeader(\"Content-Length\");\n+        if (contentLengthHeader \u003d\u003d null) {\n+          throw new WasbRemoteCallException(\n+              httpRequest.getURI().toString() + \":\"\n+                  + \"Content-Length header missing\");\n+        }\n+\n+        try {\n+          if (Integer.parseInt(contentLengthHeader.getValue())\n+              \u003e MAX_CONTENT_LENGTH) {\n+            throw new WasbRemoteCallException(\n+                httpRequest.getURI().toString() + \":\" + \"Content-Length:\"\n+                    + contentLengthHeader.getValue() + \"exceeded max:\"\n+                    + MAX_CONTENT_LENGTH);\n+          }\n+        } catch (NumberFormatException nfe) {\n+          throw new WasbRemoteCallException(\n+              httpRequest.getURI().toString() + \":\"\n+                  + \"Invalid Content-Length value :\" + contentLengthHeader\n+                  .getValue());\n+        }\n+\n+        BufferedReader rd \u003d null;\n+        StringBuilder responseBody \u003d new StringBuilder();\n+        try {\n+          rd \u003d new BufferedReader(\n+              new InputStreamReader(response.getEntity().getContent(),\n+                  StandardCharsets.UTF_8));\n+          String responseLine \u003d \"\";\n+          while ((responseLine \u003d rd.readLine()) !\u003d null) {\n+            responseBody.append(responseLine);\n+          }\n+        } finally {\n+          rd.close();\n+        }\n+        return responseBody.toString();\n+      } catch (URISyntaxException uriSyntaxEx) {\n+        throw new WasbRemoteCallException(\"Encountered URISyntaxException \"\n+            + \"while building the HttpGetRequest to remote service\",\n+            uriSyntaxEx);\n+      } catch (IOException e) {\n+        LOG.debug(e.getMessage(), e);\n+        try {\n+          shouldRetry(e, retry, (httpRequest !\u003d null)\n+                                ? httpRequest.getURI().toString()\n+                                : urls[index]);\n+        } catch (IOException ioex) {\n+          String message \u003d\n+              \"Encountered error while making remote call to \" + String\n+                  .join(\",\", urls) + \" retried \" + retry + \" time(s).\";\n+          LOG.error(message, ioex);\n+          throw new WasbRemoteCallException(message, ioex);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected String retryableRequest(String[] urls, String path,\n      List\u003cNameValuePair\u003e queryParams, String httpMethod) throws IOException {\n    HttpResponse response \u003d null;\n    HttpUriRequest httpRequest \u003d null;\n\n    for (int retry \u003d 0, index \u003d\n         random.nextInt(urls.length);; retry++, index++) {\n      if (index \u003e\u003d urls.length) {\n        index \u003d index % urls.length;\n      }\n\n      try {\n        httpRequest \u003d\n            getHttpRequest(urls, path, queryParams, index, httpMethod);\n\n        httpRequest.setHeader(\"Accept\", APPLICATION_JSON);\n        response \u003d client.execute(httpRequest);\n        StatusLine statusLine \u003d response.getStatusLine();\n        if (statusLine \u003d\u003d null\n            || statusLine.getStatusCode() !\u003d HttpStatus.SC_OK) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\" + ((statusLine !\u003d null)\n                                                       ? statusLine.toString()\n                                                       : \"NULL\"));\n        }\n\n        Header contentTypeHeader \u003d response.getFirstHeader(\"Content-Type\");\n        if (contentTypeHeader \u003d\u003d null || !APPLICATION_JSON\n            .equals(contentTypeHeader.getValue())) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\"\n                  + \"Content-Type mismatch: expected: \" + APPLICATION_JSON\n                  + \", got \" + ((contentTypeHeader !\u003d null) ? contentTypeHeader\n                  .getValue() : \"NULL\"));\n        }\n\n        Header contentLengthHeader \u003d response.getFirstHeader(\"Content-Length\");\n        if (contentLengthHeader \u003d\u003d null) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\"\n                  + \"Content-Length header missing\");\n        }\n\n        try {\n          if (Integer.parseInt(contentLengthHeader.getValue())\n              \u003e MAX_CONTENT_LENGTH) {\n            throw new WasbRemoteCallException(\n                httpRequest.getURI().toString() + \":\" + \"Content-Length:\"\n                    + contentLengthHeader.getValue() + \"exceeded max:\"\n                    + MAX_CONTENT_LENGTH);\n          }\n        } catch (NumberFormatException nfe) {\n          throw new WasbRemoteCallException(\n              httpRequest.getURI().toString() + \":\"\n                  + \"Invalid Content-Length value :\" + contentLengthHeader\n                  .getValue());\n        }\n\n        BufferedReader rd \u003d null;\n        StringBuilder responseBody \u003d new StringBuilder();\n        try {\n          rd \u003d new BufferedReader(\n              new InputStreamReader(response.getEntity().getContent(),\n                  StandardCharsets.UTF_8));\n          String responseLine \u003d \"\";\n          while ((responseLine \u003d rd.readLine()) !\u003d null) {\n            responseBody.append(responseLine);\n          }\n        } finally {\n          rd.close();\n        }\n        return responseBody.toString();\n      } catch (URISyntaxException uriSyntaxEx) {\n        throw new WasbRemoteCallException(\"Encountered URISyntaxException \"\n            + \"while building the HttpGetRequest to remote service\",\n            uriSyntaxEx);\n      } catch (IOException e) {\n        LOG.debug(e.getMessage(), e);\n        try {\n          shouldRetry(e, retry, (httpRequest !\u003d null)\n                                ? httpRequest.getURI().toString()\n                                : urls[index]);\n        } catch (IOException ioex) {\n          String message \u003d\n              \"Encountered error while making remote call to \" + String\n                  .join(\",\", urls) + \" retried \" + retry + \" time(s).\";\n          LOG.error(message, ioex);\n          throw new WasbRemoteCallException(message, ioex);\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/WasbRemoteCallHelper.java"
    }
  }
}