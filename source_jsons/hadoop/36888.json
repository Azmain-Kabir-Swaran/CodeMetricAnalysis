{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppBlock.java",
  "functionName": "generateApplicationTable",
  "functionId": "generateApplicationTable___html-Block__callerUGI-UserGroupInformation__attempts-Collection__ApplicationAttemptReport__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
  "functionStartLine": 121,
  "functionEndLine": 186,
  "numCommitsSeen": 14,
  "timeTaken": 3606,
  "changeHistory": [
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "620325e81696fca140195b74929ed9eda2d5eb16",
    "308d63f382e1992ea2b8ccf3130edaaa751c644d",
    "40d222e862063dc6c474cc6e8de0dce6c4395012",
    "7e8639fda40c13fe163128d7a725fcd0f2fce3c5",
    "1fa8075794894b3e0053d251788277fb88e85533",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6"
  ],
  "changeHistoryShort": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "620325e81696fca140195b74929ed9eda2d5eb16": "Ybodychange",
    "308d63f382e1992ea2b8ccf3130edaaa751c644d": "Ybodychange",
    "40d222e862063dc6c474cc6e8de0dce6c4395012": "Ybodychange",
    "7e8639fda40c13fe163128d7a725fcd0f2fce3c5": "Ybodychange",
    "1fa8075794894b3e0053d251788277fb88e85533": "Ybodychange",
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 272.97,
      "commitsBetweenForRepo": 2585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n             .th(\".appBlacklistednodes\", \"Nodes blacklisted by the application\",\n                 \"Nodes blacklisted by the app\")\n             .th(\".rmBlacklistednodes\", \"Nodes blacklisted by the RM for the\"\n                 + \" app\", \"Nodes blacklisted by the system\").__().__().tbody();\n \n     RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n     if (rmApp \u003d\u003d null) {\n       return;\n     }\n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       RMAppAttempt rmAppAttempt \u003d\n           rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n       if (rmAppAttempt \u003d\u003d null) {\n         continue;\n       }\n       AppAttemptInfo attemptInfo \u003d\n           new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n               WebAppUtils.getHttpSchemePrefix(conf));\n       Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n       // nodes which are blacklisted by the application\n       String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n       // nodes which are blacklisted by the RM for AM launches\n       String rmBlacklistedNodesCount \u003d\n           String.valueOf(rmAppAttempt.getAMBlacklistManager()\n             .getBlacklistUpdates().getBlacklistAdditions().size());\n       String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n       if (nodeLink !\u003d null) {\n         nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n       }\n       String logsLink \u003d attemptInfo.getLogsLink();\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n           .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n           .append(\"\u0027\u003e\")\n           .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n           .append(attemptInfo.getStartTime())\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n-              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n+              .escapeEcmaScript(StringEscapeUtils.escapeHtml4(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n           .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n           .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n           .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n         .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".appBlacklistednodes\", \"Nodes blacklisted by the application\",\n                \"Nodes blacklisted by the app\")\n            .th(\".rmBlacklistednodes\", \"Nodes blacklisted by the RM for the\"\n                + \" app\", \"Nodes blacklisted by the system\").__().__().tbody();\n\n    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n    if (rmApp \u003d\u003d null) {\n      return;\n    }\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      RMAppAttempt rmAppAttempt \u003d\n          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n      if (rmAppAttempt \u003d\u003d null) {\n        continue;\n      }\n      AppAttemptInfo attemptInfo \u003d\n          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n              WebAppUtils.getHttpSchemePrefix(conf));\n      Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n      // nodes which are blacklisted by the application\n      String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n      // nodes which are blacklisted by the RM for AM launches\n      String rmBlacklistedNodesCount \u003d\n          String.valueOf(rmAppAttempt.getAMBlacklistManager()\n            .getBlacklistUpdates().getBlacklistAdditions().size());\n      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n      if (nodeLink !\u003d null) {\n        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n      }\n      String logsLink \u003d attemptInfo.getLogsLink();\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n          .append(\"\u0027\u003e\")\n          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(attemptInfo.getStartTime())\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeEcmaScript(StringEscapeUtils.escapeHtml4(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n          .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n          .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/11/16 2:35 PM",
      "commitNameOld": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 259.07,
      "commitsBetweenForRepo": 1357,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n             .th(\".appBlacklistednodes\", \"Nodes blacklisted by the application\",\n                 \"Nodes blacklisted by the app\")\n             .th(\".rmBlacklistednodes\", \"Nodes blacklisted by the RM for the\"\n-                + \" app\", \"Nodes blacklisted by the system\")._()._().tbody();\n+                + \" app\", \"Nodes blacklisted by the system\").__().__().tbody();\n \n     RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n     if (rmApp \u003d\u003d null) {\n       return;\n     }\n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       RMAppAttempt rmAppAttempt \u003d\n           rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n       if (rmAppAttempt \u003d\u003d null) {\n         continue;\n       }\n       AppAttemptInfo attemptInfo \u003d\n           new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n               WebAppUtils.getHttpSchemePrefix(conf));\n       Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n       // nodes which are blacklisted by the application\n       String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n       // nodes which are blacklisted by the RM for AM launches\n       String rmBlacklistedNodesCount \u003d\n           String.valueOf(rmAppAttempt.getAMBlacklistManager()\n             .getBlacklistUpdates().getBlacklistAdditions().size());\n       String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n       if (nodeLink !\u003d null) {\n         nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n       }\n       String logsLink \u003d attemptInfo.getLogsLink();\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n           .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n           .append(\"\u0027\u003e\")\n           .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n           .append(attemptInfo.getStartTime())\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n               .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n           .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n           .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n           .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n-        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+        .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n-    tbody._()._();\n+    tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".appBlacklistednodes\", \"Nodes blacklisted by the application\",\n                \"Nodes blacklisted by the app\")\n            .th(\".rmBlacklistednodes\", \"Nodes blacklisted by the RM for the\"\n                + \" app\", \"Nodes blacklisted by the system\").__().__().tbody();\n\n    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n    if (rmApp \u003d\u003d null) {\n      return;\n    }\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      RMAppAttempt rmAppAttempt \u003d\n          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n      if (rmAppAttempt \u003d\u003d null) {\n        continue;\n      }\n      AppAttemptInfo attemptInfo \u003d\n          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n              WebAppUtils.getHttpSchemePrefix(conf));\n      Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n      // nodes which are blacklisted by the application\n      String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n      // nodes which are blacklisted by the RM for AM launches\n      String rmBlacklistedNodesCount \u003d\n          String.valueOf(rmAppAttempt.getAMBlacklistManager()\n            .getBlacklistUpdates().getBlacklistAdditions().size());\n      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n      if (nodeLink !\u003d null) {\n        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n      }\n      String logsLink \u003d attemptInfo.getLogsLink();\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n          .append(\"\u0027\u003e\")\n          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(attemptInfo.getStartTime())\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n          .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n          .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        .__(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "620325e81696fca140195b74929ed9eda2d5eb16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
      "commitDate": "07/06/16 3:06 PM",
      "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "04/02/16 12:02 AM",
      "commitNameOld": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 124.59,
      "commitsBetweenForRepo": 794,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,66 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n-            .th(\".appBlacklistednodes\", \"Nodes black listed by the application\",\n-                \"App Blacklisted Nodes\")\n-            .th(\".rmBlacklistednodes\", \"Nodes black listed by the RM for the\"\n-                + \" app\", \"RM Blacklisted Nodes\")._()._().tbody();\n+            .th(\".appBlacklistednodes\", \"Nodes blacklisted by the application\",\n+                \"Nodes blacklisted by the app\")\n+            .th(\".rmBlacklistednodes\", \"Nodes blacklisted by the RM for the\"\n+                + \" app\", \"Nodes blacklisted by the system\")._()._().tbody();\n \n     RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n     if (rmApp \u003d\u003d null) {\n       return;\n     }\n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       RMAppAttempt rmAppAttempt \u003d\n           rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n       if (rmAppAttempt \u003d\u003d null) {\n         continue;\n       }\n       AppAttemptInfo attemptInfo \u003d\n           new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n               WebAppUtils.getHttpSchemePrefix(conf));\n       Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n       // nodes which are blacklisted by the application\n       String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n       // nodes which are blacklisted by the RM for AM launches\n-      String rmBlacklistedNodesCount \u003d String.valueOf(rmAppAttempt\n-          .getAMBlacklist().getBlacklistUpdates().getAdditions().size());\n+      String rmBlacklistedNodesCount \u003d\n+          String.valueOf(rmAppAttempt.getAMBlacklistManager()\n+            .getBlacklistUpdates().getBlacklistAdditions().size());\n       String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n       if (nodeLink !\u003d null) {\n         nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n       }\n       String logsLink \u003d attemptInfo.getLogsLink();\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n           .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n           .append(\"\u0027\u003e\")\n           .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n           .append(attemptInfo.getStartTime())\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n               .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n           .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n           .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n           .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n         ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".appBlacklistednodes\", \"Nodes blacklisted by the application\",\n                \"Nodes blacklisted by the app\")\n            .th(\".rmBlacklistednodes\", \"Nodes blacklisted by the RM for the\"\n                + \" app\", \"Nodes blacklisted by the system\")._()._().tbody();\n\n    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n    if (rmApp \u003d\u003d null) {\n      return;\n    }\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      RMAppAttempt rmAppAttempt \u003d\n          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n      if (rmAppAttempt \u003d\u003d null) {\n        continue;\n      }\n      AppAttemptInfo attemptInfo \u003d\n          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n              WebAppUtils.getHttpSchemePrefix(conf));\n      Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n      // nodes which are blacklisted by the application\n      String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n      // nodes which are blacklisted by the RM for AM launches\n      String rmBlacklistedNodesCount \u003d\n          String.valueOf(rmAppAttempt.getAMBlacklistManager()\n            .getBlacklistUpdates().getBlacklistAdditions().size());\n      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n      if (nodeLink !\u003d null) {\n        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n      }\n      String logsLink \u003d attemptInfo.getLogsLink();\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n          .append(\"\u0027\u003e\")\n          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(attemptInfo.getStartTime())\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n          .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n          .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "308d63f382e1992ea2b8ccf3130edaaa751c644d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4307. Display blacklisted nodes for AM container in the RM web UI. Contributed by Naganarasimha G R.\n",
      "commitDate": "04/02/16 12:02 AM",
      "commitName": "308d63f382e1992ea2b8ccf3130edaaa751c644d",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "04/09/15 2:01 AM",
      "commitNameOld": "40d222e862063dc6c474cc6e8de0dce6c4395012",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 152.96,
      "commitsBetweenForRepo": 1062,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,65 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n-            .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n+            .th(\".appBlacklistednodes\", \"Nodes black listed by the application\",\n+                \"App Blacklisted Nodes\")\n+            .th(\".rmBlacklistednodes\", \"Nodes black listed by the RM for the\"\n+                + \" app\", \"RM Blacklisted Nodes\")._()._().tbody();\n \n     RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n     if (rmApp \u003d\u003d null) {\n       return;\n     }\n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       RMAppAttempt rmAppAttempt \u003d\n           rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n       if (rmAppAttempt \u003d\u003d null) {\n         continue;\n       }\n       AppAttemptInfo attemptInfo \u003d\n           new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n               WebAppUtils.getHttpSchemePrefix(conf));\n-      String blacklistedNodesCount \u003d \"N/A\";\n-      Set\u003cString\u003e nodes \u003d\n-          RMAppAttemptBlock.getBlacklistedNodes(rm,\n-            rmAppAttempt.getAppAttemptId());\n-      if(nodes !\u003d null) {\n-        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n-      }\n+      Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n+      // nodes which are blacklisted by the application\n+      String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n+      // nodes which are blacklisted by the RM for AM launches\n+      String rmBlacklistedNodesCount \u003d String.valueOf(rmAppAttempt\n+          .getAMBlacklist().getBlacklistUpdates().getAdditions().size());\n       String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n       if (nodeLink !\u003d null) {\n         nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n       }\n       String logsLink \u003d attemptInfo.getLogsLink();\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n           .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n           .append(\"\u0027\u003e\")\n           .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n           .append(attemptInfo.getStartTime())\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n               .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n-          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n-          \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n+          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n+          .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n+          .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n         ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".appBlacklistednodes\", \"Nodes black listed by the application\",\n                \"App Blacklisted Nodes\")\n            .th(\".rmBlacklistednodes\", \"Nodes black listed by the RM for the\"\n                + \" app\", \"RM Blacklisted Nodes\")._()._().tbody();\n\n    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n    if (rmApp \u003d\u003d null) {\n      return;\n    }\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      RMAppAttempt rmAppAttempt \u003d\n          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n      if (rmAppAttempt \u003d\u003d null) {\n        continue;\n      }\n      AppAttemptInfo attemptInfo \u003d\n          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n              WebAppUtils.getHttpSchemePrefix(conf));\n      Set\u003cString\u003e nodes \u003d rmAppAttempt.getBlacklistedNodes();\n      // nodes which are blacklisted by the application\n      String appBlacklistedNodesCount \u003d String.valueOf(nodes.size());\n      // nodes which are blacklisted by the RM for AM launches\n      String rmBlacklistedNodesCount \u003d String.valueOf(rmAppAttempt\n          .getAMBlacklist().getBlacklistUpdates().getAdditions().size());\n      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n      if (nodeLink !\u003d null) {\n        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n      }\n      String logsLink \u003d attemptInfo.getLogsLink();\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n          .append(\"\u0027\u003e\")\n          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(attemptInfo.getStartTime())\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\")\n          .append(\"\\\"\").append(appBlacklistedNodesCount).append(\"\\\",\")\n          .append(\"\\\"\").append(rmBlacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "40d222e862063dc6c474cc6e8de0dce6c4395012": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4103. RM WebServices missing scheme for appattempts logLinks. Contributed by Jonathan Eagles.\n",
      "commitDate": "04/09/15 2:01 AM",
      "commitName": "40d222e862063dc6c474cc6e8de0dce6c4395012",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "14/05/15 10:58 AM",
      "commitNameOld": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 112.63,
      "commitsBetweenForRepo": 708,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n             .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n \n     RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n     if (rmApp \u003d\u003d null) {\n       return;\n     }\n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       RMAppAttempt rmAppAttempt \u003d\n           rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n       if (rmAppAttempt \u003d\u003d null) {\n         continue;\n       }\n       AppAttemptInfo attemptInfo \u003d\n-          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser());\n+          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n+              WebAppUtils.getHttpSchemePrefix(conf));\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d\n           RMAppAttemptBlock.getBlacklistedNodes(rm,\n             rmAppAttempt.getAppAttemptId());\n       if(nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n       String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n       if (nodeLink !\u003d null) {\n         nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n       }\n       String logsLink \u003d attemptInfo.getLogsLink();\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n           .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n           .append(\"\u0027\u003e\")\n           .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n           .append(attemptInfo.getStartTime())\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n               .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n           .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n           \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n         ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n\n    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n    if (rmApp \u003d\u003d null) {\n      return;\n    }\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      RMAppAttempt rmAppAttempt \u003d\n          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n      if (rmAppAttempt \u003d\u003d null) {\n        continue;\n      }\n      AppAttemptInfo attemptInfo \u003d\n          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser(),\n              WebAppUtils.getHttpSchemePrefix(conf));\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock.getBlacklistedNodes(rm,\n            rmAppAttempt.getAppAttemptId());\n      if(nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n      if (nodeLink !\u003d null) {\n        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n      }\n      String logsLink \u003d attemptInfo.getLogsLink();\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n          .append(\"\u0027\u003e\")\n          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(attemptInfo.getStartTime())\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n          \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "7e8639fda40c13fe163128d7a725fcd0f2fce3c5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3544. Got back AM logs link on the RM web UI for a completed app. Contributed by Xuan Gong.\n",
      "commitDate": "30/04/15 1:05 PM",
      "commitName": "7e8639fda40c13fe163128d7a725fcd0f2fce3c5",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "16/04/15 8:04 AM",
      "commitNameOld": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 14.21,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,61 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n             .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n \n+    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n+    if (rmApp \u003d\u003d null) {\n+      return;\n+    }\n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n-      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n-      ContainerReport containerReport \u003d null;\n-      try {\n-        // AM container is always the first container of the attempt\n-        final GetContainerReportRequest request \u003d\n-            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n-                appAttemptReport.getApplicationAttemptId(), 1));\n-        if (callerUGI \u003d\u003d null) {\n-          containerReport \u003d\n-              appBaseProt.getContainerReport(request).getContainerReport();\n-        } else {\n-          containerReport \u003d callerUGI.doAs(\n-              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n-                @Override\n-                public ContainerReport run() throws Exception {\n-                  ContainerReport report \u003d null;\n-                  try {\n-                    report \u003d appBaseProt.getContainerReport(request)\n-                        .getContainerReport();\n-                  } catch (ContainerNotFoundException ex) {\n-                    LOG.warn(ex.getMessage());\n-                  }\n-                  return report;\n-                }\n-              });\n-        }\n-      } catch (Exception e) {\n-        String message \u003d\n-            \"Failed to read the AM container of the application attempt \"\n-                + appAttemptReport.getApplicationAttemptId() + \".\";\n-        LOG.error(message, e);\n-        html.p()._(message)._();\n-        return;\n+      RMAppAttempt rmAppAttempt \u003d\n+          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n+      if (rmAppAttempt \u003d\u003d null) {\n+        continue;\n       }\n-      long startTime \u003d 0L;\n-      String logsLink \u003d null;\n-      String nodeLink \u003d null;\n-      if (containerReport !\u003d null) {\n-        ContainerInfo container \u003d new ContainerInfo(containerReport);\n-        startTime \u003d container.getStartedTime();\n-        logsLink \u003d containerReport.getLogUrl();\n-        nodeLink \u003d containerReport.getNodeHttpAddress();\n-      }\n+      AppAttemptInfo attemptInfo \u003d\n+          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser());\n       String blacklistedNodesCount \u003d \"N/A\";\n-      Set\u003cString\u003e nodes \u003d RMAppAttemptBlock.getBlacklistedNodes(rm,\n-          ConverterUtils.toApplicationAttemptId(appAttempt.getAppAttemptId()));\n+      Set\u003cString\u003e nodes \u003d\n+          RMAppAttemptBlock.getBlacklistedNodes(rm,\n+            rmAppAttempt.getAppAttemptId());\n       if(nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n-\n+      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n+      if (nodeLink !\u003d null) {\n+        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n+      }\n+      String logsLink \u003d attemptInfo.getLogsLink();\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n-          .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n+          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n           .append(\"\u0027\u003e\")\n-          .append(appAttempt.getAppAttemptId())\n+          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n-          .append(startTime)\n+          .append(attemptInfo.getStartTime())\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n               .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n           .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n           \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n         ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n\n    RMApp rmApp \u003d this.rm.getRMContext().getRMApps().get(this.appID);\n    if (rmApp \u003d\u003d null) {\n      return;\n    }\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      RMAppAttempt rmAppAttempt \u003d\n          rmApp.getRMAppAttempt(appAttemptReport.getApplicationAttemptId());\n      if (rmAppAttempt \u003d\u003d null) {\n        continue;\n      }\n      AppAttemptInfo attemptInfo \u003d\n          new AppAttemptInfo(this.rm, rmAppAttempt, rmApp.getUser());\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d\n          RMAppAttemptBlock.getBlacklistedNodes(rm,\n            rmAppAttempt.getAppAttemptId());\n      if(nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n      String nodeLink \u003d attemptInfo.getNodeHttpAddress();\n      if (nodeLink !\u003d null) {\n        nodeLink \u003d WebAppUtils.getHttpSchemePrefix(conf) + nodeLink;\n      }\n      String logsLink \u003d attemptInfo.getLogsLink();\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", rmAppAttempt.getAppAttemptId().toString()))\n          .append(\"\u0027\u003e\")\n          .append(String.valueOf(rmAppAttempt.getAppAttemptId()))\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(attemptInfo.getStartTime())\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n          \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "1fa8075794894b3e0053d251788277fb88e85533": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6300. Task list sort by task id broken. Contributed by Siqi Li.\n",
      "commitDate": "16/04/15 8:04 AM",
      "commitName": "1fa8075794894b3e0053d251788277fb88e85533",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "01/04/15 4:19 AM",
      "commitNameOld": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 15.16,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,88 @@\n   protected void generateApplicationTable(Block html,\n       UserGroupInformation callerUGI,\n       Collection\u003cApplicationAttemptReport\u003e attempts) {\n     // Application Attempt Table\n     Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n         html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n             .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n             .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n \n     StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n     for (final ApplicationAttemptReport appAttemptReport : attempts) {\n       AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n       ContainerReport containerReport \u003d null;\n       try {\n         // AM container is always the first container of the attempt\n         final GetContainerReportRequest request \u003d\n             GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n                 appAttemptReport.getApplicationAttemptId(), 1));\n         if (callerUGI \u003d\u003d null) {\n           containerReport \u003d\n               appBaseProt.getContainerReport(request).getContainerReport();\n         } else {\n           containerReport \u003d callerUGI.doAs(\n               new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n                 @Override\n                 public ContainerReport run() throws Exception {\n                   ContainerReport report \u003d null;\n                   try {\n                     report \u003d appBaseProt.getContainerReport(request)\n                         .getContainerReport();\n                   } catch (ContainerNotFoundException ex) {\n                     LOG.warn(ex.getMessage());\n                   }\n                   return report;\n                 }\n               });\n         }\n       } catch (Exception e) {\n         String message \u003d\n             \"Failed to read the AM container of the application attempt \"\n                 + appAttemptReport.getApplicationAttemptId() + \".\";\n         LOG.error(message, e);\n         html.p()._(message)._();\n         return;\n       }\n       long startTime \u003d 0L;\n       String logsLink \u003d null;\n       String nodeLink \u003d null;\n       if (containerReport !\u003d null) {\n         ContainerInfo container \u003d new ContainerInfo(containerReport);\n         startTime \u003d container.getStartedTime();\n         logsLink \u003d containerReport.getLogUrl();\n         nodeLink \u003d containerReport.getNodeHttpAddress();\n       }\n       String blacklistedNodesCount \u003d \"N/A\";\n       Set\u003cString\u003e nodes \u003d RMAppAttemptBlock.getBlacklistedNodes(rm,\n           ConverterUtils.toApplicationAttemptId(appAttempt.getAppAttemptId()));\n       if(nodes !\u003d null) {\n         blacklistedNodesCount \u003d String.valueOf(nodes.size());\n       }\n \n-      // AppAttemptID numerical value parsed by parseHadoopID in\n-      // yarn.dt.plugins.js\n       attemptsTableData\n           .append(\"[\\\"\u003ca href\u003d\u0027\")\n           .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n           .append(\"\u0027\u003e\")\n           .append(appAttempt.getAppAttemptId())\n           .append(\"\u003c/a\u003e\\\",\\\"\")\n           .append(startTime)\n           .append(\"\\\",\\\"\u003ca \")\n           .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n           .append(\"\u0027\u003e\")\n           .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n               .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n           .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n           .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n           .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n           \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n     }\n     if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n       attemptsTableData.delete(attemptsTableData.length() - 2,\n           attemptsTableData.length() - 1);\n     }\n     attemptsTableData.append(\"]\");\n     html.script().$type(\"text/javascript\")\n         ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n     tbody._()._();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport \u003d null;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n                appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n                @Override\n                public ContainerReport run() throws Exception {\n                  ContainerReport report \u003d null;\n                  try {\n                    report \u003d appBaseProt.getContainerReport(request)\n                        .getContainerReport();\n                  } catch (ContainerNotFoundException ex) {\n                    LOG.warn(ex.getMessage());\n                  }\n                  return report;\n                }\n              });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d RMAppAttemptBlock.getBlacklistedNodes(rm,\n          ConverterUtils.toApplicationAttemptId(appAttempt.getAppAttemptId()));\n      if(nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n          .append(\"\u0027\u003e\")\n          .append(appAttempt.getAppAttemptId())\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(startTime)\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n          \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java",
      "extendedDetails": {}
    },
    "4728bdfa15809db4b8b235faa286c65de4a48cf6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3248. Display count of nodes blacklisted by apps in the web UI.\nContributed by Varun Vasudev\n",
      "commitDate": "01/04/15 4:19 AM",
      "commitName": "4728bdfa15809db4b8b235faa286c65de4a48cf6",
      "commitAuthor": "Xuan",
      "diff": "@@ -0,0 +1,90 @@\n+  protected void generateApplicationTable(Block html,\n+      UserGroupInformation callerUGI,\n+      Collection\u003cApplicationAttemptReport\u003e attempts) {\n+    // Application Attempt Table\n+    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n+        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n+            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n+            .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n+\n+    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n+    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n+      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n+      ContainerReport containerReport \u003d null;\n+      try {\n+        // AM container is always the first container of the attempt\n+        final GetContainerReportRequest request \u003d\n+            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n+                appAttemptReport.getApplicationAttemptId(), 1));\n+        if (callerUGI \u003d\u003d null) {\n+          containerReport \u003d\n+              appBaseProt.getContainerReport(request).getContainerReport();\n+        } else {\n+          containerReport \u003d callerUGI.doAs(\n+              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n+                @Override\n+                public ContainerReport run() throws Exception {\n+                  ContainerReport report \u003d null;\n+                  try {\n+                    report \u003d appBaseProt.getContainerReport(request)\n+                        .getContainerReport();\n+                  } catch (ContainerNotFoundException ex) {\n+                    LOG.warn(ex.getMessage());\n+                  }\n+                  return report;\n+                }\n+              });\n+        }\n+      } catch (Exception e) {\n+        String message \u003d\n+            \"Failed to read the AM container of the application attempt \"\n+                + appAttemptReport.getApplicationAttemptId() + \".\";\n+        LOG.error(message, e);\n+        html.p()._(message)._();\n+        return;\n+      }\n+      long startTime \u003d 0L;\n+      String logsLink \u003d null;\n+      String nodeLink \u003d null;\n+      if (containerReport !\u003d null) {\n+        ContainerInfo container \u003d new ContainerInfo(containerReport);\n+        startTime \u003d container.getStartedTime();\n+        logsLink \u003d containerReport.getLogUrl();\n+        nodeLink \u003d containerReport.getNodeHttpAddress();\n+      }\n+      String blacklistedNodesCount \u003d \"N/A\";\n+      Set\u003cString\u003e nodes \u003d RMAppAttemptBlock.getBlacklistedNodes(rm,\n+          ConverterUtils.toApplicationAttemptId(appAttempt.getAppAttemptId()));\n+      if(nodes !\u003d null) {\n+        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n+      }\n+\n+      // AppAttemptID numerical value parsed by parseHadoopID in\n+      // yarn.dt.plugins.js\n+      attemptsTableData\n+          .append(\"[\\\"\u003ca href\u003d\u0027\")\n+          .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n+          .append(\"\u0027\u003e\")\n+          .append(appAttempt.getAppAttemptId())\n+          .append(\"\u003c/a\u003e\\\",\\\"\")\n+          .append(startTime)\n+          .append(\"\\\",\\\"\u003ca \")\n+          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n+          .append(\"\u0027\u003e\")\n+          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n+              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n+          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n+          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n+          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n+          \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n+    }\n+    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+      attemptsTableData.delete(attemptsTableData.length() - 2,\n+          attemptsTableData.length() - 1);\n+    }\n+    attemptsTableData.append(\"]\");\n+    html.script().$type(\"text/javascript\")\n+        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+\n+    tbody._()._();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void generateApplicationTable(Block html,\n      UserGroupInformation callerUGI,\n      Collection\u003cApplicationAttemptReport\u003e attempts) {\n    // Application Attempt Table\n    Hamlet.TBODY\u003cHamlet.TABLE\u003cHamlet\u003e\u003e tbody \u003d\n        html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\")\n            .th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\")\n            .th(\".blacklistednodes\", \"Blacklisted Nodes\")._()._().tbody();\n\n    StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\n      AppAttemptInfo appAttempt \u003d new AppAttemptInfo(appAttemptReport);\n      ContainerReport containerReport \u003d null;\n      try {\n        // AM container is always the first container of the attempt\n        final GetContainerReportRequest request \u003d\n            GetContainerReportRequest.newInstance(ContainerId.newContainerId(\n                appAttemptReport.getApplicationAttemptId(), 1));\n        if (callerUGI \u003d\u003d null) {\n          containerReport \u003d\n              appBaseProt.getContainerReport(request).getContainerReport();\n        } else {\n          containerReport \u003d callerUGI.doAs(\n              new PrivilegedExceptionAction\u003cContainerReport\u003e() {\n                @Override\n                public ContainerReport run() throws Exception {\n                  ContainerReport report \u003d null;\n                  try {\n                    report \u003d appBaseProt.getContainerReport(request)\n                        .getContainerReport();\n                  } catch (ContainerNotFoundException ex) {\n                    LOG.warn(ex.getMessage());\n                  }\n                  return report;\n                }\n              });\n        }\n      } catch (Exception e) {\n        String message \u003d\n            \"Failed to read the AM container of the application attempt \"\n                + appAttemptReport.getApplicationAttemptId() + \".\";\n        LOG.error(message, e);\n        html.p()._(message)._();\n        return;\n      }\n      long startTime \u003d 0L;\n      String logsLink \u003d null;\n      String nodeLink \u003d null;\n      if (containerReport !\u003d null) {\n        ContainerInfo container \u003d new ContainerInfo(containerReport);\n        startTime \u003d container.getStartedTime();\n        logsLink \u003d containerReport.getLogUrl();\n        nodeLink \u003d containerReport.getNodeHttpAddress();\n      }\n      String blacklistedNodesCount \u003d \"N/A\";\n      Set\u003cString\u003e nodes \u003d RMAppAttemptBlock.getBlacklistedNodes(rm,\n          ConverterUtils.toApplicationAttemptId(appAttempt.getAppAttemptId()));\n      if(nodes !\u003d null) {\n        blacklistedNodesCount \u003d String.valueOf(nodes.size());\n      }\n\n      // AppAttemptID numerical value parsed by parseHadoopID in\n      // yarn.dt.plugins.js\n      attemptsTableData\n          .append(\"[\\\"\u003ca href\u003d\u0027\")\n          .append(url(\"appattempt\", appAttempt.getAppAttemptId()))\n          .append(\"\u0027\u003e\")\n          .append(appAttempt.getAppAttemptId())\n          .append(\"\u003c/a\u003e\\\",\\\"\")\n          .append(startTime)\n          .append(\"\\\",\\\"\u003ca \")\n          .append(nodeLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + nodeLink)\n          .append(\"\u0027\u003e\")\n          .append(nodeLink \u003d\u003d null ? \"N/A\" : StringEscapeUtils\n              .escapeJavaScript(StringEscapeUtils.escapeHtml(nodeLink)))\n          .append(\"\u003c/a\u003e\\\",\\\"\u003ca \")\n          .append(logsLink \u003d\u003d null ? \"#\" : \"href\u003d\u0027\" + logsLink).append(\"\u0027\u003e\")\n          .append(logsLink \u003d\u003d null ? \"N/A\" : \"Logs\").append(\"\u003c/a\u003e\\\",\").append(\n          \"\\\"\").append(blacklistedNodesCount).append(\"\\\"],\\n\");\n    }\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n      attemptsTableData.delete(attemptsTableData.length() - 2,\n          attemptsTableData.length() - 1);\n    }\n    attemptsTableData.append(\"]\");\n    html.script().$type(\"text/javascript\")\n        ._(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n    tbody._()._();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMAppBlock.java"
    }
  }
}