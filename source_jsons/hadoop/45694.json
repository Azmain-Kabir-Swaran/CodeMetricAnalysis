{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationIndexedFileController.java",
  "functionName": "initInternal",
  "functionId": "initInternal___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
  "functionStartLine": 142,
  "functionEndLine": 152,
  "numCommitsSeen": 18,
  "timeTaken": 2430,
  "changeHistory": [
    "4f758dd4c682bacbb110c51a96079a6c5d103c95",
    "7d831eca645f93d064975ebae35a7cbea3bbad31",
    "280080fad01304c85a9ede4d4f7b707eb36c0155",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc"
  ],
  "changeHistoryShort": {
    "4f758dd4c682bacbb110c51a96079a6c5d103c95": "Ybodychange",
    "7d831eca645f93d064975ebae35a7cbea3bbad31": "Ybodychange",
    "280080fad01304c85a9ede4d4f7b707eb36c0155": "Ybodychange",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4f758dd4c682bacbb110c51a96079a6c5d103c95": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9607. Auto-configuring rollover-size of IFile format for non-appendable filesystems. Contributed by Adam Antal\n",
      "commitDate": "05/12/19 12:49 PM",
      "commitName": "4f758dd4c682bacbb110c51a96079a6c5d103c95",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "14/05/19 10:48 AM",
      "commitNameOld": "7d831eca645f93d064975ebae35a7cbea3bbad31",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 205.13,
      "commitsBetweenForRepo": 1471,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,11 @@\n   public void initInternal(Configuration conf) {\n-    // Currently, we need the underlying File System to support append\n-    // operation. Will remove this check after we finish\n-    // LogAggregationIndexedFileController for non-append mode.\n-    boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n-    if (!append) {\n-      throw new YarnRuntimeException(\"The configuration:\"\n-          + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n-          + \" use LogAggregationIndexedFileController when the FileSystem \"\n-          + \"support append operations.\");\n-    }\n     String compressName \u003d conf.get(\n         YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n         YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n     this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n         compressName);\n     this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n     this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n     this.logRollOverMaxFileSize \u003d getRollOverLogMaxSize(conf);\n     this.sysClock \u003d getSystemClock();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initInternal(Configuration conf) {\n    String compressName \u003d conf.get(\n        YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n        YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n    this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n        compressName);\n    this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n    this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n    this.logRollOverMaxFileSize \u003d getRollOverLogMaxSize(conf);\n    this.sysClock \u003d getSystemClock();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
      "extendedDetails": {}
    },
    "7d831eca645f93d064975ebae35a7cbea3bbad31": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9519. TFile log aggregation file format is not working for yarn.log-aggregation.TFile.remote-app-log-dir config. Contributed by Adam Antal.\n",
      "commitDate": "14/05/19 10:48 AM",
      "commitName": "7d831eca645f93d064975ebae35a7cbea3bbad31",
      "commitAuthor": "Sunil G",
      "commitDateOld": "06/05/19 4:48 PM",
      "commitNameOld": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 7.75,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,21 @@\n   public void initInternal(Configuration conf) {\n     // Currently, we need the underlying File System to support append\n     // operation. Will remove this check after we finish\n     // LogAggregationIndexedFileController for non-append mode.\n     boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n     if (!append) {\n       throw new YarnRuntimeException(\"The configuration:\"\n           + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n           + \" use LogAggregationIndexedFileController when the FileSystem \"\n           + \"support append operations.\");\n     }\n-    String remoteDirStr \u003d String.format(\n-        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT,\n-        this.fileControllerName);\n-    String remoteDir \u003d conf.get(remoteDirStr);\n-    if (remoteDir \u003d\u003d null || remoteDir.isEmpty()) {\n-      remoteDir \u003d conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR);\n-    }\n-    this.remoteRootLogDir \u003d new Path(remoteDir);\n-    String suffix \u003d String.format(\n-        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT,\n-        this.fileControllerName);\n-    this.remoteRootLogDirSuffix \u003d conf.get(suffix);\n-    if (this.remoteRootLogDirSuffix \u003d\u003d null\n-        || this.remoteRootLogDirSuffix.isEmpty()) {\n-      this.remoteRootLogDirSuffix \u003d conf.get(\n-          YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n-          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX)\n-          + \"-ifile\";\n-    }\n     String compressName \u003d conf.get(\n         YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n         YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n     this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n         compressName);\n     this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n     this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n     this.logRollOverMaxFileSize \u003d getRollOverLogMaxSize(conf);\n     this.sysClock \u003d getSystemClock();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initInternal(Configuration conf) {\n    // Currently, we need the underlying File System to support append\n    // operation. Will remove this check after we finish\n    // LogAggregationIndexedFileController for non-append mode.\n    boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n    if (!append) {\n      throw new YarnRuntimeException(\"The configuration:\"\n          + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n          + \" use LogAggregationIndexedFileController when the FileSystem \"\n          + \"support append operations.\");\n    }\n    String compressName \u003d conf.get(\n        YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n        YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n    this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n        compressName);\n    this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n    this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n    this.logRollOverMaxFileSize \u003d getRollOverLogMaxSize(conf);\n    this.sysClock \u003d getSystemClock();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
      "extendedDetails": {}
    },
    "280080fad01304c85a9ede4d4f7b707eb36c0155": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7259. Add size-based rolling policy to LogAggregationIndexedFileController. (xgong via wangda)\n\nChange-Id: Ifaf82c0aee6b73b9b6ebf103aa72e131e3942f31\n",
      "commitDate": "02/10/17 3:30 PM",
      "commitName": "280080fad01304c85a9ede4d4f7b707eb36c0155",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "13/09/17 10:16 PM",
      "commitNameOld": "c92c1d521eadfd8a4cd8205cc6aee74816f353f4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 18.72,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void initInternal(Configuration conf) {\n     // Currently, we need the underlying File System to support append\n     // operation. Will remove this check after we finish\n     // LogAggregationIndexedFileController for non-append mode.\n     boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n     if (!append) {\n       throw new YarnRuntimeException(\"The configuration:\"\n           + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n           + \" use LogAggregationIndexedFileController when the FileSystem \"\n           + \"support append operations.\");\n     }\n     String remoteDirStr \u003d String.format(\n         YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT,\n         this.fileControllerName);\n     String remoteDir \u003d conf.get(remoteDirStr);\n     if (remoteDir \u003d\u003d null || remoteDir.isEmpty()) {\n       remoteDir \u003d conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n           YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR);\n     }\n     this.remoteRootLogDir \u003d new Path(remoteDir);\n     String suffix \u003d String.format(\n         YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT,\n         this.fileControllerName);\n     this.remoteRootLogDirSuffix \u003d conf.get(suffix);\n     if (this.remoteRootLogDirSuffix \u003d\u003d null\n         || this.remoteRootLogDirSuffix.isEmpty()) {\n       this.remoteRootLogDirSuffix \u003d conf.get(\n           YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n           YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX)\n           + \"-ifile\";\n     }\n     String compressName \u003d conf.get(\n         YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n         YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n     this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n         compressName);\n     this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n     this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n+    this.logRollOverMaxFileSize \u003d getRollOverLogMaxSize(conf);\n+    this.sysClock \u003d getSystemClock();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initInternal(Configuration conf) {\n    // Currently, we need the underlying File System to support append\n    // operation. Will remove this check after we finish\n    // LogAggregationIndexedFileController for non-append mode.\n    boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n    if (!append) {\n      throw new YarnRuntimeException(\"The configuration:\"\n          + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n          + \" use LogAggregationIndexedFileController when the FileSystem \"\n          + \"support append operations.\");\n    }\n    String remoteDirStr \u003d String.format(\n        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT,\n        this.fileControllerName);\n    String remoteDir \u003d conf.get(remoteDirStr);\n    if (remoteDir \u003d\u003d null || remoteDir.isEmpty()) {\n      remoteDir \u003d conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR);\n    }\n    this.remoteRootLogDir \u003d new Path(remoteDir);\n    String suffix \u003d String.format(\n        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT,\n        this.fileControllerName);\n    this.remoteRootLogDirSuffix \u003d conf.get(suffix);\n    if (this.remoteRootLogDirSuffix \u003d\u003d null\n        || this.remoteRootLogDirSuffix.isEmpty()) {\n      this.remoteRootLogDirSuffix \u003d conf.get(\n          YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX)\n          + \"-ifile\";\n    }\n    String compressName \u003d conf.get(\n        YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n        YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n    this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n        compressName);\n    this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n    this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n    this.logRollOverMaxFileSize \u003d getRollOverLogMaxSize(conf);\n    this.sysClock \u003d getSystemClock();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java",
      "extendedDetails": {}
    },
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,39 @@\n+  public void initInternal(Configuration conf) {\n+    // Currently, we need the underlying File System to support append\n+    // operation. Will remove this check after we finish\n+    // LogAggregationIndexedFileController for non-append mode.\n+    boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n+    if (!append) {\n+      throw new YarnRuntimeException(\"The configuration:\"\n+          + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n+          + \" use LogAggregationIndexedFileController when the FileSystem \"\n+          + \"support append operations.\");\n+    }\n+    String remoteDirStr \u003d String.format(\n+        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT,\n+        this.fileControllerName);\n+    String remoteDir \u003d conf.get(remoteDirStr);\n+    if (remoteDir \u003d\u003d null || remoteDir.isEmpty()) {\n+      remoteDir \u003d conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n+          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR);\n+    }\n+    this.remoteRootLogDir \u003d new Path(remoteDir);\n+    String suffix \u003d String.format(\n+        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT,\n+        this.fileControllerName);\n+    this.remoteRootLogDirSuffix \u003d conf.get(suffix);\n+    if (this.remoteRootLogDirSuffix \u003d\u003d null\n+        || this.remoteRootLogDirSuffix.isEmpty()) {\n+      this.remoteRootLogDirSuffix \u003d conf.get(\n+          YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n+          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX)\n+          + \"-ifile\";\n+    }\n+    String compressName \u003d conf.get(\n+        YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n+        YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n+    this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n+        compressName);\n+    this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n+    this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initInternal(Configuration conf) {\n    // Currently, we need the underlying File System to support append\n    // operation. Will remove this check after we finish\n    // LogAggregationIndexedFileController for non-append mode.\n    boolean append \u003d conf.getBoolean(LOG_AGGREGATION_FS_SUPPORT_APPEND, true);\n    if (!append) {\n      throw new YarnRuntimeException(\"The configuration:\"\n          + LOG_AGGREGATION_FS_SUPPORT_APPEND + \" is set as False. We can only\"\n          + \" use LogAggregationIndexedFileController when the FileSystem \"\n          + \"support append operations.\");\n    }\n    String remoteDirStr \u003d String.format(\n        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT,\n        this.fileControllerName);\n    String remoteDir \u003d conf.get(remoteDirStr);\n    if (remoteDir \u003d\u003d null || remoteDir.isEmpty()) {\n      remoteDir \u003d conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR);\n    }\n    this.remoteRootLogDir \u003d new Path(remoteDir);\n    String suffix \u003d String.format(\n        YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT,\n        this.fileControllerName);\n    this.remoteRootLogDirSuffix \u003d conf.get(suffix);\n    if (this.remoteRootLogDirSuffix \u003d\u003d null\n        || this.remoteRootLogDirSuffix.isEmpty()) {\n      this.remoteRootLogDirSuffix \u003d conf.get(\n          YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,\n          YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX)\n          + \"-ifile\";\n    }\n    String compressName \u003d conf.get(\n        YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n        YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\n    this.compressAlgo \u003d Compression.getCompressionAlgorithmByName(\n        compressName);\n    this.fsNumRetries \u003d conf.getInt(FS_NUM_RETRIES_ATTR, 3);\n    this.fsRetryInterval \u003d conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/ifile/LogAggregationIndexedFileController.java"
    }
  }
}