{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SecureDataNodeStarter.java",
  "functionName": "init",
  "functionId": "init___context-DaemonContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
  "functionStartLine": 86,
  "functionEndLine": 95,
  "numCommitsSeen": 22,
  "timeTaken": 5284,
  "changeHistory": [
    "69dbf0b22587e4f8fe2651ebd53f873920f29c91",
    "d02baff9a0d8cec92bde751777f3e575da2339c8",
    "c013142a12692df90f3b3bc5878918f2c9f8c55e",
    "251230a12601295849f51083a32d9f996fa353de",
    "b13a5cdcb7e4094b650b246a00848a0225d36cce",
    "7fb42f8f4b93105e976da92a7ab4a773bc87cfad",
    "8def56e51e32f52a9bd30ca2196b27456b7bc0db",
    "0475795066ad89fc3ac4bfbe0dbe061555f3fbf7",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "69dbf0b22587e4f8fe2651ebd53f873920f29c91": "Ybodychange",
    "d02baff9a0d8cec92bde751777f3e575da2339c8": "Ybodychange",
    "c013142a12692df90f3b3bc5878918f2c9f8c55e": "Ybodychange",
    "251230a12601295849f51083a32d9f996fa353de": "Ybodychange",
    "b13a5cdcb7e4094b650b246a00848a0225d36cce": "Ybodychange",
    "7fb42f8f4b93105e976da92a7ab4a773bc87cfad": "Ybodychange",
    "8def56e51e32f52a9bd30ca2196b27456b7bc0db": "Ybodychange",
    "0475795066ad89fc3ac4bfbe0dbe061555f3fbf7": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69dbf0b22587e4f8fe2651ebd53f873920f29c91": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5876. SecureDataNodeStarter does not pick up configuration in hdfs-site.xml. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564897 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 11:43 AM",
      "commitName": "69dbf0b22587e4f8fe2651ebd53f873920f29c91",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 8.51,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,10 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n-    Configuration conf \u003d new Configuration();\n+    // Create a new HdfsConfiguration object to ensure that the configuration in\n+    // hdfs-site.xml is picked up.\n+    Configuration conf \u003d new HdfsConfiguration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     resources \u003d getSecureResources(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    // Create a new HdfsConfiguration object to ensure that the configuration in\n    // hdfs-site.xml is picked up.\n    Configuration conf \u003d new HdfsConfiguration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    resources \u003d getSecureResources(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "d02baff9a0d8cec92bde751777f3e575da2339c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 1:40 PM",
      "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/12/12 2:46 PM",
      "commitNameOld": "64cbb3c2ffac484d2ebe7386d0f40db3bb995580",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 358.95,
      "commitsBetweenForRepo": 2114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,8 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     Configuration conf \u003d new Configuration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n-    \n-    sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n-    resources \u003d getSecureResources(sslFactory, conf);\n+    resources \u003d getSecureResources(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    Configuration conf \u003d new Configuration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    resources \u003d getSecureResources(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "c013142a12692df90f3b3bc5878918f2c9f8c55e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9004. Allow security unit tests to use external KDC. Contributed by Stephen Chu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/11/12 4:48 PM",
      "commitName": "c013142a12692df90f3b3bc5878918f2c9f8c55e",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "06/11/12 2:23 PM",
      "commitNameOld": "251230a12601295849f51083a32d9f996fa353de",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,10 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     Configuration conf \u003d new Configuration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n-    // Obtain secure port for data streaming to datanode\n-    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n-    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n-        HdfsServerConstants.WRITE_TIMEOUT);\n-    \n-    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n-        ServerSocketChannel.open().socket() : new ServerSocket();\n-    ss.bind(streamingAddr, 0);\n-    \n-    // Check that we got the port we need\n-    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n-      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n-    }\n-\n-    // Obtain secure listener for web server\n-    Connector listener;\n-    if (HttpConfig.isSecure()) {\n-      sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n-      try {\n-        sslFactory.init();\n-      } catch (GeneralSecurityException ex) {\n-        throw new IOException(ex);\n-      }\n-      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n-        @Override\n-        protected SSLServerSocketFactory createFactory() throws Exception {\n-          return sslFactory.createSSLServerSocketFactory();\n-        }\n-      };\n-      listener \u003d sslListener;\n-    } else {\n-      listener \u003d HttpServer.createDefaultChannelConnector();\n-    }\n-\n-    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n-    listener.setHost(infoSocAddr.getHostName());\n-    listener.setPort(infoSocAddr.getPort());\n-    // Open listener here in order to bind to port as root\n-    listener.open();\n-    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n-          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n-    }\n-    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n-        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n-    \n-    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n-        UserGroupInformation.isSecurityEnabled()) {\n-      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n-    }\n-    System.err.println(\"Opened streaming server at \" + streamingAddr);\n-    System.err.println(\"Opened info server at \" + infoSocAddr);\n-    resources \u003d new SecureResources(ss, listener);\n+    sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n+    resources \u003d getSecureResources(sslFactory, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    Configuration conf \u003d new Configuration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n    resources \u003d getSecureResources(sslFactory, conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "251230a12601295849f51083a32d9f996fa353de": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9004. Reverting the commit r1406202 to address patch issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406379 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/11/12 2:23 PM",
      "commitName": "251230a12601295849f51083a32d9f996fa353de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "06/11/12 8:12 AM",
      "commitNameOld": "b13a5cdcb7e4094b650b246a00848a0225d36cce",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,62 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     Configuration conf \u003d new Configuration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n-    sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n-    resources \u003d getSecureResources(sslFactory, conf);\n+    // Obtain secure port for data streaming to datanode\n+    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n+    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n+        HdfsServerConstants.WRITE_TIMEOUT);\n+    \n+    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n+        ServerSocketChannel.open().socket() : new ServerSocket();\n+    ss.bind(streamingAddr, 0);\n+    \n+    // Check that we got the port we need\n+    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n+      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n+      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+    }\n+\n+    // Obtain secure listener for web server\n+    Connector listener;\n+    if (HttpConfig.isSecure()) {\n+      sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n+      try {\n+        sslFactory.init();\n+      } catch (GeneralSecurityException ex) {\n+        throw new IOException(ex);\n+      }\n+      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n+        @Override\n+        protected SSLServerSocketFactory createFactory() throws Exception {\n+          return sslFactory.createSSLServerSocketFactory();\n+        }\n+      };\n+      listener \u003d sslListener;\n+    } else {\n+      listener \u003d HttpServer.createDefaultChannelConnector();\n+    }\n+\n+    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n+    listener.setHost(infoSocAddr.getHostName());\n+    listener.setPort(infoSocAddr.getPort());\n+    // Open listener here in order to bind to port as root\n+    listener.open();\n+    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n+      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n+          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+    }\n+    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n+        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n+    \n+    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n+        UserGroupInformation.isSecurityEnabled()) {\n+      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n+    }\n+    System.err.println(\"Opened streaming server at \" + streamingAddr);\n+    System.err.println(\"Opened info server at \" + infoSocAddr);\n+    resources \u003d new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    Configuration conf \u003d new Configuration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n    \n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n\n    // Obtain secure listener for web server\n    Connector listener;\n    if (HttpConfig.isSecure()) {\n      sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n      try {\n        sslFactory.init();\n      } catch (GeneralSecurityException ex) {\n        throw new IOException(ex);\n      }\n      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n        @Override\n        protected SSLServerSocketFactory createFactory() throws Exception {\n          return sslFactory.createSSLServerSocketFactory();\n        }\n      };\n      listener \u003d sslListener;\n    } else {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n    }\n\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open();\n    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n        UserGroupInformation.isSecurityEnabled()) {\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    }\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n    System.err.println(\"Opened info server at \" + infoSocAddr);\n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "b13a5cdcb7e4094b650b246a00848a0225d36cce": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9004. Allow security unit tests to use external KDC. Contributed by Stephen Chu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/11/12 8:12 AM",
      "commitName": "b13a5cdcb7e4094b650b246a00848a0225d36cce",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "19/09/12 10:39 AM",
      "commitNameOld": "7fb42f8f4b93105e976da92a7ab4a773bc87cfad",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 47.94,
      "commitsBetweenForRepo": 265,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,10 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     Configuration conf \u003d new Configuration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n-    // Obtain secure port for data streaming to datanode\n-    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n-    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n-        HdfsServerConstants.WRITE_TIMEOUT);\n-    \n-    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n-        ServerSocketChannel.open().socket() : new ServerSocket();\n-    ss.bind(streamingAddr, 0);\n-    \n-    // Check that we got the port we need\n-    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n-      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n-    }\n-\n-    // Obtain secure listener for web server\n-    Connector listener;\n-    if (HttpConfig.isSecure()) {\n-      sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n-      try {\n-        sslFactory.init();\n-      } catch (GeneralSecurityException ex) {\n-        throw new IOException(ex);\n-      }\n-      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n-        @Override\n-        protected SSLServerSocketFactory createFactory() throws Exception {\n-          return sslFactory.createSSLServerSocketFactory();\n-        }\n-      };\n-      listener \u003d sslListener;\n-    } else {\n-      listener \u003d HttpServer.createDefaultChannelConnector();\n-    }\n-\n-    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n-    listener.setHost(infoSocAddr.getHostName());\n-    listener.setPort(infoSocAddr.getPort());\n-    // Open listener here in order to bind to port as root\n-    listener.open();\n-    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n-      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n-          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n-    }\n-    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n-        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n-    \n-    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n-        UserGroupInformation.isSecurityEnabled()) {\n-      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n-    }\n-    System.err.println(\"Opened streaming server at \" + streamingAddr);\n-    System.err.println(\"Opened info server at \" + infoSocAddr);\n-    resources \u003d new SecureResources(ss, listener);\n+    sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n+    resources \u003d getSecureResources(sslFactory, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    Configuration conf \u003d new Configuration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n    resources \u003d getSecureResources(sslFactory, conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "7fb42f8f4b93105e976da92a7ab4a773bc87cfad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3951. datanode web ui does not work over HTTPS when datanode is started in secure mode. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1387688 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/12 10:39 AM",
      "commitName": "7fb42f8f4b93105e976da92a7ab4a773bc87cfad",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 25.69,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,62 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     Configuration conf \u003d new Configuration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n     \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n     \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n       \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n     }\n \n     // Obtain secure listener for web server\n-    SelectChannelConnector listener \u003d \n-                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n+    Connector listener;\n+    if (HttpConfig.isSecure()) {\n+      sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n+      try {\n+        sslFactory.init();\n+      } catch (GeneralSecurityException ex) {\n+        throw new IOException(ex);\n+      }\n+      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n+        @Override\n+        protected SSLServerSocketFactory createFactory() throws Exception {\n+          return sslFactory.createSSLServerSocketFactory();\n+        }\n+      };\n+      listener \u003d sslListener;\n+    } else {\n+      listener \u003d HttpServer.createDefaultChannelConnector();\n+    }\n+\n     InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n     listener.setHost(infoSocAddr.getHostName());\n     listener.setPort(infoSocAddr.getPort());\n     // Open listener here in order to bind to port as root\n-    listener.open(); \n+    listener.open();\n     if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n           \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n     }\n     System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n         + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n     \n     if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n         UserGroupInformation.isSecurityEnabled()) {\n       throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n     }\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n     System.err.println(\"Opened info server at \" + infoSocAddr);\n     resources \u003d new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    Configuration conf \u003d new Configuration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n    \n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n\n    // Obtain secure listener for web server\n    Connector listener;\n    if (HttpConfig.isSecure()) {\n      sslFactory \u003d new SSLFactory(SSLFactory.Mode.SERVER, conf);\n      try {\n        sslFactory.init();\n      } catch (GeneralSecurityException ex) {\n        throw new IOException(ex);\n      }\n      SslSocketConnector sslListener \u003d new SslSocketConnector() {\n        @Override\n        protected SSLServerSocketFactory createFactory() throws Exception {\n          return sslFactory.createSSLServerSocketFactory();\n        }\n      };\n      listener \u003d sslListener;\n    } else {\n      listener \u003d HttpServer.createDefaultChannelConnector();\n    }\n\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open();\n    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n        UserGroupInformation.isSecurityEnabled()) {\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    }\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n    System.err.println(\"Opened info server at \" + infoSocAddr);\n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "8def56e51e32f52a9bd30ca2196b27456b7bc0db": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3400. DNs should be able start with jsvc even if security is disabled. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/12 8:15 PM",
      "commitName": "8def56e51e32f52a9bd30ca2196b27456b7bc0db",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "28/03/12 12:33 PM",
      "commitNameOld": "0475795066ad89fc3ac4bfbe0dbe061555f3fbf7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 43.32,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,45 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n-    // We should only start up a secure datanode in a Kerberos-secured cluster\n-    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n-    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n-      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n+    Configuration conf \u003d new Configuration();\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n     \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(streamingAddr, 0);\n     \n     // Check that we got the port we need\n     if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n       \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n     }\n \n     // Obtain secure listener for web server\n     SelectChannelConnector listener \u003d \n                    (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n     InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n     listener.setHost(infoSocAddr.getHostName());\n     listener.setPort(infoSocAddr.getPort());\n     // Open listener here in order to bind to port as root\n     listener.open(); \n     if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n           \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n     }\n     System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n         + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n     \n-    if (ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) {\n+    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n+        UserGroupInformation.isSecurityEnabled()) {\n       throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n     }\n     System.err.println(\"Opened streaming server at \" + streamingAddr);\n     System.err.println(\"Opened info server at \" + infoSocAddr);\n     resources \u003d new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    Configuration conf \u003d new Configuration();\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n    \n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n\n    // Obtain secure listener for web server\n    SelectChannelConnector listener \u003d \n                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open(); \n    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if ((ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) \u0026\u0026\n        UserGroupInformation.isSecurityEnabled()) {\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    }\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n    System.err.println(\"Opened info server at \" + infoSocAddr);\n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "0475795066ad89fc3ac4bfbe0dbe061555f3fbf7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3139. Minor Datanode logging improvement. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1306549 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/12 12:33 PM",
      "commitName": "0475795066ad89fc3ac4bfbe0dbe061555f3fbf7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "04/09/11 12:30 PM",
      "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 206.0,
      "commitsBetweenForRepo": 1474,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,47 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     // We should only start up a secure datanode in a Kerberos-secured cluster\n     Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n     if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n       throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n     // Obtain secure port for data streaming to datanode\n-    InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n+    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n         HdfsServerConstants.WRITE_TIMEOUT);\n     \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n-    ss.bind(socAddr, 0);\n+    ss.bind(streamingAddr, 0);\n     \n     // Check that we got the port we need\n-    if(ss.getLocalPort() !\u003d socAddr.getPort())\n+    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n-      \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n+      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+    }\n \n     // Obtain secure listener for web server\n     SelectChannelConnector listener \u003d \n                    (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n     InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n     listener.setHost(infoSocAddr.getHostName());\n     listener.setPort(infoSocAddr.getPort());\n     // Open listener here in order to bind to port as root\n     listener.open(); \n-    if(listener.getPort() !\u003d infoSocAddr.getPort())\n+    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n       throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n-          \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n+          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n+    }\n     System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n         + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n     \n-    if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n+    if (ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) {\n       throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n-    \n+    }\n+    System.err.println(\"Opened streaming server at \" + streamingAddr);\n+    System.err.println(\"Opened info server at \" + infoSocAddr);\n     resources \u003d new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    // We should only start up a secure datanode in a Kerberos-secured cluster\n    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress streamingAddr  \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(streamingAddr, 0);\n    \n    // Check that we got the port we need\n    if (ss.getLocalPort() !\u003d streamingAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n\n    // Obtain secure listener for web server\n    SelectChannelConnector listener \u003d \n                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open(); \n    if (listener.getPort() !\u003d infoSocAddr.getPort()) {\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + streamingAddr.getPort() + \", got \" + ss.getLocalPort());\n    }\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if (ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023) {\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    }\n    System.err.println(\"Opened streaming server at \" + streamingAddr);\n    System.err.println(\"Opened info server at \" + infoSocAddr);\n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public void init(DaemonContext context) throws Exception {\n     System.err.println(\"Initializing secure datanode resources\");\n     // We should only start up a secure datanode in a Kerberos-secured cluster\n     Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n     if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n       throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n     \n     // Stash command-line arguments for regular datanode\n     args \u003d context.getArguments();\n     \n     // Obtain secure port for data streaming to datanode\n     InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n     int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n-        HdfsConstants.WRITE_TIMEOUT);\n+        HdfsServerConstants.WRITE_TIMEOUT);\n     \n     ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n         ServerSocketChannel.open().socket() : new ServerSocket();\n     ss.bind(socAddr, 0);\n     \n     // Check that we got the port we need\n     if(ss.getLocalPort() !\u003d socAddr.getPort())\n       throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n       \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n \n     // Obtain secure listener for web server\n     SelectChannelConnector listener \u003d \n                    (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n     InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n     listener.setHost(infoSocAddr.getHostName());\n     listener.setPort(infoSocAddr.getPort());\n     // Open listener here in order to bind to port as root\n     listener.open(); \n     if(listener.getPort() !\u003d infoSocAddr.getPort())\n       throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n           \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n     System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n         + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n     \n     if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n       throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n     \n     resources \u003d new SecureResources(ss, listener);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    // We should only start up a secure datanode in a Kerberos-secured cluster\n    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsServerConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(socAddr, 0);\n    \n    // Check that we got the port we need\n    if(ss.getLocalPort() !\u003d socAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n\n    // Obtain secure listener for web server\n    SelectChannelConnector listener \u003d \n                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open(); \n    if(listener.getPort() !\u003d infoSocAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    \n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    // We should only start up a secure datanode in a Kerberos-secured cluster\n    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(socAddr, 0);\n    \n    // Check that we got the port we need\n    if(ss.getLocalPort() !\u003d socAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n\n    // Obtain secure listener for web server\n    SelectChannelConnector listener \u003d \n                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open(); \n    if(listener.getPort() !\u003d infoSocAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    \n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    // We should only start up a secure datanode in a Kerberos-secured cluster\n    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(socAddr, 0);\n    \n    // Check that we got the port we need\n    if(ss.getLocalPort() !\u003d socAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n\n    // Obtain secure listener for web server\n    SelectChannelConnector listener \u003d \n                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open(); \n    if(listener.getPort() !\u003d infoSocAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    \n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,43 @@\n+  public void init(DaemonContext context) throws Exception {\n+    System.err.println(\"Initializing secure datanode resources\");\n+    // We should only start up a secure datanode in a Kerberos-secured cluster\n+    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n+    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n+      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n+    \n+    // Stash command-line arguments for regular datanode\n+    args \u003d context.getArguments();\n+    \n+    // Obtain secure port for data streaming to datanode\n+    InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n+    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n+        HdfsConstants.WRITE_TIMEOUT);\n+    \n+    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n+        ServerSocketChannel.open().socket() : new ServerSocket();\n+    ss.bind(socAddr, 0);\n+    \n+    // Check that we got the port we need\n+    if(ss.getLocalPort() !\u003d socAddr.getPort())\n+      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n+      \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n+\n+    // Obtain secure listener for web server\n+    SelectChannelConnector listener \u003d \n+                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n+    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n+    listener.setHost(infoSocAddr.getHostName());\n+    listener.setPort(infoSocAddr.getPort());\n+    // Open listener here in order to bind to port as root\n+    listener.open(); \n+    if(listener.getPort() !\u003d infoSocAddr.getPort())\n+      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n+          \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n+    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n+        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n+    \n+    if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n+      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n+    \n+    resources \u003d new SecureResources(ss, listener);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(DaemonContext context) throws Exception {\n    System.err.println(\"Initializing secure datanode resources\");\n    // We should only start up a secure datanode in a Kerberos-secured cluster\n    Configuration conf \u003d new Configuration(); // Skip UGI method to not log in\n    if(!conf.get(HADOOP_SECURITY_AUTHENTICATION).equals(\"kerberos\"))\n      throw new RuntimeException(\"Cannot start secure datanode in unsecure cluster\");\n    \n    // Stash command-line arguments for regular datanode\n    args \u003d context.getArguments();\n    \n    // Obtain secure port for data streaming to datanode\n    InetSocketAddress socAddr \u003d DataNode.getStreamingAddr(conf);\n    int socketWriteTimeout \u003d conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,\n        HdfsConstants.WRITE_TIMEOUT);\n    \n    ServerSocket ss \u003d (socketWriteTimeout \u003e 0) ? \n        ServerSocketChannel.open().socket() : new ServerSocket();\n    ss.bind(socAddr, 0);\n    \n    // Check that we got the port we need\n    if(ss.getLocalPort() !\u003d socAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified streaming port in secure \" +\n      \t\t\"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n\n    // Obtain secure listener for web server\n    SelectChannelConnector listener \u003d \n                   (SelectChannelConnector)HttpServer.createDefaultChannelConnector();\n    InetSocketAddress infoSocAddr \u003d DataNode.getInfoAddr(conf);\n    listener.setHost(infoSocAddr.getHostName());\n    listener.setPort(infoSocAddr.getPort());\n    // Open listener here in order to bind to port as root\n    listener.open(); \n    if(listener.getPort() !\u003d infoSocAddr.getPort())\n      throw new RuntimeException(\"Unable to bind on specified info port in secure \" +\n          \"context. Needed \" + socAddr.getPort() + \", got \" + ss.getLocalPort());\n    System.err.println(\"Successfully obtained privileged resources (streaming port \u003d \"\n        + ss + \" ) (http listener port \u003d \" + listener.getConnection() +\")\");\n    \n    if(ss.getLocalPort() \u003e\u003d 1023 || listener.getPort() \u003e\u003d 1023)\n      throw new RuntimeException(\"Cannot start secure datanode with unprivileged ports\");\n    \n    resources \u003d new SecureResources(ss, listener);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/SecureDataNodeStarter.java"
    }
  }
}