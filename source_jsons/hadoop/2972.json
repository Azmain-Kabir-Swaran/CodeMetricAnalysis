{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtilClient.java",
  "functionName": "getAddressesForNsIds",
  "functionId": "getAddressesForNsIds___conf-Configuration__nsIds-Collection__String____defaultAddress-String__keys-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
  "functionStartLine": 417,
  "functionEndLine": 431,
  "numCommitsSeen": 143,
  "timeTaken": 3027,
  "changeHistory": [
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3"
  ],
  "changeHistoryShort": {
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
          "commitDate": "21/04/15 9:59 PM",
          "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/04/15 8:57 PM",
          "commitNameOld": "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,15 @@\n-    getAddressesForNsIds(Configuration conf, Collection\u003cString\u003e nsIds,\n-                         String defaultAddress, String... keys) {\n+    getAddressesForNsIds(\n+      Configuration conf, Collection\u003cString\u003e nsIds, String defaultAddress,\n+      String... keys) {\n     // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n     // across all of the configured nameservices and namenodes.\n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n     for (String nsId : emptyAsSingletonNull(nsIds)) {\n       Map\u003cString, InetSocketAddress\u003e isas \u003d\n         getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n       if (!isas.isEmpty()) {\n         ret.put(nsId, isas);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "    getAddressesForNsIds(\n      Configuration conf, Collection\u003cString\u003e nsIds, String defaultAddress,\n      String... keys) {\n    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n    // across all of the configured nameservices and namenodes.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n    for (String nsId : emptyAsSingletonNull(nsIds)) {\n      Map\u003cString, InetSocketAddress\u003e isas \u003d\n        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n      if (!isas.isEmpty()) {\n        ret.put(nsId, isas);\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
            "oldMethodName": "getAddressesForNsIds",
            "newMethodName": "getAddressesForNsIds"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
          "commitDate": "21/04/15 9:59 PM",
          "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/04/15 8:57 PM",
          "commitNameOld": "674c7ef64916fabbe59c8d6cdd50ca19cf7ddb7c",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,15 @@\n-    getAddressesForNsIds(Configuration conf, Collection\u003cString\u003e nsIds,\n-                         String defaultAddress, String... keys) {\n+    getAddressesForNsIds(\n+      Configuration conf, Collection\u003cString\u003e nsIds, String defaultAddress,\n+      String... keys) {\n     // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n     // across all of the configured nameservices and namenodes.\n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n     for (String nsId : emptyAsSingletonNull(nsIds)) {\n       Map\u003cString, InetSocketAddress\u003e isas \u003d\n         getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n       if (!isas.isEmpty()) {\n         ret.put(nsId, isas);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "    getAddressesForNsIds(\n      Configuration conf, Collection\u003cString\u003e nsIds, String defaultAddress,\n      String... keys) {\n    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n    // across all of the configured nameservices and namenodes.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n    for (String nsId : emptyAsSingletonNull(nsIds)) {\n      Map\u003cString, InetSocketAddress\u003e isas \u003d\n        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n      if (!isas.isEmpty()) {\n        ret.put(nsId, isas);\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[static]"
          }
        }
      ]
    },
    "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6376. Distcp data between two HA clusters requires another configuration. Contributed by Dave Marion and Haohui Mai.\n",
      "commitDate": "05/09/14 10:40 AM",
      "commitName": "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,14 @@\n+    getAddressesForNsIds(Configuration conf, Collection\u003cString\u003e nsIds,\n+                         String defaultAddress, String... keys) {\n+    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n+    // across all of the configured nameservices and namenodes.\n+    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n+    for (String nsId : emptyAsSingletonNull(nsIds)) {\n+      Map\u003cString, InetSocketAddress\u003e isas \u003d\n+        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n+      if (!isas.isEmpty()) {\n+        ret.put(nsId, isas);\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "    getAddressesForNsIds(Configuration conf, Collection\u003cString\u003e nsIds,\n                         String defaultAddress, String... keys) {\n    // Look for configurations of the form \u003ckey\u003e[.\u003cnameserviceId\u003e][.\u003cnamenodeId\u003e]\n    // across all of the configured nameservices and namenodes.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e ret \u003d Maps.newLinkedHashMap();\n    for (String nsId : emptyAsSingletonNull(nsIds)) {\n      Map\u003cString, InetSocketAddress\u003e isas \u003d\n        getAddressesForNameserviceId(conf, nsId, defaultAddress, keys);\n      if (!isas.isEmpty()) {\n        ret.put(nsId, isas);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}