{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNode.java",
  "functionName": "getLogDir",
  "functionId": "getLogDir___jid-String__nameServiceId-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java",
  "functionStartLine": 329,
  "functionEndLine": 352,
  "numCommitsSeen": 60,
  "timeTaken": 3100,
  "changeHistory": [
    "dd50f53997239bf9078481cf46592ca3e41520b5",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "dd50f53997239bf9078481cf46592ca3e41520b5": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd50f53997239bf9078481cf46592ca3e41520b5": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-13062. Provide support for JN to use separate journal disk per namespace. Contributed by Bharat Viswanadham.\n",
      "commitDate": "01/02/18 12:28 PM",
      "commitName": "dd50f53997239bf9078481cf46592ca3e41520b5",
      "commitAuthor": "Hanisha Koneru",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13062. Provide support for JN to use separate journal disk per namespace. Contributed by Bharat Viswanadham.\n",
          "commitDate": "01/02/18 12:28 PM",
          "commitName": "dd50f53997239bf9078481cf46592ca3e41520b5",
          "commitAuthor": "Hanisha Koneru",
          "commitDateOld": "13/10/17 2:22 PM",
          "commitNameOld": "8dd1eeb94fef59feaf19182dd8f1fcf1389c7f34",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 110.96,
          "commitsBetweenForRepo": 747,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,24 @@\n-  private File getLogDir(String jid) {\n-    String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n-        DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+  private File getLogDir(String jid, String nameServiceId) throws IOException{\n+    String dir \u003d null;\n+    if (nameServiceId !\u003d null) {\n+      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + \".\" +\n+          nameServiceId);\n+    }\n+    if (dir \u003d\u003d null) {\n+      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n+          DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+    }\n+\n+    File journalDir \u003d new File(dir.trim());\n+    if (!localDir.contains(journalDir)) {\n+      //It is a federated setup, we need to validate journalDir\n+      validateAndCreateJournalDir(journalDir);\n+      localDir.add(journalDir);\n+    }\n+\n     Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n         !jid.isEmpty(),\n         \"bad journal identifier: %s\", jid);\n     assert jid !\u003d null;\n-    return new File(new File(dir), jid);\n+    return new File(journalDir, jid);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private File getLogDir(String jid, String nameServiceId) throws IOException{\n    String dir \u003d null;\n    if (nameServiceId !\u003d null) {\n      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + \".\" +\n          nameServiceId);\n    }\n    if (dir \u003d\u003d null) {\n      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n          DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n    }\n\n    File journalDir \u003d new File(dir.trim());\n    if (!localDir.contains(journalDir)) {\n      //It is a federated setup, we need to validate journalDir\n      validateAndCreateJournalDir(journalDir);\n      localDir.add(journalDir);\n    }\n\n    Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n        !jid.isEmpty(),\n        \"bad journal identifier: %s\", jid);\n    assert jid !\u003d null;\n    return new File(journalDir, jid);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java",
          "extendedDetails": {
            "oldValue": "[jid-String]",
            "newValue": "[jid-String, nameServiceId-String]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-13062. Provide support for JN to use separate journal disk per namespace. Contributed by Bharat Viswanadham.\n",
          "commitDate": "01/02/18 12:28 PM",
          "commitName": "dd50f53997239bf9078481cf46592ca3e41520b5",
          "commitAuthor": "Hanisha Koneru",
          "commitDateOld": "13/10/17 2:22 PM",
          "commitNameOld": "8dd1eeb94fef59feaf19182dd8f1fcf1389c7f34",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 110.96,
          "commitsBetweenForRepo": 747,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,24 @@\n-  private File getLogDir(String jid) {\n-    String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n-        DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+  private File getLogDir(String jid, String nameServiceId) throws IOException{\n+    String dir \u003d null;\n+    if (nameServiceId !\u003d null) {\n+      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + \".\" +\n+          nameServiceId);\n+    }\n+    if (dir \u003d\u003d null) {\n+      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n+          DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+    }\n+\n+    File journalDir \u003d new File(dir.trim());\n+    if (!localDir.contains(journalDir)) {\n+      //It is a federated setup, we need to validate journalDir\n+      validateAndCreateJournalDir(journalDir);\n+      localDir.add(journalDir);\n+    }\n+\n     Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n         !jid.isEmpty(),\n         \"bad journal identifier: %s\", jid);\n     assert jid !\u003d null;\n-    return new File(new File(dir), jid);\n+    return new File(journalDir, jid);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private File getLogDir(String jid, String nameServiceId) throws IOException{\n    String dir \u003d null;\n    if (nameServiceId !\u003d null) {\n      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + \".\" +\n          nameServiceId);\n    }\n    if (dir \u003d\u003d null) {\n      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n          DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n    }\n\n    File journalDir \u003d new File(dir.trim());\n    if (!localDir.contains(journalDir)) {\n      //It is a federated setup, we need to validate journalDir\n      validateAndCreateJournalDir(journalDir);\n      localDir.add(journalDir);\n    }\n\n    Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n        !jid.isEmpty(),\n        \"bad journal identifier: %s\", jid);\n    assert jid !\u003d null;\n    return new File(journalDir, jid);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13062. Provide support for JN to use separate journal disk per namespace. Contributed by Bharat Viswanadham.\n",
          "commitDate": "01/02/18 12:28 PM",
          "commitName": "dd50f53997239bf9078481cf46592ca3e41520b5",
          "commitAuthor": "Hanisha Koneru",
          "commitDateOld": "13/10/17 2:22 PM",
          "commitNameOld": "8dd1eeb94fef59feaf19182dd8f1fcf1389c7f34",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 110.96,
          "commitsBetweenForRepo": 747,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,24 @@\n-  private File getLogDir(String jid) {\n-    String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n-        DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+  private File getLogDir(String jid, String nameServiceId) throws IOException{\n+    String dir \u003d null;\n+    if (nameServiceId !\u003d null) {\n+      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + \".\" +\n+          nameServiceId);\n+    }\n+    if (dir \u003d\u003d null) {\n+      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n+          DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+    }\n+\n+    File journalDir \u003d new File(dir.trim());\n+    if (!localDir.contains(journalDir)) {\n+      //It is a federated setup, we need to validate journalDir\n+      validateAndCreateJournalDir(journalDir);\n+      localDir.add(journalDir);\n+    }\n+\n     Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n         !jid.isEmpty(),\n         \"bad journal identifier: %s\", jid);\n     assert jid !\u003d null;\n-    return new File(new File(dir), jid);\n+    return new File(journalDir, jid);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private File getLogDir(String jid, String nameServiceId) throws IOException{\n    String dir \u003d null;\n    if (nameServiceId !\u003d null) {\n      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY + \".\" +\n          nameServiceId);\n    }\n    if (dir \u003d\u003d null) {\n      dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n          DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n    }\n\n    File journalDir \u003d new File(dir.trim());\n    if (!localDir.contains(journalDir)) {\n      //It is a federated setup, we need to validate journalDir\n      validateAndCreateJournalDir(journalDir);\n      localDir.add(journalDir);\n    }\n\n    Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n        !jid.isEmpty(),\n        \"bad journal identifier: %s\", jid);\n    assert jid !\u003d null;\n    return new File(journalDir, jid);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/09/14 5:15 PM",
      "commitNameOld": "e9c37de485f8d4dcb04afb0d4cb887cc09d317c9",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 76.85,
      "commitsBetweenForRepo": 666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,9 @@\n   private File getLogDir(String jid) {\n     String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n         DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n     Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n         !jid.isEmpty(),\n         \"bad journal identifier: %s\", jid);\n+    assert jid !\u003d null;\n     return new File(new File(dir), jid);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private File getLogDir(String jid) {\n    String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n    Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n        !jid.isEmpty(),\n        \"bad journal identifier: %s\", jid);\n    assert jid !\u003d null;\n    return new File(new File(dir), jid);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,8 @@\n+  private File getLogDir(String jid) {\n+    String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n+        DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n+    Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n+        !jid.isEmpty(),\n+        \"bad journal identifier: %s\", jid);\n+    return new File(new File(dir), jid);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private File getLogDir(String jid) {\n    String dir \u003d conf.get(DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_KEY,\n        DFSConfigKeys.DFS_JOURNALNODE_EDITS_DIR_DEFAULT);\n    Preconditions.checkArgument(jid !\u003d null \u0026\u0026\n        !jid.isEmpty(),\n        \"bad journal identifier: %s\", jid);\n    return new File(new File(dir), jid);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNode.java"
    }
  }
}