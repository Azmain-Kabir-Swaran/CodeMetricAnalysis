{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ByteArrayEncodingState.java",
  "functionName": "checkBuffers",
  "functionId": "checkBuffers___buffers-byte[][]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
  "functionStartLine": 91,
  "functionEndLine": 103,
  "numCommitsSeen": 30,
  "timeTaken": 4688,
  "changeHistory": [
    "77202fa1035a54496d11d07472fbc399148ff630",
    "5eca6dece67620f990f3306b6caaf09f317b38f6",
    "29495cb8f6b940caa9964c39a290ef233ce1ec7c",
    "4ad484883f773c702a1874fc12816ef1a4a54136",
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37"
  ],
  "changeHistoryShort": {
    "77202fa1035a54496d11d07472fbc399148ff630": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "5eca6dece67620f990f3306b6caaf09f317b38f6": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "29495cb8f6b940caa9964c39a290ef233ce1ec7c": "Ybodychange",
    "4ad484883f773c702a1874fc12816ef1a4a54136": "Ymultichange(Yparameterchange,Ybodychange)",
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77202fa1035a54496d11d07472fbc399148ff630": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
      "commitDate": "26/05/16 10:23 PM",
      "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n-                                       int dataLen, boolean isOutputs) {\n+  void checkBuffers(byte[][] buffers) {\n     for (byte[] buffer : buffers) {\n-      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n+      if (buffer \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n-      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n+      }\n+\n+      if (buffer.length !\u003d encodeLength) {\n         throw new HadoopIllegalArgumentException(\n-            \"Invalid buffer not of length \" + dataLen);\n-      } else if (isOutputs) {\n-        resetBuffer(buffer, 0, dataLen);\n+            \"Invalid buffer not of length \" + encodeLength);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void checkBuffers(byte[][] buffers) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      }\n\n      if (buffer.length !\u003d encodeLength) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + encodeLength);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
            "oldMethodName": "checkParameterBuffers",
            "newMethodName": "checkBuffers"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n-                                       int dataLen, boolean isOutputs) {\n+  void checkBuffers(byte[][] buffers) {\n     for (byte[] buffer : buffers) {\n-      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n+      if (buffer \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n-      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n+      }\n+\n+      if (buffer.length !\u003d encodeLength) {\n         throw new HadoopIllegalArgumentException(\n-            \"Invalid buffer not of length \" + dataLen);\n-      } else if (isOutputs) {\n-        resetBuffer(buffer, 0, dataLen);\n+            \"Invalid buffer not of length \" + encodeLength);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void checkBuffers(byte[][] buffers) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      }\n\n      if (buffer.length !\u003d encodeLength) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + encodeLength);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n-                                       int dataLen, boolean isOutputs) {\n+  void checkBuffers(byte[][] buffers) {\n     for (byte[] buffer : buffers) {\n-      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n+      if (buffer \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n-      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n+      }\n+\n+      if (buffer.length !\u003d encodeLength) {\n         throw new HadoopIllegalArgumentException(\n-            \"Invalid buffer not of length \" + dataLen);\n-      } else if (isOutputs) {\n-        resetBuffer(buffer, 0, dataLen);\n+            \"Invalid buffer not of length \" + encodeLength);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void checkBuffers(byte[][] buffers) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      }\n\n      if (buffer.length !\u003d encodeLength) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + encodeLength);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n-                                       int dataLen, boolean isOutputs) {\n+  void checkBuffers(byte[][] buffers) {\n     for (byte[] buffer : buffers) {\n-      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n+      if (buffer \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n-      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n+      }\n+\n+      if (buffer.length !\u003d encodeLength) {\n         throw new HadoopIllegalArgumentException(\n-            \"Invalid buffer not of length \" + dataLen);\n-      } else if (isOutputs) {\n-        resetBuffer(buffer, 0, dataLen);\n+            \"Invalid buffer not of length \" + encodeLength);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void checkBuffers(byte[][] buffers) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      }\n\n      if (buffer.length !\u003d encodeLength) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + encodeLength);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
          "extendedDetails": {
            "oldValue": "checkParameterBuffers",
            "newValue": "checkBuffers"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,13 @@\n-  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n-                                       int dataLen, boolean isOutputs) {\n+  void checkBuffers(byte[][] buffers) {\n     for (byte[] buffer : buffers) {\n-      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n+      if (buffer \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n-      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n+      }\n+\n+      if (buffer.length !\u003d encodeLength) {\n         throw new HadoopIllegalArgumentException(\n-            \"Invalid buffer not of length \" + dataLen);\n-      } else if (isOutputs) {\n-        resetBuffer(buffer, 0, dataLen);\n+            \"Invalid buffer not of length \" + encodeLength);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void checkBuffers(byte[][] buffers) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      }\n\n      if (buffer.length !\u003d encodeLength) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + encodeLength);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/ByteArrayEncodingState.java",
          "extendedDetails": {
            "oldValue": "[buffers-byte[][], allowNull-boolean, dataLen-int, isOutputs-boolean]",
            "newValue": "[buffers-byte[][]]"
          }
        }
      ]
    },
    "5eca6dece67620f990f3306b6caaf09f317b38f6": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12327. Initialize output buffers with ZERO bytes in erasure coder. Contributed by Kai Zheng.\n",
      "commitDate": "29/10/15 12:04 AM",
      "commitName": "5eca6dece67620f990f3306b6caaf09f317b38f6",
      "commitAuthor": "Walter Su",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-12327. Initialize output buffers with ZERO bytes in erasure coder. Contributed by Kai Zheng.\n",
          "commitDate": "29/10/15 12:04 AM",
          "commitName": "5eca6dece67620f990f3306b6caaf09f317b38f6",
          "commitAuthor": "Walter Su",
          "commitDateOld": "28/10/15 1:18 AM",
          "commitNameOld": "c201cf951d5adefefe7c68e882a0c07962248577",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,14 @@\n-  protected void ensureLength(byte[][] buffers,\n-                              boolean allowNull, int dataLen) {\n+  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n+                                       int dataLen, boolean isOutputs) {\n     for (byte[] buffer : buffers) {\n       if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n       } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer not of length \" + dataLen);\n+      } else if (isOutputs) {\n+        resetBuffer(buffer, 0, dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n                                       int dataLen, boolean isOutputs) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      } else if (isOutputs) {\n        resetBuffer(buffer, 0, dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
          "extendedDetails": {
            "oldValue": "ensureLength",
            "newValue": "checkParameterBuffers"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12327. Initialize output buffers with ZERO bytes in erasure coder. Contributed by Kai Zheng.\n",
          "commitDate": "29/10/15 12:04 AM",
          "commitName": "5eca6dece67620f990f3306b6caaf09f317b38f6",
          "commitAuthor": "Walter Su",
          "commitDateOld": "28/10/15 1:18 AM",
          "commitNameOld": "c201cf951d5adefefe7c68e882a0c07962248577",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,14 @@\n-  protected void ensureLength(byte[][] buffers,\n-                              boolean allowNull, int dataLen) {\n+  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n+                                       int dataLen, boolean isOutputs) {\n     for (byte[] buffer : buffers) {\n       if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n       } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer not of length \" + dataLen);\n+      } else if (isOutputs) {\n+        resetBuffer(buffer, 0, dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n                                       int dataLen, boolean isOutputs) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      } else if (isOutputs) {\n        resetBuffer(buffer, 0, dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
          "extendedDetails": {
            "oldValue": "[buffers-byte[][], allowNull-boolean, dataLen-int]",
            "newValue": "[buffers-byte[][], allowNull-boolean, dataLen-int, isOutputs-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12327. Initialize output buffers with ZERO bytes in erasure coder. Contributed by Kai Zheng.\n",
          "commitDate": "29/10/15 12:04 AM",
          "commitName": "5eca6dece67620f990f3306b6caaf09f317b38f6",
          "commitAuthor": "Walter Su",
          "commitDateOld": "28/10/15 1:18 AM",
          "commitNameOld": "c201cf951d5adefefe7c68e882a0c07962248577",
          "commitAuthorOld": "yliu",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,14 @@\n-  protected void ensureLength(byte[][] buffers,\n-                              boolean allowNull, int dataLen) {\n+  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n+                                       int dataLen, boolean isOutputs) {\n     for (byte[] buffer : buffers) {\n       if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n       } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer not of length \" + dataLen);\n+      } else if (isOutputs) {\n+        resetBuffer(buffer, 0, dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void checkParameterBuffers(byte[][] buffers, boolean allowNull,\n                                       int dataLen, boolean isOutputs) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      } else if (isOutputs) {\n        resetBuffer(buffer, 0, dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
          "extendedDetails": {}
        }
      ]
    },
    "29495cb8f6b940caa9964c39a290ef233ce1ec7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12060. Fix ByteBuffer usage for raw erasure coders. Contributed by Kai Zheng.\n",
      "commitDate": "20/07/15 10:15 AM",
      "commitName": "29495cb8f6b940caa9964c39a290ef233ce1ec7c",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 12:07 PM",
      "commitNameOld": "4ad484883f773c702a1874fc12816ef1a4a54136",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 54.92,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   protected void ensureLength(byte[][] buffers,\n                               boolean allowNull, int dataLen) {\n-    for (int i \u003d 0; i \u003c buffers.length; ++i) {\n-      if (buffers[i] \u003d\u003d null \u0026\u0026 !allowNull) {\n+    for (byte[] buffer : buffers) {\n+      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer found, not allowing null\");\n-      } else if (buffers[i] !\u003d null \u0026\u0026 buffers[i].length !\u003d dataLen) {\n+      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer not of length \" + dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void ensureLength(byte[][] buffers,\n                              boolean allowNull, int dataLen) {\n    for (byte[] buffer : buffers) {\n      if (buffer \u003d\u003d null \u0026\u0026 !allowNull) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      } else if (buffer !\u003d null \u0026\u0026 buffer.length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
      "extendedDetails": {}
    },
    "4ad484883f773c702a1874fc12816ef1a4a54136": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 12:07 PM",
      "commitName": "4ad484883f773c702a1874fc12816ef1a4a54136",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng\n",
          "commitDate": "26/05/15 12:07 PM",
          "commitName": "4ad484883f773c702a1874fc12816ef1a4a54136",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "26/05/15 12:07 PM",
          "commitNameOld": "b30e96bfb4b8ce5537671c97f0c9c56cd195bfdc",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,12 @@\n-  protected void ensureLength(byte[][] buffers, int dataLen) {\n+  protected void ensureLength(byte[][] buffers,\n+                              boolean allowNull, int dataLen) {\n     for (int i \u003d 0; i \u003c buffers.length; ++i) {\n-      if (buffers[i].length !\u003d dataLen) {\n+      if (buffers[i] \u003d\u003d null \u0026\u0026 !allowNull) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid buffer found, not allowing null\");\n+      } else if (buffers[i] !\u003d null \u0026\u0026 buffers[i].length !\u003d dataLen) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer not of length \" + dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void ensureLength(byte[][] buffers,\n                              boolean allowNull, int dataLen) {\n    for (int i \u003d 0; i \u003c buffers.length; ++i) {\n      if (buffers[i] \u003d\u003d null \u0026\u0026 !allowNull) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      } else if (buffers[i] !\u003d null \u0026\u0026 buffers[i].length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
          "extendedDetails": {
            "oldValue": "[buffers-byte[][], dataLen-int]",
            "newValue": "[buffers-byte[][], allowNull-boolean, dataLen-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng\n",
          "commitDate": "26/05/15 12:07 PM",
          "commitName": "4ad484883f773c702a1874fc12816ef1a4a54136",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "26/05/15 12:07 PM",
          "commitNameOld": "b30e96bfb4b8ce5537671c97f0c9c56cd195bfdc",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,12 @@\n-  protected void ensureLength(byte[][] buffers, int dataLen) {\n+  protected void ensureLength(byte[][] buffers,\n+                              boolean allowNull, int dataLen) {\n     for (int i \u003d 0; i \u003c buffers.length; ++i) {\n-      if (buffers[i].length !\u003d dataLen) {\n+      if (buffers[i] \u003d\u003d null \u0026\u0026 !allowNull) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid buffer found, not allowing null\");\n+      } else if (buffers[i] !\u003d null \u0026\u0026 buffers[i].length !\u003d dataLen) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid buffer not of length \" + dataLen);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void ensureLength(byte[][] buffers,\n                              boolean allowNull, int dataLen) {\n    for (int i \u003d 0; i \u003c buffers.length; ++i) {\n      if (buffers[i] \u003d\u003d null \u0026\u0026 !allowNull) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer found, not allowing null\");\n      } else if (buffers[i] !\u003d null \u0026\u0026 buffers[i].length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java",
          "extendedDetails": {}
        }
      ]
    },
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,8 @@\n+  protected void ensureLength(byte[][] buffers, int dataLen) {\n+    for (int i \u003d 0; i \u003c buffers.length; ++i) {\n+      if (buffers[i].length !\u003d dataLen) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid buffer not of length \" + dataLen);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void ensureLength(byte[][] buffers, int dataLen) {\n    for (int i \u003d 0; i \u003c buffers.length; ++i) {\n      if (buffers[i].length !\u003d dataLen) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid buffer not of length \" + dataLen);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureCoder.java"
    }
  }
}