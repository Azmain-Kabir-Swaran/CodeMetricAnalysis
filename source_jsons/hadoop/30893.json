{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineCollectionReader.java",
  "functionName": "readDocuments",
  "functionId": "readDocuments___context-TimelineReaderContext__documentsSize-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/TimelineCollectionReader.java",
  "functionStartLine": 117,
  "functionEndLine": 149,
  "numCommitsSeen": 1,
  "timeTaken": 478,
  "changeHistory": [
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,33 @@\n+  public List\u003cTimelineEntityDocument\u003e readDocuments(\n+      TimelineReaderContext context, long documentsSize) throws IOException {\n+    List\u003cTimelineEntityDocument\u003e entityDocs \u003d new ArrayList\u003c\u003e();\n+    LOG.debug(\"Fetching documents for entity type {}\", context.getEntityType());\n+    switch (TimelineEntityType.valueOf(context.getEntityType())) {\n+    case YARN_APPLICATION:\n+      return genericEntityDocReader.readDocumentList(\n+          CollectionType.APPLICATION.getCollectionName(), context,\n+           TimelineEntityDocument.class, documentsSize);\n+    case YARN_FLOW_RUN:\n+      List\u003cFlowRunDocument\u003e flowRunDocs \u003d flowRunDocReader.readDocumentList(\n+          CollectionType.FLOW_RUN.getCollectionName(), context,\n+               FlowRunDocument.class, documentsSize);\n+      for (FlowRunDocument flowRunDoc : flowRunDocs) {\n+        entityDocs.add(new TimelineEntityDocument(createFlowRunEntity(\n+            flowRunDoc)));\n+      }\n+      return entityDocs;\n+    case YARN_FLOW_ACTIVITY:\n+      List\u003cFlowActivityDocument\u003e flowActivityDocs \u003d flowActivityDocReader\n+          .readDocumentList(CollectionType.FLOW_ACTIVITY.getCollectionName(),\n+              context, FlowActivityDocument.class, documentsSize);\n+      for(FlowActivityDocument flowActivityDoc : flowActivityDocs) {\n+        entityDocs.add(new TimelineEntityDocument(\n+            createFlowActivityEntity(context, flowActivityDoc)));\n+      }\n+      return entityDocs;\n+    default:\n+      return genericEntityDocReader.readDocumentList(\n+          CollectionType.ENTITY.getCollectionName(), context,\n+          TimelineEntityDocument.class, documentsSize);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cTimelineEntityDocument\u003e readDocuments(\n      TimelineReaderContext context, long documentsSize) throws IOException {\n    List\u003cTimelineEntityDocument\u003e entityDocs \u003d new ArrayList\u003c\u003e();\n    LOG.debug(\"Fetching documents for entity type {}\", context.getEntityType());\n    switch (TimelineEntityType.valueOf(context.getEntityType())) {\n    case YARN_APPLICATION:\n      return genericEntityDocReader.readDocumentList(\n          CollectionType.APPLICATION.getCollectionName(), context,\n           TimelineEntityDocument.class, documentsSize);\n    case YARN_FLOW_RUN:\n      List\u003cFlowRunDocument\u003e flowRunDocs \u003d flowRunDocReader.readDocumentList(\n          CollectionType.FLOW_RUN.getCollectionName(), context,\n               FlowRunDocument.class, documentsSize);\n      for (FlowRunDocument flowRunDoc : flowRunDocs) {\n        entityDocs.add(new TimelineEntityDocument(createFlowRunEntity(\n            flowRunDoc)));\n      }\n      return entityDocs;\n    case YARN_FLOW_ACTIVITY:\n      List\u003cFlowActivityDocument\u003e flowActivityDocs \u003d flowActivityDocReader\n          .readDocumentList(CollectionType.FLOW_ACTIVITY.getCollectionName(),\n              context, FlowActivityDocument.class, documentsSize);\n      for(FlowActivityDocument flowActivityDoc : flowActivityDocs) {\n        entityDocs.add(new TimelineEntityDocument(\n            createFlowActivityEntity(context, flowActivityDoc)));\n      }\n      return entityDocs;\n    default:\n      return genericEntityDocReader.readDocumentList(\n          CollectionType.ENTITY.getCollectionName(), context,\n          TimelineEntityDocument.class, documentsSize);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/reader/TimelineCollectionReader.java"
    }
  }
}