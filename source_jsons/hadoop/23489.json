{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryFileManager.java",
  "functionName": "moveToDone",
  "functionId": "moveToDone",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
  "functionStartLine": 401,
  "functionEndLine": 465,
  "numCommitsSeen": 58,
  "timeTaken": 9878,
  "changeHistory": [
    "cff9edd4b514bdcfe22cd49964e3707fb78ab876",
    "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3",
    "1ea90144d58443a7431ff33ba49ee19278ebe42b",
    "0928502029ef141759008997335ea2cd836a7154",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cff9edd4b514bdcfe22cd49964e3707fb78ab876": "Ybodychange",
    "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3": "Ybodychange",
    "1ea90144d58443a7431ff33ba49ee19278ebe42b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0928502029ef141759008997335ea2cd836a7154": "Ybodychange",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cff9edd4b514bdcfe22cd49964e3707fb78ab876": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7015. Possible race condition in JHS if the job is not loaded. Contributed by Peter Bacsko\n",
      "commitDate": "24/01/18 12:44 PM",
      "commitName": "cff9edd4b514bdcfe22cd49964e3707fb78ab876",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "09/11/17 3:15 PM",
      "commitNameOld": "5eb7dbe9b31a45f57f2e1623aa1c9ce84a56c4d1",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 75.89,
      "commitsBetweenForRepo": 394,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,65 @@\n     synchronized void moveToDone() throws IOException {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"moveToDone: \" + historyFile);\n       }\n       if (!isMovePending()) {\n         // It was either deleted or is already in done. Either way do nothing\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Move no longer pending\");\n         }\n         return;\n       }\n       try {\n         long completeTime \u003d jobIndexInfo.getFinishTime();\n         if (completeTime \u003d\u003d 0) {\n           completeTime \u003d System.currentTimeMillis();\n         }\n         JobId jobId \u003d jobIndexInfo.getJobId();\n \n         if (historyFile \u003d\u003d null) {\n           LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n         }\n \n         if (confFile \u003d\u003d null) {\n           LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n         }\n \n         if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n             summaryFile)) {\n           LOG.info(\"No summary file for job: \" + jobId);\n         } else {\n           String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n               summaryFile);\n           SUMMARY_LOG.info(jobSummaryString);\n           LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n           intermediateDoneDirFc.delete(summaryFile, false);\n           summaryFile \u003d null;\n         }\n \n         Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n         addDirectoryToSerialNumberIndex(targetDir);\n         makeDoneSubdir(targetDir);\n         if (historyFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n               .getName()));\n           if (!toPath.equals(historyFile)) {\n             moveToDoneNow(historyFile, toPath);\n             historyFile \u003d toPath;\n           }\n         }\n         if (confFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n               .getName()));\n           if (!toPath.equals(confFile)) {\n             moveToDoneNow(confFile, toPath);\n             confFile \u003d toPath;\n           }\n         }\n         state \u003d HistoryInfoState.IN_DONE;\n       } catch (Throwable t) {\n         LOG.error(\"Error while trying to move a job to done\", t);\n         this.state \u003d HistoryInfoState.MOVE_FAILED;\n+      } finally {\n+        notifyAll();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void moveToDone() throws IOException {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"moveToDone: \" + historyFile);\n      }\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Move no longer pending\");\n        }\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        }\n\n        if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n            summaryFile)) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      } finally {\n        notifyAll();\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6881. Fix warnings from Spotbugs in hadoop-mapreduce. Contributed by Weiwei Yang.\n",
      "commitDate": "26/04/17 11:45 PM",
      "commitName": "3ed3062fe3979ff55a411b730a8eee2b2c96d6b3",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "14/11/16 12:20 PM",
      "commitNameOld": "99c2bbd337942e4bc7b246a88dff53f98e530651",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 163.43,
      "commitsBetweenForRepo": 880,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,63 @@\n     synchronized void moveToDone() throws IOException {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"moveToDone: \" + historyFile);\n       }\n       if (!isMovePending()) {\n         // It was either deleted or is already in done. Either way do nothing\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Move no longer pending\");\n         }\n         return;\n       }\n       try {\n         long completeTime \u003d jobIndexInfo.getFinishTime();\n         if (completeTime \u003d\u003d 0) {\n           completeTime \u003d System.currentTimeMillis();\n         }\n         JobId jobId \u003d jobIndexInfo.getJobId();\n \n-        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n         if (historyFile \u003d\u003d null) {\n           LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n-        } else {\n-          paths.add(historyFile);\n         }\n \n         if (confFile \u003d\u003d null) {\n           LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n-        } else {\n-          paths.add(confFile);\n         }\n \n         if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n             summaryFile)) {\n           LOG.info(\"No summary file for job: \" + jobId);\n         } else {\n           String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n               summaryFile);\n           SUMMARY_LOG.info(jobSummaryString);\n           LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n           intermediateDoneDirFc.delete(summaryFile, false);\n           summaryFile \u003d null;\n         }\n \n         Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n         addDirectoryToSerialNumberIndex(targetDir);\n         makeDoneSubdir(targetDir);\n         if (historyFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n               .getName()));\n           if (!toPath.equals(historyFile)) {\n             moveToDoneNow(historyFile, toPath);\n             historyFile \u003d toPath;\n           }\n         }\n         if (confFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n               .getName()));\n           if (!toPath.equals(confFile)) {\n             moveToDoneNow(confFile, toPath);\n             confFile \u003d toPath;\n           }\n         }\n         state \u003d HistoryInfoState.IN_DONE;\n       } catch (Throwable t) {\n         LOG.error(\"Error while trying to move a job to done\", t);\n         this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    synchronized void moveToDone() throws IOException {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"moveToDone: \" + historyFile);\n      }\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Move no longer pending\");\n        }\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        }\n\n        if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n            summaryFile)) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "1ea90144d58443a7431ff33ba49ee19278ebe42b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6273. HistoryFileManager should check whether summaryFile exists\nto avoid FileNotFoundException causing HistoryFileInfo into MOVE_FAILED\nstate. Contributed by zhihai xu.\n",
      "commitDate": "15/05/15 12:01 AM",
      "commitName": "1ea90144d58443a7431ff33ba49ee19278ebe42b",
      "commitAuthor": "Devaraj K",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6273. HistoryFileManager should check whether summaryFile exists\nto avoid FileNotFoundException causing HistoryFileInfo into MOVE_FAILED\nstate. Contributed by zhihai xu.\n",
          "commitDate": "15/05/15 12:01 AM",
          "commitName": "1ea90144d58443a7431ff33ba49ee19278ebe42b",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "27/04/15 2:31 AM",
          "commitNameOld": "5e67c4d384193b38a85655c8f93193596821faa5",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 17.9,
          "commitsBetweenForRepo": 242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,68 @@\n-    private synchronized void moveToDone() throws IOException {\n+    synchronized void moveToDone() throws IOException {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"moveToDone: \" + historyFile);\n       }\n       if (!isMovePending()) {\n         // It was either deleted or is already in done. Either way do nothing\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Move no longer pending\");\n         }\n         return;\n       }\n       try {\n         long completeTime \u003d jobIndexInfo.getFinishTime();\n         if (completeTime \u003d\u003d 0) {\n           completeTime \u003d System.currentTimeMillis();\n         }\n         JobId jobId \u003d jobIndexInfo.getJobId();\n \n         List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n         if (historyFile \u003d\u003d null) {\n           LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n         } else {\n           paths.add(historyFile);\n         }\n \n         if (confFile \u003d\u003d null) {\n           LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n         } else {\n           paths.add(confFile);\n         }\n \n-        if (summaryFile \u003d\u003d null) {\n+        if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n+            summaryFile)) {\n           LOG.info(\"No summary file for job: \" + jobId);\n         } else {\n           String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n               summaryFile);\n           SUMMARY_LOG.info(jobSummaryString);\n           LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n           intermediateDoneDirFc.delete(summaryFile, false);\n           summaryFile \u003d null;\n         }\n \n         Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n         addDirectoryToSerialNumberIndex(targetDir);\n         makeDoneSubdir(targetDir);\n         if (historyFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n               .getName()));\n           if (!toPath.equals(historyFile)) {\n             moveToDoneNow(historyFile, toPath);\n             historyFile \u003d toPath;\n           }\n         }\n         if (confFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n               .getName()));\n           if (!toPath.equals(confFile)) {\n             moveToDoneNow(confFile, toPath);\n             confFile \u003d toPath;\n           }\n         }\n         state \u003d HistoryInfoState.IN_DONE;\n       } catch (Throwable t) {\n         LOG.error(\"Error while trying to move a job to done\", t);\n         this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    synchronized void moveToDone() throws IOException {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"moveToDone: \" + historyFile);\n      }\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Move no longer pending\");\n        }\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(historyFile);\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(confFile);\n        }\n\n        if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n            summaryFile)) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6273. HistoryFileManager should check whether summaryFile exists\nto avoid FileNotFoundException causing HistoryFileInfo into MOVE_FAILED\nstate. Contributed by zhihai xu.\n",
          "commitDate": "15/05/15 12:01 AM",
          "commitName": "1ea90144d58443a7431ff33ba49ee19278ebe42b",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "27/04/15 2:31 AM",
          "commitNameOld": "5e67c4d384193b38a85655c8f93193596821faa5",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 17.9,
          "commitsBetweenForRepo": 242,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,68 @@\n-    private synchronized void moveToDone() throws IOException {\n+    synchronized void moveToDone() throws IOException {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"moveToDone: \" + historyFile);\n       }\n       if (!isMovePending()) {\n         // It was either deleted or is already in done. Either way do nothing\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Move no longer pending\");\n         }\n         return;\n       }\n       try {\n         long completeTime \u003d jobIndexInfo.getFinishTime();\n         if (completeTime \u003d\u003d 0) {\n           completeTime \u003d System.currentTimeMillis();\n         }\n         JobId jobId \u003d jobIndexInfo.getJobId();\n \n         List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n         if (historyFile \u003d\u003d null) {\n           LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n         } else {\n           paths.add(historyFile);\n         }\n \n         if (confFile \u003d\u003d null) {\n           LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n         } else {\n           paths.add(confFile);\n         }\n \n-        if (summaryFile \u003d\u003d null) {\n+        if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n+            summaryFile)) {\n           LOG.info(\"No summary file for job: \" + jobId);\n         } else {\n           String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n               summaryFile);\n           SUMMARY_LOG.info(jobSummaryString);\n           LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n           intermediateDoneDirFc.delete(summaryFile, false);\n           summaryFile \u003d null;\n         }\n \n         Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n         addDirectoryToSerialNumberIndex(targetDir);\n         makeDoneSubdir(targetDir);\n         if (historyFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n               .getName()));\n           if (!toPath.equals(historyFile)) {\n             moveToDoneNow(historyFile, toPath);\n             historyFile \u003d toPath;\n           }\n         }\n         if (confFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n               .getName()));\n           if (!toPath.equals(confFile)) {\n             moveToDoneNow(confFile, toPath);\n             confFile \u003d toPath;\n           }\n         }\n         state \u003d HistoryInfoState.IN_DONE;\n       } catch (Throwable t) {\n         LOG.error(\"Error while trying to move a job to done\", t);\n         this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    synchronized void moveToDone() throws IOException {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"moveToDone: \" + historyFile);\n      }\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Move no longer pending\");\n        }\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(historyFile);\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(confFile);\n        }\n\n        if (summaryFile \u003d\u003d null || !intermediateDoneDirFc.util().exists(\n            summaryFile)) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ybodychange",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.49,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,67 @@\n     private synchronized void moveToDone() throws IOException {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"moveToDone: \" + historyFile);\n+      }\n       if (!isMovePending()) {\n         // It was either deleted or is already in done. Either way do nothing\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Move no longer pending\");\n+        }\n         return;\n       }\n       try {\n         long completeTime \u003d jobIndexInfo.getFinishTime();\n         if (completeTime \u003d\u003d 0) {\n           completeTime \u003d System.currentTimeMillis();\n         }\n         JobId jobId \u003d jobIndexInfo.getJobId();\n \n         List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n         if (historyFile \u003d\u003d null) {\n           LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n         } else {\n           paths.add(historyFile);\n         }\n \n         if (confFile \u003d\u003d null) {\n           LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n         } else {\n           paths.add(confFile);\n         }\n \n         if (summaryFile \u003d\u003d null) {\n           LOG.info(\"No summary file for job: \" + jobId);\n         } else {\n           String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n               summaryFile);\n           SUMMARY_LOG.info(jobSummaryString);\n           LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n           intermediateDoneDirFc.delete(summaryFile, false);\n           summaryFile \u003d null;\n         }\n \n         Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n         addDirectoryToSerialNumberIndex(targetDir);\n         makeDoneSubdir(targetDir);\n         if (historyFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n               .getName()));\n           if (!toPath.equals(historyFile)) {\n             moveToDoneNow(historyFile, toPath);\n             historyFile \u003d toPath;\n           }\n         }\n         if (confFile !\u003d null) {\n           Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n               .getName()));\n           if (!toPath.equals(confFile)) {\n             moveToDoneNow(confFile, toPath);\n             confFile \u003d toPath;\n           }\n         }\n         state \u003d HistoryInfoState.IN_DONE;\n       } catch (Throwable t) {\n         LOG.error(\"Error while trying to move a job to done\", t);\n         this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized void moveToDone() throws IOException {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"moveToDone: \" + historyFile);\n      }\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Move no longer pending\");\n        }\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(historyFile);\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(confFile);\n        }\n\n        if (summaryFile \u003d\u003d null) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 6:59 PM",
      "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 6:59 PM",
          "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "10/04/12 11:11 AM",
          "commitNameOld": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 7.32,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,61 @@\n-  void moveToDone(MetaInfo metaInfo) throws IOException {\n-    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n-    if (completeTime \u003d\u003d 0)\n-      completeTime \u003d System.currentTimeMillis();\n-    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n-\n-    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n-    Path historyFile \u003d metaInfo.getHistoryFile();\n-    if (historyFile \u003d\u003d null) {\n-      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n-    } else {\n-      paths.add(historyFile);\n-    }\n-\n-    Path confFile \u003d metaInfo.getConfFile();\n-    if (confFile \u003d\u003d null) {\n-      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n-    } else {\n-      paths.add(confFile);\n-    }\n-\n-    // TODO Check all mi getters and setters for the conf path\n-    Path summaryFile \u003d metaInfo.getSummaryFile();\n-    if (summaryFile \u003d\u003d null) {\n-      LOG.info(\"No summary file for job: \" + jobId);\n-    } else {\n+    private synchronized void moveToDone() throws IOException {\n+      if (!isMovePending()) {\n+        // It was either deleted or is already in done. Either way do nothing\n+        return;\n+      }\n       try {\n-        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n-            summaryFile);\n-        SUMMARY_LOG.info(jobSummaryString);\n-        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n-        intermediateDoneDirFc.delete(summaryFile, false);\n-        metaInfo.setSummaryFile(null);\n-      } catch (IOException e) {\n-        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n-        throw e;\n-      }\n-    }\n+        long completeTime \u003d jobIndexInfo.getFinishTime();\n+        if (completeTime \u003d\u003d 0) {\n+          completeTime \u003d System.currentTimeMillis();\n+        }\n+        JobId jobId \u003d jobIndexInfo.getJobId();\n \n-    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n-    addDirectoryToSerialNumberIndex(targetDir);\n-    try {\n-      makeDoneSubdir(targetDir);\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n-          + \" while attempting to move files for jobId: \" + jobId);\n-      throw e;\n-    }\n-    synchronized (metaInfo) {\n-      if (historyFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n-            .getName()));\n-        try {\n-          moveToDoneNow(historyFile, toPath);\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n-              + jobId);\n-          throw e;\n+        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n+        if (historyFile \u003d\u003d null) {\n+          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n+        } else {\n+          paths.add(historyFile);\n         }\n-        metaInfo.setHistoryFile(toPath);\n-      }\n-      if (confFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n-            .getName()));\n-        try {\n-          moveToDoneNow(confFile, toPath);\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n-              + jobId);\n-          throw e;\n+\n+        if (confFile \u003d\u003d null) {\n+          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n+        } else {\n+          paths.add(confFile);\n         }\n-        metaInfo.setConfFile(toPath);\n+\n+        if (summaryFile \u003d\u003d null) {\n+          LOG.info(\"No summary file for job: \" + jobId);\n+        } else {\n+          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n+              summaryFile);\n+          SUMMARY_LOG.info(jobSummaryString);\n+          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n+          intermediateDoneDirFc.delete(summaryFile, false);\n+          summaryFile \u003d null;\n+        }\n+\n+        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n+        addDirectoryToSerialNumberIndex(targetDir);\n+        makeDoneSubdir(targetDir);\n+        if (historyFile !\u003d null) {\n+          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n+              .getName()));\n+          if (!toPath.equals(historyFile)) {\n+            moveToDoneNow(historyFile, toPath);\n+            historyFile \u003d toPath;\n+          }\n+        }\n+        if (confFile !\u003d null) {\n+          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n+              .getName()));\n+          if (!toPath.equals(confFile)) {\n+            moveToDoneNow(confFile, toPath);\n+            confFile \u003d toPath;\n+          }\n+        }\n+        state \u003d HistoryInfoState.IN_DONE;\n+      } catch (Throwable t) {\n+        LOG.error(\"Error while trying to move a job to done\", t);\n+        this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n-    }\n-    addToJobListCache(metaInfo);\n-    intermediateListCache.remove(jobId);\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private synchronized void moveToDone() throws IOException {\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(historyFile);\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(confFile);\n        }\n\n        if (summaryFile \u003d\u003d null) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[metaInfo-MetaInfo]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 6:59 PM",
          "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "10/04/12 11:11 AM",
          "commitNameOld": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 7.32,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,61 @@\n-  void moveToDone(MetaInfo metaInfo) throws IOException {\n-    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n-    if (completeTime \u003d\u003d 0)\n-      completeTime \u003d System.currentTimeMillis();\n-    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n-\n-    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n-    Path historyFile \u003d metaInfo.getHistoryFile();\n-    if (historyFile \u003d\u003d null) {\n-      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n-    } else {\n-      paths.add(historyFile);\n-    }\n-\n-    Path confFile \u003d metaInfo.getConfFile();\n-    if (confFile \u003d\u003d null) {\n-      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n-    } else {\n-      paths.add(confFile);\n-    }\n-\n-    // TODO Check all mi getters and setters for the conf path\n-    Path summaryFile \u003d metaInfo.getSummaryFile();\n-    if (summaryFile \u003d\u003d null) {\n-      LOG.info(\"No summary file for job: \" + jobId);\n-    } else {\n+    private synchronized void moveToDone() throws IOException {\n+      if (!isMovePending()) {\n+        // It was either deleted or is already in done. Either way do nothing\n+        return;\n+      }\n       try {\n-        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n-            summaryFile);\n-        SUMMARY_LOG.info(jobSummaryString);\n-        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n-        intermediateDoneDirFc.delete(summaryFile, false);\n-        metaInfo.setSummaryFile(null);\n-      } catch (IOException e) {\n-        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n-        throw e;\n-      }\n-    }\n+        long completeTime \u003d jobIndexInfo.getFinishTime();\n+        if (completeTime \u003d\u003d 0) {\n+          completeTime \u003d System.currentTimeMillis();\n+        }\n+        JobId jobId \u003d jobIndexInfo.getJobId();\n \n-    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n-    addDirectoryToSerialNumberIndex(targetDir);\n-    try {\n-      makeDoneSubdir(targetDir);\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n-          + \" while attempting to move files for jobId: \" + jobId);\n-      throw e;\n-    }\n-    synchronized (metaInfo) {\n-      if (historyFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n-            .getName()));\n-        try {\n-          moveToDoneNow(historyFile, toPath);\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n-              + jobId);\n-          throw e;\n+        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n+        if (historyFile \u003d\u003d null) {\n+          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n+        } else {\n+          paths.add(historyFile);\n         }\n-        metaInfo.setHistoryFile(toPath);\n-      }\n-      if (confFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n-            .getName()));\n-        try {\n-          moveToDoneNow(confFile, toPath);\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n-              + jobId);\n-          throw e;\n+\n+        if (confFile \u003d\u003d null) {\n+          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n+        } else {\n+          paths.add(confFile);\n         }\n-        metaInfo.setConfFile(toPath);\n+\n+        if (summaryFile \u003d\u003d null) {\n+          LOG.info(\"No summary file for job: \" + jobId);\n+        } else {\n+          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n+              summaryFile);\n+          SUMMARY_LOG.info(jobSummaryString);\n+          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n+          intermediateDoneDirFc.delete(summaryFile, false);\n+          summaryFile \u003d null;\n+        }\n+\n+        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n+        addDirectoryToSerialNumberIndex(targetDir);\n+        makeDoneSubdir(targetDir);\n+        if (historyFile !\u003d null) {\n+          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n+              .getName()));\n+          if (!toPath.equals(historyFile)) {\n+            moveToDoneNow(historyFile, toPath);\n+            historyFile \u003d toPath;\n+          }\n+        }\n+        if (confFile !\u003d null) {\n+          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n+              .getName()));\n+          if (!toPath.equals(confFile)) {\n+            moveToDoneNow(confFile, toPath);\n+            confFile \u003d toPath;\n+          }\n+        }\n+        state \u003d HistoryInfoState.IN_DONE;\n+      } catch (Throwable t) {\n+        LOG.error(\"Error while trying to move a job to done\", t);\n+        this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n-    }\n-    addToJobListCache(metaInfo);\n-    intermediateListCache.remove(jobId);\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private synchronized void moveToDone() throws IOException {\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(historyFile);\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(confFile);\n        }\n\n        if (summaryFile \u003d\u003d null) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 6:59 PM",
          "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "10/04/12 11:11 AM",
          "commitNameOld": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 7.32,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,77 +1,61 @@\n-  void moveToDone(MetaInfo metaInfo) throws IOException {\n-    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n-    if (completeTime \u003d\u003d 0)\n-      completeTime \u003d System.currentTimeMillis();\n-    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n-\n-    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n-    Path historyFile \u003d metaInfo.getHistoryFile();\n-    if (historyFile \u003d\u003d null) {\n-      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n-    } else {\n-      paths.add(historyFile);\n-    }\n-\n-    Path confFile \u003d metaInfo.getConfFile();\n-    if (confFile \u003d\u003d null) {\n-      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n-    } else {\n-      paths.add(confFile);\n-    }\n-\n-    // TODO Check all mi getters and setters for the conf path\n-    Path summaryFile \u003d metaInfo.getSummaryFile();\n-    if (summaryFile \u003d\u003d null) {\n-      LOG.info(\"No summary file for job: \" + jobId);\n-    } else {\n+    private synchronized void moveToDone() throws IOException {\n+      if (!isMovePending()) {\n+        // It was either deleted or is already in done. Either way do nothing\n+        return;\n+      }\n       try {\n-        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n-            summaryFile);\n-        SUMMARY_LOG.info(jobSummaryString);\n-        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n-        intermediateDoneDirFc.delete(summaryFile, false);\n-        metaInfo.setSummaryFile(null);\n-      } catch (IOException e) {\n-        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n-        throw e;\n-      }\n-    }\n+        long completeTime \u003d jobIndexInfo.getFinishTime();\n+        if (completeTime \u003d\u003d 0) {\n+          completeTime \u003d System.currentTimeMillis();\n+        }\n+        JobId jobId \u003d jobIndexInfo.getJobId();\n \n-    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n-    addDirectoryToSerialNumberIndex(targetDir);\n-    try {\n-      makeDoneSubdir(targetDir);\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n-          + \" while attempting to move files for jobId: \" + jobId);\n-      throw e;\n-    }\n-    synchronized (metaInfo) {\n-      if (historyFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n-            .getName()));\n-        try {\n-          moveToDoneNow(historyFile, toPath);\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n-              + jobId);\n-          throw e;\n+        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n+        if (historyFile \u003d\u003d null) {\n+          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n+        } else {\n+          paths.add(historyFile);\n         }\n-        metaInfo.setHistoryFile(toPath);\n-      }\n-      if (confFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n-            .getName()));\n-        try {\n-          moveToDoneNow(confFile, toPath);\n-        } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n-              + jobId);\n-          throw e;\n+\n+        if (confFile \u003d\u003d null) {\n+          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n+        } else {\n+          paths.add(confFile);\n         }\n-        metaInfo.setConfFile(toPath);\n+\n+        if (summaryFile \u003d\u003d null) {\n+          LOG.info(\"No summary file for job: \" + jobId);\n+        } else {\n+          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n+              summaryFile);\n+          SUMMARY_LOG.info(jobSummaryString);\n+          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n+          intermediateDoneDirFc.delete(summaryFile, false);\n+          summaryFile \u003d null;\n+        }\n+\n+        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n+        addDirectoryToSerialNumberIndex(targetDir);\n+        makeDoneSubdir(targetDir);\n+        if (historyFile !\u003d null) {\n+          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n+              .getName()));\n+          if (!toPath.equals(historyFile)) {\n+            moveToDoneNow(historyFile, toPath);\n+            historyFile \u003d toPath;\n+          }\n+        }\n+        if (confFile !\u003d null) {\n+          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n+              .getName()));\n+          if (!toPath.equals(confFile)) {\n+            moveToDoneNow(confFile, toPath);\n+            confFile \u003d toPath;\n+          }\n+        }\n+        state \u003d HistoryInfoState.IN_DONE;\n+      } catch (Throwable t) {\n+        LOG.error(\"Error while trying to move a job to done\", t);\n+        this.state \u003d HistoryInfoState.MOVE_FAILED;\n       }\n-    }\n-    addToJobListCache(metaInfo);\n-    intermediateListCache.remove(jobId);\n-  }\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private synchronized void moveToDone() throws IOException {\n      if (!isMovePending()) {\n        // It was either deleted or is already in done. Either way do nothing\n        return;\n      }\n      try {\n        long completeTime \u003d jobIndexInfo.getFinishTime();\n        if (completeTime \u003d\u003d 0) {\n          completeTime \u003d System.currentTimeMillis();\n        }\n        JobId jobId \u003d jobIndexInfo.getJobId();\n\n        List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e(2);\n        if (historyFile \u003d\u003d null) {\n          LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(historyFile);\n        }\n\n        if (confFile \u003d\u003d null) {\n          LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n        } else {\n          paths.add(confFile);\n        }\n\n        if (summaryFile \u003d\u003d null) {\n          LOG.info(\"No summary file for job: \" + jobId);\n        } else {\n          String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n              summaryFile);\n          SUMMARY_LOG.info(jobSummaryString);\n          LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n          intermediateDoneDirFc.delete(summaryFile, false);\n          summaryFile \u003d null;\n        }\n\n        Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n        addDirectoryToSerialNumberIndex(targetDir);\n        makeDoneSubdir(targetDir);\n        if (historyFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n              .getName()));\n          if (!toPath.equals(historyFile)) {\n            moveToDoneNow(historyFile, toPath);\n            historyFile \u003d toPath;\n          }\n        }\n        if (confFile !\u003d null) {\n          Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n              .getName()));\n          if (!toPath.equals(confFile)) {\n            moveToDoneNow(confFile, toPath);\n            confFile \u003d toPath;\n          }\n        }\n        state \u003d HistoryInfoState.IN_DONE;\n      } catch (Throwable t) {\n        LOG.error(\"Error while trying to move a job to done\", t);\n        this.state \u003d HistoryInfoState.MOVE_FAILED;\n      }\n    }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 11:11 AM",
      "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
      "commitAuthor": "Thomas Graves",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/12 11:11 AM",
          "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "10/04/12 9:13 AM",
          "commitNameOld": "000859a534f4cc6a57524a676805d8af6ad199de",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,77 @@\n-  private void moveToDone(MetaInfo metaInfo) throws IOException {\n+  void moveToDone(MetaInfo metaInfo) throws IOException {\n     long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n-    if (completeTime \u003d\u003d 0) completeTime \u003d System.currentTimeMillis();\n+    if (completeTime \u003d\u003d 0)\n+      completeTime \u003d System.currentTimeMillis();\n     JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n-    \n+\n     List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n     Path historyFile \u003d metaInfo.getHistoryFile();\n     if (historyFile \u003d\u003d null) {\n       LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n     } else {\n       paths.add(historyFile);\n     }\n-    \n+\n     Path confFile \u003d metaInfo.getConfFile();\n     if (confFile \u003d\u003d null) {\n       LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n     } else {\n       paths.add(confFile);\n     }\n-    \n-    //TODO Check all mi getters and setters for the conf path\n+\n+    // TODO Check all mi getters and setters for the conf path\n     Path summaryFile \u003d metaInfo.getSummaryFile();\n     if (summaryFile \u003d\u003d null) {\n       LOG.info(\"No summary file for job: \" + jobId);\n     } else {\n       try {\n-        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc, summaryFile);\n+        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n+            summaryFile);\n         SUMMARY_LOG.info(jobSummaryString);\n         LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n         intermediateDoneDirFc.delete(summaryFile, false);\n         metaInfo.setSummaryFile(null);\n       } catch (IOException e) {\n         LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n         throw e;\n       }\n     }\n \n     Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n     addDirectoryToSerialNumberIndex(targetDir);\n     try {\n-      maybeMakeSubdirectory(targetDir);\n+      makeDoneSubdir(targetDir);\n     } catch (IOException e) {\n-      LOG.warn(\"Failed creating subdirectory: \" + targetDir + \n-          \" while attempting to move files for jobId: \" + jobId);\n+      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n+          + \" while attempting to move files for jobId: \" + jobId);\n       throw e;\n     }\n     synchronized (metaInfo) {\n       if (historyFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, \n-            historyFile.getName()));\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n+            .getName()));\n         try {\n           moveToDoneNow(historyFile, toPath);\n         } catch (IOException e) {\n           LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n               + jobId);\n           throw e;\n         }\n         metaInfo.setHistoryFile(toPath);\n       }\n       if (confFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, \n-            confFile.getName()));\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n+            .getName()));\n         try {\n           moveToDoneNow(confFile, toPath);\n         } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" \n+          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n               + jobId);\n           throw e;\n         }\n         metaInfo.setConfFile(toPath);\n       }\n     }\n-    addToJobListCache(jobId, metaInfo);\n+    addToJobListCache(metaInfo);\n     intermediateListCache.remove(jobId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void moveToDone(MetaInfo metaInfo) throws IOException {\n    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n    if (completeTime \u003d\u003d 0)\n      completeTime \u003d System.currentTimeMillis();\n    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n\n    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n    Path historyFile \u003d metaInfo.getHistoryFile();\n    if (historyFile \u003d\u003d null) {\n      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(historyFile);\n    }\n\n    Path confFile \u003d metaInfo.getConfFile();\n    if (confFile \u003d\u003d null) {\n      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(confFile);\n    }\n\n    // TODO Check all mi getters and setters for the conf path\n    Path summaryFile \u003d metaInfo.getSummaryFile();\n    if (summaryFile \u003d\u003d null) {\n      LOG.info(\"No summary file for job: \" + jobId);\n    } else {\n      try {\n        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n            summaryFile);\n        SUMMARY_LOG.info(jobSummaryString);\n        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n        intermediateDoneDirFc.delete(summaryFile, false);\n        metaInfo.setSummaryFile(null);\n      } catch (IOException e) {\n        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n        throw e;\n      }\n    }\n\n    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n    addDirectoryToSerialNumberIndex(targetDir);\n    try {\n      makeDoneSubdir(targetDir);\n    } catch (IOException e) {\n      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n          + \" while attempting to move files for jobId: \" + jobId);\n      throw e;\n    }\n    synchronized (metaInfo) {\n      if (historyFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n            .getName()));\n        try {\n          moveToDoneNow(historyFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n              + jobId);\n          throw e;\n        }\n        metaInfo.setHistoryFile(toPath);\n      }\n      if (confFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n            .getName()));\n        try {\n          moveToDoneNow(confFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n              + jobId);\n          throw e;\n        }\n        metaInfo.setConfFile(toPath);\n      }\n    }\n    addToJobListCache(metaInfo);\n    intermediateListCache.remove(jobId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
            "oldMethodName": "moveToDone",
            "newMethodName": "moveToDone"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/12 11:11 AM",
          "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "10/04/12 9:13 AM",
          "commitNameOld": "000859a534f4cc6a57524a676805d8af6ad199de",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,77 @@\n-  private void moveToDone(MetaInfo metaInfo) throws IOException {\n+  void moveToDone(MetaInfo metaInfo) throws IOException {\n     long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n-    if (completeTime \u003d\u003d 0) completeTime \u003d System.currentTimeMillis();\n+    if (completeTime \u003d\u003d 0)\n+      completeTime \u003d System.currentTimeMillis();\n     JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n-    \n+\n     List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n     Path historyFile \u003d metaInfo.getHistoryFile();\n     if (historyFile \u003d\u003d null) {\n       LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n     } else {\n       paths.add(historyFile);\n     }\n-    \n+\n     Path confFile \u003d metaInfo.getConfFile();\n     if (confFile \u003d\u003d null) {\n       LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n     } else {\n       paths.add(confFile);\n     }\n-    \n-    //TODO Check all mi getters and setters for the conf path\n+\n+    // TODO Check all mi getters and setters for the conf path\n     Path summaryFile \u003d metaInfo.getSummaryFile();\n     if (summaryFile \u003d\u003d null) {\n       LOG.info(\"No summary file for job: \" + jobId);\n     } else {\n       try {\n-        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc, summaryFile);\n+        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n+            summaryFile);\n         SUMMARY_LOG.info(jobSummaryString);\n         LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n         intermediateDoneDirFc.delete(summaryFile, false);\n         metaInfo.setSummaryFile(null);\n       } catch (IOException e) {\n         LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n         throw e;\n       }\n     }\n \n     Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n     addDirectoryToSerialNumberIndex(targetDir);\n     try {\n-      maybeMakeSubdirectory(targetDir);\n+      makeDoneSubdir(targetDir);\n     } catch (IOException e) {\n-      LOG.warn(\"Failed creating subdirectory: \" + targetDir + \n-          \" while attempting to move files for jobId: \" + jobId);\n+      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n+          + \" while attempting to move files for jobId: \" + jobId);\n       throw e;\n     }\n     synchronized (metaInfo) {\n       if (historyFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, \n-            historyFile.getName()));\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n+            .getName()));\n         try {\n           moveToDoneNow(historyFile, toPath);\n         } catch (IOException e) {\n           LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n               + jobId);\n           throw e;\n         }\n         metaInfo.setHistoryFile(toPath);\n       }\n       if (confFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, \n-            confFile.getName()));\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n+            .getName()));\n         try {\n           moveToDoneNow(confFile, toPath);\n         } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" \n+          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n               + jobId);\n           throw e;\n         }\n         metaInfo.setConfFile(toPath);\n       }\n     }\n-    addToJobListCache(jobId, metaInfo);\n+    addToJobListCache(metaInfo);\n     intermediateListCache.remove(jobId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void moveToDone(MetaInfo metaInfo) throws IOException {\n    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n    if (completeTime \u003d\u003d 0)\n      completeTime \u003d System.currentTimeMillis();\n    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n\n    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n    Path historyFile \u003d metaInfo.getHistoryFile();\n    if (historyFile \u003d\u003d null) {\n      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(historyFile);\n    }\n\n    Path confFile \u003d metaInfo.getConfFile();\n    if (confFile \u003d\u003d null) {\n      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(confFile);\n    }\n\n    // TODO Check all mi getters and setters for the conf path\n    Path summaryFile \u003d metaInfo.getSummaryFile();\n    if (summaryFile \u003d\u003d null) {\n      LOG.info(\"No summary file for job: \" + jobId);\n    } else {\n      try {\n        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n            summaryFile);\n        SUMMARY_LOG.info(jobSummaryString);\n        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n        intermediateDoneDirFc.delete(summaryFile, false);\n        metaInfo.setSummaryFile(null);\n      } catch (IOException e) {\n        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n        throw e;\n      }\n    }\n\n    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n    addDirectoryToSerialNumberIndex(targetDir);\n    try {\n      makeDoneSubdir(targetDir);\n    } catch (IOException e) {\n      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n          + \" while attempting to move files for jobId: \" + jobId);\n      throw e;\n    }\n    synchronized (metaInfo) {\n      if (historyFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n            .getName()));\n        try {\n          moveToDoneNow(historyFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n              + jobId);\n          throw e;\n        }\n        metaInfo.setHistoryFile(toPath);\n      }\n      if (confFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n            .getName()));\n        try {\n          moveToDoneNow(confFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n              + jobId);\n          throw e;\n        }\n        metaInfo.setConfFile(toPath);\n      }\n    }\n    addToJobListCache(metaInfo);\n    intermediateListCache.remove(jobId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/12 11:11 AM",
          "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthor": "Thomas Graves",
          "commitDateOld": "10/04/12 9:13 AM",
          "commitNameOld": "000859a534f4cc6a57524a676805d8af6ad199de",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,77 @@\n-  private void moveToDone(MetaInfo metaInfo) throws IOException {\n+  void moveToDone(MetaInfo metaInfo) throws IOException {\n     long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n-    if (completeTime \u003d\u003d 0) completeTime \u003d System.currentTimeMillis();\n+    if (completeTime \u003d\u003d 0)\n+      completeTime \u003d System.currentTimeMillis();\n     JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n-    \n+\n     List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n     Path historyFile \u003d metaInfo.getHistoryFile();\n     if (historyFile \u003d\u003d null) {\n       LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n     } else {\n       paths.add(historyFile);\n     }\n-    \n+\n     Path confFile \u003d metaInfo.getConfFile();\n     if (confFile \u003d\u003d null) {\n       LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n     } else {\n       paths.add(confFile);\n     }\n-    \n-    //TODO Check all mi getters and setters for the conf path\n+\n+    // TODO Check all mi getters and setters for the conf path\n     Path summaryFile \u003d metaInfo.getSummaryFile();\n     if (summaryFile \u003d\u003d null) {\n       LOG.info(\"No summary file for job: \" + jobId);\n     } else {\n       try {\n-        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc, summaryFile);\n+        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n+            summaryFile);\n         SUMMARY_LOG.info(jobSummaryString);\n         LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n         intermediateDoneDirFc.delete(summaryFile, false);\n         metaInfo.setSummaryFile(null);\n       } catch (IOException e) {\n         LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n         throw e;\n       }\n     }\n \n     Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n     addDirectoryToSerialNumberIndex(targetDir);\n     try {\n-      maybeMakeSubdirectory(targetDir);\n+      makeDoneSubdir(targetDir);\n     } catch (IOException e) {\n-      LOG.warn(\"Failed creating subdirectory: \" + targetDir + \n-          \" while attempting to move files for jobId: \" + jobId);\n+      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n+          + \" while attempting to move files for jobId: \" + jobId);\n       throw e;\n     }\n     synchronized (metaInfo) {\n       if (historyFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, \n-            historyFile.getName()));\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n+            .getName()));\n         try {\n           moveToDoneNow(historyFile, toPath);\n         } catch (IOException e) {\n           LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n               + jobId);\n           throw e;\n         }\n         metaInfo.setHistoryFile(toPath);\n       }\n       if (confFile !\u003d null) {\n-        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, \n-            confFile.getName()));\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n+            .getName()));\n         try {\n           moveToDoneNow(confFile, toPath);\n         } catch (IOException e) {\n-          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" \n+          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n               + jobId);\n           throw e;\n         }\n         metaInfo.setConfFile(toPath);\n       }\n     }\n-    addToJobListCache(jobId, metaInfo);\n+    addToJobListCache(metaInfo);\n     intermediateListCache.remove(jobId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void moveToDone(MetaInfo metaInfo) throws IOException {\n    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n    if (completeTime \u003d\u003d 0)\n      completeTime \u003d System.currentTimeMillis();\n    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n\n    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n    Path historyFile \u003d metaInfo.getHistoryFile();\n    if (historyFile \u003d\u003d null) {\n      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(historyFile);\n    }\n\n    Path confFile \u003d metaInfo.getConfFile();\n    if (confFile \u003d\u003d null) {\n      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(confFile);\n    }\n\n    // TODO Check all mi getters and setters for the conf path\n    Path summaryFile \u003d metaInfo.getSummaryFile();\n    if (summaryFile \u003d\u003d null) {\n      LOG.info(\"No summary file for job: \" + jobId);\n    } else {\n      try {\n        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc,\n            summaryFile);\n        SUMMARY_LOG.info(jobSummaryString);\n        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n        intermediateDoneDirFc.delete(summaryFile, false);\n        metaInfo.setSummaryFile(null);\n      } catch (IOException e) {\n        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n        throw e;\n      }\n    }\n\n    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n    addDirectoryToSerialNumberIndex(targetDir);\n    try {\n      makeDoneSubdir(targetDir);\n    } catch (IOException e) {\n      LOG.warn(\"Failed creating subdirectory: \" + targetDir\n          + \" while attempting to move files for jobId: \" + jobId);\n      throw e;\n    }\n    synchronized (metaInfo) {\n      if (historyFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile\n            .getName()));\n        try {\n          moveToDoneNow(historyFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n              + jobId);\n          throw e;\n        }\n        metaInfo.setHistoryFile(toPath);\n      }\n      if (confFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile\n            .getName()));\n        try {\n          moveToDoneNow(confFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \"\n              + jobId);\n          throw e;\n        }\n        metaInfo.setConfFile(toPath);\n      }\n    }\n    addToJobListCache(metaInfo);\n    intermediateListCache.remove(jobId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void moveToDone(MetaInfo metaInfo) throws IOException {\n    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n    if (completeTime \u003d\u003d 0) completeTime \u003d System.currentTimeMillis();\n    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n    \n    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n    Path historyFile \u003d metaInfo.getHistoryFile();\n    if (historyFile \u003d\u003d null) {\n      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(historyFile);\n    }\n    \n    Path confFile \u003d metaInfo.getConfFile();\n    if (confFile \u003d\u003d null) {\n      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(confFile);\n    }\n    \n    //TODO Check all mi getters and setters for the conf path\n    Path summaryFile \u003d metaInfo.getSummaryFile();\n    if (summaryFile \u003d\u003d null) {\n      LOG.info(\"No summary file for job: \" + jobId);\n    } else {\n      try {\n        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc, summaryFile);\n        SUMMARY_LOG.info(jobSummaryString);\n        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n        intermediateDoneDirFc.delete(summaryFile, false);\n        metaInfo.setSummaryFile(null);\n      } catch (IOException e) {\n        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n        throw e;\n      }\n    }\n\n    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n    addDirectoryToSerialNumberIndex(targetDir);\n    try {\n      maybeMakeSubdirectory(targetDir);\n    } catch (IOException e) {\n      LOG.warn(\"Failed creating subdirectory: \" + targetDir + \" while attempting to move files for jobId: \" + jobId);\n      throw e;\n    }\n    synchronized (metaInfo) {\n      if (historyFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile.getName()));\n        try {\n          moveToDoneNow(historyFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" + jobId);\n          throw e;\n        }\n        metaInfo.setHistoryFile(toPath);\n      }\n      if (confFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile.getName()));\n        try {\n          moveToDoneNow(confFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" + jobId);\n          throw e;\n        }\n        metaInfo.setConfFile(toPath);\n      }\n    }\n    addToJobListCache(jobId, metaInfo);\n    intermediateListCache.remove(jobId);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,70 @@\n+  private void moveToDone(MetaInfo metaInfo) throws IOException {\n+    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n+    if (completeTime \u003d\u003d 0) completeTime \u003d System.currentTimeMillis();\n+    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n+    \n+    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n+    Path historyFile \u003d metaInfo.getHistoryFile();\n+    if (historyFile \u003d\u003d null) {\n+      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n+    } else {\n+      paths.add(historyFile);\n+    }\n+    \n+    Path confFile \u003d metaInfo.getConfFile();\n+    if (confFile \u003d\u003d null) {\n+      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n+    } else {\n+      paths.add(confFile);\n+    }\n+    \n+    //TODO Check all mi getters and setters for the conf path\n+    Path summaryFile \u003d metaInfo.getSummaryFile();\n+    if (summaryFile \u003d\u003d null) {\n+      LOG.info(\"No summary file for job: \" + jobId);\n+    } else {\n+      try {\n+        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc, summaryFile);\n+        SUMMARY_LOG.info(jobSummaryString);\n+        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n+        intermediateDoneDirFc.delete(summaryFile, false);\n+        metaInfo.setSummaryFile(null);\n+      } catch (IOException e) {\n+        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n+        throw e;\n+      }\n+    }\n+\n+    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n+    addDirectoryToSerialNumberIndex(targetDir);\n+    try {\n+      maybeMakeSubdirectory(targetDir);\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed creating subdirectory: \" + targetDir + \" while attempting to move files for jobId: \" + jobId);\n+      throw e;\n+    }\n+    synchronized (metaInfo) {\n+      if (historyFile !\u003d null) {\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile.getName()));\n+        try {\n+          moveToDoneNow(historyFile, toPath);\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" + jobId);\n+          throw e;\n+        }\n+        metaInfo.setHistoryFile(toPath);\n+      }\n+      if (confFile !\u003d null) {\n+        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile.getName()));\n+        try {\n+          moveToDoneNow(confFile, toPath);\n+        } catch (IOException e) {\n+          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" + jobId);\n+          throw e;\n+        }\n+        metaInfo.setConfFile(toPath);\n+      }\n+    }\n+    addToJobListCache(jobId, metaInfo);\n+    intermediateListCache.remove(jobId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void moveToDone(MetaInfo metaInfo) throws IOException {\n    long completeTime \u003d metaInfo.getJobIndexInfo().getFinishTime();\n    if (completeTime \u003d\u003d 0) completeTime \u003d System.currentTimeMillis();\n    JobId jobId \u003d metaInfo.getJobIndexInfo().getJobId();\n    \n    List\u003cPath\u003e paths \u003d new ArrayList\u003cPath\u003e();\n    Path historyFile \u003d metaInfo.getHistoryFile();\n    if (historyFile \u003d\u003d null) {\n      LOG.info(\"No file for job-history with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(historyFile);\n    }\n    \n    Path confFile \u003d metaInfo.getConfFile();\n    if (confFile \u003d\u003d null) {\n      LOG.info(\"No file for jobConf with \" + jobId + \" found in cache!\");\n    } else {\n      paths.add(confFile);\n    }\n    \n    //TODO Check all mi getters and setters for the conf path\n    Path summaryFile \u003d metaInfo.getSummaryFile();\n    if (summaryFile \u003d\u003d null) {\n      LOG.info(\"No summary file for job: \" + jobId);\n    } else {\n      try {\n        String jobSummaryString \u003d getJobSummary(intermediateDoneDirFc, summaryFile);\n        SUMMARY_LOG.info(jobSummaryString);\n        LOG.info(\"Deleting JobSummary file: [\" + summaryFile + \"]\");\n        intermediateDoneDirFc.delete(summaryFile, false);\n        metaInfo.setSummaryFile(null);\n      } catch (IOException e) {\n        LOG.warn(\"Failed to process summary file: [\" + summaryFile + \"]\");\n        throw e;\n      }\n    }\n\n    Path targetDir \u003d canonicalHistoryLogPath(jobId, completeTime);\n    addDirectoryToSerialNumberIndex(targetDir);\n    try {\n      maybeMakeSubdirectory(targetDir);\n    } catch (IOException e) {\n      LOG.warn(\"Failed creating subdirectory: \" + targetDir + \" while attempting to move files for jobId: \" + jobId);\n      throw e;\n    }\n    synchronized (metaInfo) {\n      if (historyFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, historyFile.getName()));\n        try {\n          moveToDoneNow(historyFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" + jobId);\n          throw e;\n        }\n        metaInfo.setHistoryFile(toPath);\n      }\n      if (confFile !\u003d null) {\n        Path toPath \u003d doneDirFc.makeQualified(new Path(targetDir, confFile.getName()));\n        try {\n          moveToDoneNow(confFile, toPath);\n        } catch (IOException e) {\n          LOG.warn(\"Failed to move file: \" + historyFile + \" for jobId: \" + jobId);\n          throw e;\n        }\n        metaInfo.setConfFile(toPath);\n      }\n    }\n    addToJobListCache(jobId, metaInfo);\n    intermediateListCache.remove(jobId);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java"
    }
  }
}