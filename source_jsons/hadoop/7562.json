{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNode.java",
  "functionName": "format",
  "functionId": "format___conf-Configuration__force-boolean__isInteractive-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
  "functionStartLine": 1217,
  "functionEndLine": 1278,
  "numCommitsSeen": 210,
  "timeTaken": 6196,
  "changeHistory": [
    "3b22fcd377eecedacceb6e37368463b48e0133c8",
    "96c4575d7373079becfa3e3db29ba98e6fb86388",
    "b6942cbe9b8c9469e8c2b64c3268d671f5a43e75",
    "9eee97508f350ed4629abb04e7781514ffa04070",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
    "7186000367df5a994e0270690a95ca49fa7b23a0",
    "df801074c929d5414b92cc9fc0cc8a2794e02751",
    "9d0f8792a9a1d3d2b24adfc2c213247a099e7ad1",
    "086fa860c01cdbee3369c20a34eacd32c1b4e8d1"
  ],
  "changeHistoryShort": {
    "3b22fcd377eecedacceb6e37368463b48e0133c8": "Ybodychange",
    "96c4575d7373079becfa3e3db29ba98e6fb86388": "Ybodychange",
    "b6942cbe9b8c9469e8c2b64c3268d671f5a43e75": "Ybodychange",
    "9eee97508f350ed4629abb04e7781514ffa04070": "Ybodychange",
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": "Ybodychange",
    "7186000367df5a994e0270690a95ca49fa7b23a0": "Ybodychange",
    "df801074c929d5414b92cc9fc0cc8a2794e02751": "Ybodychange",
    "9d0f8792a9a1d3d2b24adfc2c213247a099e7ad1": "Ybodychange",
    "086fa860c01cdbee3369c20a34eacd32c1b4e8d1": "Ybodychange"
  },
  "changeHistoryDetails": {
    "3b22fcd377eecedacceb6e37368463b48e0133c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14256. Review Logging of NameNode Class. Contributed by David Mollitor.\n",
      "commitDate": "29/08/19 2:21 PM",
      "commitName": "3b22fcd377eecedacceb6e37368463b48e0133c8",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "16/08/19 2:53 PM",
      "commitNameOld": "a38b9e137e67571d2df83a7a9505b66cffefa7c8",
      "commitAuthorOld": "hunshenshi",
      "daysBetweenCommits": 12.98,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n       SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n           DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n     }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n-    System.out.println(\"Formatting using clusterid: \" + clusterId);\n+\n+    LOG.info(\"Formatting using clusterid: {}\", clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     try {\n       FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n       fsImage.getEditLog().initJournalsForWrite();\n \n       // Abort NameNode format if reformat is disabled and if\n       // meta-dir already exists\n       if (conf.getBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,\n           DFSConfigKeys.DFS_REFORMAT_DISABLED_DEFAULT)) {\n         force \u003d false;\n         isInteractive \u003d false;\n         for (StorageDirectory sd : fsImage.storage.dirIterable(null)) {\n           if (sd.hasSomeData()) {\n             throw new NameNodeFormatException(\n                 \"NameNode format aborted as reformat is disabled for \"\n                     + \"this cluster.\");\n           }\n         }\n       }\n \n       if (!fsImage.confirmFormat(force, isInteractive)) {\n         return true; // aborted\n       }\n \n       fsImage.format(fsn, clusterId, force);\n     } catch (IOException ioe) {\n-      LOG.warn(\"Encountered exception during format: \", ioe);\n+      LOG.warn(\"Encountered exception during format\", ioe);\n       fsImage.close();\n       throw ioe;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n\n    LOG.info(\"Formatting using clusterid: {}\", clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    try {\n      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n      fsImage.getEditLog().initJournalsForWrite();\n\n      // Abort NameNode format if reformat is disabled and if\n      // meta-dir already exists\n      if (conf.getBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,\n          DFSConfigKeys.DFS_REFORMAT_DISABLED_DEFAULT)) {\n        force \u003d false;\n        isInteractive \u003d false;\n        for (StorageDirectory sd : fsImage.storage.dirIterable(null)) {\n          if (sd.hasSomeData()) {\n            throw new NameNodeFormatException(\n                \"NameNode format aborted as reformat is disabled for \"\n                    + \"this cluster.\");\n          }\n        }\n      }\n\n      if (!fsImage.confirmFormat(force, isInteractive)) {\n        return true; // aborted\n      }\n\n      fsImage.format(fsn, clusterId, force);\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered exception during format\", ioe);\n      fsImage.close();\n      throw ioe;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "96c4575d7373079becfa3e3db29ba98e6fb86388": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13805. Journal Nodes should allow to format non-empty directories with -force option. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "23/08/18 7:44 PM",
      "commitName": "96c4575d7373079becfa3e3db29ba98e6fb86388",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 11.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n       SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n           DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n     }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     try {\n       FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n       fsImage.getEditLog().initJournalsForWrite();\n \n       // Abort NameNode format if reformat is disabled and if\n       // meta-dir already exists\n       if (conf.getBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,\n           DFSConfigKeys.DFS_REFORMAT_DISABLED_DEFAULT)) {\n         force \u003d false;\n         isInteractive \u003d false;\n         for (StorageDirectory sd : fsImage.storage.dirIterable(null)) {\n           if (sd.hasSomeData()) {\n             throw new NameNodeFormatException(\n                 \"NameNode format aborted as reformat is disabled for \"\n                     + \"this cluster.\");\n           }\n         }\n       }\n \n       if (!fsImage.confirmFormat(force, isInteractive)) {\n         return true; // aborted\n       }\n \n-      fsImage.format(fsn, clusterId);\n+      fsImage.format(fsn, clusterId, force);\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered exception during format: \", ioe);\n       fsImage.close();\n       throw ioe;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    try {\n      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n      fsImage.getEditLog().initJournalsForWrite();\n\n      // Abort NameNode format if reformat is disabled and if\n      // meta-dir already exists\n      if (conf.getBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,\n          DFSConfigKeys.DFS_REFORMAT_DISABLED_DEFAULT)) {\n        force \u003d false;\n        isInteractive \u003d false;\n        for (StorageDirectory sd : fsImage.storage.dirIterable(null)) {\n          if (sd.hasSomeData()) {\n            throw new NameNodeFormatException(\n                \"NameNode format aborted as reformat is disabled for \"\n                    + \"this cluster.\");\n          }\n        }\n      }\n\n      if (!fsImage.confirmFormat(force, isInteractive)) {\n        return true; // aborted\n      }\n\n      fsImage.format(fsn, clusterId, force);\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered exception during format: \", ioe);\n      fsImage.close();\n      throw ioe;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "b6942cbe9b8c9469e8c2b64c3268d671f5a43e75": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12420. Add an option to disallow \u0027namenode format -force\u0027. Contributed by Ajay Kumar.\n",
      "commitDate": "05/10/17 3:26 PM",
      "commitName": "b6942cbe9b8c9469e8c2b64c3268d671f5a43e75",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/09/17 11:17 AM",
      "commitNameOld": "65a941008d4bbf906772399d3f035f2a0da5abfa",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 21.17,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,61 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n       SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n           DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n     }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     try {\n       FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n       fsImage.getEditLog().initJournalsForWrite();\n \n+      // Abort NameNode format if reformat is disabled and if\n+      // meta-dir already exists\n+      if (conf.getBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,\n+          DFSConfigKeys.DFS_REFORMAT_DISABLED_DEFAULT)) {\n+        force \u003d false;\n+        isInteractive \u003d false;\n+        for (StorageDirectory sd : fsImage.storage.dirIterable(null)) {\n+          if (sd.hasSomeData()) {\n+            throw new NameNodeFormatException(\n+                \"NameNode format aborted as reformat is disabled for \"\n+                    + \"this cluster.\");\n+          }\n+        }\n+      }\n+\n       if (!fsImage.confirmFormat(force, isInteractive)) {\n         return true; // aborted\n       }\n \n       fsImage.format(fsn, clusterId);\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered exception during format: \", ioe);\n       fsImage.close();\n       throw ioe;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    try {\n      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n      fsImage.getEditLog().initJournalsForWrite();\n\n      // Abort NameNode format if reformat is disabled and if\n      // meta-dir already exists\n      if (conf.getBoolean(DFSConfigKeys.DFS_REFORMAT_DISABLED,\n          DFSConfigKeys.DFS_REFORMAT_DISABLED_DEFAULT)) {\n        force \u003d false;\n        isInteractive \u003d false;\n        for (StorageDirectory sd : fsImage.storage.dirIterable(null)) {\n          if (sd.hasSomeData()) {\n            throw new NameNodeFormatException(\n                \"NameNode format aborted as reformat is disabled for \"\n                    + \"this cluster.\");\n          }\n        }\n      }\n\n      if (!fsImage.confirmFormat(force, isInteractive)) {\n        return true; // aborted\n      }\n\n      fsImage.format(fsn, clusterId);\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered exception during format: \", ioe);\n      fsImage.close();\n      throw ioe;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "9eee97508f350ed4629abb04e7781514ffa04070": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9022. Move NameNode.getAddress() and NameNode.getUri() to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "17/09/15 2:18 PM",
      "commitName": "9eee97508f350ed4629abb04e7781514ffa04070",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "15/09/15 11:48 AM",
      "commitNameOld": "ce69c9b54c642cfbe789fc661cfc7dcbb07b4ac5",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n-      InetSocketAddress socAddr \u003d getAddress(conf);\n+      InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n       SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n           DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n     }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     try {\n       FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n       fsImage.getEditLog().initJournalsForWrite();\n \n       if (!fsImage.confirmFormat(force, isInteractive)) {\n         return true; // aborted\n       }\n \n       fsImage.format(fsn, clusterId);\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered exception during format: \", ioe);\n       fsImage.close();\n       throw ioe;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d DFSUtilClient.getNNAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    try {\n      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n      fsImage.getEditLog().initJournalsForWrite();\n\n      if (!fsImage.confirmFormat(force, isInteractive)) {\n        return true; // aborted\n      }\n\n      fsImage.format(fsn, clusterId);\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered exception during format: \", ioe);\n      fsImage.close();\n      throw ioe;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6181. Fix the wrong property names in NFS user guide. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1585563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/04/14 11:55 AM",
      "commitName": "a5b37c6ed14e92f5a7f7dd76a9a82b3f859fb6dd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "02/04/14 10:28 AM",
      "commitNameOld": "fb1d7fb596b8e8bb9a5f141c89acb1949bade87a",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       InetSocketAddress socAddr \u003d getAddress(conf);\n       SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n-          DFS_NAMENODE_USER_NAME_KEY, socAddr.getHostName());\n+          DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n     }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     try {\n       FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n       fsImage.getEditLog().initJournalsForWrite();\n \n       if (!fsImage.confirmFormat(force, isInteractive)) {\n         return true; // aborted\n       }\n \n       fsImage.format(fsn, clusterId);\n     } catch (IOException ioe) {\n       LOG.warn(\"Encountered exception during format: \", ioe);\n       fsImage.close();\n       throw ioe;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d getAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    try {\n      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n      fsImage.getEditLog().initJournalsForWrite();\n\n      if (!fsImage.confirmFormat(force, isInteractive)) {\n        return true; // aborted\n      }\n\n      fsImage.format(fsn, clusterId);\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered exception during format: \", ioe);\n      fsImage.close();\n      throw ioe;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "7186000367df5a994e0270690a95ca49fa7b23a0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5721. sharedEditsImage in Namenode#initializeSharedEdits() should be closed before method returns. (Ted Yu via junping_du)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556803 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/14 5:33 AM",
      "commitName": "7186000367df5a994e0270690a95ca49fa7b23a0",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/01/14 10:59 AM",
      "commitNameOld": "2a1ecd00dadb1577da9e02822469e8194f1d3cee",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,46 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       InetSocketAddress socAddr \u003d getAddress(conf);\n       SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n           DFS_NAMENODE_USER_NAME_KEY, socAddr.getHostName());\n     }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n-    FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n-    fsImage.getEditLog().initJournalsForWrite();\n-    \n-    if (!fsImage.confirmFormat(force, isInteractive)) {\n-      return true; // aborted\n+    try {\n+      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n+      fsImage.getEditLog().initJournalsForWrite();\n+\n+      if (!fsImage.confirmFormat(force, isInteractive)) {\n+        return true; // aborted\n+      }\n+\n+      fsImage.format(fsn, clusterId);\n+    } catch (IOException ioe) {\n+      LOG.warn(\"Encountered exception during format: \", ioe);\n+      fsImage.close();\n+      throw ioe;\n     }\n-    \n-    fsImage.format(fsn, clusterId);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d getAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_USER_NAME_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    try {\n      FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n      fsImage.getEditLog().initJournalsForWrite();\n\n      if (!fsImage.confirmFormat(force, isInteractive)) {\n        return true; // aborted\n      }\n\n      fsImage.format(fsn, clusterId);\n    } catch (IOException ioe) {\n      LOG.warn(\"Encountered exception during format: \", ioe);\n      fsImage.close();\n      throw ioe;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "df801074c929d5414b92cc9fc0cc8a2794e02751": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 2:42 PM",
      "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "01/09/12 12:22 PM",
      "commitNameOld": "54e612bfb9f877e58f7f153c43cb4147876826d3",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,40 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n+\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      InetSocketAddress socAddr \u003d getAddress(conf);\n+      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n+          DFS_NAMENODE_USER_NAME_KEY, socAddr.getHostName());\n+    }\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n     fsImage.getEditLog().initJournalsForWrite();\n     \n     if (!fsImage.confirmFormat(force, isInteractive)) {\n       return true; // aborted\n     }\n     \n     fsImage.format(fsn, clusterId);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      InetSocketAddress socAddr \u003d getAddress(conf);\n      SecurityUtil.login(conf, DFS_NAMENODE_KEYTAB_FILE_KEY,\n          DFS_NAMENODE_USER_NAME_KEY, socAddr.getHostName());\n    }\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n    fsImage.getEditLog().initJournalsForWrite();\n    \n    if (!fsImage.confirmFormat(force, isInteractive)) {\n      return true; // aborted\n    }\n    \n    fsImage.format(fsn, clusterId);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "9d0f8792a9a1d3d2b24adfc2c213247a099e7ad1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3695. Genericize format() to non-file JournalManagers. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371513 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/12 3:13 PM",
      "commitName": "9d0f8792a9a1d3d2b24adfc2c213247a099e7ad1",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "17/07/12 10:05 PM",
      "commitNameOld": "6981b14003d3ff99fd719515ac08d748fc5f44bd",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 22.71,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n     \n     Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n     List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n     dirsToPrompt.addAll(nameDirsToFormat);\n     dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n-    if (!confirmFormat(dirsToPrompt, force, isInteractive)) {\n-      return true; // aborted\n-    }\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n     FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n+    fsImage.getEditLog().initJournalsForWrite();\n+    \n+    if (!fsImage.confirmFormat(force, isInteractive)) {\n+      return true; // aborted\n+    }\n+    \n     fsImage.format(fsn, clusterId);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n    fsImage.getEditLog().initJournalsForWrite();\n    \n    if (!fsImage.confirmFormat(force, isInteractive)) {\n      return true; // aborted\n    }\n    \n    fsImage.format(fsn, clusterId);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    },
    "086fa860c01cdbee3369c20a34eacd32c1b4e8d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3275. Skip format for non-file based directories. Contributed by Amith D K.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332527 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/12 10:47 PM",
      "commitName": "086fa860c01cdbee3369c20a34eacd32c1b4e8d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "19/04/12 1:43 PM",
      "commitNameOld": "49ed783a3a68726264c68cdc6c958ba9ad26c2c9",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 11.38,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   private static boolean format(Configuration conf, boolean force,\n       boolean isInteractive) throws IOException {\n     String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n     String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n     initializeGenericKeys(conf, nsId, namenodeId);\n     checkAllowFormat(conf);\n     \n-    Collection\u003cURI\u003e dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n+    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n+    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n+    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n+    dirsToPrompt.addAll(nameDirsToFormat);\n+    dirsToPrompt.addAll(sharedDirs);\n     List\u003cURI\u003e editDirsToFormat \u003d \n                  FSNamesystem.getNamespaceEditsDirs(conf);\n-    if (!confirmFormat(dirsToFormat, force, isInteractive)) {\n+    if (!confirmFormat(dirsToPrompt, force, isInteractive)) {\n       return true; // aborted\n     }\n \n     // if clusterID is not provided - see if you can find the current one\n     String clusterId \u003d StartupOption.FORMAT.getClusterId();\n     if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n       //Generate a new cluster id\n       clusterId \u003d NNStorage.newClusterID();\n     }\n     System.out.println(\"Formatting using clusterid: \" + clusterId);\n     \n-    FSImage fsImage \u003d new FSImage(conf, dirsToFormat, editDirsToFormat);\n+    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n     FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n     fsImage.format(fsn, clusterId);\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean format(Configuration conf, boolean force,\n      boolean isInteractive) throws IOException {\n    String nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n    String namenodeId \u003d HAUtil.getNameNodeId(conf, nsId);\n    initializeGenericKeys(conf, nsId, namenodeId);\n    checkAllowFormat(conf);\n    \n    Collection\u003cURI\u003e nameDirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    List\u003cURI\u003e sharedDirs \u003d FSNamesystem.getSharedEditsDirs(conf);\n    List\u003cURI\u003e dirsToPrompt \u003d new ArrayList\u003cURI\u003e();\n    dirsToPrompt.addAll(nameDirsToFormat);\n    dirsToPrompt.addAll(sharedDirs);\n    List\u003cURI\u003e editDirsToFormat \u003d \n                 FSNamesystem.getNamespaceEditsDirs(conf);\n    if (!confirmFormat(dirsToPrompt, force, isInteractive)) {\n      return true; // aborted\n    }\n\n    // if clusterID is not provided - see if you can find the current one\n    String clusterId \u003d StartupOption.FORMAT.getClusterId();\n    if(clusterId \u003d\u003d null || clusterId.equals(\"\")) {\n      //Generate a new cluster id\n      clusterId \u003d NNStorage.newClusterID();\n    }\n    System.out.println(\"Formatting using clusterid: \" + clusterId);\n    \n    FSImage fsImage \u003d new FSImage(conf, nameDirsToFormat, editDirsToFormat);\n    FSNamesystem fsn \u003d new FSNamesystem(conf, fsImage);\n    fsImage.format(fsn, clusterId);\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {}
    }
  }
}