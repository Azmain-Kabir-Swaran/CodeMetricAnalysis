{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKFailoverController.java",
  "functionName": "doRun",
  "functionId": "doRun___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
  "functionStartLine": 194,
  "functionEndLine": 262,
  "numCommitsSeen": 35,
  "timeTaken": 2326,
  "changeHistory": [
    "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b",
    "ccaf036662e22da14583942054898c99fa51dae5",
    "22a78a75b4cc700464fdbbe84eff321b8460f70e",
    "9d5799553fea81920edfab611e5d485a97841848",
    "c6e132124591362657e6f1722acca376747ea254",
    "b74d7427855eb7e20be70155c11acac0e333bd6a",
    "543701387fc0054082a17da15e85e9e8f8025801",
    "578f413778a6f005a35d18d7f015df128aeded5b"
  ],
  "changeHistoryShort": {
    "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b": "Ymultichange(Yexceptionschange,Ybodychange)",
    "ccaf036662e22da14583942054898c99fa51dae5": "Ybodychange",
    "22a78a75b4cc700464fdbbe84eff321b8460f70e": "Ybodychange",
    "9d5799553fea81920edfab611e5d485a97841848": "Ybodychange",
    "c6e132124591362657e6f1722acca376747ea254": "Ybodychange",
    "b74d7427855eb7e20be70155c11acac0e333bd6a": "Ybodychange",
    "543701387fc0054082a17da15e85e9e8f8025801": "Ybodychange",
    "578f413778a6f005a35d18d7f015df128aeded5b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-12683. DFSZKFailOverController re-order logic for logging Exception. Contributed by Bharat Viswanadham.\n",
      "commitDate": "23/10/17 10:47 AM",
      "commitName": "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-12683. DFSZKFailOverController re-order logic for logging Exception. Contributed by Bharat Viswanadham.\n",
          "commitDate": "23/10/17 10:47 AM",
          "commitName": "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "17/07/17 9:32 PM",
          "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 97.55,
          "commitsBetweenForRepo": 816,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,69 @@\n   private int doRun(String[] args)\n-      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n+      throws Exception {\n     try {\n       initZK();\n     } catch (KeeperException ke) {\n       LOG.error(\"Unable to start failover controller. Unable to connect \"\n           + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n           + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n-          + \"ZooKeeper is running.\");\n+          + \"ZooKeeper is running.\", ke);\n       return ERR_CODE_NO_ZK;\n     }\n-    if (args.length \u003e 0) {\n-      if (\"-formatZK\".equals(args[0])) {\n-        boolean force \u003d false;\n-        boolean interactive \u003d true;\n-        for (int i \u003d 1; i \u003c args.length; i++) {\n-          if (\"-force\".equals(args[i])) {\n-            force \u003d true;\n-          } else if (\"-nonInteractive\".equals(args[i])) {\n-            interactive \u003d false;\n-          } else {\n-            badArg(args[i]);\n+    try {\n+      if (args.length \u003e 0) {\n+        if (\"-formatZK\".equals(args[0])) {\n+          boolean force \u003d false;\n+          boolean interactive \u003d true;\n+          for (int i \u003d 1; i \u003c args.length; i++) {\n+            if (\"-force\".equals(args[i])) {\n+              force \u003d true;\n+            } else if (\"-nonInteractive\".equals(args[i])) {\n+              interactive \u003d false;\n+            } else {\n+              badArg(args[i]);\n+            }\n           }\n+          return formatZK(force, interactive);\n         }\n-        return formatZK(force, interactive);\n-      } else {\n-        badArg(args[0]);\n+        else {\n+          badArg(args[0]);\n+        }\n       }\n+    } catch (Exception e){\n+      LOG.error(\"The failover controller encounters runtime error\", e);\n+      throw e;\n     }\n \n     if (!elector.parentZNodeExists()) {\n       LOG.error(\"Unable to start failover controller. \"\n           + \"Parent znode does not exist.\\n\"\n           + \"Run with -formatZK flag to initialize ZooKeeper.\");\n       return ERR_CODE_NO_PARENT_ZNODE;\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.error(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n-    initRPC();\n-    initHM();\n-    startRPC();\n     try {\n+      initRPC();\n+      initHM();\n+      startRPC();\n       mainLoop();\n+    } catch (Exception e) {\n+      LOG.error(\"The failover controller encounters runtime error: \", e);\n+      throw e;\n     } finally {\n       rpcServer.stopAndJoin();\n       \n       elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int doRun(String[] args)\n      throws Exception {\n    try {\n      initZK();\n    } catch (KeeperException ke) {\n      LOG.error(\"Unable to start failover controller. Unable to connect \"\n          + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n          + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n          + \"ZooKeeper is running.\", ke);\n      return ERR_CODE_NO_ZK;\n    }\n    try {\n      if (args.length \u003e 0) {\n        if (\"-formatZK\".equals(args[0])) {\n          boolean force \u003d false;\n          boolean interactive \u003d true;\n          for (int i \u003d 1; i \u003c args.length; i++) {\n            if (\"-force\".equals(args[i])) {\n              force \u003d true;\n            } else if (\"-nonInteractive\".equals(args[i])) {\n              interactive \u003d false;\n            } else {\n              badArg(args[i]);\n            }\n          }\n          return formatZK(force, interactive);\n        }\n        else {\n          badArg(args[0]);\n        }\n      }\n    } catch (Exception e){\n      LOG.error(\"The failover controller encounters runtime error\", e);\n      throw e;\n    }\n\n    if (!elector.parentZNodeExists()) {\n      LOG.error(\"Unable to start failover controller. \"\n          + \"Parent znode does not exist.\\n\"\n          + \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.error(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    try {\n      initRPC();\n      initHM();\n      startRPC();\n      mainLoop();\n    } catch (Exception e) {\n      LOG.error(\"The failover controller encounters runtime error: \", e);\n      throw e;\n    } finally {\n      rpcServer.stopAndJoin();\n      \n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
          "extendedDetails": {
            "oldValue": "[HadoopIllegalArgumentException, IOException, InterruptedException]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12683. DFSZKFailOverController re-order logic for logging Exception. Contributed by Bharat Viswanadham.\n",
          "commitDate": "23/10/17 10:47 AM",
          "commitName": "4b00c9a47f94c4d7c673710bbb3b85b5d2807e7b",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "17/07/17 9:32 PM",
          "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 97.55,
          "commitsBetweenForRepo": 816,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,69 @@\n   private int doRun(String[] args)\n-      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n+      throws Exception {\n     try {\n       initZK();\n     } catch (KeeperException ke) {\n       LOG.error(\"Unable to start failover controller. Unable to connect \"\n           + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n           + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n-          + \"ZooKeeper is running.\");\n+          + \"ZooKeeper is running.\", ke);\n       return ERR_CODE_NO_ZK;\n     }\n-    if (args.length \u003e 0) {\n-      if (\"-formatZK\".equals(args[0])) {\n-        boolean force \u003d false;\n-        boolean interactive \u003d true;\n-        for (int i \u003d 1; i \u003c args.length; i++) {\n-          if (\"-force\".equals(args[i])) {\n-            force \u003d true;\n-          } else if (\"-nonInteractive\".equals(args[i])) {\n-            interactive \u003d false;\n-          } else {\n-            badArg(args[i]);\n+    try {\n+      if (args.length \u003e 0) {\n+        if (\"-formatZK\".equals(args[0])) {\n+          boolean force \u003d false;\n+          boolean interactive \u003d true;\n+          for (int i \u003d 1; i \u003c args.length; i++) {\n+            if (\"-force\".equals(args[i])) {\n+              force \u003d true;\n+            } else if (\"-nonInteractive\".equals(args[i])) {\n+              interactive \u003d false;\n+            } else {\n+              badArg(args[i]);\n+            }\n           }\n+          return formatZK(force, interactive);\n         }\n-        return formatZK(force, interactive);\n-      } else {\n-        badArg(args[0]);\n+        else {\n+          badArg(args[0]);\n+        }\n       }\n+    } catch (Exception e){\n+      LOG.error(\"The failover controller encounters runtime error\", e);\n+      throw e;\n     }\n \n     if (!elector.parentZNodeExists()) {\n       LOG.error(\"Unable to start failover controller. \"\n           + \"Parent znode does not exist.\\n\"\n           + \"Run with -formatZK flag to initialize ZooKeeper.\");\n       return ERR_CODE_NO_PARENT_ZNODE;\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.error(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n-    initRPC();\n-    initHM();\n-    startRPC();\n     try {\n+      initRPC();\n+      initHM();\n+      startRPC();\n       mainLoop();\n+    } catch (Exception e) {\n+      LOG.error(\"The failover controller encounters runtime error: \", e);\n+      throw e;\n     } finally {\n       rpcServer.stopAndJoin();\n       \n       elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int doRun(String[] args)\n      throws Exception {\n    try {\n      initZK();\n    } catch (KeeperException ke) {\n      LOG.error(\"Unable to start failover controller. Unable to connect \"\n          + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n          + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n          + \"ZooKeeper is running.\", ke);\n      return ERR_CODE_NO_ZK;\n    }\n    try {\n      if (args.length \u003e 0) {\n        if (\"-formatZK\".equals(args[0])) {\n          boolean force \u003d false;\n          boolean interactive \u003d true;\n          for (int i \u003d 1; i \u003c args.length; i++) {\n            if (\"-force\".equals(args[i])) {\n              force \u003d true;\n            } else if (\"-nonInteractive\".equals(args[i])) {\n              interactive \u003d false;\n            } else {\n              badArg(args[i]);\n            }\n          }\n          return formatZK(force, interactive);\n        }\n        else {\n          badArg(args[0]);\n        }\n      }\n    } catch (Exception e){\n      LOG.error(\"The failover controller encounters runtime error\", e);\n      throw e;\n    }\n\n    if (!elector.parentZNodeExists()) {\n      LOG.error(\"Unable to start failover controller. \"\n          + \"Parent znode does not exist.\\n\"\n          + \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.error(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    try {\n      initRPC();\n      initHM();\n      startRPC();\n      mainLoop();\n    } catch (Exception e) {\n      LOG.error(\"The failover controller encounters runtime error: \", e);\n      throw e;\n    } finally {\n      rpcServer.stopAndJoin();\n      \n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
          "extendedDetails": {}
        }
      ]
    },
    "ccaf036662e22da14583942054898c99fa51dae5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14539. Move commons logging APIs over to slf4j in hadoop-common. Contributed by Wenxin He.\n",
      "commitDate": "17/07/17 9:32 PM",
      "commitName": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/03/17 6:06 PM",
      "commitNameOld": "84ddedc0b2d58257d45c16ee5e83b15f94a7ba3a",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 115.14,
      "commitsBetweenForRepo": 594,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private int doRun(String[] args)\n       throws HadoopIllegalArgumentException, IOException, InterruptedException {\n     try {\n       initZK();\n     } catch (KeeperException ke) {\n-      LOG.fatal(\"Unable to start failover controller. Unable to connect \"\n+      LOG.error(\"Unable to start failover controller. Unable to connect \"\n           + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n           + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n           + \"ZooKeeper is running.\");\n       return ERR_CODE_NO_ZK;\n     }\n     if (args.length \u003e 0) {\n       if (\"-formatZK\".equals(args[0])) {\n         boolean force \u003d false;\n         boolean interactive \u003d true;\n         for (int i \u003d 1; i \u003c args.length; i++) {\n           if (\"-force\".equals(args[i])) {\n             force \u003d true;\n           } else if (\"-nonInteractive\".equals(args[i])) {\n             interactive \u003d false;\n           } else {\n             badArg(args[i]);\n           }\n         }\n         return formatZK(force, interactive);\n       } else {\n         badArg(args[0]);\n       }\n     }\n \n     if (!elector.parentZNodeExists()) {\n-      LOG.fatal(\"Unable to start failover controller. \"\n+      LOG.error(\"Unable to start failover controller. \"\n           + \"Parent znode does not exist.\\n\"\n           + \"Run with -formatZK flag to initialize ZooKeeper.\");\n       return ERR_CODE_NO_PARENT_ZNODE;\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n-      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n+      LOG.error(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n     initRPC();\n     initHM();\n     startRPC();\n     try {\n       mainLoop();\n     } finally {\n       rpcServer.stopAndJoin();\n       \n       elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    try {\n      initZK();\n    } catch (KeeperException ke) {\n      LOG.error(\"Unable to start failover controller. Unable to connect \"\n          + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n          + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n          + \"ZooKeeper is running.\");\n      return ERR_CODE_NO_ZK;\n    }\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n\n    if (!elector.parentZNodeExists()) {\n      LOG.error(\"Unable to start failover controller. \"\n          + \"Parent znode does not exist.\\n\"\n          + \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.error(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initRPC();\n    initHM();\n    startRPC();\n    try {\n      mainLoop();\n    } finally {\n      rpcServer.stopAndJoin();\n      \n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "22a78a75b4cc700464fdbbe84eff321b8460f70e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9126. FormatZK and ZKFC startup can fail due to zkclient connection establishment delay. Contributed by Rakesh R and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1419831 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12 2:09 PM",
      "commitName": "22a78a75b4cc700464fdbbe84eff321b8460f70e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "14/08/12 5:28 PM",
      "commitNameOld": "28e87740c5797e87a9038d7f151c8b21a5b04592",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 117.9,
      "commitsBetweenForRepo": 670,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,60 @@\n   private int doRun(String[] args)\n       throws HadoopIllegalArgumentException, IOException, InterruptedException {\n-    initZK();\n+    try {\n+      initZK();\n+    } catch (KeeperException ke) {\n+      LOG.fatal(\"Unable to start failover controller. Unable to connect \"\n+          + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n+          + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n+          + \"ZooKeeper is running.\");\n+      return ERR_CODE_NO_ZK;\n+    }\n     if (args.length \u003e 0) {\n       if (\"-formatZK\".equals(args[0])) {\n         boolean force \u003d false;\n         boolean interactive \u003d true;\n         for (int i \u003d 1; i \u003c args.length; i++) {\n           if (\"-force\".equals(args[i])) {\n             force \u003d true;\n           } else if (\"-nonInteractive\".equals(args[i])) {\n             interactive \u003d false;\n           } else {\n             badArg(args[i]);\n           }\n         }\n         return formatZK(force, interactive);\n       } else {\n         badArg(args[0]);\n       }\n     }\n-    \n-    try {\n-      if (!elector.parentZNodeExists()) {\n-        LOG.fatal(\"Unable to start failover controller. \" +\n-            \"Parent znode does not exist.\\n\" +\n-            \"Run with -formatZK flag to initialize ZooKeeper.\");\n-        return ERR_CODE_NO_PARENT_ZNODE;\n-      }\n-    } catch (IOException ioe) {\n-      if (ioe.getCause() instanceof KeeperException.ConnectionLossException) {\n-        LOG.fatal(\"Unable to start failover controller. Unable to connect \" +\n-            \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \" +\n-            \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \" +\n-            \"ZooKeeper is running.\");\n-        return ERR_CODE_NO_ZK;\n-      } else {\n-        throw ioe;\n-      }\n+\n+    if (!elector.parentZNodeExists()) {\n+      LOG.fatal(\"Unable to start failover controller. \"\n+          + \"Parent znode does not exist.\\n\"\n+          + \"Run with -formatZK flag to initialize ZooKeeper.\");\n+      return ERR_CODE_NO_PARENT_ZNODE;\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n     initRPC();\n     initHM();\n     startRPC();\n     try {\n       mainLoop();\n     } finally {\n       rpcServer.stopAndJoin();\n       \n       elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    try {\n      initZK();\n    } catch (KeeperException ke) {\n      LOG.fatal(\"Unable to start failover controller. Unable to connect \"\n          + \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \"\n          + \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \"\n          + \"ZooKeeper is running.\");\n      return ERR_CODE_NO_ZK;\n    }\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n\n    if (!elector.parentZNodeExists()) {\n      LOG.fatal(\"Unable to start failover controller. \"\n          + \"Parent znode does not exist.\\n\"\n          + \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initRPC();\n    initHM();\n    startRPC();\n    try {\n      mainLoop();\n    } finally {\n      rpcServer.stopAndJoin();\n      \n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "9d5799553fea81920edfab611e5d485a97841848": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8279. Allow manual failover to be invoked when auto-failover is enabled. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1333288 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/05/12 6:56 PM",
      "commitName": "9d5799553fea81920edfab611e5d485a97841848",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/04/12 12:34 PM",
      "commitNameOld": "c6e132124591362657e6f1722acca376747ea254",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,64 @@\n   private int doRun(String[] args)\n       throws HadoopIllegalArgumentException, IOException, InterruptedException {\n     initZK();\n     if (args.length \u003e 0) {\n       if (\"-formatZK\".equals(args[0])) {\n         boolean force \u003d false;\n         boolean interactive \u003d true;\n         for (int i \u003d 1; i \u003c args.length; i++) {\n           if (\"-force\".equals(args[i])) {\n             force \u003d true;\n           } else if (\"-nonInteractive\".equals(args[i])) {\n             interactive \u003d false;\n           } else {\n             badArg(args[i]);\n           }\n         }\n         return formatZK(force, interactive);\n       } else {\n         badArg(args[0]);\n       }\n     }\n     \n     try {\n       if (!elector.parentZNodeExists()) {\n         LOG.fatal(\"Unable to start failover controller. \" +\n             \"Parent znode does not exist.\\n\" +\n             \"Run with -formatZK flag to initialize ZooKeeper.\");\n         return ERR_CODE_NO_PARENT_ZNODE;\n       }\n     } catch (IOException ioe) {\n       if (ioe.getCause() instanceof KeeperException.ConnectionLossException) {\n         LOG.fatal(\"Unable to start failover controller. Unable to connect \" +\n             \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \" +\n             \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \" +\n             \"ZooKeeper is running.\");\n         return ERR_CODE_NO_ZK;\n       } else {\n         throw ioe;\n       }\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n+    initRPC();\n     initHM();\n+    startRPC();\n     try {\n       mainLoop();\n     } finally {\n+      rpcServer.stopAndJoin();\n+      \n       elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    initZK();\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n    \n    try {\n      if (!elector.parentZNodeExists()) {\n        LOG.fatal(\"Unable to start failover controller. \" +\n            \"Parent znode does not exist.\\n\" +\n            \"Run with -formatZK flag to initialize ZooKeeper.\");\n        return ERR_CODE_NO_PARENT_ZNODE;\n      }\n    } catch (IOException ioe) {\n      if (ioe.getCause() instanceof KeeperException.ConnectionLossException) {\n        LOG.fatal(\"Unable to start failover controller. Unable to connect \" +\n            \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \" +\n            \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \" +\n            \"ZooKeeper is running.\");\n        return ERR_CODE_NO_ZK;\n      } else {\n        throw ioe;\n      }\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initRPC();\n    initHM();\n    startRPC();\n    try {\n      mainLoop();\n    } finally {\n      rpcServer.stopAndJoin();\n      \n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "c6e132124591362657e6f1722acca376747ea254": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8306. ZKFC: improve error message when ZK is not running. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1329960 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/12 12:34 PM",
      "commitName": "c6e132124591362657e6f1722acca376747ea254",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "10/04/12 10:40 PM",
      "commitNameOld": "41a014c31b3e435354a25d4b7d53f0bd2cede9a1",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 13.58,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,60 @@\n   private int doRun(String[] args)\n       throws HadoopIllegalArgumentException, IOException, InterruptedException {\n     initZK();\n     if (args.length \u003e 0) {\n       if (\"-formatZK\".equals(args[0])) {\n         boolean force \u003d false;\n         boolean interactive \u003d true;\n         for (int i \u003d 1; i \u003c args.length; i++) {\n           if (\"-force\".equals(args[i])) {\n             force \u003d true;\n           } else if (\"-nonInteractive\".equals(args[i])) {\n             interactive \u003d false;\n           } else {\n             badArg(args[i]);\n           }\n         }\n         return formatZK(force, interactive);\n       } else {\n         badArg(args[0]);\n       }\n     }\n     \n-    if (!elector.parentZNodeExists()) {\n-      LOG.fatal(\"Unable to start failover controller. \" +\n-          \"Parent znode does not exist.\\n\" +\n-          \"Run with -formatZK flag to initialize ZooKeeper.\");\n-      return ERR_CODE_NO_PARENT_ZNODE;\n+    try {\n+      if (!elector.parentZNodeExists()) {\n+        LOG.fatal(\"Unable to start failover controller. \" +\n+            \"Parent znode does not exist.\\n\" +\n+            \"Run with -formatZK flag to initialize ZooKeeper.\");\n+        return ERR_CODE_NO_PARENT_ZNODE;\n+      }\n+    } catch (IOException ioe) {\n+      if (ioe.getCause() instanceof KeeperException.ConnectionLossException) {\n+        LOG.fatal(\"Unable to start failover controller. Unable to connect \" +\n+            \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \" +\n+            \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \" +\n+            \"ZooKeeper is running.\");\n+        return ERR_CODE_NO_ZK;\n+      } else {\n+        throw ioe;\n+      }\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n     initHM();\n     try {\n       mainLoop();\n     } finally {\n       elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    initZK();\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n    \n    try {\n      if (!elector.parentZNodeExists()) {\n        LOG.fatal(\"Unable to start failover controller. \" +\n            \"Parent znode does not exist.\\n\" +\n            \"Run with -formatZK flag to initialize ZooKeeper.\");\n        return ERR_CODE_NO_PARENT_ZNODE;\n      }\n    } catch (IOException ioe) {\n      if (ioe.getCause() instanceof KeeperException.ConnectionLossException) {\n        LOG.fatal(\"Unable to start failover controller. Unable to connect \" +\n            \"to ZooKeeper quorum at \" + zkQuorum + \". Please check the \" +\n            \"configured value for \" + ZK_QUORUM_KEY + \" and ensure that \" +\n            \"ZooKeeper is running.\");\n        return ERR_CODE_NO_ZK;\n      } else {\n        throw ioe;\n      }\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initHM();\n    try {\n      mainLoop();\n    } finally {\n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "b74d7427855eb7e20be70155c11acac0e333bd6a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8245. Fix flakiness in TestZKFailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 12:21 PM",
      "commitName": "b74d7427855eb7e20be70155c11acac0e333bd6a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 4:37 PM",
      "commitNameOld": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private int doRun(String[] args)\n       throws HadoopIllegalArgumentException, IOException, InterruptedException {\n     initZK();\n     if (args.length \u003e 0) {\n       if (\"-formatZK\".equals(args[0])) {\n         boolean force \u003d false;\n         boolean interactive \u003d true;\n         for (int i \u003d 1; i \u003c args.length; i++) {\n           if (\"-force\".equals(args[i])) {\n             force \u003d true;\n           } else if (\"-nonInteractive\".equals(args[i])) {\n             interactive \u003d false;\n           } else {\n             badArg(args[i]);\n           }\n         }\n         return formatZK(force, interactive);\n       } else {\n         badArg(args[0]);\n       }\n     }\n     \n     if (!elector.parentZNodeExists()) {\n       LOG.fatal(\"Unable to start failover controller. \" +\n           \"Parent znode does not exist.\\n\" +\n           \"Run with -formatZK flag to initialize ZooKeeper.\");\n       return ERR_CODE_NO_PARENT_ZNODE;\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n     initHM();\n     try {\n       mainLoop();\n     } finally {\n+      elector.quitElection(true);\n       healthMonitor.shutdown();\n       healthMonitor.join();\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    initZK();\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n    \n    if (!elector.parentZNodeExists()) {\n      LOG.fatal(\"Unable to start failover controller. \" +\n          \"Parent znode does not exist.\\n\" +\n          \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initHM();\n    try {\n      mainLoop();\n    } finally {\n      elector.quitElection(true);\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "543701387fc0054082a17da15e85e9e8f8025801": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8228. Auto HA: Refactor tests and add stress tests. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/03/12 1:30 PM",
      "commitName": "543701387fc0054082a17da15e85e9e8f8025801",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "30/03/12 1:23 PM",
      "commitNameOld": "66931670287bc859300014ad50531f5d9a648067",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,47 @@\n   private int doRun(String[] args)\n       throws HadoopIllegalArgumentException, IOException, InterruptedException {\n     initZK();\n     if (args.length \u003e 0) {\n       if (\"-formatZK\".equals(args[0])) {\n         boolean force \u003d false;\n         boolean interactive \u003d true;\n         for (int i \u003d 1; i \u003c args.length; i++) {\n           if (\"-force\".equals(args[i])) {\n             force \u003d true;\n           } else if (\"-nonInteractive\".equals(args[i])) {\n             interactive \u003d false;\n           } else {\n             badArg(args[i]);\n           }\n         }\n         return formatZK(force, interactive);\n       } else {\n         badArg(args[0]);\n       }\n     }\n     \n     if (!elector.parentZNodeExists()) {\n       LOG.fatal(\"Unable to start failover controller. \" +\n           \"Parent znode does not exist.\\n\" +\n           \"Run with -formatZK flag to initialize ZooKeeper.\");\n       return ERR_CODE_NO_PARENT_ZNODE;\n     }\n \n     try {\n       localTarget.checkFencingConfigured();\n     } catch (BadFencingConfigurationException e) {\n       LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n           \"You must configure a fencing method before using automatic \" +\n           \"failover.\", e);\n       return ERR_CODE_NO_FENCER;\n     }\n \n     initHM();\n-    mainLoop();\n+    try {\n+      mainLoop();\n+    } finally {\n+      healthMonitor.shutdown();\n+      healthMonitor.join();\n+    }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    initZK();\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n    \n    if (!elector.parentZNodeExists()) {\n      LOG.fatal(\"Unable to start failover controller. \" +\n          \"Parent znode does not exist.\\n\" +\n          \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initHM();\n    try {\n      mainLoop();\n    } finally {\n      healthMonitor.shutdown();\n      healthMonitor.join();\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java",
      "extendedDetails": {}
    },
    "578f413778a6f005a35d18d7f015df128aeded5b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8206. Common portion of a ZK-based failover controller. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 4:37 PM",
      "commitName": "578f413778a6f005a35d18d7f015df128aeded5b",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,42 @@\n+  private int doRun(String[] args)\n+      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n+    initZK();\n+    if (args.length \u003e 0) {\n+      if (\"-formatZK\".equals(args[0])) {\n+        boolean force \u003d false;\n+        boolean interactive \u003d true;\n+        for (int i \u003d 1; i \u003c args.length; i++) {\n+          if (\"-force\".equals(args[i])) {\n+            force \u003d true;\n+          } else if (\"-nonInteractive\".equals(args[i])) {\n+            interactive \u003d false;\n+          } else {\n+            badArg(args[i]);\n+          }\n+        }\n+        return formatZK(force, interactive);\n+      } else {\n+        badArg(args[0]);\n+      }\n+    }\n+    \n+    if (!elector.parentZNodeExists()) {\n+      LOG.fatal(\"Unable to start failover controller. \" +\n+          \"Parent znode does not exist.\\n\" +\n+          \"Run with -formatZK flag to initialize ZooKeeper.\");\n+      return ERR_CODE_NO_PARENT_ZNODE;\n+    }\n+\n+    try {\n+      localTarget.checkFencingConfigured();\n+    } catch (BadFencingConfigurationException e) {\n+      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n+          \"You must configure a fencing method before using automatic \" +\n+          \"failover.\", e);\n+      return ERR_CODE_NO_FENCER;\n+    }\n+\n+    initHM();\n+    mainLoop();\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int doRun(String[] args)\n      throws HadoopIllegalArgumentException, IOException, InterruptedException {\n    initZK();\n    if (args.length \u003e 0) {\n      if (\"-formatZK\".equals(args[0])) {\n        boolean force \u003d false;\n        boolean interactive \u003d true;\n        for (int i \u003d 1; i \u003c args.length; i++) {\n          if (\"-force\".equals(args[i])) {\n            force \u003d true;\n          } else if (\"-nonInteractive\".equals(args[i])) {\n            interactive \u003d false;\n          } else {\n            badArg(args[i]);\n          }\n        }\n        return formatZK(force, interactive);\n      } else {\n        badArg(args[0]);\n      }\n    }\n    \n    if (!elector.parentZNodeExists()) {\n      LOG.fatal(\"Unable to start failover controller. \" +\n          \"Parent znode does not exist.\\n\" +\n          \"Run with -formatZK flag to initialize ZooKeeper.\");\n      return ERR_CODE_NO_PARENT_ZNODE;\n    }\n\n    try {\n      localTarget.checkFencingConfigured();\n    } catch (BadFencingConfigurationException e) {\n      LOG.fatal(\"Fencing is not configured for \" + localTarget + \".\\n\" +\n          \"You must configure a fencing method before using automatic \" +\n          \"failover.\", e);\n      return ERR_CODE_NO_FENCER;\n    }\n\n    initHM();\n    mainLoop();\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ZKFailoverController.java"
    }
  }
}