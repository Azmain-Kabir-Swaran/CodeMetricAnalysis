{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "convertLastBlockToUnderConstruction",
  "functionId": "convertLastBlockToUnderConstruction___bc-BlockCollection__bytesToRemove-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1262,
  "functionEndLine": 1306,
  "numCommitsSeen": 856,
  "timeTaken": 26871,
  "changeHistory": [
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
    "8c84a2a93c22a93b4ff46dd917f6efb995675fbd",
    "5865fe2bf01284993572ea60b3ec3bf8b4492818",
    "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
    "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
    "5411dc559d5f73e4153e76fdff94a26869c17a37",
    "164cbe643988f878f0f4100a4de51783e5b6738e",
    "e535e0f05b5fbd087c93238deb888cc985254b4c",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
    "5956d23b645e272748e2edca4c30231e729b96a9",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "abf833a7b228fff2bca4f69cd9df99d532380038",
    "1e1e93040748231dc913190aec1e031c379d8271",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b",
    "36e4cd3be6f7fec8db82d3d1bcb258af470ece2e",
    "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "08ac06283a3e9bf0d49d873823aabd419b08e41f",
    "9a0fcae5bc9e481201e101c3c98e23b6e827774e",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "35ec20b7c63566fe0830dc1118c9d1da257939a7",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd",
    "f0f9a3631fe4950f5cf548f192226836925d0f05",
    "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
    "513f17d115564e49124bb744cecf36d16a144ffc",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "371f4a59059322000a40eb4bdf5386b96b626ece",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": "Ybodychange",
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": "Ybodychange",
    "8c84a2a93c22a93b4ff46dd917f6efb995675fbd": "Ybodychange",
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": "Ybodychange",
    "32d043d9c5f4615058ea4f65a58ba271ba47fcb5": "Ybodychange",
    "a49cc74b4c72195dee1dfb6f9548e5e411dff553": "Ybodychange",
    "5411dc559d5f73e4153e76fdff94a26869c17a37": "Ybodychange",
    "164cbe643988f878f0f4100a4de51783e5b6738e": "Ybodychange",
    "e535e0f05b5fbd087c93238deb888cc985254b4c": "Ybodychange",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": "Ybodychange",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": "Ybodychange",
    "5956d23b645e272748e2edca4c30231e729b96a9": "Ybodychange",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": "Ybodychange",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Ybodychange",
    "abf833a7b228fff2bca4f69cd9df99d532380038": "Ybodychange",
    "1e1e93040748231dc913190aec1e031c379d8271": "Ybodychange",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ybodychange",
    "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b": "Ybodychange",
    "36e4cd3be6f7fec8db82d3d1bcb258af470ece2e": "Ybodychange",
    "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca": "Ybodychange",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ybodychange",
    "08ac06283a3e9bf0d49d873823aabd419b08e41f": "Ymultichange(Yparameterchange,Ybodychange)",
    "9a0fcae5bc9e481201e101c3c98e23b6e827774e": "Ybodychange",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Yparameterchange",
    "35ec20b7c63566fe0830dc1118c9d1da257939a7": "Ybodychange",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0f9a3631fe4950f5cf548f192226836925d0f05": "Yparameterchange",
    "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": "Ybodychange",
    "513f17d115564e49124bb744cecf36d16a144ffc": "Ybodychange",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "371f4a59059322000a40eb4bdf5386b96b626ece": "Ybodychange",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Ymultichange(Yfilerename,Ymodifierchange)",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Ymultichange(Yfilerename,Ymodifierchange)",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Ymultichange(Yfilerename,Ymodifierchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "05/12/17 8:48 PM",
      "commitNameOld": "56b1ff80dd9fbcde8d21a604eff0babb3a16418f",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 9.88,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from reconstruction queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n     neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n         replicas.readOnlyReplicas(),\n         replicas.outOfServiceReplicas(), getExpectedRedundancyNum(lastBlock));\n     pendingReconstruction.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     bmSafeMode.adjustBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n-    return createLocatedBlock(lastBlock, pos,\n+    return createLocatedBlock(null, lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from reconstruction queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.outOfServiceReplicas(), getExpectedRedundancyNum(lastBlock));\n    pendingReconstruction.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    bmSafeMode.adjustBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(null, lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "b61fb267b92b2736920b4bd0c673d31e7632ebb9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9390. Block management for maintenance states.\n",
      "commitDate": "17/10/16 5:45 PM",
      "commitName": "b61fb267b92b2736920b4bd0c673d31e7632ebb9",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "14/10/16 6:13 PM",
      "commitNameOld": "391ce535a739dc92cb90017d759217265a4fd969",
      "commitAuthorOld": "Vinitha Reddy Gankidi",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from reconstruction queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n     neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n         replicas.readOnlyReplicas(),\n-        replicas.decommissionedAndDecommissioning(), getRedundancy(lastBlock));\n+        replicas.outOfServiceReplicas(), getExpectedRedundancyNum(lastBlock));\n     pendingReconstruction.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     bmSafeMode.adjustBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n     return createLocatedBlock(lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from reconstruction queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.outOfServiceReplicas(), getExpectedRedundancyNum(lastBlock));\n    pendingReconstruction.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    bmSafeMode.adjustBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "8c84a2a93c22a93b4ff46dd917f6efb995675fbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10236. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-3]. Contributed by Rakesh R.\n",
      "commitDate": "26/05/16 4:50 PM",
      "commitName": "8c84a2a93c22a93b4ff46dd917f6efb995675fbd",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "28/04/16 10:44 AM",
      "commitNameOld": "6243eabb48390fffada2418ade5adf9e0766afbe",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 28.25,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from reconstruction queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n     neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n         replicas.readOnlyReplicas(),\n-        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n+        replicas.decommissionedAndDecommissioning(), getRedundancy(lastBlock));\n     pendingReconstruction.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     bmSafeMode.adjustBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n     return createLocatedBlock(lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from reconstruction queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.decommissionedAndDecommissioning(), getRedundancy(lastBlock));\n    pendingReconstruction.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    bmSafeMode.adjustBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.\n",
      "commitDate": "25/04/16 10:01 PM",
      "commitName": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "17/04/16 6:28 PM",
      "commitNameOld": "67523ffcf491f4f2db5335899c00a174d0caaa9b",
      "commitAuthorOld": "Walter Su",
      "daysBetweenCommits": 8.15,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from reconstruction queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n     neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n         replicas.readOnlyReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n-    pendingReplications.remove(lastBlock);\n+    pendingReconstruction.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     bmSafeMode.adjustBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n     return createLocatedBlock(lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from reconstruction queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n    pendingReconstruction.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    bmSafeMode.adjustBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "32d043d9c5f4615058ea4f65a58ba271ba47fcb5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9857. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-1]. Contributed by Rakesh R.\n",
      "commitDate": "16/03/16 4:53 PM",
      "commitName": "32d043d9c5f4615058ea4f65a58ba271ba47fcb5",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "10/03/16 7:03 PM",
      "commitNameOld": "e01c6ea688e62f25c4310e771a0cd85b53a5fb87",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n-    // Remove block from replication queue.\n+    // Remove block from reconstruction queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n-    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n+    neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n         replicas.readOnlyReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n     pendingReplications.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     bmSafeMode.adjustBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n     return createLocatedBlock(lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from reconstruction queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReconstruction.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n    pendingReplications.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    bmSafeMode.adjustBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "a49cc74b4c72195dee1dfb6f9548e5e411dff553": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9129. Move the safemode block count into BlockManager. Contributed by Mingliang Liu.\n",
      "commitDate": "01/12/15 4:09 PM",
      "commitName": "a49cc74b4c72195dee1dfb6f9548e5e411dff553",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "01/12/15 1:05 PM",
      "commitNameOld": "830eb252aaa4fec7ef2ec38cb66f669e8e1ecaa5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n     neededReplications.remove(lastBlock, replicas.liveReplicas(),\n         replicas.readOnlyReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n     pendingReplications.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n-    namesystem.adjustSafeModeBlockTotals(\n+    bmSafeMode.adjustBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n     return createLocatedBlock(lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n    pendingReplications.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    bmSafeMode.adjustBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "5411dc559d5f73e4153e76fdff94a26869c17a37": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9205. Do not schedule corrupt blocks for replication.  (szetszwo)\n",
      "commitDate": "15/10/15 3:07 AM",
      "commitName": "5411dc559d5f73e4153e76fdff94a26869c17a37",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "14/10/15 4:17 PM",
      "commitNameOld": "be7a0add8b6561d3c566237cc0370b06e7f32bb4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if (lastBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n     }\n     assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n     // convert the last block to under construction. note no block replacement\n     // is happening\n     bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(lastBlock);\n     neededReplications.remove(lastBlock, replicas.liveReplicas(),\n+        replicas.readOnlyReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n     pendingReplications.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(\n         getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - lastBlock.getNumBytes();\n     return createLocatedBlock(lastBlock, pos,\n         BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n        replicas.readOnlyReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n    pendingReplications.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "164cbe643988f878f0f4100a4de51783e5b6738e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/15 1:02 AM",
      "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
      "commitAuthor": "Walter Su",
      "commitDateOld": "24/08/15 12:59 PM",
      "commitNameOld": "6b6a63bbbda920315d3d24b61ed3344a78a981b6",
      "commitAuthorOld": "",
      "daysBetweenCommits": 2.5,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n-    BlockInfo oldBlock \u003d bc.getLastBlock();\n-    if(oldBlock \u003d\u003d null ||\n-       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n+    BlockInfo lastBlock \u003d bc.getLastBlock();\n+    if(lastBlock \u003d\u003d null ||\n+       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove)\n       return null;\n-    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n+    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n-    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n+    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n-    // convert the last block to UC\n-    bc.convertLastBlockToUC(oldBlock, targets);\n-    // get the new created uc block\n-    BlockInfo ucBlock \u003d bc.getLastBlock();\n-    blocksMap.replaceBlock(ucBlock);\n+    // convert the last block to under construction. note no block replacement\n+    // is happening\n+    bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from replication queue.\n-    NumberReplicas replicas \u003d countNodes(ucBlock);\n-    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n-        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n-    pendingReplications.remove(ucBlock);\n+    NumberReplicas replicas \u003d countNodes(lastBlock);\n+    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n+        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n+    pendingReplications.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n-      final Block b \u003d getBlockOnStorage(oldBlock, storage);\n+      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n       if (b !\u003d null) {\n         invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n       }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n-        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n+        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n-    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n-    final long pos \u003d fileLength - ucBlock.getNumBytes();\n-    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n+    final long fileLength \u003d bc.computeContentSummary(\n+        getStoragePolicySuite()).getLength();\n+    final long pos \u003d fileLength - lastBlock.getNumBytes();\n+    return createLocatedBlock(lastBlock, pos,\n+        BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n    pendingReplications.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(lastBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(lastBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "e535e0f05b5fbd087c93238deb888cc985254b4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
      "commitDate": "17/08/15 11:28 AM",
      "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 11.05,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n-    BlockInfo oldBlock \u003d bc.getLastBlock();\n-    if(oldBlock \u003d\u003d null ||\n-       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n+    BlockInfo lastBlock \u003d bc.getLastBlock();\n+    if (lastBlock \u003d\u003d null ||\n+       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n       return null;\n-    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n+    }\n+    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n       \"last block of the file is not in blocksMap\";\n \n-    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n+    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n \n-    BlockInfoContiguousUnderConstruction ucBlock \u003d\n-        bc.setLastBlock(oldBlock, targets);\n-    blocksMap.replaceBlock(ucBlock);\n+    // convert the last block to under construction. note no block replacement\n+    // is happening\n+    bc.convertLastBlockToUC(lastBlock, targets);\n \n     // Remove block from replication queue.\n-    NumberReplicas replicas \u003d countNodes(ucBlock);\n-    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n-        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n-    pendingReplications.remove(ucBlock);\n+    NumberReplicas replicas \u003d countNodes(lastBlock);\n+    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n+        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n+    pendingReplications.remove(lastBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n-      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n+      invalidateBlocks.remove(storage.getDatanodeDescriptor(), lastBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n-    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n-    final long pos \u003d fileLength - ucBlock.getNumBytes();\n-    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n+    final long fileLength \u003d bc.computeContentSummary(\n+        getStoragePolicySuite()).getLength();\n+    final long pos \u003d fileLength - lastBlock.getNumBytes();\n+    return createLocatedBlock(lastBlock, pos,\n+        BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d lastBlock.getNumBytes() - bytesToRemove) {\n      return null;\n    }\n    assert lastBlock \u003d\u003d getStoredBlock(lastBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(lastBlock);\n\n    // convert the last block to under construction. note no block replacement\n    // is happening\n    bc.convertLastBlockToUC(lastBlock, targets);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(lastBlock);\n    neededReplications.remove(lastBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(lastBlock));\n    pendingReplications.remove(lastBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), lastBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(\n        getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - lastBlock.getNumBytes();\n    return createLocatedBlock(lastBlock, pos,\n        BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n-    BlockInfoUnderConstruction ucBlock \u003d\n+    BlockInfoContiguousUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\"\n\nThis reverts commit de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "31/07/15 4:15 PM",
      "commitNameOld": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n-        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n+        targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "5956d23b645e272748e2edca4c30231e729b96a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8781. Erasure Coding: Correctly handle BlockManager#InvalidateBlocks for striped block. Contributed by Yi Liu.\n",
      "commitDate": "21/07/15 5:00 PM",
      "commitName": "5956d23b645e272748e2edca4c30231e729b96a9",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "19/07/15 7:18 PM",
      "commitNameOld": "06394e37601186d2bcff49ccea00712fda9b3579",
      "commitAuthorOld": "Walter Su",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     // convert the last block to UC\n     bc.convertLastBlockToUC(oldBlock, targets);\n     // get the new created uc block\n     BlockInfo ucBlock \u003d bc.getLastBlock();\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n-      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n+      final Block b \u003d getBlockOnStorage(oldBlock, storage);\n+      if (b !\u003d null) {\n+        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n+      }\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    // convert the last block to UC\n    bc.convertLastBlockToUC(oldBlock, targets);\n    // get the new created uc block\n    BlockInfo ucBlock \u003d bc.getLastBlock();\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      final Block b \u003d getBlockOnStorage(oldBlock, storage);\n      if (b !\u003d null) {\n        invalidateBlocks.remove(storage.getDatanodeDescriptor(), b);\n      }\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\n",
      "commitDate": "26/06/15 10:49 AM",
      "commitName": "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/06/15 2:42 PM",
      "commitNameOld": "afe9ea3c12e1f5a71922400eadb642960bc87ca1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n-        targets.length \u003e\u003d minReplication ? -1 : 0,\n+        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
      "commitDate": "12/06/15 11:38 AM",
      "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:17 AM",
      "commitNameOld": "12b5b06c063d93e6c683c9b6fac9a96912f59e59",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n-    BlockInfoContiguousUnderConstruction ucBlock \u003d\n+    BlockInfoUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/05/15 11:05 AM",
      "commitNameOld": "8860e352c394372e4eb3ebdf82ea899567f34e4e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n-    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n+    BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoContiguousUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "abf833a7b228fff2bca4f69cd9df99d532380038": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7907. Erasure Coding: track invalid, corrupt, and under-recovery striped blocks in NameNode. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:43 AM",
      "commitName": "abf833a7b228fff2bca4f69cd9df99d532380038",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:43 AM",
      "commitNameOld": "ea2e60fbcc79c65ec571224bd3f57c262a5d9114",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     // convert the last block to UC\n     bc.convertLastBlockToUC(oldBlock, targets);\n     // get the new created uc block\n     BlockInfo ucBlock \u003d bc.getLastBlock();\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n-        checkMinStorage(oldBlock, targets.length) ? -1 : 0,\n+        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    // convert the last block to UC\n    bc.convertLastBlockToUC(oldBlock, targets);\n    // get the new created uc block\n    BlockInfo ucBlock \u003d bc.getLastBlock();\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        hasMinStorage(oldBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "1e1e93040748231dc913190aec1e031c379d8271": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7837. Erasure Coding: allocate and persist striped blocks in NameNode. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "1e1e93040748231dc913190aec1e031c379d8271",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:07 AM",
      "commitNameOld": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     // convert the last block to UC\n     bc.convertLastBlockToUC(oldBlock, targets);\n     // get the new created uc block\n     BlockInfo ucBlock \u003d bc.getLastBlock();\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n-        targets.length \u003e\u003d minReplication ? -1 : 0,\n+        checkMinStorage(oldBlock, targets.length) ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    // convert the last block to UC\n    bc.convertLastBlockToUC(oldBlock, targets);\n    // get the new created uc block\n    BlockInfo ucBlock \u003d bc.getLastBlock();\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        checkMinStorage(oldBlock, targets.length) ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:07 AM",
      "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n-    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n+    BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n-    BlockInfoContiguousUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock,\n-        targets);\n+    // convert the last block to UC\n+    bc.convertLastBlockToUC(oldBlock, targets);\n+    // get the new created uc block\n+    BlockInfo ucBlock \u003d bc.getLastBlock();\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    // convert the last block to UC\n    bc.convertLastBlockToUC(oldBlock, targets);\n    // get the new created uc block\n    BlockInfo ucBlock \u003d bc.getLastBlock();\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7933. fsck should also report decommissioning replicas. Contributed by Xiaoyu Yao.\n",
      "commitDate": "11/04/15 1:23 PM",
      "commitName": "f8f5887209a7d8e53c0a77abef275cbcaf1f7a5b",
      "commitAuthor": "cnauroth",
      "commitDateOld": "10/04/15 4:36 PM",
      "commitNameOld": "36e4cd3be6f7fec8db82d3d1bcb258af470ece2e",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoContiguousUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n-        replicas.decommissionedReplicas(), getReplication(ucBlock));\n+        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedAndDecommissioning(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "36e4cd3be6f7fec8db82d3d1bcb258af470ece2e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8103. Move BlockTokenSecretManager.AccessMode into BlockTokenIdentifier. Contributed by Haohui Mai.\n",
      "commitDate": "10/04/15 4:36 PM",
      "commitName": "36e4cd3be6f7fec8db82d3d1bcb258af470ece2e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/04/15 4:09 PM",
      "commitNameOld": "5a540c3d3107199f4632e2ad7ee8ff913b107a04",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoContiguousUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n-    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n+    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, BlockTokenIdentifier.AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7824. GetContentSummary API and its namenode implementation for Storage Type Quota/Usage. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "26/03/15 10:24 AM",
      "commitName": "3d0708bdb0a75af3d87bbac9f6c4ffbcabab98ca",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "23/03/15 10:00 PM",
      "commitNameOld": "50ee8f4e67a66aa77c5359182f61f3e951844db6",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.52,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoContiguousUnderConstruction ucBlock \u003d\n         bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n-    final long fileLength \u003d bc.computeContentSummary().getLength();\n+    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary(getStoragePolicySuite()).getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/02/15 11:31 AM",
      "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.01,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc, long bytesToRemove) throws IOException {\n-    BlockInfo oldBlock \u003d bc.getLastBlock();\n+    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n-    BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n+    BlockInfoContiguousUnderConstruction ucBlock \u003d\n+        bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfoContiguous oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoContiguousUnderConstruction ucBlock \u003d\n        bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "08ac06283a3e9bf0d49d873823aabd419b08e41f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7056. Snapshot support for truncate. Contributed by Konstantin Shvachko and Plamen Jeliazkov.",
      "commitDate": "13/01/15 12:24 AM",
      "commitName": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
      "commitAuthor": "Konstantin V Shvachko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7056. Snapshot support for truncate. Contributed by Konstantin Shvachko and Plamen Jeliazkov.",
          "commitDate": "13/01/15 12:24 AM",
          "commitName": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "16/12/14 8:30 AM",
          "commitNameOld": "b7923a356e9f111619375b94d12749d634069347",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 27.66,
          "commitsBetweenForRepo": 133,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n-      BlockCollection bc) throws IOException {\n+      BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n-        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n+       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[bc-BlockCollection]",
            "newValue": "[bc-BlockCollection, bytesToRemove-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7056. Snapshot support for truncate. Contributed by Konstantin Shvachko and Plamen Jeliazkov.",
          "commitDate": "13/01/15 12:24 AM",
          "commitName": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "16/12/14 8:30 AM",
          "commitNameOld": "b7923a356e9f111619375b94d12749d634069347",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 27.66,
          "commitsBetweenForRepo": 133,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n-      BlockCollection bc) throws IOException {\n+      BlockCollection bc, long bytesToRemove) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n-        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n+       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n       invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc, long bytesToRemove) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n       bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes() - bytesToRemove)\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "9a0fcae5bc9e481201e101c3c98e23b6e827774e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6362. InvalidateBlocks is inconsistent in usage of DatanodeUuid and StorageID. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595056 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/14 2:30 PM",
      "commitName": "9a0fcae5bc9e481201e101c3c98e23b6e827774e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "13/05/14 11:22 AM",
      "commitNameOld": "8e5b5165c14486af6d5d73e7b4e591d4787ad8f2",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       BlockCollection bc) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeStorageInfo storage : targets) {\n-      invalidateBlocks.remove(storage.getStorageID(), oldBlock);\n+      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeStorageInfo[] targets \u003d getStorages(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeStorageInfo storage : targets) {\n      invalidateBlocks.remove(storage.getDatanodeDescriptor(), oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/11/13 8:18 PM",
      "commitNameOld": "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 3.89,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n-      MutableBlockCollection bc) throws IOException {\n+      BlockCollection bc) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     NumberReplicas replicas \u003d countNodes(ucBlock);\n     neededReplications.remove(ucBlock, replicas.liveReplicas(),\n         replicas.decommissionedReplicas(), getReplication(ucBlock));\n     pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      BlockCollection bc) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[bc-MutableBlockCollection]",
        "newValue": "[bc-BlockCollection]"
      }
    },
    "35ec20b7c63566fe0830dc1118c9d1da257939a7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4022. Replication not happening for appended block. Contributed by Vinay.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1400578 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/12 11:31 PM",
      "commitName": "35ec20b7c63566fe0830dc1118c9d1da257939a7",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "18/10/12 9:55 PM",
      "commitNameOld": "0603447f2a9db7a5a40850de9ba85837ec4940aa",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 2.07,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       MutableBlockCollection bc) throws IOException {\n     BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n-    updateNeededReplications(oldBlock, 0, 0);\n+    NumberReplicas replicas \u003d countNodes(ucBlock);\n+    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n+        replicas.decommissionedReplicas(), getReplication(ucBlock));\n+    pendingReplications.remove(ucBlock);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      MutableBlockCollection bc) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    NumberReplicas replicas \u003d countNodes(ucBlock);\n    neededReplications.remove(ucBlock, replicas.liveReplicas(),\n        replicas.decommissionedReplicas(), getReplication(ucBlock));\n    pendingReplications.remove(ucBlock);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/12 2:41 PM",
      "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/05/12 2:41 PM",
          "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/05/12 2:59 AM",
          "commitNameOld": "f1ff05bf47a7dfb670bc63e4e6e58d74f6b5b4a7",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n-      MutableBlockCollection fileINode) throws IOException {\n-    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n+      MutableBlockCollection bc) throws IOException {\n+    BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n-        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n+        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n-      fileINode.setLastBlock(oldBlock, targets);\n+      bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n-    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n+    final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      MutableBlockCollection bc) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[fileINode-MutableBlockCollection]",
            "newValue": "[bc-MutableBlockCollection]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/05/12 2:41 PM",
          "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/05/12 2:59 AM",
          "commitNameOld": "f1ff05bf47a7dfb670bc63e4e6e58d74f6b5b4a7",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n-      MutableBlockCollection fileINode) throws IOException {\n-    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n+      MutableBlockCollection bc) throws IOException {\n+    BlockInfo oldBlock \u003d bc.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n-        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n+        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n-      fileINode.setLastBlock(oldBlock, targets);\n+      bc.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n-    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n+    final long fileLength \u003d bc.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      MutableBlockCollection bc) throws IOException {\n    BlockInfo oldBlock \u003d bc.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        bc.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      bc.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d bc.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0f9a3631fe4950f5cf548f192226836925d0f05": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-3363. Define BlockCollection and MutableBlockCollection interfaces so that INodeFile and INodeFileUnderConstruction do not have to be used in block management.  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/12 5:06 PM",
      "commitName": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/05/12 4:02 PM",
      "commitNameOld": "8620a99d1eea163b7505cde0a57e849b1b2a3a6f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n-      INodeFileUnderConstruction fileINode) throws IOException {\n+      MutableBlockCollection fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n     \n     // Adjust safe-mode totals, since under-construction blocks don\u0027t\n     // count in safe-mode.\n     namesystem.adjustSafeModeBlockTotals(\n         // decrement safe if we had enough\n         targets.length \u003e\u003d minReplication ? -1 : 0,\n         // always decrement total blocks\n         -1);\n \n     final long fileLength \u003d fileINode.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      MutableBlockCollection fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[fileINode-INodeFileUnderConstruction]",
        "newValue": "[fileINode-MutableBlockCollection]"
      }
    },
    "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2742. HA: observed dataloss in replication stress test. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238940 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/12 9:16 PM",
      "commitName": "cf611255d6fcd7016e0ce2a3f80ccd0d4e051d9f",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "30/01/12 11:16 AM",
      "commitNameOld": "846f97312c6db7b84b7401174acd0fc943baa093",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,36 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n+    \n+    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n+    // count in safe-mode.\n+    namesystem.adjustSafeModeBlockTotals(\n+        // decrement safe if we had enough\n+        targets.length \u003e\u003d minReplication ? -1 : 0,\n+        // always decrement total blocks\n+        -1);\n \n     final long fileLength \u003d fileINode.computeContentSummary().getLength();\n     final long pos \u003d fileLength - ucBlock.getNumBytes();\n     return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n    \n    // Adjust safe-mode totals, since under-construction blocks don\u0027t\n    // count in safe-mode.\n    namesystem.adjustSafeModeBlockTotals(\n        // decrement safe if we had enough\n        targets.length \u003e\u003d minReplication ? -1 : 0,\n        // always decrement total blocks\n        -1);\n\n    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n\n    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 4:14 PM",
      "commitName": "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/08/11 3:28 PM",
      "commitNameOld": "513f17d115564e49124bb744cecf36d16a144ffc",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n \n-    long fileLength \u003d fileINode.computeContentSummary().getLength();\n-    return createLocatedBlock(ucBlock, fileLength - ucBlock.getNumBytes());\n+    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n+    final long pos \u003d fileLength - ucBlock.getNumBytes();\n+    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n\n    final long fileLength \u003d fileINode.computeContentSummary().getLength();\n    final long pos \u003d fileLength - ucBlock.getNumBytes();\n    return createLocatedBlock(ucBlock, pos, AccessMode.WRITE);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "513f17d115564e49124bb744cecf36d16a144ffc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2273.  Refactor BlockManager.recentInvalidateSets to a new class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 3:28 PM",
      "commitName": "513f17d115564e49124bb744cecf36d16a144ffc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/08/11 10:36 AM",
      "commitNameOld": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n-      removeFromInvalidates(datanodeId, oldBlock);\n+      invalidateBlocks.remove(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return createLocatedBlock(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      invalidateBlocks.remove(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return createLocatedBlock(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return createLocatedBlock(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "371f4a59059322000a40eb4bdf5386b96b626ece": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2228. Move block and datanode code from FSNamesystem to BlockManager and DatanodeManager.  (szetszwo)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/11 3:06 AM",
      "commitName": "371f4a59059322000a40eb4bdf5386b96b626ece",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/08/11 3:55 PM",
      "commitNameOld": "7fac946ac983e31613fd62836c8ac9c4a579210a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n-    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n+    return createLocatedBlock(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return createLocatedBlock(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  LocatedBlock convertLastBlockToUnderConstruction(\n+  public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  LocatedBlock convertLastBlockToUnderConstruction(\n+  public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  public LocatedBlock convertLastBlockToUnderConstruction(\n+  LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  public LocatedBlock convertLastBlockToUnderConstruction(\n+  LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        }
      ]
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  LocatedBlock convertLastBlockToUnderConstruction(\n+  public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  LocatedBlock convertLastBlockToUnderConstruction(\n+  public LocatedBlock convertLastBlockToUnderConstruction(\n       INodeFileUnderConstruction fileINode) throws IOException {\n     BlockInfo oldBlock \u003d fileINode.getLastBlock();\n     if(oldBlock \u003d\u003d null ||\n         fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n       return null;\n     assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n       \"last block of the file is not in blocksMap\";\n \n     DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n \n     BlockInfoUnderConstruction ucBlock \u003d\n       fileINode.setLastBlock(oldBlock, targets);\n     blocksMap.replaceBlock(ucBlock);\n \n     // Remove block from replication queue.\n     updateNeededReplications(oldBlock, 0, 0);\n \n     // remove this block from the list of pending blocks to be deleted. \n     for (DatanodeDescriptor dd : targets) {\n       String datanodeId \u003d dd.getStorageID();\n       removeFromInvalidates(datanodeId, oldBlock);\n     }\n \n     long fileLength \u003d fileINode.computeContentSummary().getLength();\n     return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,27 @@\n+  LocatedBlock convertLastBlockToUnderConstruction(\n+      INodeFileUnderConstruction fileINode) throws IOException {\n+    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n+    if(oldBlock \u003d\u003d null ||\n+        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n+      return null;\n+    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n+      \"last block of the file is not in blocksMap\";\n+\n+    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n+\n+    BlockInfoUnderConstruction ucBlock \u003d\n+      fileINode.setLastBlock(oldBlock, targets);\n+    blocksMap.replaceBlock(ucBlock);\n+\n+    // Remove block from replication queue.\n+    updateNeededReplications(oldBlock, 0, 0);\n+\n+    // remove this block from the list of pending blocks to be deleted. \n+    for (DatanodeDescriptor dd : targets) {\n+      String datanodeId \u003d dd.getStorageID();\n+      removeFromInvalidates(datanodeId, oldBlock);\n+    }\n+\n+    long fileLength \u003d fileINode.computeContentSummary().getLength();\n+    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  LocatedBlock convertLastBlockToUnderConstruction(\n      INodeFileUnderConstruction fileINode) throws IOException {\n    BlockInfo oldBlock \u003d fileINode.getLastBlock();\n    if(oldBlock \u003d\u003d null ||\n        fileINode.getPreferredBlockSize() \u003d\u003d oldBlock.getNumBytes())\n      return null;\n    assert oldBlock \u003d\u003d getStoredBlock(oldBlock) :\n      \"last block of the file is not in blocksMap\";\n\n    DatanodeDescriptor[] targets \u003d getNodes(oldBlock);\n\n    BlockInfoUnderConstruction ucBlock \u003d\n      fileINode.setLastBlock(oldBlock, targets);\n    blocksMap.replaceBlock(ucBlock);\n\n    // Remove block from replication queue.\n    updateNeededReplications(oldBlock, 0, 0);\n\n    // remove this block from the list of pending blocks to be deleted. \n    for (DatanodeDescriptor dd : targets) {\n      String datanodeId \u003d dd.getStorageID();\n      removeFromInvalidates(datanodeId, oldBlock);\n    }\n\n    long fileLength \u003d fileINode.computeContentSummary().getLength();\n    return getBlockLocation(ucBlock, fileLength - ucBlock.getNumBytes());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
    }
  }
}