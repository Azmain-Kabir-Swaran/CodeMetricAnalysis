{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceFairnessPolicy.java",
  "functionName": "getHeadroom",
  "functionId": "getHeadroom___queueFairShare-Resource__queueUsage-Resource__maxAvailable-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java",
  "functionStartLine": 106,
  "functionEndLine": 118,
  "numCommitsSeen": 27,
  "timeTaken": 2953,
  "changeHistory": [
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
    "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd"
  ],
  "changeHistoryShort": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "8f82970e0c247b37b2bf33aa21f6a39afa07efde": "Ymultichange(Yparameterchange,Ybodychange)",
    "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "14/07/15 12:23 AM",
      "commitNameOld": "ac94ba3e185115b83351e35c610c2b8ff91b1ebc",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 320.35,
      "commitsBetweenForRepo": 2116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n                               Resource maxAvailable) {\n-    int queueAvailableMemory \u003d\n-        Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n+    long queueAvailableMemory \u003d\n+        Math.max(queueFairShare.getMemorySize() - queueUsage.getMemorySize(), 0);\n     int queueAvailableCPU \u003d\n         Math.max(queueFairShare.getVirtualCores() - queueUsage\n             .getVirtualCores(), 0);\n     Resource headroom \u003d Resources.createResource(\n-        Math.min(maxAvailable.getMemory(), queueAvailableMemory),\n+        Math.min(maxAvailable.getMemorySize(), queueAvailableMemory),\n         Math.min(maxAvailable.getVirtualCores(),\n             queueAvailableCPU));\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n                              Resource maxAvailable) {\n    long queueAvailableMemory \u003d\n        Math.max(queueFairShare.getMemorySize() - queueUsage.getMemorySize(), 0);\n    int queueAvailableCPU \u003d\n        Math.max(queueFairShare.getVirtualCores() - queueUsage\n            .getVirtualCores(), 0);\n    Resource headroom \u003d Resources.createResource(\n        Math.min(maxAvailable.getMemorySize(), queueAvailableMemory),\n        Math.min(maxAvailable.getVirtualCores(),\n            queueAvailableCPU));\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java",
      "extendedDetails": {}
    },
    "8f82970e0c247b37b2bf33aa21f6a39afa07efde": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3485. FairScheduler headroom calculation doesn\u0027t consider maxResources for Fifo and FairShare policies. (kasha)\n",
      "commitDate": "28/04/15 9:00 PM",
      "commitName": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3485. FairScheduler headroom calculation doesn\u0027t consider maxResources for Fifo and FairShare policies. (kasha)\n",
          "commitDate": "28/04/15 9:00 PM",
          "commitName": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "22/09/14 11:49 PM",
          "commitNameOld": "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 217.88,
          "commitsBetweenForRepo": 1817,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n   public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n-                              Resource clusterAvailable) {\n+                              Resource maxAvailable) {\n     int queueAvailableMemory \u003d\n         Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n     int queueAvailableCPU \u003d\n         Math.max(queueFairShare.getVirtualCores() - queueUsage\n             .getVirtualCores(), 0);\n     Resource headroom \u003d Resources.createResource(\n-        Math.min(clusterAvailable.getMemory(), queueAvailableMemory),\n-        Math.min(clusterAvailable.getVirtualCores(),\n+        Math.min(maxAvailable.getMemory(), queueAvailableMemory),\n+        Math.min(maxAvailable.getVirtualCores(),\n             queueAvailableCPU));\n     return headroom;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n                              Resource maxAvailable) {\n    int queueAvailableMemory \u003d\n        Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n    int queueAvailableCPU \u003d\n        Math.max(queueFairShare.getVirtualCores() - queueUsage\n            .getVirtualCores(), 0);\n    Resource headroom \u003d Resources.createResource(\n        Math.min(maxAvailable.getMemory(), queueAvailableMemory),\n        Math.min(maxAvailable.getVirtualCores(),\n            queueAvailableCPU));\n    return headroom;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java",
          "extendedDetails": {
            "oldValue": "[queueFairShare-Resource, queueUsage-Resource, clusterAvailable-Resource]",
            "newValue": "[queueFairShare-Resource, queueUsage-Resource, maxAvailable-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3485. FairScheduler headroom calculation doesn\u0027t consider maxResources for Fifo and FairShare policies. (kasha)\n",
          "commitDate": "28/04/15 9:00 PM",
          "commitName": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "22/09/14 11:49 PM",
          "commitNameOld": "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 217.88,
          "commitsBetweenForRepo": 1817,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n   public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n-                              Resource clusterAvailable) {\n+                              Resource maxAvailable) {\n     int queueAvailableMemory \u003d\n         Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n     int queueAvailableCPU \u003d\n         Math.max(queueFairShare.getVirtualCores() - queueUsage\n             .getVirtualCores(), 0);\n     Resource headroom \u003d Resources.createResource(\n-        Math.min(clusterAvailable.getMemory(), queueAvailableMemory),\n-        Math.min(clusterAvailable.getVirtualCores(),\n+        Math.min(maxAvailable.getMemory(), queueAvailableMemory),\n+        Math.min(maxAvailable.getVirtualCores(),\n             queueAvailableCPU));\n     return headroom;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n                              Resource maxAvailable) {\n    int queueAvailableMemory \u003d\n        Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n    int queueAvailableCPU \u003d\n        Math.max(queueFairShare.getVirtualCores() - queueUsage\n            .getVirtualCores(), 0);\n    Resource headroom \u003d Resources.createResource(\n        Math.min(maxAvailable.getMemory(), queueAvailableMemory),\n        Math.min(maxAvailable.getVirtualCores(),\n            queueAvailableCPU));\n    return headroom;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1959. Fix headroom calculation in FairScheduler. (Anubhav Dhoot via kasha)\n",
      "commitDate": "22/09/14 11:49 PM",
      "commitName": "568d3dc2bbe43b7d2833d5da2b0e6d75eb86e5dd",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,13 @@\n+  public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n+                              Resource clusterAvailable) {\n+    int queueAvailableMemory \u003d\n+        Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n+    int queueAvailableCPU \u003d\n+        Math.max(queueFairShare.getVirtualCores() - queueUsage\n+            .getVirtualCores(), 0);\n+    Resource headroom \u003d Resources.createResource(\n+        Math.min(clusterAvailable.getMemory(), queueAvailableMemory),\n+        Math.min(clusterAvailable.getVirtualCores(),\n+            queueAvailableCPU));\n+    return headroom;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom(Resource queueFairShare, Resource queueUsage,\n                              Resource clusterAvailable) {\n    int queueAvailableMemory \u003d\n        Math.max(queueFairShare.getMemory() - queueUsage.getMemory(), 0);\n    int queueAvailableCPU \u003d\n        Math.max(queueFairShare.getVirtualCores() - queueUsage\n            .getVirtualCores(), 0);\n    Resource headroom \u003d Resources.createResource(\n        Math.min(clusterAvailable.getMemory(), queueAvailableMemory),\n        Math.min(clusterAvailable.getVirtualCores(),\n            queueAvailableCPU));\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java"
    }
  }
}