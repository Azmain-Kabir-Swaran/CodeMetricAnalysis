{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "setChildQueues",
  "functionId": "setChildQueues___childQueues-Collection__CSQueue__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 168,
  "functionEndLine": 255,
  "numCommitsSeen": 109,
  "timeTaken": 12033,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "5e798b1a0ddceeaf54703b94052501867156e979",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "5ed1fead6b5ec24bb0ce1a3db033c2ee1ede4bb4",
    "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
    "18a594257e052e8f10a03e5594e6cc6901dc56be",
    "4641196fe02af5cab3d56a9f3c78875c495dbe03",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "ab8fa651f736525c8e40229ee99859cee9c1ba33",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "f24dcb3449c77da665058427bc7fa480cad507fc",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "5e798b1a0ddceeaf54703b94052501867156e979": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5ed1fead6b5ec24bb0ce1a3db033c2ee1ede4bb4": "Ybodychange",
    "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d": "Ybodychange",
    "18a594257e052e8f10a03e5594e6cc6901dc56be": "Ybodychange",
    "4641196fe02af5cab3d56a9f3c78875c495dbe03": "Ymodifierchange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "ab8fa651f736525c8e40229ee99859cee9c1ba33": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "f24dcb3449c77da665058427bc7fa480cad507fc": "Ybodychange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 209.05,
      "commitsBetweenForRepo": 935,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     writeLock.lock();\n     try {\n       // Validate\n       float childCapacities \u003d 0;\n       Resource minResDefaultLabel \u003d Resources.createResource(0, 0);\n       for (CSQueue queue : childQueues) {\n         childCapacities +\u003d queue.getCapacity();\n         Resources.addTo(minResDefaultLabel, queue.getQueueResourceQuotas()\n             .getConfiguredMinResource());\n \n         // If any child queue is using percentage based capacity model vs parent\n         // queues\u0027 absolute configuration or vice versa, throw back an\n         // exception.\n         if (!queueName.equals(\"root\") \u0026\u0026 getCapacity() !\u003d 0f\n             \u0026\u0026 !queue.getQueueResourceQuotas().getConfiguredMinResource()\n                 .equals(Resources.none())) {\n-          throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n-              + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n+          throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueuePath()\n+              + \"\u0027 and child queue \u0027\" + queue.getQueuePath()\n               + \"\u0027 should use either percentage based capacity\"\n               + \" configuration or absolute resource together.\");\n         }\n       }\n \n       float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n       // allow capacities being set to 0, and enforce child 0 if parent is 0\n       if ((minResDefaultLabel.equals(Resources.none())\n           \u0026\u0026 (queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION))\n           || ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n         throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n             + childCapacities + \" for children of queue \" + queueName);\n       }\n       // check label capacities\n       for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n         float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n         // check children\u0027s labels\n         float sum \u003d 0;\n         Resource minRes \u003d Resources.createResource(0, 0);\n         Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodeLabel,\n             scheduler.getClusterResource());\n         for (CSQueue queue : childQueues) {\n           sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n \n           // If any child queue of a label is using percentage based capacity\n           // model vs parent queues\u0027 absolute configuration or vice versa, throw\n           // back an exception\n           if (!queueName.equals(\"root\") \u0026\u0026 !this.capacityConfigType\n               .equals(queue.getCapacityConfigType())) {\n-            throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n-                + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n+            throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueuePath()\n+                + \"\u0027 and child queue \u0027\" + queue.getQueuePath()\n                 + \"\u0027 should use either percentage based capacity\"\n                 + \"configuration or absolute resource together for label:\"\n                 + nodeLabel);\n           }\n \n           // Accumulate all min/max resource configured for all child queues.\n           Resources.addTo(minRes, queue.getQueueResourceQuotas()\n               .getConfiguredMinResource(nodeLabel));\n         }\n         if ((minResDefaultLabel.equals(Resources.none()) \u0026\u0026 capacityByLabel \u003e 0\n             \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n             || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n           throw new IllegalArgumentException(\n               \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                   + queueName + \" for label\u003d\" + nodeLabel);\n         }\n \n         // Ensure that for each parent queue: parent.min-resource \u003e\u003d\n         // ￎﾣ(child.min-resource).\n         Resource parentMinResource \u003d queueResourceQuotas\n             .getConfiguredMinResource(nodeLabel);\n         if (!parentMinResource.equals(Resources.none()) \u0026\u0026 Resources.lessThan(\n             resourceCalculator, resourceByLabel, parentMinResource, minRes)) {\n           throw new IllegalArgumentException(\"Parent Queues\" + \" capacity: \"\n               + parentMinResource + \" is less than\" + \" to its children:\"\n               + minRes + \" for queue:\" + queueName);\n         }\n       }\n \n       this.childQueues.clear();\n       this.childQueues.addAll(childQueues);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    writeLock.lock();\n    try {\n      // Validate\n      float childCapacities \u003d 0;\n      Resource minResDefaultLabel \u003d Resources.createResource(0, 0);\n      for (CSQueue queue : childQueues) {\n        childCapacities +\u003d queue.getCapacity();\n        Resources.addTo(minResDefaultLabel, queue.getQueueResourceQuotas()\n            .getConfiguredMinResource());\n\n        // If any child queue is using percentage based capacity model vs parent\n        // queues\u0027 absolute configuration or vice versa, throw back an\n        // exception.\n        if (!queueName.equals(\"root\") \u0026\u0026 getCapacity() !\u003d 0f\n            \u0026\u0026 !queue.getQueueResourceQuotas().getConfiguredMinResource()\n                .equals(Resources.none())) {\n          throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueuePath()\n              + \"\u0027 and child queue \u0027\" + queue.getQueuePath()\n              + \"\u0027 should use either percentage based capacity\"\n              + \" configuration or absolute resource together.\");\n        }\n      }\n\n      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n      // allow capacities being set to 0, and enforce child 0 if parent is 0\n      if ((minResDefaultLabel.equals(Resources.none())\n          \u0026\u0026 (queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION))\n          || ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + childCapacities + \" for children of queue \" + queueName);\n      }\n      // check label capacities\n      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n        // check children\u0027s labels\n        float sum \u003d 0;\n        Resource minRes \u003d Resources.createResource(0, 0);\n        Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodeLabel,\n            scheduler.getClusterResource());\n        for (CSQueue queue : childQueues) {\n          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n\n          // If any child queue of a label is using percentage based capacity\n          // model vs parent queues\u0027 absolute configuration or vice versa, throw\n          // back an exception\n          if (!queueName.equals(\"root\") \u0026\u0026 !this.capacityConfigType\n              .equals(queue.getCapacityConfigType())) {\n            throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueuePath()\n                + \"\u0027 and child queue \u0027\" + queue.getQueuePath()\n                + \"\u0027 should use either percentage based capacity\"\n                + \"configuration or absolute resource together for label:\"\n                + nodeLabel);\n          }\n\n          // Accumulate all min/max resource configured for all child queues.\n          Resources.addTo(minRes, queue.getQueueResourceQuotas()\n              .getConfiguredMinResource(nodeLabel));\n        }\n        if ((minResDefaultLabel.equals(Resources.none()) \u0026\u0026 capacityByLabel \u003e 0\n            \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n          throw new IllegalArgumentException(\n              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                  + queueName + \" for label\u003d\" + nodeLabel);\n        }\n\n        // Ensure that for each parent queue: parent.min-resource \u003e\u003d\n        // ￎﾣ(child.min-resource).\n        Resource parentMinResource \u003d queueResourceQuotas\n            .getConfiguredMinResource(nodeLabel);\n        if (!parentMinResource.equals(Resources.none()) \u0026\u0026 Resources.lessThan(\n            resourceCalculator, resourceByLabel, parentMinResource, minRes)) {\n          throw new IllegalArgumentException(\"Parent Queues\" + \" capacity: \"\n              + parentMinResource + \" is less than\" + \" to its children:\"\n              + minRes + \" for queue:\" + queueName);\n        }\n      }\n\n      this.childQueues.clear();\n      this.childQueues.addAll(childQueues);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       // Validate\n       float childCapacities \u003d 0;\n       Resource minResDefaultLabel \u003d Resources.createResource(0, 0);\n       for (CSQueue queue : childQueues) {\n         childCapacities +\u003d queue.getCapacity();\n         Resources.addTo(minResDefaultLabel, queue.getQueueResourceQuotas()\n             .getConfiguredMinResource());\n \n         // If any child queue is using percentage based capacity model vs parent\n         // queues\u0027 absolute configuration or vice versa, throw back an\n         // exception.\n         if (!queueName.equals(\"root\") \u0026\u0026 getCapacity() !\u003d 0f\n             \u0026\u0026 !queue.getQueueResourceQuotas().getConfiguredMinResource()\n                 .equals(Resources.none())) {\n           throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n               + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n               + \"\u0027 should use either percentage based capacity\"\n               + \" configuration or absolute resource together.\");\n         }\n       }\n \n       float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n       // allow capacities being set to 0, and enforce child 0 if parent is 0\n       if ((minResDefaultLabel.equals(Resources.none())\n           \u0026\u0026 (queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION))\n           || ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n         throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n             + childCapacities + \" for children of queue \" + queueName);\n       }\n       // check label capacities\n       for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n         float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n         // check children\u0027s labels\n         float sum \u003d 0;\n         Resource minRes \u003d Resources.createResource(0, 0);\n         Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodeLabel,\n             scheduler.getClusterResource());\n         for (CSQueue queue : childQueues) {\n           sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n \n           // If any child queue of a label is using percentage based capacity\n           // model vs parent queues\u0027 absolute configuration or vice versa, throw\n           // back an exception\n           if (!queueName.equals(\"root\") \u0026\u0026 !this.capacityConfigType\n               .equals(queue.getCapacityConfigType())) {\n             throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n                 + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n                 + \"\u0027 should use either percentage based capacity\"\n                 + \"configuration or absolute resource together for label:\"\n                 + nodeLabel);\n           }\n \n           // Accumulate all min/max resource configured for all child queues.\n           Resources.addTo(minRes, queue.getQueueResourceQuotas()\n               .getConfiguredMinResource(nodeLabel));\n         }\n         if ((minResDefaultLabel.equals(Resources.none()) \u0026\u0026 capacityByLabel \u003e 0\n             \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n             || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n           throw new IllegalArgumentException(\n               \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                   + queueName + \" for label\u003d\" + nodeLabel);\n         }\n \n         // Ensure that for each parent queue: parent.min-resource \u003e\u003d\n         // ￎﾣ(child.min-resource).\n         Resource parentMinResource \u003d queueResourceQuotas\n             .getConfiguredMinResource(nodeLabel);\n         if (!parentMinResource.equals(Resources.none()) \u0026\u0026 Resources.lessThan(\n             resourceCalculator, resourceByLabel, parentMinResource, minRes)) {\n           throw new IllegalArgumentException(\"Parent Queues\" + \" capacity: \"\n               + parentMinResource + \" is less than\" + \" to its children:\"\n               + minRes + \" for queue:\" + queueName);\n         }\n       }\n \n       this.childQueues.clear();\n       this.childQueues.addAll(childQueues);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    writeLock.lock();\n    try {\n      // Validate\n      float childCapacities \u003d 0;\n      Resource minResDefaultLabel \u003d Resources.createResource(0, 0);\n      for (CSQueue queue : childQueues) {\n        childCapacities +\u003d queue.getCapacity();\n        Resources.addTo(minResDefaultLabel, queue.getQueueResourceQuotas()\n            .getConfiguredMinResource());\n\n        // If any child queue is using percentage based capacity model vs parent\n        // queues\u0027 absolute configuration or vice versa, throw back an\n        // exception.\n        if (!queueName.equals(\"root\") \u0026\u0026 getCapacity() !\u003d 0f\n            \u0026\u0026 !queue.getQueueResourceQuotas().getConfiguredMinResource()\n                .equals(Resources.none())) {\n          throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n              + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n              + \"\u0027 should use either percentage based capacity\"\n              + \" configuration or absolute resource together.\");\n        }\n      }\n\n      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n      // allow capacities being set to 0, and enforce child 0 if parent is 0\n      if ((minResDefaultLabel.equals(Resources.none())\n          \u0026\u0026 (queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION))\n          || ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + childCapacities + \" for children of queue \" + queueName);\n      }\n      // check label capacities\n      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n        // check children\u0027s labels\n        float sum \u003d 0;\n        Resource minRes \u003d Resources.createResource(0, 0);\n        Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodeLabel,\n            scheduler.getClusterResource());\n        for (CSQueue queue : childQueues) {\n          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n\n          // If any child queue of a label is using percentage based capacity\n          // model vs parent queues\u0027 absolute configuration or vice versa, throw\n          // back an exception\n          if (!queueName.equals(\"root\") \u0026\u0026 !this.capacityConfigType\n              .equals(queue.getCapacityConfigType())) {\n            throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n                + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n                + \"\u0027 should use either percentage based capacity\"\n                + \"configuration or absolute resource together for label:\"\n                + nodeLabel);\n          }\n\n          // Accumulate all min/max resource configured for all child queues.\n          Resources.addTo(minRes, queue.getQueueResourceQuotas()\n              .getConfiguredMinResource(nodeLabel));\n        }\n        if ((minResDefaultLabel.equals(Resources.none()) \u0026\u0026 capacityByLabel \u003e 0\n            \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n          throw new IllegalArgumentException(\n              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                  + queueName + \" for label\u003d\" + nodeLabel);\n        }\n\n        // Ensure that for each parent queue: parent.min-resource \u003e\u003d\n        // ￎﾣ(child.min-resource).\n        Resource parentMinResource \u003d queueResourceQuotas\n            .getConfiguredMinResource(nodeLabel);\n        if (!parentMinResource.equals(Resources.none()) \u0026\u0026 Resources.lessThan(\n            resourceCalculator, resourceByLabel, parentMinResource, minRes)) {\n          throw new IllegalArgumentException(\"Parent Queues\" + \" capacity: \"\n              + parentMinResource + \" is less than\" + \" to its children:\"\n              + minRes + \" for queue:\" + queueName);\n        }\n      }\n\n      this.childQueues.clear();\n      this.childQueues.addAll(childQueues);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "5e798b1a0ddceeaf54703b94052501867156e979": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6471. Support to add min/max resource configuration for a queue. (Sunil G via wangda)\n\nChange-Id: I9213f5297a6841fab5c573e85ee4c4e5f4a0b7ff\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "5e798b1a0ddceeaf54703b94052501867156e979",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/11/17 11:25 AM",
      "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,88 @@\n   void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     try {\n       writeLock.lock();\n       // Validate\n       float childCapacities \u003d 0;\n+      Resource minResDefaultLabel \u003d Resources.createResource(0, 0);\n       for (CSQueue queue : childQueues) {\n         childCapacities +\u003d queue.getCapacity();\n+        Resources.addTo(minResDefaultLabel, queue.getQueueResourceQuotas()\n+            .getConfiguredMinResource());\n+\n+        // If any child queue is using percentage based capacity model vs parent\n+        // queues\u0027 absolute configuration or vice versa, throw back an\n+        // exception.\n+        if (!queueName.equals(\"root\") \u0026\u0026 getCapacity() !\u003d 0f\n+            \u0026\u0026 !queue.getQueueResourceQuotas().getConfiguredMinResource()\n+                .equals(Resources.none())) {\n+          throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n+              + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n+              + \"\u0027 should use either percentage based capacity\"\n+              + \" configuration or absolute resource together.\");\n+        }\n       }\n+\n       float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n       // allow capacities being set to 0, and enforce child 0 if parent is 0\n-      if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || (\n-          (queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n-        throw new IllegalArgumentException(\n-            \"Illegal\" + \" capacity of \" + childCapacities\n-                + \" for children of queue \" + queueName);\n+      if ((minResDefaultLabel.equals(Resources.none())\n+          \u0026\u0026 (queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION))\n+          || ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n+        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n+            + childCapacities + \" for children of queue \" + queueName);\n       }\n       // check label capacities\n       for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n         float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n         // check children\u0027s labels\n         float sum \u003d 0;\n+        Resource minRes \u003d Resources.createResource(0, 0);\n+        Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodeLabel,\n+            scheduler.getClusterResource());\n         for (CSQueue queue : childQueues) {\n           sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n+\n+          // If any child queue of a label is using percentage based capacity\n+          // model vs parent queues\u0027 absolute configuration or vice versa, throw\n+          // back an exception\n+          if (!queueName.equals(\"root\") \u0026\u0026 !this.capacityConfigType\n+              .equals(queue.getCapacityConfigType())) {\n+            throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n+                + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n+                + \"\u0027 should use either percentage based capacity\"\n+                + \"configuration or absolute resource together for label:\"\n+                + nodeLabel);\n+          }\n+\n+          // Accumulate all min/max resource configured for all child queues.\n+          Resources.addTo(minRes, queue.getQueueResourceQuotas()\n+              .getConfiguredMinResource(nodeLabel));\n         }\n-        if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n+        if ((minResDefaultLabel.equals(Resources.none()) \u0026\u0026 capacityByLabel \u003e 0\n+            \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n             || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n           throw new IllegalArgumentException(\n               \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                   + queueName + \" for label\u003d\" + nodeLabel);\n         }\n+\n+        // Ensure that for each parent queue: parent.min-resource \u003e\u003d\n+        // ￎﾣ(child.min-resource).\n+        Resource parentMinResource \u003d queueResourceQuotas\n+            .getConfiguredMinResource(nodeLabel);\n+        if (!parentMinResource.equals(Resources.none()) \u0026\u0026 Resources.lessThan(\n+            resourceCalculator, resourceByLabel, parentMinResource, minRes)) {\n+          throw new IllegalArgumentException(\"Parent Queues\" + \" capacity: \"\n+              + parentMinResource + \" is less than\" + \" to its children:\"\n+              + minRes + \" for queue:\" + queueName);\n+        }\n       }\n \n       this.childQueues.clear();\n       this.childQueues.addAll(childQueues);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    try {\n      writeLock.lock();\n      // Validate\n      float childCapacities \u003d 0;\n      Resource minResDefaultLabel \u003d Resources.createResource(0, 0);\n      for (CSQueue queue : childQueues) {\n        childCapacities +\u003d queue.getCapacity();\n        Resources.addTo(minResDefaultLabel, queue.getQueueResourceQuotas()\n            .getConfiguredMinResource());\n\n        // If any child queue is using percentage based capacity model vs parent\n        // queues\u0027 absolute configuration or vice versa, throw back an\n        // exception.\n        if (!queueName.equals(\"root\") \u0026\u0026 getCapacity() !\u003d 0f\n            \u0026\u0026 !queue.getQueueResourceQuotas().getConfiguredMinResource()\n                .equals(Resources.none())) {\n          throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n              + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n              + \"\u0027 should use either percentage based capacity\"\n              + \" configuration or absolute resource together.\");\n        }\n      }\n\n      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n      // allow capacities being set to 0, and enforce child 0 if parent is 0\n      if ((minResDefaultLabel.equals(Resources.none())\n          \u0026\u0026 (queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION))\n          || ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + childCapacities + \" for children of queue \" + queueName);\n      }\n      // check label capacities\n      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n        // check children\u0027s labels\n        float sum \u003d 0;\n        Resource minRes \u003d Resources.createResource(0, 0);\n        Resource resourceByLabel \u003d labelManager.getResourceByLabel(nodeLabel,\n            scheduler.getClusterResource());\n        for (CSQueue queue : childQueues) {\n          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n\n          // If any child queue of a label is using percentage based capacity\n          // model vs parent queues\u0027 absolute configuration or vice versa, throw\n          // back an exception\n          if (!queueName.equals(\"root\") \u0026\u0026 !this.capacityConfigType\n              .equals(queue.getCapacityConfigType())) {\n            throw new IllegalArgumentException(\"Parent queue \u0027\" + getQueueName()\n                + \"\u0027 and child queue \u0027\" + queue.getQueueName()\n                + \"\u0027 should use either percentage based capacity\"\n                + \"configuration or absolute resource together for label:\"\n                + nodeLabel);\n          }\n\n          // Accumulate all min/max resource configured for all child queues.\n          Resources.addTo(minRes, queue.getQueueResourceQuotas()\n              .getConfiguredMinResource(nodeLabel));\n        }\n        if ((minResDefaultLabel.equals(Resources.none()) \u0026\u0026 capacityByLabel \u003e 0\n            \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n          throw new IllegalArgumentException(\n              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                  + queueName + \" for label\u003d\" + nodeLabel);\n        }\n\n        // Ensure that for each parent queue: parent.min-resource \u003e\u003d\n        // ￎﾣ(child.min-resource).\n        Resource parentMinResource \u003d queueResourceQuotas\n            .getConfiguredMinResource(nodeLabel);\n        if (!parentMinResource.equals(Resources.none()) \u0026\u0026 Resources.lessThan(\n            resourceCalculator, resourceByLabel, parentMinResource, minRes)) {\n          throw new IllegalArgumentException(\"Parent Queues\" + \" capacity: \"\n              + parentMinResource + \" is less than\" + \" to its children:\"\n              + minRes + \" for queue:\" + queueName);\n        }\n      }\n\n      this.childQueues.clear();\n      this.childQueues.addAll(childQueues);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,41 @@\n-  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n-    // Validate\n-    float childCapacities \u003d 0;\n-    for (CSQueue queue : childQueues) {\n-      childCapacities +\u003d queue.getCapacity();\n-    }\n-    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n-    // allow capacities being set to 0, and enforce child 0 if parent is 0\n-    if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n-        ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n-      throw new IllegalArgumentException(\"Illegal\" +\n-      \t\t\" capacity of \" + childCapacities + \n-      \t\t\" for children of queue \" + queueName);\n-    }\n-    // check label capacities\n-    for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n-      float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n-      // check children\u0027s labels\n-      float sum \u003d 0;\n+  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n+    try {\n+      writeLock.lock();\n+      // Validate\n+      float childCapacities \u003d 0;\n       for (CSQueue queue : childQueues) {\n-        sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n+        childCapacities +\u003d queue.getCapacity();\n       }\n-      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n-          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n-        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n-            + sum + \" for children of queue \" + queueName\n-            + \" for label\u003d\" + nodeLabel);\n+      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n+      // allow capacities being set to 0, and enforce child 0 if parent is 0\n+      if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || (\n+          (queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n+        throw new IllegalArgumentException(\n+            \"Illegal\" + \" capacity of \" + childCapacities\n+                + \" for children of queue \" + queueName);\n       }\n-    }\n-    \n-    this.childQueues.clear();\n-    this.childQueues.addAll(childQueues);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n+      // check label capacities\n+      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n+        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n+        // check children\u0027s labels\n+        float sum \u003d 0;\n+        for (CSQueue queue : childQueues) {\n+          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n+        }\n+        if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n+            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n+          throw new IllegalArgumentException(\n+              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n+                  + queueName + \" for label\u003d\" + nodeLabel);\n+        }\n+      }\n+\n+      this.childQueues.clear();\n+      this.childQueues.addAll(childQueues);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    try {\n      writeLock.lock();\n      // Validate\n      float childCapacities \u003d 0;\n      for (CSQueue queue : childQueues) {\n        childCapacities +\u003d queue.getCapacity();\n      }\n      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n      // allow capacities being set to 0, and enforce child 0 if parent is 0\n      if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || (\n          (queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n        throw new IllegalArgumentException(\n            \"Illegal\" + \" capacity of \" + childCapacities\n                + \" for children of queue \" + queueName);\n      }\n      // check label capacities\n      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n        // check children\u0027s labels\n        float sum \u003d 0;\n        for (CSQueue queue : childQueues) {\n          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n        }\n        if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n          throw new IllegalArgumentException(\n              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                  + queueName + \" for label\u003d\" + nodeLabel);\n        }\n      }\n\n      this.childQueues.clear();\n      this.childQueues.addAll(childQueues);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,41 @@\n-  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n-    // Validate\n-    float childCapacities \u003d 0;\n-    for (CSQueue queue : childQueues) {\n-      childCapacities +\u003d queue.getCapacity();\n-    }\n-    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n-    // allow capacities being set to 0, and enforce child 0 if parent is 0\n-    if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n-        ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n-      throw new IllegalArgumentException(\"Illegal\" +\n-      \t\t\" capacity of \" + childCapacities + \n-      \t\t\" for children of queue \" + queueName);\n-    }\n-    // check label capacities\n-    for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n-      float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n-      // check children\u0027s labels\n-      float sum \u003d 0;\n+  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n+    try {\n+      writeLock.lock();\n+      // Validate\n+      float childCapacities \u003d 0;\n       for (CSQueue queue : childQueues) {\n-        sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n+        childCapacities +\u003d queue.getCapacity();\n       }\n-      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n-          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n-        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n-            + sum + \" for children of queue \" + queueName\n-            + \" for label\u003d\" + nodeLabel);\n+      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n+      // allow capacities being set to 0, and enforce child 0 if parent is 0\n+      if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || (\n+          (queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n+        throw new IllegalArgumentException(\n+            \"Illegal\" + \" capacity of \" + childCapacities\n+                + \" for children of queue \" + queueName);\n       }\n-    }\n-    \n-    this.childQueues.clear();\n-    this.childQueues.addAll(childQueues);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n+      // check label capacities\n+      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n+        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n+        // check children\u0027s labels\n+        float sum \u003d 0;\n+        for (CSQueue queue : childQueues) {\n+          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n+        }\n+        if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n+            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n+          throw new IllegalArgumentException(\n+              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n+                  + queueName + \" for label\u003d\" + nodeLabel);\n+        }\n+      }\n+\n+      this.childQueues.clear();\n+      this.childQueues.addAll(childQueues);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    try {\n      writeLock.lock();\n      // Validate\n      float childCapacities \u003d 0;\n      for (CSQueue queue : childQueues) {\n        childCapacities +\u003d queue.getCapacity();\n      }\n      float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n      // allow capacities being set to 0, and enforce child 0 if parent is 0\n      if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || (\n          (queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n        throw new IllegalArgumentException(\n            \"Illegal\" + \" capacity of \" + childCapacities\n                + \" for children of queue \" + queueName);\n      }\n      // check label capacities\n      for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n        float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n        // check children\u0027s labels\n        float sum \u003d 0;\n        for (CSQueue queue : childQueues) {\n          sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n        }\n        if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n            || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n          throw new IllegalArgumentException(\n              \"Illegal\" + \" capacity of \" + sum + \" for children of queue \"\n                  + queueName + \" for label\u003d\" + nodeLabel);\n        }\n      }\n\n      this.childQueues.clear();\n      this.childQueues.addAll(childQueues);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "5ed1fead6b5ec24bb0ce1a3db033c2ee1ede4bb4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3894. RM startup should fail for wrong CS xml NodeLabel capacity configuration. (Bibin A Chundatt via wangda)\n",
      "commitDate": "12/07/15 9:52 PM",
      "commitName": "5ed1fead6b5ec24bb0ce1a3db033c2ee1ede4bb4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/04/15 11:19 AM",
      "commitNameOld": "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 80.44,
      "commitsBetweenForRepo": 676,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     // allow capacities being set to 0, and enforce child 0 if parent is 0\n     if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n         ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     // check label capacities\n-    for (String nodeLabel : labelManager.getClusterNodeLabelNames()) {\n+    for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n       float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n       // check children\u0027s labels\n       float sum \u003d 0;\n       for (CSQueue queue : childQueues) {\n         sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n       }\n       if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n           || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n         throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n             + sum + \" for children of queue \" + queueName\n             + \" for label\u003d\" + nodeLabel);\n       }\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    // allow capacities being set to 0, and enforce child 0 if parent is 0\n    if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n        ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    // check label capacities\n    for (String nodeLabel : queueCapacities.getExistingNodeLabels()) {\n      float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n      // check children\u0027s labels\n      float sum \u003d 0;\n      for (CSQueue queue : childQueues) {\n        sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n      }\n      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + sum + \" for children of queue \" + queueName\n            + \" for label\u003d\" + nodeLabel);\n      }\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3413. Changed Nodelabel attributes (like exclusivity) to be settable only via addToClusterNodeLabels but not changeable at runtime. (Wangda Tan via vinodkv)\n",
      "commitDate": "23/04/15 11:19 AM",
      "commitName": "f5fe35e297ed4a00a1ba93d090207ef67cebcc9d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/04/15 1:36 PM",
      "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.9,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     // allow capacities being set to 0, and enforce child 0 if parent is 0\n     if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n         ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     // check label capacities\n-    for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n+    for (String nodeLabel : labelManager.getClusterNodeLabelNames()) {\n       float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n       // check children\u0027s labels\n       float sum \u003d 0;\n       for (CSQueue queue : childQueues) {\n         sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n       }\n       if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n           || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n         throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n             + sum + \" for children of queue \" + queueName\n             + \" for label\u003d\" + nodeLabel);\n       }\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    // allow capacities being set to 0, and enforce child 0 if parent is 0\n    if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n        ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    // check label capacities\n    for (String nodeLabel : labelManager.getClusterNodeLabelNames()) {\n      float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n      // check children\u0027s labels\n      float sum \u003d 0;\n      for (CSQueue queue : childQueues) {\n        sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n      }\n      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + sum + \" for children of queue \" + queueName\n            + \" for label\u003d\" + nodeLabel);\n      }\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "18a594257e052e8f10a03e5594e6cc6901dc56be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
      "commitDate": "12/02/15 2:58 PM",
      "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/02/15 8:34 PM",
      "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     // allow capacities being set to 0, and enforce child 0 if parent is 0\n-    if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n-        ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n+    if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n+        ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     // check label capacities\n     for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n-      float capacityByLabel \u003d getCapacityByNodeLabel(nodeLabel);\n+      float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n       // check children\u0027s labels\n       float sum \u003d 0;\n       for (CSQueue queue : childQueues) {\n-        sum +\u003d queue.getCapacityByNodeLabel(nodeLabel);\n+        sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n       }\n       if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n           || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n         throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n             + sum + \" for children of queue \" + queueName\n             + \" for label\u003d\" + nodeLabel);\n       }\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    // allow capacities being set to 0, and enforce child 0 if parent is 0\n    if (((queueCapacities.getCapacity() \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n        ((queueCapacities.getCapacity() \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    // check label capacities\n    for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n      float capacityByLabel \u003d queueCapacities.getCapacity(nodeLabel);\n      // check children\u0027s labels\n      float sum \u003d 0;\n      for (CSQueue queue : childQueues) {\n        sum +\u003d queue.getQueueCapacities().getCapacity(nodeLabel);\n      }\n      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + sum + \" for children of queue \" + queueName\n            + \" for label\u003d\" + nodeLabel);\n      }\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "4641196fe02af5cab3d56a9f3c78875c495dbe03": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3145. Fixed ConcurrentModificationException on CapacityScheduler ParentQueue#getQueueUserAclInfo. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "05/02/15 4:12 PM",
      "commitName": "4641196fe02af5cab3d56a9f3c78875c495dbe03",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/02/15 11:28 AM",
      "commitNameOld": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n-  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n+  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     // allow capacities being set to 0, and enforce child 0 if parent is 0\n     if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n         ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     // check label capacities\n     for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n       float capacityByLabel \u003d getCapacityByNodeLabel(nodeLabel);\n       // check children\u0027s labels\n       float sum \u003d 0;\n       for (CSQueue queue : childQueues) {\n         sum +\u003d queue.getCapacityByNodeLabel(nodeLabel);\n       }\n       if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n           || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n         throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n             + sum + \" for children of queue \" + queueName\n             + \" for label\u003d\" + nodeLabel);\n       }\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    // allow capacities being set to 0, and enforce child 0 if parent is 0\n    if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n        ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    // check label capacities\n    for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n      float capacityByLabel \u003d getCapacityByNodeLabel(nodeLabel);\n      // check children\u0027s labels\n      float sum \u003d 0;\n      for (CSQueue queue : childQueues) {\n        sum +\u003d queue.getCapacityByNodeLabel(nodeLabel);\n      }\n      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + sum + \" for children of queue \" + queueName\n            + \" for label\u003d\" + nodeLabel);\n      }\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[synchronized]"
      }
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/14 3:41 PM",
      "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthorOld": "carlo curino",
      "daysBetweenCommits": 12.12,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,36 @@\n   void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n-    \n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     // allow capacities being set to 0, and enforce child 0 if parent is 0\n     if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n         ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n+    // check label capacities\n+    for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n+      float capacityByLabel \u003d getCapacityByNodeLabel(nodeLabel);\n+      // check children\u0027s labels\n+      float sum \u003d 0;\n+      for (CSQueue queue : childQueues) {\n+        sum +\u003d queue.getCapacityByNodeLabel(nodeLabel);\n+      }\n+      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n+          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n+        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n+            + sum + \" for children of queue \" + queueName\n+            + \" for label\u003d\" + nodeLabel);\n+      }\n+    }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    // allow capacities being set to 0, and enforce child 0 if parent is 0\n    if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n        ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    // check label capacities\n    for (String nodeLabel : labelManager.getClusterNodeLabels()) {\n      float capacityByLabel \u003d getCapacityByNodeLabel(nodeLabel);\n      // check children\u0027s labels\n      float sum \u003d 0;\n      for (CSQueue queue : childQueues) {\n        sum +\u003d queue.getCapacityByNodeLabel(nodeLabel);\n      }\n      if ((capacityByLabel \u003e 0 \u0026\u0026 Math.abs(1.0f - sum) \u003e PRECISION)\n          || (capacityByLabel \u003d\u003d 0) \u0026\u0026 (sum \u003e 0)) {\n        throw new IllegalArgumentException(\"Illegal\" + \" capacity of \"\n            + sum + \" for children of queue \" + queueName\n            + \" for label\u003d\" + nodeLabel);\n      }\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "ab8fa651f736525c8e40229ee99859cee9c1ba33": {
      "type": "Ybodychange",
      "commitMessage": "YARN-166. capacity scheduler doesn\u0027t allow capacity \u003c 1.0 (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1404247 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/12 9:56 AM",
      "commitName": "ab8fa651f736525c8e40229ee99859cee9c1ba33",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/10/12 6:21 AM",
      "commitNameOld": "cc523683cfa76c1255667a3aedc48b08e5daabc7",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 7.15,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     \n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n-    if (delta \u003e PRECISION) {\n+    // allow capacities being set to 0, and enforce child 0 if parent is 0\n+    if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n+        ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    // allow capacities being set to 0, and enforce child 0 if parent is 0\n    if (((capacity \u003e 0) \u0026\u0026 (delta \u003e PRECISION)) || \n        ((capacity \u003d\u003d 0) \u0026\u0026 (childCapacities \u003e 0))) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    if (delta \u003e PRECISION) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "f24dcb3449c77da665058427bc7fa480cad507fc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2907. Changed log level for various messages in ResourceManager from INFO to DEBUG. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179178 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:56 AM",
      "commitName": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/09/11 3:19 PM",
      "commitNameOld": "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 4.57,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     \n     // Validate\n     float childCapacities \u003d 0;\n     for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     if (delta \u003e PRECISION) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n-    LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    if (delta \u003e PRECISION) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"setChildQueues: \" + getChildQueuesToPrint());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/09/11 11:26 AM",
          "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "05/09/11 12:49 PM",
          "commitNameOld": "6b608aad7d52b524fa94955a538e8b3524d42d93",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.94,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  void setChildQueues(Collection\u003cQueue\u003e childQueues) {\n+  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     \n     // Validate\n     float childCapacities \u003d 0;\n-    for (Queue queue : childQueues) {\n+    for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     if (delta \u003e PRECISION) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    if (delta \u003e PRECISION) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[childQueues-Collection\u003cQueue\u003e]",
            "newValue": "[childQueues-Collection\u003cCSQueue\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/09/11 11:26 AM",
          "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "05/09/11 12:49 PM",
          "commitNameOld": "6b608aad7d52b524fa94955a538e8b3524d42d93",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.94,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,18 @@\n-  void setChildQueues(Collection\u003cQueue\u003e childQueues) {\n+  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n     \n     // Validate\n     float childCapacities \u003d 0;\n-    for (Queue queue : childQueues) {\n+    for (CSQueue queue : childQueues) {\n       childCapacities +\u003d queue.getCapacity();\n     }\n     float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n     if (delta \u003e PRECISION) {\n       throw new IllegalArgumentException(\"Illegal\" +\n       \t\t\" capacity of \" + childCapacities + \n       \t\t\" for children of queue \" + queueName);\n     }\n     \n     this.childQueues.clear();\n     this.childQueues.addAll(childQueues);\n     LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setChildQueues(Collection\u003cCSQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (CSQueue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    if (delta \u003e PRECISION) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void setChildQueues(Collection\u003cQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (Queue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    if (delta \u003e PRECISION) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  void setChildQueues(Collection\u003cQueue\u003e childQueues) {\n+    \n+    // Validate\n+    float childCapacities \u003d 0;\n+    for (Queue queue : childQueues) {\n+      childCapacities +\u003d queue.getCapacity();\n+    }\n+    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n+    if (delta \u003e PRECISION) {\n+      throw new IllegalArgumentException(\"Illegal\" +\n+      \t\t\" capacity of \" + childCapacities + \n+      \t\t\" for children of queue \" + queueName);\n+    }\n+    \n+    this.childQueues.clear();\n+    this.childQueues.addAll(childQueues);\n+    LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void setChildQueues(Collection\u003cQueue\u003e childQueues) {\n    \n    // Validate\n    float childCapacities \u003d 0;\n    for (Queue queue : childQueues) {\n      childCapacities +\u003d queue.getCapacity();\n    }\n    float delta \u003d Math.abs(1.0f - childCapacities);  // crude way to check\n    if (delta \u003e PRECISION) {\n      throw new IllegalArgumentException(\"Illegal\" +\n      \t\t\" capacity of \" + childCapacities + \n      \t\t\" for children of queue \" + queueName);\n    }\n    \n    this.childQueues.clear();\n    this.childQueues.addAll(childQueues);\n    LOG.info(\"DEBUG --- setChildQueues: \" + getChildQueuesToPrint());\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}