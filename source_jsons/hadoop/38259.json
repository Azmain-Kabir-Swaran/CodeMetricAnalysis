{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulingMonitor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitor.java",
  "functionStartLine": 105,
  "functionEndLine": 120,
  "numCommitsSeen": 12,
  "timeTaken": 2394,
  "changeHistory": [
    "e6ec02001fc4eed9eb51c8653d8f931135e49eda",
    "39a9dc8e4a6e1d13658867ad756878d3dd6352b0",
    "2ada100da7cfe12946e43da2929bd80c2a8bd833",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "e6ec02001fc4eed9eb51c8653d8f931135e49eda": "Ybodychange",
    "39a9dc8e4a6e1d13658867ad756878d3dd6352b0": "Ybodychange",
    "2ada100da7cfe12946e43da2929bd80c2a8bd833": "Ybodychange",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6ec02001fc4eed9eb51c8653d8f931135e49eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7370: Preemption properties should be refreshable. Contrubted by Gergely Nov√°k.\n",
      "commitDate": "02/11/17 10:37 AM",
      "commitName": "e6ec02001fc4eed9eb51c8653d8f931135e49eda",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "25/08/17 1:31 PM",
      "commitNameOld": "39a9dc8e4a6e1d13658867ad756878d3dd6352b0",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 68.88,
      "commitsBetweenForRepo": 612,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,16 @@\n     public void run() {\n       try {\n-        //invoke the preemption policy\n-        invokePolicy();\n+        if (monitorInterval !\u003d scheduleEditPolicy.getMonitoringInterval()) {\n+          handler.cancel(true);\n+          monitorInterval \u003d scheduleEditPolicy.getMonitoringInterval();\n+          schedulePreemptionChecker();\n+        } else {\n+          invokePolicy();\n+        }\n       } catch (Throwable t) {\n         // The preemption monitor does not alter structures nor do structures\n         // persist across invocations. Therefore, log, skip, and retry.\n         LOG.error(\"Exception raised while executing preemption\"\n             + \" checker, skip this run..., exception\u003d\", t);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        if (monitorInterval !\u003d scheduleEditPolicy.getMonitoringInterval()) {\n          handler.cancel(true);\n          monitorInterval \u003d scheduleEditPolicy.getMonitoringInterval();\n          schedulePreemptionChecker();\n        } else {\n          invokePolicy();\n        }\n      } catch (Throwable t) {\n        // The preemption monitor does not alter structures nor do structures\n        // persist across invocations. Therefore, log, skip, and retry.\n        LOG.error(\"Exception raised while executing preemption\"\n            + \" checker, skip this run..., exception\u003d\", t);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitor.java",
      "extendedDetails": {}
    },
    "39a9dc8e4a6e1d13658867ad756878d3dd6352b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7052. RM SchedulingMonitor gives no indication why the spawned thread crashed. Contributed by Eric Payne\n",
      "commitDate": "25/08/17 1:31 PM",
      "commitName": "39a9dc8e4a6e1d13658867ad756878d3dd6352b0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "11/08/17 2:04 PM",
      "commitNameOld": "218588be773123404af4fd26eed5c9e3625feaa7",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 13.98,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,11 @@\n     public void run() {\n       try {\n         //invoke the preemption policy\n         invokePolicy();\n-      } catch (YarnRuntimeException e) {\n-        LOG.error(\"YarnRuntimeException raised while executing preemption\"\n-            + \" checker, skip this run..., exception\u003d\", e);\n+      } catch (Throwable t) {\n+        // The preemption monitor does not alter structures nor do structures\n+        // persist across invocations. Therefore, log, skip, and retry.\n+        LOG.error(\"Exception raised while executing preemption\"\n+            + \" checker, skip this run..., exception\u003d\", t);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        //invoke the preemption policy\n        invokePolicy();\n      } catch (Throwable t) {\n        // The preemption monitor does not alter structures nor do structures\n        // persist across invocations. Therefore, log, skip, and retry.\n        LOG.error(\"Exception raised while executing preemption\"\n            + \" checker, skip this run..., exception\u003d\", t);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitor.java",
      "extendedDetails": {}
    },
    "2ada100da7cfe12946e43da2929bd80c2a8bd833": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5543. ResourceManager SchedulingMonitor could potentially terminate the preemption checker thread. Contributed by Min Shen.",
      "commitDate": "11/05/17 1:25 PM",
      "commitName": "2ada100da7cfe12946e43da2929bd80c2a8bd833",
      "commitAuthor": "Min Shen",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 371.02,
      "commitsBetweenForRepo": 2477,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,9 @@\n     public void run() {\n-      while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-        try {\n-          //invoke the preemption policy at a regular pace\n-          //the policy will generate preemption or kill events\n-          //managed by the dispatcher\n-          invokePolicy();\n-        } catch (YarnRuntimeException e) {\n-          LOG.error(\"YarnRuntimeException raised while executing preemption\"\n-              + \" checker, skip this run..., exception\u003d\", e);\n-        }\n-\n-        // Wait before next run\n-        try {\n-          Thread.sleep(monitorInterval);\n-        } catch (InterruptedException e) {\n-          LOG.info(getName() + \" thread interrupted\");\n-          break;\n-        }\n+      try {\n+        //invoke the preemption policy\n+        invokePolicy();\n+      } catch (YarnRuntimeException e) {\n+        LOG.error(\"YarnRuntimeException raised while executing preemption\"\n+            + \" checker, skip this run..., exception\u003d\", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        //invoke the preemption policy\n        invokePolicy();\n      } catch (YarnRuntimeException e) {\n        LOG.error(\"YarnRuntimeException raised while executing preemption\"\n            + \" checker, skip this run..., exception\u003d\", e);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitor.java",
      "extendedDetails": {}
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/03/16 12:43 PM",
      "commitNameOld": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 36.01,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,21 @@\n     public void run() {\n       while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-        //invoke the preemption policy at a regular pace\n-        //the policy will generate preemption or kill events\n-        //managed by the dispatcher\n-        invokePolicy();\n+        try {\n+          //invoke the preemption policy at a regular pace\n+          //the policy will generate preemption or kill events\n+          //managed by the dispatcher\n+          invokePolicy();\n+        } catch (YarnRuntimeException e) {\n+          LOG.error(\"YarnRuntimeException raised while executing preemption\"\n+              + \" checker, skip this run..., exception\u003d\", e);\n+        }\n+\n+        // Wait before next run\n         try {\n           Thread.sleep(monitorInterval);\n         } catch (InterruptedException e) {\n           LOG.info(getName() + \" thread interrupted\");\n           break;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n        try {\n          //invoke the preemption policy at a regular pace\n          //the policy will generate preemption or kill events\n          //managed by the dispatcher\n          invokePolicy();\n        } catch (YarnRuntimeException e) {\n          LOG.error(\"YarnRuntimeException raised while executing preemption\"\n              + \" checker, skip this run..., exception\u003d\", e);\n        }\n\n        // Wait before next run\n        try {\n          Thread.sleep(monitorInterval);\n        } catch (InterruptedException e) {\n          LOG.info(getName() + \" thread interrupted\");\n          break;\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitor.java",
      "extendedDetails": {}
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,14 @@\n+    public void run() {\n+      while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+        //invoke the preemption policy at a regular pace\n+        //the policy will generate preemption or kill events\n+        //managed by the dispatcher\n+        invokePolicy();\n+        try {\n+          Thread.sleep(monitorInterval);\n+        } catch (InterruptedException e) {\n+          LOG.info(getName() + \" thread interrupted\");\n+          break;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n        //invoke the preemption policy at a regular pace\n        //the policy will generate preemption or kill events\n        //managed by the dispatcher\n        invokePolicy();\n        try {\n          Thread.sleep(monitorInterval);\n        } catch (InterruptedException e) {\n          LOG.info(getName() + \" thread interrupted\");\n          break;\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/SchedulingMonitor.java"
    }
  }
}