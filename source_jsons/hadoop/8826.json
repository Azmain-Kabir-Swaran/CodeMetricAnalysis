{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ErasureCodingPolicyManager.java",
  "functionName": "init",
  "functionId": "init___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
  "functionStartLine": 120,
  "functionEndLine": 154,
  "numCommitsSeen": 34,
  "timeTaken": 6585,
  "changeHistory": [
    "c03024a5305bea1a40c87a4abc0793802bea5c75",
    "8d99648c203004045a9339ad27258092969145d6",
    "e565b5277d5b890dad107fe85e295a3907e4bfc1",
    "e0b3c644e186d89138d4174efe0cbe77a0200315",
    "2adf8bed712e6d770a0d53eea198d8911ae1a258",
    "200b11368d3954138a9bce128c8fa763b4a503a1",
    "a53b8b6fdce111b1e35ad0dc563eb53d1c58462f",
    "5db3f9846882c51991d16853a5c431664f3f801f",
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903"
  ],
  "changeHistoryShort": {
    "c03024a5305bea1a40c87a4abc0793802bea5c75": "Ybodychange",
    "8d99648c203004045a9339ad27258092969145d6": "Ymultichange(Yexceptionschange,Ybodychange)",
    "e565b5277d5b890dad107fe85e295a3907e4bfc1": "Ybodychange",
    "e0b3c644e186d89138d4174efe0cbe77a0200315": "Ybodychange",
    "2adf8bed712e6d770a0d53eea198d8911ae1a258": "Ybodychange",
    "200b11368d3954138a9bce128c8fa763b4a503a1": "Ybodychange",
    "a53b8b6fdce111b1e35ad0dc563eb53d1c58462f": "Ybodychange",
    "5db3f9846882c51991d16853a5c431664f3f801f": "Ybodychange",
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3": "Ybodychange",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c03024a5305bea1a40c87a4abc0793802bea5c75": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14113. EC : Add Configuration to restrict UserDefined Policies. Contributed by Ayush Saxena.\n",
      "commitDate": "06/12/18 4:50 AM",
      "commitName": "c03024a5305bea1a40c87a4abc0793802bea5c75",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "03/12/18 10:01 AM",
      "commitNameOld": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
      "commitAuthorOld": "Kitti Nanasi",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   public void init(Configuration conf) throws IOException {\n     this.policiesByName \u003d new TreeMap\u003c\u003e();\n     this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n     this.allPersistedPolicies \u003d new TreeMap\u003c\u003e();\n \n     /**\n      * TODO: load user defined EC policy from fsImage HDFS-7859\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n \n     /*\n      * Add all System built-in policies into policy map\n      */\n     for (ErasureCodingPolicy policy :\n         SystemErasureCodingPolicies.getPolicies()) {\n       final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n       policiesByName.put(policy.getName(), info);\n       policiesByID.put(policy.getId(), info);\n       allPersistedPolicies.put(policy.getId(),\n           new ErasureCodingPolicyInfo(policy));\n     }\n \n     enableDefaultPolicy(conf);\n     updatePolicies();\n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n+\n+    userDefinedAllowed \u003d conf.getBoolean(\n+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_USERPOLICIES_ALLOWED_KEY,\n+        DFSConfigKeys.\n+            DFS_NAMENODE_EC_POLICIES_USERPOLICIES_ALLOWED_KEY_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) throws IOException {\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.allPersistedPolicies \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n      policiesByName.put(policy.getName(), info);\n      policiesByID.put(policy.getId(), info);\n      allPersistedPolicies.put(policy.getId(),\n          new ErasureCodingPolicyInfo(policy));\n    }\n\n    enableDefaultPolicy(conf);\n    updatePolicies();\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n\n    userDefinedAllowed \u003d conf.getBoolean(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_USERPOLICIES_ALLOWED_KEY,\n        DFSConfigKeys.\n            DFS_NAMENODE_EC_POLICIES_USERPOLICIES_ALLOWED_KEY_DEFAULT);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "8d99648c203004045a9339ad27258092969145d6": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-14039. ec -listPolicies doesn\u0027t show correct state for the default policy when the default is not RS(6,3). Contributed by Kitti Nanasi.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
      "commitDate": "08/11/18 10:01 AM",
      "commitName": "8d99648c203004045a9339ad27258092969145d6",
      "commitAuthor": "Kitti Nanasi",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-14039. ec -listPolicies doesn\u0027t show correct state for the default policy when the default is not RS(6,3). Contributed by Kitti Nanasi.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
          "commitDate": "08/11/18 10:01 AM",
          "commitName": "8d99648c203004045a9339ad27258092969145d6",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "28/09/18 8:53 AM",
          "commitNameOld": "e2113500df2479dd2d8f1d8a37fdb2bb16463181",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 41.09,
          "commitsBetweenForRepo": 385,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,30 @@\n-  public void init(Configuration conf) {\n-    // Load erasure coding default policy\n-    final String defaultPolicyName \u003d conf.getTrimmed(\n-            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n-            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n+  public void init(Configuration conf) throws IOException {\n     this.policiesByName \u003d new TreeMap\u003c\u003e();\n     this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n+    this.allPersistedPolicies \u003d new TreeMap\u003c\u003e();\n \n     /**\n      * TODO: load user defined EC policy from fsImage HDFS-7859\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n \n     /*\n      * Add all System built-in policies into policy map\n      */\n     for (ErasureCodingPolicy policy :\n         SystemErasureCodingPolicies.getPolicies()) {\n       final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n       policiesByName.put(policy.getName(), info);\n       policiesByID.put(policy.getId(), info);\n+      allPersistedPolicies.put(policy.getId(),\n+          new ErasureCodingPolicyInfo(policy));\n     }\n \n-    if (!defaultPolicyName.isEmpty()) {\n-      final ErasureCodingPolicyInfo info \u003d\n-          policiesByName.get(defaultPolicyName);\n-      if (info \u003d\u003d null) {\n-        String names \u003d policiesByName.values()\n-            .stream().map((pi) -\u003e pi.getPolicy().getName())\n-            .collect(Collectors.joining(\", \"));\n-        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n-                + \"valid policy. Please choose from list of available \"\n-                + \"policies: [%s]\",\n-            defaultPolicyName,\n-            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n-            names);\n-        throw new HadoopIllegalArgumentException(msg);\n-      }\n-      info.setState(ErasureCodingPolicyState.ENABLED);\n-      enabledPoliciesByName.put(info.getPolicy().getName(), info.getPolicy());\n-    }\n-    enabledPolicies \u003d\n-        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n-    allPolicies \u003d\n-        policiesByName.values().toArray(new ErasureCodingPolicyInfo[0]);\n-\n+    enableDefaultPolicy(conf);\n+    updatePolicies();\n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Configuration conf) throws IOException {\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.allPersistedPolicies \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n      policiesByName.put(policy.getName(), info);\n      policiesByID.put(policy.getId(), info);\n      allPersistedPolicies.put(policy.getId(),\n          new ErasureCodingPolicyInfo(policy));\n    }\n\n    enableDefaultPolicy(conf);\n    updatePolicies();\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14039. ec -listPolicies doesn\u0027t show correct state for the default policy when the default is not RS(6,3). Contributed by Kitti Nanasi.\n\nSigned-off-by: Xiao Chen \u003cxiao@apache.org\u003e\n",
          "commitDate": "08/11/18 10:01 AM",
          "commitName": "8d99648c203004045a9339ad27258092969145d6",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "28/09/18 8:53 AM",
          "commitNameOld": "e2113500df2479dd2d8f1d8a37fdb2bb16463181",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 41.09,
          "commitsBetweenForRepo": 385,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,30 @@\n-  public void init(Configuration conf) {\n-    // Load erasure coding default policy\n-    final String defaultPolicyName \u003d conf.getTrimmed(\n-            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n-            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n+  public void init(Configuration conf) throws IOException {\n     this.policiesByName \u003d new TreeMap\u003c\u003e();\n     this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n+    this.allPersistedPolicies \u003d new TreeMap\u003c\u003e();\n \n     /**\n      * TODO: load user defined EC policy from fsImage HDFS-7859\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n \n     /*\n      * Add all System built-in policies into policy map\n      */\n     for (ErasureCodingPolicy policy :\n         SystemErasureCodingPolicies.getPolicies()) {\n       final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n       policiesByName.put(policy.getName(), info);\n       policiesByID.put(policy.getId(), info);\n+      allPersistedPolicies.put(policy.getId(),\n+          new ErasureCodingPolicyInfo(policy));\n     }\n \n-    if (!defaultPolicyName.isEmpty()) {\n-      final ErasureCodingPolicyInfo info \u003d\n-          policiesByName.get(defaultPolicyName);\n-      if (info \u003d\u003d null) {\n-        String names \u003d policiesByName.values()\n-            .stream().map((pi) -\u003e pi.getPolicy().getName())\n-            .collect(Collectors.joining(\", \"));\n-        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n-                + \"valid policy. Please choose from list of available \"\n-                + \"policies: [%s]\",\n-            defaultPolicyName,\n-            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n-            names);\n-        throw new HadoopIllegalArgumentException(msg);\n-      }\n-      info.setState(ErasureCodingPolicyState.ENABLED);\n-      enabledPoliciesByName.put(info.getPolicy().getName(), info.getPolicy());\n-    }\n-    enabledPolicies \u003d\n-        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n-    allPolicies \u003d\n-        policiesByName.values().toArray(new ErasureCodingPolicyInfo[0]);\n-\n+    enableDefaultPolicy(conf);\n+    updatePolicies();\n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Configuration conf) throws IOException {\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.allPersistedPolicies \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n      policiesByName.put(policy.getName(), info);\n      policiesByID.put(policy.getId(), info);\n      allPersistedPolicies.put(policy.getId(),\n          new ErasureCodingPolicyInfo(policy));\n    }\n\n    enableDefaultPolicy(conf);\n    updatePolicies();\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e565b5277d5b890dad107fe85e295a3907e4bfc1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12682. ECAdmin -listPolicies will always show SystemErasureCodingPolicies state as DISABLED.\n",
      "commitDate": "02/11/17 9:27 PM",
      "commitName": "e565b5277d5b890dad107fe85e295a3907e4bfc1",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "19/10/17 6:42 PM",
      "commitNameOld": "ce7cf66e5ed74c124afdb5a6902fbf297211cc04",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 14.11,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   public void init(Configuration conf) {\n     // Load erasure coding default policy\n     final String defaultPolicyName \u003d conf.getTrimmed(\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n     this.policiesByName \u003d new TreeMap\u003c\u003e();\n     this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n \n     /**\n      * TODO: load user defined EC policy from fsImage HDFS-7859\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n \n     /*\n      * Add all System built-in policies into policy map\n      */\n     for (ErasureCodingPolicy policy :\n         SystemErasureCodingPolicies.getPolicies()) {\n-      policiesByName.put(policy.getName(), policy);\n-      policiesByID.put(policy.getId(), policy);\n+      final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n+      policiesByName.put(policy.getName(), info);\n+      policiesByID.put(policy.getId(), info);\n     }\n \n-    if (!defaultPolicyName.trim().isEmpty()) {\n-      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(defaultPolicyName);\n-      if (ecPolicy \u003d\u003d null) {\n+    if (!defaultPolicyName.isEmpty()) {\n+      final ErasureCodingPolicyInfo info \u003d\n+          policiesByName.get(defaultPolicyName);\n+      if (info \u003d\u003d null) {\n         String names \u003d policiesByName.values()\n-            .stream().map(ErasureCodingPolicy::getName)\n+            .stream().map((pi) -\u003e pi.getPolicy().getName())\n             .collect(Collectors.joining(\", \"));\n         String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                 + \"valid policy. Please choose from list of available \"\n                 + \"policies: [%s]\",\n             defaultPolicyName,\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n             names);\n         throw new HadoopIllegalArgumentException(msg);\n       }\n-      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n+      info.setState(ErasureCodingPolicyState.ENABLED);\n+      enabledPoliciesByName.put(info.getPolicy().getName(), info.getPolicy());\n     }\n     enabledPolicies \u003d\n         enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n-    allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n+    allPolicies \u003d\n+        policiesByName.values().toArray(new ErasureCodingPolicyInfo[0]);\n \n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Load erasure coding default policy\n    final String defaultPolicyName \u003d conf.getTrimmed(\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      final ErasureCodingPolicyInfo info \u003d new ErasureCodingPolicyInfo(policy);\n      policiesByName.put(policy.getName(), info);\n      policiesByID.put(policy.getId(), info);\n    }\n\n    if (!defaultPolicyName.isEmpty()) {\n      final ErasureCodingPolicyInfo info \u003d\n          policiesByName.get(defaultPolicyName);\n      if (info \u003d\u003d null) {\n        String names \u003d policiesByName.values()\n            .stream().map((pi) -\u003e pi.getPolicy().getName())\n            .collect(Collectors.joining(\", \"));\n        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                + \"valid policy. Please choose from list of available \"\n                + \"policies: [%s]\",\n            defaultPolicyName,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            names);\n        throw new HadoopIllegalArgumentException(msg);\n      }\n      info.setState(ErasureCodingPolicyState.ENABLED);\n      enabledPoliciesByName.put(info.getPolicy().getName(), info.getPolicy());\n    }\n    enabledPolicies \u003d\n        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n    allPolicies \u003d\n        policiesByName.values().toArray(new ErasureCodingPolicyInfo[0]);\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "e0b3c644e186d89138d4174efe0cbe77a0200315": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12414. Ensure to use CLI command to enable/disable erasure coding policy. Contributed by Sammi Chen\n",
      "commitDate": "13/09/17 6:15 PM",
      "commitName": "e0b3c644e186d89138d4174efe0cbe77a0200315",
      "commitAuthor": "ChenSammi",
      "commitDateOld": "07/09/17 5:38 AM",
      "commitNameOld": "2adf8bed712e6d770a0d53eea198d8911ae1a258",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 6.53,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,48 @@\n   public void init(Configuration conf) {\n-    // Populate the list of enabled policies from configuration\n-    final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n-            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n-            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n+    // Load erasure coding default policy\n     final String defaultPolicyName \u003d conf.getTrimmed(\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n-    final String[] policyNames \u003d\n-            (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n     this.policiesByName \u003d new TreeMap\u003c\u003e();\n     this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n \n     /**\n      * TODO: load user defined EC policy from fsImage HDFS-7859\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n \n     /*\n      * Add all System built-in policies into policy map\n      */\n     for (ErasureCodingPolicy policy :\n         SystemErasureCodingPolicies.getPolicies()) {\n       policiesByName.put(policy.getName(), policy);\n       policiesByID.put(policy.getId(), policy);\n     }\n \n-    for (String policyName : policyNames) {\n-      if (policyName.trim().isEmpty()) {\n-        continue;\n-      }\n-      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(policyName);\n+    if (!defaultPolicyName.trim().isEmpty()) {\n+      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(defaultPolicyName);\n       if (ecPolicy \u003d\u003d null) {\n         String names \u003d policiesByName.values()\n             .stream().map(ErasureCodingPolicy::getName)\n             .collect(Collectors.joining(\", \"));\n         String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                 + \"valid policy. Please choose from list of available \"\n                 + \"policies: [%s]\",\n-            policyName,\n-            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n+            defaultPolicyName,\n+            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n             names);\n         throw new HadoopIllegalArgumentException(msg);\n       }\n       enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n     }\n     enabledPolicies \u003d\n         enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n     allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n \n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Load erasure coding default policy\n    final String defaultPolicyName \u003d conf.getTrimmed(\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      policiesByName.put(policy.getName(), policy);\n      policiesByID.put(policy.getId(), policy);\n    }\n\n    if (!defaultPolicyName.trim().isEmpty()) {\n      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(defaultPolicyName);\n      if (ecPolicy \u003d\u003d null) {\n        String names \u003d policiesByName.values()\n            .stream().map(ErasureCodingPolicy::getName)\n            .collect(Collectors.joining(\", \"));\n        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                + \"valid policy. Please choose from list of available \"\n                + \"policies: [%s]\",\n            defaultPolicyName,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            names);\n        throw new HadoopIllegalArgumentException(msg);\n      }\n      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n    }\n    enabledPolicies \u003d\n        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n    allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "2adf8bed712e6d770a0d53eea198d8911ae1a258": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12402. Refactor ErasureCodingPolicyManager and related codes. Contributed by Sammi Chen\n",
      "commitDate": "07/09/17 5:38 AM",
      "commitName": "2adf8bed712e6d770a0d53eea198d8911ae1a258",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "30/08/17 12:28 AM",
      "commitNameOld": "200b11368d3954138a9bce128c8fa763b4a503a1",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 8.21,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public void init(Configuration conf) {\n     // Populate the list of enabled policies from configuration\n     final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n             DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n             DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n     final String defaultPolicyName \u003d conf.getTrimmed(\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n     final String[] policyNames \u003d\n             (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n     this.policiesByName \u003d new TreeMap\u003c\u003e();\n     this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n \n     /**\n      * TODO: load user defined EC policy from fsImage HDFS-7859\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n \n     /*\n      * Add all System built-in policies into policy map\n      */\n     for (ErasureCodingPolicy policy :\n         SystemErasureCodingPolicies.getPolicies()) {\n       policiesByName.put(policy.getName(), policy);\n       policiesByID.put(policy.getId(), policy);\n     }\n \n     for (String policyName : policyNames) {\n       if (policyName.trim().isEmpty()) {\n         continue;\n       }\n       ErasureCodingPolicy ecPolicy \u003d policiesByName.get(policyName);\n       if (ecPolicy \u003d\u003d null) {\n         String names \u003d policiesByName.values()\n             .stream().map(ErasureCodingPolicy::getName)\n             .collect(Collectors.joining(\", \"));\n         String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                 + \"valid policy. Please choose from list of available \"\n                 + \"policies: [%s]\",\n             policyName,\n             DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n             names);\n-        throw new IllegalArgumentException(msg);\n+        throw new HadoopIllegalArgumentException(msg);\n       }\n       enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n     }\n     enabledPolicies \u003d\n         enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n     allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n \n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Populate the list of enabled policies from configuration\n    final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n    final String defaultPolicyName \u003d conf.getTrimmed(\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n    final String[] policyNames \u003d\n            (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      policiesByName.put(policy.getName(), policy);\n      policiesByID.put(policy.getId(), policy);\n    }\n\n    for (String policyName : policyNames) {\n      if (policyName.trim().isEmpty()) {\n        continue;\n      }\n      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(policyName);\n      if (ecPolicy \u003d\u003d null) {\n        String names \u003d policiesByName.values()\n            .stream().map(ErasureCodingPolicy::getName)\n            .collect(Collectors.joining(\", \"));\n        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                + \"valid policy. Please choose from list of available \"\n                + \"policies: [%s]\",\n            policyName,\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n            names);\n        throw new HadoopIllegalArgumentException(msg);\n      }\n      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n    }\n    enabledPolicies \u003d\n        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n    allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "200b11368d3954138a9bce128c8fa763b4a503a1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12258. ec -listPolicies should list all policies in system, no matter it\u0027s enabled or disabled. Contributed by Wei Zhou.\n",
      "commitDate": "30/08/17 12:28 AM",
      "commitName": "200b11368d3954138a9bce128c8fa763b4a503a1",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "16/08/17 10:17 PM",
      "commitNameOld": "96b3a6b9721e922d33fadc2459b561a85dbf9b8e",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 13.09,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,56 @@\n   public void init(Configuration conf) {\n     // Populate the list of enabled policies from configuration\n     final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n             DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n             DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n     final String defaultPolicyName \u003d conf.getTrimmed(\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n             DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n     final String[] policyNames \u003d\n             (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n-    this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n-    this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n-    this.removedPoliciesByName \u003d new TreeMap\u003c\u003e();\n+    this.policiesByName \u003d new TreeMap\u003c\u003e();\n+    this.policiesByID \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n+\n+    /**\n+     * TODO: load user defined EC policy from fsImage HDFS-7859\n+     * load persistent policies from image and editlog, which is done only once\n+     * during NameNode startup. This can be done here or in a separate method.\n+     */\n+\n+    /*\n+     * Add all System built-in policies into policy map\n+     */\n+    for (ErasureCodingPolicy policy :\n+        SystemErasureCodingPolicies.getPolicies()) {\n+      policiesByName.put(policy.getName(), policy);\n+      policiesByID.put(policy.getId(), policy);\n+    }\n+\n     for (String policyName : policyNames) {\n       if (policyName.trim().isEmpty()) {\n         continue;\n       }\n-      ErasureCodingPolicy ecPolicy \u003d\n-          SystemErasureCodingPolicies.getByName(policyName);\n+      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(policyName);\n       if (ecPolicy \u003d\u003d null) {\n-        ecPolicy \u003d userPoliciesByName.get(policyName);\n-        if (ecPolicy \u003d\u003d null) {\n-          String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n-              .stream().map(ErasureCodingPolicy::getName)\n-              .collect(Collectors.joining(\", \")) + \", \" +\n-              userPoliciesByName.values().stream()\n-              .map(ErasureCodingPolicy::getName)\n-              .collect(Collectors.joining(\", \"));\n-          String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n-              + \"valid policy. Please choose from list of available \"\n-              + \"policies: [%s]\",\n-              policyName,\n-              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n-              allPolicies);\n-          throw new IllegalArgumentException(msg);\n-        }\n+        String names \u003d policiesByName.values()\n+            .stream().map(ErasureCodingPolicy::getName)\n+            .collect(Collectors.joining(\", \"));\n+        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n+                + \"valid policy. Please choose from list of available \"\n+                + \"policies: [%s]\",\n+            policyName,\n+            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n+            names);\n+        throw new IllegalArgumentException(msg);\n       }\n       enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n     }\n+    enabledPolicies \u003d\n+        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n+    allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n \n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n-\n-    /**\n-     * TODO: HDFS-7859 persist into NameNode\n-     * load persistent policies from image and editlog, which is done only once\n-     * during NameNode startup. This can be done here or in a separate method.\n-     */\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Populate the list of enabled policies from configuration\n    final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n    final String defaultPolicyName \u003d conf.getTrimmed(\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n    final String[] policyNames \u003d\n            (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n    this.policiesByName \u003d new TreeMap\u003c\u003e();\n    this.policiesByID \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n\n    /**\n     * TODO: load user defined EC policy from fsImage HDFS-7859\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n\n    /*\n     * Add all System built-in policies into policy map\n     */\n    for (ErasureCodingPolicy policy :\n        SystemErasureCodingPolicies.getPolicies()) {\n      policiesByName.put(policy.getName(), policy);\n      policiesByID.put(policy.getId(), policy);\n    }\n\n    for (String policyName : policyNames) {\n      if (policyName.trim().isEmpty()) {\n        continue;\n      }\n      ErasureCodingPolicy ecPolicy \u003d policiesByName.get(policyName);\n      if (ecPolicy \u003d\u003d null) {\n        String names \u003d policiesByName.values()\n            .stream().map(ErasureCodingPolicy::getName)\n            .collect(Collectors.joining(\", \"));\n        String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n                + \"valid policy. Please choose from list of available \"\n                + \"policies: [%s]\",\n            policyName,\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n            names);\n        throw new IllegalArgumentException(msg);\n      }\n      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n    }\n    enabledPolicies \u003d\n        enabledPoliciesByName.values().toArray(new ErasureCodingPolicy[0]);\n    allPolicies \u003d policiesByName.values().toArray(new ErasureCodingPolicy[0]);\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "a53b8b6fdce111b1e35ad0dc563eb53d1c58462f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11975. Provide a system-default EC policy. Contributed by Huichun Lu\n",
      "commitDate": "08/08/17 7:12 PM",
      "commitName": "a53b8b6fdce111b1e35ad0dc563eb53d1c58462f",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "28/06/17 10:54 AM",
      "commitNameOld": "f99b6d19de77c6e730fed8444f8848a7e63d6130",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 41.35,
      "commitsBetweenForRepo": 271,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,51 @@\n   public void init(Configuration conf) {\n     // Populate the list of enabled policies from configuration\n-    final String[] policyNames \u003d conf.getTrimmedStrings(\n-        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n-        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n+    final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n+            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n+            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n+    final String defaultPolicyName \u003d conf.getTrimmed(\n+            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n+            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n+    final String[] policyNames \u003d\n+            (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n     this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n     this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n     this.removedPoliciesByName \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n     for (String policyName : policyNames) {\n       if (policyName.trim().isEmpty()) {\n         continue;\n       }\n       ErasureCodingPolicy ecPolicy \u003d\n           SystemErasureCodingPolicies.getByName(policyName);\n       if (ecPolicy \u003d\u003d null) {\n         ecPolicy \u003d userPoliciesByName.get(policyName);\n         if (ecPolicy \u003d\u003d null) {\n           String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n               .stream().map(ErasureCodingPolicy::getName)\n               .collect(Collectors.joining(\", \")) + \", \" +\n               userPoliciesByName.values().stream()\n               .map(ErasureCodingPolicy::getName)\n               .collect(Collectors.joining(\", \"));\n           String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n               + \"valid policy. Please choose from list of available \"\n               + \"policies: [%s]\",\n               policyName,\n               DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n               allPolicies);\n           throw new IllegalArgumentException(msg);\n         }\n       }\n       enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n     }\n \n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n \n     /**\n      * TODO: HDFS-7859 persist into NameNode\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Populate the list of enabled policies from configuration\n    final String[] enablePolicyNames \u003d conf.getTrimmedStrings(\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n            DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n    final String defaultPolicyName \u003d conf.getTrimmed(\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY,\n            DFSConfigKeys.DFS_NAMENODE_EC_SYSTEM_DEFAULT_POLICY_DEFAULT);\n    final String[] policyNames \u003d\n            (String[]) ArrayUtils.add(enablePolicyNames, defaultPolicyName);\n    this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n    this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.removedPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n    for (String policyName : policyNames) {\n      if (policyName.trim().isEmpty()) {\n        continue;\n      }\n      ErasureCodingPolicy ecPolicy \u003d\n          SystemErasureCodingPolicies.getByName(policyName);\n      if (ecPolicy \u003d\u003d null) {\n        ecPolicy \u003d userPoliciesByName.get(policyName);\n        if (ecPolicy \u003d\u003d null) {\n          String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n              .stream().map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \")) + \", \" +\n              userPoliciesByName.values().stream()\n              .map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \"));\n          String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n              + \"valid policy. Please choose from list of available \"\n              + \"policies: [%s]\",\n              policyName,\n              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n              allPolicies);\n          throw new IllegalArgumentException(msg);\n        }\n      }\n      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n    }\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n\n    /**\n     * TODO: HDFS-7859 persist into NameNode\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "5db3f9846882c51991d16853a5c431664f3f801f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11606. Add CLI cmd to remove an erasure code policy. Contributed by Tim Yao\n",
      "commitDate": "20/06/17 11:01 PM",
      "commitName": "5db3f9846882c51991d16853a5c431664f3f801f",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "24/05/17 3:45 AM",
      "commitNameOld": "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 27.8,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public void init(Configuration conf) {\n     // Populate the list of enabled policies from configuration\n     final String[] policyNames \u003d conf.getTrimmedStrings(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n     this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n     this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n+    this.removedPoliciesByName \u003d new TreeMap\u003c\u003e();\n     this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n     for (String policyName : policyNames) {\n       if (policyName.trim().isEmpty()) {\n         continue;\n       }\n       ErasureCodingPolicy ecPolicy \u003d\n           SystemErasureCodingPolicies.getByName(policyName);\n       if (ecPolicy \u003d\u003d null) {\n         ecPolicy \u003d userPoliciesByName.get(policyName);\n         if (ecPolicy \u003d\u003d null) {\n           String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n               .stream().map(ErasureCodingPolicy::getName)\n               .collect(Collectors.joining(\", \")) + \", \" +\n               userPoliciesByName.values().stream()\n               .map(ErasureCodingPolicy::getName)\n               .collect(Collectors.joining(\", \"));\n           String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n               + \"valid policy. Please choose from list of available \"\n               + \"policies: [%s]\",\n               policyName,\n               DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n               allPolicies);\n           throw new IllegalArgumentException(msg);\n         }\n       }\n       enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n     }\n \n     maxCellSize \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n \n     /**\n      * TODO: HDFS-7859 persist into NameNode\n      * load persistent policies from image and editlog, which is done only once\n      * during NameNode startup. This can be done here or in a separate method.\n      */\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Populate the list of enabled policies from configuration\n    final String[] policyNames \u003d conf.getTrimmedStrings(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n    this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n    this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.removedPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n    for (String policyName : policyNames) {\n      if (policyName.trim().isEmpty()) {\n        continue;\n      }\n      ErasureCodingPolicy ecPolicy \u003d\n          SystemErasureCodingPolicies.getByName(policyName);\n      if (ecPolicy \u003d\u003d null) {\n        ecPolicy \u003d userPoliciesByName.get(policyName);\n        if (ecPolicy \u003d\u003d null) {\n          String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n              .stream().map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \")) + \", \" +\n              userPoliciesByName.values().stream()\n              .map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \"));\n          String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n              + \"valid policy. Please choose from list of available \"\n              + \"policies: [%s]\",\n              policyName,\n              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n              allPolicies);\n          throw new IllegalArgumentException(msg);\n        }\n      }\n      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n    }\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n\n    /**\n     * TODO: HDFS-7859 persist into NameNode\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11793. Allow to enable user defined erasure coding policy. Contributed by Sammi Chen\n",
      "commitDate": "24/05/17 3:45 AM",
      "commitName": "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "27/04/17 10:18 PM",
      "commitNameOld": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 26.23,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,45 @@\n   public void init(Configuration conf) {\n-    this.loadPolicies(conf);\n+    // Populate the list of enabled policies from configuration\n+    final String[] policyNames \u003d conf.getTrimmedStrings(\n+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n+    this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n+    this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n+    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n+    for (String policyName : policyNames) {\n+      if (policyName.trim().isEmpty()) {\n+        continue;\n+      }\n+      ErasureCodingPolicy ecPolicy \u003d\n+          SystemErasureCodingPolicies.getByName(policyName);\n+      if (ecPolicy \u003d\u003d null) {\n+        ecPolicy \u003d userPoliciesByName.get(policyName);\n+        if (ecPolicy \u003d\u003d null) {\n+          String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n+              .stream().map(ErasureCodingPolicy::getName)\n+              .collect(Collectors.joining(\", \")) + \", \" +\n+              userPoliciesByName.values().stream()\n+              .map(ErasureCodingPolicy::getName)\n+              .collect(Collectors.joining(\", \"));\n+          String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n+              + \"valid policy. Please choose from list of available \"\n+              + \"policies: [%s]\",\n+              policyName,\n+              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n+              allPolicies);\n+          throw new IllegalArgumentException(msg);\n+        }\n+      }\n+      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n+    }\n+\n+    maxCellSize \u003d conf.getInt(\n+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n+        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n+\n+    /**\n+     * TODO: HDFS-7859 persist into NameNode\n+     * load persistent policies from image and editlog, which is done only once\n+     * during NameNode startup. This can be done here or in a separate method.\n+     */\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    // Populate the list of enabled policies from configuration\n    final String[] policyNames \u003d conf.getTrimmedStrings(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_DEFAULT);\n    this.userPoliciesByID \u003d new TreeMap\u003c\u003e();\n    this.userPoliciesByName \u003d new TreeMap\u003c\u003e();\n    this.enabledPoliciesByName \u003d new TreeMap\u003c\u003e();\n    for (String policyName : policyNames) {\n      if (policyName.trim().isEmpty()) {\n        continue;\n      }\n      ErasureCodingPolicy ecPolicy \u003d\n          SystemErasureCodingPolicies.getByName(policyName);\n      if (ecPolicy \u003d\u003d null) {\n        ecPolicy \u003d userPoliciesByName.get(policyName);\n        if (ecPolicy \u003d\u003d null) {\n          String allPolicies \u003d SystemErasureCodingPolicies.getPolicies()\n              .stream().map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \")) + \", \" +\n              userPoliciesByName.values().stream()\n              .map(ErasureCodingPolicy::getName)\n              .collect(Collectors.joining(\", \"));\n          String msg \u003d String.format(\"EC policy \u0027%s\u0027 specified at %s is not a \"\n              + \"valid policy. Please choose from list of available \"\n              + \"policies: [%s]\",\n              policyName,\n              DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_ENABLED_KEY,\n              allPolicies);\n          throw new IllegalArgumentException(msg);\n        }\n      }\n      enabledPoliciesByName.put(ecPolicy.getName(), ecPolicy);\n    }\n\n    maxCellSize \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EC_POLICIES_MAX_CELLSIZE_DEFAULT);\n\n    /**\n     * TODO: HDFS-7859 persist into NameNode\n     * load persistent policies from image and editlog, which is done only once\n     * during NameNode startup. This can be done here or in a separate method.\n     */\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java",
      "extendedDetails": {}
    },
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11605. Allow user to customize new erasure code policies. Contributed by Huafeng Wang\n",
      "commitDate": "27/04/17 10:18 PM",
      "commitName": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,3 @@\n+  public void init(Configuration conf) {\n+    this.loadPolicies(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration conf) {\n    this.loadPolicies(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ErasureCodingPolicyManager.java"
    }
  }
}