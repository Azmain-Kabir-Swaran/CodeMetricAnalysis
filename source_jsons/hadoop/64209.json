{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FullCredentialsTokenBinding.java",
  "functionName": "loadAWSCredentials",
  "functionId": "loadAWSCredentials",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/FullCredentialsTokenBinding.java",
  "functionStartLine": 83,
  "functionEndLine": 108,
  "numCommitsSeen": 5,
  "timeTaken": 1393,
  "changeHistory": [
    "6d0bffe17eadedd60d4599427248b0db4a7c5502"
  ],
  "changeHistoryShort": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,26 @@\n+  private void loadAWSCredentials() throws IOException {\n+    credentialOrigin \u003d AbstractS3ATokenIdentifier.createDefaultOriginMessage();\n+    Configuration conf \u003d getConfig();\n+    URI uri \u003d getCanonicalUri();\n+    // look for access keys to FS\n+    S3xLoginHelper.Login secrets \u003d S3AUtils.getAWSAccessKeys(uri, conf);\n+    if (secrets.hasLogin()) {\n+      awsCredentials \u003d new MarshalledCredentials(\n+          secrets.getUser(), secrets.getPassword(), \"\");\n+      credentialOrigin +\u003d \"; source \u003d Hadoop configuration data\";\n+    } else {\n+      // if there are none, look for the environment variables.\n+      awsCredentials \u003d MarshalledCredentialBinding.fromEnvironment(\n+          System.getenv());\n+      if (awsCredentials.isValid(\n+          MarshalledCredentials.CredentialTypeRequired.AnyNonEmpty)) {\n+        // valid tokens, so mark as origin\n+        credentialOrigin +\u003d \"; source \u003d Environment variables\";\n+      } else {\n+        credentialOrigin \u003d \"no credentials in configuration or\"\n+            + \" environment variables\";\n+      }\n+    }\n+    awsCredentials.validate(credentialOrigin +\": \",\n+        MarshalledCredentials.CredentialTypeRequired.AnyNonEmpty);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadAWSCredentials() throws IOException {\n    credentialOrigin \u003d AbstractS3ATokenIdentifier.createDefaultOriginMessage();\n    Configuration conf \u003d getConfig();\n    URI uri \u003d getCanonicalUri();\n    // look for access keys to FS\n    S3xLoginHelper.Login secrets \u003d S3AUtils.getAWSAccessKeys(uri, conf);\n    if (secrets.hasLogin()) {\n      awsCredentials \u003d new MarshalledCredentials(\n          secrets.getUser(), secrets.getPassword(), \"\");\n      credentialOrigin +\u003d \"; source \u003d Hadoop configuration data\";\n    } else {\n      // if there are none, look for the environment variables.\n      awsCredentials \u003d MarshalledCredentialBinding.fromEnvironment(\n          System.getenv());\n      if (awsCredentials.isValid(\n          MarshalledCredentials.CredentialTypeRequired.AnyNonEmpty)) {\n        // valid tokens, so mark as origin\n        credentialOrigin +\u003d \"; source \u003d Environment variables\";\n      } else {\n        credentialOrigin \u003d \"no credentials in configuration or\"\n            + \" environment variables\";\n      }\n    }\n    awsCredentials.validate(credentialOrigin +\": \",\n        MarshalledCredentials.CredentialTypeRequired.AnyNonEmpty);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/FullCredentialsTokenBinding.java"
    }
  }
}