{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirSymlinkOp.java",
  "functionName": "createSymlinkInt",
  "functionId": "createSymlinkInt___fsn-FSNamesystem__target-String__linkArg-String(modifiers-final)__dirPerms-PermissionStatus__createParent-boolean__logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
  "functionStartLine": 36,
  "functionEndLine": 82,
  "numCommitsSeen": 499,
  "timeTaken": 11742,
  "changeHistory": [
    "9b90e52f1ec22c18cd535af2a569defcef65b093",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "e57fa81d9559a93d77fd724f7792326c31a490be",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "3dadf369d550c2ae393b751cb5a184dbfe2814df",
    "65f2a4ee600dfffa5203450261da3c1989de25a9",
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
    "185e0c7b4c056b88f606362c71e4a22aae7076e0",
    "c95b878abf313507666ea018f9e6033c4c166e10"
  ],
  "changeHistoryShort": {
    "9b90e52f1ec22c18cd535af2a569defcef65b093": "Yreturntypechange",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "e57fa81d9559a93d77fd724f7792326c31a490be": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "3dadf369d550c2ae393b751cb5a184dbfe2814df": "Ybodychange",
    "65f2a4ee600dfffa5203450261da3c1989de25a9": "Ybodychange",
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": "Ymultichange(Yexceptionschange,Ybodychange)",
    "185e0c7b4c056b88f606362c71e4a22aae7076e0": "Ybodychange",
    "c95b878abf313507666ea018f9e6033c4c166e10": "Ybodychange"
  },
  "changeHistoryDetails": {
    "9b90e52f1ec22c18cd535af2a569defcef65b093": {
      "type": "Yreturntypechange",
      "commitMessage": "HDFS-11641. Reduce cost of audit logging by using FileStatus instead of HdfsFileStatus. Contributed by Daryn Sharp.\n",
      "commitDate": "16/05/17 9:28 AM",
      "commitName": "9b90e52f1ec22c18cd535af2a569defcef65b093",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 203.76,
      "commitsBetweenForRepo": 1218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n-  static HdfsFileStatus createSymlinkInt(\n+  static FileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n     if (FSDirectory.isReservedName(target) || target.isEmpty()\n         || FSDirectory.isExactReservedName(target)) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, link, DirOp.WRITE_LINK);\n       link \u003d iip.getPath();\n       if (!createParent) {\n         fsd.verifyParentDir(iip);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()\n        || FSDirectory.isExactReservedName(target)) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, link, DirOp.WRITE_LINK);\n      link \u003d iip.getPath();\n      if (!createParent) {\n        fsd.verifyParentDir(iip);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {
        "oldValue": "HdfsFileStatus",
        "newValue": "FileStatus"
      }
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "07/10/16 3:20 PM",
      "commitNameOld": "e57fa81d9559a93d77fd724f7792326c31a490be",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 17.0,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   static HdfsFileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n     if (FSDirectory.isReservedName(target) || target.isEmpty()\n         || FSDirectory.isExactReservedName(target)) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      iip \u003d fsd.resolvePathForWrite(pc, link, false);\n+      iip \u003d fsd.resolvePath(pc, link, DirOp.WRITE_LINK);\n       link \u003d iip.getPath();\n       if (!createParent) {\n         fsd.verifyParentDir(iip);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()\n        || FSDirectory.isExactReservedName(target)) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, link, DirOp.WRITE_LINK);\n      link \u003d iip.getPath();\n      if (!createParent) {\n        fsd.verifyParentDir(iip);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "e57fa81d9559a93d77fd724f7792326c31a490be": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10980. Optimize check for existence of parent directory. Contributed by Daryn Sharp.\n",
      "commitDate": "07/10/16 3:20 PM",
      "commitName": "e57fa81d9559a93d77fd724f7792326c31a490be",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/09/16 11:02 AM",
      "commitNameOld": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 31.18,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   static HdfsFileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n     if (FSDirectory.isReservedName(target) || target.isEmpty()\n         || FSDirectory.isExactReservedName(target)) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePathForWrite(pc, link, false);\n       link \u003d iip.getPath();\n       if (!createParent) {\n-        fsd.verifyParentDir(iip, link);\n+        fsd.verifyParentDir(iip);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()\n        || FSDirectory.isExactReservedName(target)) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePathForWrite(pc, link, false);\n      link \u003d iip.getPath();\n      if (!createParent) {\n        fsd.verifyParentDir(iip);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   static HdfsFileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n     if (FSDirectory.isReservedName(target) || target.isEmpty()\n         || FSDirectory.isExactReservedName(target)) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      link \u003d fsd.resolvePath(pc, link);\n-      iip \u003d fsd.getINodesInPath4Write(link, false);\n+      iip \u003d fsd.resolvePathForWrite(pc, link, false);\n+      link \u003d iip.getPath();\n       if (!createParent) {\n         fsd.verifyParentDir(iip, link);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()\n        || FSDirectory.isExactReservedName(target)) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePathForWrite(pc, link, false);\n      link \u003d iip.getPath();\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "21/10/15 4:58 PM",
      "commitNameOld": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 298.91,
      "commitsBetweenForRepo": 2085,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   static HdfsFileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n     if (FSDirectory.isReservedName(target) || target.isEmpty()\n         || FSDirectory.isExactReservedName(target)) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n-      link \u003d fsd.resolvePath(pc, link, pathComponents);\n+      link \u003d fsd.resolvePath(pc, link);\n       iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n         fsd.verifyParentDir(iip, link);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()\n        || FSDirectory.isExactReservedName(target)) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link);\n      iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "3dadf369d550c2ae393b751cb5a184dbfe2814df": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7087. Ability to list /.reserved. Contributed by Xiao Chen.\n",
      "commitDate": "21/10/15 4:58 PM",
      "commitName": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "22/12/14 11:19 PM",
      "commitNameOld": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 302.69,
      "commitsBetweenForRepo": 2504,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   static HdfsFileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n-    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n+    if (FSDirectory.isReservedName(target) || target.isEmpty()\n+        || FSDirectory.isExactReservedName(target)) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     INodesInPath iip;\n     fsd.writeLock();\n     try {\n       link \u003d fsd.resolvePath(pc, link, pathComponents);\n       iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n         fsd.verifyParentDir(iip, link);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()\n        || FSDirectory.isExactReservedName(target)) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "65f2a4ee600dfffa5203450261da3c1989de25a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7543. Avoid path resolution when getting FileStatus for audit logs. Contributed by Haohui Mai.\n",
      "commitDate": "18/12/14 11:25 AM",
      "commitName": "65f2a4ee600dfffa5203450261da3c1989de25a9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/12/14 2:48 PM",
      "commitNameOld": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   static HdfsFileStatus createSymlinkInt(\n       FSNamesystem fsn, String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n     if (!DFSUtil.isValidName(link)) {\n       throw new InvalidPathException(\"Invalid link name: \" + link);\n     }\n     if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n       throw new InvalidPathException(\"Invalid target name: \" + target);\n     }\n \n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n \n     FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n+    INodesInPath iip;\n     fsd.writeLock();\n     try {\n       link \u003d fsd.resolvePath(pc, link, pathComponents);\n-      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n+      iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n         fsd.verifyParentDir(iip, link);\n       }\n       if (!fsd.isValidToCreate(link, iip)) {\n         throw new IOException(\n             \"failed to create link \" + link +\n                 \" either because the filename is invalid or the file exists\");\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n       fsd.writeUnlock();\n     }\n     NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n-    return fsd.getAuditFileInfo(link, false);\n+    return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    INodesInPath iip;\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "17/12/14 2:48 PM",
      "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private void createSymlinkInt(String target, final String linkArg,\n-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n+  static HdfsFileStatus createSymlinkInt(\n+      FSNamesystem fsn, String target, final String linkArg,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n+    if (!DFSUtil.isValidName(link)) {\n+      throw new InvalidPathException(\"Invalid link name: \" + link);\n+    }\n+    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n+      throw new InvalidPathException(\"Invalid target name: \" + target);\n+    }\n+\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+\n+    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n-      link \u003d dir.resolvePath(pc, link, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n+      link \u003d fsd.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(iip, link);\n+        fsd.verifyParentDir(iip, link);\n       }\n-      if (!dir.isValidToCreate(link, iip)) {\n-        throw new IOException(\"failed to create link \" + link \n-            +\" either because the filename is invalid or the file exists\");\n+      if (!fsd.isValidToCreate(link, iip)) {\n+        throw new IOException(\n+            \"failed to create link \" + link +\n+                \" either because the filename is invalid or the file exists\");\n       }\n-      if (isPermissionEnabled) {\n-        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n-      checkFsObjectLimit();\n+      fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n-      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(link, false);\n+      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n+    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n+    return fsd.getAuditFileInfo(link, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(link, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
            "oldMethodName": "createSymlinkInt",
            "newMethodName": "createSymlinkInt"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private void createSymlinkInt(String target, final String linkArg,\n-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n+  static HdfsFileStatus createSymlinkInt(\n+      FSNamesystem fsn, String target, final String linkArg,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n+    if (!DFSUtil.isValidName(link)) {\n+      throw new InvalidPathException(\"Invalid link name: \" + link);\n+    }\n+    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n+      throw new InvalidPathException(\"Invalid target name: \" + target);\n+    }\n+\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+\n+    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n-      link \u003d dir.resolvePath(pc, link, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n+      link \u003d fsd.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(iip, link);\n+        fsd.verifyParentDir(iip, link);\n       }\n-      if (!dir.isValidToCreate(link, iip)) {\n-        throw new IOException(\"failed to create link \" + link \n-            +\" either because the filename is invalid or the file exists\");\n+      if (!fsd.isValidToCreate(link, iip)) {\n+        throw new IOException(\n+            \"failed to create link \" + link +\n+                \" either because the filename is invalid or the file exists\");\n       }\n-      if (isPermissionEnabled) {\n-        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n-      checkFsObjectLimit();\n+      fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n-      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(link, false);\n+      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n+    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n+    return fsd.getAuditFileInfo(link, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(link, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "HdfsFileStatus"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private void createSymlinkInt(String target, final String linkArg,\n-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n+  static HdfsFileStatus createSymlinkInt(\n+      FSNamesystem fsn, String target, final String linkArg,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n+    if (!DFSUtil.isValidName(link)) {\n+      throw new InvalidPathException(\"Invalid link name: \" + link);\n+    }\n+    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n+      throw new InvalidPathException(\"Invalid target name: \" + target);\n+    }\n+\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+\n+    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n-      link \u003d dir.resolvePath(pc, link, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n+      link \u003d fsd.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(iip, link);\n+        fsd.verifyParentDir(iip, link);\n       }\n-      if (!dir.isValidToCreate(link, iip)) {\n-        throw new IOException(\"failed to create link \" + link \n-            +\" either because the filename is invalid or the file exists\");\n+      if (!fsd.isValidToCreate(link, iip)) {\n+        throw new IOException(\n+            \"failed to create link \" + link +\n+                \" either because the filename is invalid or the file exists\");\n       }\n-      if (isPermissionEnabled) {\n-        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n-      checkFsObjectLimit();\n+      fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n-      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(link, false);\n+      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n+    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n+    return fsd.getAuditFileInfo(link, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(link, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private void createSymlinkInt(String target, final String linkArg,\n-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n+  static HdfsFileStatus createSymlinkInt(\n+      FSNamesystem fsn, String target, final String linkArg,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n+    if (!DFSUtil.isValidName(link)) {\n+      throw new InvalidPathException(\"Invalid link name: \" + link);\n+    }\n+    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n+      throw new InvalidPathException(\"Invalid target name: \" + target);\n+    }\n+\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+\n+    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n-      link \u003d dir.resolvePath(pc, link, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n+      link \u003d fsd.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(iip, link);\n+        fsd.verifyParentDir(iip, link);\n       }\n-      if (!dir.isValidToCreate(link, iip)) {\n-        throw new IOException(\"failed to create link \" + link \n-            +\" either because the filename is invalid or the file exists\");\n+      if (!fsd.isValidToCreate(link, iip)) {\n+        throw new IOException(\n+            \"failed to create link \" + link +\n+                \" either because the filename is invalid or the file exists\");\n       }\n-      if (isPermissionEnabled) {\n-        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n-      checkFsObjectLimit();\n+      fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n-      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(link, false);\n+      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n+    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n+    return fsd.getAuditFileInfo(link, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(link, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n-  private void createSymlinkInt(String target, final String linkArg,\n-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n+  static HdfsFileStatus createSymlinkInt(\n+      FSNamesystem fsn, String target, final String linkArg,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n       throws IOException {\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     String link \u003d linkArg;\n+    if (!DFSUtil.isValidName(link)) {\n+      throw new InvalidPathException(\"Invalid link name: \" + link);\n+    }\n+    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n+      throw new InvalidPathException(\"Invalid target name: \" + target);\n+    }\n+\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n-    HdfsFileStatus resultingStat \u003d null;\n-    FSPermissionChecker pc \u003d getPermissionChecker();\n-    checkOperation(OperationCategory.WRITE);\n+\n+    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n-    writeLock();\n+    fsd.writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n-      link \u003d dir.resolvePath(pc, link, pathComponents);\n-      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n+      link \u003d fsd.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(iip, link);\n+        fsd.verifyParentDir(iip, link);\n       }\n-      if (!dir.isValidToCreate(link, iip)) {\n-        throw new IOException(\"failed to create link \" + link \n-            +\" either because the filename is invalid or the file exists\");\n+      if (!fsd.isValidToCreate(link, iip)) {\n+        throw new IOException(\n+            \"failed to create link \" + link +\n+                \" either because the filename is invalid or the file exists\");\n       }\n-      if (isPermissionEnabled) {\n-        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n-      checkFsObjectLimit();\n+      fsn.checkFsObjectLimit();\n \n       // add symbolic link to namespace\n-      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n-      resultingStat \u003d getAuditFileInfo(link, false);\n+      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n     } finally {\n-      writeUnlock();\n+      fsd.writeUnlock();\n     }\n-    getEditLog().logSync();\n-    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n+    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n+    return fsd.getAuditFileInfo(link, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus createSymlinkInt(\n      FSNamesystem fsn, String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    String link \u003d linkArg;\n    if (!DFSUtil.isValidName(link)) {\n      throw new InvalidPathException(\"Invalid link name: \" + link);\n    }\n    if (FSDirectory.isReservedName(target) || target.isEmpty()) {\n      throw new InvalidPathException(\"Invalid target name: \" + target);\n    }\n\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    fsd.writeLock();\n    try {\n      link \u003d fsd.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d fsd.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        fsd.verifyParentDir(iip, link);\n      }\n      if (!fsd.isValidToCreate(link, iip)) {\n        throw new IOException(\n            \"failed to create link \" + link +\n                \" either because the filename is invalid or the file exists\");\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      fsn.checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(fsd, link, iip, target, dirPerms, createParent, logRetryCache);\n    } finally {\n      fsd.writeUnlock();\n    }\n    NameNode.getNameNodeMetrics().incrCreateSymlinkOps();\n    return fsd.getAuditFileInfo(link, false);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldValue": "[target-String, linkArg-String(modifiers-final), dirPerms-PermissionStatus, createParent-boolean, logRetryCache-boolean]",
            "newValue": "[fsn-FSNamesystem, target-String, linkArg-String(modifiers-final), dirPerms-PermissionStatus, createParent-boolean, logRetryCache-boolean]"
          }
        }
      ]
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/12/14 11:51 AM",
      "commitNameOld": "46612c7a5135d20b20403780b47dd00654aab057",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void createSymlinkInt(String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n       throws IOException {\n     String link \u003d linkArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n       link \u003d dir.resolvePath(pc, link, pathComponents);\n       final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n       if (!createParent) {\n         dir.verifyParentDir(iip, link);\n       }\n-      if (!dir.isValidToCreate(link)) {\n+      if (!dir.isValidToCreate(link, iip)) {\n         throw new IOException(\"failed to create link \" + link \n             +\" either because the filename is invalid or the file exists\");\n       }\n       if (isPermissionEnabled) {\n         dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       checkFsObjectLimit();\n \n       // add symbolic link to namespace\n-      addSymlink(link, target, dirPerms, createParent, logRetryCache);\n+      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(link, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createSymlinkInt(String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n      throws IOException {\n    String link \u003d linkArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n      link \u003d dir.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        dir.verifyParentDir(iip, link);\n      }\n      if (!dir.isValidToCreate(link, iip)) {\n        throw new IOException(\"failed to create link \" + link \n            +\" either because the filename is invalid or the file exists\");\n      }\n      if (isPermissionEnabled) {\n        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(link, iip, target, dirPerms, createParent, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(link, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "475c6b4978045d55d1ebcea69cc9a2f24355aca2": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
      "commitDate": "05/12/14 2:17 PM",
      "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
          "commitDate": "05/12/14 2:17 PM",
          "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "05/12/14 10:55 AM",
          "commitNameOld": "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,40 @@\n   private void createSymlinkInt(String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n-      throws IOException, UnresolvedLinkException {\n+      throws IOException {\n     String link \u003d linkArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n       link \u003d dir.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(link);\n+        dir.verifyParentDir(iip, link);\n       }\n       if (!dir.isValidToCreate(link)) {\n         throw new IOException(\"failed to create link \" + link \n             +\" either because the filename is invalid or the file exists\");\n       }\n       if (isPermissionEnabled) {\n-        checkAncestorAccess(pc, link, FsAction.WRITE);\n+        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(link, target, dirPerms, createParent, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(link, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void createSymlinkInt(String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n      throws IOException {\n    String link \u003d linkArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n      link \u003d dir.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        dir.verifyParentDir(iip, link);\n      }\n      if (!dir.isValidToCreate(link)) {\n        throw new IOException(\"failed to create link \" + link \n            +\" either because the filename is invalid or the file exists\");\n      }\n      if (isPermissionEnabled) {\n        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(link, target, dirPerms, createParent, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(link, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[IOException, UnresolvedLinkException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7474. Avoid resolving path in FSPermissionChecker. Contributed by Jing Zhao.\n",
          "commitDate": "05/12/14 2:17 PM",
          "commitName": "475c6b4978045d55d1ebcea69cc9a2f24355aca2",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "05/12/14 10:55 AM",
          "commitNameOld": "6a5596e3b4443462fc86f800b3c2eb839d44c3bd",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,40 @@\n   private void createSymlinkInt(String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n-      throws IOException, UnresolvedLinkException {\n+      throws IOException {\n     String link \u003d linkArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n       link \u003d dir.resolvePath(pc, link, pathComponents);\n+      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n       if (!createParent) {\n-        dir.verifyParentDir(link);\n+        dir.verifyParentDir(iip, link);\n       }\n       if (!dir.isValidToCreate(link)) {\n         throw new IOException(\"failed to create link \" + link \n             +\" either because the filename is invalid or the file exists\");\n       }\n       if (isPermissionEnabled) {\n-        checkAncestorAccess(pc, link, FsAction.WRITE);\n+        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(link, target, dirPerms, createParent, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(link, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void createSymlinkInt(String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n      throws IOException {\n    String link \u003d linkArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n      link \u003d dir.resolvePath(pc, link, pathComponents);\n      final INodesInPath iip \u003d dir.getINodesInPath4Write(link, false);\n      if (!createParent) {\n        dir.verifyParentDir(iip, link);\n      }\n      if (!dir.isValidToCreate(link)) {\n        throw new IOException(\"failed to create link \" + link \n            +\" either because the filename is invalid or the file exists\");\n      }\n      if (isPermissionEnabled) {\n        dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(link, target, dirPerms, createParent, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(link, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "185e0c7b4c056b88f606362c71e4a22aae7076e0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7462. Consolidate implementation of mkdirs() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "02/12/14 2:53 PM",
      "commitName": "185e0c7b4c056b88f606362c71e4a22aae7076e0",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "01/12/14 9:48 PM",
      "commitNameOld": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void createSymlinkInt(String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n       throws IOException, UnresolvedLinkException {\n     String link \u003d linkArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n       link \u003d dir.resolvePath(pc, link, pathComponents);\n       if (!createParent) {\n-        verifyParentDir(link);\n+        dir.verifyParentDir(link);\n       }\n       if (!dir.isValidToCreate(link)) {\n         throw new IOException(\"failed to create link \" + link \n             +\" either because the filename is invalid or the file exists\");\n       }\n       if (isPermissionEnabled) {\n         checkAncestorAccess(pc, link, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(link, target, dirPerms, createParent, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(link, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createSymlinkInt(String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n      throws IOException, UnresolvedLinkException {\n    String link \u003d linkArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n      link \u003d dir.resolvePath(pc, link, pathComponents);\n      if (!createParent) {\n        dir.verifyParentDir(link);\n      }\n      if (!dir.isValidToCreate(link)) {\n        throw new IOException(\"failed to create link \" + link \n            +\" either because the filename is invalid or the file exists\");\n      }\n      if (isPermissionEnabled) {\n        checkAncestorAccess(pc, link, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(link, target, dirPerms, createParent, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(link, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "c95b878abf313507666ea018f9e6033c4c166e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7415. Move FSNameSystem.resolvePath() to FSDirectory. Contributed by Haohui Mai.\n",
      "commitDate": "20/11/14 7:23 PM",
      "commitName": "c95b878abf313507666ea018f9e6033c4c166e10",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/11/14 5:33 PM",
      "commitNameOld": "dcb8e24427b02e2f3ff9a12d2eb1eb878e3443bb",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void createSymlinkInt(String target, final String linkArg,\n       PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n       throws IOException, UnresolvedLinkException {\n     String link \u003d linkArg;\n     if (NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n           + target + \" link\u003d\" + link);\n     }\n     HdfsFileStatus resultingStat \u003d null;\n     FSPermissionChecker pc \u003d getPermissionChecker();\n     checkOperation(OperationCategory.WRITE);\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n-      link \u003d resolvePath(link, pathComponents);\n+      link \u003d dir.resolvePath(pc, link, pathComponents);\n       if (!createParent) {\n         verifyParentDir(link);\n       }\n       if (!dir.isValidToCreate(link)) {\n         throw new IOException(\"failed to create link \" + link \n             +\" either because the filename is invalid or the file exists\");\n       }\n       if (isPermissionEnabled) {\n         checkAncestorAccess(pc, link, FsAction.WRITE);\n       }\n       // validate that we have enough inodes.\n       checkFsObjectLimit();\n \n       // add symbolic link to namespace\n       addSymlink(link, target, dirPerms, createParent, logRetryCache);\n       resultingStat \u003d getAuditFileInfo(link, false);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createSymlinkInt(String target, final String linkArg,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache) \n      throws IOException, UnresolvedLinkException {\n    String link \u003d linkArg;\n    if (NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.createSymlink: target\u003d\"\n          + target + \" link\u003d\" + link);\n    }\n    HdfsFileStatus resultingStat \u003d null;\n    FSPermissionChecker pc \u003d getPermissionChecker();\n    checkOperation(OperationCategory.WRITE);\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(link);\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create symlink \" + link);\n      link \u003d dir.resolvePath(pc, link, pathComponents);\n      if (!createParent) {\n        verifyParentDir(link);\n      }\n      if (!dir.isValidToCreate(link)) {\n        throw new IOException(\"failed to create link \" + link \n            +\" either because the filename is invalid or the file exists\");\n      }\n      if (isPermissionEnabled) {\n        checkAncestorAccess(pc, link, FsAction.WRITE);\n      }\n      // validate that we have enough inodes.\n      checkFsObjectLimit();\n\n      // add symbolic link to namespace\n      addSymlink(link, target, dirPerms, createParent, logRetryCache);\n      resultingStat \u003d getAuditFileInfo(link, false);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, \"createSymlink\", linkArg, target, resultingStat);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}