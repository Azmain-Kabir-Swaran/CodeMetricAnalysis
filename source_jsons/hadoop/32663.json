{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "registerWithRM",
  "functionId": "registerWithRM",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 382,
  "functionEndLine": 486,
  "numCommitsSeen": 135,
  "timeTaken": 14618,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "f659485ee83f3f34e3717631983adfc8fa1e53dc",
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
    "e718ac597f2225cb4946e1ac4b3986c336645643",
    "4d53ef7eefb14661d824924e503a910de1ae997f",
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
    "d4f73e7e27141ce0a88edb96fa304418a97a82a3",
    "3f93ac0733058238a2c8f23960c986c71dca0e02",
    "fa3bc3405dc2f8497faab45ba5c4de2caf4c29bc",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
    "fc07464d1a48b0413da5e921614430e41263fdb7",
    "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58",
    "b37da52a1c4fb3da2bd21bfadc5ec61c5f953a59",
    "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52",
    "95897ca14b7abd7fe047fdcf150473a8a2cbb024",
    "23c325ad47e305989b7f2cf172bd709f73dd26d1",
    "1c4047b0e46e95a92509de2e59a93433f5968538",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19",
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "ca8024673178fa1c80224b390dfba932921693d9",
    "68148989bfb8b893529eb9920d849bce0dd575ec",
    "a35c7fd80bcb19a7c6a7b9234d782adaf2d51529",
    "fbb55784d93e1a819daf55d936e864d344579cbf",
    "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
    "16fedf5473cd715e3970da700b24ca10656e3576",
    "66e90b205a079c7056bd85e6c5e3dbb2a96e7461",
    "2ba66a54f5004f93b53d40b6a1cc5029abf5e609",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "432c4a6ffcbb233e0414365e40b61ac61997d728",
    "cbdb07f4ca358b9507296868a913977ad82ed716",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
    "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": "Ybodychange",
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": "Ybodychange",
    "e718ac597f2225cb4946e1ac4b3986c336645643": "Ybodychange",
    "4d53ef7eefb14661d824924e503a910de1ae997f": "Ybodychange",
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d": "Ybodychange",
    "d4f73e7e27141ce0a88edb96fa304418a97a82a3": "Ybodychange",
    "3f93ac0733058238a2c8f23960c986c71dca0e02": "Ybodychange",
    "fa3bc3405dc2f8497faab45ba5c4de2caf4c29bc": "Ybodychange",
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": "Ybodychange",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": "Ybodychange",
    "fc07464d1a48b0413da5e921614430e41263fdb7": "Ybodychange",
    "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58": "Ybodychange",
    "b37da52a1c4fb3da2bd21bfadc5ec61c5f953a59": "Ybodychange",
    "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52": "Ybodychange",
    "95897ca14b7abd7fe047fdcf150473a8a2cbb024": "Ybodychange",
    "23c325ad47e305989b7f2cf172bd709f73dd26d1": "Ybodychange",
    "1c4047b0e46e95a92509de2e59a93433f5968538": "Ybodychange",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": "Ybodychange",
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7": "Ybodychange",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": "Ybodychange",
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ymultichange(Yexceptionschange,Ybodychange)",
    "ca8024673178fa1c80224b390dfba932921693d9": "Ybodychange",
    "68148989bfb8b893529eb9920d849bce0dd575ec": "Ybodychange",
    "a35c7fd80bcb19a7c6a7b9234d782adaf2d51529": "Yexceptionschange",
    "fbb55784d93e1a819daf55d936e864d344579cbf": "Ybodychange",
    "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963": "Ymodifierchange",
    "16fedf5473cd715e3970da700b24ca10656e3576": "Ybodychange",
    "66e90b205a079c7056bd85e6c5e3dbb2a96e7461": "Ybodychange",
    "2ba66a54f5004f93b53d40b6a1cc5029abf5e609": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "432c4a6ffcbb233e0414365e40b61ac61997d728": "Ybodychange",
    "cbdb07f4ca358b9507296868a913977ad82ed716": "Ybodychange",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": "Ybodychange",
    "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/02/19 7:31 AM",
      "commitNameOld": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 21.33,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,105 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n     Set\u003cNodeAttribute\u003e nodeAttributes \u003d\n         nodeAttributesHandler.getNodeAttributesForRegistration();\n \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource, nodeAttributes);\n \n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       if (logAggregationEnabled) {\n         // pull log aggregation status for application running in this NM\n         List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n             context.getNMLogAggregationStatusTracker()\n                 .pullCachedLogAggregationReports();\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"The cache log aggregation status size:\"\n-              + logAggregationReports.size());\n-        }\n+        LOG.debug(\"The cache log aggregation status size:{}\",\n+            logAggregationReports.size());\n         if (logAggregationReports !\u003d null\n             \u0026\u0026 !logAggregationReports.isEmpty()) {\n           request.setLogAggregationReportsForApps(logAggregationReports);\n         }\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n     successfullRegistrationMsg.append(nodeAttributesHandler\n         .verifyRMRegistrationResponseForNodeAttributes(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n    Set\u003cNodeAttribute\u003e nodeAttributes \u003d\n        nodeAttributesHandler.getNodeAttributesForRegistration();\n\n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource, nodeAttributes);\n\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      if (logAggregationEnabled) {\n        // pull log aggregation status for application running in this NM\n        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n            context.getNMLogAggregationStatusTracker()\n                .pullCachedLogAggregationReports();\n        LOG.debug(\"The cache log aggregation status size:{}\",\n            logAggregationReports.size());\n        if (logAggregationReports !\u003d null\n            \u0026\u0026 !logAggregationReports.isEmpty()) {\n          request.setLogAggregationReportsForApps(logAggregationReports);\n        }\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n    successfullRegistrationMsg.append(nodeAttributesHandler\n        .verifyRMRegistrationResponseForNodeAttributes(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "f659485ee83f3f34e3717631983adfc8fa1e53dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8925. Updating distributed node attributes only when necessary. Contributed by Tao Yang.\n",
      "commitDate": "20/12/18 6:56 PM",
      "commitName": "f659485ee83f3f34e3717631983adfc8fa1e53dc",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "13/09/18 7:21 AM",
      "commitNameOld": "39c1ea1ed454b6c61f0985fc951f20913ed964fb",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 98.52,
      "commitsBetweenForRepo": 824,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,107 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n+    Set\u003cNodeAttribute\u003e nodeAttributes \u003d\n+        nodeAttributesHandler.getNodeAttributesForRegistration();\n \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n-              nodeLabels, physicalResource);\n+              nodeLabels, physicalResource, nodeAttributes);\n \n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       if (logAggregationEnabled) {\n         // pull log aggregation status for application running in this NM\n         List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n             context.getNMLogAggregationStatusTracker()\n                 .pullCachedLogAggregationReports();\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"The cache log aggregation status size:\"\n               + logAggregationReports.size());\n         }\n         if (logAggregationReports !\u003d null\n             \u0026\u0026 !logAggregationReports.isEmpty()) {\n           request.setLogAggregationReportsForApps(logAggregationReports);\n         }\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n+    successfullRegistrationMsg.append(nodeAttributesHandler\n+        .verifyRMRegistrationResponseForNodeAttributes(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n    Set\u003cNodeAttribute\u003e nodeAttributes \u003d\n        nodeAttributesHandler.getNodeAttributesForRegistration();\n\n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource, nodeAttributes);\n\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      if (logAggregationEnabled) {\n        // pull log aggregation status for application running in this NM\n        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n            context.getNMLogAggregationStatusTracker()\n                .pullCachedLogAggregationReports();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"The cache log aggregation status size:\"\n              + logAggregationReports.size());\n        }\n        if (logAggregationReports !\u003d null\n            \u0026\u0026 !logAggregationReports.isEmpty()) {\n          request.setLogAggregationReportsForApps(logAggregationReports);\n        }\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n    successfullRegistrationMsg.append(nodeAttributesHandler\n        .verifyRMRegistrationResponseForNodeAttributes(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7952. RM should be able to recover log aggregation status after restart/fail-over. (Xuan Gong via wangda)\n\nChange-Id: I725c9afe64831eda0aa6b0bebdbc79d2dd165707\n",
      "commitDate": "15/03/18 1:26 PM",
      "commitName": "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 3:46 PM",
      "commitNameOld": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.86,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,103 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource);\n \n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n+      if (logAggregationEnabled) {\n+        // pull log aggregation status for application running in this NM\n+        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n+            context.getNMLogAggregationStatusTracker()\n+                .pullCachedLogAggregationReports();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"The cache log aggregation status size:\"\n+              + logAggregationReports.size());\n+        }\n+        if (logAggregationReports !\u003d null\n+            \u0026\u0026 !logAggregationReports.isEmpty()) {\n+          request.setLogAggregationReportsForApps(logAggregationReports);\n+        }\n+      }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n\n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      if (logAggregationEnabled) {\n        // pull log aggregation status for application running in this NM\n        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n            context.getNMLogAggregationStatusTracker()\n                .pullCachedLogAggregationReports();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"The cache log aggregation status size:\"\n              + logAggregationReports.size());\n        }\n        if (logAggregationReports !\u003d null\n            \u0026\u0026 !logAggregationReports.isEmpty()) {\n          request.setLogAggregationReportsForApps(logAggregationReports);\n        }\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "e718ac597f2225cb4946e1ac4b3986c336645643": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\"\n\nThis reverts commit 4d53ef7eefb14661d824924e503a910de1ae997f.\n",
      "commitDate": "07/03/18 3:46 PM",
      "commitName": "e718ac597f2225cb4946e1ac4b3986c336645643",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/03/18 11:30 AM",
      "commitNameOld": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,89 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource);\n \n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n-      if (logAggregationEnabled) {\n-        // pull log aggregation status for application running in this NM\n-        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n-            context.getNMLogAggregationStatusTracker()\n-                .pullCachedLogAggregationReports();\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"The cache log aggregation status size:\"\n-              + logAggregationReports.size());\n-        }\n-        if (logAggregationReports !\u003d null\n-            \u0026\u0026 !logAggregationReports.isEmpty()) {\n-          request.setLogAggregationReportsForApps(logAggregationReports);\n-        }\n-      }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n\n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "4d53ef7eefb14661d824924e503a910de1ae997f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7891. LogAggregationIndexedFileController should support read from HAR file. (Xuan Gong via wangda)\n\nChange-Id: Ie16e34039d57df50128c73b37516ad0bc7c9590e\n",
      "commitDate": "07/03/18 11:30 AM",
      "commitName": "4d53ef7eefb14661d824924e503a910de1ae997f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/12/17 9:11 PM",
      "commitNameOld": "7efc4f76885348730728c0201dd0d1a89b213e9c",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 84.6,
      "commitsBetweenForRepo": 509,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,103 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource);\n \n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n+      if (logAggregationEnabled) {\n+        // pull log aggregation status for application running in this NM\n+        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n+            context.getNMLogAggregationStatusTracker()\n+                .pullCachedLogAggregationReports();\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"The cache log aggregation status size:\"\n+              + logAggregationReports.size());\n+        }\n+        if (logAggregationReports !\u003d null\n+            \u0026\u0026 !logAggregationReports.isEmpty()) {\n+          request.setLogAggregationReportsForApps(logAggregationReports);\n+        }\n+      }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n\n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      if (logAggregationEnabled) {\n        // pull log aggregation status for application running in this NM\n        List\u003cLogAggregationReport\u003e logAggregationReports \u003d\n            context.getNMLogAggregationStatusTracker()\n                .pullCachedLogAggregationReports();\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"The cache log aggregation status size:\"\n              + logAggregationReports.size());\n        }\n        if (logAggregationReports !\u003d null\n            \u0026\u0026 !logAggregationReports.isEmpty()) {\n          request.setLogAggregationReportsForApps(logAggregationReports);\n        }\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "20/08/17 10:24 AM",
      "commitNameOld": "7a82d7bcea8124e1b65c275fac15bf2047d17471",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.62,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n  \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource);\n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n-    LOG.info(successfullRegistrationMsg);\n+    LOG.info(successfullRegistrationMsg.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg.toString());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3839. Quit throwing NMNotYetReadyException. Contributed by Manikandan R\n",
      "commitDate": "08/05/17 3:14 PM",
      "commitName": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "19/04/17 12:23 PM",
      "commitNameOld": "46940d92e2b17c627eb17a9d8fc6cec9c3715592",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 19.12,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,88 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n  \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource);\n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n-    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n-    this.context.getContainerManager().setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "d4f73e7e27141ce0a88edb96fa304418a97a82a3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11574. Spelling mistakes in the Java source. Contributed by Hu Xiaodong.\n",
      "commitDate": "24/03/17 9:38 AM",
      "commitName": "d4f73e7e27141ce0a88edb96fa304418a97a82a3",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "15/11/16 7:56 AM",
      "commitNameOld": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 129.03,
      "commitsBetweenForRepo": 682,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,90 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n  \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels, physicalResource);\n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n-        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n+        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     this.context.getContainerManager().setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Received SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    this.context.getContainerManager().setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "3f93ac0733058238a2c8f23960c986c71dca0e02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5356. NodeManager should communicate physical resource capability to ResourceManager. Contributed by Inigo Goiri\n",
      "commitDate": "08/11/16 2:01 PM",
      "commitName": "3f93ac0733058238a2c8f23960c986c71dca0e02",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/11/16 7:31 AM",
      "commitNameOld": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,90 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n  \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n-              nodeLabels);\n+              nodeLabels, physicalResource);\n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId);\n \n     Resource newResource \u003d regNMResponse.getResource();\n     if (newResource !\u003d null) {\n       updateNMResource(newResource);\n       successfullRegistrationMsg.append(\" with updated total resource of \")\n           .append(this.totalResource);\n     } else {\n       successfullRegistrationMsg.append(\" with total resource of \")\n           .append(this.totalResource);\n     }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     this.context.getContainerManager().setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels, physicalResource);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    this.context.getContainerManager().setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "fa3bc3405dc2f8497faab45ba5c4de2caf4c29bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4832. NM side resource value should get updated if change applied in RM side. Contributed by Junping Du\n",
      "commitDate": "17/05/16 12:52 PM",
      "commitName": "fa3bc3405dc2f8497faab45ba5c4de2caf4c29bc",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/05/16 5:54 PM",
      "commitNameOld": "f45bc5a83ed2f2292ecf1f4c990b7153d8051fc9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,90 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n  \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels);\n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n-        .append(this.nodeId).append(\" with total resource of \")\n-        .append(this.totalResource);\n+        .append(this.nodeId);\n+\n+    Resource newResource \u003d regNMResponse.getResource();\n+    if (newResource !\u003d null) {\n+      updateNMResource(newResource);\n+      successfullRegistrationMsg.append(\" with updated total resource of \")\n+          .append(this.totalResource);\n+    } else {\n+      successfullRegistrationMsg.append(\" with total resource of \")\n+          .append(this.totalResource);\n+    }\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     this.context.getContainerManager().setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId);\n\n    Resource newResource \u003d regNMResponse.getResource();\n    if (newResource !\u003d null) {\n      updateNMResource(newResource);\n      successfullRegistrationMsg.append(\" with updated total resource of \")\n          .append(this.totalResource);\n    } else {\n      successfullRegistrationMsg.append(\" with total resource of \")\n          .append(this.totalResource);\n    }\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    this.context.getContainerManager().setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "f0ac18d001d97914a9ee810b1fab56c5cebff830": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2888. Corrective mechanisms for rebalancing NM container queues. (asuresh)\n",
      "commitDate": "13/05/16 1:38 PM",
      "commitName": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/04/16 8:12 PM",
      "commitNameOld": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 16.73,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,81 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n  \n     // Synchronize NM-RM registration with\n     // ContainerManagerImpl#increaseContainersResource and\n     // ContainerManagerImpl#startContainers to avoid race condition\n     // during RM recovery\n     synchronized (this.context) {\n       List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n       RegisterNodeManagerRequest request \u003d\n           RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n               nodeManagerVersionId, containerReports, getRunningApplications(),\n               nodeLabels);\n       if (containerReports !\u003d null) {\n         LOG.info(\"Registering with RM using containers :\" + containerReports);\n       }\n       regNMResponse \u003d\n           resourceTracker.registerNodeManager(request);\n       // Make sure rmIdentifier is set before we release the lock\n       this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n \n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId).append(\" with total resource of \")\n         .append(this.totalResource);\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n-    ((ContainerManagerImpl) this.context.getContainerManager())\n-      .setBlockNewContainerRequests(false);\n+    this.context.getContainerManager().setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId).append(\" with total resource of \")\n        .append(this.totalResource);\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    this.context.getContainerManager().setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1644. RM-NM protocol changes and NodeStatusUpdater implementation to support container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/09/15 9:30 AM",
      "commitNameOld": "77666105b4557d5706e5844a4ca286917d966c5f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,82 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n-    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n+    RegisterNodeManagerResponse regNMResponse;\n     Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n-    RegisterNodeManagerRequest request \u003d\n-        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n-            nodeManagerVersionId, containerReports, getRunningApplications(),\n-            nodeLabels);\n-    if (containerReports !\u003d null) {\n-      LOG.info(\"Registering with RM using containers :\" + containerReports);\n+ \n+    // Synchronize NM-RM registration with\n+    // ContainerManagerImpl#increaseContainersResource and\n+    // ContainerManagerImpl#startContainers to avoid race condition\n+    // during RM recovery\n+    synchronized (this.context) {\n+      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n+      RegisterNodeManagerRequest request \u003d\n+          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n+              nodeManagerVersionId, containerReports, getRunningApplications(),\n+              nodeLabels);\n+      if (containerReports !\u003d null) {\n+        LOG.info(\"Registering with RM using containers :\" + containerReports);\n+      }\n+      regNMResponse \u003d\n+          resourceTracker.registerNodeManager(request);\n+      // Make sure rmIdentifier is set before we release the lock\n+      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     }\n-    RegisterNodeManagerResponse regNMResponse \u003d\n-        resourceTracker.registerNodeManager(request);\n-    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n+\n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId).append(\" with total resource of \")\n         .append(this.totalResource);\n \n     successfullRegistrationMsg.append(nodeLabelsHandler\n         .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    RegisterNodeManagerResponse regNMResponse;\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n \n    // Synchronize NM-RM registration with\n    // ContainerManagerImpl#increaseContainersResource and\n    // ContainerManagerImpl#startContainers to avoid race condition\n    // during RM recovery\n    synchronized (this.context) {\n      List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n      RegisterNodeManagerRequest request \u003d\n          RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n              nodeManagerVersionId, containerReports, getRunningApplications(),\n              nodeLabels);\n      if (containerReports !\u003d null) {\n        LOG.info(\"Registering with RM using containers :\" + containerReports);\n      }\n      regNMResponse \u003d\n          resourceTracker.registerNodeManager(request);\n      // Make sure rmIdentifier is set before we release the lock\n      this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    }\n\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId).append(\" with total resource of \")\n        .append(this.totalResource);\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "fc07464d1a48b0413da5e921614430e41263fdb7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2923. Support configuration based NodeLabelsProvider Service in Distributed Node Label Configuration Setup. (Naganarasimha G R)\n",
      "commitDate": "20/08/15 11:51 AM",
      "commitName": "fc07464d1a48b0413da5e921614430e41263fdb7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/08/15 3:08 PM",
      "commitNameOld": "13604bd5f119fc81b9942190dfa366afad61bc92",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.86,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,72 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n-    Set\u003cNodeLabel\u003e nodeLabels \u003d null;\n-    if (hasNodeLabelsProvider) {\n-      nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n-      nodeLabels \u003d\n-          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n-              : nodeLabels;\n-    }\n+    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n             nodeManagerVersionId, containerReports, getRunningApplications(),\n             nodeLabels);\n     if (containerReports !\u003d null) {\n       LOG.info(\"Registering with RM using containers :\" + containerReports);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId).append(\" with total resource of \")\n         .append(this.totalResource);\n \n-    if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n-      successfullRegistrationMsg\n-          .append(\" and with following Node label(s) : {\")\n-          .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n-    } else if (hasNodeLabelsProvider) {\n-      //case where provider is set but RM did not accept the Node Labels\n-      LOG.error(regNMResponse.getDiagnosticsMessage());\n-    }\n+    successfullRegistrationMsg.append(nodeLabelsHandler\n+        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n    Set\u003cNodeLabel\u003e nodeLabels \u003d nodeLabelsHandler.getNodeLabelsForRegistration();\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n            nodeManagerVersionId, containerReports, getRunningApplications(),\n            nodeLabels);\n    if (containerReports !\u003d null) {\n      LOG.info(\"Registering with RM using containers :\" + containerReports);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId).append(\" with total resource of \")\n        .append(this.totalResource);\n\n    successfullRegistrationMsg.append(nodeLabelsHandler\n        .verifyRMRegistrationResponseForNodeLabels(regNMResponse));\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58": {
      "type": "Ybodychange",
      "commitMessage": "YARN-41. The RM should handle the graceful shutdown of the NM. Contributed by Devaraj K.\n",
      "commitDate": "04/06/15 4:59 AM",
      "commitName": "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58",
      "commitAuthor": "Junping Du",
      "commitDateOld": "26/05/15 11:38 AM",
      "commitNameOld": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.72,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,84 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n     Set\u003cNodeLabel\u003e nodeLabels \u003d null;\n     if (hasNodeLabelsProvider) {\n       nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n       nodeLabels \u003d\n           (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n               : nodeLabels;\n     }\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n             nodeManagerVersionId, containerReports, getRunningApplications(),\n             nodeLabels);\n     if (containerReports !\u003d null) {\n       LOG.info(\"Registering with RM using containers :\" + containerReports);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n+    this.registeredWithRM \u003d true;\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId).append(\" with total resource of \")\n         .append(this.totalResource);\n \n     if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n       successfullRegistrationMsg\n           .append(\" and with following Node label(s) : {\")\n           .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n     } else if (hasNodeLabelsProvider) {\n       //case where provider is set but RM did not accept the Node Labels\n       LOG.error(regNMResponse.getDiagnosticsMessage());\n     }\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n    Set\u003cNodeLabel\u003e nodeLabels \u003d null;\n    if (hasNodeLabelsProvider) {\n      nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n      nodeLabels \u003d\n          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n              : nodeLabels;\n    }\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n            nodeManagerVersionId, containerReports, getRunningApplications(),\n            nodeLabels);\n    if (containerReports !\u003d null) {\n      LOG.info(\"Registering with RM using containers :\" + containerReports);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    this.registeredWithRM \u003d true;\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId).append(\" with total resource of \")\n        .append(this.totalResource);\n\n    if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n      successfullRegistrationMsg\n          .append(\" and with following Node label(s) : {\")\n          .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n    } else if (hasNodeLabelsProvider) {\n      //case where provider is set but RM did not accept the Node Labels\n      LOG.error(regNMResponse.getDiagnosticsMessage());\n    }\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "b37da52a1c4fb3da2bd21bfadc5ec61c5f953a59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3565. NodeHeartbeatRequest/RegisterNodeManagerRequest should use NodeLabel object instead of String. (Naganarasimha G R via wangda)\n",
      "commitDate": "19/05/15 4:34 PM",
      "commitName": "b37da52a1c4fb3da2bd21bfadc5ec61c5f953a59",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/05/15 10:58 AM",
      "commitNameOld": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.23,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,83 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n-    Set\u003cString\u003e nodeLabels \u003d null;\n+    Set\u003cNodeLabel\u003e nodeLabels \u003d null;\n     if (hasNodeLabelsProvider) {\n       nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n       nodeLabels \u003d\n-          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_STRING_SET\n+          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n               : nodeLabels;\n     }\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n             nodeManagerVersionId, containerReports, getRunningApplications(),\n             nodeLabels);\n     if (containerReports !\u003d null) {\n       LOG.info(\"Registering with RM using containers :\" + containerReports);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n     successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n         .append(this.nodeId).append(\" with total resource of \")\n         .append(this.totalResource);\n \n     if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n       successfullRegistrationMsg\n           .append(\" and with following Node label(s) : {\")\n           .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n     } else if (hasNodeLabelsProvider) {\n       //case where provider is set but RM did not accept the Node Labels\n       LOG.error(regNMResponse.getDiagnosticsMessage());\n     }\n \n     LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n    Set\u003cNodeLabel\u003e nodeLabels \u003d null;\n    if (hasNodeLabelsProvider) {\n      nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n      nodeLabels \u003d\n          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_NODELABEL_SET\n              : nodeLabels;\n    }\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n            nodeManagerVersionId, containerReports, getRunningApplications(),\n            nodeLabels);\n    if (containerReports !\u003d null) {\n      LOG.info(\"Registering with RM using containers :\" + containerReports);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId).append(\" with total resource of \")\n        .append(this.totalResource);\n\n    if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n      successfullRegistrationMsg\n          .append(\" and with following Node label(s) : {\")\n          .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n    } else if (hasNodeLabelsProvider) {\n      //case where provider is set but RM did not accept the Node Labels\n      LOG.error(regNMResponse.getDiagnosticsMessage());\n    }\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2495. Allow admin specify labels from each NM (Distributed configuration for node label). (Naganarasimha G R via wangda)\n",
      "commitDate": "30/03/15 12:05 PM",
      "commitName": "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "08/01/15 11:12 AM",
      "commitNameOld": "cc2a745f7e82c9fa6de03242952347c54c52dccc",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 80.99,
      "commitsBetweenForRepo": 718,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,83 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n+    Set\u003cString\u003e nodeLabels \u003d null;\n+    if (hasNodeLabelsProvider) {\n+      nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n+      nodeLabels \u003d\n+          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_STRING_SET\n+              : nodeLabels;\n+    }\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n-          nodeManagerVersionId, containerReports, getRunningApplications());\n+            nodeManagerVersionId, containerReports, getRunningApplications(),\n+            nodeLabels);\n     if (containerReports !\u003d null) {\n       LOG.info(\"Registering with RM using containers :\" + containerReports);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n-    // if the Resourcemanager instructs NM to shutdown.\n+    // if the Resource Manager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n-        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n+        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n-    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n-        + \" with total resource of \" + this.totalResource);\n+    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n+    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n+        .append(this.nodeId).append(\" with total resource of \")\n+        .append(this.totalResource);\n+\n+    if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n+      successfullRegistrationMsg\n+          .append(\" and with following Node label(s) : {\")\n+          .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n+    } else if (hasNodeLabelsProvider) {\n+      //case where provider is set but RM did not accept the Node Labels\n+      LOG.error(regNMResponse.getDiagnosticsMessage());\n+    }\n+\n+    LOG.info(successfullRegistrationMsg);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n    Set\u003cString\u003e nodeLabels \u003d null;\n    if (hasNodeLabelsProvider) {\n      nodeLabels \u003d nodeLabelsProvider.getNodeLabels();\n      nodeLabels \u003d\n          (null \u003d\u003d nodeLabels) ? CommonNodeLabelsManager.EMPTY_STRING_SET\n              : nodeLabels;\n    }\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n            nodeManagerVersionId, containerReports, getRunningApplications(),\n            nodeLabels);\n    if (containerReports !\u003d null) {\n      LOG.info(\"Registering with RM using containers :\" + containerReports);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resource Manager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    StringBuilder successfullRegistrationMsg \u003d new StringBuilder();\n    successfullRegistrationMsg.append(\"Registered with ResourceManager as \")\n        .append(this.nodeId).append(\" with total resource of \")\n        .append(this.totalResource);\n\n    if (regNMResponse.getAreNodeLabelsAcceptedByRM()) {\n      successfullRegistrationMsg\n          .append(\" and with following Node label(s) : {\")\n          .append(StringUtils.join(\",\", nodeLabels)).append(\"}\");\n    } else if (hasNodeLabelsProvider) {\n      //case where provider is set but RM did not accept the Node Labels\n      LOG.error(regNMResponse.getDiagnosticsMessage());\n    }\n\n    LOG.info(successfullRegistrationMsg);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "95897ca14b7abd7fe047fdcf150473a8a2cbb024": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1885. Fixed a bug that RM may not send application-clean-up signal to NMs where the completed applications previously ran in case of RM restart. Contributed by Wangda Tan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603028 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/14 4:56 PM",
      "commitName": "95897ca14b7abd7fe047fdcf150473a8a2cbb024",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/05/14 5:20 PM",
      "commitNameOld": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n     List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n-          nodeManagerVersionId, containerReports);\n+          nodeManagerVersionId, containerReports, getRunningApplications());\n     if (containerReports !\u003d null) {\n       LOG.info(\"Registering with RM using containers :\" + containerReports);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n          nodeManagerVersionId, containerReports, getRunningApplications());\n    if (containerReports !\u003d null) {\n      LOG.info(\"Registering with RM using containers :\" + containerReports);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "23c325ad47e305989b7f2cf172bd709f73dd26d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2115. Replaced RegisterNodeManagerRequest\u0027s ContainerStatus with a new NMContainerStatus which has more information that is needed for work-preserving RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 5:20 PM",
      "commitName": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/05/14 5:20 PM",
      "commitNameOld": "b29434a5c8df8757e6bcdcf643df2f5756a221d9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 17.0,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,62 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n-    List\u003cContainerStatus\u003e containerStatuses \u003d getContainerStatuses();\n+    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n-          nodeManagerVersionId, containerStatuses);\n-    if (containerStatuses !\u003d null) {\n-      LOG.info(\"Registering with RM using finished containers :\"\n-          + containerStatuses);\n+          nodeManagerVersionId, containerReports);\n+    if (containerReports !\u003d null) {\n+      LOG.info(\"Registering with RM using containers :\" + containerReports);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cNMContainerStatus\u003e containerReports \u003d getNMContainerStatuses();\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n          nodeManagerVersionId, containerReports);\n    if (containerReports !\u003d null) {\n      LOG.info(\"Registering with RM using containers :\" + containerReports);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "1c4047b0e46e95a92509de2e59a93433f5968538": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1783. Fixed a bug in NodeManager\u0027s status-updater that was losing completed container statuses when NodeManager is forced to resync by the ResourceManager. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 2:36 PM",
      "commitName": "1c4047b0e46e95a92509de2e59a93433f5968538",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/11/13 9:17 PM",
      "commitNameOld": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 108.72,
      "commitsBetweenForRepo": 763,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,63 @@\n   protected void registerWithRM()\n       throws YarnException, IOException {\n-    List\u003cContainerStatus\u003e containerStatuses \u003d\n-        this.updateAndGetContainerStatuses();\n+    List\u003cContainerStatus\u003e containerStatuses \u003d getContainerStatuses();\n     RegisterNodeManagerRequest request \u003d\n         RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n           nodeManagerVersionId, containerStatuses);\n     if (containerStatuses !\u003d null) {\n       LOG.info(\"Registering with RM using finished containers :\"\n           + containerStatuses);\n     }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cContainerStatus\u003e containerStatuses \u003d getContainerStatuses();\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n          nodeManagerVersionId, containerStatuses);\n    if (containerStatuses !\u003d null) {\n      LOG.info(\"Registering with RM using finished containers :\"\n          + containerStatuses);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1210. Changed RM to start new app-attempts on RM restart only after ensuring that previous AM exited or after expiry time. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:17 PM",
      "commitName": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/10/13 5:54 PM",
      "commitNameOld": "defa7af4d3ef327c7c05807f640974e29c6d045b",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 21.18,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,64 @@\n-  protected void registerWithRM() throws YarnException, IOException {\n+  protected void registerWithRM()\n+      throws YarnException, IOException {\n+    List\u003cContainerStatus\u003e containerStatuses \u003d\n+        this.updateAndGetContainerStatuses();\n     RegisterNodeManagerRequest request \u003d\n-        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n-    request.setHttpPort(this.httpPort);\n-    request.setResource(this.totalResource);\n-    request.setNodeId(this.nodeId);\n-    request.setNMVersion(this.nodeManagerVersionId);\n+        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n+          nodeManagerVersionId, containerStatuses);\n+    if (containerStatuses !\u003d null) {\n+      LOG.info(\"Registering with RM using finished containers :\"\n+          + containerStatuses);\n+    }\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     // if ResourceManager version is too old then shutdown\n     if (!minimumResourceManagerVersion.equals(\"NONE\")){\n       if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n         minimumResourceManagerVersion \u003d nodeManagerVersionId;\n       }\n       String rmVersion \u003d regNMResponse.getRMVersion();\n       if (rmVersion \u003d\u003d null) {\n         String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n             + \"Valid version cannot be checked.\";\n         throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n             + message);\n       }\n       if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n         String message \u003d \"The Resource Manager\u0027s version (\"\n             + rmVersion +\") is less than the minimum \"\n             + \"allowed version \" + minimumResourceManagerVersion;\n         throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n             + \"version error, \" + message);\n       }\n     }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM()\n      throws YarnException, IOException {\n    List\u003cContainerStatus\u003e containerStatuses \u003d\n        this.updateAndGetContainerStatuses();\n    RegisterNodeManagerRequest request \u003d\n        RegisterNodeManagerRequest.newInstance(nodeId, httpPort, totalResource,\n          nodeManagerVersionId, containerStatuses);\n    if (containerStatuses !\u003d null) {\n      LOG.info(\"Registering with RM using finished containers :\"\n          + containerStatuses);\n    }\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-819. ResourceManager and NodeManager should check for a minimum allowed version (Robert Parker via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526660 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/13 12:55 PM",
      "commitName": "5a15c392a1a18c5720dbe630bc07e58268c8e6a7",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "01/08/13 11:54 PM",
      "commitNameOld": "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 55.54,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,60 @@\n   protected void registerWithRM() throws YarnException, IOException {\n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n+    request.setNMVersion(this.nodeManagerVersionId);\n     RegisterNodeManagerResponse regNMResponse \u003d\n         resourceTracker.registerNodeManager(request);\n     this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n+    // if ResourceManager version is too old then shutdown\n+    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n+      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n+        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n+      }\n+      String rmVersion \u003d regNMResponse.getRMVersion();\n+      if (rmVersion \u003d\u003d null) {\n+        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n+            + \"Valid version cannot be checked.\";\n+        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n+            + message);\n+      }\n+      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n+        String message \u003d \"The Resource Manager\u0027s version (\"\n+            + rmVersion +\") is less than the minimum \"\n+            + \"allowed version \" + minimumResourceManagerVersion;\n+        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n+            + \"version error, \" + message);\n+      }\n+    }\n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnException, IOException {\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    request.setNMVersion(this.nodeManagerVersionId);\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    // if ResourceManager version is too old then shutdown\n    if (!minimumResourceManagerVersion.equals(\"NONE\")){\n      if (minimumResourceManagerVersion.equals(\"EqualToNM\")){\n        minimumResourceManagerVersion \u003d nodeManagerVersionId;\n      }\n      String rmVersion \u003d regNMResponse.getRMVersion();\n      if (rmVersion \u003d\u003d null) {\n        String message \u003d \"The Resource Manager\u0027s did not return a version. \"\n            + \"Valid version cannot be checked.\";\n        throw new YarnRuntimeException(\"Shutting down the Node Manager. \"\n            + message);\n      }\n      if (VersionUtil.compareVersions(rmVersion,minimumResourceManagerVersion) \u003c 0) {\n        String message \u003d \"The Resource Manager\u0027s version (\"\n            + rmVersion +\") is less than the minimum \"\n            + \"allowed version \" + minimumResourceManagerVersion;\n        throw new YarnRuntimeException(\"Shutting down the Node Manager on RM \"\n            + \"version error, \" + message);\n      }\n    }\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": {
      "type": "Ybodychange",
      "commitMessage": "YARN-513. Create common proxy client for communicating with RM (Xuan Gong \u0026 Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:47 PM",
      "commitName": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 29.67,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,109 +1,39 @@\n   protected void registerWithRM() throws YarnException, IOException {\n-    Configuration conf \u003d getConfig();\n-    rmConnectWaitMS \u003d\n-        conf.getInt(\n-            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n-            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n-        * 1000;\n-    rmConnectionRetryIntervalMS \u003d\n-        conf.getLong(\n-            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n-            YarnConfiguration\n-                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n-        * 1000;\n-\n-    if(rmConnectionRetryIntervalMS \u003c 0) {\n-      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n-          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n-          \" should not be negative.\");\n-    }\n-\n-    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n-\n-    if(! waitForEver) {\n-      if(rmConnectWaitMS \u003c 0) {\n-          throw new YarnRuntimeException(\"Invalid Configuration. \" +\n-              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n-              \" can be -1, but can not be other negative numbers\");\n-      }\n-\n-      //try connect once\n-      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n-        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n-            + \" is smaller than \"\n-            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n-            + \". Only try connect once.\");\n-        rmConnectWaitMS \u003d 0;\n-      }\n-    }\n-\n-    int rmRetryCount \u003d 0;\n-    long waitStartTime \u003d System.currentTimeMillis();\n-\n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n-    RegisterNodeManagerResponse regNMResponse;\n-\n-    while(true) {\n-      try {\n-        rmRetryCount++;\n-        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n-            + \". current no. of attempts is \" + rmRetryCount);\n-        this.resourceTracker \u003d getRMClient();\n-        regNMResponse \u003d\n-            this.resourceTracker.registerNodeManager(request);\n-        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n-        break;\n-      } catch(Throwable e) {\n-        LOG.warn(\"Trying to connect to ResourceManager, \" +\n-            \"current no. of failed attempts is \"+rmRetryCount);\n-        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n-            || waitForEver) {\n-          try {\n-            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n-                + \" seconds before next connection retry to RM\");\n-            Thread.sleep(rmConnectionRetryIntervalMS);\n-          } catch(InterruptedException ex) {\n-            //done nothing\n-          }\n-        } else {\n-          String errorMessage \u003d \"Failed to Connect to RM, \" +\n-              \"no. of failed attempts is \"+rmRetryCount;\n-          LOG.error(errorMessage,e);\n-          throw new YarnRuntimeException(errorMessage,e);\n-        }\n-      }\n-    }\n+    RegisterNodeManagerResponse regNMResponse \u003d\n+        resourceTracker.registerNodeManager(request);\n+    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n     \n     masterKey \u003d regNMResponse.getNMTokenMasterKey();\n     if (masterKey !\u003d null) {\n       this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnException, IOException {\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse \u003d\n        resourceTracker.registerNodeManager(request);\n    this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-692. Creating NMToken master key on RM and sharing it with NM as a part of RM-NM heartbeat. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 5:06 PM",
      "commitName": "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,109 @@\n   protected void registerWithRM() throws YarnException, IOException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnRuntimeException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnRuntimeException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n-    MasterKey masterKey \u003d regNMResponse.getMasterKey();\n+    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n+    \n+    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n+    if (masterKey !\u003d null) {\n+      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n+    }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnException, IOException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnRuntimeException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnRuntimeException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    MasterKey masterKey \u003d regNMResponse.getContainerTokenMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n    \n    masterKey \u003d regNMResponse.getNMTokenMasterKey();\n    if (masterKey !\u003d null) {\n      this.context.getNMTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/13 9:05 PM",
          "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "30/05/13 9:13 PM",
          "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,104 +1,104 @@\n-  protected void registerWithRM() throws YarnRemoteException, IOException {\n+  protected void registerWithRM() throws YarnException, IOException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n-      throw new YarnException(\"Invalid Configuration. \" +\n+      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n-          throw new YarnException(\"Invalid Configuration. \" +\n+          throw new YarnRuntimeException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n-          throw new YarnException(errorMessage,e);\n+          throw new YarnRuntimeException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n-      throw new YarnException(\n+      throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     MasterKey masterKey \u003d regNMResponse.getMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void registerWithRM() throws YarnException, IOException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnRuntimeException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnRuntimeException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    MasterKey masterKey \u003d regNMResponse.getMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException, IOException]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/13 9:05 PM",
          "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "30/05/13 9:13 PM",
          "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 3.99,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,104 +1,104 @@\n-  protected void registerWithRM() throws YarnRemoteException, IOException {\n+  protected void registerWithRM() throws YarnException, IOException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n-      throw new YarnException(\"Invalid Configuration. \" +\n+      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n-          throw new YarnException(\"Invalid Configuration. \" +\n+          throw new YarnRuntimeException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n-          throw new YarnException(errorMessage,e);\n+          throw new YarnRuntimeException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n-      throw new YarnException(\n+      throw new YarnRuntimeException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n     MasterKey masterKey \u003d regNMResponse.getMasterKey();\n     // do this now so that its set before we start heartbeating to RM\n     // It is expected that status updater is started by this point and\n     // RM gives the shared secret in registration during\n     // StatusUpdater#start().\n     if (masterKey !\u003d null) {\n       this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void registerWithRM() throws YarnException, IOException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnRuntimeException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnRuntimeException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnRuntimeException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    MasterKey masterKey \u003d regNMResponse.getMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca8024673178fa1c80224b390dfba932921693d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/13 11:36 PM",
      "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/05/13 4:37 PM",
      "commitNameOld": "68148989bfb8b893529eb9920d849bce0dd575ec",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.29,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,104 @@\n   protected void registerWithRM() throws YarnRemoteException, IOException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       String message \u003d\n           \"Message from ResourceManager: \"\n               + regNMResponse.getDiagnosticsMessage();\n       throw new YarnException(\n         \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n             + message);\n     }\n \n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n-      // do this now so that its set before we start heartbeating to RM\n-      LOG.info(\"Security enabled - updating secret keys now\");\n-      // It is expected that status updater is started by this point and\n-      // RM gives the shared secret in registration during\n-      // StatusUpdater#start().\n-      if (masterKey !\u003d null) {\n-        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n-      }\n+    MasterKey masterKey \u003d regNMResponse.getMasterKey();\n+    // do this now so that its set before we start heartbeating to RM\n+    // It is expected that status updater is started by this point and\n+    // RM gives the shared secret in registration during\n+    // StatusUpdater#start().\n+    if (masterKey !\u003d null) {\n+      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnRemoteException, IOException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    MasterKey masterKey \u003d regNMResponse.getMasterKey();\n    // do this now so that its set before we start heartbeating to RM\n    // It is expected that status updater is started by this point and\n    // RM gives the shared secret in registration during\n    // StatusUpdater#start().\n    if (masterKey !\u003d null) {\n      this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "68148989bfb8b893529eb9920d849bce0dd575ec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-590. Added an optional mesage to be returned by ResourceMaanger when RM asks an RM to shutdown/resync etc so that NMs can log this message locally for better debuggability. Contributed by Mayank Bansal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481234 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/13 4:37 PM",
      "commitName": "68148989bfb8b893529eb9920d849bce0dd575ec",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/05/13 2:58 PM",
      "commitNameOld": "a35c7fd80bcb19a7c6a7b9234d782adaf2d51529",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,107 @@\n   protected void registerWithRM() throws YarnRemoteException, IOException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n+      String message \u003d\n+          \"Message from ResourceManager: \"\n+              + regNMResponse.getDiagnosticsMessage();\n       throw new YarnException(\n-          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n+        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n+            + message);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       MasterKey masterKey \u003d regNMResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnRemoteException, IOException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      String message \u003d\n          \"Message from ResourceManager: \"\n              + regNMResponse.getDiagnosticsMessage();\n      throw new YarnException(\n        \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, \"\n            + message);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "a35c7fd80bcb19a7c6a7b9234d782adaf2d51529": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-663. Changed ResourceTracker API and LocalizationProtocol API to throw YarnRemoteException and IOException. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1481215 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/13 2:58 PM",
      "commitName": "a35c7fd80bcb19a7c6a7b9234d782adaf2d51529",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/04/13 8:50 PM",
      "commitNameOld": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,103 @@\n-  protected void registerWithRM() throws YarnRemoteException {\n+  protected void registerWithRM() throws YarnRemoteException, IOException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       MasterKey masterKey \u003d regNMResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n     LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n     ((ContainerManagerImpl) this.context.getContainerManager())\n       .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnRemoteException, IOException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnRemoteException, IOException]"
      }
    },
    "fbb55784d93e1a819daf55d936e864d344579cbf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-562. Modified NM to reject any containers allocated by a previous ResourceManager. Contributed by Jian He.\nMAPREDUCE-5167. Update MR App after YARN-562 to use the new builder API for the container. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476034 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 8:50 PM",
      "commitName": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/04/13 7:00 PM",
      "commitNameOld": "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.08,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,103 @@\n   protected void registerWithRM() throws YarnRemoteException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n+        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       MasterKey masterKey \u003d regNMResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n-\n+    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n+    ((ContainerManagerImpl) this.context.getContainerManager())\n+      .setBlockNewContainerRequests(false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnRemoteException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        this.rmIdentifier \u003d regNMResponse.getRMIdentifier();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n    LOG.info(\"Notifying ContainerManager to unblock new container-requests\");\n    ((ContainerManagerImpl) this.context.getContainerManager())\n      .setBlockNewContainerRequests(false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-495. Changed NM reboot behaviour to be a simple resync - kill all containers  and re-register with RM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466752 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 7:00 PM",
      "commitName": "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/04/13 12:17 PM",
      "commitNameOld": "16fedf5473cd715e3970da700b24ca10656e3576",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 2.28,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,100 @@\n-  private void registerWithRM() throws YarnRemoteException {\n+  protected void registerWithRM() throws YarnRemoteException {\n     Configuration conf \u003d getConfig();\n     rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       MasterKey masterKey \u003d regNMResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void registerWithRM() throws YarnRemoteException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "16fedf5473cd715e3970da700b24ca10656e3576": {
      "type": "Ybodychange",
      "commitMessage": "YARN-479. NM retry behavior for connection to RM should be similar for lost heartbeats (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/13 12:17 PM",
      "commitName": "16fedf5473cd715e3970da700b24ca10656e3576",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "03/04/13 9:57 AM",
      "commitNameOld": "3e9200ddde4858be8ecdd8347b5fee63ed83df84",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,100 @@\n   private void registerWithRM() throws YarnRemoteException {\n     Configuration conf \u003d getConfig();\n-    long rmConnectWaitMS \u003d\n+    rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n-    long rmConnectionRetryIntervalMS \u003d\n+    rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n-    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n+    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n         regNMResponse \u003d\n             this.resourceTracker.registerNodeManager(request);\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       MasterKey masterKey \u003d regNMResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    Configuration conf \u003d getConfig();\n    rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "66e90b205a079c7056bd85e6c5e3dbb2a96e7461": {
      "type": "Ybodychange",
      "commitMessage": "YARN-440. Flatten RegisterNodeManagerResponse. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/13 11:20 AM",
      "commitName": "66e90b205a079c7056bd85e6c5e3dbb2a96e7461",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "25/03/13 11:28 AM",
      "commitNameOld": "18e08a8f511652ed9f4ba386bb4f0cf8339e2729",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,100 @@\n   private void registerWithRM() throws YarnRemoteException {\n     Configuration conf \u003d getConfig();\n     long rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n         * 1000;\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n         * 1000;\n \n     if(rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n           \" should not be negative.\");\n     }\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n \n     if(! waitForEver) {\n       if(rmConnectWaitMS \u003c 0) {\n           throw new YarnException(\"Invalid Configuration. \" +\n               YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n               \" can be -1, but can not be other negative numbers\");\n       }\n \n       //try connect once\n       if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     int rmRetryCount \u003d 0;\n     long waitStartTime \u003d System.currentTimeMillis();\n \n     RegisterNodeManagerRequest request \u003d\n         recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n-    RegistrationResponse regResponse;\n+    RegisterNodeManagerResponse regNMResponse;\n \n     while(true) {\n       try {\n         rmRetryCount++;\n         LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n             + \". current no. of attempts is \" + rmRetryCount);\n         this.resourceTracker \u003d getRMClient();\n-        regResponse \u003d\n-            this.resourceTracker.registerNodeManager(request)\n-                .getRegistrationResponse();\n+        regNMResponse \u003d\n+            this.resourceTracker.registerNodeManager(request);\n         break;\n       } catch(Throwable e) {\n         LOG.warn(\"Trying to connect to ResourceManager, \" +\n             \"current no. of failed attempts is \"+rmRetryCount);\n         if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n             || waitForEver) {\n           try {\n             LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                 + \" seconds before next connection retry to RM\");\n             Thread.sleep(rmConnectionRetryIntervalMS);\n           } catch(InterruptedException ex) {\n             //done nothing\n           }\n         } else {\n           String errorMessage \u003d \"Failed to Connect to RM, \" +\n               \"no. of failed attempts is \"+rmRetryCount;\n           LOG.error(errorMessage,e);\n           throw new YarnException(errorMessage,e);\n         }\n       }\n     }\n     // if the Resourcemanager instructs NM to shutdown.\n-    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n+    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n-      MasterKey masterKey \u003d regResponse.getMasterKey();\n+      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    Configuration conf \u003d getConfig();\n    long rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegisterNodeManagerResponse regNMResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regNMResponse \u003d\n            this.resourceTracker.registerNodeManager(request);\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regNMResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regNMResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "2ba66a54f5004f93b53d40b6a1cc5029abf5e609": {
      "type": "Ybodychange",
      "commitMessage": "YARN-196. Nodemanager should be more robust in handling connection failure to ResourceManager when a cluster is started. Contributed by Xuan Gong.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1457038 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/13 10:58 AM",
      "commitName": "2ba66a54f5004f93b53d40b6a1cc5029abf5e609",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "08/01/13 9:08 PM",
      "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 65.54,
      "commitsBetweenForRepo": 310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,101 @@\n   private void registerWithRM() throws YarnRemoteException {\n-    this.resourceTracker \u003d getRMClient();\n-    LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress);\n-    \n-    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n+    Configuration conf \u003d getConfig();\n+    long rmConnectWaitMS \u003d\n+        conf.getInt(\n+            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n+            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n+        * 1000;\n+    long rmConnectionRetryIntervalMS \u003d\n+        conf.getLong(\n+            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n+            YarnConfiguration\n+                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n+        * 1000;\n+\n+    if(rmConnectionRetryIntervalMS \u003c 0) {\n+      throw new YarnException(\"Invalid Configuration. \" +\n+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n+          \" should not be negative.\");\n+    }\n+\n+    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n+\n+    if(! waitForEver) {\n+      if(rmConnectWaitMS \u003c 0) {\n+          throw new YarnException(\"Invalid Configuration. \" +\n+              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n+              \" can be -1, but can not be other negative numbers\");\n+      }\n+\n+      //try connect once\n+      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n+        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n+            + \" is smaller than \"\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n+            + \". Only try connect once.\");\n+        rmConnectWaitMS \u003d 0;\n+      }\n+    }\n+\n+    int rmRetryCount \u003d 0;\n+    long waitStartTime \u003d System.currentTimeMillis();\n+\n+    RegisterNodeManagerRequest request \u003d\n+        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n-    RegistrationResponse regResponse \u003d\n-        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n+    RegistrationResponse regResponse;\n+\n+    while(true) {\n+      try {\n+        rmRetryCount++;\n+        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n+            + \". current no. of attempts is \" + rmRetryCount);\n+        this.resourceTracker \u003d getRMClient();\n+        regResponse \u003d\n+            this.resourceTracker.registerNodeManager(request)\n+                .getRegistrationResponse();\n+        break;\n+      } catch(Throwable e) {\n+        LOG.warn(\"Trying to connect to ResourceManager, \" +\n+            \"current no. of failed attempts is \"+rmRetryCount);\n+        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n+            || waitForEver) {\n+          try {\n+            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n+                + \" seconds before next connection retry to RM\");\n+            Thread.sleep(rmConnectionRetryIntervalMS);\n+          } catch(InterruptedException ex) {\n+            //done nothing\n+          }\n+        } else {\n+          String errorMessage \u003d \"Failed to Connect to RM, \" +\n+              \"no. of failed attempts is \"+rmRetryCount;\n+          LOG.error(errorMessage,e);\n+          throw new YarnException(errorMessage,e);\n+        }\n+      }\n+    }\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       MasterKey masterKey \u003d regResponse.getMasterKey();\n       // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during\n       // StatusUpdater#start().\n       if (masterKey !\u003d null) {\n         this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n       }\n     }\n \n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    Configuration conf \u003d getConfig();\n    long rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS)\n        * 1000;\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if(rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if(! waitForEver) {\n      if(rmConnectWaitMS \u003c 0) {\n          throw new YarnException(\"Invalid Configuration. \" +\n              YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS +\n              \" can be -1, but can not be other negative numbers\");\n      }\n\n      //try connect once\n      if(rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    int rmRetryCount \u003d 0;\n    long waitStartTime \u003d System.currentTimeMillis();\n\n    RegisterNodeManagerRequest request \u003d\n        recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse;\n\n    while(true) {\n      try {\n        rmRetryCount++;\n        LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress\n            + \". current no. of attempts is \" + rmRetryCount);\n        this.resourceTracker \u003d getRMClient();\n        regResponse \u003d\n            this.resourceTracker.registerNodeManager(request)\n                .getRegistrationResponse();\n        break;\n      } catch(Throwable e) {\n        LOG.warn(\"Trying to connect to ResourceManager, \" +\n            \"current no. of failed attempts is \"+rmRetryCount);\n        if(System.currentTimeMillis() - waitStartTime \u003c rmConnectWaitMS\n            || waitForEver) {\n          try {\n            LOG.info(\"Sleeping for \" + rmConnectionRetryIntervalMS/1000\n                + \" seconds before next connection retry to RM\");\n            Thread.sleep(rmConnectionRetryIntervalMS);\n          } catch(InterruptedException ex) {\n            //done nothing\n          }\n        } else {\n          String errorMessage \u003d \"Failed to Connect to RM, \" +\n              \"no. of failed attempts is \"+rmRetryCount;\n          LOG.error(errorMessage,e);\n          throw new YarnException(errorMessage,e);\n        }\n      }\n    }\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   private void registerWithRM() throws YarnRemoteException {\n     this.resourceTracker \u003d getRMClient();\n     LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress);\n     \n     RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegistrationResponse regResponse \u003d\n         this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n-    \n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n-    }\n \n-    // do this now so that its set before we start heartbeating to RM\n     if (UserGroupInformation.isSecurityEnabled()) {\n+      MasterKey masterKey \u003d regResponse.getMasterKey();\n+      // do this now so that its set before we start heartbeating to RM\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n-      // RM gives the shared secret in registration during StatusUpdater#start().\n-      this.containerTokenSecretManager.setSecretKey(\n-          this.nodeId.toString(),\n-          this.getRMNMSharedSecret());\n+      // RM gives the shared secret in registration during\n+      // StatusUpdater#start().\n+      if (masterKey !\u003d null) {\n+        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n+      }\n     }\n+\n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      MasterKey masterKey \u003d regResponse.getMasterKey();\n      // do this now so that its set before we start heartbeating to RM\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during\n      // StatusUpdater#start().\n      if (masterKey !\u003d null) {\n        this.context.getContainerTokenSecretManager().setMasterKey(masterKey);\n      }\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n    \n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    // do this now so that its set before we start heartbeating to RM\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during StatusUpdater#start().\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeId.toString(),\n          this.getRMNMSharedSecret());\n    }\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
      }
    },
    "432c4a6ffcbb233e0414365e40b61ac61997d728": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4262. NM gives wrong log message saying Connected to ResourceManager before trying to connect. (Devaraj K via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1341972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 11:37 AM",
      "commitName": "432c4a6ffcbb233e0414365e40b61ac61997d728",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 34.99,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private void registerWithRM() throws YarnRemoteException {\n     this.resourceTracker \u003d getRMClient();\n-    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n+    LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress);\n     \n     RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegistrationResponse regResponse \u003d\n         this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n     // if the Resourcemanager instructs NM to shutdown.\n     if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n       throw new YarnException(\n           \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n     }\n     \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n     }\n \n     // do this now so that its set before we start heartbeating to RM\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during StatusUpdater#start().\n       this.containerTokenSecretManager.setSecretKey(\n           this.nodeId.toString(),\n           this.getRMNMSharedSecret());\n     }\n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connecting to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n    \n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    // do this now so that its set before we start heartbeating to RM\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during StatusUpdater#start().\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeId.toString(),\n          this.getRMNMSharedSecret());\n    }\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "cbdb07f4ca358b9507296868a913977ad82ed716": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2775. Fixed ResourceManager and NodeManager to force a decommissioned node to shutdown. Contributed by Devaraj K.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190467 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/11 10:31 AM",
      "commitName": "cbdb07f4ca358b9507296868a913977ad82ed716",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/10/11 11:45 PM",
      "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,33 @@\n   private void registerWithRM() throws YarnRemoteException {\n     this.resourceTracker \u003d getRMClient();\n     LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n     \n     RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegistrationResponse regResponse \u003d\n         this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n+    // if the Resourcemanager instructs NM to shutdown.\n+    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n+      throw new YarnException(\n+          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n+    }\n+    \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n     }\n \n     // do this now so that its set before we start heartbeating to RM\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during StatusUpdater#start().\n       this.containerTokenSecretManager.setSecretKey(\n           this.nodeId.toString(),\n           this.getRMNMSharedSecret());\n     }\n     LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    // if the Resourcemanager instructs NM to shutdown.\n    if (NodeAction.SHUTDOWN.equals(regResponse.getNodeAction())) {\n      throw new YarnException(\n          \"Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed\");\n    }\n    \n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    // do this now so that its set before we start heartbeating to RM\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during StatusUpdater#start().\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeId.toString(),\n          this.getRMNMSharedSecret());\n    }\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2792. Replace usage of node ip-addresses with hostnames. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:21 PM",
      "commitName": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "21/09/11 4:32 PM",
      "commitNameOld": "ed7eda00cb1f509ebe7f967cb65bdb1ece06334c",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   private void registerWithRM() throws YarnRemoteException {\n     this.resourceTracker \u003d getRMClient();\n     LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n     \n     RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n-    this.nodeId \u003d Records.newRecord(NodeId.class);\n-    this.nodeId.setHost(this.hostName);\n-    this.nodeId.setPort(this.containerManagerPort);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegistrationResponse regResponse \u003d\n         this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n     }\n \n     // do this now so that its set before we start heartbeating to RM\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Security enabled - updating secret keys now\");\n       // It is expected that status updater is started by this point and\n       // RM gives the shared secret in registration during StatusUpdater#start().\n       this.containerTokenSecretManager.setSecretKey(\n-          this.getContainerManagerBindAddress(),\n+          this.nodeId.toString(),\n           this.getRMNMSharedSecret());\n     }\n-    LOG.info(\"Registered with ResourceManager as \" + this.containerManagerBindAddress\n+    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n         + \" with total resource of \" + this.totalResource);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    // do this now so that its set before we start heartbeating to RM\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during StatusUpdater#start().\n      this.containerTokenSecretManager.setSecretKey(\n          this.nodeId.toString(),\n          this.getRMNMSharedSecret());\n    }\n    LOG.info(\"Registered with ResourceManager as \" + this.nodeId\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2749. Ensure NM registers with RM after starting all its services correctly. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 12:11 AM",
      "commitName": "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,30 @@\n   private void registerWithRM() throws YarnRemoteException {\n     this.resourceTracker \u003d getRMClient();\n     LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n     \n     RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n     this.nodeId \u003d Records.newRecord(NodeId.class);\n     this.nodeId.setHost(this.hostName);\n     this.nodeId.setPort(this.containerManagerPort);\n     request.setHttpPort(this.httpPort);\n     request.setResource(this.totalResource);\n     request.setNodeId(this.nodeId);\n     RegistrationResponse regResponse \u003d\n         this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n     }\n \n+    // do this now so that its set before we start heartbeating to RM\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      LOG.info(\"Security enabled - updating secret keys now\");\n+      // It is expected that status updater is started by this point and\n+      // RM gives the shared secret in registration during StatusUpdater#start().\n+      this.containerTokenSecretManager.setSecretKey(\n+          this.getContainerManagerBindAddress(),\n+          this.getRMNMSharedSecret());\n+    }\n     LOG.info(\"Registered with ResourceManager as \" + this.containerManagerBindAddress\n         + \" with total resource of \" + this.totalResource);\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    this.nodeId \u003d Records.newRecord(NodeId.class);\n    this.nodeId.setHost(this.hostName);\n    this.nodeId.setPort(this.containerManagerPort);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    // do this now so that its set before we start heartbeating to RM\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Security enabled - updating secret keys now\");\n      // It is expected that status updater is started by this point and\n      // RM gives the shared secret in registration during StatusUpdater#start().\n      this.containerTokenSecretManager.setSecretKey(\n          this.getContainerManagerBindAddress(),\n          this.getRMNMSharedSecret());\n    }\n    LOG.info(\"Registered with ResourceManager as \" + this.containerManagerBindAddress\n        + \" with total resource of \" + this.totalResource);\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    this.nodeId \u003d Records.newRecord(NodeId.class);\n    this.nodeId.setHost(this.hostName);\n    this.nodeId.setPort(this.containerManagerPort);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.containerManagerBindAddress\n        + \" with total resource of \" + this.totalResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  private void registerWithRM() throws YarnRemoteException {\n+    this.resourceTracker \u003d getRMClient();\n+    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n+    \n+    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n+    this.nodeId \u003d Records.newRecord(NodeId.class);\n+    this.nodeId.setHost(this.hostName);\n+    this.nodeId.setPort(this.containerManagerPort);\n+    request.setHttpPort(this.httpPort);\n+    request.setResource(this.totalResource);\n+    request.setNodeId(this.nodeId);\n+    RegistrationResponse regResponse \u003d\n+        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n+    }\n+\n+    LOG.info(\"Registered with ResourceManager as \" + this.containerManagerBindAddress\n+        + \" with total resource of \" + this.totalResource);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerWithRM() throws YarnRemoteException {\n    this.resourceTracker \u003d getRMClient();\n    LOG.info(\"Connected to ResourceManager at \" + this.rmAddress);\n    \n    RegisterNodeManagerRequest request \u003d recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\n    this.nodeId \u003d Records.newRecord(NodeId.class);\n    this.nodeId.setHost(this.hostName);\n    this.nodeId.setPort(this.containerManagerPort);\n    request.setHttpPort(this.httpPort);\n    request.setResource(this.totalResource);\n    request.setNodeId(this.nodeId);\n    RegistrationResponse regResponse \u003d\n        this.resourceTracker.registerNodeManager(request).getRegistrationResponse();\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.secretKeyBytes \u003d regResponse.getSecretKey().array();\n    }\n\n    LOG.info(\"Registered with ResourceManager as \" + this.containerManagerBindAddress\n        + \" with total resource of \" + this.totalResource);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}