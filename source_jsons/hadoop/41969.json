{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SubmissionContextPreProcessor.java",
  "functionName": "preProcess",
  "functionId": "preProcess___host-String__applicationId-ApplicationId__submissionContext-ApplicationSubmissionContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/preprocessor/SubmissionContextPreProcessor.java",
  "functionStartLine": 115,
  "functionEndLine": 147,
  "numCommitsSeen": 1,
  "timeTaken": 996,
  "changeHistory": [
    "e7d44e48f708ba41e14d2a9e32a6760a62617485"
  ],
  "changeHistoryShort": {
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9761. Allow overriding application submissions based on server side configs. Contributed by Pralabh Kumar\n",
      "commitDate": "06/09/19 10:17 AM",
      "commitName": "e7d44e48f708ba41e14d2a9e32a6760a62617485",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,33 @@\n+  public void preProcess(String host, ApplicationId applicationId,\n+      ApplicationSubmissionContext submissionContext) {\n+    Map\u003cContextProp, String\u003e cMap \u003d hostCommands.get(host);\n+\n+    // Try regex match\n+    if (cMap \u003d\u003d null) {\n+      for (Map.Entry\u003cString, Map\u003cContextProp, String\u003e\u003e entry :\n+          hostCommands.entrySet()) {\n+        if (entry.getKey().equals(DEFAULT_COMMANDS)) {\n+          continue;\n+        }\n+        try {\n+          Pattern p \u003d Pattern.compile(entry.getKey());\n+          Matcher m \u003d p.matcher(host);\n+          if (m.find()) {\n+            cMap \u003d hostCommands.get(entry.getKey());\n+          }\n+        } catch (PatternSyntaxException exception) {\n+          LOG.warn(\"Invalid regex pattern: \" + entry.getKey());\n+        }\n+      }\n+    }\n+    // Set to default value\n+    if (cMap \u003d\u003d null) {\n+      cMap \u003d hostCommands.get(DEFAULT_COMMANDS);\n+    }\n+    if (cMap !\u003d null) {\n+      for (Map.Entry\u003cContextProp, String\u003e entry : cMap.entrySet()) {\n+        entry.getKey().cp.process(host, entry.getValue(),\n+            applicationId, submissionContext);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void preProcess(String host, ApplicationId applicationId,\n      ApplicationSubmissionContext submissionContext) {\n    Map\u003cContextProp, String\u003e cMap \u003d hostCommands.get(host);\n\n    // Try regex match\n    if (cMap \u003d\u003d null) {\n      for (Map.Entry\u003cString, Map\u003cContextProp, String\u003e\u003e entry :\n          hostCommands.entrySet()) {\n        if (entry.getKey().equals(DEFAULT_COMMANDS)) {\n          continue;\n        }\n        try {\n          Pattern p \u003d Pattern.compile(entry.getKey());\n          Matcher m \u003d p.matcher(host);\n          if (m.find()) {\n            cMap \u003d hostCommands.get(entry.getKey());\n          }\n        } catch (PatternSyntaxException exception) {\n          LOG.warn(\"Invalid regex pattern: \" + entry.getKey());\n        }\n      }\n    }\n    // Set to default value\n    if (cMap \u003d\u003d null) {\n      cMap \u003d hostCommands.get(DEFAULT_COMMANDS);\n    }\n    if (cMap !\u003d null) {\n      for (Map.Entry\u003cContextProp, String\u003e entry : cMap.entrySet()) {\n        entry.getKey().cp.process(host, entry.getValue(),\n            applicationId, submissionContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/preprocessor/SubmissionContextPreProcessor.java"
    }
  }
}