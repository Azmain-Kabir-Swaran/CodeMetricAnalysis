{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirectoryCollection.java",
  "functionName": "testDirs",
  "functionId": "testDirs___dirs-List__String____goodDirs-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
  "functionStartLine": 510,
  "functionEndLine": 546,
  "numCommitsSeen": 25,
  "timeTaken": 4131,
  "changeHistory": [
    "eef34f2d87a75e16b2cca870d99a5e1e28c31d9b",
    "49f9acae40a6e99cadee9854824dfdc40be67695",
    "aea3e65749333b97d8c45280077f03d4ebddb5a8",
    "8d226225d030253152494bda32708377ad0f7af7",
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000"
  ],
  "changeHistoryShort": {
    "eef34f2d87a75e16b2cca870d99a5e1e28c31d9b": "Ybodychange",
    "49f9acae40a6e99cadee9854824dfdc40be67695": "Ybodychange",
    "aea3e65749333b97d8c45280077f03d4ebddb5a8": "Ybodychange",
    "8d226225d030253152494bda32708377ad0f7af7": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eef34f2d87a75e16b2cca870d99a5e1e28c31d9b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9914. Use separate configs for free disk space checking for full and not-full disks. Contributed by Jim Brennan\n",
      "commitDate": "25/10/19 10:13 AM",
      "commitName": "eef34f2d87a75e16b2cca870d99a5e1e28c31d9b",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "17/09/19 7:11 AM",
      "commitNameOld": "c474e24c0b73c0f52a7d5af2495355f4a0799344",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 38.13,
      "commitsBetweenForRepo": 272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n       Set\u003cString\u003e goodDirs) {\n     HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n         new HashMap\u003cString, DiskErrorInformation\u003e();\n     for (final String dir : dirs) {\n       String msg;\n       try {\n         File testDir \u003d new File(dir);\n         diskValidator.checkStatus(testDir);\n         float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n             diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n+        long diskFreeSpaceCutoff \u003d goodDirs.contains(dir) ?\n+            diskFreeSpaceCutoffLow : diskFreeSpaceCutoffHigh;\n         if (isDiskUsageOverPercentageLimit(testDir,\n             diskUtilizationPercentageCutoff)) {\n           msg \u003d\n               \"used space above threshold of \"\n                   + diskUtilizationPercentageCutoff\n                   + \"%\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n-        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n+        } else if (isDiskFreeSpaceUnderLimit(testDir, diskFreeSpaceCutoff)) {\n           msg \u003d\n-              \"free space below limit of \" + diskUtilizationSpaceCutoff\n+              \"free space below limit of \" + diskFreeSpaceCutoff\n                   + \"MB\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         }\n       } catch (IOException ie) {\n         ret.put(dir,\n           new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n      Set\u003cString\u003e goodDirs) {\n    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n        new HashMap\u003cString, DiskErrorInformation\u003e();\n    for (final String dir : dirs) {\n      String msg;\n      try {\n        File testDir \u003d new File(dir);\n        diskValidator.checkStatus(testDir);\n        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n        long diskFreeSpaceCutoff \u003d goodDirs.contains(dir) ?\n            diskFreeSpaceCutoffLow : diskFreeSpaceCutoffHigh;\n        if (isDiskUsageOverPercentageLimit(testDir,\n            diskUtilizationPercentageCutoff)) {\n          msg \u003d\n              \"used space above threshold of \"\n                  + diskUtilizationPercentageCutoff\n                  + \"%\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        } else if (isDiskFreeSpaceUnderLimit(testDir, diskFreeSpaceCutoff)) {\n          msg \u003d\n              \"free space below limit of \" + diskFreeSpaceCutoff\n                  + \"MB\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        }\n      } catch (IOException ie) {\n        ret.put(dir,\n          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "49f9acae40a6e99cadee9854824dfdc40be67695": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8162. Remove Method DirectoryCollection#verifyDirUsingMkdir. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "16/04/18 3:05 PM",
      "commitName": "49f9acae40a6e99cadee9854824dfdc40be67695",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "13/12/17 2:56 PM",
      "commitNameOld": "46e18c8da76ea8d91a16e59ba1154c30f37cb9fd",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 123.96,
      "commitsBetweenForRepo": 895,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n   Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n       Set\u003cString\u003e goodDirs) {\n     HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n         new HashMap\u003cString, DiskErrorInformation\u003e();\n     for (final String dir : dirs) {\n       String msg;\n       try {\n         File testDir \u003d new File(dir);\n         diskValidator.checkStatus(testDir);\n         float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n             diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n         if (isDiskUsageOverPercentageLimit(testDir,\n             diskUtilizationPercentageCutoff)) {\n           msg \u003d\n               \"used space above threshold of \"\n                   + diskUtilizationPercentageCutoff\n                   + \"%\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n           msg \u003d\n               \"free space below limit of \" + diskUtilizationSpaceCutoff\n                   + \"MB\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         }\n-\n-        // create a random dir to make sure fs isn\u0027t in read-only mode\n-        verifyDirUsingMkdir(testDir);\n       } catch (IOException ie) {\n         ret.put(dir,\n           new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n      Set\u003cString\u003e goodDirs) {\n    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n        new HashMap\u003cString, DiskErrorInformation\u003e();\n    for (final String dir : dirs) {\n      String msg;\n      try {\n        File testDir \u003d new File(dir);\n        diskValidator.checkStatus(testDir);\n        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n        if (isDiskUsageOverPercentageLimit(testDir,\n            diskUtilizationPercentageCutoff)) {\n          msg \u003d\n              \"used space above threshold of \"\n                  + diskUtilizationPercentageCutoff\n                  + \"%\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n          msg \u003d\n              \"free space below limit of \" + diskUtilizationSpaceCutoff\n                  + \"MB\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        }\n      } catch (IOException ie) {\n        ret.put(dir,\n          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "aea3e65749333b97d8c45280077f03d4ebddb5a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5137. Make DiskChecker pluggable in NodeManager. (Yufei Gu via rchiang)\n",
      "commitDate": "10/08/16 7:23 PM",
      "commitName": "aea3e65749333b97d8c45280077f03d4ebddb5a8",
      "commitAuthor": "Ray Chiang",
      "commitDateOld": "05/07/16 4:07 PM",
      "commitNameOld": "ce9c006430d13a28bc1ca57c5c70cc1b7cba1692",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 36.14,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n       Set\u003cString\u003e goodDirs) {\n     HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n         new HashMap\u003cString, DiskErrorInformation\u003e();\n     for (final String dir : dirs) {\n       String msg;\n       try {\n         File testDir \u003d new File(dir);\n-        DiskChecker.checkDir(testDir);\n+        diskValidator.checkStatus(testDir);\n         float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n             diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n         if (isDiskUsageOverPercentageLimit(testDir,\n             diskUtilizationPercentageCutoff)) {\n           msg \u003d\n               \"used space above threshold of \"\n                   + diskUtilizationPercentageCutoff\n                   + \"%\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n           msg \u003d\n               \"free space below limit of \" + diskUtilizationSpaceCutoff\n                   + \"MB\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         }\n \n         // create a random dir to make sure fs isn\u0027t in read-only mode\n         verifyDirUsingMkdir(testDir);\n       } catch (IOException ie) {\n         ret.put(dir,\n           new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n      Set\u003cString\u003e goodDirs) {\n    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n        new HashMap\u003cString, DiskErrorInformation\u003e();\n    for (final String dir : dirs) {\n      String msg;\n      try {\n        File testDir \u003d new File(dir);\n        diskValidator.checkStatus(testDir);\n        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n        if (isDiskUsageOverPercentageLimit(testDir,\n            diskUtilizationPercentageCutoff)) {\n          msg \u003d\n              \"used space above threshold of \"\n                  + diskUtilizationPercentageCutoff\n                  + \"%\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n          msg \u003d\n              \"free space below limit of \" + diskUtilizationSpaceCutoff\n                  + \"MB\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        }\n\n        // create a random dir to make sure fs isn\u0027t in read-only mode\n        verifyDirUsingMkdir(testDir);\n      } catch (IOException ie) {\n        ret.put(dir,\n          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
      "extendedDetails": {}
    },
    "8d226225d030253152494bda32708377ad0f7af7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3943. Use separate threshold configurations for disk-full detection and disk-not-full detection. Contributed by Zhihai Xu\n",
      "commitDate": "08/10/15 3:25 PM",
      "commitName": "8d226225d030253152494bda32708377ad0f7af7",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3943. Use separate threshold configurations for disk-full detection and disk-not-full detection. Contributed by Zhihai Xu\n",
          "commitDate": "08/10/15 3:25 PM",
          "commitName": "8d226225d030253152494bda32708377ad0f7af7",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "06/05/15 2:19 PM",
          "commitNameOld": "b72507810aece08e17ab4b5aae1f7eae1fe98609",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 155.05,
          "commitsBetweenForRepo": 1293,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,38 @@\n-  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs) {\n+  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n+      Set\u003cString\u003e goodDirs) {\n     HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n         new HashMap\u003cString, DiskErrorInformation\u003e();\n     for (final String dir : dirs) {\n       String msg;\n       try {\n         File testDir \u003d new File(dir);\n         DiskChecker.checkDir(testDir);\n-        if (isDiskUsageOverPercentageLimit(testDir)) {\n+        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n+            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n+        if (isDiskUsageOverPercentageLimit(testDir,\n+            diskUtilizationPercentageCutoff)) {\n           msg \u003d\n               \"used space above threshold of \"\n                   + diskUtilizationPercentageCutoff\n                   + \"%\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n           msg \u003d\n               \"free space below limit of \" + diskUtilizationSpaceCutoff\n                   + \"MB\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         }\n \n         // create a random dir to make sure fs isn\u0027t in read-only mode\n         verifyDirUsingMkdir(testDir);\n       } catch (IOException ie) {\n         ret.put(dir,\n           new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n      Set\u003cString\u003e goodDirs) {\n    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n        new HashMap\u003cString, DiskErrorInformation\u003e();\n    for (final String dir : dirs) {\n      String msg;\n      try {\n        File testDir \u003d new File(dir);\n        DiskChecker.checkDir(testDir);\n        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n        if (isDiskUsageOverPercentageLimit(testDir,\n            diskUtilizationPercentageCutoff)) {\n          msg \u003d\n              \"used space above threshold of \"\n                  + diskUtilizationPercentageCutoff\n                  + \"%\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n          msg \u003d\n              \"free space below limit of \" + diskUtilizationSpaceCutoff\n                  + \"MB\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        }\n\n        // create a random dir to make sure fs isn\u0027t in read-only mode\n        verifyDirUsingMkdir(testDir);\n      } catch (IOException ie) {\n        ret.put(dir,\n          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
          "extendedDetails": {
            "oldValue": "[dirs-List\u003cString\u003e]",
            "newValue": "[dirs-List\u003cString\u003e, goodDirs-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3943. Use separate threshold configurations for disk-full detection and disk-not-full detection. Contributed by Zhihai Xu\n",
          "commitDate": "08/10/15 3:25 PM",
          "commitName": "8d226225d030253152494bda32708377ad0f7af7",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "06/05/15 2:19 PM",
          "commitNameOld": "b72507810aece08e17ab4b5aae1f7eae1fe98609",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 155.05,
          "commitsBetweenForRepo": 1293,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,38 @@\n-  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs) {\n+  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n+      Set\u003cString\u003e goodDirs) {\n     HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n         new HashMap\u003cString, DiskErrorInformation\u003e();\n     for (final String dir : dirs) {\n       String msg;\n       try {\n         File testDir \u003d new File(dir);\n         DiskChecker.checkDir(testDir);\n-        if (isDiskUsageOverPercentageLimit(testDir)) {\n+        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n+            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n+        if (isDiskUsageOverPercentageLimit(testDir,\n+            diskUtilizationPercentageCutoff)) {\n           msg \u003d\n               \"used space above threshold of \"\n                   + diskUtilizationPercentageCutoff\n                   + \"%\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n           msg \u003d\n               \"free space below limit of \" + diskUtilizationSpaceCutoff\n                   + \"MB\";\n           ret.put(dir,\n             new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n           continue;\n         }\n \n         // create a random dir to make sure fs isn\u0027t in read-only mode\n         verifyDirUsingMkdir(testDir);\n       } catch (IOException ie) {\n         ret.put(dir,\n           new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs,\n      Set\u003cString\u003e goodDirs) {\n    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n        new HashMap\u003cString, DiskErrorInformation\u003e();\n    for (final String dir : dirs) {\n      String msg;\n      try {\n        File testDir \u003d new File(dir);\n        DiskChecker.checkDir(testDir);\n        float diskUtilizationPercentageCutoff \u003d goodDirs.contains(dir) ?\n            diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;\n        if (isDiskUsageOverPercentageLimit(testDir,\n            diskUtilizationPercentageCutoff)) {\n          msg \u003d\n              \"used space above threshold of \"\n                  + diskUtilizationPercentageCutoff\n                  + \"%\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n          msg \u003d\n              \"free space below limit of \" + diskUtilizationSpaceCutoff\n                  + \"MB\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        }\n\n        // create a random dir to make sure fs isn\u0027t in read-only mode\n        verifyDirUsingMkdir(testDir);\n      } catch (IOException ie) {\n        ret.put(dir,\n          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n      }\n    }\n    return ret;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": {
      "type": "Yintroduced",
      "commitMessage": "YARN-90. NodeManager should identify failed disks becoming good again. Contributed by Varun Vasudev\n",
      "commitDate": "21/10/14 10:31 AM",
      "commitName": "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,34 @@\n+  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs) {\n+    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n+        new HashMap\u003cString, DiskErrorInformation\u003e();\n+    for (final String dir : dirs) {\n+      String msg;\n+      try {\n+        File testDir \u003d new File(dir);\n+        DiskChecker.checkDir(testDir);\n+        if (isDiskUsageOverPercentageLimit(testDir)) {\n+          msg \u003d\n+              \"used space above threshold of \"\n+                  + diskUtilizationPercentageCutoff\n+                  + \"%\";\n+          ret.put(dir,\n+            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n+          continue;\n+        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n+          msg \u003d\n+              \"free space below limit of \" + diskUtilizationSpaceCutoff\n+                  + \"MB\";\n+          ret.put(dir,\n+            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n+          continue;\n+        }\n+\n+        // create a random dir to make sure fs isn\u0027t in read-only mode\n+        verifyDirUsingMkdir(testDir);\n+      } catch (IOException ie) {\n+        ret.put(dir,\n+          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, DiskErrorInformation\u003e testDirs(List\u003cString\u003e dirs) {\n    HashMap\u003cString, DiskErrorInformation\u003e ret \u003d\n        new HashMap\u003cString, DiskErrorInformation\u003e();\n    for (final String dir : dirs) {\n      String msg;\n      try {\n        File testDir \u003d new File(dir);\n        DiskChecker.checkDir(testDir);\n        if (isDiskUsageOverPercentageLimit(testDir)) {\n          msg \u003d\n              \"used space above threshold of \"\n                  + diskUtilizationPercentageCutoff\n                  + \"%\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        } else if (isDiskFreeSpaceUnderLimit(testDir)) {\n          msg \u003d\n              \"free space below limit of \" + diskUtilizationSpaceCutoff\n                  + \"MB\";\n          ret.put(dir,\n            new DiskErrorInformation(DiskErrorCause.DISK_FULL, msg));\n          continue;\n        }\n\n        // create a random dir to make sure fs isn\u0027t in read-only mode\n        verifyDirUsingMkdir(testDir);\n      } catch (IOException ie) {\n        ret.put(dir,\n          new DiskErrorInformation(DiskErrorCause.OTHER, ie.getMessage()));\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DirectoryCollection.java"
    }
  }
}