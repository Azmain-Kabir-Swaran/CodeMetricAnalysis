{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMClientAsyncImpl.java",
  "functionName": "transition",
  "functionId": "transition___container-StatefulContainer__containerEvent-ContainerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/async/impl/NMClientAsyncImpl.java",
  "functionStartLine": 729,
  "functionEndLine": 834,
  "numCommitsSeen": 9,
  "timeTaken": 1905,
  "changeHistory": [
    "8236130b2c61ab0ee9b8ed747ce8cf96af7f17aa"
  ],
  "changeHistoryShort": {
    "8236130b2c61ab0ee9b8ed747ce8cf96af7f17aa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8236130b2c61ab0ee9b8ed747ce8cf96af7f17aa": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6306. NMClient API change for container upgrade. Contributed by Arun Suresh\n",
      "commitDate": "16/05/17 10:48 AM",
      "commitName": "8236130b2c61ab0ee9b8ed747ce8cf96af7f17aa",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,106 @@\n+      public ContainerState transition(StatefulContainer container,\n+          ContainerEvent containerEvent) {\n+        ContainerId containerId \u003d containerEvent.getContainerId();\n+        AbstractCallbackHandler handler \u003d (AbstractCallbackHandler) container\n+                .nmClientAsync.getCallbackHandler();\n+        Throwable handlerError \u003d null;\n+        try {\n+          switch(containerEvent.getType()) {\n+          case REINITIALIZE_CONTAINER:\n+            if (!(containerEvent instanceof ReInitializeContainerEvevnt)) {\n+              LOG.error(\"Unexpected Event.. [\" +containerEvent.getType() + \"]\");\n+              return ContainerState.FAILED;\n+            }\n+            ReInitializeContainerEvevnt rEvent \u003d\n+                (ReInitializeContainerEvevnt)containerEvent;\n+            container.nmClientAsync.getClient().reInitializeContainer(\n+                containerId, rEvent.getContainerLaunchContext(),\n+                rEvent.isAutoCommit());\n+            try {\n+              handler.onContainerReInitialize(containerId);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          case RESTART_CONTAINER:\n+            container.nmClientAsync.getClient().restartContainer(containerId);\n+            try {\n+              handler.onContainerRestart(containerId);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          case ROLLBACK_LAST_REINIT:\n+            container.nmClientAsync.getClient()\n+                .rollbackLastReInitialization(containerId);\n+            try {\n+              handler.onRollbackLastReInitialization(containerId);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          case COMMIT_LAST_REINT:\n+            container.nmClientAsync.getClient()\n+                .commitLastReInitialization(containerId);\n+            try {\n+              handler.onCommitLastReInitialization(containerId);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          default:\n+            LOG.warn(\"Event of type [\" + containerEvent.getType() + \"] not\" +\n+                \" expected here..\");\n+            break;\n+          }\n+          if (handlerError !\u003d null) {\n+            LOG.info(\"Unchecked exception is thrown in handler for event [\"\n+                + containerEvent.getType() + \"] for Container \"\n+                + containerId, handlerError);\n+          }\n+\n+          return ContainerState.RUNNING;\n+        } catch (Throwable t) {\n+          switch(containerEvent.getType()) {\n+          case REINITIALIZE_CONTAINER:\n+            try {\n+              handler.onContainerReInitializeError(containerId, t);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          case RESTART_CONTAINER:\n+            try {\n+              handler.onContainerRestartError(containerId, t);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          case ROLLBACK_LAST_REINIT:\n+            try {\n+              handler.onRollbackLastReInitializationError(containerId, t);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          case COMMIT_LAST_REINT:\n+            try {\n+              handler.onCommitLastReInitializationError(containerId, t);\n+            } catch (Throwable tr) {\n+              handlerError \u003d tr;\n+            }\n+            break;\n+          default:\n+            LOG.warn(\"Event of type [\" + containerEvent.getType() + \"] not\" +\n+                \" expected here..\");\n+            break;\n+          }\n+          if (handlerError !\u003d null) {\n+            LOG.info(\"Unchecked exception is thrown in handler for event [\"\n+                + containerEvent.getType() + \"] for Container \"\n+                + containerId, handlerError);\n+          }\n+        }\n+\n+        return ContainerState.FAILED;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public ContainerState transition(StatefulContainer container,\n          ContainerEvent containerEvent) {\n        ContainerId containerId \u003d containerEvent.getContainerId();\n        AbstractCallbackHandler handler \u003d (AbstractCallbackHandler) container\n                .nmClientAsync.getCallbackHandler();\n        Throwable handlerError \u003d null;\n        try {\n          switch(containerEvent.getType()) {\n          case REINITIALIZE_CONTAINER:\n            if (!(containerEvent instanceof ReInitializeContainerEvevnt)) {\n              LOG.error(\"Unexpected Event.. [\" +containerEvent.getType() + \"]\");\n              return ContainerState.FAILED;\n            }\n            ReInitializeContainerEvevnt rEvent \u003d\n                (ReInitializeContainerEvevnt)containerEvent;\n            container.nmClientAsync.getClient().reInitializeContainer(\n                containerId, rEvent.getContainerLaunchContext(),\n                rEvent.isAutoCommit());\n            try {\n              handler.onContainerReInitialize(containerId);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          case RESTART_CONTAINER:\n            container.nmClientAsync.getClient().restartContainer(containerId);\n            try {\n              handler.onContainerRestart(containerId);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          case ROLLBACK_LAST_REINIT:\n            container.nmClientAsync.getClient()\n                .rollbackLastReInitialization(containerId);\n            try {\n              handler.onRollbackLastReInitialization(containerId);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          case COMMIT_LAST_REINT:\n            container.nmClientAsync.getClient()\n                .commitLastReInitialization(containerId);\n            try {\n              handler.onCommitLastReInitialization(containerId);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          default:\n            LOG.warn(\"Event of type [\" + containerEvent.getType() + \"] not\" +\n                \" expected here..\");\n            break;\n          }\n          if (handlerError !\u003d null) {\n            LOG.info(\"Unchecked exception is thrown in handler for event [\"\n                + containerEvent.getType() + \"] for Container \"\n                + containerId, handlerError);\n          }\n\n          return ContainerState.RUNNING;\n        } catch (Throwable t) {\n          switch(containerEvent.getType()) {\n          case REINITIALIZE_CONTAINER:\n            try {\n              handler.onContainerReInitializeError(containerId, t);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          case RESTART_CONTAINER:\n            try {\n              handler.onContainerRestartError(containerId, t);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          case ROLLBACK_LAST_REINIT:\n            try {\n              handler.onRollbackLastReInitializationError(containerId, t);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          case COMMIT_LAST_REINT:\n            try {\n              handler.onCommitLastReInitializationError(containerId, t);\n            } catch (Throwable tr) {\n              handlerError \u003d tr;\n            }\n            break;\n          default:\n            LOG.warn(\"Event of type [\" + containerEvent.getType() + \"] not\" +\n                \" expected here..\");\n            break;\n          }\n          if (handlerError !\u003d null) {\n            LOG.info(\"Unchecked exception is thrown in handler for event [\"\n                + containerEvent.getType() + \"] for Container \"\n                + containerId, handlerError);\n          }\n        }\n\n        return ContainerState.FAILED;\n      }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/async/impl/NMClientAsyncImpl.java"
    }
  }
}