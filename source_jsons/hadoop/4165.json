{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ECPolicyLoader.java",
  "functionName": "loadPolicy",
  "functionId": "loadPolicy___element-Element__schemas-Map__String,ECSchema__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/ECPolicyLoader.java",
  "functionStartLine": 281,
  "functionEndLine": 324,
  "numCommitsSeen": 3,
  "timeTaken": 757,
  "changeHistory": [
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
    "b0803388fc5ec03b774aa003f52232deb8db6f69"
  ],
  "changeHistoryShort": {
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3": "Ybodychange",
    "b0803388fc5ec03b774aa003f52232deb8db6f69": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11793. Allow to enable user defined erasure coding policy. Contributed by Sammi Chen\n",
      "commitDate": "24/05/17 3:45 AM",
      "commitName": "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "27/04/17 10:18 PM",
      "commitNameOld": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 26.23,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   private ErasureCodingPolicy loadPolicy(Element element,\n                                          Map\u003cString, ECSchema\u003e schemas) {\n     NodeList fields \u003d element.getChildNodes();\n     ECSchema schema \u003d null;\n     int cellSize \u003d 0;\n \n     for (int i \u003d 0; i \u003c fields.getLength(); i++) {\n       Node fieldNode \u003d fields.item(i);\n       if (fieldNode instanceof Element) {\n         Element field \u003d (Element) fieldNode;\n         String tagName \u003d field.getTagName();\n \n         // Get the nonnull text value.\n         Text text \u003d (Text) field.getFirstChild();\n         if (text !\u003d null) {\n           if (!text.isElementContentWhitespace()) {\n             String value \u003d text.getData().trim();\n             if (\"schema\".equals(tagName)) {\n               schema \u003d schemas.get(value);\n             } else if (\"cellsize\".equals(tagName)) {\n               try {\n                 cellSize \u003d Integer.parseInt(value);\n               } catch (NumberFormatException e) {\n                 throw new IllegalArgumentException(\"Bad EC policy cellsize\"\n                     + \" value \" + value + \" is found. It should be an integer\");\n               }\n             } else {\n               LOG.warn(\"Invalid tagName: \" + tagName);\n             }\n           }\n         } else {\n           throw new IllegalArgumentException(\"Value of \u003c\" + tagName\n               + \"\u003e is null\");\n         }\n       }\n     }\n \n     if (schema !\u003d null \u0026\u0026 cellSize \u003e 0) {\n-      return new ErasureCodingPolicy(schema, cellSize, (byte) -1);\n+      return new ErasureCodingPolicy(schema, cellSize);\n     } else {\n       throw new RuntimeException(\"Bad policy is found in\"\n           + \" EC policy configuration file\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ErasureCodingPolicy loadPolicy(Element element,\n                                         Map\u003cString, ECSchema\u003e schemas) {\n    NodeList fields \u003d element.getChildNodes();\n    ECSchema schema \u003d null;\n    int cellSize \u003d 0;\n\n    for (int i \u003d 0; i \u003c fields.getLength(); i++) {\n      Node fieldNode \u003d fields.item(i);\n      if (fieldNode instanceof Element) {\n        Element field \u003d (Element) fieldNode;\n        String tagName \u003d field.getTagName();\n\n        // Get the nonnull text value.\n        Text text \u003d (Text) field.getFirstChild();\n        if (text !\u003d null) {\n          if (!text.isElementContentWhitespace()) {\n            String value \u003d text.getData().trim();\n            if (\"schema\".equals(tagName)) {\n              schema \u003d schemas.get(value);\n            } else if (\"cellsize\".equals(tagName)) {\n              try {\n                cellSize \u003d Integer.parseInt(value);\n              } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Bad EC policy cellsize\"\n                    + \" value \" + value + \" is found. It should be an integer\");\n              }\n            } else {\n              LOG.warn(\"Invalid tagName: \" + tagName);\n            }\n          }\n        } else {\n          throw new IllegalArgumentException(\"Value of \u003c\" + tagName\n              + \"\u003e is null\");\n        }\n      }\n    }\n\n    if (schema !\u003d null \u0026\u0026 cellSize \u003e 0) {\n      return new ErasureCodingPolicy(schema, cellSize);\n    } else {\n      throw new RuntimeException(\"Bad policy is found in\"\n          + \" EC policy configuration file\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/ECPolicyLoader.java",
      "extendedDetails": {}
    },
    "b0803388fc5ec03b774aa003f52232deb8db6f69": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11604. Define and parse erasure code policies. Contributed by Lin Zeng\n",
      "commitDate": "20/04/17 10:33 PM",
      "commitName": "b0803388fc5ec03b774aa003f52232deb8db6f69",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,44 @@\n+  private ErasureCodingPolicy loadPolicy(Element element,\n+                                         Map\u003cString, ECSchema\u003e schemas) {\n+    NodeList fields \u003d element.getChildNodes();\n+    ECSchema schema \u003d null;\n+    int cellSize \u003d 0;\n+\n+    for (int i \u003d 0; i \u003c fields.getLength(); i++) {\n+      Node fieldNode \u003d fields.item(i);\n+      if (fieldNode instanceof Element) {\n+        Element field \u003d (Element) fieldNode;\n+        String tagName \u003d field.getTagName();\n+\n+        // Get the nonnull text value.\n+        Text text \u003d (Text) field.getFirstChild();\n+        if (text !\u003d null) {\n+          if (!text.isElementContentWhitespace()) {\n+            String value \u003d text.getData().trim();\n+            if (\"schema\".equals(tagName)) {\n+              schema \u003d schemas.get(value);\n+            } else if (\"cellsize\".equals(tagName)) {\n+              try {\n+                cellSize \u003d Integer.parseInt(value);\n+              } catch (NumberFormatException e) {\n+                throw new IllegalArgumentException(\"Bad EC policy cellsize\"\n+                    + \" value \" + value + \" is found. It should be an integer\");\n+              }\n+            } else {\n+              LOG.warn(\"Invalid tagName: \" + tagName);\n+            }\n+          }\n+        } else {\n+          throw new IllegalArgumentException(\"Value of \u003c\" + tagName\n+              + \"\u003e is null\");\n+        }\n+      }\n+    }\n+\n+    if (schema !\u003d null \u0026\u0026 cellSize \u003e 0) {\n+      return new ErasureCodingPolicy(schema, cellSize, (byte) -1);\n+    } else {\n+      throw new RuntimeException(\"Bad policy is found in\"\n+          + \" EC policy configuration file\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ErasureCodingPolicy loadPolicy(Element element,\n                                         Map\u003cString, ECSchema\u003e schemas) {\n    NodeList fields \u003d element.getChildNodes();\n    ECSchema schema \u003d null;\n    int cellSize \u003d 0;\n\n    for (int i \u003d 0; i \u003c fields.getLength(); i++) {\n      Node fieldNode \u003d fields.item(i);\n      if (fieldNode instanceof Element) {\n        Element field \u003d (Element) fieldNode;\n        String tagName \u003d field.getTagName();\n\n        // Get the nonnull text value.\n        Text text \u003d (Text) field.getFirstChild();\n        if (text !\u003d null) {\n          if (!text.isElementContentWhitespace()) {\n            String value \u003d text.getData().trim();\n            if (\"schema\".equals(tagName)) {\n              schema \u003d schemas.get(value);\n            } else if (\"cellsize\".equals(tagName)) {\n              try {\n                cellSize \u003d Integer.parseInt(value);\n              } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Bad EC policy cellsize\"\n                    + \" value \" + value + \" is found. It should be an integer\");\n              }\n            } else {\n              LOG.warn(\"Invalid tagName: \" + tagName);\n            }\n          }\n        } else {\n          throw new IllegalArgumentException(\"Value of \u003c\" + tagName\n              + \"\u003e is null\");\n        }\n      }\n    }\n\n    if (schema !\u003d null \u0026\u0026 cellSize \u003e 0) {\n      return new ErasureCodingPolicy(schema, cellSize, (byte) -1);\n    } else {\n      throw new RuntimeException(\"Bad policy is found in\"\n          + \" EC policy configuration file\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/ECPolicyLoader.java"
    }
  }
}