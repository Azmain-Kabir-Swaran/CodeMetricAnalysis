{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "addAMLog4jResource",
  "functionId": "addAMLog4jResource___serviceName-String__conf-Configuration__localResources-Map__String,LocalResource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1319,
  "functionEndLine": 1346,
  "numCommitsSeen": 56,
  "timeTaken": 4819,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/09/19 12:49 PM",
      "commitNameOld": "2e2e5401f297545181323b126a69eaa2239afb02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 35.13,
      "commitsBetweenForRepo": 302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   private boolean addAMLog4jResource(String serviceName, Configuration conf,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, BadClusterStateException {\n     boolean hasAMLog4j \u003d false;\n     String hadoopConfDir \u003d\n         System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n     if (hadoopConfDir !\u003d null) {\n       File localFile \u003d\n           new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n       if (localFile.exists()) {\n         Path localFilePath \u003d createLocalPath(localFile);\n         Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n         Path remoteConfPath \u003d\n             new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n         Path remoteFilePath \u003d\n             new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n         copy(conf, localFilePath, remoteFilePath);\n         LocalResource localResource \u003d\n-            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n+            fs.createAmResource(remoteConfPath, LocalResourceType.FILE,\n+            LocalResourceVisibility.APPLICATION);\n         localResources.put(localFilePath.getName(), localResource);\n         hasAMLog4j \u003d true;\n       } else {\n         LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n       }\n     }\n     return hasAMLog4j;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, BadClusterStateException {\n    boolean hasAMLog4j \u003d false;\n    String hadoopConfDir \u003d\n        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    if (hadoopConfDir !\u003d null) {\n      File localFile \u003d\n          new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n      if (localFile.exists()) {\n        Path localFilePath \u003d createLocalPath(localFile);\n        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n        Path remoteConfPath \u003d\n            new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n        Path remoteFilePath \u003d\n            new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n        copy(conf, localFilePath, remoteFilePath);\n        LocalResource localResource \u003d\n            fs.createAmResource(remoteConfPath, LocalResourceType.FILE,\n            LocalResourceVisibility.APPLICATION);\n        localResources.put(localFilePath.getName(), localResource);\n        hasAMLog4j \u003d true;\n      } else {\n        LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n      }\n    }\n    return hasAMLog4j;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean addAMLog4jResource(String appName, Configuration conf,\n+  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, BadClusterStateException {\n     boolean hasAMLog4j \u003d false;\n     String hadoopConfDir \u003d\n         System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n     if (hadoopConfDir !\u003d null) {\n       File localFile \u003d\n           new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n       if (localFile.exists()) {\n         Path localFilePath \u003d createLocalPath(localFile);\n-        Path appDirPath \u003d fs.buildClusterDirPath(appName);\n+        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n         Path remoteConfPath \u003d\n             new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n         Path remoteFilePath \u003d\n             new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n         copy(conf, localFilePath, remoteFilePath);\n         LocalResource localResource \u003d\n             fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n         localResources.put(localFilePath.getName(), localResource);\n         hasAMLog4j \u003d true;\n       } else {\n         LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n       }\n     }\n     return hasAMLog4j;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, BadClusterStateException {\n    boolean hasAMLog4j \u003d false;\n    String hadoopConfDir \u003d\n        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    if (hadoopConfDir !\u003d null) {\n      File localFile \u003d\n          new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n      if (localFile.exists()) {\n        Path localFilePath \u003d createLocalPath(localFile);\n        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n        Path remoteConfPath \u003d\n            new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n        Path remoteFilePath \u003d\n            new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n        copy(conf, localFilePath, remoteFilePath);\n        LocalResource localResource \u003d\n            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n        localResources.put(localFilePath.getName(), localResource);\n        hasAMLog4j \u003d true;\n      } else {\n        LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n      }\n    }\n    return hasAMLog4j;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean addAMLog4jResource(String appName, Configuration conf,\n+  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, BadClusterStateException {\n     boolean hasAMLog4j \u003d false;\n     String hadoopConfDir \u003d\n         System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n     if (hadoopConfDir !\u003d null) {\n       File localFile \u003d\n           new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n       if (localFile.exists()) {\n         Path localFilePath \u003d createLocalPath(localFile);\n-        Path appDirPath \u003d fs.buildClusterDirPath(appName);\n+        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n         Path remoteConfPath \u003d\n             new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n         Path remoteFilePath \u003d\n             new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n         copy(conf, localFilePath, remoteFilePath);\n         LocalResource localResource \u003d\n             fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n         localResources.put(localFilePath.getName(), localResource);\n         hasAMLog4j \u003d true;\n       } else {\n         LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n       }\n     }\n     return hasAMLog4j;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, BadClusterStateException {\n    boolean hasAMLog4j \u003d false;\n    String hadoopConfDir \u003d\n        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    if (hadoopConfDir !\u003d null) {\n      File localFile \u003d\n          new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n      if (localFile.exists()) {\n        Path localFilePath \u003d createLocalPath(localFile);\n        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n        Path remoteConfPath \u003d\n            new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n        Path remoteFilePath \u003d\n            new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n        copy(conf, localFilePath, remoteFilePath);\n        LocalResource localResource \u003d\n            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n        localResources.put(localFilePath.getName(), localResource);\n        hasAMLog4j \u003d true;\n      } else {\n        LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n      }\n    }\n    return hasAMLog4j;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n-  private boolean addAMLog4jResource(String appName, Configuration conf,\n+  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, BadClusterStateException {\n     boolean hasAMLog4j \u003d false;\n     String hadoopConfDir \u003d\n         System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n     if (hadoopConfDir !\u003d null) {\n       File localFile \u003d\n           new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n       if (localFile.exists()) {\n         Path localFilePath \u003d createLocalPath(localFile);\n-        Path appDirPath \u003d fs.buildClusterDirPath(appName);\n+        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n         Path remoteConfPath \u003d\n             new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n         Path remoteFilePath \u003d\n             new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n         copy(conf, localFilePath, remoteFilePath);\n         LocalResource localResource \u003d\n             fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n         localResources.put(localFilePath.getName(), localResource);\n         hasAMLog4j \u003d true;\n       } else {\n         LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n       }\n     }\n     return hasAMLog4j;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean addAMLog4jResource(String serviceName, Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, BadClusterStateException {\n    boolean hasAMLog4j \u003d false;\n    String hadoopConfDir \u003d\n        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    if (hadoopConfDir !\u003d null) {\n      File localFile \u003d\n          new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n      if (localFile.exists()) {\n        Path localFilePath \u003d createLocalPath(localFile);\n        Path appDirPath \u003d fs.buildClusterDirPath(serviceName);\n        Path remoteConfPath \u003d\n            new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n        Path remoteFilePath \u003d\n            new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n        copy(conf, localFilePath, remoteFilePath);\n        LocalResource localResource \u003d\n            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n        localResources.put(localFilePath.getName(), localResource);\n        hasAMLog4j \u003d true;\n      } else {\n        LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n      }\n    }\n    return hasAMLog4j;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String, conf-Configuration, localResources-Map\u003cString,LocalResource\u003e]",
            "newValue": "[serviceName-String, conf-Configuration, localResources-Map\u003cString,LocalResource\u003e]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   private boolean addAMLog4jResource(String appName, Configuration conf,\n       Map\u003cString, LocalResource\u003e localResources)\n       throws IOException, BadClusterStateException {\n-    boolean hasSliderAMLog4j \u003d false;\n+    boolean hasAMLog4j \u003d false;\n     String hadoopConfDir \u003d\n         System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n     if (hadoopConfDir !\u003d null) {\n       File localFile \u003d\n-          new File(hadoopConfDir, SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n+          new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n       if (localFile.exists()) {\n         Path localFilePath \u003d createLocalPath(localFile);\n         Path appDirPath \u003d fs.buildClusterDirPath(appName);\n         Path remoteConfPath \u003d\n-            new Path(appDirPath, SliderKeys.SUBMITTED_CONF_DIR);\n+            new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n         Path remoteFilePath \u003d\n-            new Path(remoteConfPath, SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n+            new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n         copy(conf, localFilePath, remoteFilePath);\n         LocalResource localResource \u003d\n             fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n         localResources.put(localFilePath.getName(), localResource);\n-        hasSliderAMLog4j \u003d true;\n+        hasAMLog4j \u003d true;\n+      } else {\n+        LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n       }\n     }\n-    return hasSliderAMLog4j;\n+    return hasAMLog4j;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean addAMLog4jResource(String appName, Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, BadClusterStateException {\n    boolean hasAMLog4j \u003d false;\n    String hadoopConfDir \u003d\n        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    if (hadoopConfDir !\u003d null) {\n      File localFile \u003d\n          new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n      if (localFile.exists()) {\n        Path localFilePath \u003d createLocalPath(localFile);\n        Path appDirPath \u003d fs.buildClusterDirPath(appName);\n        Path remoteConfPath \u003d\n            new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\n        Path remoteFilePath \u003d\n            new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\n        copy(conf, localFilePath, remoteFilePath);\n        LocalResource localResource \u003d\n            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n        localResources.put(localFilePath.getName(), localResource);\n        hasAMLog4j \u003d true;\n      } else {\n        LOG.warn(\"AM log4j property file doesn\u0027t exist: \" + localFile);\n      }\n    }\n    return hasAMLog4j;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,25 @@\n+  private boolean addAMLog4jResource(String appName, Configuration conf,\n+      Map\u003cString, LocalResource\u003e localResources)\n+      throws IOException, BadClusterStateException {\n+    boolean hasSliderAMLog4j \u003d false;\n+    String hadoopConfDir \u003d\n+        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n+    if (hadoopConfDir !\u003d null) {\n+      File localFile \u003d\n+          new File(hadoopConfDir, SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n+      if (localFile.exists()) {\n+        Path localFilePath \u003d createLocalPath(localFile);\n+        Path appDirPath \u003d fs.buildClusterDirPath(appName);\n+        Path remoteConfPath \u003d\n+            new Path(appDirPath, SliderKeys.SUBMITTED_CONF_DIR);\n+        Path remoteFilePath \u003d\n+            new Path(remoteConfPath, SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n+        copy(conf, localFilePath, remoteFilePath);\n+        LocalResource localResource \u003d\n+            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n+        localResources.put(localFilePath.getName(), localResource);\n+        hasSliderAMLog4j \u003d true;\n+      }\n+    }\n+    return hasSliderAMLog4j;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean addAMLog4jResource(String appName, Configuration conf,\n      Map\u003cString, LocalResource\u003e localResources)\n      throws IOException, BadClusterStateException {\n    boolean hasSliderAMLog4j \u003d false;\n    String hadoopConfDir \u003d\n        System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\n    if (hadoopConfDir !\u003d null) {\n      File localFile \u003d\n          new File(hadoopConfDir, SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n      if (localFile.exists()) {\n        Path localFilePath \u003d createLocalPath(localFile);\n        Path appDirPath \u003d fs.buildClusterDirPath(appName);\n        Path remoteConfPath \u003d\n            new Path(appDirPath, SliderKeys.SUBMITTED_CONF_DIR);\n        Path remoteFilePath \u003d\n            new Path(remoteConfPath, SliderKeys.LOG4J_SERVER_PROP_FILENAME);\n        copy(conf, localFilePath, remoteFilePath);\n        LocalResource localResource \u003d\n            fs.createAmResource(remoteConfPath, LocalResourceType.FILE);\n        localResources.put(localFilePath.getName(), localResource);\n        hasSliderAMLog4j \u003d true;\n      }\n    }\n    return hasSliderAMLog4j;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}