{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryPlan.java",
  "functionName": "archiveCompletedReservations",
  "functionId": "archiveCompletedReservations___tick-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
  "functionStartLine": 475,
  "functionEndLine": 514,
  "numCommitsSeen": 19,
  "timeTaken": 1046,
  "changeHistory": [
    "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168"
  ],
  "changeHistoryShort": {
    "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400": "Ybodychange",
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2611. Fixing jenkins findbugs warning and TestRMWebServicesCapacitySched for branch YARN-1051. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit c47464aba407d1dafe10be23fe454f0489cc4367)\n",
      "commitDate": "03/10/14 3:43 PM",
      "commitName": "a2986234be4e02f9ccb589f9ff5f7ffb28bc6400",
      "commitAuthor": "subru",
      "commitDateOld": "03/10/14 3:43 PM",
      "commitNameOld": "5e10a13bb4759984494c6a870c7f08fb6693c9c0",
      "commitAuthorOld": "subru",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void archiveCompletedReservations(long tick) {\n     // Since we are looking for old reservations, read lock is optimal\n     LOG.debug(\"Running archival at time: {}\", tick);\n-    readLock.lock();\n     List\u003cInMemoryReservationAllocation\u003e expiredReservations \u003d\n         new ArrayList\u003cInMemoryReservationAllocation\u003e();\n+    readLock.lock();\n     // archive reservations and delete the ones which are beyond\n     // the reservation policy \"window\"\n     try {\n       long archivalTime \u003d tick - policy.getValidWindow();\n       ReservationInterval searchInterval \u003d\n           new ReservationInterval(archivalTime, archivalTime);\n       SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n           currentReservations.headMap(searchInterval, true);\n       if (!reservations.isEmpty()) {\n         for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n             .values()) {\n           for (InMemoryReservationAllocation reservation : reservationEntries) {\n             if (reservation.getEndTime() \u003c\u003d archivalTime) {\n               expiredReservations.add(reservation);\n             }\n           }\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     if (expiredReservations.isEmpty()) {\n       return;\n     }\n     // Need write lock only if there are any reservations to be deleted\n     writeLock.lock();\n     try {\n       for (InMemoryReservationAllocation expiredReservation : expiredReservations) {\n         removeReservation(expiredReservation);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void archiveCompletedReservations(long tick) {\n    // Since we are looking for old reservations, read lock is optimal\n    LOG.debug(\"Running archival at time: {}\", tick);\n    List\u003cInMemoryReservationAllocation\u003e expiredReservations \u003d\n        new ArrayList\u003cInMemoryReservationAllocation\u003e();\n    readLock.lock();\n    // archive reservations and delete the ones which are beyond\n    // the reservation policy \"window\"\n    try {\n      long archivalTime \u003d tick - policy.getValidWindow();\n      ReservationInterval searchInterval \u003d\n          new ReservationInterval(archivalTime, archivalTime);\n      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n          currentReservations.headMap(searchInterval, true);\n      if (!reservations.isEmpty()) {\n        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n            .values()) {\n          for (InMemoryReservationAllocation reservation : reservationEntries) {\n            if (reservation.getEndTime() \u003c\u003d archivalTime) {\n              expiredReservations.add(reservation);\n            }\n          }\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    if (expiredReservations.isEmpty()) {\n      return;\n    }\n    // Need write lock only if there are any reservations to be deleted\n    writeLock.lock();\n    try {\n      for (InMemoryReservationAllocation expiredReservation : expiredReservations) {\n        removeReservation(expiredReservation);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java",
      "extendedDetails": {}
    },
    "cf4b34282aafee9f6b09d3433c4de1ae4b359168": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1709. In-memory data structures used to track resources over time to enable reservations.\n(cherry picked from commit 0d8b2cd88b958b1e602fd4ea4078ef8d4742a7c3)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "cf4b34282aafee9f6b09d3433c4de1ae4b359168",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,40 @@\n+  public void archiveCompletedReservations(long tick) {\n+    // Since we are looking for old reservations, read lock is optimal\n+    LOG.debug(\"Running archival at time: {}\", tick);\n+    readLock.lock();\n+    List\u003cInMemoryReservationAllocation\u003e expiredReservations \u003d\n+        new ArrayList\u003cInMemoryReservationAllocation\u003e();\n+    // archive reservations and delete the ones which are beyond\n+    // the reservation policy \"window\"\n+    try {\n+      long archivalTime \u003d tick - policy.getValidWindow();\n+      ReservationInterval searchInterval \u003d\n+          new ReservationInterval(archivalTime, archivalTime);\n+      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n+          currentReservations.headMap(searchInterval, true);\n+      if (!reservations.isEmpty()) {\n+        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n+            .values()) {\n+          for (InMemoryReservationAllocation reservation : reservationEntries) {\n+            if (reservation.getEndTime() \u003c\u003d archivalTime) {\n+              expiredReservations.add(reservation);\n+            }\n+          }\n+        }\n+      }\n+    } finally {\n+      readLock.unlock();\n+    }\n+    if (expiredReservations.isEmpty()) {\n+      return;\n+    }\n+    // Need write lock only if there are any reservations to be deleted\n+    writeLock.lock();\n+    try {\n+      for (InMemoryReservationAllocation expiredReservation : expiredReservations) {\n+        removeReservation(expiredReservation);\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void archiveCompletedReservations(long tick) {\n    // Since we are looking for old reservations, read lock is optimal\n    LOG.debug(\"Running archival at time: {}\", tick);\n    readLock.lock();\n    List\u003cInMemoryReservationAllocation\u003e expiredReservations \u003d\n        new ArrayList\u003cInMemoryReservationAllocation\u003e();\n    // archive reservations and delete the ones which are beyond\n    // the reservation policy \"window\"\n    try {\n      long archivalTime \u003d tick - policy.getValidWindow();\n      ReservationInterval searchInterval \u003d\n          new ReservationInterval(archivalTime, archivalTime);\n      SortedMap\u003cReservationInterval, Set\u003cInMemoryReservationAllocation\u003e\u003e reservations \u003d\n          currentReservations.headMap(searchInterval, true);\n      if (!reservations.isEmpty()) {\n        for (Set\u003cInMemoryReservationAllocation\u003e reservationEntries : reservations\n            .values()) {\n          for (InMemoryReservationAllocation reservation : reservationEntries) {\n            if (reservation.getEndTime() \u003c\u003d archivalTime) {\n              expiredReservations.add(reservation);\n            }\n          }\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    if (expiredReservations.isEmpty()) {\n      return;\n    }\n    // Need write lock only if there are any reservations to be deleted\n    writeLock.lock();\n    try {\n      for (InMemoryReservationAllocation expiredReservation : expiredReservations) {\n        removeReservation(expiredReservation);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/InMemoryPlan.java"
    }
  }
}