{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalContainerAllocator.java",
  "functionName": "handle",
  "functionId": "handle___event-ContainerAllocatorEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
  "functionStartLine": 171,
  "functionEndLine": 198,
  "numCommitsSeen": 30,
  "timeTaken": 7627,
  "changeHistory": [
    "ecce3b7d53ab624c9931273716326c76641ea11d",
    "43cd07b408c6613d2c9aa89203cfa3110d830538",
    "0af1a2b5bc1469ba22edb63cd58f9b436b1dc4d3",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7",
    "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
    "4e44259cbda1d5c5e923f979c6f6f8bdb3056198",
    "547ded7bfeadddcb633f74de62fea310d61ba233",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "ecce3b7d53ab624c9931273716326c76641ea11d": "Ybodychange",
    "43cd07b408c6613d2c9aa89203cfa3110d830538": "Ybodychange",
    "0af1a2b5bc1469ba22edb63cd58f9b436b1dc4d3": "Ybodychange",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": "Ybodychange",
    "39f019f41392d9e46ea1dc86ddd5563aabbeda1e": "Ybodychange",
    "4e44259cbda1d5c5e923f979c6f6f8bdb3056198": "Ybodychange",
    "547ded7bfeadddcb633f74de62fea310d61ba233": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ecce3b7d53ab624c9931273716326c76641ea11d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6677. LocalContainerAllocator doesn\u0027t specify resource of the containers allocated (haibochen via rkanter)\n",
      "commitDate": "04/05/16 10:19 PM",
      "commitName": "ecce3b7d53ab624c9931273716326c76641ea11d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "24/11/15 2:07 PM",
      "commitNameOld": "f634505d48d97e4d461980d68a0cbdf87223646d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 162.3,
      "commitsBetweenForRepo": 990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       // Assign the same container ID as the AM\n       ContainerId cID \u003d\n           ContainerId.newContainerId(getContext().getApplicationAttemptId(),\n             this.containerId.getContainerId());\n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n+      container.setResource(Resource.newInstance(0, 0));\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      // Assign the same container ID as the AM\n      ContainerId cID \u003d\n          ContainerId.newContainerId(getContext().getApplicationAttemptId(),\n            this.containerId.getContainerId());\n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n      container.setResource(Resource.newInstance(0, 0));\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "43cd07b408c6613d2c9aa89203cfa3110d830538": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2830. Add backwords compatible ContainerId.newInstance constructor. Contributed by Jonathan Eagles.\n",
      "commitDate": "09/11/14 2:57 PM",
      "commitName": "43cd07b408c6613d2c9aa89203cfa3110d830538",
      "commitAuthor": "Arun C. Murthy",
      "commitDateOld": "23/10/14 9:56 PM",
      "commitNameOld": "0f3b6900be1a3b2e4624f31f84656f4a32dadce9",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 16.75,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       // Assign the same container ID as the AM\n       ContainerId cID \u003d\n-          ContainerId.newInstance(getContext().getApplicationAttemptId(),\n+          ContainerId.newContainerId(getContext().getApplicationAttemptId(),\n             this.containerId.getContainerId());\n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      // Assign the same container ID as the AM\n      ContainerId cID \u003d\n          ContainerId.newContainerId(getContext().getApplicationAttemptId(),\n            this.containerId.getContainerId());\n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "0af1a2b5bc1469ba22edb63cd58f9b436b1dc4d3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2312. Deprecated old ContainerId#getId API and updated MapReduce to use ContainerId#getContainerId instead. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "15/10/14 3:22 PM",
      "commitName": "0af1a2b5bc1469ba22edb63cd58f9b436b1dc4d3",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/07/14 11:46 AM",
      "commitNameOld": "875592220fb250ff9d0bba73c8ace9858fd369fd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 90.15,
      "commitsBetweenForRepo": 889,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       // Assign the same container ID as the AM\n       ContainerId cID \u003d\n           ContainerId.newInstance(getContext().getApplicationAttemptId(),\n-            this.containerId.getId());\n+            this.containerId.getContainerId());\n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      // Assign the same container ID as the AM\n      ContainerId cID \u003d\n          ContainerId.newInstance(getContext().getApplicationAttemptId(),\n            this.containerId.getContainerId());\n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-918. Remove ApplicationAttemptId from RegisterApplicationMasterRequestProto. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:57 PM",
      "commitName": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       // Assign the same container ID as the AM\n       ContainerId cID \u003d\n-          ContainerId.newInstance(applicationAttemptId,\n+          ContainerId.newInstance(getContext().getApplicationAttemptId(),\n             this.containerId.getId());\n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      // Assign the same container ID as the AM\n      ContainerId cID \u003d\n          ContainerId.newInstance(getContext().getApplicationAttemptId(),\n            this.containerId.getId());\n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "39f019f41392d9e46ea1dc86ddd5563aabbeda1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-735. Make ApplicationAttemptId, ContainerId and NodeId immutable. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/13 5:14 PM",
      "commitName": "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "03/04/13 6:56 PM",
      "commitNameOld": "fc75d3f3dc2733d6c783eb4d4f1c5c6ae680f08e",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 57.93,
      "commitsBetweenForRepo": 343,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n-      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n-      cID.setApplicationAttemptId(applicationAttemptId);\n       // Assign the same container ID as the AM\n-      cID.setId(this.containerId.getId());\n-      \n+      ContainerId cID \u003d\n+          ContainerId.newInstance(applicationAttemptId,\n+            this.containerId.getId());\n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n-      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n-      nodeId.setHost(this.nmHost);\n-      nodeId.setPort(this.nmPort);\n+      NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      // Assign the same container ID as the AM\n      ContainerId cID \u003d\n          ContainerId.newInstance(applicationAttemptId,\n            this.containerId.getId());\n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d NodeId.newInstance(this.nmHost, this.nmPort);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "4e44259cbda1d5c5e923f979c6f6f8bdb3056198": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3682 Tracker URL says AM tasks run on localhost. (Ravi Prakash via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1309440 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 8:08 AM",
      "commitName": "4e44259cbda1d5c5e923f979c6f6f8bdb3056198",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "29/02/12 7:49 AM",
      "commitNameOld": "547ded7bfeadddcb633f74de62fea310d61ba233",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 34.97,
      "commitsBetweenForRepo": 241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n       cID.setApplicationAttemptId(applicationAttemptId);\n-      // use negative ids to denote that these are local. Need a better way ??\n-      cID.setId((-1) * containerCount.getAndIncrement());\n+      // Assign the same container ID as the AM\n+      cID.setId(this.containerId.getId());\n       \n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d Records.newRecord(NodeId.class);\n-      nodeId.setHost(\"localhost\");\n-      nodeId.setPort(1234);\n+      nodeId.setHost(this.nmHost);\n+      nodeId.setPort(this.nmPort);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n-      container.setNodeHttpAddress(\"localhost:8042\");\n+      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n      cID.setApplicationAttemptId(applicationAttemptId);\n      // Assign the same container ID as the AM\n      cID.setId(this.containerId.getId());\n      \n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n      nodeId.setHost(this.nmHost);\n      nodeId.setPort(this.nmPort);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(this.nmHost + \":\" + this.nmHttpPort);\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "547ded7bfeadddcb633f74de62fea310d61ba233": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3920. Revise yarn default port number selection (Dave Thompson via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1295162 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/02/12 7:49 AM",
      "commitName": "547ded7bfeadddcb633f74de62fea310d61ba233",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "03/02/12 4:04 PM",
      "commitNameOld": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 25.66,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n       cID.setApplicationAttemptId(applicationAttemptId);\n       // use negative ids to denote that these are local. Need a better way ??\n       cID.setId((-1) * containerCount.getAndIncrement());\n       \n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d Records.newRecord(NodeId.class);\n       nodeId.setHost(\"localhost\");\n       nodeId.setPort(1234);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n-      container.setNodeHttpAddress(\"localhost:9999\");\n+      container.setNodeHttpAddress(\"localhost:8042\");\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n      cID.setApplicationAttemptId(applicationAttemptId);\n      // use negative ids to denote that these are local. Need a better way ??\n      cID.setId((-1) * containerCount.getAndIncrement());\n      \n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n      nodeId.setHost(\"localhost\");\n      nodeId.setPort(1234);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(\"localhost:8042\");\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/09/11 12:31 AM",
      "commitNameOld": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.18,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n       cID.setApplicationAttemptId(applicationAttemptId);\n       // use negative ids to denote that these are local. Need a better way ??\n       cID.setId((-1) * containerCount.getAndIncrement());\n       \n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d Records.newRecord(NodeId.class);\n       nodeId.setHost(\"localhost\");\n       nodeId.setPort(1234);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(\"localhost:9999\");\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n-          event.getAttemptID(), container));\n+          event.getAttemptID(), container, applicationACLs));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n      cID.setApplicationAttemptId(applicationAttemptId);\n      // use negative ids to denote that these are local. Need a better way ??\n      cID.setId((-1) * containerCount.getAndIncrement());\n      \n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n      nodeId.setHost(\"localhost\");\n      nodeId.setPort(1234);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(\"localhost:9999\");\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container, applicationACLs));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2896. Simplify all apis to in org.apache.hadoop.yarn.api.records.* to be get/set only. Added javadocs to all public records.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169980 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/09/11 5:05 PM",
      "commitName": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 18.99,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public void handle(ContainerAllocatorEvent event) {\n     if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n       LOG.info(\"Processing the event \" + event.toString());\n       ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n-      cID.setAppId(appID);\n+      cID.setApplicationAttemptId(applicationAttemptId);\n       // use negative ids to denote that these are local. Need a better way ??\n       cID.setId((-1) * containerCount.getAndIncrement());\n       \n       Container container \u003d recordFactory.newRecordInstance(Container.class);\n       container.setId(cID);\n       NodeId nodeId \u003d Records.newRecord(NodeId.class);\n       nodeId.setHost(\"localhost\");\n       nodeId.setPort(1234);\n       container.setNodeId(nodeId);\n       container.setContainerToken(null);\n       container.setNodeHttpAddress(\"localhost:9999\");\n       // send the container-assigned event to task attempt\n \n       if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n         JobCounterUpdateEvent jce \u003d\n             new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                 .getJobId());\n         // TODO Setting OTHER_LOCAL_MAP for now.\n         jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n         eventHandler.handle(jce);\n       }\n       eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n           event.getAttemptID(), container));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n      cID.setApplicationAttemptId(applicationAttemptId);\n      // use negative ids to denote that these are local. Need a better way ??\n      cID.setId((-1) * containerCount.getAndIncrement());\n      \n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n      nodeId.setHost(\"localhost\");\n      nodeId.setPort(1234);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(\"localhost:9999\");\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n      cID.setAppId(appID);\n      // use negative ids to denote that these are local. Need a better way ??\n      cID.setId((-1) * containerCount.getAndIncrement());\n      \n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n      nodeId.setHost(\"localhost\");\n      nodeId.setPort(1234);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(\"localhost:9999\");\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,30 @@\n+  public void handle(ContainerAllocatorEvent event) {\n+    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n+      LOG.info(\"Processing the event \" + event.toString());\n+      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n+      cID.setAppId(appID);\n+      // use negative ids to denote that these are local. Need a better way ??\n+      cID.setId((-1) * containerCount.getAndIncrement());\n+      \n+      Container container \u003d recordFactory.newRecordInstance(Container.class);\n+      container.setId(cID);\n+      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n+      nodeId.setHost(\"localhost\");\n+      nodeId.setPort(1234);\n+      container.setNodeId(nodeId);\n+      container.setContainerToken(null);\n+      container.setNodeHttpAddress(\"localhost:9999\");\n+      // send the container-assigned event to task attempt\n+\n+      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n+        JobCounterUpdateEvent jce \u003d\n+            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n+                .getJobId());\n+        // TODO Setting OTHER_LOCAL_MAP for now.\n+        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n+        eventHandler.handle(jce);\n+      }\n+      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n+          event.getAttemptID(), container));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerAllocatorEvent event) {\n    if (event.getType() \u003d\u003d ContainerAllocator.EventType.CONTAINER_REQ) {\n      LOG.info(\"Processing the event \" + event.toString());\n      ContainerId cID \u003d recordFactory.newRecordInstance(ContainerId.class);\n      cID.setAppId(appID);\n      // use negative ids to denote that these are local. Need a better way ??\n      cID.setId((-1) * containerCount.getAndIncrement());\n      \n      Container container \u003d recordFactory.newRecordInstance(Container.class);\n      container.setId(cID);\n      NodeId nodeId \u003d Records.newRecord(NodeId.class);\n      nodeId.setHost(\"localhost\");\n      nodeId.setPort(1234);\n      container.setNodeId(nodeId);\n      container.setContainerToken(null);\n      container.setNodeHttpAddress(\"localhost:9999\");\n      // send the container-assigned event to task attempt\n\n      if (event.getAttemptID().getTaskId().getTaskType() \u003d\u003d TaskType.MAP) {\n        JobCounterUpdateEvent jce \u003d\n            new JobCounterUpdateEvent(event.getAttemptID().getTaskId()\n                .getJobId());\n        // TODO Setting OTHER_LOCAL_MAP for now.\n        jce.addCounterUpdate(JobCounter.OTHER_LOCAL_MAPS, 1);\n        eventHandler.handle(jce);\n      }\n      eventHandler.handle(new TaskAttemptContainerAssignedEvent(\n          event.getAttemptID(), container));\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/local/LocalContainerAllocator.java"
    }
  }
}