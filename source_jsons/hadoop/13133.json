{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheReplicationMonitor.java",
  "functionName": "chooseDatanodesForCaching",
  "functionId": "chooseDatanodesForCaching___possibilities-List__DatanodeDescriptor__(modifiers-final)__neededCached-int(modifiers-final)__staleInterval-long(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
  "functionStartLine": 755,
  "functionEndLine": 791,
  "numCommitsSeen": 28,
  "timeTaken": 1012,
  "changeHistory": [
    "8deb7a60575ad33b78a5167673276275ba7bece5"
  ],
  "changeHistoryShort": {
    "8deb7a60575ad33b78a5167673276275ba7bece5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8deb7a60575ad33b78a5167673276275ba7bece5": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5589. Namenode loops caching and uncaching when data should be uncached. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1555996 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 11:45 AM",
      "commitName": "8deb7a60575ad33b78a5167673276275ba7bece5",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,37 @@\n+  private static List\u003cDatanodeDescriptor\u003e chooseDatanodesForCaching(\n+      final List\u003cDatanodeDescriptor\u003e possibilities, final int neededCached,\n+      final long staleInterval) {\n+    // Make a copy that we can modify\n+    List\u003cDatanodeDescriptor\u003e targets \u003d\n+        new ArrayList\u003cDatanodeDescriptor\u003e(possibilities);\n+    // Selected targets\n+    List\u003cDatanodeDescriptor\u003e chosen \u003d new LinkedList\u003cDatanodeDescriptor\u003e();\n+\n+    // Filter out stale datanodes\n+    List\u003cDatanodeDescriptor\u003e stale \u003d new LinkedList\u003cDatanodeDescriptor\u003e();\n+    Iterator\u003cDatanodeDescriptor\u003e it \u003d targets.iterator();\n+    while (it.hasNext()) {\n+      DatanodeDescriptor d \u003d it.next();\n+      if (d.isStale(staleInterval)) {\n+        it.remove();\n+        stale.add(d);\n+      }\n+    }\n+    // Select targets\n+    while (chosen.size() \u003c neededCached) {\n+      // Try to use stale nodes if we\u0027re out of non-stale nodes, else we\u0027re done\n+      if (targets.isEmpty()) {\n+        if (!stale.isEmpty()) {\n+          targets \u003d stale;\n+        } else {\n+          break;\n+        }\n+      }\n+      // Select a random target\n+      DatanodeDescriptor target \u003d\n+          chooseRandomDatanodeByRemainingCapacity(targets);\n+      chosen.add(target);\n+      targets.remove(target);\n+    }\n+    return chosen;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cDatanodeDescriptor\u003e chooseDatanodesForCaching(\n      final List\u003cDatanodeDescriptor\u003e possibilities, final int neededCached,\n      final long staleInterval) {\n    // Make a copy that we can modify\n    List\u003cDatanodeDescriptor\u003e targets \u003d\n        new ArrayList\u003cDatanodeDescriptor\u003e(possibilities);\n    // Selected targets\n    List\u003cDatanodeDescriptor\u003e chosen \u003d new LinkedList\u003cDatanodeDescriptor\u003e();\n\n    // Filter out stale datanodes\n    List\u003cDatanodeDescriptor\u003e stale \u003d new LinkedList\u003cDatanodeDescriptor\u003e();\n    Iterator\u003cDatanodeDescriptor\u003e it \u003d targets.iterator();\n    while (it.hasNext()) {\n      DatanodeDescriptor d \u003d it.next();\n      if (d.isStale(staleInterval)) {\n        it.remove();\n        stale.add(d);\n      }\n    }\n    // Select targets\n    while (chosen.size() \u003c neededCached) {\n      // Try to use stale nodes if we\u0027re out of non-stale nodes, else we\u0027re done\n      if (targets.isEmpty()) {\n        if (!stale.isEmpty()) {\n          targets \u003d stale;\n        } else {\n          break;\n        }\n      }\n      // Select a random target\n      DatanodeDescriptor target \u003d\n          chooseRandomDatanodeByRemainingCapacity(targets);\n      chosen.add(target);\n      targets.remove(target);\n    }\n    return chosen;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java"
    }
  }
}