{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPoolSliceStorage.java",
  "functionName": "doRollback",
  "functionId": "doRollback___bpSd-StorageDirectory__nsInfo-NamespaceInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
  "functionStartLine": 604,
  "functionEndLine": 644,
  "numCommitsSeen": 41,
  "timeTaken": 6151,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "d3949058b84c393413ffea11de5c81ab8ad2ae3c",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "d3949058b84c393413ffea11de5c81ab8ad2ae3c": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (prevDir \u003d\u003d null || !prevDir.exists()) {\n       return;\n     }\n     // read attributes out of the VERSION file of previous directory\n     BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n     if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION \u0026\u0026\n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n               + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n-    \n-    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n-        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n-        + \"; target CTime \u003d \" + nsInfo.getCTime());\n+\n+    LOG.info(\"Rolling back storage directory {}.\\n   target LV \u003d {}; target \"\n+            + \"CTime \u003d {}\", bpSd.getRoot(), nsInfo.getLayoutVersion(),\n+        nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n-    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n+    LOG.info(\"Rollback of {} is complete\", bpSd.getRoot());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (prevDir \u003d\u003d null || !prevDir.exists()) {\n      return;\n    }\n    // read attributes out of the VERSION file of previous directory\n    BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION \u0026\u0026\n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n\n    LOG.info(\"Rolling back storage directory {}.\\n   target LV \u003d {}; target \"\n            + \"CTime \u003d {}\", bpSd.getRoot(), nsInfo.getLayoutVersion(),\n        nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of {} is complete\", bpSd.getRoot());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "18/01/17 11:38 PM",
      "commitNameOld": "63320d1daab7ce846bb180623378efe431ad8c52",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 330.76,
      "commitsBetweenForRepo": 2183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n-    if (!prevDir.exists())\n+    if (prevDir \u003d\u003d null || !prevDir.exists()) {\n       return;\n+    }\n     // read attributes out of the VERSION file of previous directory\n     BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n     if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION \u0026\u0026\n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n               + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n     LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (prevDir \u003d\u003d null || !prevDir.exists()) {\n      return;\n    }\n    // read attributes out of the VERSION file of previous directory\n    BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION \u0026\u0026\n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/03/15 3:25 PM",
      "commitNameOld": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.78,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (!prevDir.exists())\n       return;\n     // read attributes out of the VERSION file of previous directory\n     BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n-    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \u0026\u0026 \n+    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION \u0026\u0026\n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n-              + HdfsConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n+              + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n     LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION \u0026\u0026\n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/01/14 12:01 PM",
      "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (!prevDir.exists())\n       return;\n     // read attributes out of the VERSION file of previous directory\n     BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n-    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n+    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \u0026\u0026 \n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n-              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n+              + HdfsConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n     LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + HdfsConstants.DATANODE_LAYOUT_VERSION + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "d3949058b84c393413ffea11de5c81ab8ad2ae3c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3970. Fix bug causing rollback of HDFS upgrade to result in bad VERSION file. Contributed by Vinay and Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430037 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/13 1:47 PM",
      "commitName": "d3949058b84c393413ffea11de5c81ab8ad2ae3c",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "28/10/12 4:10 PM",
      "commitNameOld": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 70.94,
      "commitsBetweenForRepo": 293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (!prevDir.exists())\n       return;\n     // read attributes out of the VERSION file of previous directory\n-    DataStorage prevInfo \u003d new DataStorage();\n+    BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n     if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n               + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n     LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    BlockPoolSliceStorage prevInfo \u003d new BlockPoolSliceStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "21/08/12 2:18 PM",
      "commitNameOld": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 68.08,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (!prevDir.exists())\n       return;\n     // read attributes out of the VERSION file of previous directory\n     DataStorage prevInfo \u003d new DataStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n     if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n               + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n-    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n+    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    DataStorage prevInfo \u003d new DataStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (!prevDir.exists())\n       return;\n     // read attributes out of the VERSION file of previous directory\n     DataStorage prevInfo \u003d new DataStorage();\n     prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n-    if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n+    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n       throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n               + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n     LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    DataStorage prevInfo \u003d new DataStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d HdfsConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    DataStorage prevInfo \u003d new DataStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    DataStorage prevInfo \u003d new DataStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 45.22,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     File prevDir \u003d bpSd.getPreviousDir();\n     // regular startup if previous dir does not exist\n     if (!prevDir.exists())\n       return;\n     // read attributes out of the VERSION file of previous directory\n     DataStorage prevInfo \u003d new DataStorage();\n-    StorageDirectory prevSD \u003d prevInfo.new StorageDirectory(bpSd.getRoot());\n-    prevSD.read(prevSD.getPreviousVersionFile());\n+    prevInfo.readPreviousVersionProperties(bpSd);\n \n     // We allow rollback to a state, which is either consistent with\n     // the namespace state or can be further upgraded to it.\n     // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n     // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n     if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n         prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n-      throw new InconsistentFSStateException(prevSD.getRoot(),\n+      throw new InconsistentFSStateException(bpSd.getRoot(),\n           \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n               + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n               + \" is newer than the namespace state: LV \u003d \"\n               + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n     }\n     \n     LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n         + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; target CTime \u003d \" + nsInfo.getCTime());\n     File tmpDir \u003d bpSd.getRemovedTmp();\n     assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n     // 1. rename current to tmp\n     File curDir \u003d bpSd.getCurrentDir();\n     assert curDir.exists() : \"Current directory must exist.\";\n     rename(curDir, tmpDir);\n     \n     // 2. rename previous to current\n     rename(prevDir, curDir);\n     \n     // 3. delete removed.tmp dir\n     deleteDir(tmpDir);\n     LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    DataStorage prevInfo \u003d new DataStorage();\n    prevInfo.readPreviousVersionProperties(bpSd);\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(bpSd.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n+      throws IOException {\n+    File prevDir \u003d bpSd.getPreviousDir();\n+    // regular startup if previous dir does not exist\n+    if (!prevDir.exists())\n+      return;\n+    // read attributes out of the VERSION file of previous directory\n+    DataStorage prevInfo \u003d new DataStorage();\n+    StorageDirectory prevSD \u003d prevInfo.new StorageDirectory(bpSd.getRoot());\n+    prevSD.read(prevSD.getPreviousVersionFile());\n+\n+    // We allow rollback to a state, which is either consistent with\n+    // the namespace state or can be further upgraded to it.\n+    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n+    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n+    if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n+        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n+      throw new InconsistentFSStateException(prevSD.getRoot(),\n+          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n+              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n+              + \" is newer than the namespace state: LV \u003d \"\n+              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n+    }\n+    \n+    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n+        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n+        + \"; target CTime \u003d \" + nsInfo.getCTime());\n+    File tmpDir \u003d bpSd.getRemovedTmp();\n+    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n+    // 1. rename current to tmp\n+    File curDir \u003d bpSd.getCurrentDir();\n+    assert curDir.exists() : \"Current directory must exist.\";\n+    rename(curDir, tmpDir);\n+    \n+    // 2. rename previous to current\n+    rename(prevDir, curDir);\n+    \n+    // 3. delete removed.tmp dir\n+    deleteDir(tmpDir);\n+    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void doRollback(StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    File prevDir \u003d bpSd.getPreviousDir();\n    // regular startup if previous dir does not exist\n    if (!prevDir.exists())\n      return;\n    // read attributes out of the VERSION file of previous directory\n    DataStorage prevInfo \u003d new DataStorage();\n    StorageDirectory prevSD \u003d prevInfo.new StorageDirectory(bpSd.getRoot());\n    prevSD.read(prevSD.getPreviousVersionFile());\n\n    // We allow rollback to a state, which is either consistent with\n    // the namespace state or can be further upgraded to it.\n    // In another word, we can only roll back when ( storedLV \u003e\u003d software LV)\n    // \u0026\u0026 ( DN.previousCTime \u003c\u003d NN.ctime)\n    if (!(prevInfo.getLayoutVersion() \u003e\u003d FSConstants.LAYOUT_VERSION \u0026\u0026 \n        prevInfo.getCTime() \u003c\u003d nsInfo.getCTime())) { // cannot rollback\n      throw new InconsistentFSStateException(prevSD.getRoot(),\n          \"Cannot rollback to a newer state.\\nDatanode previous state: LV \u003d \"\n              + prevInfo.getLayoutVersion() + \" CTime \u003d \" + prevInfo.getCTime()\n              + \" is newer than the namespace state: LV \u003d \"\n              + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n    }\n    \n    LOG.info(\"Rolling back storage directory \" + bpSd.getRoot()\n        + \".\\n   target LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; target CTime \u003d \" + nsInfo.getCTime());\n    File tmpDir \u003d bpSd.getRemovedTmp();\n    assert !tmpDir.exists() : \"removed.tmp directory must not exist.\";\n    // 1. rename current to tmp\n    File curDir \u003d bpSd.getCurrentDir();\n    assert curDir.exists() : \"Current directory must exist.\";\n    rename(curDir, tmpDir);\n    \n    // 2. rename previous to current\n    rename(prevDir, curDir);\n    \n    // 3. delete removed.tmp dir\n    deleteDir(tmpDir);\n    LOG.info(\"Rollback of \" + bpSd.getRoot() + \" is complete.\");\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
    }
  }
}