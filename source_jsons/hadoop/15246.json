{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSAdmin.java",
  "functionName": "getReconfigurableProperties",
  "functionId": "getReconfigurableProperties___nodeType-String(modifiers-final)__address-String(modifiers-final)__out-PrintStream(modifiers-final)__err-PrintStream(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
  "functionStartLine": 1984,
  "functionEndLine": 2011,
  "numCommitsSeen": 188,
  "timeTaken": 3741,
  "changeHistory": [
    "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
    "d112d183242f447d4b742139f3a4ea531a997f45"
  ],
  "changeHistoryShort": {
    "d62b4a4de75edb840df6634f49cb4beb74e3fb07": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d112d183242f447d4b742139f3a4ea531a997f45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d62b4a4de75edb840df6634f49cb4beb74e3fb07": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-9094. Add command line option to ask NameNode reload configuration. (Contributed by Xiaobing Zhou)\n",
      "commitDate": "25/01/16 12:17 PM",
      "commitName": "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9094. Add command line option to ask NameNode reload configuration. (Contributed by Xiaobing Zhou)\n",
          "commitDate": "25/01/16 12:17 PM",
          "commitName": "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "24/01/16 2:19 PM",
          "commitNameOld": "10a2bc0dffaece216eb9a6bac3236a086b9ece31",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  int getReconfigurableProperties(String nodeType, String address,\n-      PrintStream out, PrintStream err) throws IOException {\n-    if (\"datanode\".equals(nodeType)) {\n-      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n-      try {\n-        List\u003cString\u003e properties \u003d\n-            dnProxy.listReconfigurableProperties();\n-        out.println(\n-            \"Configuration properties that are allowed to be reconfigured:\");\n-        for (String name : properties) {\n-          out.println(name);\n-        }\n-      } catch (IOException e) {\n-        err.println(\"DataNode reconfiguration: \" + e + \".\");\n-        return 1;\n-      }\n-    } else {\n-      err.println(\"Node type \" + nodeType +\n-          \" does not support reconfiguration.\");\n-      return 1;\n+  int getReconfigurableProperties(final String nodeType, final String address,\n+      final PrintStream out, final PrintStream err) throws IOException {\n+    String outMsg \u003d null;\n+    String errMsg \u003d null;\n+    List\u003cString\u003e properties \u003d null;\n+\n+    try {\n+      properties \u003d getReconfigurablePropertiesDispatch(nodeType, address, out,\n+          err);\n+      outMsg \u003d String.format(\"Node [%s] Reconfigurable properties:\", address);\n+    } catch (IOException e) {\n+      errMsg \u003d String.format(\"Node [%s] reconfiguration: %s.\", address,\n+          e.toString());\n     }\n-    return 0;\n+\n+    if (errMsg !\u003d null) {\n+      err.println(errMsg);\n+      return 1;\n+    } else if (properties \u003d\u003d null) {\n+      return 1;\n+    } else {\n+      out.println(outMsg);\n+      for (String name : properties) {\n+        out.println(name);\n+      }\n+      return 0;\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int getReconfigurableProperties(final String nodeType, final String address,\n      final PrintStream out, final PrintStream err) throws IOException {\n    String outMsg \u003d null;\n    String errMsg \u003d null;\n    List\u003cString\u003e properties \u003d null;\n\n    try {\n      properties \u003d getReconfigurablePropertiesDispatch(nodeType, address, out,\n          err);\n      outMsg \u003d String.format(\"Node [%s] Reconfigurable properties:\", address);\n    } catch (IOException e) {\n      errMsg \u003d String.format(\"Node [%s] reconfiguration: %s.\", address,\n          e.toString());\n    }\n\n    if (errMsg !\u003d null) {\n      err.println(errMsg);\n      return 1;\n    } else if (properties \u003d\u003d null) {\n      return 1;\n    } else {\n      out.println(outMsg);\n      for (String name : properties) {\n        out.println(name);\n      }\n      return 0;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-9094. Add command line option to ask NameNode reload configuration. (Contributed by Xiaobing Zhou)\n",
          "commitDate": "25/01/16 12:17 PM",
          "commitName": "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "24/01/16 2:19 PM",
          "commitNameOld": "10a2bc0dffaece216eb9a6bac3236a086b9ece31",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  int getReconfigurableProperties(String nodeType, String address,\n-      PrintStream out, PrintStream err) throws IOException {\n-    if (\"datanode\".equals(nodeType)) {\n-      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n-      try {\n-        List\u003cString\u003e properties \u003d\n-            dnProxy.listReconfigurableProperties();\n-        out.println(\n-            \"Configuration properties that are allowed to be reconfigured:\");\n-        for (String name : properties) {\n-          out.println(name);\n-        }\n-      } catch (IOException e) {\n-        err.println(\"DataNode reconfiguration: \" + e + \".\");\n-        return 1;\n-      }\n-    } else {\n-      err.println(\"Node type \" + nodeType +\n-          \" does not support reconfiguration.\");\n-      return 1;\n+  int getReconfigurableProperties(final String nodeType, final String address,\n+      final PrintStream out, final PrintStream err) throws IOException {\n+    String outMsg \u003d null;\n+    String errMsg \u003d null;\n+    List\u003cString\u003e properties \u003d null;\n+\n+    try {\n+      properties \u003d getReconfigurablePropertiesDispatch(nodeType, address, out,\n+          err);\n+      outMsg \u003d String.format(\"Node [%s] Reconfigurable properties:\", address);\n+    } catch (IOException e) {\n+      errMsg \u003d String.format(\"Node [%s] reconfiguration: %s.\", address,\n+          e.toString());\n     }\n-    return 0;\n+\n+    if (errMsg !\u003d null) {\n+      err.println(errMsg);\n+      return 1;\n+    } else if (properties \u003d\u003d null) {\n+      return 1;\n+    } else {\n+      out.println(outMsg);\n+      for (String name : properties) {\n+        out.println(name);\n+      }\n+      return 0;\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int getReconfigurableProperties(final String nodeType, final String address,\n      final PrintStream out, final PrintStream err) throws IOException {\n    String outMsg \u003d null;\n    String errMsg \u003d null;\n    List\u003cString\u003e properties \u003d null;\n\n    try {\n      properties \u003d getReconfigurablePropertiesDispatch(nodeType, address, out,\n          err);\n      outMsg \u003d String.format(\"Node [%s] Reconfigurable properties:\", address);\n    } catch (IOException e) {\n      errMsg \u003d String.format(\"Node [%s] reconfiguration: %s.\", address,\n          e.toString());\n    }\n\n    if (errMsg !\u003d null) {\n      err.println(errMsg);\n      return 1;\n    } else if (properties \u003d\u003d null) {\n      return 1;\n    } else {\n      out.println(outMsg);\n      for (String name : properties) {\n        out.println(name);\n      }\n      return 0;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
          "extendedDetails": {
            "oldValue": "[nodeType-String, address-String, out-PrintStream, err-PrintStream]",
            "newValue": "[nodeType-String(modifiers-final), address-String(modifiers-final), out-PrintStream(modifiers-final), err-PrintStream(modifiers-final)]"
          }
        }
      ]
    },
    "d112d183242f447d4b742139f3a4ea531a997f45": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8582. Support getting a list of reconfigurable config properties and do not generate spurious reconfig warnings (Lei (Eddy) Xu via Colin P.  McCabe)\n",
      "commitDate": "19/06/15 7:14 PM",
      "commitName": "d112d183242f447d4b742139f3a4ea531a997f45",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,23 @@\n+  int getReconfigurableProperties(String nodeType, String address,\n+      PrintStream out, PrintStream err) throws IOException {\n+    if (\"datanode\".equals(nodeType)) {\n+      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n+      try {\n+        List\u003cString\u003e properties \u003d\n+            dnProxy.listReconfigurableProperties();\n+        out.println(\n+            \"Configuration properties that are allowed to be reconfigured:\");\n+        for (String name : properties) {\n+          out.println(name);\n+        }\n+      } catch (IOException e) {\n+        err.println(\"DataNode reconfiguration: \" + e + \".\");\n+        return 1;\n+      }\n+    } else {\n+      err.println(\"Node type \" + nodeType +\n+          \" does not support reconfiguration.\");\n+      return 1;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int getReconfigurableProperties(String nodeType, String address,\n      PrintStream out, PrintStream err) throws IOException {\n    if (\"datanode\".equals(nodeType)) {\n      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n      try {\n        List\u003cString\u003e properties \u003d\n            dnProxy.listReconfigurableProperties();\n        out.println(\n            \"Configuration properties that are allowed to be reconfigured:\");\n        for (String name : properties) {\n          out.println(name);\n        }\n      } catch (IOException e) {\n        err.println(\"DataNode reconfiguration: \" + e + \".\");\n        return 1;\n      }\n    } else {\n      err.println(\"Node type \" + nodeType +\n          \" does not support reconfiguration.\");\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
    }
  }
}