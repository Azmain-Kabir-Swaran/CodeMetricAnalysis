{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "finishApplicationMaster",
  "functionId": "finishApplicationMaster___request-FinishApplicationMasterRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 728,
  "functionEndLine": 826,
  "numCommitsSeen": 21,
  "timeTaken": 5171,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "989715ec5066c6ac7868e25ad9234dc64723e61e",
    "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a",
    "3090922805699b8374a359e92323884a4177dc4e",
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "989715ec5066c6ac7868e25ad9234dc64723e61e": "Ybodychange",
    "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a": "Ybodychange",
    "3090922805699b8374a359e92323884a4177dc4e": "Ybodychange",
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": "Ybodychange",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ybodychange",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": "Ybodychange",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Ybodychange",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/12/18 12:41 PM",
      "commitNameOld": "657aa433e2098f28337175b6f81721739b3184b3",
      "commitAuthorOld": "Botong Huang",
      "daysBetweenCommits": 83.11,
      "commitsBetweenForRepo": 645,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,99 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     this.finishAMCalled \u003d true;\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n \n               if (uamResponse.getIsUnregistered()) {\n                 secondaryRelayers.remove(subClusterId);\n                 if (getNMStateStore() !\u003d null) {\n                   getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                       NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                 }\n               }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + attemptId, e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         this.homeRMRelayer.finishApplicationMaster(request);\n \n     // Stop the home heartbeat thread\n     this.homeHeartbeartHandler.shutdown();\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Received finish application response from RM: \"\n-                + uamResponse.getSubClusterId());\n-          }\n+          LOG.debug(\"Received finish application response from RM: {}\",\n+              uamResponse.getSubClusterId());\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \" + this.attemptId, e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient\n             .removeAppFromRegistry(this.attemptId.getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    this.finishAMCalled \u003d true;\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                secondaryRelayers.remove(subClusterId);\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + attemptId, e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    // Stop the home heartbeat thread\n    this.homeHeartbeartHandler.shutdown();\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          LOG.debug(\"Received finish application response from RM: {}\",\n              uamResponse.getSubClusterId());\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \" + this.attemptId, e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient\n            .removeAppFromRegistry(this.attemptId.getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "989715ec5066c6ac7868e25ad9234dc64723e61e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8893. [AMRMProxy] Fix thread leak in AMRMClientRelayer and UAM client. Contributed by Botong Huang.\n",
      "commitDate": "02/11/18 3:30 PM",
      "commitName": "989715ec5066c6ac7868e25ad9234dc64723e61e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "09/10/18 10:29 AM",
      "commitNameOld": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 24.21,
      "commitsBetweenForRepo": 265,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,101 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     this.finishAMCalled \u003d true;\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n \n               if (uamResponse.getIsUnregistered()) {\n-                AMRMClientRelayer relayer \u003d\n-                    secondaryRelayers.remove(subClusterId);\n-                if(relayer !\u003d null) {\n-                  relayer.shutdown();\n-                }\n-\n+                secondaryRelayers.remove(subClusterId);\n                 if (getNMStateStore() !\u003d null) {\n                   getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                       NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                 }\n               }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + attemptId, e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         this.homeRMRelayer.finishApplicationMaster(request);\n \n     // Stop the home heartbeat thread\n     this.homeHeartbeartHandler.shutdown();\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \" + this.attemptId, e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient\n             .removeAppFromRegistry(this.attemptId.getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    this.finishAMCalled \u003d true;\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                secondaryRelayers.remove(subClusterId);\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + attemptId, e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    // Stop the home heartbeat thread\n    this.homeHeartbeartHandler.shutdown();\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \" + this.attemptId, e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient\n            .removeAppFromRegistry(this.attemptId.getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8760. [AMRMProxy] Fix concurrent re-register due to YarnRM failover in AMRMClientRelayer. Contributed by Botong Huang.\n",
      "commitDate": "01/10/18 1:12 PM",
      "commitName": "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/09/18 11:37 AM",
      "commitNameOld": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 7.07,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,106 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n+    this.finishAMCalled \u003d true;\n+\n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n \n               if (uamResponse.getIsUnregistered()) {\n                 AMRMClientRelayer relayer \u003d\n                     secondaryRelayers.remove(subClusterId);\n                 if(relayer !\u003d null) {\n                   relayer.shutdown();\n                 }\n \n                 if (getNMStateStore() !\u003d null) {\n                   getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                       NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                 }\n               }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + attemptId, e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         this.homeRMRelayer.finishApplicationMaster(request);\n \n     // Stop the home heartbeat thread\n     this.homeHeartbeartHandler.shutdown();\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \" + this.attemptId, e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient\n             .removeAppFromRegistry(this.attemptId.getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    this.finishAMCalled \u003d true;\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                AMRMClientRelayer relayer \u003d\n                    secondaryRelayers.remove(subClusterId);\n                if(relayer !\u003d null) {\n                  relayer.shutdown();\n                }\n\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + attemptId, e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    // Stop the home heartbeat thread\n    this.homeHeartbeartHandler.shutdown();\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \" + this.attemptId, e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient\n            .removeAppFromRegistry(this.attemptId.getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/09/18 11:46 AM",
      "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,104 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n \n               if (uamResponse.getIsUnregistered()) {\n                 AMRMClientRelayer relayer \u003d\n                     secondaryRelayers.remove(subClusterId);\n                 if(relayer !\u003d null) {\n                   relayer.shutdown();\n                 }\n \n                 if (getNMStateStore() !\u003d null) {\n                   getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                       NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                 }\n               }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + attemptId, e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         this.homeRMRelayer.finishApplicationMaster(request);\n \n+    // Stop the home heartbeat thread\n+    this.homeHeartbeartHandler.shutdown();\n+\n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \" + this.attemptId, e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient\n             .removeAppFromRegistry(this.attemptId.getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                AMRMClientRelayer relayer \u003d\n                    secondaryRelayers.remove(subClusterId);\n                if(relayer !\u003d null) {\n                  relayer.shutdown();\n                }\n\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + attemptId, e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    // Stop the home heartbeat thread\n    this.homeHeartbeartHandler.shutdown();\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \" + this.attemptId, e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient\n            .removeAppFromRegistry(this.attemptId.getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
      "commitDate": "12/09/18 11:46 AM",
      "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "27/08/18 10:32 AM",
      "commitNameOld": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 16.05,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,101 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n \n               if (uamResponse.getIsUnregistered()) {\n-                secondaryRelayers.remove(subClusterId);\n+                AMRMClientRelayer relayer \u003d\n+                    secondaryRelayers.remove(subClusterId);\n+                if(relayer !\u003d null) {\n+                  relayer.shutdown();\n+                }\n \n                 if (getNMStateStore() !\u003d null) {\n                   getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                       NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                 }\n               }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + attemptId, e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         this.homeRMRelayer.finishApplicationMaster(request);\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \" + this.attemptId, e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient\n             .removeAppFromRegistry(this.attemptId.getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                AMRMClientRelayer relayer \u003d\n                    secondaryRelayers.remove(subClusterId);\n                if(relayer !\u003d null) {\n                  relayer.shutdown();\n                }\n\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + attemptId, e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \" + this.attemptId, e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient\n            .removeAppFromRegistry(this.attemptId.getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,97 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n \n               if (uamResponse.getIsUnregistered()) {\n                 secondaryRelayers.remove(subClusterId);\n \n                 if (getNMStateStore() !\u003d null) {\n-                  getNMStateStore().removeAMRMProxyAppContextEntry(\n-                      getApplicationContext().getApplicationAttemptId(),\n+                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                       NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                 }\n               }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n-                  + getApplicationContext().getApplicationAttemptId(), e);\n+                  + attemptId, e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         this.homeRMRelayer.finishApplicationMaster(request);\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n-              + \" ApplicationId: \"\n-              + getApplicationContext().getApplicationAttemptId(), e);\n+              + \" ApplicationId: \" + this.attemptId, e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n-        this.registryClient.removeAppFromRegistry(getApplicationContext()\n-            .getApplicationAttemptId().getApplicationId());\n+        this.registryClient\n+            .removeAppFromRegistry(this.attemptId.getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                secondaryRelayers.remove(subClusterId);\n\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(attemptId,\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + attemptId, e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \" + this.attemptId, e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient\n            .removeAppFromRegistry(this.attemptId.getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7899. [AMRMProxy] Stateful FederationInterceptor for pending requests. Contributed by Botong Huang.\n",
      "commitDate": "09/07/18 12:27 PM",
      "commitName": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/05/18 8:00 PM",
      "commitNameOld": "3159bffce23abf35754da2d7d51de7d8c2631ae3",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 52.69,
      "commitsBetweenForRepo": 338,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,99 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n+\n+              if (uamResponse.getIsUnregistered()) {\n+                secondaryRelayers.remove(subClusterId);\n+\n+                if (getNMStateStore() !\u003d null) {\n+                  getNMStateStore().removeAMRMProxyAppContextEntry(\n+                      getApplicationContext().getApplicationAttemptId(),\n+                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n+                }\n+              }\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + getApplicationContext().getApplicationAttemptId(), e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n-        AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n-            this.amRegistrationRequest, getApplicationContext()\n-                .getApplicationAttemptId().getApplicationId());\n+        this.homeRMRelayer.finishApplicationMaster(request);\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n-          } else if (getNMStateStore() !\u003d null) {\n-            getNMStateStore().removeAMRMProxyAppContextEntry(\n-                getApplicationContext().getApplicationAttemptId(),\n-                NMSS_SECONDARY_SC_PREFIX + uamResponse.getSubClusterId());\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \"\n               + getApplicationContext().getApplicationAttemptId(), e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient.removeAppFromRegistry(getApplicationContext()\n             .getApplicationAttemptId().getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n\n              if (uamResponse.getIsUnregistered()) {\n                secondaryRelayers.remove(subClusterId);\n\n                if (getNMStateStore() !\u003d null) {\n                  getNMStateStore().removeAMRMProxyAppContextEntry(\n                      getApplicationContext().getApplicationAttemptId(),\n                      NMSS_SECONDARY_SC_PREFIX + subClusterId);\n                }\n              }\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + getApplicationContext().getApplicationAttemptId(), e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        this.homeRMRelayer.finishApplicationMaster(request);\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \"\n              + getApplicationContext().getApplicationAttemptId(), e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient.removeAppFromRegistry(getApplicationContext()\n            .getApplicationAttemptId().getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6704. Add support for work preserving NM restart when FederationInterceptor is enabled in AMRMProxyService. (Botong Huang via Subru).\n",
      "commitDate": "08/12/17 3:39 PM",
      "commitName": "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,95 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + getApplicationContext().getApplicationAttemptId(), e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n             this.amRegistrationRequest, getApplicationContext()\n                 .getApplicationAttemptId().getApplicationId());\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n+          } else if (getNMStateStore() !\u003d null) {\n+            getNMStateStore().removeAMRMProxyAppContextEntry(\n+                getApplicationContext().getApplicationAttemptId(),\n+                NMSS_SECONDARY_SC_PREFIX + uamResponse.getSubClusterId());\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \"\n               + getApplicationContext().getApplicationAttemptId(), e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n     } else {\n       // Clean up UAMs only when the app finishes successfully, so that no more\n       // attempt will be launched.\n       this.uamPool.stop();\n       if (this.registryClient !\u003d null) {\n         this.registryClient.removeAppFromRegistry(getApplicationContext()\n             .getApplicationAttemptId().getApplicationId());\n       }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + getApplicationContext().getApplicationAttemptId(), e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n            this.amRegistrationRequest, getApplicationContext()\n                .getApplicationAttemptId().getApplicationId());\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          } else if (getNMStateStore() !\u003d null) {\n            getNMStateStore().removeAMRMProxyAppContextEntry(\n                getApplicationContext().getApplicationAttemptId(),\n                NMSS_SECONDARY_SC_PREFIX + uamResponse.getSubClusterId());\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \"\n              + getApplicationContext().getApplicationAttemptId(), e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient.removeAppFromRegistry(getApplicationContext()\n            .getApplicationAttemptId().getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "28/09/17 1:04 PM",
      "commitNameOld": "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 50.23,
      "commitsBetweenForRepo": 444,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,91 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n     // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n     boolean failedToUnRegister \u003d false;\n     ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n         null;\n \n     // Application master is completing operation. Send the finish\n     // application master request to all the registered sub-cluster resource\n     // managers in parallel, wait for the responses and aggregate the results.\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     if (subClusterIds.size() \u003e 0) {\n       final FinishApplicationMasterRequest finishRequest \u003d request;\n       compSvc \u003d\n           new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n               this.threadpool);\n \n       LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (final String subClusterId : subClusterIds) {\n         compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n           @Override\n           public FinishApplicationMasterResponseInfo call() throws Exception {\n             LOG.info(\"Sending finish application request to RM {}\",\n                 subClusterId);\n             FinishApplicationMasterResponse uamResponse \u003d null;\n             try {\n               uamResponse \u003d\n                   uamPool.finishApplicationMaster(subClusterId, finishRequest);\n             } catch (Throwable e) {\n               LOG.warn(\"Failed to finish unmanaged application master: \"\n                   + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                   + getApplicationContext().getApplicationAttemptId(), e);\n             }\n             return new FinishApplicationMasterResponseInfo(uamResponse,\n                 subClusterId);\n           }\n         });\n       }\n     }\n \n     // While the finish application request is being processed\n     // asynchronously by other sub-cluster resource managers, send the same\n     // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n-            this.amRegistrationRequest,\n-            getApplicationContext().getApplicationAttemptId());\n+            this.amRegistrationRequest, getApplicationContext()\n+                .getApplicationAttemptId().getApplicationId());\n \n     if (subClusterIds.size() \u003e 0) {\n       // Wait for other sub-cluster resource managers to return the\n       // response and merge it with the home response\n       LOG.info(\n           \"Waiting for finish application response from {} sub-cluster RMs\",\n           subClusterIds.size());\n       for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n         try {\n           Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n           FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Received finish application response from RM: \"\n                 + uamResponse.getSubClusterId());\n           }\n           if (uamResponse.getResponse() \u003d\u003d null\n               || !uamResponse.getResponse().getIsUnregistered()) {\n             failedToUnRegister \u003d true;\n           }\n         } catch (Throwable e) {\n           failedToUnRegister \u003d true;\n           LOG.warn(\"Failed to finish unmanaged application master: \"\n               + \" ApplicationId: \"\n               + getApplicationContext().getApplicationAttemptId(), e);\n         }\n       }\n     }\n \n     if (failedToUnRegister) {\n       homeResponse.setIsUnregistered(false);\n+    } else {\n+      // Clean up UAMs only when the app finishes successfully, so that no more\n+      // attempt will be launched.\n+      this.uamPool.stop();\n+      if (this.registryClient !\u003d null) {\n+        this.registryClient.removeAppFromRegistry(getApplicationContext()\n+            .getApplicationAttemptId().getApplicationId());\n+      }\n     }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + getApplicationContext().getApplicationAttemptId(), e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n            this.amRegistrationRequest, getApplicationContext()\n                .getApplicationAttemptId().getApplicationId());\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \"\n              + getApplicationContext().getApplicationAttemptId(), e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    } else {\n      // Clean up UAMs only when the app finishes successfully, so that no more\n      // attempt will be launched.\n      this.uamPool.stop();\n      if (this.registryClient !\u003d null) {\n        this.registryClient.removeAppFromRegistry(getApplicationContext()\n            .getApplicationAttemptId().getApplicationId());\n      }\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,83 @@\n   public FinishApplicationMasterResponse finishApplicationMaster(\n       FinishApplicationMasterRequest request)\n       throws YarnException, IOException {\n \n+    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n+    boolean failedToUnRegister \u003d false;\n+    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n+        null;\n+\n+    // Application master is completing operation. Send the finish\n+    // application master request to all the registered sub-cluster resource\n+    // managers in parallel, wait for the responses and aggregate the results.\n+    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n+    if (subClusterIds.size() \u003e 0) {\n+      final FinishApplicationMasterRequest finishRequest \u003d request;\n+      compSvc \u003d\n+          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n+              this.threadpool);\n+\n+      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n+          subClusterIds.size());\n+      for (final String subClusterId : subClusterIds) {\n+        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n+          @Override\n+          public FinishApplicationMasterResponseInfo call() throws Exception {\n+            LOG.info(\"Sending finish application request to RM {}\",\n+                subClusterId);\n+            FinishApplicationMasterResponse uamResponse \u003d null;\n+            try {\n+              uamResponse \u003d\n+                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n+            } catch (Throwable e) {\n+              LOG.warn(\"Failed to finish unmanaged application master: \"\n+                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n+                  + getApplicationContext().getApplicationAttemptId(), e);\n+            }\n+            return new FinishApplicationMasterResponseInfo(uamResponse,\n+                subClusterId);\n+          }\n+        });\n+      }\n+    }\n+\n+    // While the finish application request is being processed\n+    // asynchronously by other sub-cluster resource managers, send the same\n+    // request to the home resource manager on this thread.\n     FinishApplicationMasterResponse homeResponse \u003d\n         AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n             this.amRegistrationRequest,\n             getApplicationContext().getApplicationAttemptId());\n+\n+    if (subClusterIds.size() \u003e 0) {\n+      // Wait for other sub-cluster resource managers to return the\n+      // response and merge it with the home response\n+      LOG.info(\n+          \"Waiting for finish application response from {} sub-cluster RMs\",\n+          subClusterIds.size());\n+      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n+        try {\n+          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n+          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received finish application response from RM: \"\n+                + uamResponse.getSubClusterId());\n+          }\n+          if (uamResponse.getResponse() \u003d\u003d null\n+              || !uamResponse.getResponse().getIsUnregistered()) {\n+            failedToUnRegister \u003d true;\n+          }\n+        } catch (Throwable e) {\n+          failedToUnRegister \u003d true;\n+          LOG.warn(\"Failed to finish unmanaged application master: \"\n+              + \" ApplicationId: \"\n+              + getApplicationContext().getApplicationAttemptId(), e);\n+        }\n+      }\n+    }\n+\n+    if (failedToUnRegister) {\n+      homeResponse.setIsUnregistered(false);\n+    }\n     return homeResponse;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    // TODO: consider adding batchFinishApplicationMaster in UAMPoolManager\n    boolean failedToUnRegister \u003d false;\n    ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e compSvc \u003d\n        null;\n\n    // Application master is completing operation. Send the finish\n    // application master request to all the registered sub-cluster resource\n    // managers in parallel, wait for the responses and aggregate the results.\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    if (subClusterIds.size() \u003e 0) {\n      final FinishApplicationMasterRequest finishRequest \u003d request;\n      compSvc \u003d\n          new ExecutorCompletionService\u003cFinishApplicationMasterResponseInfo\u003e(\n              this.threadpool);\n\n      LOG.info(\"Sending finish application request to {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (final String subClusterId : subClusterIds) {\n        compSvc.submit(new Callable\u003cFinishApplicationMasterResponseInfo\u003e() {\n          @Override\n          public FinishApplicationMasterResponseInfo call() throws Exception {\n            LOG.info(\"Sending finish application request to RM {}\",\n                subClusterId);\n            FinishApplicationMasterResponse uamResponse \u003d null;\n            try {\n              uamResponse \u003d\n                  uamPool.finishApplicationMaster(subClusterId, finishRequest);\n            } catch (Throwable e) {\n              LOG.warn(\"Failed to finish unmanaged application master: \"\n                  + \"RM address: \" + subClusterId + \" ApplicationId: \"\n                  + getApplicationContext().getApplicationAttemptId(), e);\n            }\n            return new FinishApplicationMasterResponseInfo(uamResponse,\n                subClusterId);\n          }\n        });\n      }\n    }\n\n    // While the finish application request is being processed\n    // asynchronously by other sub-cluster resource managers, send the same\n    // request to the home resource manager on this thread.\n    FinishApplicationMasterResponse homeResponse \u003d\n        AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n            this.amRegistrationRequest,\n            getApplicationContext().getApplicationAttemptId());\n\n    if (subClusterIds.size() \u003e 0) {\n      // Wait for other sub-cluster resource managers to return the\n      // response and merge it with the home response\n      LOG.info(\n          \"Waiting for finish application response from {} sub-cluster RMs\",\n          subClusterIds.size());\n      for (int i \u003d 0; i \u003c subClusterIds.size(); ++i) {\n        try {\n          Future\u003cFinishApplicationMasterResponseInfo\u003e future \u003d compSvc.take();\n          FinishApplicationMasterResponseInfo uamResponse \u003d future.get();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Received finish application response from RM: \"\n                + uamResponse.getSubClusterId());\n          }\n          if (uamResponse.getResponse() \u003d\u003d null\n              || !uamResponse.getResponse().getIsUnregistered()) {\n            failedToUnRegister \u003d true;\n          }\n        } catch (Throwable e) {\n          failedToUnRegister \u003d true;\n          LOG.warn(\"Failed to finish unmanaged application master: \"\n              + \" ApplicationId: \"\n              + getApplicationContext().getApplicationAttemptId(), e);\n        }\n      }\n    }\n\n    if (failedToUnRegister) {\n      homeResponse.setIsUnregistered(false);\n    }\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3666. Federation Intercepting and propagating AM- home RM communications. (Botong Huang via Subru).\n\n(cherry picked from commit 2399eb8200609246cb623c74450ca4a2032063cc)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,10 @@\n+  public FinishApplicationMasterResponse finishApplicationMaster(\n+      FinishApplicationMasterRequest request)\n+      throws YarnException, IOException {\n+\n+    FinishApplicationMasterResponse homeResponse \u003d\n+        AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n+            this.amRegistrationRequest,\n+            getApplicationContext().getApplicationAttemptId());\n+    return homeResponse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      FinishApplicationMasterRequest request)\n      throws YarnException, IOException {\n\n    FinishApplicationMasterResponse homeResponse \u003d\n        AMRMClientUtils.finishAMWithReRegister(request, this.homeRM,\n            this.amRegistrationRequest,\n            getApplicationContext().getApplicationAttemptId());\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}