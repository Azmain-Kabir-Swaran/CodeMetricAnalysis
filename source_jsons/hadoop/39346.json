{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "checkAndGetApplicationLifetime",
  "functionId": "checkAndGetApplicationLifetime___queueName-String__lifetimeRequestedByApp-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 3163,
  "functionEndLine": 3193,
  "numCommitsSeen": 239,
  "timeTaken": 5571,
  "changeHistory": [
    "d2d963f3d4819704351c04dbeb90fc8154488f91",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "56d93d2e39ead89bb79c4f4096554820dc77e84b"
  ],
  "changeHistoryShort": {
    "d2d963f3d4819704351c04dbeb90fc8154488f91": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "56d93d2e39ead89bb79c4f4096554820dc77e84b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d2d963f3d4819704351c04dbeb90fc8154488f91": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9790. Failed to set default-application-lifetime if maximum-application-lifetime is less than or equal to zero. Contributed by kyungwan nam.\n",
      "commitDate": "31/08/19 9:24 PM",
      "commitName": "d2d963f3d4819704351c04dbeb90fc8154488f91",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 2.76,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public long checkAndGetApplicationLifetime(String queueName,\n       long lifetimeRequestedByApp) {\n     readLock.lock();\n     try {\n       CSQueue queue \u003d getQueue(queueName);\n       if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n         return lifetimeRequestedByApp;\n       }\n \n       long defaultApplicationLifetime \u003d\n           ((LeafQueue) queue).getDefaultApplicationLifetime();\n       long maximumApplicationLifetime \u003d\n           ((LeafQueue) queue).getMaximumApplicationLifetime();\n \n       // check only for maximum, that\u0027s enough because default can\u0027t\n       // exceed maximum\n       if (maximumApplicationLifetime \u003c\u003d 0) {\n-        return lifetimeRequestedByApp;\n+        return (lifetimeRequestedByApp \u003c\u003d 0) ? defaultApplicationLifetime :\n+            lifetimeRequestedByApp;\n       }\n \n       if (lifetimeRequestedByApp \u003c\u003d 0) {\n         return defaultApplicationLifetime;\n       } else if (lifetimeRequestedByApp \u003e maximumApplicationLifetime) {\n         return maximumApplicationLifetime;\n       }\n       return lifetimeRequestedByApp;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long checkAndGetApplicationLifetime(String queueName,\n      long lifetimeRequestedByApp) {\n    readLock.lock();\n    try {\n      CSQueue queue \u003d getQueue(queueName);\n      if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n        return lifetimeRequestedByApp;\n      }\n\n      long defaultApplicationLifetime \u003d\n          ((LeafQueue) queue).getDefaultApplicationLifetime();\n      long maximumApplicationLifetime \u003d\n          ((LeafQueue) queue).getMaximumApplicationLifetime();\n\n      // check only for maximum, that\u0027s enough because default can\u0027t\n      // exceed maximum\n      if (maximumApplicationLifetime \u003c\u003d 0) {\n        return (lifetimeRequestedByApp \u003c\u003d 0) ? defaultApplicationLifetime :\n            lifetimeRequestedByApp;\n      }\n\n      if (lifetimeRequestedByApp \u003c\u003d 0) {\n        return defaultApplicationLifetime;\n      } else if (lifetimeRequestedByApp \u003e maximumApplicationLifetime) {\n        return maximumApplicationLifetime;\n      }\n      return lifetimeRequestedByApp;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public long checkAndGetApplicationLifetime(String queueName,\n       long lifetimeRequestedByApp) {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       CSQueue queue \u003d getQueue(queueName);\n       if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n         return lifetimeRequestedByApp;\n       }\n \n       long defaultApplicationLifetime \u003d\n           ((LeafQueue) queue).getDefaultApplicationLifetime();\n       long maximumApplicationLifetime \u003d\n           ((LeafQueue) queue).getMaximumApplicationLifetime();\n \n       // check only for maximum, that\u0027s enough because default can\u0027t\n       // exceed maximum\n       if (maximumApplicationLifetime \u003c\u003d 0) {\n         return lifetimeRequestedByApp;\n       }\n \n       if (lifetimeRequestedByApp \u003c\u003d 0) {\n         return defaultApplicationLifetime;\n       } else if (lifetimeRequestedByApp \u003e maximumApplicationLifetime) {\n         return maximumApplicationLifetime;\n       }\n       return lifetimeRequestedByApp;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long checkAndGetApplicationLifetime(String queueName,\n      long lifetimeRequestedByApp) {\n    readLock.lock();\n    try {\n      CSQueue queue \u003d getQueue(queueName);\n      if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n        return lifetimeRequestedByApp;\n      }\n\n      long defaultApplicationLifetime \u003d\n          ((LeafQueue) queue).getDefaultApplicationLifetime();\n      long maximumApplicationLifetime \u003d\n          ((LeafQueue) queue).getMaximumApplicationLifetime();\n\n      // check only for maximum, that\u0027s enough because default can\u0027t\n      // exceed maximum\n      if (maximumApplicationLifetime \u003c\u003d 0) {\n        return lifetimeRequestedByApp;\n      }\n\n      if (lifetimeRequestedByApp \u003c\u003d 0) {\n        return defaultApplicationLifetime;\n      } else if (lifetimeRequestedByApp \u003e maximumApplicationLifetime) {\n        return maximumApplicationLifetime;\n      }\n      return lifetimeRequestedByApp;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "56d93d2e39ead89bb79c4f4096554820dc77e84b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6600. Introduce default and max lifetime of application at LeafQueue level. Contributed by Rohith Sharma K S.\n",
      "commitDate": "07/09/17 6:45 PM",
      "commitName": "56d93d2e39ead89bb79c4f4096554820dc77e84b",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,30 @@\n+  public long checkAndGetApplicationLifetime(String queueName,\n+      long lifetimeRequestedByApp) {\n+    try {\n+      readLock.lock();\n+      CSQueue queue \u003d getQueue(queueName);\n+      if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n+        return lifetimeRequestedByApp;\n+      }\n+\n+      long defaultApplicationLifetime \u003d\n+          ((LeafQueue) queue).getDefaultApplicationLifetime();\n+      long maximumApplicationLifetime \u003d\n+          ((LeafQueue) queue).getMaximumApplicationLifetime();\n+\n+      // check only for maximum, that\u0027s enough because default cann\u0027t\n+      // exceed maximum\n+      if (maximumApplicationLifetime \u003c\u003d 0) {\n+        return lifetimeRequestedByApp;\n+      }\n+\n+      if (lifetimeRequestedByApp \u003c\u003d 0) {\n+        return defaultApplicationLifetime;\n+      } else if (lifetimeRequestedByApp \u003e maximumApplicationLifetime) {\n+        return maximumApplicationLifetime;\n+      }\n+      return lifetimeRequestedByApp;\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long checkAndGetApplicationLifetime(String queueName,\n      long lifetimeRequestedByApp) {\n    try {\n      readLock.lock();\n      CSQueue queue \u003d getQueue(queueName);\n      if (queue \u003d\u003d null || !(queue instanceof LeafQueue)) {\n        return lifetimeRequestedByApp;\n      }\n\n      long defaultApplicationLifetime \u003d\n          ((LeafQueue) queue).getDefaultApplicationLifetime();\n      long maximumApplicationLifetime \u003d\n          ((LeafQueue) queue).getMaximumApplicationLifetime();\n\n      // check only for maximum, that\u0027s enough because default cann\u0027t\n      // exceed maximum\n      if (maximumApplicationLifetime \u003c\u003d 0) {\n        return lifetimeRequestedByApp;\n      }\n\n      if (lifetimeRequestedByApp \u003c\u003d 0) {\n        return defaultApplicationLifetime;\n      } else if (lifetimeRequestedByApp \u003e maximumApplicationLifetime) {\n        return maximumApplicationLifetime;\n      }\n      return lifetimeRequestedByApp;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}