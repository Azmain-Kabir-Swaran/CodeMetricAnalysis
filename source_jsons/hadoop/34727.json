{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMContainerTokenSecretManager.java",
  "functionName": "recover",
  "functionId": "recover",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMContainerTokenSecretManager.java",
  "functionStartLine": 74,
  "functionEndLine": 111,
  "numCommitsSeen": 9,
  "timeTaken": 2119,
  "changeHistory": [
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "2050e0dad661bade3e140d7a5692cfe1999badc3"
  ],
  "changeHistoryShort": {
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ybodychange",
    "2050e0dad661bade3e140d7a5692cfe1999badc3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 363.29,
      "commitsBetweenForRepo": 3298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   public synchronized void recover()\n       throws IOException {\n     RecoveredContainerTokensState state \u003d\n         stateStore.loadContainerTokensState();\n     MasterKey key \u003d state.getCurrentMasterKey();\n     if (key !\u003d null) {\n       super.currentMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     key \u003d state.getPreviousMasterKey();\n     if (key !\u003d null) {\n       previousMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     // restore the serial number from the current master key\n     if (super.currentMasterKey !\u003d null) {\n       super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n     }\n \n-    for (Entry\u003cContainerId, Long\u003e entry : state.getActiveTokens().entrySet()) {\n-      ContainerId containerId \u003d entry.getKey();\n-      Long expTime \u003d entry.getValue();\n-      List\u003cContainerId\u003e containerList \u003d\n-          recentlyStartedContainerTracker.get(expTime);\n-      if (containerList \u003d\u003d null) {\n-        containerList \u003d new ArrayList\u003cContainerId\u003e();\n-        recentlyStartedContainerTracker.put(expTime, containerList);\n-      }\n-      if (!containerList.contains(containerId)) {\n-        containerList.add(containerId);\n+    try (RecoveryIterator\u003cEntry\u003cContainerId, Long\u003e\u003e it \u003d state.getIterator()) {\n+      while (it.hasNext()) {\n+        Entry\u003cContainerId, Long\u003e entry \u003d it.next();\n+        ContainerId containerId \u003d entry.getKey();\n+        Long expTime \u003d entry.getValue();\n+        List\u003cContainerId\u003e containerList \u003d\n+            recentlyStartedContainerTracker.get(expTime);\n+        if (containerList \u003d\u003d null) {\n+          containerList \u003d new ArrayList\u003cContainerId\u003e();\n+          recentlyStartedContainerTracker.put(expTime, containerList);\n+        }\n+        if (!containerList.contains(containerId)) {\n+          containerList.add(containerId);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recover()\n      throws IOException {\n    RecoveredContainerTokensState state \u003d\n        stateStore.loadContainerTokensState();\n    MasterKey key \u003d state.getCurrentMasterKey();\n    if (key !\u003d null) {\n      super.currentMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    key \u003d state.getPreviousMasterKey();\n    if (key !\u003d null) {\n      previousMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    // restore the serial number from the current master key\n    if (super.currentMasterKey !\u003d null) {\n      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n    }\n\n    try (RecoveryIterator\u003cEntry\u003cContainerId, Long\u003e\u003e it \u003d state.getIterator()) {\n      while (it.hasNext()) {\n        Entry\u003cContainerId, Long\u003e entry \u003d it.next();\n        ContainerId containerId \u003d entry.getKey();\n        Long expTime \u003d entry.getValue();\n        List\u003cContainerId\u003e containerList \u003d\n            recentlyStartedContainerTracker.get(expTime);\n        if (containerList \u003d\u003d null) {\n          containerList \u003d new ArrayList\u003cContainerId\u003e();\n          recentlyStartedContainerTracker.put(expTime, containerList);\n        }\n        if (!containerList.contains(containerId)) {\n          containerList.add(containerId);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "2050e0dad661bade3e140d7a5692cfe1999badc3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 10:02 PM",
      "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
      "commitAuthor": "Devarajulu K",
      "diff": "@@ -0,0 +1,35 @@\n+  public synchronized void recover()\n+      throws IOException {\n+    RecoveredContainerTokensState state \u003d\n+        stateStore.loadContainerTokensState();\n+    MasterKey key \u003d state.getCurrentMasterKey();\n+    if (key !\u003d null) {\n+      super.currentMasterKey \u003d\n+          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n+    }\n+\n+    key \u003d state.getPreviousMasterKey();\n+    if (key !\u003d null) {\n+      previousMasterKey \u003d\n+          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n+    }\n+\n+    // restore the serial number from the current master key\n+    if (super.currentMasterKey !\u003d null) {\n+      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n+    }\n+\n+    for (Entry\u003cContainerId, Long\u003e entry : state.getActiveTokens().entrySet()) {\n+      ContainerId containerId \u003d entry.getKey();\n+      Long expTime \u003d entry.getValue();\n+      List\u003cContainerId\u003e containerList \u003d\n+          recentlyStartedContainerTracker.get(expTime);\n+      if (containerList \u003d\u003d null) {\n+        containerList \u003d new ArrayList\u003cContainerId\u003e();\n+        recentlyStartedContainerTracker.put(expTime, containerList);\n+      }\n+      if (!containerList.contains(containerId)) {\n+        containerList.add(containerId);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recover()\n      throws IOException {\n    RecoveredContainerTokensState state \u003d\n        stateStore.loadContainerTokensState();\n    MasterKey key \u003d state.getCurrentMasterKey();\n    if (key !\u003d null) {\n      super.currentMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    key \u003d state.getPreviousMasterKey();\n    if (key !\u003d null) {\n      previousMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    // restore the serial number from the current master key\n    if (super.currentMasterKey !\u003d null) {\n      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n    }\n\n    for (Entry\u003cContainerId, Long\u003e entry : state.getActiveTokens().entrySet()) {\n      ContainerId containerId \u003d entry.getKey();\n      Long expTime \u003d entry.getValue();\n      List\u003cContainerId\u003e containerList \u003d\n          recentlyStartedContainerTracker.get(expTime);\n      if (containerList \u003d\u003d null) {\n        containerList \u003d new ArrayList\u003cContainerId\u003e();\n        recentlyStartedContainerTracker.put(expTime, containerList);\n      }\n      if (!containerList.contains(containerId)) {\n        containerList.add(containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMContainerTokenSecretManager.java"
    }
  }
}