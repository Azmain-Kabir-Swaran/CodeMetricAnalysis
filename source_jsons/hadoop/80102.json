{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclEntry.java",
  "functionName": "parseAclSpec",
  "functionId": "parseAclSpec___aclSpec-String__includePermission-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
  "functionStartLine": 235,
  "functionEndLine": 245,
  "numCommitsSeen": 14,
  "timeTaken": 1500,
  "changeHistory": [
    "b98b344b9af99ce34657041b28a98cd3a8b5278d",
    "cae96dfe6e7c57f927bd825711977ae9199776a9",
    "abe13d6ffb0009df859077032aaa19a6d894ae36"
  ],
  "changeHistoryShort": {
    "b98b344b9af99ce34657041b28a98cd3a8b5278d": "Ybodychange",
    "cae96dfe6e7c57f927bd825711977ae9199776a9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "abe13d6ffb0009df859077032aaa19a6d894ae36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b98b344b9af99ce34657041b28a98cd3a8b5278d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10277. setfacl -x fails to parse ACL spec if trying to remove the mask entry. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1561769 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 10:03 AM",
      "commitName": "b98b344b9af99ce34657041b28a98cd3a8b5278d",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/01/14 10:00 AM",
      "commitNameOld": "cae96dfe6e7c57f927bd825711977ae9199776a9",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,11 @@\n   public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n       boolean includePermission) {\n     List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n     Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n         \",\");\n     for (String aclStr : aclStrings) {\n-      AclEntry.Builder builder \u003d new AclEntry.Builder();\n-      // Here \"::\" represent one empty string.\n-      // StringUtils.getStringCollection() will ignore this.\n-      String[] split \u003d aclStr.split(\":\");\n-      int expectedAclSpecLength \u003d 2;\n-      if (includePermission) {\n-        expectedAclSpecLength \u003d 3;\n-      }\n-      if (split.length !\u003d expectedAclSpecLength\n-          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n-              .equals(split[0]))) {\n-        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n-            + aclStr);\n-      }\n-      int index \u003d 0;\n-      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n-        assert \"default\".equals(split[0]);\n-        // default entry\n-        index++;\n-        builder.setScope(AclEntryScope.DEFAULT);\n-      }\n-      String type \u003d split[index++];\n-      AclEntryType aclType \u003d null;\n-      try {\n-        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n-        builder.setType(aclType);\n-      } catch (IllegalArgumentException iae) {\n-        throw new HadoopIllegalArgumentException(\n-            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n-      }\n-\n-      String name \u003d split[index++];\n-      if (!name.isEmpty()) {\n-        builder.setName(name);\n-      }\n-\n-      if (expectedAclSpecLength \u003d\u003d 3) {\n-        String permission \u003d split[index++];\n-        FsAction fsAction \u003d FsAction.getFsAction(permission);\n-        if (null \u003d\u003d fsAction) {\n-          throw new HadoopIllegalArgumentException(\n-              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n-        }\n-        builder.setPermission(fsAction);\n-      }\n-      aclEntries.add(builder.build());\n+      AclEntry aclEntry \u003d parseAclEntry(aclStr, includePermission);\n+      aclEntries.add(aclEntry);\n     }\n     return aclEntries;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n      boolean includePermission) {\n    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n        \",\");\n    for (String aclStr : aclStrings) {\n      AclEntry aclEntry \u003d parseAclEntry(aclStr, includePermission);\n      aclEntries.add(aclEntry);\n    }\n    return aclEntries;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
      "extendedDetails": {}
    },
    "cae96dfe6e7c57f927bd825711977ae9199776a9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-10213. Fix bugs parsing ACL spec in FsShell setfacl. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559793 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/01/14 10:00 AM",
      "commitName": "cae96dfe6e7c57f927bd825711977ae9199776a9",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-10213. Fix bugs parsing ACL spec in FsShell setfacl. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559793 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/01/14 10:00 AM",
          "commitName": "cae96dfe6e7c57f927bd825711977ae9199776a9",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "17/01/14 10:50 PM",
          "commitNameOld": "8a9a6dbd7e8da2fff7e769b8f6a0aa220faad28f",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 2.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,55 @@\n-    private List\u003cAclEntry\u003e parseAclSpec(String aclSpec) {\n-      List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n-      Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n-          \",\");\n-      for (String aclStr : aclStrings) {\n-        AclEntry.Builder builder \u003d new AclEntry.Builder();\n-        // Here \"::\" represent one empty string.\n-        // StringUtils.getStringCollection() will ignore this.\n-        String[] split \u003d aclSpec.split(\":\");\n-        if (split.length !\u003d 3\n-            \u0026\u0026 !(split.length \u003d\u003d 4 \u0026\u0026 DEFAULT.equals(split[0]))) {\n-          throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n-              + aclStr);\n-        }\n-        int index \u003d 0;\n-        if (split.length \u003d\u003d 4) {\n-          assert DEFAULT.equals(split[0]);\n-          // default entry\n-          index++;\n-          builder.setScope(AclEntryScope.DEFAULT);\n-        }\n-        String type \u003d split[index++];\n-        AclEntryType aclType \u003d null;\n-        try {\n-          aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n-          builder.setType(aclType);\n-        } catch (IllegalArgumentException iae) {\n-          throw new HadoopIllegalArgumentException(\n-              \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n-        }\n+  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n+      boolean includePermission) {\n+    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n+    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n+        \",\");\n+    for (String aclStr : aclStrings) {\n+      AclEntry.Builder builder \u003d new AclEntry.Builder();\n+      // Here \"::\" represent one empty string.\n+      // StringUtils.getStringCollection() will ignore this.\n+      String[] split \u003d aclStr.split(\":\");\n+      int expectedAclSpecLength \u003d 2;\n+      if (includePermission) {\n+        expectedAclSpecLength \u003d 3;\n+      }\n+      if (split.length !\u003d expectedAclSpecLength\n+          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n+              .equals(split[0]))) {\n+        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n+            + aclStr);\n+      }\n+      int index \u003d 0;\n+      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n+        assert \"default\".equals(split[0]);\n+        // default entry\n+        index++;\n+        builder.setScope(AclEntryScope.DEFAULT);\n+      }\n+      String type \u003d split[index++];\n+      AclEntryType aclType \u003d null;\n+      try {\n+        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n+        builder.setType(aclType);\n+      } catch (IllegalArgumentException iae) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n+      }\n \n-        builder.setName(split[index++]);\n+      String name \u003d split[index++];\n+      if (!name.isEmpty()) {\n+        builder.setName(name);\n+      }\n \n+      if (expectedAclSpecLength \u003d\u003d 3) {\n         String permission \u003d split[index++];\n         FsAction fsAction \u003d FsAction.getFsAction(permission);\n         if (null \u003d\u003d fsAction) {\n           throw new HadoopIllegalArgumentException(\n               \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n         }\n         builder.setPermission(fsAction);\n-        aclEntries.add(builder.build());\n       }\n-      return aclEntries;\n-    }\n\\ No newline at end of file\n+      aclEntries.add(builder.build());\n+    }\n+    return aclEntries;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n      boolean includePermission) {\n    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n        \",\");\n    for (String aclStr : aclStrings) {\n      AclEntry.Builder builder \u003d new AclEntry.Builder();\n      // Here \"::\" represent one empty string.\n      // StringUtils.getStringCollection() will ignore this.\n      String[] split \u003d aclStr.split(\":\");\n      int expectedAclSpecLength \u003d 2;\n      if (includePermission) {\n        expectedAclSpecLength \u003d 3;\n      }\n      if (split.length !\u003d expectedAclSpecLength\n          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n              .equals(split[0]))) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      int index \u003d 0;\n      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n        assert \"default\".equals(split[0]);\n        // default entry\n        index++;\n        builder.setScope(AclEntryScope.DEFAULT);\n      }\n      String type \u003d split[index++];\n      AclEntryType aclType \u003d null;\n      try {\n        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n        builder.setType(aclType);\n      } catch (IllegalArgumentException iae) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n      }\n\n      String name \u003d split[index++];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n\n      if (expectedAclSpecLength \u003d\u003d 3) {\n        String permission \u003d split[index++];\n        FsAction fsAction \u003d FsAction.getFsAction(permission);\n        if (null \u003d\u003d fsAction) {\n          throw new HadoopIllegalArgumentException(\n              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n        }\n        builder.setPermission(fsAction);\n      }\n      aclEntries.add(builder.build());\n    }\n    return aclEntries;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/AclCommands.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
            "oldMethodName": "parseAclSpec",
            "newMethodName": "parseAclSpec"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10213. Fix bugs parsing ACL spec in FsShell setfacl. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559793 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/01/14 10:00 AM",
          "commitName": "cae96dfe6e7c57f927bd825711977ae9199776a9",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "17/01/14 10:50 PM",
          "commitNameOld": "8a9a6dbd7e8da2fff7e769b8f6a0aa220faad28f",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 2.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,55 @@\n-    private List\u003cAclEntry\u003e parseAclSpec(String aclSpec) {\n-      List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n-      Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n-          \",\");\n-      for (String aclStr : aclStrings) {\n-        AclEntry.Builder builder \u003d new AclEntry.Builder();\n-        // Here \"::\" represent one empty string.\n-        // StringUtils.getStringCollection() will ignore this.\n-        String[] split \u003d aclSpec.split(\":\");\n-        if (split.length !\u003d 3\n-            \u0026\u0026 !(split.length \u003d\u003d 4 \u0026\u0026 DEFAULT.equals(split[0]))) {\n-          throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n-              + aclStr);\n-        }\n-        int index \u003d 0;\n-        if (split.length \u003d\u003d 4) {\n-          assert DEFAULT.equals(split[0]);\n-          // default entry\n-          index++;\n-          builder.setScope(AclEntryScope.DEFAULT);\n-        }\n-        String type \u003d split[index++];\n-        AclEntryType aclType \u003d null;\n-        try {\n-          aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n-          builder.setType(aclType);\n-        } catch (IllegalArgumentException iae) {\n-          throw new HadoopIllegalArgumentException(\n-              \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n-        }\n+  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n+      boolean includePermission) {\n+    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n+    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n+        \",\");\n+    for (String aclStr : aclStrings) {\n+      AclEntry.Builder builder \u003d new AclEntry.Builder();\n+      // Here \"::\" represent one empty string.\n+      // StringUtils.getStringCollection() will ignore this.\n+      String[] split \u003d aclStr.split(\":\");\n+      int expectedAclSpecLength \u003d 2;\n+      if (includePermission) {\n+        expectedAclSpecLength \u003d 3;\n+      }\n+      if (split.length !\u003d expectedAclSpecLength\n+          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n+              .equals(split[0]))) {\n+        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n+            + aclStr);\n+      }\n+      int index \u003d 0;\n+      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n+        assert \"default\".equals(split[0]);\n+        // default entry\n+        index++;\n+        builder.setScope(AclEntryScope.DEFAULT);\n+      }\n+      String type \u003d split[index++];\n+      AclEntryType aclType \u003d null;\n+      try {\n+        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n+        builder.setType(aclType);\n+      } catch (IllegalArgumentException iae) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n+      }\n \n-        builder.setName(split[index++]);\n+      String name \u003d split[index++];\n+      if (!name.isEmpty()) {\n+        builder.setName(name);\n+      }\n \n+      if (expectedAclSpecLength \u003d\u003d 3) {\n         String permission \u003d split[index++];\n         FsAction fsAction \u003d FsAction.getFsAction(permission);\n         if (null \u003d\u003d fsAction) {\n           throw new HadoopIllegalArgumentException(\n               \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n         }\n         builder.setPermission(fsAction);\n-        aclEntries.add(builder.build());\n       }\n-      return aclEntries;\n-    }\n\\ No newline at end of file\n+      aclEntries.add(builder.build());\n+    }\n+    return aclEntries;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n      boolean includePermission) {\n    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n        \",\");\n    for (String aclStr : aclStrings) {\n      AclEntry.Builder builder \u003d new AclEntry.Builder();\n      // Here \"::\" represent one empty string.\n      // StringUtils.getStringCollection() will ignore this.\n      String[] split \u003d aclStr.split(\":\");\n      int expectedAclSpecLength \u003d 2;\n      if (includePermission) {\n        expectedAclSpecLength \u003d 3;\n      }\n      if (split.length !\u003d expectedAclSpecLength\n          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n              .equals(split[0]))) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      int index \u003d 0;\n      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n        assert \"default\".equals(split[0]);\n        // default entry\n        index++;\n        builder.setScope(AclEntryScope.DEFAULT);\n      }\n      String type \u003d split[index++];\n      AclEntryType aclType \u003d null;\n      try {\n        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n        builder.setType(aclType);\n      } catch (IllegalArgumentException iae) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n      }\n\n      String name \u003d split[index++];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n\n      if (expectedAclSpecLength \u003d\u003d 3) {\n        String permission \u003d split[index++];\n        FsAction fsAction \u003d FsAction.getFsAction(permission);\n        if (null \u003d\u003d fsAction) {\n          throw new HadoopIllegalArgumentException(\n              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n        }\n        builder.setPermission(fsAction);\n      }\n      aclEntries.add(builder.build());\n    }\n    return aclEntries;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10213. Fix bugs parsing ACL spec in FsShell setfacl. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559793 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/01/14 10:00 AM",
          "commitName": "cae96dfe6e7c57f927bd825711977ae9199776a9",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "17/01/14 10:50 PM",
          "commitNameOld": "8a9a6dbd7e8da2fff7e769b8f6a0aa220faad28f",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 2.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,55 @@\n-    private List\u003cAclEntry\u003e parseAclSpec(String aclSpec) {\n-      List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n-      Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n-          \",\");\n-      for (String aclStr : aclStrings) {\n-        AclEntry.Builder builder \u003d new AclEntry.Builder();\n-        // Here \"::\" represent one empty string.\n-        // StringUtils.getStringCollection() will ignore this.\n-        String[] split \u003d aclSpec.split(\":\");\n-        if (split.length !\u003d 3\n-            \u0026\u0026 !(split.length \u003d\u003d 4 \u0026\u0026 DEFAULT.equals(split[0]))) {\n-          throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n-              + aclStr);\n-        }\n-        int index \u003d 0;\n-        if (split.length \u003d\u003d 4) {\n-          assert DEFAULT.equals(split[0]);\n-          // default entry\n-          index++;\n-          builder.setScope(AclEntryScope.DEFAULT);\n-        }\n-        String type \u003d split[index++];\n-        AclEntryType aclType \u003d null;\n-        try {\n-          aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n-          builder.setType(aclType);\n-        } catch (IllegalArgumentException iae) {\n-          throw new HadoopIllegalArgumentException(\n-              \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n-        }\n+  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n+      boolean includePermission) {\n+    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n+    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n+        \",\");\n+    for (String aclStr : aclStrings) {\n+      AclEntry.Builder builder \u003d new AclEntry.Builder();\n+      // Here \"::\" represent one empty string.\n+      // StringUtils.getStringCollection() will ignore this.\n+      String[] split \u003d aclStr.split(\":\");\n+      int expectedAclSpecLength \u003d 2;\n+      if (includePermission) {\n+        expectedAclSpecLength \u003d 3;\n+      }\n+      if (split.length !\u003d expectedAclSpecLength\n+          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n+              .equals(split[0]))) {\n+        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n+            + aclStr);\n+      }\n+      int index \u003d 0;\n+      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n+        assert \"default\".equals(split[0]);\n+        // default entry\n+        index++;\n+        builder.setScope(AclEntryScope.DEFAULT);\n+      }\n+      String type \u003d split[index++];\n+      AclEntryType aclType \u003d null;\n+      try {\n+        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n+        builder.setType(aclType);\n+      } catch (IllegalArgumentException iae) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n+      }\n \n-        builder.setName(split[index++]);\n+      String name \u003d split[index++];\n+      if (!name.isEmpty()) {\n+        builder.setName(name);\n+      }\n \n+      if (expectedAclSpecLength \u003d\u003d 3) {\n         String permission \u003d split[index++];\n         FsAction fsAction \u003d FsAction.getFsAction(permission);\n         if (null \u003d\u003d fsAction) {\n           throw new HadoopIllegalArgumentException(\n               \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n         }\n         builder.setPermission(fsAction);\n-        aclEntries.add(builder.build());\n       }\n-      return aclEntries;\n-    }\n\\ No newline at end of file\n+      aclEntries.add(builder.build());\n+    }\n+    return aclEntries;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n      boolean includePermission) {\n    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n        \",\");\n    for (String aclStr : aclStrings) {\n      AclEntry.Builder builder \u003d new AclEntry.Builder();\n      // Here \"::\" represent one empty string.\n      // StringUtils.getStringCollection() will ignore this.\n      String[] split \u003d aclStr.split(\":\");\n      int expectedAclSpecLength \u003d 2;\n      if (includePermission) {\n        expectedAclSpecLength \u003d 3;\n      }\n      if (split.length !\u003d expectedAclSpecLength\n          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n              .equals(split[0]))) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      int index \u003d 0;\n      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n        assert \"default\".equals(split[0]);\n        // default entry\n        index++;\n        builder.setScope(AclEntryScope.DEFAULT);\n      }\n      String type \u003d split[index++];\n      AclEntryType aclType \u003d null;\n      try {\n        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n        builder.setType(aclType);\n      } catch (IllegalArgumentException iae) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n      }\n\n      String name \u003d split[index++];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n\n      if (expectedAclSpecLength \u003d\u003d 3) {\n        String permission \u003d split[index++];\n        FsAction fsAction \u003d FsAction.getFsAction(permission);\n        if (null \u003d\u003d fsAction) {\n          throw new HadoopIllegalArgumentException(\n              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n        }\n        builder.setPermission(fsAction);\n      }\n      aclEntries.add(builder.build());\n    }\n    return aclEntries;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10213. Fix bugs parsing ACL spec in FsShell setfacl. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1559793 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/01/14 10:00 AM",
          "commitName": "cae96dfe6e7c57f927bd825711977ae9199776a9",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "17/01/14 10:50 PM",
          "commitNameOld": "8a9a6dbd7e8da2fff7e769b8f6a0aa220faad28f",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 2.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,55 @@\n-    private List\u003cAclEntry\u003e parseAclSpec(String aclSpec) {\n-      List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n-      Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n-          \",\");\n-      for (String aclStr : aclStrings) {\n-        AclEntry.Builder builder \u003d new AclEntry.Builder();\n-        // Here \"::\" represent one empty string.\n-        // StringUtils.getStringCollection() will ignore this.\n-        String[] split \u003d aclSpec.split(\":\");\n-        if (split.length !\u003d 3\n-            \u0026\u0026 !(split.length \u003d\u003d 4 \u0026\u0026 DEFAULT.equals(split[0]))) {\n-          throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n-              + aclStr);\n-        }\n-        int index \u003d 0;\n-        if (split.length \u003d\u003d 4) {\n-          assert DEFAULT.equals(split[0]);\n-          // default entry\n-          index++;\n-          builder.setScope(AclEntryScope.DEFAULT);\n-        }\n-        String type \u003d split[index++];\n-        AclEntryType aclType \u003d null;\n-        try {\n-          aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n-          builder.setType(aclType);\n-        } catch (IllegalArgumentException iae) {\n-          throw new HadoopIllegalArgumentException(\n-              \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n-        }\n+  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n+      boolean includePermission) {\n+    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n+    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n+        \",\");\n+    for (String aclStr : aclStrings) {\n+      AclEntry.Builder builder \u003d new AclEntry.Builder();\n+      // Here \"::\" represent one empty string.\n+      // StringUtils.getStringCollection() will ignore this.\n+      String[] split \u003d aclStr.split(\":\");\n+      int expectedAclSpecLength \u003d 2;\n+      if (includePermission) {\n+        expectedAclSpecLength \u003d 3;\n+      }\n+      if (split.length !\u003d expectedAclSpecLength\n+          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n+              .equals(split[0]))) {\n+        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n+            + aclStr);\n+      }\n+      int index \u003d 0;\n+      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n+        assert \"default\".equals(split[0]);\n+        // default entry\n+        index++;\n+        builder.setScope(AclEntryScope.DEFAULT);\n+      }\n+      String type \u003d split[index++];\n+      AclEntryType aclType \u003d null;\n+      try {\n+        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n+        builder.setType(aclType);\n+      } catch (IllegalArgumentException iae) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n+      }\n \n-        builder.setName(split[index++]);\n+      String name \u003d split[index++];\n+      if (!name.isEmpty()) {\n+        builder.setName(name);\n+      }\n \n+      if (expectedAclSpecLength \u003d\u003d 3) {\n         String permission \u003d split[index++];\n         FsAction fsAction \u003d FsAction.getFsAction(permission);\n         if (null \u003d\u003d fsAction) {\n           throw new HadoopIllegalArgumentException(\n               \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n         }\n         builder.setPermission(fsAction);\n-        aclEntries.add(builder.build());\n       }\n-      return aclEntries;\n-    }\n\\ No newline at end of file\n+      aclEntries.add(builder.build());\n+    }\n+    return aclEntries;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public static List\u003cAclEntry\u003e parseAclSpec(String aclSpec,\n      boolean includePermission) {\n    List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n    Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n        \",\");\n    for (String aclStr : aclStrings) {\n      AclEntry.Builder builder \u003d new AclEntry.Builder();\n      // Here \"::\" represent one empty string.\n      // StringUtils.getStringCollection() will ignore this.\n      String[] split \u003d aclStr.split(\":\");\n      int expectedAclSpecLength \u003d 2;\n      if (includePermission) {\n        expectedAclSpecLength \u003d 3;\n      }\n      if (split.length !\u003d expectedAclSpecLength\n          \u0026\u0026 !(split.length \u003d\u003d expectedAclSpecLength + 1 \u0026\u0026 \"default\"\n              .equals(split[0]))) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      int index \u003d 0;\n      if (split.length \u003d\u003d expectedAclSpecLength + 1) {\n        assert \"default\".equals(split[0]);\n        // default entry\n        index++;\n        builder.setScope(AclEntryScope.DEFAULT);\n      }\n      String type \u003d split[index++];\n      AclEntryType aclType \u003d null;\n      try {\n        aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n        builder.setType(aclType);\n      } catch (IllegalArgumentException iae) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n      }\n\n      String name \u003d split[index++];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n\n      if (expectedAclSpecLength \u003d\u003d 3) {\n        String permission \u003d split[index++];\n        FsAction fsAction \u003d FsAction.getFsAction(permission);\n        if (null \u003d\u003d fsAction) {\n          throw new HadoopIllegalArgumentException(\n              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n        }\n        builder.setPermission(fsAction);\n      }\n      aclEntries.add(builder.build());\n    }\n    return aclEntries;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
          "extendedDetails": {
            "oldValue": "[aclSpec-String]",
            "newValue": "[aclSpec-String, includePermission-boolean]"
          }
        }
      ]
    },
    "abe13d6ffb0009df859077032aaa19a6d894ae36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10187. add getfacl and setfacl with minimal support for getting and setting ACLs. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1553735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/12/13 12:41 PM",
      "commitName": "abe13d6ffb0009df859077032aaa19a6d894ae36",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,44 @@\n+    private List\u003cAclEntry\u003e parseAclSpec(String aclSpec) {\n+      List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n+      Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n+          \",\");\n+      for (String aclStr : aclStrings) {\n+        AclEntry.Builder builder \u003d new AclEntry.Builder();\n+        // Here \"::\" represent one empty string.\n+        // StringUtils.getStringCollection() will ignore this.\n+        String[] split \u003d aclSpec.split(\":\");\n+        if (split.length !\u003d 3\n+            \u0026\u0026 !(split.length \u003d\u003d 4 \u0026\u0026 DEFAULT.equals(split[0]))) {\n+          throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n+              + aclStr);\n+        }\n+        int index \u003d 0;\n+        if (split.length \u003d\u003d 4) {\n+          assert DEFAULT.equals(split[0]);\n+          // default entry\n+          index++;\n+          builder.setScope(AclEntryScope.DEFAULT);\n+        }\n+        String type \u003d split[index++];\n+        AclEntryType aclType \u003d null;\n+        try {\n+          aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n+          builder.setType(aclType);\n+        } catch (IllegalArgumentException iae) {\n+          throw new HadoopIllegalArgumentException(\n+              \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n+        }\n+\n+        builder.setName(split[index++]);\n+\n+        String permission \u003d split[index++];\n+        FsAction fsAction \u003d FsAction.getFsAction(permission);\n+        if (null \u003d\u003d fsAction) {\n+          throw new HadoopIllegalArgumentException(\n+              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n+        }\n+        builder.setPermission(fsAction);\n+        aclEntries.add(builder.build());\n+      }\n+      return aclEntries;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private List\u003cAclEntry\u003e parseAclSpec(String aclSpec) {\n      List\u003cAclEntry\u003e aclEntries \u003d new ArrayList\u003cAclEntry\u003e();\n      Collection\u003cString\u003e aclStrings \u003d StringUtils.getStringCollection(aclSpec,\n          \",\");\n      for (String aclStr : aclStrings) {\n        AclEntry.Builder builder \u003d new AclEntry.Builder();\n        // Here \"::\" represent one empty string.\n        // StringUtils.getStringCollection() will ignore this.\n        String[] split \u003d aclSpec.split(\":\");\n        if (split.length !\u003d 3\n            \u0026\u0026 !(split.length \u003d\u003d 4 \u0026\u0026 DEFAULT.equals(split[0]))) {\n          throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n              + aclStr);\n        }\n        int index \u003d 0;\n        if (split.length \u003d\u003d 4) {\n          assert DEFAULT.equals(split[0]);\n          // default entry\n          index++;\n          builder.setScope(AclEntryScope.DEFAULT);\n        }\n        String type \u003d split[index++];\n        AclEntryType aclType \u003d null;\n        try {\n          aclType \u003d Enum.valueOf(AclEntryType.class, type.toUpperCase());\n          builder.setType(aclType);\n        } catch (IllegalArgumentException iae) {\n          throw new HadoopIllegalArgumentException(\n              \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n        }\n\n        builder.setName(split[index++]);\n\n        String permission \u003d split[index++];\n        FsAction fsAction \u003d FsAction.getFsAction(permission);\n        if (null \u003d\u003d fsAction) {\n          throw new HadoopIllegalArgumentException(\n              \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n        }\n        builder.setPermission(fsAction);\n        aclEntries.add(builder.build());\n      }\n      return aclEntries;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/AclCommands.java"
    }
  }
}