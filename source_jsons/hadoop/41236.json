{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VisitedResourceRequestTracker.java",
  "functionName": "visit",
  "functionId": "visit___resourceName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/VisitedResourceRequestTracker.java",
  "functionStartLine": 119,
  "functionEndLine": 144,
  "numCommitsSeen": 2,
  "timeTaken": 916,
  "changeHistory": [
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c"
  ],
  "changeHistoryShort": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,26 @@\n+    private boolean visit(String resourceName) {\n+      if (resourceName.equals(ResourceRequest.ANY)) {\n+        return visitAny();\n+      }\n+\n+      List\u003cFSSchedulerNode\u003e nodes \u003d\n+          nodeTracker.getNodesByResourceName(resourceName);\n+      int numNodes \u003d nodes.size();\n+      if (numNodes \u003d\u003d 0) {\n+        LOG.error(\"Found ResourceRequest for a non-existent node/rack named \" +\n+            resourceName);\n+        return false;\n+      }\n+\n+      if (numNodes \u003d\u003d 1) {\n+        // Found a single node. To be safe, let us verify it is a node and\n+        // not a rack with a single node.\n+        FSSchedulerNode node \u003d nodes.get(0);\n+        if (node.getNodeName().equals(resourceName)) {\n+          return visitNode(node.getRackName());\n+        }\n+      }\n+\n+      // At this point, it is not ANY or a node. Must be a rack\n+      return visitRack(resourceName);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean visit(String resourceName) {\n      if (resourceName.equals(ResourceRequest.ANY)) {\n        return visitAny();\n      }\n\n      List\u003cFSSchedulerNode\u003e nodes \u003d\n          nodeTracker.getNodesByResourceName(resourceName);\n      int numNodes \u003d nodes.size();\n      if (numNodes \u003d\u003d 0) {\n        LOG.error(\"Found ResourceRequest for a non-existent node/rack named \" +\n            resourceName);\n        return false;\n      }\n\n      if (numNodes \u003d\u003d 1) {\n        // Found a single node. To be safe, let us verify it is a node and\n        // not a rack with a single node.\n        FSSchedulerNode node \u003d nodes.get(0);\n        if (node.getNodeName().equals(resourceName)) {\n          return visitNode(node.getRackName());\n        }\n      }\n\n      // At this point, it is not ANY or a node. Must be a rack\n      return visitRack(resourceName);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/VisitedResourceRequestTracker.java"
    }
  }
}