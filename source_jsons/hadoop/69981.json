{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Base64.java",
  "functionName": "decodeAsByteObjectArray",
  "functionId": "decodeAsByteObjectArray___data-String(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/Base64.java",
  "functionStartLine": 134,
  "functionEndLine": 185,
  "numCommitsSeen": 1,
  "timeTaken": 559,
  "changeHistory": [
    "b4c23043d38325aad8af4488caca115eae789f07"
  ],
  "changeHistoryShort": {
    "b4c23043d38325aad8af4488caca115eae789f07": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4c23043d38325aad8af4488caca115eae789f07": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15757. ABFS: remove dependency on common-codec Base64.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b4c23043d38325aad8af4488caca115eae789f07",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,52 @@\n+  public static Byte[] decodeAsByteObjectArray(final String data) {\n+    int byteArrayLength \u003d 3 * data.length() / 4;\n+\n+    if (data.endsWith(\"\u003d\u003d\")) {\n+      byteArrayLength -\u003d 2;\n+    }\n+    else if (data.endsWith(\"\u003d\")) {\n+      byteArrayLength -\u003d 1;\n+    }\n+\n+    final Byte[] retArray \u003d new Byte[byteArrayLength];\n+    int byteDex \u003d 0;\n+    int charDex \u003d 0;\n+\n+    for (; charDex \u003c data.length(); charDex +\u003d 4) {\n+      // get 4 chars, convert to 3 bytes\n+      final int char1 \u003d DECODE_64[(byte) data.charAt(charDex)];\n+      final int char2 \u003d DECODE_64[(byte) data.charAt(charDex + 1)];\n+      final int char3 \u003d DECODE_64[(byte) data.charAt(charDex + 2)];\n+      final int char4 \u003d DECODE_64[(byte) data.charAt(charDex + 3)];\n+\n+      if (char1 \u003c 0 || char2 \u003c 0 || char3 \u003d\u003d -1 || char4 \u003d\u003d -1) {\n+        // invalid character(-1), or bad padding (-2)\n+        throw new IllegalArgumentException(\"The data parameter is not a valid base64-encoded string.\");\n+      }\n+\n+      int tVal \u003d char1 \u003c\u003c 18;\n+      tVal +\u003d char2 \u003c\u003c 12;\n+      tVal +\u003d (char3 \u0026 0xff) \u003c\u003c 6;\n+      tVal +\u003d char4 \u0026 0xff;\n+\n+      if (char3 \u003d\u003d -2) {\n+        // two \"\u003d\u003d\" pad chars, check bits 12-24\n+        tVal \u0026\u003d 0x00FFF000;\n+        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 16 \u0026 0xFF);\n+      }\n+      else if (char4 \u003d\u003d -2) {\n+        // one pad char \"\u003d\" , check bits 6-24.\n+        tVal \u0026\u003d 0x00FFFFC0;\n+        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 16 \u0026 0xFF);\n+        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 8 \u0026 0xFF);\n+\n+      }\n+      else {\n+        // No pads take all 3 bytes, bits 0-24\n+        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 16 \u0026 0xFF);\n+        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 8 \u0026 0xFF);\n+        retArray[byteDex++] \u003d (byte) (tVal \u0026 0xFF);\n+      }\n+    }\n+    return retArray;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Byte[] decodeAsByteObjectArray(final String data) {\n    int byteArrayLength \u003d 3 * data.length() / 4;\n\n    if (data.endsWith(\"\u003d\u003d\")) {\n      byteArrayLength -\u003d 2;\n    }\n    else if (data.endsWith(\"\u003d\")) {\n      byteArrayLength -\u003d 1;\n    }\n\n    final Byte[] retArray \u003d new Byte[byteArrayLength];\n    int byteDex \u003d 0;\n    int charDex \u003d 0;\n\n    for (; charDex \u003c data.length(); charDex +\u003d 4) {\n      // get 4 chars, convert to 3 bytes\n      final int char1 \u003d DECODE_64[(byte) data.charAt(charDex)];\n      final int char2 \u003d DECODE_64[(byte) data.charAt(charDex + 1)];\n      final int char3 \u003d DECODE_64[(byte) data.charAt(charDex + 2)];\n      final int char4 \u003d DECODE_64[(byte) data.charAt(charDex + 3)];\n\n      if (char1 \u003c 0 || char2 \u003c 0 || char3 \u003d\u003d -1 || char4 \u003d\u003d -1) {\n        // invalid character(-1), or bad padding (-2)\n        throw new IllegalArgumentException(\"The data parameter is not a valid base64-encoded string.\");\n      }\n\n      int tVal \u003d char1 \u003c\u003c 18;\n      tVal +\u003d char2 \u003c\u003c 12;\n      tVal +\u003d (char3 \u0026 0xff) \u003c\u003c 6;\n      tVal +\u003d char4 \u0026 0xff;\n\n      if (char3 \u003d\u003d -2) {\n        // two \"\u003d\u003d\" pad chars, check bits 12-24\n        tVal \u0026\u003d 0x00FFF000;\n        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 16 \u0026 0xFF);\n      }\n      else if (char4 \u003d\u003d -2) {\n        // one pad char \"\u003d\" , check bits 6-24.\n        tVal \u0026\u003d 0x00FFFFC0;\n        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 16 \u0026 0xFF);\n        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 8 \u0026 0xFF);\n\n      }\n      else {\n        // No pads take all 3 bytes, bits 0-24\n        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 16 \u0026 0xFF);\n        retArray[byteDex++] \u003d (byte) (tVal \u003e\u003e 8 \u0026 0xFF);\n        retArray[byteDex++] \u003d (byte) (tVal \u0026 0xFF);\n      }\n    }\n    return retArray;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/utils/Base64.java"
    }
  }
}