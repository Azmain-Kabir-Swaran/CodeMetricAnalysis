{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IterativePlanner.java",
  "functionName": "validateOrderNoGap",
  "functionId": "validateOrderNoGap___allocations-RLESparseResourceAllocation__curAlloc-Map__ReservationInterval,Resource____allocateLeft-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
  "functionStartLine": 169,
  "functionEndLine": 200,
  "numCommitsSeen": 6,
  "timeTaken": 2089,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,32 @@\n+  protected static boolean validateOrderNoGap(\n+      RLESparseResourceAllocation allocations,\n+      Map\u003cReservationInterval, Resource\u003e curAlloc, boolean allocateLeft) {\n+\n+    // Left to right\n+    if (allocateLeft) {\n+      Long stageStartTime \u003d findEarliestTime(curAlloc);\n+      Long allocationEndTime \u003d allocations.getLatestNonNullTime();\n+\n+      // Check that there is no gap between stages\n+      if ((allocationEndTime !\u003d -1) \u0026\u0026 (allocationEndTime \u003c stageStartTime)) {\n+        return false;\n+      }\n+      // Right to left\n+    } else {\n+      Long stageEndTime \u003d findLatestTime(curAlloc);\n+      Long allocationStartTime \u003d allocations.getEarliestStartTime();\n+\n+      // Check that there is no gap between stages\n+      if ((allocationStartTime !\u003d -1) \u0026\u0026 (stageEndTime \u003c allocationStartTime)) {\n+        return false;\n+      }\n+    }\n+\n+    // Check that the stage allocation does not violate ORDER_NO_GAP\n+    if (!isNonPreemptiveAllocation(curAlloc)) {\n+      return false;\n+    }\n+\n+    // The allocation is legal\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static boolean validateOrderNoGap(\n      RLESparseResourceAllocation allocations,\n      Map\u003cReservationInterval, Resource\u003e curAlloc, boolean allocateLeft) {\n\n    // Left to right\n    if (allocateLeft) {\n      Long stageStartTime \u003d findEarliestTime(curAlloc);\n      Long allocationEndTime \u003d allocations.getLatestNonNullTime();\n\n      // Check that there is no gap between stages\n      if ((allocationEndTime !\u003d -1) \u0026\u0026 (allocationEndTime \u003c stageStartTime)) {\n        return false;\n      }\n      // Right to left\n    } else {\n      Long stageEndTime \u003d findLatestTime(curAlloc);\n      Long allocationStartTime \u003d allocations.getEarliestStartTime();\n\n      // Check that there is no gap between stages\n      if ((allocationStartTime !\u003d -1) \u0026\u0026 (stageEndTime \u003c allocationStartTime)) {\n        return false;\n      }\n    }\n\n    // Check that the stage allocation does not violate ORDER_NO_GAP\n    if (!isNonPreemptiveAllocation(curAlloc)) {\n      return false;\n    }\n\n    // The allocation is legal\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java"
    }
  }
}