{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemRMStateStore.java",
  "functionName": "loadRMDTSecretManagerState",
  "functionId": "loadRMDTSecretManagerState___rmState-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
  "functionStartLine": 359,
  "functionEndLine": 401,
  "numCommitsSeen": 57,
  "timeTaken": 3451,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "d8863fc16fa3cbcdda5b99f79386c43e4fae5917",
    "01a1621930df17a745dd37892996c68fca3447d1",
    "018664550507981297fd9f91e29408e6b7801ea9",
    "ea26cc0b4ac02b8af686dfda80f540e5aa70c358",
    "ce56616037fc160ba875b496bdc369411bb873be",
    "7f97fd131981e88ffc76c11a01ea9d190576a6d6",
    "9f3e488936b6fbfc30e4b0cc42667288355345d1",
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "d8863fc16fa3cbcdda5b99f79386c43e4fae5917": "Ybodychange",
    "01a1621930df17a745dd37892996c68fca3447d1": "Ybodychange",
    "018664550507981297fd9f91e29408e6b7801ea9": "Ybodychange",
    "ea26cc0b4ac02b8af686dfda80f540e5aa70c358": "Ybodychange",
    "ce56616037fc160ba875b496bdc369411bb873be": "Ybodychange",
    "7f97fd131981e88ffc76c11a01ea9d190576a6d6": "Ybodychange",
    "9f3e488936b6fbfc30e4b0cc42667288355345d1": "Ybodychange",
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,43 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n     FileStatus[] childNodes \u003d listStatusWithRetries(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n       if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {\n         continue;\n       }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFileWithRetries(childNodePath,\n           childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n         if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {\n           DelegationKey key \u003d new DelegationKey();\n           key.readFields(fsIn);\n           rmState.rmSecretManagerState.masterKeyState.add(key);\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n-                + \", expirationDate\u003d\" + key.getExpiryDate());\n-          }\n+          LOG.debug(\"Loaded delegation key: keyId\u003d{}, expirationDate\u003d{}\",\n+              key.getKeyId(), key.getExpiryDate());\n         } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifierData identifierData \u003d\n               RMStateStoreUtils.readRMDelegationTokenIdentifierData(fsIn);\n           RMDelegationTokenIdentifier identifier \u003d\n               identifierData.getTokenIdentifier();\n           long renewDate \u003d identifierData.getRenewDate();\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n             renewDate);\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n-                + \" renewDate\u003d\" + renewDate);\n-          }\n+          LOG.debug(\"Loaded RMDelegationTokenIdentifier: {} renewDate\u003d{}\",\n+              identifier, renewDate);\n         } else {\n           LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n    FileStatus[] childNodes \u003d listStatusWithRetries(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFileWithRetries(childNodePath,\n          childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n        if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {\n          DelegationKey key \u003d new DelegationKey();\n          key.readFields(fsIn);\n          rmState.rmSecretManagerState.masterKeyState.add(key);\n          LOG.debug(\"Loaded delegation key: keyId\u003d{}, expirationDate\u003d{}\",\n              key.getKeyId(), key.getExpiryDate());\n        } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              RMStateStoreUtils.readRMDelegationTokenIdentifierData(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n            renewDate);\n          LOG.debug(\"Loaded RMDelegationTokenIdentifier: {} renewDate\u003d{}\",\n              identifier, renewDate);\n        } else {\n          LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "d8863fc16fa3cbcdda5b99f79386c43e4fae5917": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5594. Handle old RMDelegationToken format when recovering RM (rkanter)\n",
      "commitDate": "04/12/17 1:14 PM",
      "commitName": "d8863fc16fa3cbcdda5b99f79386c43e4fae5917",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 124.87,
      "commitsBetweenForRepo": 1053,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n     FileStatus[] childNodes \u003d listStatusWithRetries(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n       if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {\n         continue;\n       }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFileWithRetries(childNodePath,\n           childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n         if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {\n           DelegationKey key \u003d new DelegationKey();\n           key.readFields(fsIn);\n           rmState.rmSecretManagerState.masterKeyState.add(key);\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n                 + \", expirationDate\u003d\" + key.getExpiryDate());\n           }\n         } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n           RMDelegationTokenIdentifierData identifierData \u003d\n-              new RMDelegationTokenIdentifierData();\n-          identifierData.readFields(fsIn);\n+              RMStateStoreUtils.readRMDelegationTokenIdentifierData(fsIn);\n           RMDelegationTokenIdentifier identifier \u003d\n               identifierData.getTokenIdentifier();\n           long renewDate \u003d identifierData.getRenewDate();\n-\n           rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n             renewDate);\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                 + \" renewDate\u003d\" + renewDate);\n           }\n         } else {\n           LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n    FileStatus[] childNodes \u003d listStatusWithRetries(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFileWithRetries(childNodePath,\n          childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n        if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {\n          DelegationKey key \u003d new DelegationKey();\n          key.readFields(fsIn);\n          rmState.rmSecretManagerState.masterKeyState.add(key);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n                + \", expirationDate\u003d\" + key.getExpiryDate());\n          }\n        } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              RMStateStoreUtils.readRMDelegationTokenIdentifierData(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n            renewDate);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                + \" renewDate\u003d\" + renewDate);\n          }\n        } else {\n          LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "01a1621930df17a745dd37892996c68fca3447d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2820. Retry in FileSystemRMStateStore when FS\u0027s operations fail due to IOException. Contributed by Zhihai Xu.\n",
      "commitDate": "27/02/15 7:56 AM",
      "commitName": "01a1621930df17a745dd37892996c68fca3447d1",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "08/01/15 9:47 AM",
      "commitNameOld": "dc2eaa26b20cfbbcdd5784bb8761d08a42f29605",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 49.92,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n-    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n+    FileStatus[] childNodes \u003d listStatusWithRetries(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n-      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n+      if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {\n         continue;\n       }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n-      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n+      byte[] childData \u003d readFileWithRetries(childNodePath,\n+          childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n-      DataInputStream fsIn \u003d new DataInputStream(is);\n-      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n-        DelegationKey key \u003d new DelegationKey();\n-        key.readFields(fsIn);\n-        rmState.rmSecretManagerState.masterKeyState.add(key);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n-              + \", expirationDate\u003d\" + key.getExpiryDate());\n-        }\n-      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n-        RMDelegationTokenIdentifierData identifierData \u003d\n-            new RMDelegationTokenIdentifierData();\n-        identifierData.readFields(fsIn);\n-        RMDelegationTokenIdentifier identifier \u003d\n-            identifierData.getTokenIdentifier();\n-        long renewDate \u003d identifierData.getRenewDate();\n+      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n+        if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {\n+          DelegationKey key \u003d new DelegationKey();\n+          key.readFields(fsIn);\n+          rmState.rmSecretManagerState.masterKeyState.add(key);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n+                + \", expirationDate\u003d\" + key.getExpiryDate());\n+          }\n+        } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n+          RMDelegationTokenIdentifierData identifierData \u003d\n+              new RMDelegationTokenIdentifierData();\n+          identifierData.readFields(fsIn);\n+          RMDelegationTokenIdentifier identifier \u003d\n+              identifierData.getTokenIdentifier();\n+          long renewDate \u003d identifierData.getRenewDate();\n \n-        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n-          renewDate);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n-              + \" renewDate\u003d\" + renewDate);\n+          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n+            renewDate);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n+                + \" renewDate\u003d\" + renewDate);\n+          }\n+        } else {\n+          LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n         }\n-      } else {\n-        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n       }\n-      fsIn.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n    FileStatus[] childNodes \u003d listStatusWithRetries(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecordWithRetries(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFileWithRetries(childNodePath,\n          childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      try (DataInputStream fsIn \u003d new DataInputStream(is)) {\n        if (childNodeName.startsWith(DELEGATION_KEY_PREFIX)) {\n          DelegationKey key \u003d new DelegationKey();\n          key.readFields(fsIn);\n          rmState.rmSecretManagerState.masterKeyState.add(key);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n                + \", expirationDate\u003d\" + key.getExpiryDate());\n          }\n        } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n          RMDelegationTokenIdentifierData identifierData \u003d\n              new RMDelegationTokenIdentifierData();\n          identifierData.readFields(fsIn);\n          RMDelegationTokenIdentifier identifier \u003d\n              identifierData.getTokenIdentifier();\n          long renewDate \u003d identifierData.getRenewDate();\n\n          rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n            renewDate);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n                + \" renewDate\u003d\" + renewDate);\n          }\n        } else {\n          LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "018664550507981297fd9f91e29408e6b7801ea9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2743. Fixed a bug in ResourceManager that was causing RMDelegationToken identifiers to be tampered and thus causing app submission failures in secure mode. Contributed by Jian He.\n",
      "commitDate": "26/10/14 11:14 AM",
      "commitName": "018664550507981297fd9f91e29408e6b7801ea9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/10/14 10:47 AM",
      "commitNameOld": "ea26cc0b4ac02b8af686dfda80f540e5aa70c358",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.02,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,48 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n     FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n       if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n         continue;\n       }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n       if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n         DelegationKey key \u003d new DelegationKey();\n         key.readFields(fsIn);\n         rmState.rmSecretManagerState.masterKeyState.add(key);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n+              + \", expirationDate\u003d\" + key.getExpiryDate());\n+        }\n       } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n-        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n-        identifier.readFields(fsIn);\n-        long renewDate \u003d identifier.getRenewDate();\n+        RMDelegationTokenIdentifierData identifierData \u003d\n+            new RMDelegationTokenIdentifierData();\n+        identifierData.readFields(fsIn);\n+        RMDelegationTokenIdentifier identifier \u003d\n+            identifierData.getTokenIdentifier();\n+        long renewDate \u003d identifierData.getRenewDate();\n+\n         rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n           renewDate);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n+              + \" renewDate\u003d\" + renewDate);\n+        }\n       } else {\n         LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n       }\n       fsIn.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n        DelegationKey key \u003d new DelegationKey();\n        key.readFields(fsIn);\n        rmState.rmSecretManagerState.masterKeyState.add(key);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loaded delegation key: keyId\u003d\" + key.getKeyId()\n              + \", expirationDate\u003d\" + key.getExpiryDate());\n        }\n      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n        RMDelegationTokenIdentifierData identifierData \u003d\n            new RMDelegationTokenIdentifierData();\n        identifierData.readFields(fsIn);\n        RMDelegationTokenIdentifier identifier \u003d\n            identifierData.getTokenIdentifier();\n        long renewDate \u003d identifierData.getRenewDate();\n\n        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n          renewDate);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loaded RMDelegationTokenIdentifier: \" + identifier\n              + \" renewDate\u003d\" + renewDate);\n        }\n      } else {\n        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n      }\n      fsIn.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "ea26cc0b4ac02b8af686dfda80f540e5aa70c358": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2615. Changed ClientToAMTokenIdentifier/RM(Timeline)DelegationTokenIdentifier to use protobuf as payload. Contributed by Junping Du\n",
      "commitDate": "06/10/14 10:47 AM",
      "commitName": "ea26cc0b4ac02b8af686dfda80f540e5aa70c358",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/14 6:04 PM",
      "commitNameOld": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 22.7,
      "commitsBetweenForRepo": 259,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n     FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n       if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n         continue;\n       }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n       if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n         DelegationKey key \u003d new DelegationKey();\n         key.readFields(fsIn);\n         rmState.rmSecretManagerState.masterKeyState.add(key);\n       } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n         RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n         identifier.readFields(fsIn);\n-        long renewDate \u003d fsIn.readLong();\n+        long renewDate \u003d identifier.getRenewDate();\n         rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n           renewDate);\n       } else {\n         LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n       }\n       fsIn.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n        DelegationKey key \u003d new DelegationKey();\n        key.readFields(fsIn);\n        rmState.rmSecretManagerState.masterKeyState.add(key);\n      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n        identifier.readFields(fsIn);\n        long renewDate \u003d identifier.getRenewDate();\n        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n          renewDate);\n      } else {\n        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n      }\n      fsIn.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "ce56616037fc160ba875b496bdc369411bb873be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1776. Fixed DelegationToken renewal to survive RM failover. Contributed by Zhijie Shen\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580154 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 9:12 PM",
      "commitName": "ce56616037fc160ba875b496bdc369411bb873be",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/12/13 6:33 PM",
      "commitNameOld": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 93.07,
      "commitsBetweenForRepo": 690,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n+    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n     FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n       if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n         continue;\n       }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n       if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n         DelegationKey key \u003d new DelegationKey();\n         key.readFields(fsIn);\n         rmState.rmSecretManagerState.masterKeyState.add(key);\n       } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n         RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n         identifier.readFields(fsIn);\n         long renewDate \u003d fsIn.readLong();\n         rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n           renewDate);\n       } else {\n         LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n       }\n       fsIn.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    checkAndResumeUpdateOperation(rmDTSecretManagerRoot);\n    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n        DelegationKey key \u003d new DelegationKey();\n        key.readFields(fsIn);\n        rmState.rmSecretManagerState.masterKeyState.add(key);\n      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n        identifier.readFields(fsIn);\n        long renewDate \u003d fsIn.readLong();\n        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n          renewDate);\n      } else {\n        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n      }\n      fsIn.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "7f97fd131981e88ffc76c11a01ea9d190576a6d6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1185. Fixed FileSystemRMStateStore to not leave partial files that prevent subsequent ResourceManager recovery. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1533803 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/13 11:14 AM",
      "commitName": "7f97fd131981e88ffc76c11a01ea9d190576a6d6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 1:39 PM",
      "commitNameOld": "8628c1704b7d8c1a0ac01cea679c03245d11d330",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 29.9,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n+      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n+        continue;\n+      }\n       if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n         rmState.rmSecretManagerState.dtSequenceNumber \u003d\n             Integer.parseInt(childNodeName.split(\"_\")[1]);\n         continue;\n       }\n \n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n       if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n         DelegationKey key \u003d new DelegationKey();\n         key.readFields(fsIn);\n         rmState.rmSecretManagerState.masterKeyState.add(key);\n       } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n         RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n         identifier.readFields(fsIn);\n         long renewDate \u003d fsIn.readLong();\n         rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n           renewDate);\n       } else {\n         LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n       }\n       fsIn.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if (checkAndRemovePartialRecord(childNodeStatus.getPath())) {\n        continue;\n      }\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n        DelegationKey key \u003d new DelegationKey();\n        key.readFields(fsIn);\n        rmState.rmSecretManagerState.masterKeyState.add(key);\n      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n        identifier.readFields(fsIn);\n        long renewDate \u003d fsIn.readLong();\n        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n          renewDate);\n      } else {\n        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n      }\n      fsIn.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "9f3e488936b6fbfc30e4b0cc42667288355345d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-922. Change FileSystemRMStateStore to use directories (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504261 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/13 1:19 PM",
      "commitName": "9f3e488936b6fbfc30e4b0cc42667288355345d1",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "29/05/13 9:14 PM",
      "commitNameOld": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 48.67,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n     FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n \n     for(FileStatus childNodeStatus : childNodes) {\n       assert childNodeStatus.isFile();\n       String childNodeName \u003d childNodeStatus.getPath().getName();\n+      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n+        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n+            Integer.parseInt(childNodeName.split(\"_\")[1]);\n+        continue;\n+      }\n+\n       Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n       byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n       ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n       DataInputStream fsIn \u003d new DataInputStream(is);\n       if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n         DelegationKey key \u003d new DelegationKey();\n         key.readFields(fsIn);\n         rmState.rmSecretManagerState.masterKeyState.add(key);\n       } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n         RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n         identifier.readFields(fsIn);\n         long renewDate \u003d fsIn.readLong();\n         rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n           renewDate);\n-      } else if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n-        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n-            Integer.parseInt(childNodeName.split(\"_\")[1]);\n-      }else {\n+      } else {\n         LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n       }\n       fsIn.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n        continue;\n      }\n\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n        DelegationKey key \u003d new DelegationKey();\n        key.readFields(fsIn);\n        rmState.rmSecretManagerState.masterKeyState.add(key);\n      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n        identifier.readFields(fsIn);\n        long renewDate \u003d fsIn.readLong();\n        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n          renewDate);\n      } else {\n        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n      }\n      fsIn.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java",
      "extendedDetails": {}
    },
    "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895": {
      "type": "Yintroduced",
      "commitMessage": "YARN-638. Modified ResourceManager to restore RMDelegationTokens after restarting. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 9:14 PM",
      "commitName": "29902cd53c2dd6f0b2c44fef14fe9cdbaf183895",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n+    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n+\n+    for(FileStatus childNodeStatus : childNodes) {\n+      assert childNodeStatus.isFile();\n+      String childNodeName \u003d childNodeStatus.getPath().getName();\n+      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n+      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n+      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n+      DataInputStream fsIn \u003d new DataInputStream(is);\n+      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n+        DelegationKey key \u003d new DelegationKey();\n+        key.readFields(fsIn);\n+        rmState.rmSecretManagerState.masterKeyState.add(key);\n+      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n+        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n+        identifier.readFields(fsIn);\n+        long renewDate \u003d fsIn.readLong();\n+        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n+          renewDate);\n+      } else if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n+        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n+            Integer.parseInt(childNodeName.split(\"_\")[1]);\n+      }else {\n+        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n+      }\n+      fsIn.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadRMDTSecretManagerState(RMState rmState) throws Exception {\n    FileStatus[] childNodes \u003d fs.listStatus(rmDTSecretManagerRoot);\n\n    for(FileStatus childNodeStatus : childNodes) {\n      assert childNodeStatus.isFile();\n      String childNodeName \u003d childNodeStatus.getPath().getName();\n      Path childNodePath \u003d getNodePath(rmDTSecretManagerRoot, childNodeName);\n      byte[] childData \u003d readFile(childNodePath, childNodeStatus.getLen());\n      ByteArrayInputStream is \u003d new ByteArrayInputStream(childData);\n      DataInputStream fsIn \u003d new DataInputStream(is);\n      if(childNodeName.startsWith(DELEGATION_KEY_PREFIX)){\n        DelegationKey key \u003d new DelegationKey();\n        key.readFields(fsIn);\n        rmState.rmSecretManagerState.masterKeyState.add(key);\n      } else if (childNodeName.startsWith(DELEGATION_TOKEN_PREFIX)) {\n        RMDelegationTokenIdentifier identifier \u003d new RMDelegationTokenIdentifier();\n        identifier.readFields(fsIn);\n        long renewDate \u003d fsIn.readLong();\n        rmState.rmSecretManagerState.delegationTokenState.put(identifier,\n          renewDate);\n      } else if(childNodeName.startsWith(DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX)) {\n        rmState.rmSecretManagerState.dtSequenceNumber \u003d\n            Integer.parseInt(childNodeName.split(\"_\")[1]);\n      }else {\n        LOG.warn(\"Unknown file for recovering RMDelegationTokenSecretManager\");\n      }\n      fsIn.close();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/FileSystemRMStateStore.java"
    }
  }
}