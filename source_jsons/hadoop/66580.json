{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopArchiveLogs.java",
  "functionName": "generateScript",
  "functionId": "generateScript___localScript-File",
  "sourceFilePath": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
  "functionStartLine": 497,
  "functionEndLine": 550,
  "numCommitsSeen": 20,
  "timeTaken": 3490,
  "changeHistory": [
    "f47659fb9709f69846f08c489bcafd1e36f5bf09",
    "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94",
    "6d84cc16b3e0685fef01d0e3526b0f7556ceff51",
    "1bca1bb5175b5976a5a0e45b6e1c4486bdf87a0e",
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
    "119cc75e7ebd723790f6326498383304aba384a2"
  ],
  "changeHistoryShort": {
    "f47659fb9709f69846f08c489bcafd1e36f5bf09": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94": "Ybodychange",
    "6d84cc16b3e0685fef01d0e3526b0f7556ceff51": "Ybodychange",
    "1bca1bb5175b5976a5a0e45b6e1c4486bdf87a0e": "Ybodychange",
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": "Ybodychange",
    "119cc75e7ebd723790f6326498383304aba384a2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f47659fb9709f69846f08c489bcafd1e36f5bf09": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7047. Make HAR tool support IndexedLogAggregtionController. (Xuan Gong via wangda)\n\nChange-Id: Ice5ae1c706f2476361997dcbb29f2c33c77d4f0c\n",
      "commitDate": "15/03/18 1:26 PM",
      "commitName": "f47659fb9709f69846f08c489bcafd1e36f5bf09",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-7047. Make HAR tool support IndexedLogAggregtionController. (Xuan Gong via wangda)\n\nChange-Id: Ice5ae1c706f2476361997dcbb29f2c33c77d4f0c\n",
          "commitDate": "15/03/18 1:26 PM",
          "commitName": "f47659fb9709f69846f08c489bcafd1e36f5bf09",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/11/16 10:57 AM",
          "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 485.06,
          "commitsBetweenForRepo": 3078,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,54 @@\n-  void generateScript(File localScript, Path workingDir,\n-        Path remoteRootLogDir, String suffix) throws IOException {\n+  void generateScript(File localScript) throws IOException {\n     if (verbose) {\n       LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n     }\n     String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n     FileWriterWithEncoding fw \u003d null;\n     try {\n       fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n       fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n       int containerCount \u003d 1;\n-      for (AppInfo app : eligibleApplications) {\n+      for (AppInfo context : eligibleApplications) {\n         fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n         fw.write(Integer.toString(containerCount));\n         fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n-        fw.write(app.getAppId());\n+        fw.write(context.getAppId());\n         fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n-        fw.write(app.getUser());\n+        fw.write(context.getUser());\n+        fw.write(\"\\\"\\n\\tworkingDir\u003d\\\"\");\n+        fw.write(context.getWorkingDir().toString());\n+        fw.write(\"\\\"\\n\\tremoteRootLogDir\u003d\\\"\");\n+        fw.write(context.getRemoteRootLogDir().toString());\n+        fw.write(\"\\\"\\n\\tsuffix\u003d\\\"\");\n+        fw.write(context.getSuffix());\n         fw.write(\"\\\"\\nel\");\n         containerCount++;\n       }\n       fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n       fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n       fw.write(Long.toString(memory));\n       fw.write(\"m\\\"\\n\");\n       fw.write(\"export HADOOP_CLASSPATH\u003d\");\n       fw.write(classpath);\n       fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n       fw.write(HadoopArchiveLogsRunner.class.getName());\n       fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n-      fw.write(workingDir.toString());\n+      fw.write(\"\\\"$workingDir\\\"\");\n       fw.write(\" -remoteRootLogDir \");\n-      fw.write(remoteRootLogDir.toString());\n+      fw.write(\"\\\"$remoteRootLogDir\\\"\");\n       fw.write(\" -suffix \");\n-      fw.write(suffix);\n+      fw.write(\"\\\"$suffix\\\"\");\n       if (!proxy) {\n         fw.write(\" -noProxy\\n\");\n       }\n       fw.write(\"\\n\");\n     } finally {\n       if (fw !\u003d null) {\n         fw.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void generateScript(File localScript) throws IOException {\n    if (verbose) {\n      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    }\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriterWithEncoding fw \u003d null;\n    try {\n      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (AppInfo context : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(context.getAppId());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(context.getUser());\n        fw.write(\"\\\"\\n\\tworkingDir\u003d\\\"\");\n        fw.write(context.getWorkingDir().toString());\n        fw.write(\"\\\"\\n\\tremoteRootLogDir\u003d\\\"\");\n        fw.write(context.getRemoteRootLogDir().toString());\n        fw.write(\"\\\"\\n\\tsuffix\u003d\\\"\");\n        fw.write(context.getSuffix());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(\"\\\"$workingDir\\\"\");\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(\"\\\"$remoteRootLogDir\\\"\");\n      fw.write(\" -suffix \");\n      fw.write(\"\\\"$suffix\\\"\");\n      if (!proxy) {\n        fw.write(\" -noProxy\\n\");\n      }\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
          "extendedDetails": {
            "oldValue": "[localScript-File, workingDir-Path, remoteRootLogDir-Path, suffix-String]",
            "newValue": "[localScript-File]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7047. Make HAR tool support IndexedLogAggregtionController. (Xuan Gong via wangda)\n\nChange-Id: Ice5ae1c706f2476361997dcbb29f2c33c77d4f0c\n",
          "commitDate": "15/03/18 1:26 PM",
          "commitName": "f47659fb9709f69846f08c489bcafd1e36f5bf09",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/11/16 10:57 AM",
          "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 485.06,
          "commitsBetweenForRepo": 3078,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,54 @@\n-  void generateScript(File localScript, Path workingDir,\n-        Path remoteRootLogDir, String suffix) throws IOException {\n+  void generateScript(File localScript) throws IOException {\n     if (verbose) {\n       LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n     }\n     String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n     FileWriterWithEncoding fw \u003d null;\n     try {\n       fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n       fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n       int containerCount \u003d 1;\n-      for (AppInfo app : eligibleApplications) {\n+      for (AppInfo context : eligibleApplications) {\n         fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n         fw.write(Integer.toString(containerCount));\n         fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n-        fw.write(app.getAppId());\n+        fw.write(context.getAppId());\n         fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n-        fw.write(app.getUser());\n+        fw.write(context.getUser());\n+        fw.write(\"\\\"\\n\\tworkingDir\u003d\\\"\");\n+        fw.write(context.getWorkingDir().toString());\n+        fw.write(\"\\\"\\n\\tremoteRootLogDir\u003d\\\"\");\n+        fw.write(context.getRemoteRootLogDir().toString());\n+        fw.write(\"\\\"\\n\\tsuffix\u003d\\\"\");\n+        fw.write(context.getSuffix());\n         fw.write(\"\\\"\\nel\");\n         containerCount++;\n       }\n       fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n       fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n       fw.write(Long.toString(memory));\n       fw.write(\"m\\\"\\n\");\n       fw.write(\"export HADOOP_CLASSPATH\u003d\");\n       fw.write(classpath);\n       fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n       fw.write(HadoopArchiveLogsRunner.class.getName());\n       fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n-      fw.write(workingDir.toString());\n+      fw.write(\"\\\"$workingDir\\\"\");\n       fw.write(\" -remoteRootLogDir \");\n-      fw.write(remoteRootLogDir.toString());\n+      fw.write(\"\\\"$remoteRootLogDir\\\"\");\n       fw.write(\" -suffix \");\n-      fw.write(suffix);\n+      fw.write(\"\\\"$suffix\\\"\");\n       if (!proxy) {\n         fw.write(\" -noProxy\\n\");\n       }\n       fw.write(\"\\n\");\n     } finally {\n       if (fw !\u003d null) {\n         fw.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void generateScript(File localScript) throws IOException {\n    if (verbose) {\n      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    }\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriterWithEncoding fw \u003d null;\n    try {\n      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (AppInfo context : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(context.getAppId());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(context.getUser());\n        fw.write(\"\\\"\\n\\tworkingDir\u003d\\\"\");\n        fw.write(context.getWorkingDir().toString());\n        fw.write(\"\\\"\\n\\tremoteRootLogDir\u003d\\\"\");\n        fw.write(context.getRemoteRootLogDir().toString());\n        fw.write(\"\\\"\\n\\tsuffix\u003d\\\"\");\n        fw.write(context.getSuffix());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(\"\\\"$workingDir\\\"\");\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(\"\\\"$remoteRootLogDir\\\"\");\n      fw.write(\" -suffix \");\n      fw.write(\"\\\"$suffix\\\"\");\n      if (!proxy) {\n        fw.write(\" -noProxy\\n\");\n      }\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11393. Revert HADOOP_PREFIX, go back to HADOOP_HOME (aw)\n",
      "commitDate": "31/03/16 7:51 AM",
      "commitName": "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "25/11/15 5:12 PM",
      "commitNameOld": "6d84cc16b3e0685fef01d0e3526b0f7556ceff51",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 126.57,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   void generateScript(File localScript, Path workingDir,\n         Path remoteRootLogDir, String suffix) throws IOException {\n     if (verbose) {\n       LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n     }\n     String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n     FileWriterWithEncoding fw \u003d null;\n     try {\n       fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n       fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n       int containerCount \u003d 1;\n       for (AppInfo app : eligibleApplications) {\n         fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n         fw.write(Integer.toString(containerCount));\n         fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n         fw.write(app.getAppId());\n         fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n         fw.write(app.getUser());\n         fw.write(\"\\\"\\nel\");\n         containerCount++;\n       }\n       fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n       fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n       fw.write(Long.toString(memory));\n       fw.write(\"m\\\"\\n\");\n       fw.write(\"export HADOOP_CLASSPATH\u003d\");\n       fw.write(classpath);\n-      fw.write(\"\\n\\\"$HADOOP_PREFIX\\\"/bin/hadoop \");\n+      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n       fw.write(HadoopArchiveLogsRunner.class.getName());\n       fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n       fw.write(workingDir.toString());\n       fw.write(\" -remoteRootLogDir \");\n       fw.write(remoteRootLogDir.toString());\n       fw.write(\" -suffix \");\n       fw.write(suffix);\n       if (!proxy) {\n         fw.write(\" -noProxy\\n\");\n       }\n       fw.write(\"\\n\");\n     } finally {\n       if (fw !\u003d null) {\n         fw.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void generateScript(File localScript, Path workingDir,\n        Path remoteRootLogDir, String suffix) throws IOException {\n    if (verbose) {\n      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    }\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriterWithEncoding fw \u003d null;\n    try {\n      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (AppInfo app : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(app.getAppId());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(app.getUser());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(workingDir.toString());\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(remoteRootLogDir.toString());\n      fw.write(\" -suffix \");\n      fw.write(suffix);\n      if (!proxy) {\n        fw.write(\" -noProxy\\n\");\n      }\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "6d84cc16b3e0685fef01d0e3526b0f7556ceff51": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6550. archive-logs tool changes log ownership to the Yarn user when using DefaultContainerExecutor (rkanter)\n",
      "commitDate": "25/11/15 5:12 PM",
      "commitName": "6d84cc16b3e0685fef01d0e3526b0f7556ceff51",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "20/10/15 5:34 PM",
      "commitNameOld": "0c4af0f99811a7138954391df3761aef9ff09155",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 36.03,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,49 @@\n   void generateScript(File localScript, Path workingDir,\n         Path remoteRootLogDir, String suffix) throws IOException {\n     if (verbose) {\n       LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n     }\n     String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n     FileWriterWithEncoding fw \u003d null;\n     try {\n       fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n       fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n       int containerCount \u003d 1;\n       for (AppInfo app : eligibleApplications) {\n         fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n         fw.write(Integer.toString(containerCount));\n         fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n         fw.write(app.getAppId());\n         fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n         fw.write(app.getUser());\n         fw.write(\"\\\"\\nel\");\n         containerCount++;\n       }\n       fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n       fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n       fw.write(Long.toString(memory));\n       fw.write(\"m\\\"\\n\");\n       fw.write(\"export HADOOP_CLASSPATH\u003d\");\n       fw.write(classpath);\n       fw.write(\"\\n\\\"$HADOOP_PREFIX\\\"/bin/hadoop \");\n       fw.write(HadoopArchiveLogsRunner.class.getName());\n       fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n       fw.write(workingDir.toString());\n       fw.write(\" -remoteRootLogDir \");\n       fw.write(remoteRootLogDir.toString());\n       fw.write(\" -suffix \");\n       fw.write(suffix);\n+      if (!proxy) {\n+        fw.write(\" -noProxy\\n\");\n+      }\n       fw.write(\"\\n\");\n     } finally {\n       if (fw !\u003d null) {\n         fw.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void generateScript(File localScript, Path workingDir,\n        Path remoteRootLogDir, String suffix) throws IOException {\n    if (verbose) {\n      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    }\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriterWithEncoding fw \u003d null;\n    try {\n      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (AppInfo app : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(app.getAppId());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(app.getUser());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_PREFIX\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(workingDir.toString());\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(remoteRootLogDir.toString());\n      fw.write(\" -suffix \");\n      fw.write(suffix);\n      if (!proxy) {\n        fw.write(\" -noProxy\\n\");\n      }\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "1bca1bb5175b5976a5a0e45b6e1c4486bdf87a0e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6503. archive-logs tool should use HADOOP_PREFIX instead of HADOOP_HOME (rkanter)\n",
      "commitDate": "06/10/15 4:49 PM",
      "commitName": "1bca1bb5175b5976a5a0e45b6e1c4486bdf87a0e",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "30/09/15 5:33 PM",
      "commitNameOld": "5db371f52f5c6e894a7e6a5d523084f4b316a7ab",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 5.97,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   void generateScript(File localScript, Path workingDir,\n         Path remoteRootLogDir, String suffix) throws IOException {\n     if (verbose) {\n       LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n     }\n     String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n     FileWriterWithEncoding fw \u003d null;\n     try {\n       fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n       fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n       int containerCount \u003d 1;\n       for (AppInfo app : eligibleApplications) {\n         fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n         fw.write(Integer.toString(containerCount));\n         fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n         fw.write(app.getAppId());\n         fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n         fw.write(app.getUser());\n         fw.write(\"\\\"\\nel\");\n         containerCount++;\n       }\n       fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n       fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n       fw.write(Long.toString(memory));\n       fw.write(\"m\\\"\\n\");\n       fw.write(\"export HADOOP_CLASSPATH\u003d\");\n       fw.write(classpath);\n-      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n+      fw.write(\"\\n\\\"$HADOOP_PREFIX\\\"/bin/hadoop \");\n       fw.write(HadoopArchiveLogsRunner.class.getName());\n       fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n       fw.write(workingDir.toString());\n       fw.write(\" -remoteRootLogDir \");\n       fw.write(remoteRootLogDir.toString());\n       fw.write(\" -suffix \");\n       fw.write(suffix);\n       fw.write(\"\\n\");\n     } finally {\n       if (fw !\u003d null) {\n         fw.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void generateScript(File localScript, Path workingDir,\n        Path remoteRootLogDir, String suffix) throws IOException {\n    if (verbose) {\n      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    }\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriterWithEncoding fw \u003d null;\n    try {\n      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (AppInfo app : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(app.getAppId());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(app.getUser());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_PREFIX\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(workingDir.toString());\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(remoteRootLogDir.toString());\n      fw.write(\" -suffix \");\n      fw.write(suffix);\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6480. archive-logs tool may miss applications (rkanter)\n",
      "commitDate": "25/09/15 3:02 PM",
      "commitName": "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/09/15 5:45 PM",
      "commitNameOld": "119cc75e7ebd723790f6326498383304aba384a2",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.89,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,46 @@\n   void generateScript(File localScript, Path workingDir,\n         Path remoteRootLogDir, String suffix) throws IOException {\n-    LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n+    if (verbose) {\n+      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n+    }\n     String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n         .getCodeSource().getLocation().getPath();\n     String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n-    FileWriter fw \u003d null;\n+    FileWriterWithEncoding fw \u003d null;\n     try {\n-      fw \u003d new FileWriter(localScript);\n+      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n       fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n       int containerCount \u003d 1;\n-      for (ApplicationReport report : eligibleApplications) {\n+      for (AppInfo app : eligibleApplications) {\n         fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n         fw.write(Integer.toString(containerCount));\n         fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n-        fw.write(report.getApplicationId().toString());\n+        fw.write(app.getAppId());\n         fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n-        fw.write(report.getUser());\n+        fw.write(app.getUser());\n         fw.write(\"\\\"\\nel\");\n         containerCount++;\n       }\n       fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n       fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n       fw.write(Long.toString(memory));\n       fw.write(\"m\\\"\\n\");\n       fw.write(\"export HADOOP_CLASSPATH\u003d\");\n       fw.write(classpath);\n       fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n       fw.write(HadoopArchiveLogsRunner.class.getName());\n       fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n       fw.write(workingDir.toString());\n       fw.write(\" -remoteRootLogDir \");\n       fw.write(remoteRootLogDir.toString());\n       fw.write(\" -suffix \");\n       fw.write(suffix);\n       fw.write(\"\\n\");\n     } finally {\n       if (fw !\u003d null) {\n         fw.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void generateScript(File localScript, Path workingDir,\n        Path remoteRootLogDir, String suffix) throws IOException {\n    if (verbose) {\n      LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    }\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriterWithEncoding fw \u003d null;\n    try {\n      fw \u003d new FileWriterWithEncoding(localScript, \"UTF-8\");\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (AppInfo app : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(app.getAppId());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(app.getUser());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(workingDir.toString());\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(remoteRootLogDir.toString());\n      fw.write(\" -suffix \");\n      fw.write(suffix);\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "119cc75e7ebd723790f6326498383304aba384a2": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6415. Create a tool to combine aggregated logs into HAR files. (Robert Kanter via kasha)\n",
      "commitDate": "09/09/15 5:45 PM",
      "commitName": "119cc75e7ebd723790f6326498383304aba384a2",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,44 @@\n+  void generateScript(File localScript, Path workingDir,\n+        Path remoteRootLogDir, String suffix) throws IOException {\n+    LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n+    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n+        .getCodeSource().getLocation().getPath();\n+    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n+        .getCodeSource().getLocation().getPath();\n+    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n+    FileWriter fw \u003d null;\n+    try {\n+      fw \u003d new FileWriter(localScript);\n+      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n+      int containerCount \u003d 1;\n+      for (ApplicationReport report : eligibleApplications) {\n+        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n+        fw.write(Integer.toString(containerCount));\n+        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n+        fw.write(report.getApplicationId().toString());\n+        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n+        fw.write(report.getUser());\n+        fw.write(\"\\\"\\nel\");\n+        containerCount++;\n+      }\n+      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n+      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n+      fw.write(Long.toString(memory));\n+      fw.write(\"m\\\"\\n\");\n+      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n+      fw.write(classpath);\n+      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n+      fw.write(HadoopArchiveLogsRunner.class.getName());\n+      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n+      fw.write(workingDir.toString());\n+      fw.write(\" -remoteRootLogDir \");\n+      fw.write(remoteRootLogDir.toString());\n+      fw.write(\" -suffix \");\n+      fw.write(suffix);\n+      fw.write(\"\\n\");\n+    } finally {\n+      if (fw !\u003d null) {\n+        fw.close();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void generateScript(File localScript, Path workingDir,\n        Path remoteRootLogDir, String suffix) throws IOException {\n    LOG.info(\"Generating script at: \" + localScript.getAbsolutePath());\n    String halrJarPath \u003d HadoopArchiveLogsRunner.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String harJarPath \u003d HadoopArchives.class.getProtectionDomain()\n        .getCodeSource().getLocation().getPath();\n    String classpath \u003d halrJarPath + File.pathSeparator + harJarPath;\n    FileWriter fw \u003d null;\n    try {\n      fw \u003d new FileWriter(localScript);\n      fw.write(\"#!/bin/bash\\nset -e\\nset -x\\n\");\n      int containerCount \u003d 1;\n      for (ApplicationReport report : eligibleApplications) {\n        fw.write(\"if [ \\\"$YARN_SHELL_ID\\\" \u003d\u003d \\\"\");\n        fw.write(Integer.toString(containerCount));\n        fw.write(\"\\\" ]; then\\n\\tappId\u003d\\\"\");\n        fw.write(report.getApplicationId().toString());\n        fw.write(\"\\\"\\n\\tuser\u003d\\\"\");\n        fw.write(report.getUser());\n        fw.write(\"\\\"\\nel\");\n        containerCount++;\n      }\n      fw.write(\"se\\n\\techo \\\"Unknown Mapping!\\\"\\n\\texit 1\\nfi\\n\");\n      fw.write(\"export HADOOP_CLIENT_OPTS\u003d\\\"-Xmx\");\n      fw.write(Long.toString(memory));\n      fw.write(\"m\\\"\\n\");\n      fw.write(\"export HADOOP_CLASSPATH\u003d\");\n      fw.write(classpath);\n      fw.write(\"\\n\\\"$HADOOP_HOME\\\"/bin/hadoop \");\n      fw.write(HadoopArchiveLogsRunner.class.getName());\n      fw.write(\" -appId \\\"$appId\\\" -user \\\"$user\\\" -workingDir \");\n      fw.write(workingDir.toString());\n      fw.write(\" -remoteRootLogDir \");\n      fw.write(remoteRootLogDir.toString());\n      fw.write(\" -suffix \");\n      fw.write(suffix);\n      fw.write(\"\\n\");\n    } finally {\n      if (fw !\u003d null) {\n        fw.close();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java"
    }
  }
}