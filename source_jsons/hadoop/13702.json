{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyDefault.java",
  "functionName": "useDelHint",
  "functionId": "useDelHint___delHint-DatanodeStorageInfo__added-DatanodeStorageInfo__moreThanOne-List__DatanodeStorageInfo____exactlyOne-Collection__DatanodeStorageInfo____excessTypes-List__StorageType__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
  "functionStartLine": 1221,
  "functionEndLine": 1233,
  "numCommitsSeen": 456,
  "timeTaken": 9028,
  "changeHistory": [
    "ec414600ede8e305c584818565b50e055ea5d2b5",
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
    "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb"
  ],
  "changeHistoryShort": {
    "ec414600ede8e305c584818565b50e055ea5d2b5": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": "Ymovefromfile",
    "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb": "Ybodychange"
  },
  "changeHistoryDetails": {
    "ec414600ede8e305c584818565b50e055ea5d2b5": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)\n",
      "commitDate": "04/11/15 10:22 AM",
      "commitName": "ec414600ede8e305c584818565b50e055ea5d2b5",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)\n",
          "commitDate": "04/11/15 10:22 AM",
          "commitName": "ec414600ede8e305c584818565b50e055ea5d2b5",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "02/11/15 7:36 PM",
          "commitNameOld": "d565480da2f646b40c3180e1ccb2935c9863dfef",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,13 @@\n-  static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n-      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n+  boolean useDelHint(DatanodeStorageInfo delHint,\n+      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThanOne,\n+      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n       List\u003cStorageType\u003e excessTypes) {\n-    if (!isFirst) {\n-      return false; // only consider delHint for the first case\n-    } else if (delHint \u003d\u003d null) {\n+    if (delHint \u003d\u003d null) {\n       return false; // no delHint\n     } else if (!excessTypes.contains(delHint.getStorageType())) {\n       return false; // delHint storage type is not an excess type\n     } else {\n       // check if removing delHint reduces the number of racks\n-      if (moreThan1Racks.contains(delHint)) {\n-        return true; // delHint and some other nodes are under the same rack\n-      } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n-        return true; // the added node adds a new rack\n-      }\n-      return false; // removing delHint reduces the number of racks;\n+      return notReduceNumOfGroups(moreThanOne, delHint, added);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean useDelHint(DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n      List\u003cStorageType\u003e excessTypes) {\n    if (delHint \u003d\u003d null) {\n      return false; // no delHint\n    } else if (!excessTypes.contains(delHint.getStorageType())) {\n      return false; // delHint storage type is not an excess type\n    } else {\n      // check if removing delHint reduces the number of racks\n      return notReduceNumOfGroups(moreThanOne, delHint, added);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
          "extendedDetails": {
            "oldValue": "[isFirst-boolean, delHint-DatanodeStorageInfo, added-DatanodeStorageInfo, moreThan1Racks-List\u003cDatanodeStorageInfo\u003e, excessTypes-List\u003cStorageType\u003e]",
            "newValue": "[delHint-DatanodeStorageInfo, added-DatanodeStorageInfo, moreThanOne-List\u003cDatanodeStorageInfo\u003e, exactlyOne-Collection\u003cDatanodeStorageInfo\u003e, excessTypes-List\u003cStorageType\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)\n",
          "commitDate": "04/11/15 10:22 AM",
          "commitName": "ec414600ede8e305c584818565b50e055ea5d2b5",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "02/11/15 7:36 PM",
          "commitNameOld": "d565480da2f646b40c3180e1ccb2935c9863dfef",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,13 @@\n-  static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n-      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n+  boolean useDelHint(DatanodeStorageInfo delHint,\n+      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThanOne,\n+      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n       List\u003cStorageType\u003e excessTypes) {\n-    if (!isFirst) {\n-      return false; // only consider delHint for the first case\n-    } else if (delHint \u003d\u003d null) {\n+    if (delHint \u003d\u003d null) {\n       return false; // no delHint\n     } else if (!excessTypes.contains(delHint.getStorageType())) {\n       return false; // delHint storage type is not an excess type\n     } else {\n       // check if removing delHint reduces the number of racks\n-      if (moreThan1Racks.contains(delHint)) {\n-        return true; // delHint and some other nodes are under the same rack\n-      } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n-        return true; // the added node adds a new rack\n-      }\n-      return false; // removing delHint reduces the number of racks;\n+      return notReduceNumOfGroups(moreThanOne, delHint, added);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean useDelHint(DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n      List\u003cStorageType\u003e excessTypes) {\n    if (delHint \u003d\u003d null) {\n      return false; // no delHint\n    } else if (!excessTypes.contains(delHint.getStorageType())) {\n      return false; // delHint storage type is not an excess type\n    } else {\n      // check if removing delHint reduces the number of racks\n      return notReduceNumOfGroups(moreThanOne, delHint, added);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)\n",
          "commitDate": "04/11/15 10:22 AM",
          "commitName": "ec414600ede8e305c584818565b50e055ea5d2b5",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "02/11/15 7:36 PM",
          "commitNameOld": "d565480da2f646b40c3180e1ccb2935c9863dfef",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,13 @@\n-  static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n-      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n+  boolean useDelHint(DatanodeStorageInfo delHint,\n+      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThanOne,\n+      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n       List\u003cStorageType\u003e excessTypes) {\n-    if (!isFirst) {\n-      return false; // only consider delHint for the first case\n-    } else if (delHint \u003d\u003d null) {\n+    if (delHint \u003d\u003d null) {\n       return false; // no delHint\n     } else if (!excessTypes.contains(delHint.getStorageType())) {\n       return false; // delHint storage type is not an excess type\n     } else {\n       // check if removing delHint reduces the number of racks\n-      if (moreThan1Racks.contains(delHint)) {\n-        return true; // delHint and some other nodes are under the same rack\n-      } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n-        return true; // the added node adds a new rack\n-      }\n-      return false; // removing delHint reduces the number of racks;\n+      return notReduceNumOfGroups(moreThanOne, delHint, added);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean useDelHint(DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n      List\u003cStorageType\u003e excessTypes) {\n    if (delHint \u003d\u003d null) {\n      return false; // no delHint\n    } else if (!excessTypes.contains(delHint.getStorageType())) {\n      return false; // delHint storage type is not an excess type\n    } else {\n      // check if removing delHint reduces the number of racks\n      return notReduceNumOfGroups(moreThanOne, delHint, added);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
          "extendedDetails": {}
        }
      ]
    },
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-8647. Abstract BlockManager\u0027s rack policy into BlockPlacementPolicy. (Brahma Reddy Battula via mingma)\n",
      "commitDate": "21/10/15 8:06 AM",
      "commitName": "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "21/10/15 8:00 AM",
      "commitNameOld": "b37c41fd6ec704babf37325530e7cb9babf1ac0c",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n       DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n       List\u003cStorageType\u003e excessTypes) {\n     if (!isFirst) {\n       return false; // only consider delHint for the first case\n     } else if (delHint \u003d\u003d null) {\n       return false; // no delHint\n     } else if (!excessTypes.contains(delHint.getStorageType())) {\n       return false; // delHint storage type is not an excess type\n     } else {\n       // check if removing delHint reduces the number of racks\n       if (moreThan1Racks.contains(delHint)) {\n-        return true; // delHint and some other nodes are under the same rack \n+        return true; // delHint and some other nodes are under the same rack\n       } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n         return true; // the added node adds a new rack\n       }\n       return false; // removing delHint reduces the number of racks;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n      List\u003cStorageType\u003e excessTypes) {\n    if (!isFirst) {\n      return false; // only consider delHint for the first case\n    } else if (delHint \u003d\u003d null) {\n      return false; // no delHint\n    } else if (!excessTypes.contains(delHint.getStorageType())) {\n      return false; // delHint storage type is not an excess type\n    } else {\n      // check if removing delHint reduces the number of racks\n      if (moreThan1Racks.contains(delHint)) {\n        return true; // delHint and some other nodes are under the same rack\n      } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n        return true; // the added node adds a new rack\n      }\n      return false; // removing delHint reduces the number of racks;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
        "oldMethodName": "useDelHint",
        "newMethodName": "useDelHint"
      }
    },
    "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7034. Archival Storage: Fix TestBlockPlacement and TestStorageMover. Contributed by Jing Zhao.\n",
      "commitDate": "11/09/14 1:00 PM",
      "commitName": "0d85f7e59146cc3e9a040c2203995f3efd8ed4eb",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "09/09/14 10:47 PM",
      "commitNameOld": "db41a1b7b944185e5e60a7fdf8cf43172b006a73",
      "commitAuthorOld": "",
      "daysBetweenCommits": 1.59,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n       DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n       List\u003cStorageType\u003e excessTypes) {\n     if (!isFirst) {\n       return false; // only consider delHint for the first case\n     } else if (delHint \u003d\u003d null) {\n       return false; // no delHint\n-    } else if (!excessTypes.remove(delHint.getStorageType())) {\n+    } else if (!excessTypes.contains(delHint.getStorageType())) {\n       return false; // delHint storage type is not an excess type\n     } else {\n       // check if removing delHint reduces the number of racks\n       if (moreThan1Racks.contains(delHint)) {\n         return true; // delHint and some other nodes are under the same rack \n       } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n         return true; // the added node adds a new rack\n       }\n       return false; // removing delHint reduces the number of racks;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean useDelHint(boolean isFirst, DatanodeStorageInfo delHint,\n      DatanodeStorageInfo added, List\u003cDatanodeStorageInfo\u003e moreThan1Racks,\n      List\u003cStorageType\u003e excessTypes) {\n    if (!isFirst) {\n      return false; // only consider delHint for the first case\n    } else if (delHint \u003d\u003d null) {\n      return false; // no delHint\n    } else if (!excessTypes.contains(delHint.getStorageType())) {\n      return false; // delHint storage type is not an excess type\n    } else {\n      // check if removing delHint reduces the number of racks\n      if (moreThan1Racks.contains(delHint)) {\n        return true; // delHint and some other nodes are under the same rack \n      } else if (added !\u003d null \u0026\u0026 !moreThan1Racks.contains(added)) {\n        return true; // the added node adds a new rack\n      }\n      return false; // removing delHint reduces the number of racks;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    }
  }
}