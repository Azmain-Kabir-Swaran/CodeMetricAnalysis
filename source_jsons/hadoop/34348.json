{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLocalizer.java",
  "functionName": "localizeFiles",
  "functionId": "localizeFiles___nodemanager-LocalizationProtocol__cs-CompletionService__Path____ugi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
  "functionStartLine": 304,
  "functionEndLine": 347,
  "numCommitsSeen": 47,
  "timeTaken": 8815,
  "changeHistory": [
    "c380a22031a62e2d2fe533079e3780f06b069943",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a",
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd90b822278bf98a166e34e31aa2503ee4e48083",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "c380a22031a62e2d2fe533079e3780f06b069943": "Ymultichange(Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a": "Ybodychange",
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01": "Ymodifierchange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd90b822278bf98a166e34e31aa2503ee4e48083": "Ymultichange(Yparameterchange,Ybodychange)",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Yexceptionschange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c380a22031a62e2d2fe533079e3780f06b069943": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
      "commitDate": "25/05/16 6:31 AM",
      "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
          "commitDate": "25/05/16 6:31 AM",
          "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "10/02/16 10:36 PM",
          "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 104.29,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,44 @@\n   protected void localizeFiles(LocalizationProtocol nodemanager,\n       CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n-      throws IOException {\n+      throws IOException, YarnException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n           for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n             if (!pendingResources.containsKey(newRsrc.getResource())) {\n               pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                 new Path(newRsrc.getDestinationDirectory().getFile()),\n                 newRsrc.getResource(), ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n-          // ignore response\n+          // ignore response while dying.\n           try {\n             nodemanager.heartbeat(status);\n-          } catch (YarnException e) { }\n+          } catch (YarnException e) {\n+            // Cannot do anything about this during death stage, let\u0027s just log\n+            // it.\n+            e.printStackTrace(System.out);\n+            LOG.error(\"Heartbeat failed while dying: \", e);\n+          }\n           return;\n         }\n         cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnException e) {\n         // TODO cleanup\n-        return;\n+        throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException, YarnException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n          for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n            if (!pendingResources.containsKey(newRsrc.getResource())) {\n              pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                new Path(newRsrc.getDestinationDirectory().getFile()),\n                newRsrc.getResource(), ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response while dying.\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnException e) {\n            // Cannot do anything about this during death stage, let\u0027s just log\n            // it.\n            e.printStackTrace(System.out);\n            LOG.error(\"Heartbeat failed while dying: \", e);\n          }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnException e) {\n        // TODO cleanup\n        throw e;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
          "commitDate": "25/05/16 6:31 AM",
          "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "10/02/16 10:36 PM",
          "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 104.29,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,44 @@\n   protected void localizeFiles(LocalizationProtocol nodemanager,\n       CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n-      throws IOException {\n+      throws IOException, YarnException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n           for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n             if (!pendingResources.containsKey(newRsrc.getResource())) {\n               pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                 new Path(newRsrc.getDestinationDirectory().getFile()),\n                 newRsrc.getResource(), ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n-          // ignore response\n+          // ignore response while dying.\n           try {\n             nodemanager.heartbeat(status);\n-          } catch (YarnException e) { }\n+          } catch (YarnException e) {\n+            // Cannot do anything about this during death stage, let\u0027s just log\n+            // it.\n+            e.printStackTrace(System.out);\n+            LOG.error(\"Heartbeat failed while dying: \", e);\n+          }\n           return;\n         }\n         cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnException e) {\n         // TODO cleanup\n-        return;\n+        throw e;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException, YarnException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n          for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n            if (!pendingResources.containsKey(newRsrc.getResource())) {\n              pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                new Path(newRsrc.getDestinationDirectory().getFile()),\n                newRsrc.getResource(), ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response while dying.\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnException e) {\n            // Cannot do anything about this during death stage, let\u0027s just log\n            // it.\n            e.printStackTrace(System.out);\n            LOG.error(\"Heartbeat failed while dying: \", e);\n          }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnException e) {\n        // TODO cleanup\n        throw e;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/05/13 2:49 PM",
      "commitNameOld": "2638bc67a48f923404d57ed2026c4997df6bd06e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 24.26,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   protected void localizeFiles(LocalizationProtocol nodemanager,\n       CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n       throws IOException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n           for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n             if (!pendingResources.containsKey(newRsrc.getResource())) {\n               pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                 new Path(newRsrc.getDestinationDirectory().getFile()),\n                 newRsrc.getResource(), ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n           // ignore response\n           try {\n             nodemanager.heartbeat(status);\n-          } catch (YarnRemoteException e) { }\n+          } catch (YarnException e) { }\n           return;\n         }\n         cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n-      } catch (YarnRemoteException e) {\n+      } catch (YarnException e) {\n         // TODO cleanup\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n          for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n            if (!pendingResources.containsKey(newRsrc.getResource())) {\n              pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                new Path(newRsrc.getDestinationDirectory().getFile()),\n                newRsrc.getResource(), ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnException e) { }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-99. Modify private distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465853 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/13 6:33 PM",
      "commitName": "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/09/12 8:22 AM",
      "commitNameOld": "050fd3a11744cde3d54c1fff23d8fdeb3803bf92",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 194.42,
      "commitsBetweenForRepo": 929,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,39 @@\n   protected void localizeFiles(LocalizationProtocol nodemanager,\n       CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n       throws IOException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n-          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n-          for (LocalResource r : newResources) {\n-            if (!pendingResources.containsKey(r)) {\n-              final LocalDirAllocator lda;\n-              switch (r.getVisibility()) {\n-              default:\n-                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n-                        + \", Using userDirs\");\n-                //Falling back to userDirs for unknown visibility.\n-              case PUBLIC:\n-              case PRIVATE:\n-                lda \u003d userDirs;\n-                break;\n-              case APPLICATION:\n-                lda \u003d appDirs;\n-                break;\n-              }\n-              // TODO: Synchronization??\n-              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n+          List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n+          for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n+            if (!pendingResources.containsKey(newRsrc.getResource())) {\n+              pendingResources.put(newRsrc.getResource(), cs.submit(download(\n+                new Path(newRsrc.getDestinationDirectory().getFile()),\n+                newRsrc.getResource(), ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n           // ignore response\n           try {\n             nodemanager.heartbeat(status);\n           } catch (YarnRemoteException e) { }\n           return;\n         }\n         cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnRemoteException e) {\n         // TODO cleanup\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cResourceLocalizationSpec\u003e newRsrcs \u003d response.getResourceSpecs();\n          for (ResourceLocalizationSpec newRsrc : newRsrcs) {\n            if (!pendingResources.containsKey(newRsrc.getResource())) {\n              pendingResources.put(newRsrc.getResource(), cs.submit(download(\n                new Path(newRsrc.getDestinationDirectory().getFile()),\n                newRsrc.getResource(), ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-4323. NM leaks filesystems (Jason Lowe via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/08/12 11:32 AM",
      "commitName": "df5e2b83526634ac7c1c1131bf1aad73ac353d01",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 12.55,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n-  private void localizeFiles(LocalizationProtocol nodemanager,\n+  protected void localizeFiles(LocalizationProtocol nodemanager,\n       CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n       throws IOException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n           for (LocalResource r : newResources) {\n             if (!pendingResources.containsKey(r)) {\n               final LocalDirAllocator lda;\n               switch (r.getVisibility()) {\n               default:\n                 LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                         + \", Using userDirs\");\n                 //Falling back to userDirs for unknown visibility.\n               case PUBLIC:\n               case PRIVATE:\n                 lda \u003d userDirs;\n                 break;\n               case APPLICATION:\n                 lda \u003d appDirs;\n                 break;\n               }\n               // TODO: Synchronization??\n               pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n           // ignore response\n           try {\n             nodemanager.heartbeat(status);\n           } catch (YarnRemoteException e) { }\n           return;\n         }\n         cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnRemoteException e) {\n         // TODO cleanup\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "cd90b822278bf98a166e34e31aa2503ee4e48083": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3399. Modifying ContainerLocalizer to send a heartbeat to NM immediately after downloading a resource instead of always waiting for a second. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1224970 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/12/11 10:26 AM",
      "commitName": "cd90b822278bf98a166e34e31aa2503ee4e48083",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3399. Modifying ContainerLocalizer to send a heartbeat to NM immediately after downloading a resource instead of always waiting for a second. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1224970 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/12/11 10:26 AM",
          "commitName": "cd90b822278bf98a166e34e31aa2503ee4e48083",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/11/11 3:17 PM",
          "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 27.8,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n   private void localizeFiles(LocalizationProtocol nodemanager,\n-      ExecutorService exec, UserGroupInformation ugi) throws IOException {\n+      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n+      throws IOException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n           for (LocalResource r : newResources) {\n             if (!pendingResources.containsKey(r)) {\n               final LocalDirAllocator lda;\n               switch (r.getVisibility()) {\n               default:\n                 LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                         + \", Using userDirs\");\n                 //Falling back to userDirs for unknown visibility.\n               case PUBLIC:\n               case PRIVATE:\n                 lda \u003d userDirs;\n                 break;\n               case APPLICATION:\n                 lda \u003d appDirs;\n                 break;\n               }\n               // TODO: Synchronization??\n-              pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n+              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n           // ignore response\n           try {\n             nodemanager.heartbeat(status);\n           } catch (YarnRemoteException e) { }\n           return;\n         }\n-        // TODO HB immediately when rsrc localized\n-        sleep(1);\n+        cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnRemoteException e) {\n         // TODO cleanup\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {
            "oldValue": "[nodemanager-LocalizationProtocol, exec-ExecutorService, ugi-UserGroupInformation]",
            "newValue": "[nodemanager-LocalizationProtocol, cs-CompletionService\u003cPath\u003e, ugi-UserGroupInformation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3399. Modifying ContainerLocalizer to send a heartbeat to NM immediately after downloading a resource instead of always waiting for a second. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1224970 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/12/11 10:26 AM",
          "commitName": "cd90b822278bf98a166e34e31aa2503ee4e48083",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/11/11 3:17 PM",
          "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 27.8,
          "commitsBetweenForRepo": 150,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n   private void localizeFiles(LocalizationProtocol nodemanager,\n-      ExecutorService exec, UserGroupInformation ugi) throws IOException {\n+      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n+      throws IOException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n           for (LocalResource r : newResources) {\n             if (!pendingResources.containsKey(r)) {\n               final LocalDirAllocator lda;\n               switch (r.getVisibility()) {\n               default:\n                 LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                         + \", Using userDirs\");\n                 //Falling back to userDirs for unknown visibility.\n               case PUBLIC:\n               case PRIVATE:\n                 lda \u003d userDirs;\n                 break;\n               case APPLICATION:\n                 lda \u003d appDirs;\n                 break;\n               }\n               // TODO: Synchronization??\n-              pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n+              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n           // ignore response\n           try {\n             nodemanager.heartbeat(status);\n           } catch (YarnRemoteException e) { }\n           return;\n         }\n-        // TODO HB immediately when rsrc localized\n-        sleep(1);\n+        cs.poll(1000, TimeUnit.MILLISECONDS);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnRemoteException e) {\n         // TODO cleanup\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void localizeFiles(LocalizationProtocol nodemanager,\n      CompletionService\u003cPath\u003e cs, UserGroupInformation ugi)\n      throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, cs.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        cs.poll(1000, TimeUnit.MILLISECONDS);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {}
        }
      ]
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Yexceptionschange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "31/10/11 8:16 PM",
      "commitNameOld": "cfb6a9883d2bf02c99f258e9f19ffcd83805d077",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 28.83,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n-  private void localizeFiles(LocalizationProtocol nodemanager, ExecutorService exec,\n-      UserGroupInformation ugi) {\n+  private void localizeFiles(LocalizationProtocol nodemanager,\n+      ExecutorService exec, UserGroupInformation ugi) throws IOException {\n     while (true) {\n       try {\n         LocalizerStatus status \u003d createStatus();\n         LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n         switch (response.getLocalizerAction()) {\n         case LIVE:\n           List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n           for (LocalResource r : newResources) {\n             if (!pendingResources.containsKey(r)) {\n               final LocalDirAllocator lda;\n               switch (r.getVisibility()) {\n               default:\n                 LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                         + \", Using userDirs\");\n                 //Falling back to userDirs for unknown visibility.\n               case PUBLIC:\n               case PRIVATE:\n                 lda \u003d userDirs;\n                 break;\n               case APPLICATION:\n                 lda \u003d appDirs;\n                 break;\n               }\n               // TODO: Synchronization??\n               pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n             }\n           }\n           break;\n         case DIE:\n           // killall running localizations\n           for (Future\u003cPath\u003e pending : pendingResources.values()) {\n             pending.cancel(true);\n           }\n           status \u003d createStatus();\n           // ignore response\n           try {\n             nodemanager.heartbeat(status);\n           } catch (YarnRemoteException e) { }\n           return;\n         }\n         // TODO HB immediately when rsrc localized\n         sleep(1);\n       } catch (InterruptedException e) {\n         return;\n       } catch (YarnRemoteException e) {\n         // TODO cleanup\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void localizeFiles(LocalizationProtocol nodemanager,\n      ExecutorService exec, UserGroupInformation ugi) throws IOException {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        // TODO HB immediately when rsrc localized\n        sleep(1);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void localizeFiles(LocalizationProtocol nodemanager, ExecutorService exec,\n      UserGroupInformation ugi) {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        // TODO HB immediately when rsrc localized\n        sleep(1);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,52 @@\n+  private void localizeFiles(LocalizationProtocol nodemanager, ExecutorService exec,\n+      UserGroupInformation ugi) {\n+    while (true) {\n+      try {\n+        LocalizerStatus status \u003d createStatus();\n+        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n+        switch (response.getLocalizerAction()) {\n+        case LIVE:\n+          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n+          for (LocalResource r : newResources) {\n+            if (!pendingResources.containsKey(r)) {\n+              final LocalDirAllocator lda;\n+              switch (r.getVisibility()) {\n+              default:\n+                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n+                        + \", Using userDirs\");\n+                //Falling back to userDirs for unknown visibility.\n+              case PUBLIC:\n+              case PRIVATE:\n+                lda \u003d userDirs;\n+                break;\n+              case APPLICATION:\n+                lda \u003d appDirs;\n+                break;\n+              }\n+              // TODO: Synchronization??\n+              pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n+            }\n+          }\n+          break;\n+        case DIE:\n+          // killall running localizations\n+          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n+            pending.cancel(true);\n+          }\n+          status \u003d createStatus();\n+          // ignore response\n+          try {\n+            nodemanager.heartbeat(status);\n+          } catch (YarnRemoteException e) { }\n+          return;\n+        }\n+        // TODO HB immediately when rsrc localized\n+        sleep(1);\n+      } catch (InterruptedException e) {\n+        return;\n+      } catch (YarnRemoteException e) {\n+        // TODO cleanup\n+        return;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void localizeFiles(LocalizationProtocol nodemanager, ExecutorService exec,\n      UserGroupInformation ugi) {\n    while (true) {\n      try {\n        LocalizerStatus status \u003d createStatus();\n        LocalizerHeartbeatResponse response \u003d nodemanager.heartbeat(status);\n        switch (response.getLocalizerAction()) {\n        case LIVE:\n          List\u003cLocalResource\u003e newResources \u003d response.getAllResources();\n          for (LocalResource r : newResources) {\n            if (!pendingResources.containsKey(r)) {\n              final LocalDirAllocator lda;\n              switch (r.getVisibility()) {\n              default:\n                LOG.warn(\"Unknown visibility: \" + r.getVisibility()\n                        + \", Using userDirs\");\n                //Falling back to userDirs for unknown visibility.\n              case PUBLIC:\n              case PRIVATE:\n                lda \u003d userDirs;\n                break;\n              case APPLICATION:\n                lda \u003d appDirs;\n                break;\n              }\n              // TODO: Synchronization??\n              pendingResources.put(r, exec.submit(download(lda, r, ugi)));\n            }\n          }\n          break;\n        case DIE:\n          // killall running localizations\n          for (Future\u003cPath\u003e pending : pendingResources.values()) {\n            pending.cancel(true);\n          }\n          status \u003d createStatus();\n          // ignore response\n          try {\n            nodemanager.heartbeat(status);\n          } catch (YarnRemoteException e) { }\n          return;\n        }\n        // TODO HB immediately when rsrc localized\n        sleep(1);\n      } catch (InterruptedException e) {\n        return;\n      } catch (YarnRemoteException e) {\n        // TODO cleanup\n        return;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
    }
  }
}