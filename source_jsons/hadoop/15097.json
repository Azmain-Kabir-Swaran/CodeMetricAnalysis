{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageReconstructor.java",
  "functionName": "processFileXml",
  "functionId": "processFileXml___node-Node__inodeBld-INodeSection.INode.Builder",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
  "functionStartLine": 642,
  "functionEndLine": 648,
  "numCommitsSeen": 15,
  "timeTaken": 2258,
  "changeHistory": [
    "05391c1845639d4f01da8e5df966e2dc2682f2ca",
    "a2a5d7b5bca715835d92816e7b267b59f7270708",
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742"
  ],
  "changeHistoryShort": {
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": "Ybodychange",
    "a2a5d7b5bca715835d92816e7b267b59f7270708": "Ybodychange",
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10506. OIV\u0027s ReverseXML processor cannot reconstruct some snapshot details. Contributed by Akira Ajisaka.\n",
      "commitDate": "25/02/17 2:38 PM",
      "commitName": "05391c1845639d4f01da8e5df966e2dc2682f2ca",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 38.05,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,7 @@\n   private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n       throws IOException {\n     inodeBld.setType(INodeSection.INode.Type.FILE);\n-    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n-    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n-    if (ival !\u003d null) {\n-      bld.setReplication(ival);\n-    }\n-    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n-    if (lval !\u003d null) {\n-      bld.setModificationTime(lval);\n-    }\n-    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n-    if (lval !\u003d null) {\n-      bld.setAccessTime(lval);\n-    }\n-    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n-    if (lval !\u003d null) {\n-      bld.setPreferredBlockSize(lval);\n-    }\n-    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n-    if (perm !\u003d null) {\n-      bld.setPermission(permissionXmlToU64(perm));\n-    }\n-    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n-    if (blocks !\u003d null) {\n-      while (true) {\n-        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n-        if (block \u003d\u003d null) {\n-          break;\n-        }\n-        HdfsProtos.BlockProto.Builder blockBld \u003d\n-            HdfsProtos.BlockProto.newBuilder();\n-        Long id \u003d block.removeChildLong(SECTION_ID);\n-        if (id \u003d\u003d null) {\n-          throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n-        }\n-        blockBld.setBlockId(id);\n-        Long genstamp \u003d block.removeChildLong(INODE_SECTION_GEMSTAMP);\n-        if (genstamp \u003d\u003d null) {\n-          throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n-        }\n-        blockBld.setGenStamp(genstamp);\n-        Long numBytes \u003d block.removeChildLong(INODE_SECTION_NUM_BYTES);\n-        if (numBytes \u003d\u003d null) {\n-          throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n-        }\n-        blockBld.setNumBytes(numBytes);\n-        bld.addBlocks(blockBld);\n-      }\n-    }\n-    Node fileUnderConstruction \u003d\n-        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n-    if (fileUnderConstruction !\u003d null) {\n-      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n-          INodeSection.FileUnderConstructionFeature.newBuilder();\n-      String clientName \u003d\n-          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n-      if (clientName \u003d\u003d null) {\n-        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n-            \"\u003cclientName\u003e\");\n-      }\n-      fb.setClientName(clientName);\n-      String clientMachine \u003d\n-          fileUnderConstruction\n-                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n-      if (clientMachine \u003d\u003d null) {\n-        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n-            \"\u003cclientMachine\u003e\");\n-      }\n-      fb.setClientMachine(clientMachine);\n-      bld.setFileUC(fb);\n-    }\n-    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n-    if (acls !\u003d null) {\n-      bld.setAcl(aclXmlToProto(acls));\n-    }\n-    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n-    if (xattrs !\u003d null) {\n-      bld.setXAttrs(xattrsXmlToProto(xattrs));\n-    }\n-    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n-    if (ival !\u003d null) {\n-      bld.setStoragePolicyID(ival);\n-    }\n-    String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n-    if(blockType !\u003d null) {\n-      switch (blockType) {\n-      case \"CONTIGUOUS\":\n-        bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n-        break;\n-      case \"STRIPED\":\n-        bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n-        break;\n-      default:\n-        throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n-            blockType);\n-      }\n-    }\n+    INodeSection.INodeFile.Builder bld \u003d createINodeFileBuilder(node);\n     inodeBld.setFile(bld);\n     // Will check remaining keys and serialize in processINodeXml\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n      throws IOException {\n    inodeBld.setType(INodeSection.INode.Type.FILE);\n    INodeSection.INodeFile.Builder bld \u003d createINodeFileBuilder(node);\n    inodeBld.setFile(bld);\n    // Will check remaining keys and serialize in processINodeXml\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "a2a5d7b5bca715835d92816e7b267b59f7270708": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "15/06/16 10:35 PM",
      "commitNameOld": "2449db507d84b1c4fac70a800fb2ad8905cf3db7",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 216.66,
      "commitsBetweenForRepo": 1562,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,102 @@\n   private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n       throws IOException {\n     inodeBld.setType(INodeSection.INode.Type.FILE);\n     INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n     Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n     if (ival !\u003d null) {\n       bld.setReplication(ival);\n     }\n     Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n     if (lval !\u003d null) {\n       bld.setModificationTime(lval);\n     }\n     lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n     if (lval !\u003d null) {\n       bld.setAccessTime(lval);\n     }\n     lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n     if (lval !\u003d null) {\n       bld.setPreferredBlockSize(lval);\n     }\n     String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n     if (perm !\u003d null) {\n       bld.setPermission(permissionXmlToU64(perm));\n     }\n     Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n     if (blocks !\u003d null) {\n       while (true) {\n         Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n         if (block \u003d\u003d null) {\n           break;\n         }\n         HdfsProtos.BlockProto.Builder blockBld \u003d\n             HdfsProtos.BlockProto.newBuilder();\n         Long id \u003d block.removeChildLong(SECTION_ID);\n         if (id \u003d\u003d null) {\n           throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n         }\n         blockBld.setBlockId(id);\n         Long genstamp \u003d block.removeChildLong(INODE_SECTION_GEMSTAMP);\n         if (genstamp \u003d\u003d null) {\n           throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n         }\n         blockBld.setGenStamp(genstamp);\n         Long numBytes \u003d block.removeChildLong(INODE_SECTION_NUM_BYTES);\n         if (numBytes \u003d\u003d null) {\n           throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n         }\n         blockBld.setNumBytes(numBytes);\n         bld.addBlocks(blockBld);\n       }\n     }\n     Node fileUnderConstruction \u003d\n         node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n     if (fileUnderConstruction !\u003d null) {\n       INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n           INodeSection.FileUnderConstructionFeature.newBuilder();\n       String clientName \u003d\n           fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n       if (clientName \u003d\u003d null) {\n         throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n             \"\u003cclientName\u003e\");\n       }\n       fb.setClientName(clientName);\n       String clientMachine \u003d\n           fileUnderConstruction\n                   .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n       if (clientMachine \u003d\u003d null) {\n         throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n             \"\u003cclientMachine\u003e\");\n       }\n       fb.setClientMachine(clientMachine);\n       bld.setFileUC(fb);\n     }\n     Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n     if (acls !\u003d null) {\n       bld.setAcl(aclXmlToProto(acls));\n     }\n     Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n     if (xattrs !\u003d null) {\n       bld.setXAttrs(xattrsXmlToProto(xattrs));\n     }\n     ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n     if (ival !\u003d null) {\n       bld.setStoragePolicyID(ival);\n     }\n-    Boolean bval \u003d node.removeChildBool(INODE_SECTION_IS_STRIPED);\n-    bld.setIsStriped(bval);\n+    String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n+    if(blockType !\u003d null) {\n+      switch (blockType) {\n+      case \"CONTIGUOUS\":\n+        bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n+        break;\n+      case \"STRIPED\":\n+        bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n+        break;\n+      default:\n+        throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n+            blockType);\n+      }\n+    }\n     inodeBld.setFile(bld);\n     // Will check remaining keys and serialize in processINodeXml\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n      throws IOException {\n    inodeBld.setType(INodeSection.INode.Type.FILE);\n    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n    if (ival !\u003d null) {\n      bld.setReplication(ival);\n    }\n    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n    if (lval !\u003d null) {\n      bld.setModificationTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n    if (lval !\u003d null) {\n      bld.setAccessTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n    if (lval !\u003d null) {\n      bld.setPreferredBlockSize(lval);\n    }\n    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n    if (perm !\u003d null) {\n      bld.setPermission(permissionXmlToU64(perm));\n    }\n    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n    if (blocks !\u003d null) {\n      while (true) {\n        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n        if (block \u003d\u003d null) {\n          break;\n        }\n        HdfsProtos.BlockProto.Builder blockBld \u003d\n            HdfsProtos.BlockProto.newBuilder();\n        Long id \u003d block.removeChildLong(SECTION_ID);\n        if (id \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n        }\n        blockBld.setBlockId(id);\n        Long genstamp \u003d block.removeChildLong(INODE_SECTION_GEMSTAMP);\n        if (genstamp \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n        }\n        blockBld.setGenStamp(genstamp);\n        Long numBytes \u003d block.removeChildLong(INODE_SECTION_NUM_BYTES);\n        if (numBytes \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n        }\n        blockBld.setNumBytes(numBytes);\n        bld.addBlocks(blockBld);\n      }\n    }\n    Node fileUnderConstruction \u003d\n        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n    if (fileUnderConstruction !\u003d null) {\n      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n          INodeSection.FileUnderConstructionFeature.newBuilder();\n      String clientName \u003d\n          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n      if (clientName \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientName\u003e\");\n      }\n      fb.setClientName(clientName);\n      String clientMachine \u003d\n          fileUnderConstruction\n                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n      if (clientMachine \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientMachine\u003e\");\n      }\n      fb.setClientMachine(clientMachine);\n      bld.setFileUC(fb);\n    }\n    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n    if (acls !\u003d null) {\n      bld.setAcl(aclXmlToProto(acls));\n    }\n    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n    if (xattrs !\u003d null) {\n      bld.setXAttrs(xattrsXmlToProto(xattrs));\n    }\n    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n    if (ival !\u003d null) {\n      bld.setStoragePolicyID(ival);\n    }\n    String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n    if(blockType !\u003d null) {\n      switch (blockType) {\n      case \"CONTIGUOUS\":\n        bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n        break;\n      case \"STRIPED\":\n        bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n        break;\n      default:\n        throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n            blockType);\n      }\n    }\n    inodeBld.setFile(bld);\n    // Will check remaining keys and serialize in processINodeXml\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "10/03/16 1:41 PM",
      "commitNameOld": "bd49354c6d6387620b0de2219eab1714ec2d64f8",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,90 @@\n   private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n       throws IOException {\n     inodeBld.setType(INodeSection.INode.Type.FILE);\n     INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n-    Integer ival \u003d node.removeChildInt(\"replication\");\n+    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n     if (ival !\u003d null) {\n       bld.setReplication(ival);\n     }\n-    Long lval \u003d node.removeChildLong(\"mtime\");\n+    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n     if (lval !\u003d null) {\n       bld.setModificationTime(lval);\n     }\n-    lval \u003d node.removeChildLong(\"atime\");\n+    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n     if (lval !\u003d null) {\n       bld.setAccessTime(lval);\n     }\n-    lval \u003d node.removeChildLong(\"preferredBlockSize\");\n+    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n     if (lval !\u003d null) {\n       bld.setPreferredBlockSize(lval);\n     }\n-    String perm \u003d node.removeChildStr(\"permission\");\n+    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n     if (perm !\u003d null) {\n       bld.setPermission(permissionXmlToU64(perm));\n     }\n-    Node blocks \u003d node.removeChild(\"blocks\");\n+    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n     if (blocks !\u003d null) {\n       while (true) {\n-        Node block \u003d blocks.removeChild(\"block\");\n+        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n         if (block \u003d\u003d null) {\n           break;\n         }\n         HdfsProtos.BlockProto.Builder blockBld \u003d\n             HdfsProtos.BlockProto.newBuilder();\n-        Long id \u003d block.removeChildLong(\"id\");\n+        Long id \u003d block.removeChildLong(SECTION_ID);\n         if (id \u003d\u003d null) {\n           throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n         }\n         blockBld.setBlockId(id);\n-        Long genstamp \u003d block.removeChildLong(\"genstamp\");\n+        Long genstamp \u003d block.removeChildLong(INODE_SECTION_GEMSTAMP);\n         if (genstamp \u003d\u003d null) {\n           throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n         }\n         blockBld.setGenStamp(genstamp);\n-        Long numBytes \u003d block.removeChildLong(\"numBytes\");\n+        Long numBytes \u003d block.removeChildLong(INODE_SECTION_NUM_BYTES);\n         if (numBytes \u003d\u003d null) {\n           throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n         }\n         blockBld.setNumBytes(numBytes);\n         bld.addBlocks(blockBld);\n       }\n     }\n-    Node fileUnderConstruction \u003d node.removeChild(\"file-under-construction\");\n+    Node fileUnderConstruction \u003d\n+        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n     if (fileUnderConstruction !\u003d null) {\n       INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n           INodeSection.FileUnderConstructionFeature.newBuilder();\n       String clientName \u003d\n-          fileUnderConstruction.removeChildStr(\"clientName\");\n+          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n       if (clientName \u003d\u003d null) {\n         throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n             \"\u003cclientName\u003e\");\n       }\n       fb.setClientName(clientName);\n       String clientMachine \u003d\n-          fileUnderConstruction.removeChildStr(\"clientMachine\");\n+          fileUnderConstruction\n+                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n       if (clientMachine \u003d\u003d null) {\n         throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n             \"\u003cclientMachine\u003e\");\n       }\n       fb.setClientMachine(clientMachine);\n       bld.setFileUC(fb);\n     }\n-    Node acls \u003d node.removeChild(\"acls\");\n+    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n     if (acls !\u003d null) {\n       bld.setAcl(aclXmlToProto(acls));\n     }\n-    Node xattrs \u003d node.removeChild(\"xattrs\");\n+    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n     if (xattrs !\u003d null) {\n       bld.setXAttrs(xattrsXmlToProto(xattrs));\n     }\n-    ival \u003d node.removeChildInt(\"storagePolicyId\");\n+    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n     if (ival !\u003d null) {\n       bld.setStoragePolicyID(ival);\n     }\n-    Boolean bval \u003d node.removeChildBool(\"isStriped\");\n+    Boolean bval \u003d node.removeChildBool(INODE_SECTION_IS_STRIPED);\n     bld.setIsStriped(bval);\n     inodeBld.setFile(bld);\n     // Will check remaining keys and serialize in processINodeXml\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n      throws IOException {\n    inodeBld.setType(INodeSection.INode.Type.FILE);\n    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n    if (ival !\u003d null) {\n      bld.setReplication(ival);\n    }\n    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n    if (lval !\u003d null) {\n      bld.setModificationTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n    if (lval !\u003d null) {\n      bld.setAccessTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n    if (lval !\u003d null) {\n      bld.setPreferredBlockSize(lval);\n    }\n    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n    if (perm !\u003d null) {\n      bld.setPermission(permissionXmlToU64(perm));\n    }\n    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n    if (blocks !\u003d null) {\n      while (true) {\n        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n        if (block \u003d\u003d null) {\n          break;\n        }\n        HdfsProtos.BlockProto.Builder blockBld \u003d\n            HdfsProtos.BlockProto.newBuilder();\n        Long id \u003d block.removeChildLong(SECTION_ID);\n        if (id \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n        }\n        blockBld.setBlockId(id);\n        Long genstamp \u003d block.removeChildLong(INODE_SECTION_GEMSTAMP);\n        if (genstamp \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n        }\n        blockBld.setGenStamp(genstamp);\n        Long numBytes \u003d block.removeChildLong(INODE_SECTION_NUM_BYTES);\n        if (numBytes \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n        }\n        blockBld.setNumBytes(numBytes);\n        bld.addBlocks(blockBld);\n      }\n    }\n    Node fileUnderConstruction \u003d\n        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n    if (fileUnderConstruction !\u003d null) {\n      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n          INodeSection.FileUnderConstructionFeature.newBuilder();\n      String clientName \u003d\n          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n      if (clientName \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientName\u003e\");\n      }\n      fb.setClientName(clientName);\n      String clientMachine \u003d\n          fileUnderConstruction\n                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n      if (clientMachine \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientMachine\u003e\");\n      }\n      fb.setClientMachine(clientMachine);\n      bld.setFileUC(fb);\n    }\n    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n    if (acls !\u003d null) {\n      bld.setAcl(aclXmlToProto(acls));\n    }\n    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n    if (xattrs !\u003d null) {\n      bld.setXAttrs(xattrsXmlToProto(xattrs));\n    }\n    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n    if (ival !\u003d null) {\n      bld.setStoragePolicyID(ival);\n    }\n    Boolean bval \u003d node.removeChildBool(INODE_SECTION_IS_STRIPED);\n    bld.setIsStriped(bval);\n    inodeBld.setFile(bld);\n    // Will check remaining keys and serialize in processINodeXml\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,88 @@\n+  private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n+      throws IOException {\n+    inodeBld.setType(INodeSection.INode.Type.FILE);\n+    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n+    Integer ival \u003d node.removeChildInt(\"replication\");\n+    if (ival !\u003d null) {\n+      bld.setReplication(ival);\n+    }\n+    Long lval \u003d node.removeChildLong(\"mtime\");\n+    if (lval !\u003d null) {\n+      bld.setModificationTime(lval);\n+    }\n+    lval \u003d node.removeChildLong(\"atime\");\n+    if (lval !\u003d null) {\n+      bld.setAccessTime(lval);\n+    }\n+    lval \u003d node.removeChildLong(\"preferredBlockSize\");\n+    if (lval !\u003d null) {\n+      bld.setPreferredBlockSize(lval);\n+    }\n+    String perm \u003d node.removeChildStr(\"permission\");\n+    if (perm !\u003d null) {\n+      bld.setPermission(permissionXmlToU64(perm));\n+    }\n+    Node blocks \u003d node.removeChild(\"blocks\");\n+    if (blocks !\u003d null) {\n+      while (true) {\n+        Node block \u003d blocks.removeChild(\"block\");\n+        if (block \u003d\u003d null) {\n+          break;\n+        }\n+        HdfsProtos.BlockProto.Builder blockBld \u003d\n+            HdfsProtos.BlockProto.newBuilder();\n+        Long id \u003d block.removeChildLong(\"id\");\n+        if (id \u003d\u003d null) {\n+          throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n+        }\n+        blockBld.setBlockId(id);\n+        Long genstamp \u003d block.removeChildLong(\"genstamp\");\n+        if (genstamp \u003d\u003d null) {\n+          throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n+        }\n+        blockBld.setGenStamp(genstamp);\n+        Long numBytes \u003d block.removeChildLong(\"numBytes\");\n+        if (numBytes \u003d\u003d null) {\n+          throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n+        }\n+        blockBld.setNumBytes(numBytes);\n+        bld.addBlocks(blockBld);\n+      }\n+    }\n+    Node fileUnderConstruction \u003d node.removeChild(\"file-under-construction\");\n+    if (fileUnderConstruction !\u003d null) {\n+      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n+          INodeSection.FileUnderConstructionFeature.newBuilder();\n+      String clientName \u003d\n+          fileUnderConstruction.removeChildStr(\"clientName\");\n+      if (clientName \u003d\u003d null) {\n+        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n+            \"\u003cclientName\u003e\");\n+      }\n+      fb.setClientName(clientName);\n+      String clientMachine \u003d\n+          fileUnderConstruction.removeChildStr(\"clientMachine\");\n+      if (clientMachine \u003d\u003d null) {\n+        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n+            \"\u003cclientMachine\u003e\");\n+      }\n+      fb.setClientMachine(clientMachine);\n+      bld.setFileUC(fb);\n+    }\n+    Node acls \u003d node.removeChild(\"acls\");\n+    if (acls !\u003d null) {\n+      bld.setAcl(aclXmlToProto(acls));\n+    }\n+    Node xattrs \u003d node.removeChild(\"xattrs\");\n+    if (xattrs !\u003d null) {\n+      bld.setXAttrs(xattrsXmlToProto(xattrs));\n+    }\n+    ival \u003d node.removeChildInt(\"storagePolicyId\");\n+    if (ival !\u003d null) {\n+      bld.setStoragePolicyID(ival);\n+    }\n+    Boolean bval \u003d node.removeChildBool(\"isStriped\");\n+    bld.setIsStriped(bval);\n+    inodeBld.setFile(bld);\n+    // Will check remaining keys and serialize in processINodeXml\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void processFileXml(Node node, INodeSection.INode.Builder inodeBld)\n      throws IOException {\n    inodeBld.setType(INodeSection.INode.Type.FILE);\n    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n    Integer ival \u003d node.removeChildInt(\"replication\");\n    if (ival !\u003d null) {\n      bld.setReplication(ival);\n    }\n    Long lval \u003d node.removeChildLong(\"mtime\");\n    if (lval !\u003d null) {\n      bld.setModificationTime(lval);\n    }\n    lval \u003d node.removeChildLong(\"atime\");\n    if (lval !\u003d null) {\n      bld.setAccessTime(lval);\n    }\n    lval \u003d node.removeChildLong(\"preferredBlockSize\");\n    if (lval !\u003d null) {\n      bld.setPreferredBlockSize(lval);\n    }\n    String perm \u003d node.removeChildStr(\"permission\");\n    if (perm !\u003d null) {\n      bld.setPermission(permissionXmlToU64(perm));\n    }\n    Node blocks \u003d node.removeChild(\"blocks\");\n    if (blocks !\u003d null) {\n      while (true) {\n        Node block \u003d blocks.removeChild(\"block\");\n        if (block \u003d\u003d null) {\n          break;\n        }\n        HdfsProtos.BlockProto.Builder blockBld \u003d\n            HdfsProtos.BlockProto.newBuilder();\n        Long id \u003d block.removeChildLong(\"id\");\n        if (id \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cid\u003e\");\n        }\n        blockBld.setBlockId(id);\n        Long genstamp \u003d block.removeChildLong(\"genstamp\");\n        if (genstamp \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cgenstamp\u003e\");\n        }\n        blockBld.setGenStamp(genstamp);\n        Long numBytes \u003d block.removeChildLong(\"numBytes\");\n        if (numBytes \u003d\u003d null) {\n          throw new IOException(\"\u003cblock\u003e found without \u003cnumBytes\u003e\");\n        }\n        blockBld.setNumBytes(numBytes);\n        bld.addBlocks(blockBld);\n      }\n    }\n    Node fileUnderConstruction \u003d node.removeChild(\"file-under-construction\");\n    if (fileUnderConstruction !\u003d null) {\n      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n          INodeSection.FileUnderConstructionFeature.newBuilder();\n      String clientName \u003d\n          fileUnderConstruction.removeChildStr(\"clientName\");\n      if (clientName \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientName\u003e\");\n      }\n      fb.setClientName(clientName);\n      String clientMachine \u003d\n          fileUnderConstruction.removeChildStr(\"clientMachine\");\n      if (clientMachine \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientMachine\u003e\");\n      }\n      fb.setClientMachine(clientMachine);\n      bld.setFileUC(fb);\n    }\n    Node acls \u003d node.removeChild(\"acls\");\n    if (acls !\u003d null) {\n      bld.setAcl(aclXmlToProto(acls));\n    }\n    Node xattrs \u003d node.removeChild(\"xattrs\");\n    if (xattrs !\u003d null) {\n      bld.setXAttrs(xattrsXmlToProto(xattrs));\n    }\n    ival \u003d node.removeChildInt(\"storagePolicyId\");\n    if (ival !\u003d null) {\n      bld.setStoragePolicyID(ival);\n    }\n    Boolean bval \u003d node.removeChildBool(\"isStriped\");\n    bld.setIsStriped(bval);\n    inodeBld.setFile(bld);\n    // Will check remaining keys and serialize in processINodeXml\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java"
    }
  }
}