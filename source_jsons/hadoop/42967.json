{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecommissioningNodesWatcher.java",
  "functionName": "update",
  "functionId": "update___rmNode-RMNode__remoteNodeStatus-NodeStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
  "functionStartLine": 137,
  "functionEndLine": 187,
  "numCommitsSeen": 7,
  "timeTaken": 2147,
  "changeHistory": [
    "304a47e22cb836cfde227803c853ecf4def870e1",
    "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421"
  ],
  "changeHistoryShort": {
    "304a47e22cb836cfde227803c853ecf4def870e1": "Ybodychange",
    "b46ca7e73b8bac3fdbff0b13afe009308078acf2": "Ybodychange",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "304a47e22cb836cfde227803c853ecf4def870e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9608. DecommissioningNodesWatcher should get lists of running applications on node from RMNode. Contributed by Abhishek Modi.\n",
      "commitDate": "17/06/19 2:09 AM",
      "commitName": "304a47e22cb836cfde227803c853ecf4def870e1",
      "commitAuthor": "Zhankun Tang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 93.41,
      "commitsBetweenForRepo": 582,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,51 @@\n   public synchronized void update(RMNode rmNode, NodeStatus remoteNodeStatus) {\n     DecommissioningNodeContext context \u003d decomNodes.get(rmNode.getNodeID());\n     long now \u003d mclock.getTime();\n     if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n       if (context \u003d\u003d null) {\n         return;\n       }\n       context.nodeState \u003d rmNode.getState();\n       // keep DECOMMISSIONED node for a while for status log, so that such\n       // host will appear as DECOMMISSIONED instead of quietly disappears.\n       if (context.decommissionedTime \u003d\u003d 0) {\n         context.decommissionedTime \u003d now;\n       } else if (now - context.decommissionedTime \u003e 60000L) {\n         decomNodes.remove(rmNode.getNodeID());\n       }\n     } else if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n       if (context \u003d\u003d null) {\n         context \u003d new DecommissioningNodeContext(rmNode.getNodeID(),\n             rmNode.getDecommissioningTimeout());\n         decomNodes.put(rmNode.getNodeID(), context);\n         context.nodeState \u003d rmNode.getState();\n         context.decommissionedTime \u003d 0;\n       }\n       context.updateTimeout(rmNode.getDecommissioningTimeout());\n       context.lastUpdateTime \u003d now;\n \n-      if (remoteNodeStatus.getKeepAliveApplications() !\u003d null) {\n-        context.appIds.addAll(remoteNodeStatus.getKeepAliveApplications());\n-      }\n+      context.appIds \u003d rmNode.getRunningApps();\n \n       // Count number of active containers.\n       int numActiveContainers \u003d 0;\n       for (ContainerStatus cs : remoteNodeStatus.getContainersStatuses()) {\n         ContainerState newState \u003d cs.getState();\n         if (newState \u003d\u003d ContainerState.RUNNING ||\n             newState \u003d\u003d ContainerState.NEW) {\n           numActiveContainers++;\n         }\n-        context.numActiveContainers \u003d numActiveContainers;\n-        ApplicationId aid \u003d cs.getContainerId()\n-            .getApplicationAttemptId().getApplicationId();\n-        if (!context.appIds.contains(aid)) {\n-          context.appIds.add(aid);\n-        }\n       }\n-\n       context.numActiveContainers \u003d numActiveContainers;\n \n       // maintain lastContainerFinishTime.\n       if (context.numActiveContainers \u003d\u003d 0 \u0026\u0026\n           context.lastContainerFinishTime \u003d\u003d 0) {\n         context.lastContainerFinishTime \u003d now;\n       }\n     } else {\n       // remove node in other states\n       if (context !\u003d null) {\n         decomNodes.remove(rmNode.getNodeID());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void update(RMNode rmNode, NodeStatus remoteNodeStatus) {\n    DecommissioningNodeContext context \u003d decomNodes.get(rmNode.getNodeID());\n    long now \u003d mclock.getTime();\n    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n      if (context \u003d\u003d null) {\n        return;\n      }\n      context.nodeState \u003d rmNode.getState();\n      // keep DECOMMISSIONED node for a while for status log, so that such\n      // host will appear as DECOMMISSIONED instead of quietly disappears.\n      if (context.decommissionedTime \u003d\u003d 0) {\n        context.decommissionedTime \u003d now;\n      } else if (now - context.decommissionedTime \u003e 60000L) {\n        decomNodes.remove(rmNode.getNodeID());\n      }\n    } else if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n      if (context \u003d\u003d null) {\n        context \u003d new DecommissioningNodeContext(rmNode.getNodeID(),\n            rmNode.getDecommissioningTimeout());\n        decomNodes.put(rmNode.getNodeID(), context);\n        context.nodeState \u003d rmNode.getState();\n        context.decommissionedTime \u003d 0;\n      }\n      context.updateTimeout(rmNode.getDecommissioningTimeout());\n      context.lastUpdateTime \u003d now;\n\n      context.appIds \u003d rmNode.getRunningApps();\n\n      // Count number of active containers.\n      int numActiveContainers \u003d 0;\n      for (ContainerStatus cs : remoteNodeStatus.getContainersStatuses()) {\n        ContainerState newState \u003d cs.getState();\n        if (newState \u003d\u003d ContainerState.RUNNING ||\n            newState \u003d\u003d ContainerState.NEW) {\n          numActiveContainers++;\n        }\n      }\n      context.numActiveContainers \u003d numActiveContainers;\n\n      // maintain lastContainerFinishTime.\n      if (context.numActiveContainers \u003d\u003d 0 \u0026\u0026\n          context.lastContainerFinishTime \u003d\u003d 0) {\n        context.lastContainerFinishTime \u003d now;\n      }\n    } else {\n      // remove node in other states\n      if (context !\u003d null) {\n        decomNodes.remove(rmNode.getNodeID());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
      "extendedDetails": {}
    },
    "b46ca7e73b8bac3fdbff0b13afe009308078acf2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6483. Add nodes transitioning to DECOMMISSIONING state to the list of updated nodes returned to the AM. (Juan Rodriguez Hortala via asuresh)\n",
      "commitDate": "22/11/17 7:18 PM",
      "commitName": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "17/02/17 1:13 PM",
      "commitNameOld": "9a928377868dfb2dc846c340501b3248eb6ad77f",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 278.25,
      "commitsBetweenForRepo": 1905,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   public synchronized void update(RMNode rmNode, NodeStatus remoteNodeStatus) {\n     DecommissioningNodeContext context \u003d decomNodes.get(rmNode.getNodeID());\n     long now \u003d mclock.getTime();\n     if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n       if (context \u003d\u003d null) {\n         return;\n       }\n       context.nodeState \u003d rmNode.getState();\n       // keep DECOMMISSIONED node for a while for status log, so that such\n       // host will appear as DECOMMISSIONED instead of quietly disappears.\n       if (context.decommissionedTime \u003d\u003d 0) {\n         context.decommissionedTime \u003d now;\n       } else if (now - context.decommissionedTime \u003e 60000L) {\n         decomNodes.remove(rmNode.getNodeID());\n       }\n     } else if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n       if (context \u003d\u003d null) {\n-        context \u003d new DecommissioningNodeContext(rmNode.getNodeID());\n+        context \u003d new DecommissioningNodeContext(rmNode.getNodeID(),\n+            rmNode.getDecommissioningTimeout());\n         decomNodes.put(rmNode.getNodeID(), context);\n         context.nodeState \u003d rmNode.getState();\n         context.decommissionedTime \u003d 0;\n       }\n       context.updateTimeout(rmNode.getDecommissioningTimeout());\n       context.lastUpdateTime \u003d now;\n \n       if (remoteNodeStatus.getKeepAliveApplications() !\u003d null) {\n         context.appIds.addAll(remoteNodeStatus.getKeepAliveApplications());\n       }\n \n       // Count number of active containers.\n       int numActiveContainers \u003d 0;\n       for (ContainerStatus cs : remoteNodeStatus.getContainersStatuses()) {\n         ContainerState newState \u003d cs.getState();\n         if (newState \u003d\u003d ContainerState.RUNNING ||\n             newState \u003d\u003d ContainerState.NEW) {\n           numActiveContainers++;\n         }\n         context.numActiveContainers \u003d numActiveContainers;\n         ApplicationId aid \u003d cs.getContainerId()\n             .getApplicationAttemptId().getApplicationId();\n         if (!context.appIds.contains(aid)) {\n           context.appIds.add(aid);\n         }\n       }\n \n       context.numActiveContainers \u003d numActiveContainers;\n \n       // maintain lastContainerFinishTime.\n       if (context.numActiveContainers \u003d\u003d 0 \u0026\u0026\n           context.lastContainerFinishTime \u003d\u003d 0) {\n         context.lastContainerFinishTime \u003d now;\n       }\n     } else {\n       // remove node in other states\n       if (context !\u003d null) {\n         decomNodes.remove(rmNode.getNodeID());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void update(RMNode rmNode, NodeStatus remoteNodeStatus) {\n    DecommissioningNodeContext context \u003d decomNodes.get(rmNode.getNodeID());\n    long now \u003d mclock.getTime();\n    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n      if (context \u003d\u003d null) {\n        return;\n      }\n      context.nodeState \u003d rmNode.getState();\n      // keep DECOMMISSIONED node for a while for status log, so that such\n      // host will appear as DECOMMISSIONED instead of quietly disappears.\n      if (context.decommissionedTime \u003d\u003d 0) {\n        context.decommissionedTime \u003d now;\n      } else if (now - context.decommissionedTime \u003e 60000L) {\n        decomNodes.remove(rmNode.getNodeID());\n      }\n    } else if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n      if (context \u003d\u003d null) {\n        context \u003d new DecommissioningNodeContext(rmNode.getNodeID(),\n            rmNode.getDecommissioningTimeout());\n        decomNodes.put(rmNode.getNodeID(), context);\n        context.nodeState \u003d rmNode.getState();\n        context.decommissionedTime \u003d 0;\n      }\n      context.updateTimeout(rmNode.getDecommissioningTimeout());\n      context.lastUpdateTime \u003d now;\n\n      if (remoteNodeStatus.getKeepAliveApplications() !\u003d null) {\n        context.appIds.addAll(remoteNodeStatus.getKeepAliveApplications());\n      }\n\n      // Count number of active containers.\n      int numActiveContainers \u003d 0;\n      for (ContainerStatus cs : remoteNodeStatus.getContainersStatuses()) {\n        ContainerState newState \u003d cs.getState();\n        if (newState \u003d\u003d ContainerState.RUNNING ||\n            newState \u003d\u003d ContainerState.NEW) {\n          numActiveContainers++;\n        }\n        context.numActiveContainers \u003d numActiveContainers;\n        ApplicationId aid \u003d cs.getContainerId()\n            .getApplicationAttemptId().getApplicationId();\n        if (!context.appIds.contains(aid)) {\n          context.appIds.add(aid);\n        }\n      }\n\n      context.numActiveContainers \u003d numActiveContainers;\n\n      // maintain lastContainerFinishTime.\n      if (context.numActiveContainers \u003d\u003d 0 \u0026\u0026\n          context.lastContainerFinishTime \u003d\u003d 0) {\n        context.lastContainerFinishTime \u003d now;\n      }\n    } else {\n      // remove node in other states\n      if (context !\u003d null) {\n        decomNodes.remove(rmNode.getNodeID());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
      "extendedDetails": {}
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,59 @@\n+  public synchronized void update(RMNode rmNode, NodeStatus remoteNodeStatus) {\n+    DecommissioningNodeContext context \u003d decomNodes.get(rmNode.getNodeID());\n+    long now \u003d mclock.getTime();\n+    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n+      if (context \u003d\u003d null) {\n+        return;\n+      }\n+      context.nodeState \u003d rmNode.getState();\n+      // keep DECOMMISSIONED node for a while for status log, so that such\n+      // host will appear as DECOMMISSIONED instead of quietly disappears.\n+      if (context.decommissionedTime \u003d\u003d 0) {\n+        context.decommissionedTime \u003d now;\n+      } else if (now - context.decommissionedTime \u003e 60000L) {\n+        decomNodes.remove(rmNode.getNodeID());\n+      }\n+    } else if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n+      if (context \u003d\u003d null) {\n+        context \u003d new DecommissioningNodeContext(rmNode.getNodeID());\n+        decomNodes.put(rmNode.getNodeID(), context);\n+        context.nodeState \u003d rmNode.getState();\n+        context.decommissionedTime \u003d 0;\n+      }\n+      context.updateTimeout(rmNode.getDecommissioningTimeout());\n+      context.lastUpdateTime \u003d now;\n+\n+      if (remoteNodeStatus.getKeepAliveApplications() !\u003d null) {\n+        context.appIds.addAll(remoteNodeStatus.getKeepAliveApplications());\n+      }\n+\n+      // Count number of active containers.\n+      int numActiveContainers \u003d 0;\n+      for (ContainerStatus cs : remoteNodeStatus.getContainersStatuses()) {\n+        ContainerState newState \u003d cs.getState();\n+        if (newState \u003d\u003d ContainerState.RUNNING ||\n+            newState \u003d\u003d ContainerState.NEW) {\n+          numActiveContainers++;\n+        }\n+        context.numActiveContainers \u003d numActiveContainers;\n+        ApplicationId aid \u003d cs.getContainerId()\n+            .getApplicationAttemptId().getApplicationId();\n+        if (!context.appIds.contains(aid)) {\n+          context.appIds.add(aid);\n+        }\n+      }\n+\n+      context.numActiveContainers \u003d numActiveContainers;\n+\n+      // maintain lastContainerFinishTime.\n+      if (context.numActiveContainers \u003d\u003d 0 \u0026\u0026\n+          context.lastContainerFinishTime \u003d\u003d 0) {\n+        context.lastContainerFinishTime \u003d now;\n+      }\n+    } else {\n+      // remove node in other states\n+      if (context !\u003d null) {\n+        decomNodes.remove(rmNode.getNodeID());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void update(RMNode rmNode, NodeStatus remoteNodeStatus) {\n    DecommissioningNodeContext context \u003d decomNodes.get(rmNode.getNodeID());\n    long now \u003d mclock.getTime();\n    if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n      if (context \u003d\u003d null) {\n        return;\n      }\n      context.nodeState \u003d rmNode.getState();\n      // keep DECOMMISSIONED node for a while for status log, so that such\n      // host will appear as DECOMMISSIONED instead of quietly disappears.\n      if (context.decommissionedTime \u003d\u003d 0) {\n        context.decommissionedTime \u003d now;\n      } else if (now - context.decommissionedTime \u003e 60000L) {\n        decomNodes.remove(rmNode.getNodeID());\n      }\n    } else if (rmNode.getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n      if (context \u003d\u003d null) {\n        context \u003d new DecommissioningNodeContext(rmNode.getNodeID());\n        decomNodes.put(rmNode.getNodeID(), context);\n        context.nodeState \u003d rmNode.getState();\n        context.decommissionedTime \u003d 0;\n      }\n      context.updateTimeout(rmNode.getDecommissioningTimeout());\n      context.lastUpdateTime \u003d now;\n\n      if (remoteNodeStatus.getKeepAliveApplications() !\u003d null) {\n        context.appIds.addAll(remoteNodeStatus.getKeepAliveApplications());\n      }\n\n      // Count number of active containers.\n      int numActiveContainers \u003d 0;\n      for (ContainerStatus cs : remoteNodeStatus.getContainersStatuses()) {\n        ContainerState newState \u003d cs.getState();\n        if (newState \u003d\u003d ContainerState.RUNNING ||\n            newState \u003d\u003d ContainerState.NEW) {\n          numActiveContainers++;\n        }\n        context.numActiveContainers \u003d numActiveContainers;\n        ApplicationId aid \u003d cs.getContainerId()\n            .getApplicationAttemptId().getApplicationId();\n        if (!context.appIds.contains(aid)) {\n          context.appIds.add(aid);\n        }\n      }\n\n      context.numActiveContainers \u003d numActiveContainers;\n\n      // maintain lastContainerFinishTime.\n      if (context.numActiveContainers \u003d\u003d 0 \u0026\u0026\n          context.lastContainerFinishTime \u003d\u003d 0) {\n        context.lastContainerFinishTime \u003d now;\n      }\n    } else {\n      // remove node in other states\n      if (context !\u003d null) {\n        decomNodes.remove(rmNode.getNodeID());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java"
    }
  }
}