{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NNStorage.java",
  "functionName": "readAndInspectDirs",
  "functionId": "readAndInspectDirs___fileTypes-EnumSet__NameNodeFile____startupOption-StartupOption",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
  "functionStartLine": 1084,
  "functionEndLine": 1132,
  "numCommitsSeen": 173,
  "timeTaken": 5566,
  "changeHistory": [
    "38128baff40ee137376968f025e75827a4227ee7",
    "18620649f96d9e378fb7ea40de216284a9d525c7",
    "e3d2e4c156851de7dac16154521a2e06ea83ec7b",
    "4f9bbaa301194e3d20972a10f51638c7f4d121f0",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
    "3b5ea8750202ad9ed0e297d92a90d6dc772ce12a",
    "aa80e6895dfd2879c1a860b4800824e7bd942226",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "38128baff40ee137376968f025e75827a4227ee7": "Ybodychange",
    "18620649f96d9e378fb7ea40de216284a9d525c7": "Ymultichange(Yparameterchange,Ybodychange)",
    "e3d2e4c156851de7dac16154521a2e06ea83ec7b": "Ymultichange(Yparameterchange,Ybodychange)",
    "4f9bbaa301194e3d20972a10f51638c7f4d121f0": "Ymultichange(Yparameterchange,Ybodychange)",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": "Ybodychange",
    "3b5ea8750202ad9ed0e297d92a90d6dc772ce12a": "Ybodychange",
    "aa80e6895dfd2879c1a860b4800824e7bd942226": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38128baff40ee137376968f025e75827a4227ee7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10425. Clean up NNStorage and TestSaveNamespace. Contributed by Andras Bokor.\n",
      "commitDate": "20/07/16 10:44 AM",
      "commitName": "38128baff40ee137376968f025e75827a4227ee7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/05/16 2:13 PM",
      "commitNameOld": "010e6ac328855bad59f138b6aeaec535272f448c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 62.85,
      "commitsBetweenForRepo": 537,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,49 @@\n   FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes,\n       StartupOption startupOption) throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n-        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n+        FSImage.LOG.warn(\"Storage directory \" + sd +\n+            \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd, startupOption); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n-        layoutVersion \u003d Integer.valueOf(lv);\n+        layoutVersion \u003d lv;\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n-      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n+      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv)\n+          .append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n-      throw new IOException(\"No storage directories contained VERSION information\");\n+      throw new IOException(\"No storage directories contained VERSION\" +\n+          \" information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes,\n      StartupOption startupOption) throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd +\n            \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd, startupOption); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d lv;\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv)\n          .append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION\" +\n          \" information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "18620649f96d9e378fb7ea40de216284a9d525c7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7185. The active NameNode will not accept an fsimage sent from the standby during rolling upgrade. Contributed by Jing Zhao.\n",
      "commitDate": "15/10/14 10:27 AM",
      "commitName": "18620649f96d9e378fb7ea40de216284a9d525c7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7185. The active NameNode will not accept an fsimage sent from the standby during rolling upgrade. Contributed by Jing Zhao.\n",
          "commitDate": "15/10/14 10:27 AM",
          "commitName": "18620649f96d9e378fb7ea40de216284a9d525c7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/07/14 10:14 AM",
          "commitNameOld": "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 875,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes)\n-      throws IOException {\n+  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes,\n+      StartupOption startupOption) throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n-      readProperties(sd); // sets layoutVersion\n+      readProperties(sd, startupOption); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes,\n      StartupOption startupOption) throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd, startupOption); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
          "extendedDetails": {
            "oldValue": "[fileTypes-EnumSet\u003cNameNodeFile\u003e]",
            "newValue": "[fileTypes-EnumSet\u003cNameNodeFile\u003e, startupOption-StartupOption]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7185. The active NameNode will not accept an fsimage sent from the standby during rolling upgrade. Contributed by Jing Zhao.\n",
          "commitDate": "15/10/14 10:27 AM",
          "commitName": "18620649f96d9e378fb7ea40de216284a9d525c7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/07/14 10:14 AM",
          "commitNameOld": "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 875,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes)\n-      throws IOException {\n+  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes,\n+      StartupOption startupOption) throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n-      readProperties(sd); // sets layoutVersion\n+      readProperties(sd, startupOption); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes,\n      StartupOption startupOption) throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd, startupOption); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "e3d2e4c156851de7dac16154521a2e06ea83ec7b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6000. Avoid saving namespace when starting rolling upgrade. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571840 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/14 1:58 PM",
      "commitName": "e3d2e4c156851de7dac16154521a2e06ea83ec7b",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6000. Avoid saving namespace when starting rolling upgrade. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/14 1:58 PM",
          "commitName": "e3d2e4c156851de7dac16154521a2e06ea83ec7b",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "19/02/14 4:47 PM",
          "commitNameOld": "50a0bedead549aa14d91f74bf06feb5401d99ae9",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n-  FSImageStorageInspector readAndInspectDirs(NameNodeFile nnf) throws IOException {\n+  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes)\n+      throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n-      inspector \u003d new FSImageTransactionalStorageInspector(nnf);\n+      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes)\n      throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
          "extendedDetails": {
            "oldValue": "[nnf-NameNodeFile]",
            "newValue": "[fileTypes-EnumSet\u003cNameNodeFile\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6000. Avoid saving namespace when starting rolling upgrade. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/02/14 1:58 PM",
          "commitName": "e3d2e4c156851de7dac16154521a2e06ea83ec7b",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "19/02/14 4:47 PM",
          "commitNameOld": "50a0bedead549aa14d91f74bf06feb5401d99ae9",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 5.88,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n-  FSImageStorageInspector readAndInspectDirs(NameNodeFile nnf) throws IOException {\n+  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes)\n+      throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n-      inspector \u003d new FSImageTransactionalStorageInspector(nnf);\n+      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageStorageInspector readAndInspectDirs(EnumSet\u003cNameNodeFile\u003e fileTypes)\n      throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(fileTypes);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "4f9bbaa301194e3d20972a10f51638c7f4d121f0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5889. When starting rolling upgrade, create a fs image for rollback so that the standby namenode can create checkpoints during upgrade.  Contributed by szetszwo \u0026 jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1567861 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/14 12:04 AM",
      "commitName": "4f9bbaa301194e3d20972a10f51638c7f4d121f0",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5889. When starting rolling upgrade, create a fs image for rollback so that the standby namenode can create checkpoints during upgrade.  Contributed by szetszwo \u0026 jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1567861 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/02/14 12:04 AM",
          "commitName": "4f9bbaa301194e3d20972a10f51638c7f4d121f0",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/01/14 7:21 PM",
          "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 13.2,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  FSImageStorageInspector readAndInspectDirs()\n-      throws IOException {\n+  FSImageStorageInspector readAndInspectDirs(NameNodeFile nnf) throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n-      inspector \u003d new FSImageTransactionalStorageInspector();\n+      inspector \u003d new FSImageTransactionalStorageInspector(nnf);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageStorageInspector readAndInspectDirs(NameNodeFile nnf) throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(nnf);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[nnf-NameNodeFile]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5889. When starting rolling upgrade, create a fs image for rollback so that the standby namenode can create checkpoints during upgrade.  Contributed by szetszwo \u0026 jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1567861 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/02/14 12:04 AM",
          "commitName": "4f9bbaa301194e3d20972a10f51638c7f4d121f0",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "30/01/14 7:21 PM",
          "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 13.2,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  FSImageStorageInspector readAndInspectDirs()\n-      throws IOException {\n+  FSImageStorageInspector readAndInspectDirs(NameNodeFile nnf) throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n-      inspector \u003d new FSImageTransactionalStorageInspector();\n+      inspector \u003d new FSImageTransactionalStorageInspector(nnf);\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSImageStorageInspector readAndInspectDirs(NameNodeFile nnf) throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector(nnf);\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/01/14 12:01 PM",
      "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   FSImageStorageInspector readAndInspectDirs()\n       throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n-    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n+    if (NameNodeLayoutVersion.supports(\n+        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector();\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5138. Support HDFS upgrade in HA. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561381 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 12:01 PM",
      "commitName": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "17/06/13 9:47 PM",
      "commitNameOld": "364b379cb84ab053d5704e2f761ebec27fd54cc4",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 221.63,
      "commitsBetweenForRepo": 1317,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   FSImageStorageInspector readAndInspectDirs()\n       throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n-    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n+    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n           \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector();\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator(false);\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "3b5ea8750202ad9ed0e297d92a90d6dc772ce12a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3629. Fix the typo in the error message about inconsistent storage layout version. Contributed by Brandon Li. (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359905 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 2:14 PM",
      "commitName": "3b5ea8750202ad9ed0e297d92a90d6dc772ce12a",
      "commitAuthor": "Harsh J",
      "commitDateOld": "02/07/12 4:59 PM",
      "commitNameOld": "8dd3148e734fa9d1db761ce65410fdc49c0fe1d5",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 7.89,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   FSImageStorageInspector readAndInspectDirs()\n       throws IOException {\n     Integer layoutVersion \u003d null;\n     boolean multipleLV \u003d false;\n     StringBuilder layoutVersions \u003d new StringBuilder();\n \n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n       int lv \u003d getLayoutVersion();\n       if (layoutVersion \u003d\u003d null) {\n         layoutVersion \u003d Integer.valueOf(lv);\n       } else if (!layoutVersion.equals(lv)) {\n         multipleLV \u003d true;\n       }\n       layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n     if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n     if (multipleLV) {            \n       throw new IOException(\n-          \"Storage directories containe multiple layout versions: \"\n+          \"Storage directories contain multiple layout versions: \"\n               + layoutVersions);\n     }\n     // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n     if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector();\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories contain multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "aa80e6895dfd2879c1a860b4800824e7bd942226": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3415. Make sure all layout versions are the same for all storage directories in the Namenode.  Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1341676 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/12 4:18 PM",
      "commitName": "aa80e6895dfd2879c1a860b4800824e7bd942226",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/04/12 12:39 PM",
      "commitNameOld": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 43.15,
      "commitsBetweenForRepo": 286,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,45 @@\n   FSImageStorageInspector readAndInspectDirs()\n       throws IOException {\n-    int minLayoutVersion \u003d Integer.MAX_VALUE; // the newest\n-    int maxLayoutVersion \u003d Integer.MIN_VALUE; // the oldest\n-    \n+    Integer layoutVersion \u003d null;\n+    boolean multipleLV \u003d false;\n+    StringBuilder layoutVersions \u003d new StringBuilder();\n+\n     // First determine what range of layout versions we\u0027re going to inspect\n     for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n          it.hasNext();) {\n       StorageDirectory sd \u003d it.next();\n       if (!sd.getVersionFile().exists()) {\n         FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n         continue;\n       }\n       readProperties(sd); // sets layoutVersion\n-      minLayoutVersion \u003d Math.min(minLayoutVersion, getLayoutVersion());\n-      maxLayoutVersion \u003d Math.max(maxLayoutVersion, getLayoutVersion());\n+      int lv \u003d getLayoutVersion();\n+      if (layoutVersion \u003d\u003d null) {\n+        layoutVersion \u003d Integer.valueOf(lv);\n+      } else if (!layoutVersion.equals(lv)) {\n+        multipleLV \u003d true;\n+      }\n+      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n     }\n     \n-    if (minLayoutVersion \u003e maxLayoutVersion) {\n+    if (layoutVersion \u003d\u003d null) {\n       throw new IOException(\"No storage directories contained VERSION information\");\n     }\n-    assert minLayoutVersion \u003c\u003d maxLayoutVersion;\n-    \n-    // If we have any storage directories with the new layout version\n+    if (multipleLV) {            \n+      throw new IOException(\n+          \"Storage directories containe multiple layout versions: \"\n+              + layoutVersions);\n+    }\n+    // If the storage directories are with the new layout version\n     // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n     // the old format dirs.\n     FSImageStorageInspector inspector;\n-    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, minLayoutVersion)) {\n+    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       inspector \u003d new FSImageTransactionalStorageInspector();\n-      if (!LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, maxLayoutVersion)) {\n-        FSImage.LOG.warn(\"Ignoring one or more storage directories with old layouts\");\n-      }\n     } else {\n       inspector \u003d new FSImagePreTransactionalStorageInspector();\n     }\n     \n     inspectStorageDirs(inspector);\n     return inspector;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    Integer layoutVersion \u003d null;\n    boolean multipleLV \u003d false;\n    StringBuilder layoutVersions \u003d new StringBuilder();\n\n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      int lv \u003d getLayoutVersion();\n      if (layoutVersion \u003d\u003d null) {\n        layoutVersion \u003d Integer.valueOf(lv);\n      } else if (!layoutVersion.equals(lv)) {\n        multipleLV \u003d true;\n      }\n      layoutVersions.append(\"(\").append(sd.getRoot()).append(\", \").append(lv).append(\") \");\n    }\n    \n    if (layoutVersion \u003d\u003d null) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    if (multipleLV) {            \n      throw new IOException(\n          \"Storage directories containe multiple layout versions: \"\n              + layoutVersions);\n    }\n    // If the storage directories are with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    int minLayoutVersion \u003d Integer.MAX_VALUE; // the newest\n    int maxLayoutVersion \u003d Integer.MIN_VALUE; // the oldest\n    \n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      minLayoutVersion \u003d Math.min(minLayoutVersion, getLayoutVersion());\n      maxLayoutVersion \u003d Math.max(maxLayoutVersion, getLayoutVersion());\n    }\n    \n    if (minLayoutVersion \u003e maxLayoutVersion) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    assert minLayoutVersion \u003c\u003d maxLayoutVersion;\n    \n    // If we have any storage directories with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, minLayoutVersion)) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n      if (!LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, maxLayoutVersion)) {\n        FSImage.LOG.warn(\"Ignoring one or more storage directories with old layouts\");\n      }\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    int minLayoutVersion \u003d Integer.MAX_VALUE; // the newest\n    int maxLayoutVersion \u003d Integer.MIN_VALUE; // the oldest\n    \n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      minLayoutVersion \u003d Math.min(minLayoutVersion, getLayoutVersion());\n      maxLayoutVersion \u003d Math.max(maxLayoutVersion, getLayoutVersion());\n    }\n    \n    if (minLayoutVersion \u003e maxLayoutVersion) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    assert minLayoutVersion \u003c\u003d maxLayoutVersion;\n    \n    // If we have any storage directories with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, minLayoutVersion)) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n      if (!LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, maxLayoutVersion)) {\n        FSImage.LOG.warn(\"Ignoring one or more storage directories with old layouts\");\n      }\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,39 @@\n+  FSImageStorageInspector readAndInspectDirs()\n+      throws IOException {\n+    int minLayoutVersion \u003d Integer.MAX_VALUE; // the newest\n+    int maxLayoutVersion \u003d Integer.MIN_VALUE; // the oldest\n+    \n+    // First determine what range of layout versions we\u0027re going to inspect\n+    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n+         it.hasNext();) {\n+      StorageDirectory sd \u003d it.next();\n+      if (!sd.getVersionFile().exists()) {\n+        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n+        continue;\n+      }\n+      readProperties(sd); // sets layoutVersion\n+      minLayoutVersion \u003d Math.min(minLayoutVersion, getLayoutVersion());\n+      maxLayoutVersion \u003d Math.max(maxLayoutVersion, getLayoutVersion());\n+    }\n+    \n+    if (minLayoutVersion \u003e maxLayoutVersion) {\n+      throw new IOException(\"No storage directories contained VERSION information\");\n+    }\n+    assert minLayoutVersion \u003c\u003d maxLayoutVersion;\n+    \n+    // If we have any storage directories with the new layout version\n+    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n+    // the old format dirs.\n+    FSImageStorageInspector inspector;\n+    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, minLayoutVersion)) {\n+      inspector \u003d new FSImageTransactionalStorageInspector();\n+      if (!LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, maxLayoutVersion)) {\n+        FSImage.LOG.warn(\"Ignoring one or more storage directories with old layouts\");\n+      }\n+    } else {\n+      inspector \u003d new FSImagePreTransactionalStorageInspector();\n+    }\n+    \n+    inspectStorageDirs(inspector);\n+    return inspector;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  FSImageStorageInspector readAndInspectDirs()\n      throws IOException {\n    int minLayoutVersion \u003d Integer.MAX_VALUE; // the newest\n    int maxLayoutVersion \u003d Integer.MIN_VALUE; // the oldest\n    \n    // First determine what range of layout versions we\u0027re going to inspect\n    for (Iterator\u003cStorageDirectory\u003e it \u003d dirIterator();\n         it.hasNext();) {\n      StorageDirectory sd \u003d it.next();\n      if (!sd.getVersionFile().exists()) {\n        FSImage.LOG.warn(\"Storage directory \" + sd + \" contains no VERSION file. Skipping...\");\n        continue;\n      }\n      readProperties(sd); // sets layoutVersion\n      minLayoutVersion \u003d Math.min(minLayoutVersion, getLayoutVersion());\n      maxLayoutVersion \u003d Math.max(maxLayoutVersion, getLayoutVersion());\n    }\n    \n    if (minLayoutVersion \u003e maxLayoutVersion) {\n      throw new IOException(\"No storage directories contained VERSION information\");\n    }\n    assert minLayoutVersion \u003c\u003d maxLayoutVersion;\n    \n    // If we have any storage directories with the new layout version\n    // (ie edits_\u003ctxnid\u003e) then use the new inspector, which will ignore\n    // the old format dirs.\n    FSImageStorageInspector inspector;\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, minLayoutVersion)) {\n      inspector \u003d new FSImageTransactionalStorageInspector();\n      if (!LayoutVersion.supports(Feature.TXID_BASED_LAYOUT, maxLayoutVersion)) {\n        FSImage.LOG.warn(\"Ignoring one or more storage directories with old layouts\");\n      }\n    } else {\n      inspector \u003d new FSImagePreTransactionalStorageInspector();\n    }\n    \n    inspectStorageDirs(inspector);\n    return inspector;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NNStorage.java"
    }
  }
}