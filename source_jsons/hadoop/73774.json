{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "logSlowRpcCalls",
  "functionId": "logSlowRpcCalls___methodName-String__call-Call__details-ProcessingDetails",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 528,
  "functionEndLine": 551,
  "numCommitsSeen": 466,
  "timeTaken": 6627,
  "changeHistory": [
    "a23417533e1ee052893baf207ec636c4993c5994",
    "f96a2df38d889f29314c57f4d94227b2e419a11f",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "48774d0a45d95557affbd6bbaf8035cc9575ef36"
  ],
  "changeHistoryShort": {
    "a23417533e1ee052893baf207ec636c4993c5994": "Ymultichange(Yparameterchange,Ybodychange)",
    "f96a2df38d889f29314c57f4d94227b2e419a11f": "Ymultichange(Yparameterchange,Ybodychange)",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Ybodychange",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Ybodychange",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Ybodychange",
    "48774d0a45d95557affbd6bbaf8035cc9575ef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23417533e1ee052893baf207ec636c4993c5994": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16531. Log more timing information for slow RPCs. Contributed by Chen Zhang.\n",
      "commitDate": "06/09/19 10:28 AM",
      "commitName": "a23417533e1ee052893baf207ec636c4993c5994",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16531. Log more timing information for slow RPCs. Contributed by Chen Zhang.\n",
          "commitDate": "06/09/19 10:28 AM",
          "commitName": "a23417533e1ee052893baf207ec636c4993c5994",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "26/07/19 1:53 AM",
          "commitNameOld": "07530314c2130ecd1525682c59bf51f15b82c024",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 42.36,
          "commitsBetweenForRepo": 406,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  void logSlowRpcCalls(String methodName, Call call, long processingTime) {\n+  void logSlowRpcCalls(String methodName, Call call,\n+      ProcessingDetails details) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n+    long processingTime \u003d\n+            details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n-      LOG.warn(\"Slow RPC : {} took {} {} to process from client {}\",\n-          methodName, processingTime, RpcMetrics.TIMEUNIT, call);\n+      LOG.warn(\n+          \"Slow RPC : {} took {} {} to process from client {},\"\n+              + \" the processing detail is {}\",\n+          methodName, processingTime, RpcMetrics.TIMEUNIT, call,\n+          details.toString());\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void logSlowRpcCalls(String methodName, Call call,\n      ProcessingDetails details) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    long processingTime \u003d\n            details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      LOG.warn(\n          \"Slow RPC : {} took {} {} to process from client {},\"\n              + \" the processing detail is {}\",\n          methodName, processingTime, RpcMetrics.TIMEUNIT, call,\n          details.toString());\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[methodName-String, call-Call, processingTime-long]",
            "newValue": "[methodName-String, call-Call, details-ProcessingDetails]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16531. Log more timing information for slow RPCs. Contributed by Chen Zhang.\n",
          "commitDate": "06/09/19 10:28 AM",
          "commitName": "a23417533e1ee052893baf207ec636c4993c5994",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "26/07/19 1:53 AM",
          "commitNameOld": "07530314c2130ecd1525682c59bf51f15b82c024",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 42.36,
          "commitsBetweenForRepo": 406,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  void logSlowRpcCalls(String methodName, Call call, long processingTime) {\n+  void logSlowRpcCalls(String methodName, Call call,\n+      ProcessingDetails details) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n+    long processingTime \u003d\n+            details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n-      LOG.warn(\"Slow RPC : {} took {} {} to process from client {}\",\n-          methodName, processingTime, RpcMetrics.TIMEUNIT, call);\n+      LOG.warn(\n+          \"Slow RPC : {} took {} {} to process from client {},\"\n+              + \" the processing detail is {}\",\n+          methodName, processingTime, RpcMetrics.TIMEUNIT, call,\n+          details.toString());\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void logSlowRpcCalls(String methodName, Call call,\n      ProcessingDetails details) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    long processingTime \u003d\n            details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      LOG.warn(\n          \"Slow RPC : {} took {} {} to process from client {},\"\n              + \" the processing detail is {}\",\n          methodName, processingTime, RpcMetrics.TIMEUNIT, call,\n          details.toString());\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "f96a2df38d889f29314c57f4d94227b2e419a11f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
      "commitDate": "23/05/19 10:28 AM",
      "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
      "commitAuthor": "Christopher Gregorian",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
          "commitDate": "23/05/19 10:28 AM",
          "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
          "commitAuthor": "Christopher Gregorian",
          "commitDateOld": "07/05/19 5:48 PM",
          "commitNameOld": "713e8a27aea03f302b7a7d58769c967958f6e46a",
          "commitAuthorOld": "Peter Bacsko",
          "daysBetweenCommits": 15.69,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,18 @@\n-  void logSlowRpcCalls(String methodName, int processingTime) {\n+  void logSlowRpcCalls(String methodName, Call call, long processingTime) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n-      if(LOG.isWarnEnabled()) {\n-        String client \u003d CurCall.get().toString();\n-        LOG.warn(\n-            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n-                \" milliseconds to process from client \" + client);\n-      }\n+      LOG.warn(\"Slow RPC : {} took {} {} to process from client {}\",\n+          methodName, processingTime, RpcMetrics.TIMEUNIT, call);\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void logSlowRpcCalls(String methodName, Call call, long processingTime) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      LOG.warn(\"Slow RPC : {} took {} {} to process from client {}\",\n          methodName, processingTime, RpcMetrics.TIMEUNIT, call);\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[methodName-String, processingTime-int]",
            "newValue": "[methodName-String, call-Call, processingTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
          "commitDate": "23/05/19 10:28 AM",
          "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
          "commitAuthor": "Christopher Gregorian",
          "commitDateOld": "07/05/19 5:48 PM",
          "commitNameOld": "713e8a27aea03f302b7a7d58769c967958f6e46a",
          "commitAuthorOld": "Peter Bacsko",
          "daysBetweenCommits": 15.69,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,18 @@\n-  void logSlowRpcCalls(String methodName, int processingTime) {\n+  void logSlowRpcCalls(String methodName, Call call, long processingTime) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n-      if(LOG.isWarnEnabled()) {\n-        String client \u003d CurCall.get().toString();\n-        LOG.warn(\n-            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n-                \" milliseconds to process from client \" + client);\n-      }\n+      LOG.warn(\"Slow RPC : {} took {} {} to process from client {}\",\n+          methodName, processingTime, RpcMetrics.TIMEUNIT, call);\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void logSlowRpcCalls(String methodName, Call call, long processingTime) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      LOG.warn(\"Slow RPC : {} took {} {} to process from client {}\",\n          methodName, processingTime, RpcMetrics.TIMEUNIT, call);\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 2:04 PM",
      "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   void logSlowRpcCalls(String methodName, int processingTime) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n       if(LOG.isWarnEnabled()) {\n-        String client \u003d CurCall.get().connection.toString();\n+        String client \u003d CurCall.get().toString();\n         LOG.warn(\n             \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                 \" milliseconds to process from client \" + client);\n       }\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void logSlowRpcCalls(String methodName, int processingTime) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      if(LOG.isWarnEnabled()) {\n        String client \u003d CurCall.get().toString();\n        LOG.warn(\n            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                \" milliseconds to process from client \" + client);\n      }\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 9:44 AM",
      "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   void logSlowRpcCalls(String methodName, int processingTime) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n       if(LOG.isWarnEnabled()) {\n-        String client \u003d CurCall.get().toString();\n+        String client \u003d CurCall.get().connection.toString();\n         LOG.warn(\n             \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                 \" milliseconds to process from client \" + client);\n       }\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void logSlowRpcCalls(String methodName, int processingTime) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      if(LOG.isWarnEnabled()) {\n        String client \u003d CurCall.get().connection.toString();\n        LOG.warn(\n            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                \" milliseconds to process from client \" + client);\n      }\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 11:22 AM",
      "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 21.93,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   void logSlowRpcCalls(String methodName, int processingTime) {\n     final int deviation \u003d 3;\n \n     // 1024 for minSampleSize just a guess -- not a number computed based on\n     // sample size analysis. It is chosen with the hope that this\n     // number is high enough to avoid spurious logging, yet useful\n     // in practice.\n     final int minSampleSize \u003d 1024;\n     final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n         (rpcMetrics.getProcessingStdDev() * deviation);\n \n     if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n         (processingTime \u003e threeSigma)) {\n       if(LOG.isWarnEnabled()) {\n-        String client \u003d CurCall.get().connection.toString();\n+        String client \u003d CurCall.get().toString();\n         LOG.warn(\n             \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                 \" milliseconds to process from client \" + client);\n       }\n       rpcMetrics.incrSlowRpc();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void logSlowRpcCalls(String methodName, int processingTime) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      if(LOG.isWarnEnabled()) {\n        String client \u003d CurCall.get().toString();\n        LOG.warn(\n            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                \" milliseconds to process from client \" + client);\n      }\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "48774d0a45d95557affbd6bbaf8035cc9575ef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12325. RPC Metrics : Add the ability track and log slow RPCs. Contributed by Anu Engineer\n",
      "commitDate": "24/08/15 2:31 PM",
      "commitName": "48774d0a45d95557affbd6bbaf8035cc9575ef36",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,22 @@\n+  void logSlowRpcCalls(String methodName, int processingTime) {\n+    final int deviation \u003d 3;\n+\n+    // 1024 for minSampleSize just a guess -- not a number computed based on\n+    // sample size analysis. It is chosen with the hope that this\n+    // number is high enough to avoid spurious logging, yet useful\n+    // in practice.\n+    final int minSampleSize \u003d 1024;\n+    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n+        (rpcMetrics.getProcessingStdDev() * deviation);\n+\n+    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n+        (processingTime \u003e threeSigma)) {\n+      if(LOG.isWarnEnabled()) {\n+        String client \u003d CurCall.get().connection.toString();\n+        LOG.warn(\n+            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n+                \" milliseconds to process from client \" + client);\n+      }\n+      rpcMetrics.incrSlowRpc();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void logSlowRpcCalls(String methodName, int processingTime) {\n    final int deviation \u003d 3;\n\n    // 1024 for minSampleSize just a guess -- not a number computed based on\n    // sample size analysis. It is chosen with the hope that this\n    // number is high enough to avoid spurious logging, yet useful\n    // in practice.\n    final int minSampleSize \u003d 1024;\n    final double threeSigma \u003d rpcMetrics.getProcessingMean() +\n        (rpcMetrics.getProcessingStdDev() * deviation);\n\n    if ((rpcMetrics.getProcessingSampleCount() \u003e minSampleSize) \u0026\u0026\n        (processingTime \u003e threeSigma)) {\n      if(LOG.isWarnEnabled()) {\n        String client \u003d CurCall.get().connection.toString();\n        LOG.warn(\n            \"Slow RPC : \" + methodName + \" took \" + processingTime +\n                \" milliseconds to process from client \" + client);\n      }\n      rpcMetrics.incrSlowRpc();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}