{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetworkTopology.java",
  "functionName": "countNumOfAvailableNodes",
  "functionId": "countNumOfAvailableNodes___scope-String__excludedNodes-Collection__Node__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
  "functionStartLine": 653,
  "functionEndLine": 699,
  "numCommitsSeen": 55,
  "timeTaken": 2896,
  "changeHistory": [
    "1189af4746919774035f5d64ccb4d2ce21905aaa",
    "84f763884021980c456e2ebc21c1a1c1b18fec6c",
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
    "eab15af12c114eef4e9abd9af2ba03b0ab2cc441",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "1189af4746919774035f5d64ccb4d2ce21905aaa": "Ybodychange",
    "84f763884021980c456e2ebc21c1a1c1b18fec6c": "Ybodychange",
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470": "Ybodychange",
    "eab15af12c114eef4e9abd9af2ba03b0ab2cc441": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1189af4746919774035f5d64ccb4d2ce21905aaa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15263. Fix the logic of scope and excluded scope in Network Topology. Contributed by Ayush Saxena.\n",
      "commitDate": "08/04/20 3:25 AM",
      "commitName": "1189af4746919774035f5d64ccb4d2ce21905aaa",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "17/02/20 11:13 AM",
      "commitNameOld": "84f763884021980c456e2ebc21c1a1c1b18fec6c",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 50.63,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   public int countNumOfAvailableNodes(String scope,\n                                       Collection\u003cNode\u003e excludedNodes) {\n     boolean isExcluded\u003dfalse;\n     if (scope.startsWith(\"~\")) {\n       isExcluded\u003dtrue;\n       scope\u003dscope.substring(1);\n     }\n     scope \u003d NodeBase.normalize(scope);\n     int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n     int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n     netlock.readLock().lock();\n     try {\n       if (excludedNodes !\u003d null) {\n         for (Node node : excludedNodes) {\n           node \u003d getNode(NodeBase.getPath(node));\n           if (node \u003d\u003d null) {\n             continue;\n           }\n-          if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n-              .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n+          if (isNodeInScope(node, scope)) {\n             if (node instanceof InnerNode) {\n               excludedCountInScope +\u003d ((InnerNode) node).getNumOfLeaves();\n             } else {\n               excludedCountInScope++;\n             }\n           } else {\n             excludedCountOffScope++;\n           }\n         }\n       }\n       Node n \u003d getNode(scope);\n       int scopeNodeCount \u003d 0;\n       if (n !\u003d null) {\n         scopeNodeCount++;\n       }\n       if (n instanceof InnerNode) {\n         scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n       }\n       if (isExcluded) {\n         return clusterMap.getNumOfLeaves() - scopeNodeCount\n             - excludedCountOffScope;\n       } else {\n         return scopeNodeCount - excludedCountInScope;\n       }\n     } finally {\n       netlock.readLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n    int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      if (excludedNodes !\u003d null) {\n        for (Node node : excludedNodes) {\n          node \u003d getNode(NodeBase.getPath(node));\n          if (node \u003d\u003d null) {\n            continue;\n          }\n          if (isNodeInScope(node, scope)) {\n            if (node instanceof InnerNode) {\n              excludedCountInScope +\u003d ((InnerNode) node).getNumOfLeaves();\n            } else {\n              excludedCountInScope++;\n            }\n          } else {\n            excludedCountOffScope++;\n          }\n        }\n      }\n      Node n \u003d getNode(scope);\n      int scopeNodeCount \u003d 0;\n      if (n !\u003d null) {\n        scopeNodeCount++;\n      }\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves() - scopeNodeCount\n            - excludedCountOffScope;\n      } else {\n        return scopeNodeCount - excludedCountInScope;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "84f763884021980c456e2ebc21c1a1c1b18fec6c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13666. Supporting rack exclusion in countNumOfAvailableNodes in NetworkTopology. Contributed by Inigo Goiri.\n",
      "commitDate": "17/02/20 11:13 AM",
      "commitName": "84f763884021980c456e2ebc21c1a1c1b18fec6c",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "15/11/19 12:16 PM",
      "commitNameOld": "c892a879ddce3abfd51c8609c81148bf6e4f9daa",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 93.96,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public int countNumOfAvailableNodes(String scope,\n                                       Collection\u003cNode\u003e excludedNodes) {\n     boolean isExcluded\u003dfalse;\n     if (scope.startsWith(\"~\")) {\n       isExcluded\u003dtrue;\n       scope\u003dscope.substring(1);\n     }\n     scope \u003d NodeBase.normalize(scope);\n     int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n     int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n     netlock.readLock().lock();\n     try {\n       if (excludedNodes !\u003d null) {\n         for (Node node : excludedNodes) {\n           node \u003d getNode(NodeBase.getPath(node));\n           if (node \u003d\u003d null) {\n             continue;\n           }\n           if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n               .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n-            excludedCountInScope++;\n+            if (node instanceof InnerNode) {\n+              excludedCountInScope +\u003d ((InnerNode) node).getNumOfLeaves();\n+            } else {\n+              excludedCountInScope++;\n+            }\n           } else {\n             excludedCountOffScope++;\n           }\n         }\n       }\n       Node n \u003d getNode(scope);\n       int scopeNodeCount \u003d 0;\n       if (n !\u003d null) {\n         scopeNodeCount++;\n       }\n       if (n instanceof InnerNode) {\n         scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n       }\n       if (isExcluded) {\n         return clusterMap.getNumOfLeaves() - scopeNodeCount\n             - excludedCountOffScope;\n       } else {\n         return scopeNodeCount - excludedCountInScope;\n       }\n     } finally {\n       netlock.readLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n    int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      if (excludedNodes !\u003d null) {\n        for (Node node : excludedNodes) {\n          node \u003d getNode(NodeBase.getPath(node));\n          if (node \u003d\u003d null) {\n            continue;\n          }\n          if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n              .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n            if (node instanceof InnerNode) {\n              excludedCountInScope +\u003d ((InnerNode) node).getNumOfLeaves();\n            } else {\n              excludedCountInScope++;\n            }\n          } else {\n            excludedCountOffScope++;\n          }\n        }\n      }\n      Node n \u003d getNode(scope);\n      int scopeNodeCount \u003d 0;\n      if (n !\u003d null) {\n        scopeNodeCount++;\n      }\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves() - scopeNodeCount\n            - excludedCountOffScope;\n      } else {\n        return scopeNodeCount - excludedCountInScope;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "1268cf5fbe4458fa75ad0662512d352f9e8d3470": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10320. Rack failures may result in NN terminate. (Xiao Chen via mingma)\n",
      "commitDate": "04/05/16 5:02 PM",
      "commitName": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "19/03/16 2:02 PM",
      "commitNameOld": "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 46.13,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public int countNumOfAvailableNodes(String scope,\n                                       Collection\u003cNode\u003e excludedNodes) {\n     boolean isExcluded\u003dfalse;\n     if (scope.startsWith(\"~\")) {\n       isExcluded\u003dtrue;\n       scope\u003dscope.substring(1);\n     }\n     scope \u003d NodeBase.normalize(scope);\n     int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n     int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n     netlock.readLock().lock();\n     try {\n-      for (Node node : excludedNodes) {\n-        node \u003d getNode(NodeBase.getPath(node));\n-        if (node \u003d\u003d null) {\n-          continue;\n-        }\n-        if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n-            .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n-          excludedCountInScope++;\n-        } else {\n-          excludedCountOffScope++;\n+      if (excludedNodes !\u003d null) {\n+        for (Node node : excludedNodes) {\n+          node \u003d getNode(NodeBase.getPath(node));\n+          if (node \u003d\u003d null) {\n+            continue;\n+          }\n+          if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n+              .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n+            excludedCountInScope++;\n+          } else {\n+            excludedCountOffScope++;\n+          }\n         }\n       }\n       Node n \u003d getNode(scope);\n       int scopeNodeCount \u003d 0;\n       if (n !\u003d null) {\n         scopeNodeCount++;\n       }\n       if (n instanceof InnerNode) {\n         scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n       }\n       if (isExcluded) {\n         return clusterMap.getNumOfLeaves() - scopeNodeCount\n             - excludedCountOffScope;\n       } else {\n         return scopeNodeCount - excludedCountInScope;\n       }\n     } finally {\n       netlock.readLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n    int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      if (excludedNodes !\u003d null) {\n        for (Node node : excludedNodes) {\n          node \u003d getNode(NodeBase.getPath(node));\n          if (node \u003d\u003d null) {\n            continue;\n          }\n          if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n              .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n            excludedCountInScope++;\n          } else {\n            excludedCountOffScope++;\n          }\n        }\n      }\n      Node n \u003d getNode(scope);\n      int scopeNodeCount \u003d 0;\n      if (n !\u003d null) {\n        scopeNodeCount++;\n      }\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves() - scopeNodeCount\n            - excludedCountOffScope;\n      } else {\n        return scopeNodeCount - excludedCountInScope;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "eab15af12c114eef4e9abd9af2ba03b0ab2cc441": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10131. NetWorkTopology#countNumOfAvailableNodes() is returning wrong value if excluded nodes passed are not part of the cluster tree (Contributed by Vinayakumar B)\n",
      "commitDate": "21/09/14 10:55 PM",
      "commitName": "eab15af12c114eef4e9abd9af2ba03b0ab2cc441",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "18/09/14 5:49 PM",
      "commitNameOld": "8e73084491c9f317bc8cc3590f93ca67a63687a8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,42 @@\n   public int countNumOfAvailableNodes(String scope,\n                                       Collection\u003cNode\u003e excludedNodes) {\n     boolean isExcluded\u003dfalse;\n     if (scope.startsWith(\"~\")) {\n       isExcluded\u003dtrue;\n       scope\u003dscope.substring(1);\n     }\n     scope \u003d NodeBase.normalize(scope);\n-    int count\u003d0; // the number of nodes in both scope \u0026 excludedNodes\n+    int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n+    int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n     netlock.readLock().lock();\n     try {\n-      for(Node node:excludedNodes) {\n-        if ((NodeBase.getPath(node)+NodeBase.PATH_SEPARATOR_STR).\n-            startsWith(scope+NodeBase.PATH_SEPARATOR_STR)) {\n-          count++;\n+      for (Node node : excludedNodes) {\n+        node \u003d getNode(NodeBase.getPath(node));\n+        if (node \u003d\u003d null) {\n+          continue;\n+        }\n+        if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n+            .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n+          excludedCountInScope++;\n+        } else {\n+          excludedCountOffScope++;\n         }\n       }\n-      Node n\u003dgetNode(scope);\n-      int scopeNodeCount\u003d1;\n+      Node n \u003d getNode(scope);\n+      int scopeNodeCount \u003d 0;\n+      if (n !\u003d null) {\n+        scopeNodeCount++;\n+      }\n       if (n instanceof InnerNode) {\n         scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n       }\n       if (isExcluded) {\n-        return clusterMap.getNumOfLeaves()-\n-          scopeNodeCount-excludedNodes.size()+count;\n+        return clusterMap.getNumOfLeaves() - scopeNodeCount\n+            - excludedCountOffScope;\n       } else {\n-        return scopeNodeCount-count;\n+        return scopeNodeCount - excludedCountInScope;\n       }\n     } finally {\n       netlock.readLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int excludedCountInScope \u003d 0; // the number of nodes in both scope \u0026 excludedNodes\n    int excludedCountOffScope \u003d 0; // the number of nodes outside scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      for (Node node : excludedNodes) {\n        node \u003d getNode(NodeBase.getPath(node));\n        if (node \u003d\u003d null) {\n          continue;\n        }\n        if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR)\n            .startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) {\n          excludedCountInScope++;\n        } else {\n          excludedCountOffScope++;\n        }\n      }\n      Node n \u003d getNode(scope);\n      int scopeNodeCount \u003d 0;\n      if (n !\u003d null) {\n        scopeNodeCount++;\n      }\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves() - scopeNodeCount\n            - excludedCountOffScope;\n      } else {\n        return scopeNodeCount - excludedCountInScope;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int count\u003d0; // the number of nodes in both scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      for(Node node:excludedNodes) {\n        if ((NodeBase.getPath(node)+NodeBase.PATH_SEPARATOR_STR).\n            startsWith(scope+NodeBase.PATH_SEPARATOR_STR)) {\n          count++;\n        }\n      }\n      Node n\u003dgetNode(scope);\n      int scopeNodeCount\u003d1;\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves()-\n          scopeNodeCount-excludedNodes.size()+count;\n      } else {\n        return scopeNodeCount-count;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int count\u003d0; // the number of nodes in both scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      for(Node node:excludedNodes) {\n        if ((NodeBase.getPath(node)+NodeBase.PATH_SEPARATOR_STR).\n            startsWith(scope+NodeBase.PATH_SEPARATOR_STR)) {\n          count++;\n        }\n      }\n      Node n\u003dgetNode(scope);\n      int scopeNodeCount\u003d1;\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves()-\n          scopeNodeCount-excludedNodes.size()+count;\n      } else {\n        return scopeNodeCount-count;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int count\u003d0; // the number of nodes in both scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      for(Node node:excludedNodes) {\n        if ((NodeBase.getPath(node)+NodeBase.PATH_SEPARATOR_STR).\n            startsWith(scope+NodeBase.PATH_SEPARATOR_STR)) {\n          count++;\n        }\n      }\n      Node n\u003dgetNode(scope);\n      int scopeNodeCount\u003d1;\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves()-\n          scopeNodeCount-excludedNodes.size()+count;\n      } else {\n        return scopeNodeCount-count;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,32 @@\n+  public int countNumOfAvailableNodes(String scope,\n+                                      Collection\u003cNode\u003e excludedNodes) {\n+    boolean isExcluded\u003dfalse;\n+    if (scope.startsWith(\"~\")) {\n+      isExcluded\u003dtrue;\n+      scope\u003dscope.substring(1);\n+    }\n+    scope \u003d NodeBase.normalize(scope);\n+    int count\u003d0; // the number of nodes in both scope \u0026 excludedNodes\n+    netlock.readLock().lock();\n+    try {\n+      for(Node node:excludedNodes) {\n+        if ((NodeBase.getPath(node)+NodeBase.PATH_SEPARATOR_STR).\n+            startsWith(scope+NodeBase.PATH_SEPARATOR_STR)) {\n+          count++;\n+        }\n+      }\n+      Node n\u003dgetNode(scope);\n+      int scopeNodeCount\u003d1;\n+      if (n instanceof InnerNode) {\n+        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n+      }\n+      if (isExcluded) {\n+        return clusterMap.getNumOfLeaves()-\n+          scopeNodeCount-excludedNodes.size()+count;\n+      } else {\n+        return scopeNodeCount-count;\n+      }\n+    } finally {\n+      netlock.readLock().unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int countNumOfAvailableNodes(String scope,\n                                      Collection\u003cNode\u003e excludedNodes) {\n    boolean isExcluded\u003dfalse;\n    if (scope.startsWith(\"~\")) {\n      isExcluded\u003dtrue;\n      scope\u003dscope.substring(1);\n    }\n    scope \u003d NodeBase.normalize(scope);\n    int count\u003d0; // the number of nodes in both scope \u0026 excludedNodes\n    netlock.readLock().lock();\n    try {\n      for(Node node:excludedNodes) {\n        if ((NodeBase.getPath(node)+NodeBase.PATH_SEPARATOR_STR).\n            startsWith(scope+NodeBase.PATH_SEPARATOR_STR)) {\n          count++;\n        }\n      }\n      Node n\u003dgetNode(scope);\n      int scopeNodeCount\u003d1;\n      if (n instanceof InnerNode) {\n        scopeNodeCount\u003d((InnerNode)n).getNumOfLeaves();\n      }\n      if (isExcluded) {\n        return clusterMap.getNumOfLeaves()-\n          scopeNodeCount-excludedNodes.size()+count;\n      } else {\n        return scopeNodeCount-count;\n      }\n    } finally {\n      netlock.readLock().unlock();\n    }\n  }",
      "path": "src/java/org/apache/hadoop/net/NetworkTopology.java"
    }
  }
}