{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosmosDBDocumentStoreWriter.java",
  "functionName": "fetchLatestDoc",
  "functionId": "fetchLatestDoc___collectionType-CollectionType(modifiers-final)__documentId-String(modifiers-final)__eTagStrBuilder-StringBuilder",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java",
  "functionStartLine": 241,
  "functionEndLine": 270,
  "numCommitsSeen": 3,
  "timeTaken": 1480,
  "changeHistory": [
    "ccaa99c9235e0c6922e56f93254583eca49a12e1",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": "Ymultichange(Ymodifierchange,Ybodychange)",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ccaa99c9235e0c6922e56f93254583eca49a12e1": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
      "commitDate": "10/07/19 9:49 PM",
      "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
          "commitDate": "10/07/19 9:49 PM",
          "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "12/04/19 6:28 PM",
          "commitNameOld": "1943db557124439f9f41c18a618455ccf4c3e6cc",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 89.14,
          "commitsBetweenForRepo": 592,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  private TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n+  TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n       final String documentId, StringBuilder eTagStrBuilder) {\n     final String documentLink \u003d String.format(DOCUMENT_LINK, databaseName,\n         collectionType.getCollectionName(), documentId);\n     try {\n       Document latestDocument \u003d client.readDocument(documentLink, new\n-          RequestOptions()).getResource();\n+          RequestOptions()).toBlocking().single().getResource();\n       TimelineDoc timelineDoc;\n       switch (collectionType) {\n       case FLOW_RUN:\n         timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n             FlowRunDocument.class);\n         break;\n       case FLOW_ACTIVITY:\n         timelineDoc \u003d (TimelineDoc) latestDocument.toObject(FlowActivityDocument\n             .class);\n         break;\n       default:\n         timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n             TimelineEntityDocument.class);\n       }\n       eTagStrBuilder.append(latestDocument.getETag());\n       return timelineDoc;\n     } catch (Exception e) {\n       LOG.debug(\"No previous Document found with id : {} for Collection\" +\n           \" : {} under Database : {}\", documentId, collectionType\n           .getCollectionName(), databaseName);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n      final String documentId, StringBuilder eTagStrBuilder) {\n    final String documentLink \u003d String.format(DOCUMENT_LINK, databaseName,\n        collectionType.getCollectionName(), documentId);\n    try {\n      Document latestDocument \u003d client.readDocument(documentLink, new\n          RequestOptions()).toBlocking().single().getResource();\n      TimelineDoc timelineDoc;\n      switch (collectionType) {\n      case FLOW_RUN:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n            FlowRunDocument.class);\n        break;\n      case FLOW_ACTIVITY:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(FlowActivityDocument\n            .class);\n        break;\n      default:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n            TimelineEntityDocument.class);\n      }\n      eTagStrBuilder.append(latestDocument.getETag());\n      return timelineDoc;\n    } catch (Exception e) {\n      LOG.debug(\"No previous Document found with id : {} for Collection\" +\n          \" : {} under Database : {}\", documentId, collectionType\n          .getCollectionName(), databaseName);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16381. The JSON License is included in binary tarball via azure-documentdb:1.16.2. Contributed by Sushil Ks.\n",
          "commitDate": "10/07/19 9:49 PM",
          "commitName": "ccaa99c9235e0c6922e56f93254583eca49a12e1",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "12/04/19 6:28 PM",
          "commitNameOld": "1943db557124439f9f41c18a618455ccf4c3e6cc",
          "commitAuthorOld": "Gabor Bota",
          "daysBetweenCommits": 89.14,
          "commitsBetweenForRepo": 592,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  private TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n+  TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n       final String documentId, StringBuilder eTagStrBuilder) {\n     final String documentLink \u003d String.format(DOCUMENT_LINK, databaseName,\n         collectionType.getCollectionName(), documentId);\n     try {\n       Document latestDocument \u003d client.readDocument(documentLink, new\n-          RequestOptions()).getResource();\n+          RequestOptions()).toBlocking().single().getResource();\n       TimelineDoc timelineDoc;\n       switch (collectionType) {\n       case FLOW_RUN:\n         timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n             FlowRunDocument.class);\n         break;\n       case FLOW_ACTIVITY:\n         timelineDoc \u003d (TimelineDoc) latestDocument.toObject(FlowActivityDocument\n             .class);\n         break;\n       default:\n         timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n             TimelineEntityDocument.class);\n       }\n       eTagStrBuilder.append(latestDocument.getETag());\n       return timelineDoc;\n     } catch (Exception e) {\n       LOG.debug(\"No previous Document found with id : {} for Collection\" +\n           \" : {} under Database : {}\", documentId, collectionType\n           .getCollectionName(), databaseName);\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n      final String documentId, StringBuilder eTagStrBuilder) {\n    final String documentLink \u003d String.format(DOCUMENT_LINK, databaseName,\n        collectionType.getCollectionName(), documentId);\n    try {\n      Document latestDocument \u003d client.readDocument(documentLink, new\n          RequestOptions()).toBlocking().single().getResource();\n      TimelineDoc timelineDoc;\n      switch (collectionType) {\n      case FLOW_RUN:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n            FlowRunDocument.class);\n        break;\n      case FLOW_ACTIVITY:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(FlowActivityDocument\n            .class);\n        break;\n      default:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n            TimelineEntityDocument.class);\n      }\n      eTagStrBuilder.append(latestDocument.getETag());\n      return timelineDoc;\n    } catch (Exception e) {\n      LOG.debug(\"No previous Document found with id : {} for Collection\" +\n          \" : {} under Database : {}\", documentId, collectionType\n          .getCollectionName(), databaseName);\n      return null;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java",
          "extendedDetails": {}
        }
      ]
    },
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,30 @@\n+  private TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n+      final String documentId, StringBuilder eTagStrBuilder) {\n+    final String documentLink \u003d String.format(DOCUMENT_LINK, databaseName,\n+        collectionType.getCollectionName(), documentId);\n+    try {\n+      Document latestDocument \u003d client.readDocument(documentLink, new\n+          RequestOptions()).getResource();\n+      TimelineDoc timelineDoc;\n+      switch (collectionType) {\n+      case FLOW_RUN:\n+        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n+            FlowRunDocument.class);\n+        break;\n+      case FLOW_ACTIVITY:\n+        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(FlowActivityDocument\n+            .class);\n+        break;\n+      default:\n+        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n+            TimelineEntityDocument.class);\n+      }\n+      eTagStrBuilder.append(latestDocument.getETag());\n+      return timelineDoc;\n+    } catch (Exception e) {\n+      LOG.debug(\"No previous Document found with id : {} for Collection\" +\n+          \" : {} under Database : {}\", documentId, collectionType\n+          .getCollectionName(), databaseName);\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelineDoc fetchLatestDoc(final CollectionType collectionType,\n      final String documentId, StringBuilder eTagStrBuilder) {\n    final String documentLink \u003d String.format(DOCUMENT_LINK, databaseName,\n        collectionType.getCollectionName(), documentId);\n    try {\n      Document latestDocument \u003d client.readDocument(documentLink, new\n          RequestOptions()).getResource();\n      TimelineDoc timelineDoc;\n      switch (collectionType) {\n      case FLOW_RUN:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n            FlowRunDocument.class);\n        break;\n      case FLOW_ACTIVITY:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(FlowActivityDocument\n            .class);\n        break;\n      default:\n        timelineDoc \u003d (TimelineDoc) latestDocument.toObject(\n            TimelineEntityDocument.class);\n      }\n      eTagStrBuilder.append(latestDocument.getETag());\n      return timelineDoc;\n    } catch (Exception e) {\n      LOG.debug(\"No previous Document found with id : {} for Collection\" +\n          \" : {} under Database : {}\", documentId, collectionType\n          .getCollectionName(), databaseName);\n      return null;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/writer/cosmosdb/CosmosDBDocumentStoreWriter.java"
    }
  }
}