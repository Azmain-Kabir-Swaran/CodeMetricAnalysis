{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AmIpFilter.java",
  "functionName": "doFilter",
  "functionId": "doFilter___req-ServletRequest__resp-ServletResponse__chain-FilterChain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
  "functionStartLine": 134,
  "functionEndLine": 188,
  "numCommitsSeen": 15,
  "timeTaken": 2637,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "8bf1949c0efed700781eb47cf18f9f88443ed506",
    "736d33cddd88a0cec925a451940b2523999a9c51",
    "e556198e71df6be3a83e5598265cb702fc7a668b",
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
    "4224e613409ec97ff52ba28a7cedfe0485577257",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
    "c415dee2b7300cd9dc76e474110bdab41b7a076b",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "8bf1949c0efed700781eb47cf18f9f88443ed506": "Ybodychange",
    "736d33cddd88a0cec925a451940b2523999a9c51": "Ybodychange",
    "e556198e71df6be3a83e5598265cb702fc7a668b": "Ybodychange",
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c": "Ybodychange",
    "4224e613409ec97ff52ba28a7cedfe0485577257": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68": "Ybodychange",
    "c415dee2b7300cd9dc76e474110bdab41b7a076b": "Ybodychange",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/05/18 4:48 PM",
      "commitNameOld": "6b74f5d7fc509c55c331249256eec78b7e53b6ce",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 287.98,
      "commitsBetweenForRepo": 2247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,55 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     ProxyUtils.rejectNonHttpRequests(req);\n \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n-    }\n+    LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n \n     if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n       StringBuilder redirect \u003d new StringBuilder(findRedirectUrl());\n \n       redirect.append(httpReq.getRequestURI());\n \n       int insertPoint \u003d redirect.indexOf(PROXY_PATH);\n \n       if (insertPoint \u003e\u003d 0) {\n         // Add /redirect as the second component of the path so that the RM web\n         // proxy knows that this request was a redirect.\n         insertPoint +\u003d PROXY_PATH.length();\n         redirect.insert(insertPoint, \"/redirect\");\n       }\n       // add the query parameters on the redirect if there were any\n       String queryString \u003d httpReq.getQueryString();\n       if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n         redirect.append(\"?\");\n         redirect.append(queryString);\n       }\n \n       ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\n     } else {\n       String user \u003d null;\n \n       if (httpReq.getCookies() !\u003d null) {\n         for(Cookie c: httpReq.getCookies()) {\n           if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n             user \u003d c.getValue();\n             break;\n           }\n         }\n       }\n       if (user \u003d\u003d null) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Could not find \"\n-              + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n-              + \" cookie, so user will not be set\");\n-        }\n+        LOG.debug(\"Could not find {} cookie, so user will not be set\",\n+            WebAppProxyServlet.PROXY_USER_COOKIE_NAME);\n \n         chain.doFilter(req, resp);\n       } else {\n         AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n         ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n             principal);\n \n         chain.doFilter(requestWrapper, resp);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    ProxyUtils.rejectNonHttpRequests(req);\n\n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n\n    LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n\n    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      StringBuilder redirect \u003d new StringBuilder(findRedirectUrl());\n\n      redirect.append(httpReq.getRequestURI());\n\n      int insertPoint \u003d redirect.indexOf(PROXY_PATH);\n\n      if (insertPoint \u003e\u003d 0) {\n        // Add /redirect as the second component of the path so that the RM web\n        // proxy knows that this request was a redirect.\n        insertPoint +\u003d PROXY_PATH.length();\n        redirect.insert(insertPoint, \"/redirect\");\n      }\n      // add the query parameters on the redirect if there were any\n      String queryString \u003d httpReq.getQueryString();\n      if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n        redirect.append(\"?\");\n        redirect.append(queryString);\n      }\n\n      ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\n    } else {\n      String user \u003d null;\n\n      if (httpReq.getCookies() !\u003d null) {\n        for(Cookie c: httpReq.getCookies()) {\n          if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n            user \u003d c.getValue();\n            break;\n          }\n        }\n      }\n      if (user \u003d\u003d null) {\n        LOG.debug(\"Could not find {} cookie, so user will not be set\",\n            WebAppProxyServlet.PROXY_USER_COOKIE_NAME);\n\n        chain.doFilter(req, resp);\n      } else {\n        AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n        ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n            principal);\n\n        chain.doFilter(requestWrapper, resp);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "8bf1949c0efed700781eb47cf18f9f88443ed506": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6615. AmIpFilter drops query parameters on redirect. Contributed by Wilfred Spiegelenburg\n",
      "commitDate": "24/05/17 9:22 AM",
      "commitName": "8bf1949c0efed700781eb47cf18f9f88443ed506",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "03/10/16 2:35 PM",
      "commitNameOld": "736d33cddd88a0cec925a451940b2523999a9c51",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 232.78,
      "commitsBetweenForRepo": 1408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,60 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     ProxyUtils.rejectNonHttpRequests(req);\n \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n     }\n \n     if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n       StringBuilder redirect \u003d new StringBuilder(findRedirectUrl());\n \n       redirect.append(httpReq.getRequestURI());\n \n       int insertPoint \u003d redirect.indexOf(PROXY_PATH);\n \n       if (insertPoint \u003e\u003d 0) {\n         // Add /redirect as the second component of the path so that the RM web\n         // proxy knows that this request was a redirect.\n         insertPoint +\u003d PROXY_PATH.length();\n         redirect.insert(insertPoint, \"/redirect\");\n       }\n+      // add the query parameters on the redirect if there were any\n+      String queryString \u003d httpReq.getQueryString();\n+      if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n+        redirect.append(\"?\");\n+        redirect.append(queryString);\n+      }\n \n       ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\n     } else {\n       String user \u003d null;\n \n       if (httpReq.getCookies() !\u003d null) {\n         for(Cookie c: httpReq.getCookies()) {\n           if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n             user \u003d c.getValue();\n             break;\n           }\n         }\n       }\n       if (user \u003d\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Could not find \"\n               + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n               + \" cookie, so user will not be set\");\n         }\n \n         chain.doFilter(req, resp);\n       } else {\n         AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n         ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n             principal);\n \n         chain.doFilter(requestWrapper, resp);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    ProxyUtils.rejectNonHttpRequests(req);\n\n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n    }\n\n    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      StringBuilder redirect \u003d new StringBuilder(findRedirectUrl());\n\n      redirect.append(httpReq.getRequestURI());\n\n      int insertPoint \u003d redirect.indexOf(PROXY_PATH);\n\n      if (insertPoint \u003e\u003d 0) {\n        // Add /redirect as the second component of the path so that the RM web\n        // proxy knows that this request was a redirect.\n        insertPoint +\u003d PROXY_PATH.length();\n        redirect.insert(insertPoint, \"/redirect\");\n      }\n      // add the query parameters on the redirect if there were any\n      String queryString \u003d httpReq.getQueryString();\n      if (queryString !\u003d null \u0026\u0026 !queryString.isEmpty()) {\n        redirect.append(\"?\");\n        redirect.append(queryString);\n      }\n\n      ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\n    } else {\n      String user \u003d null;\n\n      if (httpReq.getCookies() !\u003d null) {\n        for(Cookie c: httpReq.getCookies()) {\n          if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n            user \u003d c.getValue();\n            break;\n          }\n        }\n      }\n      if (user \u003d\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Could not find \"\n              + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n              + \" cookie, so user will not be set\");\n        }\n\n        chain.doFilter(req, resp);\n      } else {\n        AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n        ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n            principal);\n\n        chain.doFilter(requestWrapper, resp);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "736d33cddd88a0cec925a451940b2523999a9c51": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4767. Network issues can cause persistent RM UI outage. (Daniel Templeton via kasha)\n",
      "commitDate": "03/10/16 2:35 PM",
      "commitName": "736d33cddd88a0cec925a451940b2523999a9c51",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/03/15 4:49 AM",
      "commitNameOld": "e556198e71df6be3a83e5598265cb702fc7a668b",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 558.41,
      "commitsBetweenForRepo": 4154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,54 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     ProxyUtils.rejectNonHttpRequests(req);\n \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n+\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n     }\n+\n     if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n-      String redirectUrl \u003d findRedirectUrl();\n-      String target \u003d redirectUrl + httpReq.getRequestURI();\n-      ProxyUtils.sendRedirect(httpReq,  httpResp,  target);\n-      return;\n-    }\n+      StringBuilder redirect \u003d new StringBuilder(findRedirectUrl());\n \n-    String user \u003d null;\n+      redirect.append(httpReq.getRequestURI());\n \n-    if (httpReq.getCookies() !\u003d null) {\n-      for(Cookie c: httpReq.getCookies()) {\n-        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n-          user \u003d c.getValue();\n-          break;\n+      int insertPoint \u003d redirect.indexOf(PROXY_PATH);\n+\n+      if (insertPoint \u003e\u003d 0) {\n+        // Add /redirect as the second component of the path so that the RM web\n+        // proxy knows that this request was a redirect.\n+        insertPoint +\u003d PROXY_PATH.length();\n+        redirect.insert(insertPoint, \"/redirect\");\n+      }\n+\n+      ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\n+    } else {\n+      String user \u003d null;\n+\n+      if (httpReq.getCookies() !\u003d null) {\n+        for(Cookie c: httpReq.getCookies()) {\n+          if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n+            user \u003d c.getValue();\n+            break;\n+          }\n         }\n       }\n-    }\n-    if (user \u003d\u003d null) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Could not find \" + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n-                 + \" cookie, so user will not be set\");\n+      if (user \u003d\u003d null) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Could not find \"\n+              + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n+              + \" cookie, so user will not be set\");\n+        }\n+\n+        chain.doFilter(req, resp);\n+      } else {\n+        AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n+        ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n+            principal);\n+\n+        chain.doFilter(requestWrapper, resp);\n       }\n-      chain.doFilter(req, resp);\n-    } else {\n-      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n-      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n-          principal);\n-      chain.doFilter(requestWrapper, resp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    ProxyUtils.rejectNonHttpRequests(req);\n\n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n    }\n\n    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      StringBuilder redirect \u003d new StringBuilder(findRedirectUrl());\n\n      redirect.append(httpReq.getRequestURI());\n\n      int insertPoint \u003d redirect.indexOf(PROXY_PATH);\n\n      if (insertPoint \u003e\u003d 0) {\n        // Add /redirect as the second component of the path so that the RM web\n        // proxy knows that this request was a redirect.\n        insertPoint +\u003d PROXY_PATH.length();\n        redirect.insert(insertPoint, \"/redirect\");\n      }\n\n      ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\n    } else {\n      String user \u003d null;\n\n      if (httpReq.getCookies() !\u003d null) {\n        for(Cookie c: httpReq.getCookies()) {\n          if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n            user \u003d c.getValue();\n            break;\n          }\n        }\n      }\n      if (user \u003d\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Could not find \"\n              + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n              + \" cookie, so user will not be set\");\n        }\n\n        chain.doFilter(req, resp);\n      } else {\n        AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n        ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n            principal);\n\n        chain.doFilter(requestWrapper, resp);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "e556198e71df6be3a83e5598265cb702fc7a668b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2213. Change proxy-user cookie log in AmIpFilter to DEBUG.\nContributed by Varun Saxena\n",
      "commitDate": "25/03/15 4:49 AM",
      "commitName": "e556198e71df6be3a83e5598265cb702fc7a668b",
      "commitAuthor": "Xuan",
      "commitDateOld": "12/02/15 10:57 AM",
      "commitNameOld": "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 40.7,
      "commitsBetweenForRepo": 372,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     ProxyUtils.rejectNonHttpRequests(req);\n \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n     }\n     if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n       String redirectUrl \u003d findRedirectUrl();\n       String target \u003d redirectUrl + httpReq.getRequestURI();\n       ProxyUtils.sendRedirect(httpReq,  httpResp,  target);\n       return;\n     }\n \n     String user \u003d null;\n \n     if (httpReq.getCookies() !\u003d null) {\n       for(Cookie c: httpReq.getCookies()) {\n         if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n           user \u003d c.getValue();\n           break;\n         }\n       }\n     }\n     if (user \u003d\u003d null) {\n-      LOG.warn(\"Could not find \" + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n-               + \" cookie, so user will not be set\");\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Could not find \" + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n+                 + \" cookie, so user will not be set\");\n+      }\n       chain.doFilter(req, resp);\n     } else {\n       final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n       ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n           principal);\n       chain.doFilter(requestWrapper, resp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    ProxyUtils.rejectNonHttpRequests(req);\n\n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n    }\n    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d findRedirectUrl();\n      String target \u003d redirectUrl + httpReq.getRequestURI();\n      ProxyUtils.sendRedirect(httpReq,  httpResp,  target);\n      return;\n    }\n\n    String user \u003d null;\n\n    if (httpReq.getCookies() !\u003d null) {\n      for(Cookie c: httpReq.getCookies()) {\n        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n          user \u003d c.getValue();\n          break;\n        }\n      }\n    }\n    if (user \u003d\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Could not find \" + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n                 + \" cookie, so user will not be set\");\n      }\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "83be450acc7fc9bb9f7bbd006e7b0804bf10279c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3147. Clean up RM web proxy code. Contributed by Steve Loughran\n",
      "commitDate": "12/02/15 10:57 AM",
      "commitName": "83be450acc7fc9bb9f7bbd006e7b0804bf10279c",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/03/14 9:20 PM",
      "commitNameOld": "4224e613409ec97ff52ba28a7cedfe0485577257",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 328.61,
      "commitsBetweenForRepo": 2590,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n-    if(!(req instanceof HttpServletRequest)) {\n-      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n-    }\n+    ProxyUtils.rejectNonHttpRequests(req);\n \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Remote address for request is: \" + httpReq.getRemoteAddr());\n+      LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n     }\n-    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n+    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n       String redirectUrl \u003d findRedirectUrl();\n-      redirectUrl \u003d httpResp.encodeRedirectURL(redirectUrl +\n-          httpReq.getRequestURI());\n-      httpResp.sendRedirect(redirectUrl);\n+      String target \u003d redirectUrl + httpReq.getRequestURI();\n+      ProxyUtils.sendRedirect(httpReq,  httpResp,  target);\n       return;\n     }\n \n     String user \u003d null;\n \n     if (httpReq.getCookies() !\u003d null) {\n       for(Cookie c: httpReq.getCookies()) {\n         if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n           user \u003d c.getValue();\n           break;\n         }\n       }\n     }\n-    if(user \u003d\u003d null) {\n-      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n-          +\" cookie, so user will not be set\");\n+    if (user \u003d\u003d null) {\n+      LOG.warn(\"Could not find \" + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n+               + \" cookie, so user will not be set\");\n       chain.doFilter(req, resp);\n     } else {\n       final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n       ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n           principal);\n       chain.doFilter(requestWrapper, resp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    ProxyUtils.rejectNonHttpRequests(req);\n\n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\n    }\n    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d findRedirectUrl();\n      String target \u003d redirectUrl + httpReq.getRequestURI();\n      ProxyUtils.sendRedirect(httpReq,  httpResp,  target);\n      return;\n    }\n\n    String user \u003d null;\n\n    if (httpReq.getCookies() !\u003d null) {\n      for(Cookie c: httpReq.getCookies()) {\n        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n          user \u003d c.getValue();\n          break;\n        }\n      }\n    }\n    if (user \u003d\u003d null) {\n      LOG.warn(\"Could not find \" + WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n               + \" cookie, so user will not be set\");\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "4224e613409ec97ff52ba28a7cedfe0485577257": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1811. Fixed AMFilters in YARN to correctly accept requests from either web-app proxy or the RMs when HA is enabled. Contributed by Robert Kanter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579877 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/14 9:20 PM",
      "commitName": "4224e613409ec97ff52ba28a7cedfe0485577257",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 589.96,
      "commitsBetweenForRepo": 3690,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,40 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     if(!(req instanceof HttpServletRequest)) {\n       throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n     }\n-    \n+\n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Remote address for request is: \" + httpReq.getRemoteAddr());\n     }\n     if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n-      String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n+      String redirectUrl \u003d findRedirectUrl();\n+      redirectUrl \u003d httpResp.encodeRedirectURL(redirectUrl +\n           httpReq.getRequestURI());\n       httpResp.sendRedirect(redirectUrl);\n       return;\n     }\n-    \n+\n     String user \u003d null;\n-    \n+\n     if (httpReq.getCookies() !\u003d null) {\n       for(Cookie c: httpReq.getCookies()) {\n         if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n           user \u003d c.getValue();\n           break;\n         }\n       }\n     }\n     if(user \u003d\u003d null) {\n       LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n           +\" cookie, so user will not be set\");\n       chain.doFilter(req, resp);\n     } else {\n       final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n-      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n+      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n           principal);\n       chain.doFilter(requestWrapper, resp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    if(!(req instanceof HttpServletRequest)) {\n      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n    }\n\n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: \" + httpReq.getRemoteAddr());\n    }\n    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d findRedirectUrl();\n      redirectUrl \u003d httpResp.encodeRedirectURL(redirectUrl +\n          httpReq.getRequestURI());\n      httpResp.sendRedirect(redirectUrl);\n      return;\n    }\n\n    String user \u003d null;\n\n    if (httpReq.getCookies() !\u003d null) {\n      for(Cookie c: httpReq.getCookies()) {\n        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n          user \u003d c.getValue();\n          break;\n        }\n      }\n    }\n    if(user \u003d\u003d null) {\n      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n          +\" cookie, so user will not be set\");\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq,\n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    if(!(req instanceof HttpServletRequest)) {\n      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n    }\n    \n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: \" + httpReq.getRemoteAddr());\n    }\n    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n          httpReq.getRequestURI());\n      httpResp.sendRedirect(redirectUrl);\n      return;\n    }\n    \n    String user \u003d null;\n    \n    if (httpReq.getCookies() !\u003d null) {\n      for(Cookie c: httpReq.getCookies()) {\n        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n          user \u003d c.getValue();\n          break;\n        }\n      }\n    }\n    if(user \u003d\u003d null) {\n      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n          +\" cookie, so user will not be set\");\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java"
      }
    },
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3960. Fix web-proxy to forward request to AM with configured hostname or IP. Contributed by Thomas Graves. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/12 1:14 PM",
      "commitName": "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "23/01/12 1:15 PM",
      "commitNameOld": "c415dee2b7300cd9dc76e474110bdab41b7a076b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 41.0,
      "commitsBetweenForRepo": 379,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     if(!(req instanceof HttpServletRequest)) {\n       throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n     }\n     \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Remote address for request is: \" + httpReq.getRemoteAddr());\n+    }\n     if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n       String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n           httpReq.getRequestURI());\n       httpResp.sendRedirect(redirectUrl);\n       return;\n     }\n     \n     String user \u003d null;\n     \n     if (httpReq.getCookies() !\u003d null) {\n       for(Cookie c: httpReq.getCookies()) {\n         if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n           user \u003d c.getValue();\n           break;\n         }\n       }\n     }\n     if(user \u003d\u003d null) {\n       LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n           +\" cookie, so user will not be set\");\n       chain.doFilter(req, resp);\n     } else {\n       final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n       ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n           principal);\n       chain.doFilter(requestWrapper, resp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    if(!(req instanceof HttpServletRequest)) {\n      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n    }\n    \n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Remote address for request is: \" + httpReq.getRemoteAddr());\n    }\n    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n          httpReq.getRequestURI());\n      httpResp.sendRedirect(redirectUrl);\n      return;\n    }\n    \n    String user \u003d null;\n    \n    if (httpReq.getCookies() !\u003d null) {\n      for(Cookie c: httpReq.getCookies()) {\n        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n          user \u003d c.getValue();\n          break;\n        }\n      }\n    }\n    if(user \u003d\u003d null) {\n      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n          +\" cookie, so user will not be set\");\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "c415dee2b7300cd9dc76e474110bdab41b7a076b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3691. webservices add support to compress response. (Thomas Graves via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1234989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/01/12 1:15 PM",
      "commitName": "c415dee2b7300cd9dc76e474110bdab41b7a076b",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "28/10/11 12:44 AM",
      "commitNameOld": "a39992ea6345a9f29814587604ac61b21c99fc3e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 87.56,
      "commitsBetweenForRepo": 442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   public void doFilter(ServletRequest req, ServletResponse resp,\n       FilterChain chain) throws IOException, ServletException {\n     if(!(req instanceof HttpServletRequest)) {\n       throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n     }\n     \n     HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n     HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n     if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n       String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n           httpReq.getRequestURI());\n       httpResp.sendRedirect(redirectUrl);\n       return;\n     }\n     \n     String user \u003d null;\n-    for(Cookie c: httpReq.getCookies()) {\n-      if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n-        user \u003d c.getValue();\n-        break;\n+    \n+    if (httpReq.getCookies() !\u003d null) {\n+      for(Cookie c: httpReq.getCookies()) {\n+        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n+          user \u003d c.getValue();\n+          break;\n+        }\n       }\n     }\n     if(user \u003d\u003d null) {\n       LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n           +\" cookie, so user will not be set\");\n       chain.doFilter(req, resp);\n     } else {\n       final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n       ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n           principal);\n       chain.doFilter(requestWrapper, resp);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    if(!(req instanceof HttpServletRequest)) {\n      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n    }\n    \n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n          httpReq.getRequestURI());\n      httpResp.sendRedirect(redirectUrl);\n      return;\n    }\n    \n    String user \u003d null;\n    \n    if (httpReq.getCookies() !\u003d null) {\n      for(Cookie c: httpReq.getCookies()) {\n        if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n          user \u003d c.getValue();\n          break;\n        }\n      }\n    }\n    if(user \u003d\u003d null) {\n      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n          +\" cookie, so user will not be set\");\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java",
      "extendedDetails": {}
    },
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2858. Added a WebApp Proxy for applications. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 11:29 PM",
      "commitName": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,33 @@\n+  public void doFilter(ServletRequest req, ServletResponse resp,\n+      FilterChain chain) throws IOException, ServletException {\n+    if(!(req instanceof HttpServletRequest)) {\n+      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n+    }\n+    \n+    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n+    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n+    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n+      String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n+          httpReq.getRequestURI());\n+      httpResp.sendRedirect(redirectUrl);\n+      return;\n+    }\n+    \n+    String user \u003d null;\n+    for(Cookie c: httpReq.getCookies()) {\n+      if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n+        user \u003d c.getValue();\n+        break;\n+      }\n+    }\n+    if(user \u003d\u003d null) {\n+      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n+          +\" cookie, so user will not be set\");\n+      chain.doFilter(req, resp);\n+    } else {\n+      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n+      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n+          principal);\n+      chain.doFilter(requestWrapper, resp);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doFilter(ServletRequest req, ServletResponse resp,\n      FilterChain chain) throws IOException, ServletException {\n    if(!(req instanceof HttpServletRequest)) {\n      throw new ServletException(\"This filter only works for HTTP/HTTPS\");\n    }\n    \n    HttpServletRequest httpReq \u003d (HttpServletRequest)req;\n    HttpServletResponse httpResp \u003d (HttpServletResponse)resp;\n    if(!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\n      String redirectUrl \u003d httpResp.encodeRedirectURL(proxyUriBase + \n          httpReq.getRequestURI());\n      httpResp.sendRedirect(redirectUrl);\n      return;\n    }\n    \n    String user \u003d null;\n    for(Cookie c: httpReq.getCookies()) {\n      if(WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())){\n        user \u003d c.getValue();\n        break;\n      }\n    }\n    if(user \u003d\u003d null) {\n      LOG.warn(\"Could not find \"+WebAppProxyServlet.PROXY_USER_COOKIE_NAME\n          +\" cookie, so user will not be set\");\n      chain.doFilter(req, resp);\n    } else {\n      final AmIpPrincipal principal \u003d new AmIpPrincipal(user);\n      ServletRequest requestWrapper \u003d new AmIpServletRequestWrapper(httpReq, \n          principal);\n      chain.doFilter(requestWrapper, resp);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/amfilter/AmIpFilter.java"
    }
  }
}