{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintProcessor.java",
  "functionName": "dispatchRequestsForPlacement",
  "functionId": "dispatchRequestsForPlacement___appAttemptId-ApplicationAttemptId__schedulingRequests-List__SchedulingRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
  "functionStartLine": 175,
  "functionEndLine": 195,
  "numCommitsSeen": 7,
  "timeTaken": 3165,
  "changeHistory": [
    "fd6be5898ad1a650e3bceacb8169a53520da57e5",
    "0b489e564ce5a50324a530e29c18aa8a75276c50",
    "6e5ba9366fc05719906ff2789b1a0fd26001182b",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": "Ybodychange",
    "0b489e564ce5a50324a530e29c18aa8a75276c50": "Yfilerename",
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": "Ybodychange",
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": "Ybodychange",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal BÃ¡lint Steinbach.\n",
      "commitDate": "29/09/18 2:47 AM",
      "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 223.93,
      "commitsBetweenForRepo": 2314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,21 @@\n   private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n       List\u003cSchedulingRequest\u003e schedulingRequests) {\n     if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          scheduler.getApplicationAttempt(appAttemptId);\n+      String queueName \u003d null;\n+      if(appAttempt !\u003d null) {\n+        queueName \u003d appAttempt.getQueueName();\n+      }\n+      Resource maxAllocation \u003d\n+          scheduler.getMaximumResourceCapability(queueName);\n       // Normalize the Requests before dispatching\n       schedulingRequests.forEach(req -\u003e {\n         Resource reqResource \u003d req.getResourceSizing().getResources();\n-        req.getResourceSizing()\n-            .setResources(this.scheduler.getNormalizedResource(reqResource));\n+        req.getResourceSizing().setResources(\n+            this.scheduler.getNormalizedResource(reqResource, maxAllocation));\n       });\n       this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n           appAttemptId.getApplicationId(), schedulingRequests, 1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n      List\u003cSchedulingRequest\u003e schedulingRequests) {\n    if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n      SchedulerApplicationAttempt appAttempt \u003d\n          scheduler.getApplicationAttempt(appAttemptId);\n      String queueName \u003d null;\n      if(appAttempt !\u003d null) {\n        queueName \u003d appAttempt.getQueueName();\n      }\n      Resource maxAllocation \u003d\n          scheduler.getMaximumResourceCapability(queueName);\n      // Normalize the Requests before dispatching\n      schedulingRequests.forEach(req -\u003e {\n        Resource reqResource \u003d req.getResourceSizing().getResources();\n        req.getResourceSizing().setResources(\n            this.scheduler.getNormalizedResource(reqResource, maxAllocation));\n      });\n      this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n          appAttemptId.getApplicationId(), schedulingRequests, 1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
      "extendedDetails": {}
    },
    "0b489e564ce5a50324a530e29c18aa8a75276c50": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 2:23 PM",
      "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n      List\u003cSchedulingRequest\u003e schedulingRequests) {\n    if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n      // Normalize the Requests before dispatching\n      schedulingRequests.forEach(req -\u003e {\n        Resource reqResource \u003d req.getResourceSizing().getResources();\n        req.getResourceSizing()\n            .setResources(this.scheduler.getNormalizedResource(reqResource));\n      });\n      this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n          appAttemptId.getApplicationId(), schedulingRequests, 1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java"
      }
    },
    "6e5ba9366fc05719906ff2789b1a0fd26001182b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7839. Modify PlacementAlgorithm to Check node capacity before placing request on node. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "02/02/18 10:28 AM",
      "commitName": "6e5ba9366fc05719906ff2789b1a0fd26001182b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 2.37,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,13 @@\n   private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n       List\u003cSchedulingRequest\u003e schedulingRequests) {\n     if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n+      // Normalize the Requests before dispatching\n+      schedulingRequests.forEach(req -\u003e {\n+        Resource reqResource \u003d req.getResourceSizing().getResources();\n+        req.getResourceSizing()\n+            .setResources(this.scheduler.getNormalizedResource(reqResource));\n+      });\n       this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n           appAttemptId.getApplicationId(), schedulingRequests, 1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n      List\u003cSchedulingRequest\u003e schedulingRequests) {\n    if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n      // Normalize the Requests before dispatching\n      schedulingRequests.forEach(req -\u003e {\n        Resource reqResource \u003d req.getResourceSizing().getResources();\n        req.getResourceSizing()\n            .setResources(this.scheduler.getNormalizedResource(reqResource));\n      });\n      this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n          appAttemptId.getApplicationId(), schedulingRequests, 1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
      "extendedDetails": {}
    },
    "a52d11fb8c103f14e42692600a058ba3b56e2ecf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7613. Implement Basic algorithm for constraint based placement. (Panagiotis Garefalakis via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a52d11fb8c103f14e42692600a058ba3b56e2ecf",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,7 @@\n   private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n       List\u003cSchedulingRequest\u003e schedulingRequests) {\n     if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n-      this.placementDispatcher.dispatch(\n-          new BatchedRequests(appAttemptId.getApplicationId(),\n-              schedulingRequests, 1));\n+      this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n+          appAttemptId.getApplicationId(), schedulingRequests, 1));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n      List\u003cSchedulingRequest\u003e schedulingRequests) {\n    if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n      this.placementDispatcher.dispatch(new BatchedRequests(iteratorType,\n          appAttemptId.getApplicationId(), schedulingRequests, 1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
      "extendedDetails": {}
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,8 @@\n+  private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n+      List\u003cSchedulingRequest\u003e schedulingRequests) {\n+    if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n+      this.placementDispatcher.dispatch(\n+          new BatchedRequests(appAttemptId.getApplicationId(),\n+              schedulingRequests, 1));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void dispatchRequestsForPlacement(ApplicationAttemptId appAttemptId,\n      List\u003cSchedulingRequest\u003e schedulingRequests) {\n    if (schedulingRequests !\u003d null \u0026\u0026 !schedulingRequests.isEmpty()) {\n      this.placementDispatcher.dispatch(\n          new BatchedRequests(appAttemptId.getApplicationId(),\n              schedulingRequests, 1));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java"
    }
  }
}