{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapReduceJobPropertiesParser.java",
  "functionName": "fromString",
  "functionId": "fromString___key-String__value-String",
  "sourceFilePath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/datatypes/util/MapReduceJobPropertiesParser.java",
  "functionStartLine": 162,
  "functionEndLine": 227,
  "numCommitsSeen": 6,
  "timeTaken": 1289,
  "changeHistory": [
    "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9",
    "10325d97329c214bb3899c8535df5a366bc86d2f",
    "a238f931ea7dce0ca620d1798156c84ff77097ff"
  ],
  "changeHistoryShort": {
    "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9": "Ybodychange",
    "10325d97329c214bb3899c8535df5a366bc86d2f": "Yfilerename",
    "a238f931ea7dce0ca620d1798156c84ff77097ff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14400. Fix warnings from spotbugs in hadoop-tools. Contributed by Weiwei Yang.\n",
      "commitDate": "10/05/17 3:57 AM",
      "commitName": "2ba9903932e3c99afb0e6abb7cd3c5d29a554bd9",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "03/03/15 1:06 AM",
      "commitNameOld": "9ae7f9eb7baeb244e1b95aabc93ad8124870b9a9",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 799.08,
      "commitsBetweenForRepo": 5710,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   private DataType\u003c?\u003e fromString(String key, String value) {\n+    DefaultDataType defaultValue \u003d new DefaultDataType(value);\n     if (value !\u003d null) {\n       // check known configs\n       //  job-name\n       String latestKey \u003d getLatestKeyName(key);\n       \n       if (MRJobConfig.JOB_NAME.equals(latestKey)) {\n         return new JobName(value);\n       }\n       // user-name\n       if (MRJobConfig.USER_NAME.equals(latestKey)) {\n         return new UserName(value);\n       }\n       // queue-name\n       if (MRJobConfig.QUEUE_NAME.equals(latestKey)) {\n         return new QueueName(value);\n       }\n       if (MRJobConfig.MAP_JAVA_OPTS.equals(latestKey) \n           || MRJobConfig.REDUCE_JAVA_OPTS.equals(latestKey)) {\n         List\u003cString\u003e heapOptions \u003d new ArrayList\u003cString\u003e();\n         extractMaxHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n         extractMinHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n         return new DefaultDataType(StringUtils.join(heapOptions, \u0027 \u0027));\n       }\n       \n       //TODO compression?\n       //TODO Other job configs like FileOutputFormat/FileInputFormat etc\n \n       // check if the config parameter represents a number\n       try {\n         format.parse(value);\n-        return new DefaultDataType(value);\n+        return defaultValue;\n       } catch (ParseException pe) {}\n \n       // check if the config parameters represents a boolean \n       // avoiding exceptions\n       if (\"true\".equals(value) || \"false\".equals(value)) {\n-        Boolean.parseBoolean(value);\n-        return new DefaultDataType(value);\n+        return defaultValue;\n       }\n \n       // check if the config parameter represents a class\n       if (latestKey.endsWith(\".class\") || latestKey.endsWith(\".codec\")) {\n         return new ClassName(value);\n       }\n \n       // handle distributed cache sizes and timestamps\n       if (latestKey.endsWith(\"sizes\") \n           || latestKey.endsWith(\".timestamps\")) {\n-        new DefaultDataType(value);\n+        return defaultValue;\n       }\n       \n       // check if the config parameter represents a file-system path\n       //TODO: Make this concrete .location .path .dir .jar?\n       if (latestKey.endsWith(\".dir\") || latestKey.endsWith(\".location\") \n           || latestKey.endsWith(\".jar\") || latestKey.endsWith(\".path\") \n           || latestKey.endsWith(\".logfile\") || latestKey.endsWith(\".file\")\n           || latestKey.endsWith(\".files\") || latestKey.endsWith(\".archives\")) {\n         try {\n           return new FileName(value);\n         } catch (Exception ioe) {}\n       }\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DataType\u003c?\u003e fromString(String key, String value) {\n    DefaultDataType defaultValue \u003d new DefaultDataType(value);\n    if (value !\u003d null) {\n      // check known configs\n      //  job-name\n      String latestKey \u003d getLatestKeyName(key);\n      \n      if (MRJobConfig.JOB_NAME.equals(latestKey)) {\n        return new JobName(value);\n      }\n      // user-name\n      if (MRJobConfig.USER_NAME.equals(latestKey)) {\n        return new UserName(value);\n      }\n      // queue-name\n      if (MRJobConfig.QUEUE_NAME.equals(latestKey)) {\n        return new QueueName(value);\n      }\n      if (MRJobConfig.MAP_JAVA_OPTS.equals(latestKey) \n          || MRJobConfig.REDUCE_JAVA_OPTS.equals(latestKey)) {\n        List\u003cString\u003e heapOptions \u003d new ArrayList\u003cString\u003e();\n        extractMaxHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n        extractMinHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n        return new DefaultDataType(StringUtils.join(heapOptions, \u0027 \u0027));\n      }\n      \n      //TODO compression?\n      //TODO Other job configs like FileOutputFormat/FileInputFormat etc\n\n      // check if the config parameter represents a number\n      try {\n        format.parse(value);\n        return defaultValue;\n      } catch (ParseException pe) {}\n\n      // check if the config parameters represents a boolean \n      // avoiding exceptions\n      if (\"true\".equals(value) || \"false\".equals(value)) {\n        return defaultValue;\n      }\n\n      // check if the config parameter represents a class\n      if (latestKey.endsWith(\".class\") || latestKey.endsWith(\".codec\")) {\n        return new ClassName(value);\n      }\n\n      // handle distributed cache sizes and timestamps\n      if (latestKey.endsWith(\"sizes\") \n          || latestKey.endsWith(\".timestamps\")) {\n        return defaultValue;\n      }\n      \n      // check if the config parameter represents a file-system path\n      //TODO: Make this concrete .location .path .dir .jar?\n      if (latestKey.endsWith(\".dir\") || latestKey.endsWith(\".location\") \n          || latestKey.endsWith(\".jar\") || latestKey.endsWith(\".path\") \n          || latestKey.endsWith(\".logfile\") || latestKey.endsWith(\".file\")\n          || latestKey.endsWith(\".files\") || latestKey.endsWith(\".archives\")) {\n        try {\n          return new FileName(value);\n        } catch (Exception ioe) {}\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/datatypes/util/MapReduceJobPropertiesParser.java",
      "extendedDetails": {}
    },
    "10325d97329c214bb3899c8535df5a366bc86d2f": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3582. Move successfully passing MR1 tests to MR2 maven tree.(ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/01/12 2:10 PM",
      "commitName": "10325d97329c214bb3899c8535df5a366bc86d2f",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/01/12 10:20 AM",
      "commitNameOld": "8b2f6909ec7df5cffb5ef417f5c9cffdee43e38a",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private DataType\u003c?\u003e fromString(String key, String value) {\n    if (value !\u003d null) {\n      // check known configs\n      //  job-name\n      String latestKey \u003d getLatestKeyName(key);\n      \n      if (MRJobConfig.JOB_NAME.equals(latestKey)) {\n        return new JobName(value);\n      }\n      // user-name\n      if (MRJobConfig.USER_NAME.equals(latestKey)) {\n        return new UserName(value);\n      }\n      // queue-name\n      if (MRJobConfig.QUEUE_NAME.equals(latestKey)) {\n        return new QueueName(value);\n      }\n      if (MRJobConfig.MAP_JAVA_OPTS.equals(latestKey) \n          || MRJobConfig.REDUCE_JAVA_OPTS.equals(latestKey)) {\n        List\u003cString\u003e heapOptions \u003d new ArrayList\u003cString\u003e();\n        extractMaxHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n        extractMinHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n        return new DefaultDataType(StringUtils.join(heapOptions, \u0027 \u0027));\n      }\n      \n      //TODO compression?\n      //TODO Other job configs like FileOutputFormat/FileInputFormat etc\n\n      // check if the config parameter represents a number\n      try {\n        format.parse(value);\n        return new DefaultDataType(value);\n      } catch (ParseException pe) {}\n\n      // check if the config parameters represents a boolean \n      // avoiding exceptions\n      if (\"true\".equals(value) || \"false\".equals(value)) {\n        Boolean.parseBoolean(value);\n        return new DefaultDataType(value);\n      }\n\n      // check if the config parameter represents a class\n      if (latestKey.endsWith(\".class\") || latestKey.endsWith(\".codec\")) {\n        return new ClassName(value);\n      }\n\n      // handle distributed cache sizes and timestamps\n      if (latestKey.endsWith(\"sizes\") \n          || latestKey.endsWith(\".timestamps\")) {\n        new DefaultDataType(value);\n      }\n      \n      // check if the config parameter represents a file-system path\n      //TODO: Make this concrete .location .path .dir .jar?\n      if (latestKey.endsWith(\".dir\") || latestKey.endsWith(\".location\") \n          || latestKey.endsWith(\".jar\") || latestKey.endsWith(\".path\") \n          || latestKey.endsWith(\".logfile\") || latestKey.endsWith(\".file\")\n          || latestKey.endsWith(\".files\") || latestKey.endsWith(\".archives\")) {\n        try {\n          return new FileName(value);\n        } catch (Exception ioe) {}\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/datatypes/util/MapReduceJobPropertiesParser.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/datatypes/util/MapReduceJobPropertiesParser.java",
        "newPath": "hadoop-tools/hadoop-rumen/src/main/java/org/apache/hadoop/tools/rumen/datatypes/util/MapReduceJobPropertiesParser.java"
      }
    },
    "a238f931ea7dce0ca620d1798156c84ff77097ff": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-778. Rumen Anonymizer. (Amar Kamat and Chris Douglas via amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1215141 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/11 6:20 AM",
      "commitName": "a238f931ea7dce0ca620d1798156c84ff77097ff",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,66 @@\n+  private DataType\u003c?\u003e fromString(String key, String value) {\n+    if (value !\u003d null) {\n+      // check known configs\n+      //  job-name\n+      String latestKey \u003d getLatestKeyName(key);\n+      \n+      if (MRJobConfig.JOB_NAME.equals(latestKey)) {\n+        return new JobName(value);\n+      }\n+      // user-name\n+      if (MRJobConfig.USER_NAME.equals(latestKey)) {\n+        return new UserName(value);\n+      }\n+      // queue-name\n+      if (MRJobConfig.QUEUE_NAME.equals(latestKey)) {\n+        return new QueueName(value);\n+      }\n+      if (MRJobConfig.MAP_JAVA_OPTS.equals(latestKey) \n+          || MRJobConfig.REDUCE_JAVA_OPTS.equals(latestKey)) {\n+        List\u003cString\u003e heapOptions \u003d new ArrayList\u003cString\u003e();\n+        extractMaxHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n+        extractMinHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n+        return new DefaultDataType(StringUtils.join(heapOptions, \u0027 \u0027));\n+      }\n+      \n+      //TODO compression?\n+      //TODO Other job configs like FileOutputFormat/FileInputFormat etc\n+\n+      // check if the config parameter represents a number\n+      try {\n+        format.parse(value);\n+        return new DefaultDataType(value);\n+      } catch (ParseException pe) {}\n+\n+      // check if the config parameters represents a boolean \n+      // avoiding exceptions\n+      if (\"true\".equals(value) || \"false\".equals(value)) {\n+        Boolean.parseBoolean(value);\n+        return new DefaultDataType(value);\n+      }\n+\n+      // check if the config parameter represents a class\n+      if (latestKey.endsWith(\".class\") || latestKey.endsWith(\".codec\")) {\n+        return new ClassName(value);\n+      }\n+\n+      // handle distributed cache sizes and timestamps\n+      if (latestKey.endsWith(\"sizes\") \n+          || latestKey.endsWith(\".timestamps\")) {\n+        new DefaultDataType(value);\n+      }\n+      \n+      // check if the config parameter represents a file-system path\n+      //TODO: Make this concrete .location .path .dir .jar?\n+      if (latestKey.endsWith(\".dir\") || latestKey.endsWith(\".location\") \n+          || latestKey.endsWith(\".jar\") || latestKey.endsWith(\".path\") \n+          || latestKey.endsWith(\".logfile\") || latestKey.endsWith(\".file\")\n+          || latestKey.endsWith(\".files\") || latestKey.endsWith(\".archives\")) {\n+        try {\n+          return new FileName(value);\n+        } catch (Exception ioe) {}\n+      }\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private DataType\u003c?\u003e fromString(String key, String value) {\n    if (value !\u003d null) {\n      // check known configs\n      //  job-name\n      String latestKey \u003d getLatestKeyName(key);\n      \n      if (MRJobConfig.JOB_NAME.equals(latestKey)) {\n        return new JobName(value);\n      }\n      // user-name\n      if (MRJobConfig.USER_NAME.equals(latestKey)) {\n        return new UserName(value);\n      }\n      // queue-name\n      if (MRJobConfig.QUEUE_NAME.equals(latestKey)) {\n        return new QueueName(value);\n      }\n      if (MRJobConfig.MAP_JAVA_OPTS.equals(latestKey) \n          || MRJobConfig.REDUCE_JAVA_OPTS.equals(latestKey)) {\n        List\u003cString\u003e heapOptions \u003d new ArrayList\u003cString\u003e();\n        extractMaxHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n        extractMinHeapOpts(value, heapOptions, new ArrayList\u003cString\u003e());\n        return new DefaultDataType(StringUtils.join(heapOptions, \u0027 \u0027));\n      }\n      \n      //TODO compression?\n      //TODO Other job configs like FileOutputFormat/FileInputFormat etc\n\n      // check if the config parameter represents a number\n      try {\n        format.parse(value);\n        return new DefaultDataType(value);\n      } catch (ParseException pe) {}\n\n      // check if the config parameters represents a boolean \n      // avoiding exceptions\n      if (\"true\".equals(value) || \"false\".equals(value)) {\n        Boolean.parseBoolean(value);\n        return new DefaultDataType(value);\n      }\n\n      // check if the config parameter represents a class\n      if (latestKey.endsWith(\".class\") || latestKey.endsWith(\".codec\")) {\n        return new ClassName(value);\n      }\n\n      // handle distributed cache sizes and timestamps\n      if (latestKey.endsWith(\"sizes\") \n          || latestKey.endsWith(\".timestamps\")) {\n        new DefaultDataType(value);\n      }\n      \n      // check if the config parameter represents a file-system path\n      //TODO: Make this concrete .location .path .dir .jar?\n      if (latestKey.endsWith(\".dir\") || latestKey.endsWith(\".location\") \n          || latestKey.endsWith(\".jar\") || latestKey.endsWith(\".path\") \n          || latestKey.endsWith(\".logfile\") || latestKey.endsWith(\".file\")\n          || latestKey.endsWith(\".files\") || latestKey.endsWith(\".archives\")) {\n        try {\n          return new FileName(value);\n        } catch (Exception ioe) {}\n      }\n    }\n\n    return null;\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/tools/rumen/datatypes/util/MapReduceJobPropertiesParser.java"
    }
  }
}