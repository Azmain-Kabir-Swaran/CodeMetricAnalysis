{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueACLsManager.java",
  "functionName": "checkAccess",
  "functionId": "checkAccess___callerUGI-UserGroupInformation__acl-QueueACL__app-RMApp__remoteAddress-String__forwardedAddresses-List__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
  "functionStartLine": 61,
  "functionEndLine": 94,
  "numCommitsSeen": 18,
  "timeTaken": 6742,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "7979939428ad5df213846e11bc1489bdf94ed9f8",
    "04f6ebb66a4ffc04a635ab9c0234080f290b39f2",
    "23248f63aab74a19dba38d348f2b231c8360770a",
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "7979939428ad5df213846e11bc1489bdf94ed9f8": "Ybodychange",
    "04f6ebb66a4ffc04a635ab9c0234080f290b39f2": "Ymultichange(Yparameterchange,Ybodychange)",
    "23248f63aab74a19dba38d348f2b231c8360770a": "Ymultichange(Yparameterchange,Ybodychange)",
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9": "Ymultichange(Yparameterchange,Ybodychange)",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 386.26,
      "commitsBetweenForRepo": 2298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,34 @@\n   public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n       RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n     if (!isACLsEnable) {\n       return true;\n     }\n \n     if (scheduler instanceof CapacityScheduler) {\n       CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n       if (queue \u003d\u003d null) {\n+        if (((CapacityScheduler) scheduler).isAmbiguous(app.getQueue())) {\n+          LOG.error(\"Queue \" + app.getQueue() + \" is ambiguous for \"\n+              + app.getApplicationId());\n+          //if we cannot decide which queue to submit we should deny access\n+          return false;\n+        }\n+\n         // The application exists but the associated queue does not exist.\n         // This may be due to a queue that is not defined when the RM restarts.\n         // At this point we choose to log the fact and allow users to access\n         // and view the apps in a removed queue. This should only happen on\n         // application recovery.\n         LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n             .getApplicationId());\n         return true;\n       }\n       return authorizer.checkPermission(\n           new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n               SchedulerUtils.toAccessType(acl),\n               app.getApplicationId().toString(), app.getName(),\n               remoteAddress, forwardedAddresses));\n     } else {\n       return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n    if (!isACLsEnable) {\n      return true;\n    }\n\n    if (scheduler instanceof CapacityScheduler) {\n      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n      if (queue \u003d\u003d null) {\n        if (((CapacityScheduler) scheduler).isAmbiguous(app.getQueue())) {\n          LOG.error(\"Queue \" + app.getQueue() + \" is ambiguous for \"\n              + app.getApplicationId());\n          //if we cannot decide which queue to submit we should deny access\n          return false;\n        }\n\n        // The application exists but the associated queue does not exist.\n        // This may be due to a queue that is not defined when the RM restarts.\n        // At this point we choose to log the fact and allow users to access\n        // and view the apps in a removed queue. This should only happen on\n        // application recovery.\n        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n            .getApplicationId());\n        return true;\n      }\n      return authorizer.checkPermission(\n          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n              SchedulerUtils.toAccessType(acl),\n              app.getApplicationId().toString(), app.getName(),\n              remoteAddress, forwardedAddresses));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
      "extendedDetails": {}
    },
    "7979939428ad5df213846e11bc1489bdf94ed9f8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5554. MoveApplicationAcrossQueues does not check user permission on the target queue\n(Contributed by Wilfred Spiegelenburg via Daniel Templeton)\n",
      "commitDate": "11/01/17 2:34 PM",
      "commitName": "7979939428ad5df213846e11bc1489bdf94ed9f8",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "06/07/16 10:36 AM",
      "commitNameOld": "04f6ebb66a4ffc04a635ab9c0234080f290b39f2",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 189.21,
      "commitsBetweenForRepo": 1386,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n       RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n     if (!isACLsEnable) {\n       return true;\n     }\n \n     if (scheduler instanceof CapacityScheduler) {\n       CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n       if (queue \u003d\u003d null) {\n-        // Application exists but the associated queue does not exist.\n-        // This may be due to queue is removed after RM restarts. Here, we choose\n-        // to allow users to be able to view the apps for removed queue.\n+        // The application exists but the associated queue does not exist.\n+        // This may be due to a queue that is not defined when the RM restarts.\n+        // At this point we choose to log the fact and allow users to access\n+        // and view the apps in a removed queue. This should only happen on\n+        // application recovery.\n         LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n             .getApplicationId());\n         return true;\n       }\n       return authorizer.checkPermission(\n           new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n               SchedulerUtils.toAccessType(acl),\n               app.getApplicationId().toString(), app.getName(),\n               remoteAddress, forwardedAddresses));\n     } else {\n       return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n    if (!isACLsEnable) {\n      return true;\n    }\n\n    if (scheduler instanceof CapacityScheduler) {\n      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n      if (queue \u003d\u003d null) {\n        // The application exists but the associated queue does not exist.\n        // This may be due to a queue that is not defined when the RM restarts.\n        // At this point we choose to log the fact and allow users to access\n        // and view the apps in a removed queue. This should only happen on\n        // application recovery.\n        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n            .getApplicationId());\n        return true;\n      }\n      return authorizer.checkPermission(\n          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n              SchedulerUtils.toAccessType(acl),\n              app.getApplicationId().toString(), app.getName(),\n              remoteAddress, forwardedAddresses));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
      "extendedDetails": {}
    },
    "04f6ebb66a4ffc04a635ab9c0234080f290b39f2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5294. Pass remote ip address down to YarnAuthorizationProvider. (Jian He via wangda)\n",
      "commitDate": "06/07/16 10:36 AM",
      "commitName": "04f6ebb66a4ffc04a635ab9c0234080f290b39f2",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5294. Pass remote ip address down to YarnAuthorizationProvider. (Jian He via wangda)\n",
          "commitDate": "06/07/16 10:36 AM",
          "commitName": "04f6ebb66a4ffc04a635ab9c0234080f290b39f2",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/05/16 3:30 PM",
          "commitNameOld": "23248f63aab74a19dba38d348f2b231c8360770a",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 60.8,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n-      RMApp app) {\n+      RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n     if (!isACLsEnable) {\n       return true;\n     }\n \n     if (scheduler instanceof CapacityScheduler) {\n       CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n       if (queue \u003d\u003d null) {\n         // Application exists but the associated queue does not exist.\n         // This may be due to queue is removed after RM restarts. Here, we choose\n         // to allow users to be able to view the apps for removed queue.\n         LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n             .getApplicationId());\n         return true;\n       }\n-\n       return authorizer.checkPermission(\n           new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n               SchedulerUtils.toAccessType(acl),\n-              app.getApplicationId().toString(), app.getName()));\n+              app.getApplicationId().toString(), app.getName(),\n+              remoteAddress, forwardedAddresses));\n     } else {\n       return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n    if (!isACLsEnable) {\n      return true;\n    }\n\n    if (scheduler instanceof CapacityScheduler) {\n      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n      if (queue \u003d\u003d null) {\n        // Application exists but the associated queue does not exist.\n        // This may be due to queue is removed after RM restarts. Here, we choose\n        // to allow users to be able to view the apps for removed queue.\n        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n            .getApplicationId());\n        return true;\n      }\n      return authorizer.checkPermission(\n          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n              SchedulerUtils.toAccessType(acl),\n              app.getApplicationId().toString(), app.getName(),\n              remoteAddress, forwardedAddresses));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
          "extendedDetails": {
            "oldValue": "[callerUGI-UserGroupInformation, acl-QueueACL, app-RMApp]",
            "newValue": "[callerUGI-UserGroupInformation, acl-QueueACL, app-RMApp, remoteAddress-String, forwardedAddresses-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5294. Pass remote ip address down to YarnAuthorizationProvider. (Jian He via wangda)\n",
          "commitDate": "06/07/16 10:36 AM",
          "commitName": "04f6ebb66a4ffc04a635ab9c0234080f290b39f2",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/05/16 3:30 PM",
          "commitNameOld": "23248f63aab74a19dba38d348f2b231c8360770a",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 60.8,
          "commitsBetweenForRepo": 414,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n-      RMApp app) {\n+      RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n     if (!isACLsEnable) {\n       return true;\n     }\n \n     if (scheduler instanceof CapacityScheduler) {\n       CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n       if (queue \u003d\u003d null) {\n         // Application exists but the associated queue does not exist.\n         // This may be due to queue is removed after RM restarts. Here, we choose\n         // to allow users to be able to view the apps for removed queue.\n         LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n             .getApplicationId());\n         return true;\n       }\n-\n       return authorizer.checkPermission(\n           new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n               SchedulerUtils.toAccessType(acl),\n-              app.getApplicationId().toString(), app.getName()));\n+              app.getApplicationId().toString(), app.getName(),\n+              remoteAddress, forwardedAddresses));\n     } else {\n       return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      RMApp app, String remoteAddress, List\u003cString\u003e forwardedAddresses) {\n    if (!isACLsEnable) {\n      return true;\n    }\n\n    if (scheduler instanceof CapacityScheduler) {\n      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n      if (queue \u003d\u003d null) {\n        // Application exists but the associated queue does not exist.\n        // This may be due to queue is removed after RM restarts. Here, we choose\n        // to allow users to be able to view the apps for removed queue.\n        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n            .getApplicationId());\n        return true;\n      }\n      return authorizer.checkPermission(\n          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n              SchedulerUtils.toAccessType(acl),\n              app.getApplicationId().toString(), app.getName(),\n              remoteAddress, forwardedAddresses));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "23248f63aab74a19dba38d348f2b231c8360770a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "getApplicationReport call may raise NPE for removed queues. (Jian He via wangda)\n",
      "commitDate": "06/05/16 3:30 PM",
      "commitName": "23248f63aab74a19dba38d348f2b231c8360770a",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "getApplicationReport call may raise NPE for removed queues. (Jian He via wangda)\n",
          "commitDate": "06/05/16 3:30 PM",
          "commitName": "23248f63aab74a19dba38d348f2b231c8360770a",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "12/01/16 9:18 PM",
          "commitNameOld": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 114.72,
          "commitsBetweenForRepo": 743,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,25 @@\n   public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n-      String queueName, ApplicationId appId, String appName) {\n+      RMApp app) {\n     if (!isACLsEnable) {\n       return true;\n     }\n+\n     if (scheduler instanceof CapacityScheduler) {\n-      return authorizer.checkPermission(new AccessRequest(\n-          ((CapacityScheduler) scheduler).getQueue(queueName)\n-              .getPrivilegedEntity(), callerUGI,\n-          SchedulerUtils.toAccessType(acl), appId.toString(), appName));\n+      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n+      if (queue \u003d\u003d null) {\n+        // Application exists but the associated queue does not exist.\n+        // This may be due to queue is removed after RM restarts. Here, we choose\n+        // to allow users to be able to view the apps for removed queue.\n+        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n+            .getApplicationId());\n+        return true;\n+      }\n+\n+      return authorizer.checkPermission(\n+          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n+              SchedulerUtils.toAccessType(acl),\n+              app.getApplicationId().toString(), app.getName()));\n     } else {\n-      return scheduler.checkAccess(callerUGI, acl, queueName);\n+      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      RMApp app) {\n    if (!isACLsEnable) {\n      return true;\n    }\n\n    if (scheduler instanceof CapacityScheduler) {\n      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n      if (queue \u003d\u003d null) {\n        // Application exists but the associated queue does not exist.\n        // This may be due to queue is removed after RM restarts. Here, we choose\n        // to allow users to be able to view the apps for removed queue.\n        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n            .getApplicationId());\n        return true;\n      }\n\n      return authorizer.checkPermission(\n          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n              SchedulerUtils.toAccessType(acl),\n              app.getApplicationId().toString(), app.getName()));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
          "extendedDetails": {
            "oldValue": "[callerUGI-UserGroupInformation, acl-QueueACL, queueName-String, appId-ApplicationId, appName-String]",
            "newValue": "[callerUGI-UserGroupInformation, acl-QueueACL, app-RMApp]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "getApplicationReport call may raise NPE for removed queues. (Jian He via wangda)\n",
          "commitDate": "06/05/16 3:30 PM",
          "commitName": "23248f63aab74a19dba38d348f2b231c8360770a",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "12/01/16 9:18 PM",
          "commitNameOld": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 114.72,
          "commitsBetweenForRepo": 743,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,25 @@\n   public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n-      String queueName, ApplicationId appId, String appName) {\n+      RMApp app) {\n     if (!isACLsEnable) {\n       return true;\n     }\n+\n     if (scheduler instanceof CapacityScheduler) {\n-      return authorizer.checkPermission(new AccessRequest(\n-          ((CapacityScheduler) scheduler).getQueue(queueName)\n-              .getPrivilegedEntity(), callerUGI,\n-          SchedulerUtils.toAccessType(acl), appId.toString(), appName));\n+      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n+      if (queue \u003d\u003d null) {\n+        // Application exists but the associated queue does not exist.\n+        // This may be due to queue is removed after RM restarts. Here, we choose\n+        // to allow users to be able to view the apps for removed queue.\n+        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n+            .getApplicationId());\n+        return true;\n+      }\n+\n+      return authorizer.checkPermission(\n+          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n+              SchedulerUtils.toAccessType(acl),\n+              app.getApplicationId().toString(), app.getName()));\n     } else {\n-      return scheduler.checkAccess(callerUGI, acl, queueName);\n+      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      RMApp app) {\n    if (!isACLsEnable) {\n      return true;\n    }\n\n    if (scheduler instanceof CapacityScheduler) {\n      CSQueue queue \u003d ((CapacityScheduler) scheduler).getQueue(app.getQueue());\n      if (queue \u003d\u003d null) {\n        // Application exists but the associated queue does not exist.\n        // This may be due to queue is removed after RM restarts. Here, we choose\n        // to allow users to be able to view the apps for removed queue.\n        LOG.error(\"Queue \" + app.getQueue() + \" does not exist for \" + app\n            .getApplicationId());\n        return true;\n      }\n\n      return authorizer.checkPermission(\n          new AccessRequest(queue.getPrivilegedEntity(), callerUGI,\n              SchedulerUtils.toAccessType(acl),\n              app.getApplicationId().toString(), app.getName()));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, app.getQueue());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
      "commitDate": "12/01/16 9:18 PM",
      "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
          "commitDate": "12/01/16 9:18 PM",
          "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/11/14 1:15 PM",
          "commitNameOld": "81c9d17af84ed87b9ded7057cb726a3855ddd32d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 421.34,
          "commitsBetweenForRepo": 3290,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  public boolean checkAccess(UserGroupInformation callerUGI,\n-      QueueACL acl, String queueName) {\n+  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n+      String queueName, ApplicationId appId, String appName) {\n     if (!isACLsEnable) {\n       return true;\n     }\n-    return scheduler.checkAccess(callerUGI, acl, queueName);\n+    if (scheduler instanceof CapacityScheduler) {\n+      return authorizer.checkPermission(new AccessRequest(\n+          ((CapacityScheduler) scheduler).getQueue(queueName)\n+              .getPrivilegedEntity(), callerUGI,\n+          SchedulerUtils.toAccessType(acl), appId.toString(), appName));\n+    } else {\n+      return scheduler.checkAccess(callerUGI, acl, queueName);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      String queueName, ApplicationId appId, String appName) {\n    if (!isACLsEnable) {\n      return true;\n    }\n    if (scheduler instanceof CapacityScheduler) {\n      return authorizer.checkPermission(new AccessRequest(\n          ((CapacityScheduler) scheduler).getQueue(queueName)\n              .getPrivilegedEntity(), callerUGI,\n          SchedulerUtils.toAccessType(acl), appId.toString(), appName));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, queueName);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
          "extendedDetails": {
            "oldValue": "[callerUGI-UserGroupInformation, acl-QueueACL, queueName-String]",
            "newValue": "[callerUGI-UserGroupInformation, acl-QueueACL, queueName-String, appId-ApplicationId, appName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4571. Make app id/name available to the yarn authorizer provider for better auditing. (Jian He via wangda)\n",
          "commitDate": "12/01/16 9:18 PM",
          "commitName": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/11/14 1:15 PM",
          "commitNameOld": "81c9d17af84ed87b9ded7057cb726a3855ddd32d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 421.34,
          "commitsBetweenForRepo": 3290,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  public boolean checkAccess(UserGroupInformation callerUGI,\n-      QueueACL acl, String queueName) {\n+  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n+      String queueName, ApplicationId appId, String appName) {\n     if (!isACLsEnable) {\n       return true;\n     }\n-    return scheduler.checkAccess(callerUGI, acl, queueName);\n+    if (scheduler instanceof CapacityScheduler) {\n+      return authorizer.checkPermission(new AccessRequest(\n+          ((CapacityScheduler) scheduler).getQueue(queueName)\n+              .getPrivilegedEntity(), callerUGI,\n+          SchedulerUtils.toAccessType(acl), appId.toString(), appName));\n+    } else {\n+      return scheduler.checkAccess(callerUGI, acl, queueName);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI, QueueACL acl,\n      String queueName, ApplicationId appId, String appName) {\n    if (!isACLsEnable) {\n      return true;\n    }\n    if (scheduler instanceof CapacityScheduler) {\n      return authorizer.checkPermission(new AccessRequest(\n          ((CapacityScheduler) scheduler).getQueue(queueName)\n              .getPrivilegedEntity(), callerUGI,\n          SchedulerUtils.toAccessType(acl), appId.toString(), appName));\n    } else {\n      return scheduler.checkAccess(callerUGI, acl, queueName);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": {
      "type": "Yintroduced",
      "commitMessage": "YARN-899. Added back queue level administrator-acls so that there is no regression w.r.t 1.x. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/13 1:21 AM",
      "commitName": "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,7 @@\n+  public boolean checkAccess(UserGroupInformation callerUGI,\n+      QueueACL acl, String queueName) {\n+    if (!isACLsEnable) {\n+      return true;\n+    }\n+    return scheduler.checkAccess(callerUGI, acl, queueName);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName) {\n    if (!isACLsEnable) {\n      return true;\n    }\n    return scheduler.checkAccess(callerUGI, acl, queueName);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/QueueACLsManager.java"
    }
  }
}