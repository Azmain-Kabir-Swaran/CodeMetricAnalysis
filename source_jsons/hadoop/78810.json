{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileContext.java",
  "functionName": "listFiles",
  "functionId": "listFiles___f-Path(modifiers-final)__recursive-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
  "functionStartLine": 1940,
  "functionEndLine": 2032,
  "numCommitsSeen": 94,
  "timeTaken": 2496,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
    "d0ba178800d04e6e9842a1823b2205732608c0b5",
    "19eea554e3fafb46f39a37b7b1be0f20e09aa52e"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081": "Ymultichange(Yreturntypechange,Ybodychange)",
    "d0ba178800d04e6e9842a1823b2205732608c0b5": "Ybodychange",
    "19eea554e3fafb46f39a37b7b1be0f20e09aa52e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n        final Path f, final boolean recursive) throws AccessControlException,\n        FileNotFoundException, UnsupportedFileSystemException, \n        IOException {\n      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n        LocatedFileStatus curFile;\n\n        /**\n         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         *\n         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public boolean hasNext() throws IOException {\n          while (curFile \u003d\u003d null) {\n            if (curItor.hasNext()) {\n              handleFileStat(curItor.next());\n            } else if (!itors.empty()) {\n              curItor \u003d itors.pop();\n            } else {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        /**\n         * Process the input stat.\n         * If it is a file, return the file stat.\n         * If it is a directory, traverse the directory if recursive is true;\n         * ignore it if recursive is false.\n         * If it is a symlink, resolve the symlink first and then process it\n         * depending on if it is a file or directory.\n         * @param stat input status\n         * @throws AccessControlException if access is denied\n         * @throws FileNotFoundException if file is not found\n         * @throws UnsupportedFileSystemException if fs is not supported\n         * @throws IOException for all other IO errors\n         */\n        private void handleFileStat(LocatedFileStatus stat)\n        throws IOException {\n          if (stat.isFile()) { // file\n            curFile \u003d stat;\n          } else if (stat.isSymlink()) { // symbolic link\n            // resolve symbolic link\n            FileStatus symstat \u003d FileContext.this.getFileStatus(\n                stat.getSymlink());\n            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n              itors.push(curItor);\n              curItor \u003d listLocatedStatus(stat.getPath());\n            }\n          } else if (recursive) { // directory\n            itors.push(curItor);\n            curItor \u003d listLocatedStatus(stat.getPath());\n          }\n        }\n\n        /**\n         * Returns the next file\u0027s status with its block locations\n         *\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public LocatedFileStatus next() throws IOException {\n          if (hasNext()) {\n            LocatedFileStatus result \u003d curFile;\n            curFile \u003d null;\n            return result;\n          } \n          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n        }\n      };\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n        final Path f, final boolean recursive) throws AccessControlException,\n        FileNotFoundException, UnsupportedFileSystemException, \n        IOException {\n      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n        LocatedFileStatus curFile;\n\n        /**\n         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         *\n         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public boolean hasNext() throws IOException {\n          while (curFile \u003d\u003d null) {\n            if (curItor.hasNext()) {\n              handleFileStat(curItor.next());\n            } else if (!itors.empty()) {\n              curItor \u003d itors.pop();\n            } else {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        /**\n         * Process the input stat.\n         * If it is a file, return the file stat.\n         * If it is a directory, traverse the directory if recursive is true;\n         * ignore it if recursive is false.\n         * If it is a symlink, resolve the symlink first and then process it\n         * depending on if it is a file or directory.\n         * @param stat input status\n         * @throws AccessControlException if access is denied\n         * @throws FileNotFoundException if file is not found\n         * @throws UnsupportedFileSystemException if fs is not supported\n         * @throws IOException for all other IO errors\n         */\n        private void handleFileStat(LocatedFileStatus stat)\n        throws IOException {\n          if (stat.isFile()) { // file\n            curFile \u003d stat;\n          } else if (stat.isSymlink()) { // symbolic link\n            // resolve symbolic link\n            FileStatus symstat \u003d FileContext.this.getFileStatus(\n                stat.getSymlink());\n            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n              itors.push(curItor);\n              curItor \u003d listLocatedStatus(stat.getPath());\n            }\n          } else if (recursive) { // directory\n            itors.push(curItor);\n            curItor \u003d listLocatedStatus(stat.getPath());\n          }\n        }\n\n        /**\n         * Returns the next file\u0027s status with its block locations\n         *\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public LocatedFileStatus next() throws IOException {\n          if (hasNext()) {\n            LocatedFileStatus result \u003d curFile;\n            curFile \u003d null;\n            return result;\n          } \n          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n        }\n      };\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n        final Path f, final boolean recursive) throws AccessControlException,\n        FileNotFoundException, UnsupportedFileSystemException, \n        IOException {\n      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n        LocatedFileStatus curFile;\n\n        /**\n         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         *\n         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public boolean hasNext() throws IOException {\n          while (curFile \u003d\u003d null) {\n            if (curItor.hasNext()) {\n              handleFileStat(curItor.next());\n            } else if (!itors.empty()) {\n              curItor \u003d itors.pop();\n            } else {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        /**\n         * Process the input stat.\n         * If it is a file, return the file stat.\n         * If it is a directory, traverse the directory if recursive is true;\n         * ignore it if recursive is false.\n         * If it is a symlink, resolve the symlink first and then process it\n         * depending on if it is a file or directory.\n         * @param stat input status\n         * @throws AccessControlException if access is denied\n         * @throws FileNotFoundException if file is not found\n         * @throws UnsupportedFileSystemException if fs is not supported\n         * @throws IOException for all other IO errors\n         */\n        private void handleFileStat(LocatedFileStatus stat)\n        throws IOException {\n          if (stat.isFile()) { // file\n            curFile \u003d stat;\n          } else if (stat.isSymlink()) { // symbolic link\n            // resolve symbolic link\n            FileStatus symstat \u003d FileContext.this.getFileStatus(\n                stat.getSymlink());\n            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n              itors.push(curItor);\n              curItor \u003d listLocatedStatus(stat.getPath());\n            }\n          } else if (recursive) { // directory\n            itors.push(curItor);\n            curItor \u003d listLocatedStatus(stat.getPath());\n          }\n        }\n\n        /**\n         * Returns the next file\u0027s status with its block locations\n         *\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public LocatedFileStatus next() throws IOException {\n          if (hasNext()) {\n            LocatedFileStatus result \u003d curFile;\n            curFile \u003d null;\n            return result;\n          } \n          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n        }\n      };\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "dc2a3d1ca33102b30a7c2eea67df1ba447813081": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/10 9:43 PM",
      "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
      "commitAuthor": "Hairong Kuang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/08/10 9:43 PM",
          "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
          "commitAuthor": "Hairong Kuang",
          "commitDateOld": "02/08/10 1:25 PM",
          "commitNameOld": "666a8e160035d60b7fd3634e4d703d8e28a1af6c",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 8.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,93 @@\n-    public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n         final Path f, final boolean recursive) throws AccessControlException,\n         FileNotFoundException, UnsupportedFileSystemException, \n         IOException {\n-      return new Iterator\u003cLocatedFileStatus\u003e() {\n-        private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n-          new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n-        Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n+      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n+          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n+        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n         LocatedFileStatus curFile;\n-       \n+\n         /**\n-         *  {@inheritDoc}\n-         *  @return {@inheritDog} \n-         *  @throws Runtimeexception if any IOException occurs during traversal;\n-         *  the IOException is set as the cause of the RuntimeException\n+         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n+         *\n+         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n+         * @throws AccessControlException if not allowed to access next\n+         *                                file\u0027s status or locations\n+         * @throws FileNotFoundException if next file does not exist any more\n+         * @throws UnsupportedFileSystemException if next file\u0027s \n+         *                                        fs is unsupported\n+         * @throws IOException for all other IO errors\n+         *                     for example, NameNode is not avaialbe or\n+         *                     NameNode throws IOException due to an error\n+         *                     while getting the status or block locations\n          */\n         @Override\n-        public boolean hasNext() {\n+        public boolean hasNext() throws IOException {\n           while (curFile \u003d\u003d null) {\n             if (curItor.hasNext()) {\n               handleFileStat(curItor.next());\n             } else if (!itors.empty()) {\n               curItor \u003d itors.pop();\n             } else {\n               return false;\n             }\n           }\n           return true;\n         }\n \n         /**\n          * Process the input stat.\n          * If it is a file, return the file stat.\n-         * If it is a directory, tranverse the directory if recursive is true;\n+         * If it is a directory, traverse the directory if recursive is true;\n          * ignore it if recursive is false.\n          * If it is a symlink, resolve the symlink first and then process it\n          * depending on if it is a file or directory.\n          * @param stat input status\n-         * @throws RuntimeException if any io error occurs; the io exception\n-         * is set as the cause of RuntimeException\n+         * @throws AccessControlException if access is denied\n+         * @throws FileNotFoundException if file is not found\n+         * @throws UnsupportedFileSystemException if fs is not supported\n+         * @throws IOException for all other IO errors\n          */\n-        private void handleFileStat(LocatedFileStatus stat) {\n-          try {\n-            if (stat.isFile()) { // file\n-              curFile \u003d stat;\n-            } else if (stat.isSymlink()) { // symbolic link\n-              // resolve symbolic link\n-              FileStatus symstat \u003d FileContext.this.getFileStatus(\n-                  stat.getSymlink());\n-              if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n-                itors.push(curItor);\n-                curItor \u003d listLocatedStatus(stat.getPath());\n-              }\n-            } else if (recursive) { // directory\n+        private void handleFileStat(LocatedFileStatus stat)\n+        throws IOException {\n+          if (stat.isFile()) { // file\n+            curFile \u003d stat;\n+          } else if (stat.isSymlink()) { // symbolic link\n+            // resolve symbolic link\n+            FileStatus symstat \u003d FileContext.this.getFileStatus(\n+                stat.getSymlink());\n+            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n               itors.push(curItor);\n               curItor \u003d listLocatedStatus(stat.getPath());\n             }\n-          } catch (IOException ioe) {\n-            throw (RuntimeException)new RuntimeException().initCause(ioe);\n+          } else if (recursive) { // directory\n+            itors.push(curItor);\n+            curItor \u003d listLocatedStatus(stat.getPath());\n           }\n         }\n \n         /**\n-         *  {@inheritDoc}\n-         *  @return {@inheritDoc} \n-         *  @throws Runtimeexception if any IOException occurs during traversal;\n-         *  the IOException is set as the cause of the RuntimeException\n-         *  @exception {@inheritDoc}\n+         * Returns the next file\u0027s status with its block locations\n+         *\n+         * @throws AccessControlException if not allowed to access next\n+         *                                file\u0027s status or locations\n+         * @throws FileNotFoundException if next file does not exist any more\n+         * @throws UnsupportedFileSystemException if next file\u0027s \n+         *                                        fs is unsupported\n+         * @throws IOException for all other IO errors\n+         *                     for example, NameNode is not avaialbe or\n+         *                     NameNode throws IOException due to an error\n+         *                     while getting the status or block locations\n          */\n         @Override\n-        public LocatedFileStatus next() {\n+        public LocatedFileStatus next() throws IOException {\n           if (hasNext()) {\n             LocatedFileStatus result \u003d curFile;\n             curFile \u003d null;\n             return result;\n           } \n           throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n         }\n-\n-        @Override\n-        public void remove() {\n-          throw new UnsupportedOperationException(\"Remove is not supported\");\n-\n-        }\n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n        final Path f, final boolean recursive) throws AccessControlException,\n        FileNotFoundException, UnsupportedFileSystemException, \n        IOException {\n      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n        LocatedFileStatus curFile;\n\n        /**\n         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         *\n         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public boolean hasNext() throws IOException {\n          while (curFile \u003d\u003d null) {\n            if (curItor.hasNext()) {\n              handleFileStat(curItor.next());\n            } else if (!itors.empty()) {\n              curItor \u003d itors.pop();\n            } else {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        /**\n         * Process the input stat.\n         * If it is a file, return the file stat.\n         * If it is a directory, traverse the directory if recursive is true;\n         * ignore it if recursive is false.\n         * If it is a symlink, resolve the symlink first and then process it\n         * depending on if it is a file or directory.\n         * @param stat input status\n         * @throws AccessControlException if access is denied\n         * @throws FileNotFoundException if file is not found\n         * @throws UnsupportedFileSystemException if fs is not supported\n         * @throws IOException for all other IO errors\n         */\n        private void handleFileStat(LocatedFileStatus stat)\n        throws IOException {\n          if (stat.isFile()) { // file\n            curFile \u003d stat;\n          } else if (stat.isSymlink()) { // symbolic link\n            // resolve symbolic link\n            FileStatus symstat \u003d FileContext.this.getFileStatus(\n                stat.getSymlink());\n            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n              itors.push(curItor);\n              curItor \u003d listLocatedStatus(stat.getPath());\n            }\n          } else if (recursive) { // directory\n            itors.push(curItor);\n            curItor \u003d listLocatedStatus(stat.getPath());\n          }\n        }\n\n        /**\n         * Returns the next file\u0027s status with its block locations\n         *\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public LocatedFileStatus next() throws IOException {\n          if (hasNext()) {\n            LocatedFileStatus result \u003d curFile;\n            curFile \u003d null;\n            return result;\n          } \n          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n        }\n      };\n    }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "Iterator\u003cLocatedFileStatus\u003e",
            "newValue": "RemoteIterator\u003cLocatedFileStatus\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6900. Make the iterator returned by FileSystem#listLocatedStatus to throw IOException rather than RuntimeException when there is an IO error fetching the next file. Contributed by Hairong Kuang. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@984301 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/08/10 9:43 PM",
          "commitName": "dc2a3d1ca33102b30a7c2eea67df1ba447813081",
          "commitAuthor": "Hairong Kuang",
          "commitDateOld": "02/08/10 1:25 PM",
          "commitNameOld": "666a8e160035d60b7fd3634e4d703d8e28a1af6c",
          "commitAuthorOld": "Hairong Kuang",
          "daysBetweenCommits": 8.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,93 @@\n-    public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n         final Path f, final boolean recursive) throws AccessControlException,\n         FileNotFoundException, UnsupportedFileSystemException, \n         IOException {\n-      return new Iterator\u003cLocatedFileStatus\u003e() {\n-        private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n-          new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n-        Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n+      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n+          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n+        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n         LocatedFileStatus curFile;\n-       \n+\n         /**\n-         *  {@inheritDoc}\n-         *  @return {@inheritDog} \n-         *  @throws Runtimeexception if any IOException occurs during traversal;\n-         *  the IOException is set as the cause of the RuntimeException\n+         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n+         *\n+         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n+         * @throws AccessControlException if not allowed to access next\n+         *                                file\u0027s status or locations\n+         * @throws FileNotFoundException if next file does not exist any more\n+         * @throws UnsupportedFileSystemException if next file\u0027s \n+         *                                        fs is unsupported\n+         * @throws IOException for all other IO errors\n+         *                     for example, NameNode is not avaialbe or\n+         *                     NameNode throws IOException due to an error\n+         *                     while getting the status or block locations\n          */\n         @Override\n-        public boolean hasNext() {\n+        public boolean hasNext() throws IOException {\n           while (curFile \u003d\u003d null) {\n             if (curItor.hasNext()) {\n               handleFileStat(curItor.next());\n             } else if (!itors.empty()) {\n               curItor \u003d itors.pop();\n             } else {\n               return false;\n             }\n           }\n           return true;\n         }\n \n         /**\n          * Process the input stat.\n          * If it is a file, return the file stat.\n-         * If it is a directory, tranverse the directory if recursive is true;\n+         * If it is a directory, traverse the directory if recursive is true;\n          * ignore it if recursive is false.\n          * If it is a symlink, resolve the symlink first and then process it\n          * depending on if it is a file or directory.\n          * @param stat input status\n-         * @throws RuntimeException if any io error occurs; the io exception\n-         * is set as the cause of RuntimeException\n+         * @throws AccessControlException if access is denied\n+         * @throws FileNotFoundException if file is not found\n+         * @throws UnsupportedFileSystemException if fs is not supported\n+         * @throws IOException for all other IO errors\n          */\n-        private void handleFileStat(LocatedFileStatus stat) {\n-          try {\n-            if (stat.isFile()) { // file\n-              curFile \u003d stat;\n-            } else if (stat.isSymlink()) { // symbolic link\n-              // resolve symbolic link\n-              FileStatus symstat \u003d FileContext.this.getFileStatus(\n-                  stat.getSymlink());\n-              if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n-                itors.push(curItor);\n-                curItor \u003d listLocatedStatus(stat.getPath());\n-              }\n-            } else if (recursive) { // directory\n+        private void handleFileStat(LocatedFileStatus stat)\n+        throws IOException {\n+          if (stat.isFile()) { // file\n+            curFile \u003d stat;\n+          } else if (stat.isSymlink()) { // symbolic link\n+            // resolve symbolic link\n+            FileStatus symstat \u003d FileContext.this.getFileStatus(\n+                stat.getSymlink());\n+            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n               itors.push(curItor);\n               curItor \u003d listLocatedStatus(stat.getPath());\n             }\n-          } catch (IOException ioe) {\n-            throw (RuntimeException)new RuntimeException().initCause(ioe);\n+          } else if (recursive) { // directory\n+            itors.push(curItor);\n+            curItor \u003d listLocatedStatus(stat.getPath());\n           }\n         }\n \n         /**\n-         *  {@inheritDoc}\n-         *  @return {@inheritDoc} \n-         *  @throws Runtimeexception if any IOException occurs during traversal;\n-         *  the IOException is set as the cause of the RuntimeException\n-         *  @exception {@inheritDoc}\n+         * Returns the next file\u0027s status with its block locations\n+         *\n+         * @throws AccessControlException if not allowed to access next\n+         *                                file\u0027s status or locations\n+         * @throws FileNotFoundException if next file does not exist any more\n+         * @throws UnsupportedFileSystemException if next file\u0027s \n+         *                                        fs is unsupported\n+         * @throws IOException for all other IO errors\n+         *                     for example, NameNode is not avaialbe or\n+         *                     NameNode throws IOException due to an error\n+         *                     while getting the status or block locations\n          */\n         @Override\n-        public LocatedFileStatus next() {\n+        public LocatedFileStatus next() throws IOException {\n           if (hasNext()) {\n             LocatedFileStatus result \u003d curFile;\n             curFile \u003d null;\n             return result;\n           } \n           throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n         }\n-\n-        @Override\n-        public void remove() {\n-          throw new UnsupportedOperationException(\"Remove is not supported\");\n-\n-        }\n       };\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public RemoteIterator\u003cLocatedFileStatus\u003e listFiles(\n        final Path f, final boolean recursive) throws AccessControlException,\n        FileNotFoundException, UnsupportedFileSystemException, \n        IOException {\n      return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n        private Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n          new Stack\u003cRemoteIterator\u003cLocatedFileStatus\u003e\u003e();\n        RemoteIterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n        LocatedFileStatus curFile;\n\n        /**\n         * Returns \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         *\n         * @return \u003ctt\u003etrue\u003c/tt\u003e if the iterator has more files.\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public boolean hasNext() throws IOException {\n          while (curFile \u003d\u003d null) {\n            if (curItor.hasNext()) {\n              handleFileStat(curItor.next());\n            } else if (!itors.empty()) {\n              curItor \u003d itors.pop();\n            } else {\n              return false;\n            }\n          }\n          return true;\n        }\n\n        /**\n         * Process the input stat.\n         * If it is a file, return the file stat.\n         * If it is a directory, traverse the directory if recursive is true;\n         * ignore it if recursive is false.\n         * If it is a symlink, resolve the symlink first and then process it\n         * depending on if it is a file or directory.\n         * @param stat input status\n         * @throws AccessControlException if access is denied\n         * @throws FileNotFoundException if file is not found\n         * @throws UnsupportedFileSystemException if fs is not supported\n         * @throws IOException for all other IO errors\n         */\n        private void handleFileStat(LocatedFileStatus stat)\n        throws IOException {\n          if (stat.isFile()) { // file\n            curFile \u003d stat;\n          } else if (stat.isSymlink()) { // symbolic link\n            // resolve symbolic link\n            FileStatus symstat \u003d FileContext.this.getFileStatus(\n                stat.getSymlink());\n            if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n              itors.push(curItor);\n              curItor \u003d listLocatedStatus(stat.getPath());\n            }\n          } else if (recursive) { // directory\n            itors.push(curItor);\n            curItor \u003d listLocatedStatus(stat.getPath());\n          }\n        }\n\n        /**\n         * Returns the next file\u0027s status with its block locations\n         *\n         * @throws AccessControlException if not allowed to access next\n         *                                file\u0027s status or locations\n         * @throws FileNotFoundException if next file does not exist any more\n         * @throws UnsupportedFileSystemException if next file\u0027s \n         *                                        fs is unsupported\n         * @throws IOException for all other IO errors\n         *                     for example, NameNode is not avaialbe or\n         *                     NameNode throws IOException due to an error\n         *                     while getting the status or block locations\n         */\n        @Override\n        public LocatedFileStatus next() throws IOException {\n          if (hasNext()) {\n            LocatedFileStatus result \u003d curFile;\n            curFile \u003d null;\n            return result;\n          } \n          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n        }\n      };\n    }",
          "path": "src/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "d0ba178800d04e6e9842a1823b2205732608c0b5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6890. Improve listFiles API introduced by HADOOP-6870. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/10 1:52 PM",
      "commitName": "d0ba178800d04e6e9842a1823b2205732608c0b5",
      "commitAuthor": "Hairong Kuang",
      "commitDateOld": "28/07/10 5:14 PM",
      "commitNameOld": "19eea554e3fafb46f39a37b7b1be0f20e09aa52e",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,86 @@\n-  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n-      final Path f, final boolean recursive) throws AccessControlException,\n-      FileNotFoundException, UnsupportedFileSystemException, \n-      IOException {\n-    return new Iterator\u003cLocatedFileStatus\u003e() {\n-      private Stack\u003cPath\u003e dirs \u003d new Stack\u003cPath\u003e();\n-      private Stack\u003cPath\u003e symLinks \u003d new Stack\u003cPath\u003e();\n-      Iterator\u003cLocatedFileStatus\u003e itor \u003d listLocatedStatus(f);\n-      LocatedFileStatus curFile;\n-\n-      @Override\n-      public boolean hasNext() {\n-        try {\n-          while (curFile \u003d\u003d null) {\n-            if (itor.hasNext()) {\n-              handleFileStat(itor.next());\n-            } else if (!dirs.isEmpty()) {\n-              Path dirPath \u003d dirs.pop(); \n-              itor \u003d listLocatedStatus(dirPath);\n-            } else if (!symLinks.isEmpty()) {\n-              Path symLink \u003d symLinks.pop();\n-              FileStatus stat \u003d getFileStatus(symLink);\n-              if (stat.isFile() || (recursive \u0026\u0026 stat.isDirectory())) {\n-                itor \u003d listLocatedStatus(stat.getPath());\n+    public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+        final Path f, final boolean recursive) throws AccessControlException,\n+        FileNotFoundException, UnsupportedFileSystemException, \n+        IOException {\n+      return new Iterator\u003cLocatedFileStatus\u003e() {\n+        private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n+          new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n+        Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n+        LocatedFileStatus curFile;\n+       \n+        /**\n+         *  {@inheritDoc}\n+         *  @return {@inheritDog} \n+         *  @throws Runtimeexception if any IOException occurs during traversal;\n+         *  the IOException is set as the cause of the RuntimeException\n+         */\n+        @Override\n+        public boolean hasNext() {\n+            while (curFile \u003d\u003d null) {\n+              if (curItor.hasNext()) {\n+                handleFileStat(curItor.next());\n+              } else if (!itors.empty()) {\n+                curItor \u003d itors.pop();\n+              } else {\n+                return false;\n               }\n-            } else {\n-              return false;\n             }\n+            return true;\n+        }\n+\n+        /**\n+         * Process the input stat.\n+         * If it is a file, return the file stat.\n+         * If it is a directory, tranverse the directory if recursive is true;\n+         * ignore it if recursive is false.\n+         * If it is a symlink, resolve the symlink first and then process it\n+         * depending on if it is a file or directory.\n+         * @param stat input status\n+         * @throws RuntimeException if any io error occurs; the io exception\n+         * is set as the cause of RuntimeException\n+         */\n+        private void handleFileStat(LocatedFileStatus stat) {\n+          try {\n+            if (stat.isFile()) { // file\n+              curFile \u003d stat;\n+            } else if (stat.isSymlink()) { // symbolic link\n+              // resolve symbolic link\n+              FileStatus symstat \u003d FileContext.this.getFileStatus(\n+                  stat.getSymlink());\n+              if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n+                itors.push(curItor);\n+                curItor \u003d listLocatedStatus(stat.getPath());\n+              }\n+            } else if (recursive) { // directory\n+              itors.push(curItor);\n+              curItor \u003d listLocatedStatus(stat.getPath());\n+            }\n+          } catch (IOException ioe) {\n+            throw (RuntimeException)new RuntimeException().initCause(ioe);\n           }\n-          return true;\n-        } catch (IOException ioe) {\n-          throw (RuntimeException)new RuntimeException().initCause(ioe);\n         }\n-      }\n \n-      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n-        if (stat.isFile()) { // file\n-          curFile \u003d stat;\n-        } else if (stat.isSymlink()) { // symbolic link\n-          symLinks.push(stat.getSymlink());\n-        } else if (recursive) { // directory\n-          dirs.push(stat.getPath());\n+        /**\n+         *  {@inheritDoc}\n+         *  @return {@inheritDoc} \n+         *  @throws Runtimeexception if any IOException occurs during traversal;\n+         *  the IOException is set as the cause of the RuntimeException\n+         *  @exception {@inheritDoc}\n+         */\n+        @Override\n+        public LocatedFileStatus next() {\n+          if (hasNext()) {\n+            LocatedFileStatus result \u003d curFile;\n+            curFile \u003d null;\n+            return result;\n+          } \n+          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n         }\n-      }\n \n-      @Override\n-      public LocatedFileStatus next() {\n-        if (hasNext()) {\n-          LocatedFileStatus result \u003d curFile;\n-          curFile \u003d null;\n-          return result;\n-        } \n-        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n-      }\n+        @Override\n+        public void remove() {\n+          throw new UnsupportedOperationException(\"Remove is not supported\");\n \n-      @Override\n-      public void remove() {\n-        throw new UnsupportedOperationException(\"Remove is not supported\");\n-\n-      }\n-    };\n-  }\n\\ No newline at end of file\n+        }\n+      };\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public Iterator\u003cLocatedFileStatus\u003e listFiles(\n        final Path f, final boolean recursive) throws AccessControlException,\n        FileNotFoundException, UnsupportedFileSystemException, \n        IOException {\n      return new Iterator\u003cLocatedFileStatus\u003e() {\n        private Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e itors \u003d \n          new Stack\u003cIterator\u003cLocatedFileStatus\u003e\u003e();\n        Iterator\u003cLocatedFileStatus\u003e curItor \u003d listLocatedStatus(f);\n        LocatedFileStatus curFile;\n       \n        /**\n         *  {@inheritDoc}\n         *  @return {@inheritDog} \n         *  @throws Runtimeexception if any IOException occurs during traversal;\n         *  the IOException is set as the cause of the RuntimeException\n         */\n        @Override\n        public boolean hasNext() {\n            while (curFile \u003d\u003d null) {\n              if (curItor.hasNext()) {\n                handleFileStat(curItor.next());\n              } else if (!itors.empty()) {\n                curItor \u003d itors.pop();\n              } else {\n                return false;\n              }\n            }\n            return true;\n        }\n\n        /**\n         * Process the input stat.\n         * If it is a file, return the file stat.\n         * If it is a directory, tranverse the directory if recursive is true;\n         * ignore it if recursive is false.\n         * If it is a symlink, resolve the symlink first and then process it\n         * depending on if it is a file or directory.\n         * @param stat input status\n         * @throws RuntimeException if any io error occurs; the io exception\n         * is set as the cause of RuntimeException\n         */\n        private void handleFileStat(LocatedFileStatus stat) {\n          try {\n            if (stat.isFile()) { // file\n              curFile \u003d stat;\n            } else if (stat.isSymlink()) { // symbolic link\n              // resolve symbolic link\n              FileStatus symstat \u003d FileContext.this.getFileStatus(\n                  stat.getSymlink());\n              if (symstat.isFile() || (recursive \u0026\u0026 symstat.isDirectory())) {\n                itors.push(curItor);\n                curItor \u003d listLocatedStatus(stat.getPath());\n              }\n            } else if (recursive) { // directory\n              itors.push(curItor);\n              curItor \u003d listLocatedStatus(stat.getPath());\n            }\n          } catch (IOException ioe) {\n            throw (RuntimeException)new RuntimeException().initCause(ioe);\n          }\n        }\n\n        /**\n         *  {@inheritDoc}\n         *  @return {@inheritDoc} \n         *  @throws Runtimeexception if any IOException occurs during traversal;\n         *  the IOException is set as the cause of the RuntimeException\n         *  @exception {@inheritDoc}\n         */\n        @Override\n        public LocatedFileStatus next() {\n          if (hasNext()) {\n            LocatedFileStatus result \u003d curFile;\n            curFile \u003d null;\n            return result;\n          } \n          throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n        }\n\n        @Override\n        public void remove() {\n          throw new UnsupportedOperationException(\"Remove is not supported\");\n\n        }\n      };\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "19eea554e3fafb46f39a37b7b1be0f20e09aa52e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6870. Add a new API getFiles to FileSystem and FileContext. Contributed by Hairong Kuang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/07/10 5:14 PM",
      "commitName": "19eea554e3fafb46f39a37b7b1be0f20e09aa52e",
      "commitAuthor": "Hairong Kuang",
      "diff": "@@ -0,0 +1,62 @@\n+  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n+      final Path f, final boolean recursive) throws AccessControlException,\n+      FileNotFoundException, UnsupportedFileSystemException, \n+      IOException {\n+    return new Iterator\u003cLocatedFileStatus\u003e() {\n+      private Stack\u003cPath\u003e dirs \u003d new Stack\u003cPath\u003e();\n+      private Stack\u003cPath\u003e symLinks \u003d new Stack\u003cPath\u003e();\n+      Iterator\u003cLocatedFileStatus\u003e itor \u003d listLocatedStatus(f);\n+      LocatedFileStatus curFile;\n+\n+      @Override\n+      public boolean hasNext() {\n+        try {\n+          while (curFile \u003d\u003d null) {\n+            if (itor.hasNext()) {\n+              handleFileStat(itor.next());\n+            } else if (!dirs.isEmpty()) {\n+              Path dirPath \u003d dirs.pop(); \n+              itor \u003d listLocatedStatus(dirPath);\n+            } else if (!symLinks.isEmpty()) {\n+              Path symLink \u003d symLinks.pop();\n+              FileStatus stat \u003d getFileStatus(symLink);\n+              if (stat.isFile() || (recursive \u0026\u0026 stat.isDirectory())) {\n+                itor \u003d listLocatedStatus(stat.getPath());\n+              }\n+            } else {\n+              return false;\n+            }\n+          }\n+          return true;\n+        } catch (IOException ioe) {\n+          throw (RuntimeException)new RuntimeException().initCause(ioe);\n+        }\n+      }\n+\n+      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n+        if (stat.isFile()) { // file\n+          curFile \u003d stat;\n+        } else if (stat.isSymlink()) { // symbolic link\n+          symLinks.push(stat.getSymlink());\n+        } else if (recursive) { // directory\n+          dirs.push(stat.getPath());\n+        }\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() {\n+        if (hasNext()) {\n+          LocatedFileStatus result \u003d curFile;\n+          curFile \u003d null;\n+          return result;\n+        } \n+        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\"Remove is not supported\");\n+\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Iterator\u003cLocatedFileStatus\u003e listFiles(\n      final Path f, final boolean recursive) throws AccessControlException,\n      FileNotFoundException, UnsupportedFileSystemException, \n      IOException {\n    return new Iterator\u003cLocatedFileStatus\u003e() {\n      private Stack\u003cPath\u003e dirs \u003d new Stack\u003cPath\u003e();\n      private Stack\u003cPath\u003e symLinks \u003d new Stack\u003cPath\u003e();\n      Iterator\u003cLocatedFileStatus\u003e itor \u003d listLocatedStatus(f);\n      LocatedFileStatus curFile;\n\n      @Override\n      public boolean hasNext() {\n        try {\n          while (curFile \u003d\u003d null) {\n            if (itor.hasNext()) {\n              handleFileStat(itor.next());\n            } else if (!dirs.isEmpty()) {\n              Path dirPath \u003d dirs.pop(); \n              itor \u003d listLocatedStatus(dirPath);\n            } else if (!symLinks.isEmpty()) {\n              Path symLink \u003d symLinks.pop();\n              FileStatus stat \u003d getFileStatus(symLink);\n              if (stat.isFile() || (recursive \u0026\u0026 stat.isDirectory())) {\n                itor \u003d listLocatedStatus(stat.getPath());\n              }\n            } else {\n              return false;\n            }\n          }\n          return true;\n        } catch (IOException ioe) {\n          throw (RuntimeException)new RuntimeException().initCause(ioe);\n        }\n      }\n\n      private void handleFileStat(LocatedFileStatus stat) throws IOException {\n        if (stat.isFile()) { // file\n          curFile \u003d stat;\n        } else if (stat.isSymlink()) { // symbolic link\n          symLinks.push(stat.getSymlink());\n        } else if (recursive) { // directory\n          dirs.push(stat.getPath());\n        }\n      }\n\n      @Override\n      public LocatedFileStatus next() {\n        if (hasNext()) {\n          LocatedFileStatus result \u003d curFile;\n          curFile \u003d null;\n          return result;\n        } \n        throw new java.util.NoSuchElementException(\"No more entry in \" + f);\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Remove is not supported\");\n\n      }\n    };\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}