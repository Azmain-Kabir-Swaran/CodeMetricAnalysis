{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "shouldAllocOrReserveNewContainer",
  "functionId": "shouldAllocOrReserveNewContainer___schedulerKey-SchedulerRequestKey__required-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 670,
  "functionEndLine": 699,
  "numCommitsSeen": 297,
  "timeTaken": 12896,
  "changeHistory": [
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "ba2313d6145a1234777938a747187373f4cd58d9",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "b9a5fd51904a074a7a33f38266378f0f6f97b531",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Ymultichange(Ymovefromfile,Ybodychange)",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": "Yrename",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "b9a5fd51904a074a7a33f38266378f0f6f97b531": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   boolean shouldAllocOrReserveNewContainer(\n       SchedulerRequestKey schedulerKey, Resource required) {\n     int requiredContainers \u003d\n-        application.getTotalRequiredResources(schedulerKey);\n+        application.getOutstandingAsksCount(schedulerKey);\n     int reservedContainers \u003d application.getNumReservedContainers(schedulerKey);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d Resources.ratio(\n           rc, required, application.getCSLeafQueue().getMaximumAllocation());\n \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d\n           (int) ((application.getReReservations(schedulerKey) /\n               (float) reservedContainers) * (1.0f - (Math.min(\n                   nodeFactor, application.getCSLeafQueue()\n                   .getMinimumAllocationFactor()))));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n             + application.getReReservations(schedulerKey) + \" reserved\u003d\"\n             + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n             + \" minAllocFactor\u003d\"\n             + application.getCSLeafQueue().getMinimumAllocationFactor()\n             + \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean shouldAllocOrReserveNewContainer(\n      SchedulerRequestKey schedulerKey, Resource required) {\n    int requiredContainers \u003d\n        application.getOutstandingAsksCount(schedulerKey);\n    int reservedContainers \u003d application.getNumReservedContainers(schedulerKey);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d Resources.ratio(\n          rc, required, application.getCSLeafQueue().getMaximumAllocation());\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int) ((application.getReReservations(schedulerKey) /\n              (float) reservedContainers) * (1.0f - (Math.min(\n                  nodeFactor, application.getCSLeafQueue()\n                  .getMinimumAllocationFactor()))));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n            + application.getReReservations(schedulerKey) + \" reserved\u003d\"\n            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n            + \" minAllocFactor\u003d\"\n            + application.getCSLeafQueue().getMinimumAllocationFactor()\n            + \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n-    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n-    int reservedContainers \u003d application.getNumReservedContainers(priority);\n+  boolean shouldAllocOrReserveNewContainer(\n+      SchedulerRequestKey schedulerKey, Resource required) {\n+    int requiredContainers \u003d\n+        application.getTotalRequiredResources(schedulerKey);\n+    int reservedContainers \u003d application.getNumReservedContainers(schedulerKey);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n-      float nodeFactor \u003d\n-          Resources\n-              .ratio(rc, required, application.getCSLeafQueue().getMaximumAllocation());\n+      float nodeFactor \u003d Resources.ratio(\n+          rc, required, application.getCSLeafQueue().getMaximumAllocation());\n \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d\n-          (int) ((application.getReReservations(priority) / \n+          (int) ((application.getReReservations(schedulerKey) /\n               (float) reservedContainers) * (1.0f - (Math.min(\n                   nodeFactor, application.getCSLeafQueue()\n                   .getMinimumAllocationFactor()))));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n-            + application.getReReservations(priority) + \" reserved\u003d\"\n+            + application.getReReservations(schedulerKey) + \" reserved\u003d\"\n             + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n             + \" minAllocFactor\u003d\"\n             + application.getCSLeafQueue().getMinimumAllocationFactor()\n             + \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean shouldAllocOrReserveNewContainer(\n      SchedulerRequestKey schedulerKey, Resource required) {\n    int requiredContainers \u003d\n        application.getTotalRequiredResources(schedulerKey);\n    int reservedContainers \u003d application.getNumReservedContainers(schedulerKey);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d Resources.ratio(\n          rc, required, application.getCSLeafQueue().getMaximumAllocation());\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int) ((application.getReReservations(schedulerKey) /\n              (float) reservedContainers) * (1.0f - (Math.min(\n                  nodeFactor, application.getCSLeafQueue()\n                  .getMinimumAllocationFactor()))));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n            + application.getReReservations(schedulerKey) + \" reserved\u003d\"\n            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n            + \" minAllocFactor\u003d\"\n            + application.getCSLeafQueue().getMinimumAllocationFactor()\n            + \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, required-Resource]",
            "newValue": "[schedulerKey-SchedulerRequestKey, required-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n-      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n-    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n-    int reservedContainers \u003d application.getNumReservedContainers(priority);\n+  boolean shouldAllocOrReserveNewContainer(\n+      SchedulerRequestKey schedulerKey, Resource required) {\n+    int requiredContainers \u003d\n+        application.getTotalRequiredResources(schedulerKey);\n+    int reservedContainers \u003d application.getNumReservedContainers(schedulerKey);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n-      float nodeFactor \u003d\n-          Resources\n-              .ratio(rc, required, application.getCSLeafQueue().getMaximumAllocation());\n+      float nodeFactor \u003d Resources.ratio(\n+          rc, required, application.getCSLeafQueue().getMaximumAllocation());\n \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d\n-          (int) ((application.getReReservations(priority) / \n+          (int) ((application.getReReservations(schedulerKey) /\n               (float) reservedContainers) * (1.0f - (Math.min(\n                   nodeFactor, application.getCSLeafQueue()\n                   .getMinimumAllocationFactor()))));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n-            + application.getReReservations(priority) + \" reserved\u003d\"\n+            + application.getReReservations(schedulerKey) + \" reserved\u003d\"\n             + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n             + \" minAllocFactor\u003d\"\n             + application.getCSLeafQueue().getMinimumAllocationFactor()\n             + \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean shouldAllocOrReserveNewContainer(\n      SchedulerRequestKey schedulerKey, Resource required) {\n    int requiredContainers \u003d\n        application.getTotalRequiredResources(schedulerKey);\n    int reservedContainers \u003d application.getNumReservedContainers(schedulerKey);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d Resources.ratio(\n          rc, required, application.getCSLeafQueue().getMaximumAllocation());\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int) ((application.getReReservations(schedulerKey) /\n              (float) reservedContainers) * (1.0f - (Math.min(\n                  nodeFactor, application.getCSLeafQueue()\n                  .getMinimumAllocationFactor()))));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n            + application.getReReservations(schedulerKey) + \" reserved\u003d\"\n            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n            + \" minAllocFactor\u003d\"\n            + application.getCSLeafQueue().getMinimumAllocationFactor()\n            + \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n       shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n-    int requiredContainers \u003d getTotalRequiredResources(priority);\n-    int reservedContainers \u003d getNumReservedContainers(priority);\n+    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n+    int reservedContainers \u003d application.getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d\n-          Resources.ratio(\n-              rc, required, getCSLeafQueue().getMaximumAllocation()\n-              );\n+          Resources\n+              .ratio(rc, required, application.getCSLeafQueue().getMaximumAllocation());\n \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d\n-          (int)((getReReservations(priority) / (float)reservedContainers) *\n-                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n-               );\n+          (int) ((application.getReReservations(priority) / \n+              (float) reservedContainers) * (1.0f - (Math.min(\n+                  nodeFactor, application.getCSLeafQueue()\n+                  .getMinimumAllocationFactor()))));\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"needsContainers:\" +\n-            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n-            \" reserved\u003d\" + reservedContainers +\n-            \" nodeFactor\u003d\" + nodeFactor +\n-            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n-            \" starvation\u003d\" + starvation);\n+        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n+            + application.getReReservations(priority) + \" reserved\u003d\"\n+            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n+            + \" minAllocFactor\u003d\"\n+            + application.getCSLeafQueue().getMinimumAllocationFactor()\n+            + \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d\n          Resources\n              .ratio(rc, required, application.getCSLeafQueue().getMaximumAllocation());\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int) ((application.getReReservations(priority) / \n              (float) reservedContainers) * (1.0f - (Math.min(\n                  nodeFactor, application.getCSLeafQueue()\n                  .getMinimumAllocationFactor()))));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n            + application.getReReservations(priority) + \" reserved\u003d\"\n            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n            + \" minAllocFactor\u003d\"\n            + application.getCSLeafQueue().getMinimumAllocationFactor()\n            + \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
            "oldMethodName": "shouldAllocOrReserveNewContainer",
            "newMethodName": "shouldAllocOrReserveNewContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n       shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n-    int requiredContainers \u003d getTotalRequiredResources(priority);\n-    int reservedContainers \u003d getNumReservedContainers(priority);\n+    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n+    int reservedContainers \u003d application.getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d\n-          Resources.ratio(\n-              rc, required, getCSLeafQueue().getMaximumAllocation()\n-              );\n+          Resources\n+              .ratio(rc, required, application.getCSLeafQueue().getMaximumAllocation());\n \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d\n-          (int)((getReReservations(priority) / (float)reservedContainers) *\n-                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n-               );\n+          (int) ((application.getReReservations(priority) / \n+              (float) reservedContainers) * (1.0f - (Math.min(\n+                  nodeFactor, application.getCSLeafQueue()\n+                  .getMinimumAllocationFactor()))));\n \n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"needsContainers:\" +\n-            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n-            \" reserved\u003d\" + reservedContainers +\n-            \" nodeFactor\u003d\" + nodeFactor +\n-            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n-            \" starvation\u003d\" + starvation);\n+        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n+            + application.getReReservations(priority) + \" reserved\u003d\"\n+            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n+            + \" minAllocFactor\u003d\"\n+            + application.getCSLeafQueue().getMinimumAllocationFactor()\n+            + \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d\n          Resources\n              .ratio(rc, required, application.getCSLeafQueue().getMaximumAllocation());\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int) ((application.getReReservations(priority) / \n              (float) reservedContainers) * (1.0f - (Math.min(\n                  nodeFactor, application.getCSLeafQueue()\n                  .getMinimumAllocationFactor()))));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" + \" app.#re-reserve\u003d\"\n            + application.getReReservations(priority) + \" reserved\u003d\"\n            + reservedContainers + \" nodeFactor\u003d\" + nodeFactor\n            + \" minAllocFactor\u003d\"\n            + application.getCSLeafQueue().getMinimumAllocationFactor()\n            + \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  boolean shouldAllocOrReserveNewContainer(FiCaSchedulerApp application,\n-      Priority priority, Resource required) {\n-    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n-    int reservedContainers \u003d application.getNumReservedContainers(priority);\n+      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n+    int requiredContainers \u003d getTotalRequiredResources(priority);\n+    int reservedContainers \u003d getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n-      float nodeFactor \u003d \n+      float nodeFactor \u003d\n           Resources.ratio(\n-              resourceCalculator, required, getMaximumAllocation()\n+              rc, required, getCSLeafQueue().getMaximumAllocation()\n               );\n-      \n+\n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n-      starvation \u003d \n-          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n-                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n+      starvation \u003d\n+          (int)((getReReservations(priority) / (float)reservedContainers) *\n+                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n                );\n-      \n+\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n-            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n-            \" reserved\u003d\" + reservedContainers + \n-            \" nodeFactor\u003d\" + nodeFactor + \n-            \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n+            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n+            \" reserved\u003d\" + reservedContainers +\n+            \" nodeFactor\u003d\" + nodeFactor +\n+            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n    int requiredContainers \u003d getTotalRequiredResources(priority);\n    int reservedContainers \u003d getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d\n          Resources.ratio(\n              rc, required, getCSLeafQueue().getMaximumAllocation()\n              );\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int)((getReReservations(priority) / (float)reservedContainers) *\n                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n               );\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n            \" reserved\u003d\" + reservedContainers +\n            \" nodeFactor\u003d\" + nodeFactor +\n            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "oldMethodName": "shouldAllocOrReserveNewContainer",
            "newMethodName": "shouldAllocOrReserveNewContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  boolean shouldAllocOrReserveNewContainer(FiCaSchedulerApp application,\n-      Priority priority, Resource required) {\n-    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n-    int reservedContainers \u003d application.getNumReservedContainers(priority);\n+      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n+    int requiredContainers \u003d getTotalRequiredResources(priority);\n+    int reservedContainers \u003d getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n-      float nodeFactor \u003d \n+      float nodeFactor \u003d\n           Resources.ratio(\n-              resourceCalculator, required, getMaximumAllocation()\n+              rc, required, getCSLeafQueue().getMaximumAllocation()\n               );\n-      \n+\n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n-      starvation \u003d \n-          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n-                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n+      starvation \u003d\n+          (int)((getReReservations(priority) / (float)reservedContainers) *\n+                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n                );\n-      \n+\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n-            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n-            \" reserved\u003d\" + reservedContainers + \n-            \" nodeFactor\u003d\" + nodeFactor + \n-            \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n+            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n+            \" reserved\u003d\" + reservedContainers +\n+            \" nodeFactor\u003d\" + nodeFactor +\n+            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n    int requiredContainers \u003d getTotalRequiredResources(priority);\n    int reservedContainers \u003d getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d\n          Resources.ratio(\n              rc, required, getCSLeafQueue().getMaximumAllocation()\n              );\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int)((getReReservations(priority) / (float)reservedContainers) *\n                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n               );\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n            \" reserved\u003d\" + reservedContainers +\n            \" nodeFactor\u003d\" + nodeFactor +\n            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "24/07/15 2:00 PM",
          "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/07/15 1:38 PM",
          "commitNameOld": "fc42fa8ae3bc9d6d055090a7bb5e6f0c5972fcff",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  boolean shouldAllocOrReserveNewContainer(FiCaSchedulerApp application,\n-      Priority priority, Resource required) {\n-    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n-    int reservedContainers \u003d application.getNumReservedContainers(priority);\n+      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n+    int requiredContainers \u003d getTotalRequiredResources(priority);\n+    int reservedContainers \u003d getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n-      float nodeFactor \u003d \n+      float nodeFactor \u003d\n           Resources.ratio(\n-              resourceCalculator, required, getMaximumAllocation()\n+              rc, required, getCSLeafQueue().getMaximumAllocation()\n               );\n-      \n+\n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n-      starvation \u003d \n-          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n-                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n+      starvation \u003d\n+          (int)((getReReservations(priority) / (float)reservedContainers) *\n+                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n                );\n-      \n+\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n-            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n-            \" reserved\u003d\" + reservedContainers + \n-            \" nodeFactor\u003d\" + nodeFactor + \n-            \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n+            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n+            \" reserved\u003d\" + reservedContainers +\n+            \" nodeFactor\u003d\" + nodeFactor +\n+            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      shouldAllocOrReserveNewContainer(Priority priority, Resource required) {\n    int requiredContainers \u003d getTotalRequiredResources(priority);\n    int reservedContainers \u003d getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d\n          Resources.ratio(\n              rc, required, getCSLeafQueue().getMaximumAllocation()\n              );\n\n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d\n          (int)((getReReservations(priority) / (float)reservedContainers) *\n                (1.0f - (Math.min(nodeFactor, getCSLeafQueue().getMinimumAllocationFactor())))\n               );\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + getReReservations(priority) +\n            \" reserved\u003d\" + reservedContainers +\n            \" nodeFactor\u003d\" + nodeFactor +\n            \" minAllocFactor\u003d\" + getCSLeafQueue().getMinimumAllocationFactor() +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[application-FiCaSchedulerApp, priority-Priority, required-Resource]",
            "newValue": "[priority-Priority, required-Resource]"
          }
        }
      ]
    },
    "487374b7fe0c92fc7eb1406c568952722b5d5b15": {
      "type": "Yrename",
      "commitMessage": "YARN-3243. CapacityScheduler should pass headroom from parent to children to make sure ParentQueue obey its capacity limits. Contributed by Wangda Tan.\n",
      "commitDate": "17/03/15 10:24 AM",
      "commitName": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/03/15 11:49 AM",
      "commitNameOld": "e17e5ba9d7e2bd45ba6884f59f8045817594b284",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.9,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-  boolean needContainers(FiCaSchedulerApp application, Priority priority,\n-      Resource required) {\n+  boolean shouldAllocOrReserveNewContainer(FiCaSchedulerApp application,\n+      Priority priority, Resource required) {\n     int requiredContainers \u003d application.getTotalRequiredResources(priority);\n     int reservedContainers \u003d application.getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d \n           Resources.ratio(\n               resourceCalculator, required, getMaximumAllocation()\n               );\n       \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d \n           (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                 (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n                );\n       \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n             \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n             \" reserved\u003d\" + reservedContainers + \n             \" nodeFactor\u003d\" + nodeFactor + \n             \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean shouldAllocOrReserveNewContainer(FiCaSchedulerApp application,\n      Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          Resources.ratio(\n              resourceCalculator, required, getMaximumAllocation()\n              );\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "needContainers",
        "newValue": "shouldAllocOrReserveNewContainer"
      }
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/11/12 1:56 PM",
      "commitNameOld": "fb5b96dfc324f999e8b3698288c110a1c3b71c30",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 62.3,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   boolean needContainers(FiCaSchedulerApp application, Priority priority, Resource required) {\n     int requiredContainers \u003d application.getTotalRequiredResources(priority);\n     int reservedContainers \u003d application.getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d \n-          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n+          Resources.ratio(\n+              resourceCalculator, required, getMaximumAllocation()\n+              );\n       \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d \n           (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                 (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n                );\n       \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n             \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n             \" reserved\u003d\" + reservedContainers + \n             \" nodeFactor\u003d\" + nodeFactor + \n-            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n+            \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean needContainers(FiCaSchedulerApp application, Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          Resources.ratio(\n              resourceCalculator, required, getMaximumAllocation()\n              );\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + getMinimumAllocationFactor() +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean needContainers(FiCaSchedulerApp application, Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n-  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n+  boolean needContainers(FiCaSchedulerApp application, Priority priority, Resource required) {\n     int requiredContainers \u003d application.getTotalRequiredResources(priority);\n     int reservedContainers \u003d application.getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d \n           ((float)required.getMemory() / getMaximumAllocation().getMemory());\n       \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d \n           (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                 (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n                );\n       \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n             \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n             \" reserved\u003d\" + reservedContainers + \n             \" nodeFactor\u003d\" + nodeFactor + \n             \" minAllocFactor\u003d\" + minimumAllocationFactor +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean needContainers(FiCaSchedulerApp application, Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[application-SchedulerApp, priority-Priority, required-Resource]",
        "newValue": "[application-FiCaSchedulerApp, priority-Priority, required-Resource]"
      }
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "05/09/11 12:49 PM",
      "commitNameOld": "6b608aad7d52b524fa94955a538e8b3524d42d93",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.94,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n     int requiredContainers \u003d application.getTotalRequiredResources(priority);\n     int reservedContainers \u003d application.getNumReservedContainers(priority);\n     int starvation \u003d 0;\n     if (reservedContainers \u003e 0) {\n       float nodeFactor \u003d \n           ((float)required.getMemory() / getMaximumAllocation().getMemory());\n       \n       // Use percentage of node required to bias against large containers...\n       // Protect against corner case where you need the whole node with\n       // Math.min(nodeFactor, minimumAllocationFactor)\n       starvation \u003d \n-          (int)((application.getReReservations(priority) / reservedContainers) * \n+          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                 (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n                );\n       \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"needsContainers:\" +\n             \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n             \" reserved\u003d\" + reservedContainers + \n             \" nodeFactor\u003d\" + nodeFactor + \n             \" minAllocFactor\u003d\" + minimumAllocationFactor +\n             \" starvation\u003d\" + starvation);\n       }\n     }\n     return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / (float)reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "b9a5fd51904a074a7a33f38266378f0f6f97b531": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2917. Fixed corner case in container reservation which led to starvation and hung jobs. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 12:52 PM",
      "commitName": "b9a5fd51904a074a7a33f38266378f0f6f97b531",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2917. Fixed corner case in container reservation which led to starvation and hung jobs. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163768 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/08/11 12:52 PM",
          "commitName": "b9a5fd51904a074a7a33f38266378f0f6f97b531",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 6.82,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,27 @@\n-  boolean needContainers(SchedulerApp application, Priority priority) {\n+  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n     int requiredContainers \u003d application.getTotalRequiredResources(priority);\n     int reservedContainers \u003d application.getNumReservedContainers(priority);\n-    return ((requiredContainers - reservedContainers) \u003e 0);\n+    int starvation \u003d 0;\n+    if (reservedContainers \u003e 0) {\n+      float nodeFactor \u003d \n+          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n+      \n+      // Use percentage of node required to bias against large containers...\n+      // Protect against corner case where you need the whole node with\n+      // Math.min(nodeFactor, minimumAllocationFactor)\n+      starvation \u003d \n+          (int)((application.getReReservations(priority) / reservedContainers) * \n+                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n+               );\n+      \n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"needsContainers:\" +\n+            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n+            \" reserved\u003d\" + reservedContainers + \n+            \" nodeFactor\u003d\" + nodeFactor + \n+            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n+            \" starvation\u003d\" + starvation);\n+      }\n+    }\n+    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[application-SchedulerApp, priority-Priority]",
            "newValue": "[application-SchedulerApp, priority-Priority, required-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2917. Fixed corner case in container reservation which led to starvation and hung jobs. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163768 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "31/08/11 12:52 PM",
          "commitName": "b9a5fd51904a074a7a33f38266378f0f6f97b531",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 6.82,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,27 @@\n-  boolean needContainers(SchedulerApp application, Priority priority) {\n+  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n     int requiredContainers \u003d application.getTotalRequiredResources(priority);\n     int reservedContainers \u003d application.getNumReservedContainers(priority);\n-    return ((requiredContainers - reservedContainers) \u003e 0);\n+    int starvation \u003d 0;\n+    if (reservedContainers \u003e 0) {\n+      float nodeFactor \u003d \n+          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n+      \n+      // Use percentage of node required to bias against large containers...\n+      // Protect against corner case where you need the whole node with\n+      // Math.min(nodeFactor, minimumAllocationFactor)\n+      starvation \u003d \n+          (int)((application.getReReservations(priority) / reservedContainers) * \n+                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n+               );\n+      \n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"needsContainers:\" +\n+            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n+            \" reserved\u003d\" + reservedContainers + \n+            \" nodeFactor\u003d\" + nodeFactor + \n+            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n+            \" starvation\u003d\" + starvation);\n+      }\n+    }\n+    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean needContainers(SchedulerApp application, Priority priority, Resource required) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    int starvation \u003d 0;\n    if (reservedContainers \u003e 0) {\n      float nodeFactor \u003d \n          ((float)required.getMemory() / getMaximumAllocation().getMemory());\n      \n      // Use percentage of node required to bias against large containers...\n      // Protect against corner case where you need the whole node with\n      // Math.min(nodeFactor, minimumAllocationFactor)\n      starvation \u003d \n          (int)((application.getReReservations(priority) / reservedContainers) * \n                (1.0f - (Math.min(nodeFactor, getMinimumAllocationFactor())))\n               );\n      \n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"needsContainers:\" +\n            \" app.#re-reserve\u003d\" + application.getReReservations(priority) + \n            \" reserved\u003d\" + reservedContainers + \n            \" nodeFactor\u003d\" + nodeFactor + \n            \" minAllocFactor\u003d\" + minimumAllocationFactor +\n            \" starvation\u003d\" + starvation);\n      }\n    }\n    return (((starvation + requiredContainers) - reservedContainers) \u003e 0);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean needContainers(SchedulerApp application, Priority priority) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    return ((requiredContainers - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,5 @@\n+  boolean needContainers(SchedulerApp application, Priority priority) {\n+    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n+    int reservedContainers \u003d application.getNumReservedContainers(priority);\n+    return ((requiredContainers - reservedContainers) \u003e 0);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean needContainers(SchedulerApp application, Priority priority) {\n    int requiredContainers \u003d application.getTotalRequiredResources(priority);\n    int reservedContainers \u003d application.getNumReservedContainers(priority);\n    return ((requiredContainers - reservedContainers) \u003e 0);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}