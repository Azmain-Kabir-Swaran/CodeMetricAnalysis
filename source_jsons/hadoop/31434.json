{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HBaseTimelineWriterImpl.java",
  "functionName": "storeEvents",
  "functionId": "storeEvents___rowKey-byte[]__events-Set__TimelineEvent____columnPrefix-ColumnPrefix__T____table-TypedBufferedMutator__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
  "functionStartLine": 551,
  "functionEndLine": 588,
  "numCommitsSeen": 49,
  "timeTaken": 6081,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "9f6540535d9148abbea836d54a9e94d25319c5d5",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "b51d0fef56a59b15489f5b932025718b4e9613d2",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
    "00e85e7a2b9446dc37265feba07473b156d66367",
    "9422d9b50d90a99062880cf648dd86a764bf97ec",
    "a9fab9b644e636c1f1b2632130d4eaea70111f16",
    "92d90c3a243134177f192d1d473dd606c79a91fc",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "9f6540535d9148abbea836d54a9e94d25319c5d5": "Ymultichange(Yparameterchange,Ybodychange)",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ybodychange",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ybodychange",
    "b51d0fef56a59b15489f5b932025718b4e9613d2": "Ybodychange",
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": "Ybodychange",
    "00e85e7a2b9446dc37265feba07473b156d66367": "Ymultichange(Yparameterchange,Ybodychange)",
    "9422d9b50d90a99062880cf648dd86a764bf97ec": "Ybodychange",
    "a9fab9b644e636c1f1b2632130d4eaea70111f16": "Ybodychange",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Ybodychange",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  private \u003cT\u003e void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n+  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeEvents(\n+      byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n       throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               byte[] columnQualifierBytes \u003d\n                   new EventColumnName(eventId, eventTimestamp, null)\n                       .getColumnQualifier();\n-              columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n-                  Separator.EMPTY_BYTES);\n+              ColumnRWHelper.store(rowKey, table, columnPrefix,\n+                  columnQualifierBytes, null, Separator.EMPTY_BYTES);\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId\u003dinfoKey\n                 byte[] columnQualifierBytes \u003d\n                     new EventColumnName(eventId, eventTimestamp, info.getKey())\n                         .getColumnQualifier();\n-                columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n-                    info.getValue());\n+                ColumnRWHelper.store(rowKey, table, columnPrefix,\n+                    columnQualifierBytes, null, info.getValue());\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeEvents(\n      byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d\n                  new EventColumnName(eventId, eventTimestamp, null)\n                      .getColumnQualifier();\n              ColumnRWHelper.store(rowKey, table, columnPrefix,\n                  columnQualifierBytes, null, Separator.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d\n                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n                        .getColumnQualifier();\n                ColumnRWHelper.store(rowKey, table, columnPrefix,\n                    columnQualifierBytes, null, info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  private \u003cT\u003e void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n+  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeEvents(\n+      byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n       throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               byte[] columnQualifierBytes \u003d\n                   new EventColumnName(eventId, eventTimestamp, null)\n                       .getColumnQualifier();\n-              columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n-                  Separator.EMPTY_BYTES);\n+              ColumnRWHelper.store(rowKey, table, columnPrefix,\n+                  columnQualifierBytes, null, Separator.EMPTY_BYTES);\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId\u003dinfoKey\n                 byte[] columnQualifierBytes \u003d\n                     new EventColumnName(eventId, eventTimestamp, info.getKey())\n                         .getColumnQualifier();\n-                columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n-                    info.getValue());\n+                ColumnRWHelper.store(rowKey, table, columnPrefix,\n+                    columnQualifierBytes, null, info.getValue());\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeEvents(\n      byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d\n                  new EventColumnName(eventId, eventTimestamp, null)\n                      .getColumnQualifier();\n              ColumnRWHelper.store(rowKey, table, columnPrefix,\n                  columnQualifierBytes, null, Separator.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d\n                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n                        .getColumnQualifier();\n                ColumnRWHelper.store(rowKey, table, columnPrefix,\n                    columnQualifierBytes, null, info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f6540535d9148abbea836d54a9e94d25319c5d5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,37 @@\n-  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n-      boolean isApplication) throws IOException {\n+  private \u003cT\u003e void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n+      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n+      throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               byte[] columnQualifierBytes \u003d\n                   new EventColumnName(eventId, eventTimestamp, null)\n                       .getColumnQualifier();\n-              if (isApplication) {\n-                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n-              } else {\n-                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n-              }\n+              columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n+                  Separator.EMPTY_BYTES);\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId\u003dinfoKey\n                 byte[] columnQualifierBytes \u003d\n                     new EventColumnName(eventId, eventTimestamp, info.getKey())\n                         .getColumnQualifier();\n-                if (isApplication) {\n-                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                      columnQualifierBytes, null, info.getValue());\n-                } else {\n-                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                      columnQualifierBytes, null, info.getValue());\n-                }\n+                columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n+                    info.getValue());\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d\n                  new EventColumnName(eventId, eventTimestamp, null)\n                      .getColumnQualifier();\n              columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n                  Separator.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d\n                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n                        .getColumnQualifier();\n                columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n                    info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[rowKey-byte[], events-Set\u003cTimelineEvent\u003e, isApplication-boolean]",
            "newValue": "[rowKey-byte[], events-Set\u003cTimelineEvent\u003e, columnPrefix-ColumnPrefix\u003cT\u003e, table-TypedBufferedMutator\u003cT\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,37 @@\n-  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n-      boolean isApplication) throws IOException {\n+  private \u003cT\u003e void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n+      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n+      throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               byte[] columnQualifierBytes \u003d\n                   new EventColumnName(eventId, eventTimestamp, null)\n                       .getColumnQualifier();\n-              if (isApplication) {\n-                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n-              } else {\n-                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n-              }\n+              columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n+                  Separator.EMPTY_BYTES);\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId\u003dinfoKey\n                 byte[] columnQualifierBytes \u003d\n                     new EventColumnName(eventId, eventTimestamp, info.getKey())\n                         .getColumnQualifier();\n-                if (isApplication) {\n-                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                      columnQualifierBytes, null, info.getValue());\n-                } else {\n-                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                      columnQualifierBytes, null, info.getValue());\n-                }\n+                columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n+                    info.getValue());\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d\n                  new EventColumnName(eventId, eventTimestamp, null)\n                      .getColumnQualifier();\n              columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n                  Separator.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d\n                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n                        .getColumnQualifier();\n                columnPrefix.store(rowKey, table, columnQualifierBytes, null,\n                    info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d\n                  new EventColumnName(eventId, eventTimestamp, null)\n                      .getColumnQualifier();\n              if (isApplication) {\n                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n              } else {\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n              }\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d\n                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n                        .getColumnQualifier();\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                      columnQualifierBytes, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                      columnQualifierBytes, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n-            EventColumnNameConverter converter \u003d\n-                EventColumnNameConverter.getInstance();\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n-              byte[] columnQualifierBytes \u003d converter.encode(\n-                  new EventColumnName(eventId, eventTimestamp, null));\n+              byte[] columnQualifierBytes \u003d\n+                  new EventColumnName(eventId, eventTimestamp, null)\n+                      .getColumnQualifier();\n               if (isApplication) {\n                 ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                     columnQualifierBytes, null, Separator.EMPTY_BYTES);\n               } else {\n                 EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                     columnQualifierBytes, null, Separator.EMPTY_BYTES);\n               }\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId\u003dinfoKey\n-                byte[] columnQualifierBytes \u003d converter.encode(\n-                    new EventColumnName(eventId, eventTimestamp,\n-                        info.getKey()));\n+                byte[] columnQualifierBytes \u003d\n+                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n+                        .getColumnQualifier();\n                 if (isApplication) {\n                   ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                       columnQualifierBytes, null, info.getValue());\n                 } else {\n                   EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                       columnQualifierBytes, null, info.getValue());\n                 }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d\n                  new EventColumnName(eventId, eventTimestamp, null)\n                      .getColumnQualifier();\n              if (isApplication) {\n                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n              } else {\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n              }\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d\n                    new EventColumnName(eventId, eventTimestamp, info.getKey())\n                        .getColumnQualifier();\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                      columnQualifierBytes, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                      columnQualifierBytes, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "831a3ffd6ef49214b08cb30329494418703be0f9",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,47 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n-            byte[] eventTs \u003d\n-                Bytes.toBytes(TimelineStorageUtils.invertLong(eventTimestamp));\n+            EventColumnNameConverter converter \u003d\n+                EventColumnNameConverter.getInstance();\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n+              byte[] columnQualifierBytes \u003d converter.encode(\n+                  new EventColumnName(eventId, eventTimestamp, null));\n               if (isApplication) {\n-                byte[] compoundColumnQualifierBytes \u003d\n-                    ApplicationColumnPrefix.EVENT.\n-                        getCompoundColQualBytes(eventId, eventTs, null);\n                 ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                    compoundColumnQualifierBytes, null,\n-                    TimelineStorageUtils.EMPTY_BYTES);\n+                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n               } else {\n-                byte[] compoundColumnQualifierBytes \u003d\n-                    EntityColumnPrefix.EVENT.\n-                        getCompoundColQualBytes(eventId, eventTs, null);\n                 EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                    compoundColumnQualifierBytes, null,\n-                    TimelineStorageUtils.EMPTY_BYTES);\n+                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n               }\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n-                // eventId?infoKey\n-                byte[] infoKey \u003d Bytes.toBytes(info.getKey());\n+                // eventId\u003dinfoKey\n+                byte[] columnQualifierBytes \u003d converter.encode(\n+                    new EventColumnName(eventId, eventTimestamp,\n+                        info.getKey()));\n                 if (isApplication) {\n-                  byte[] compoundColumnQualifierBytes \u003d\n-                      ApplicationColumnPrefix.EVENT.\n-                          getCompoundColQualBytes(eventId, eventTs, infoKey);\n                   ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                      compoundColumnQualifierBytes, null, info.getValue());\n+                      columnQualifierBytes, null, info.getValue());\n                 } else {\n-                  byte[] compoundColumnQualifierBytes \u003d\n-                      EntityColumnPrefix.EVENT.\n-                          getCompoundColQualBytes(eventId, eventTs, infoKey);\n                   EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                      compoundColumnQualifierBytes, null, info.getValue());\n+                      columnQualifierBytes, null, info.getValue());\n                 }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            EventColumnNameConverter converter \u003d\n                EventColumnNameConverter.getInstance();\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              byte[] columnQualifierBytes \u003d converter.encode(\n                  new EventColumnName(eventId, eventTimestamp, null));\n              if (isApplication) {\n                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n              } else {\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    columnQualifierBytes, null, Separator.EMPTY_BYTES);\n              }\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId\u003dinfoKey\n                byte[] columnQualifierBytes \u003d converter.encode(\n                    new EventColumnName(eventId, eventTimestamp,\n                        info.getKey()));\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                      columnQualifierBytes, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                      columnQualifierBytes, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9bdd455dced15c84430ea0a0a59410df924f02a7",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n-            byte[] columnQualifierFirst \u003d\n-                Bytes.toBytes(Separator.VALUES.encode(eventId));\n-            byte[] columnQualifierWithTsBytes \u003d Separator.VALUES.\n-                join(columnQualifierFirst, Bytes.toBytes(\n-                    TimelineStorageUtils.invertLong(eventTimestamp)));\n+            byte[] eventTs \u003d\n+                Bytes.toBytes(TimelineStorageUtils.invertLong(eventTimestamp));\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n-              // add separator since event key is empty\n-              byte[] compoundColumnQualifierBytes \u003d\n-                  Separator.VALUES.join(columnQualifierWithTsBytes,\n-                      null);\n               if (isApplication) {\n+                byte[] compoundColumnQualifierBytes \u003d\n+                    ApplicationColumnPrefix.EVENT.\n+                        getCompoundColQualBytes(eventId, eventTs, null);\n                 ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                     compoundColumnQualifierBytes, null,\n-                      TimelineStorageUtils.EMPTY_BYTES);\n+                    TimelineStorageUtils.EMPTY_BYTES);\n               } else {\n+                byte[] compoundColumnQualifierBytes \u003d\n+                    EntityColumnPrefix.EVENT.\n+                        getCompoundColQualBytes(eventId, eventTs, null);\n                 EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                     compoundColumnQualifierBytes, null,\n-                      TimelineStorageUtils.EMPTY_BYTES);\n+                    TimelineStorageUtils.EMPTY_BYTES);\n               }\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n-                byte[] compoundColumnQualifierBytes \u003d\n-                    Separator.VALUES.join(columnQualifierWithTsBytes,\n-                        Bytes.toBytes(info.getKey()));\n+                byte[] infoKey \u003d Bytes.toBytes(info.getKey());\n                 if (isApplication) {\n+                  byte[] compoundColumnQualifierBytes \u003d\n+                      ApplicationColumnPrefix.EVENT.\n+                          getCompoundColQualBytes(eventId, eventTs, infoKey);\n                   ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                       compoundColumnQualifierBytes, null, info.getValue());\n                 } else {\n+                  byte[] compoundColumnQualifierBytes \u003d\n+                      EntityColumnPrefix.EVENT.\n+                          getCompoundColQualBytes(eventId, eventTs, infoKey);\n                   EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                       compoundColumnQualifierBytes, null, info.getValue());\n                 }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            byte[] eventTs \u003d\n                Bytes.toBytes(TimelineStorageUtils.invertLong(eventTimestamp));\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              if (isApplication) {\n                byte[] compoundColumnQualifierBytes \u003d\n                    ApplicationColumnPrefix.EVENT.\n                        getCompoundColQualBytes(eventId, eventTs, null);\n                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifierBytes, null,\n                    TimelineStorageUtils.EMPTY_BYTES);\n              } else {\n                byte[] compoundColumnQualifierBytes \u003d\n                    EntityColumnPrefix.EVENT.\n                        getCompoundColQualBytes(eventId, eventTs, null);\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifierBytes, null,\n                    TimelineStorageUtils.EMPTY_BYTES);\n              }\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] infoKey \u003d Bytes.toBytes(info.getKey());\n                if (isApplication) {\n                  byte[] compoundColumnQualifierBytes \u003d\n                      ApplicationColumnPrefix.EVENT.\n                          getCompoundColQualBytes(eventId, eventTs, infoKey);\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                      compoundColumnQualifierBytes, null, info.getValue());\n                } else {\n                  byte[] compoundColumnQualifierBytes \u003d\n                      EntityColumnPrefix.EVENT.\n                          getCompoundColQualBytes(eventId, eventTs, infoKey);\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                      compoundColumnQualifierBytes, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "b51d0fef56a59b15489f5b932025718b4e9613d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4178. [storage implementation] app id as string in row keys can cause incorrect ordering (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b51d0fef56a59b15489f5b932025718b4e9613d2",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a68e3839218523403f42acd7bdd7ce1da59a5e60",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             byte[] columnQualifierFirst \u003d\n                 Bytes.toBytes(Separator.VALUES.encode(eventId));\n-            byte[] columnQualifierWithTsBytes \u003d\n-                Separator.VALUES.join(columnQualifierFirst,\n-                    Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n+            byte[] columnQualifierWithTsBytes \u003d Separator.VALUES.\n+                join(columnQualifierFirst, Bytes.toBytes(\n+                    TimelineStorageUtils.invertLong(eventTimestamp)));\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               // add separator since event key is empty\n               byte[] compoundColumnQualifierBytes \u003d\n                   Separator.VALUES.join(columnQualifierWithTsBytes,\n                       null);\n               if (isApplication) {\n                 ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                     compoundColumnQualifierBytes, null,\n-                      TimelineWriterUtils.EMPTY_BYTES);\n+                      TimelineStorageUtils.EMPTY_BYTES);\n               } else {\n                 EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                     compoundColumnQualifierBytes, null,\n-                    TimelineWriterUtils.EMPTY_BYTES);\n+                      TimelineStorageUtils.EMPTY_BYTES);\n               }\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n                 byte[] compoundColumnQualifierBytes \u003d\n                     Separator.VALUES.join(columnQualifierWithTsBytes,\n                         Bytes.toBytes(info.getKey()));\n                 if (isApplication) {\n                   ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                     compoundColumnQualifierBytes, null, info.getValue());\n                 } else {\n                   EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                     compoundColumnQualifierBytes, null, info.getValue());\n                 }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            byte[] columnQualifierFirst \u003d\n                Bytes.toBytes(Separator.VALUES.encode(eventId));\n            byte[] columnQualifierWithTsBytes \u003d Separator.VALUES.\n                join(columnQualifierFirst, Bytes.toBytes(\n                    TimelineStorageUtils.invertLong(eventTimestamp)));\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              // add separator since event key is empty\n              byte[] compoundColumnQualifierBytes \u003d\n                  Separator.VALUES.join(columnQualifierWithTsBytes,\n                      null);\n              if (isApplication) {\n                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifierBytes, null,\n                      TimelineStorageUtils.EMPTY_BYTES);\n              } else {\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifierBytes, null,\n                      TimelineStorageUtils.EMPTY_BYTES);\n              }\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierWithTsBytes,\n                        Bytes.toBytes(info.getKey()));\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifierBytes, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifierBytes, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "7a41b5501ea76f94f15f53f6380b3c63f14b5a78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4025. Deal with byte representations of Longs in writer code. Contributed by Sangjin Lee and Vrushali C.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "7a41b5501ea76f94f15f53f6380b3c63f14b5a78",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,54 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n       boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             byte[] columnQualifierFirst \u003d\n                 Bytes.toBytes(Separator.VALUES.encode(eventId));\n             byte[] columnQualifierWithTsBytes \u003d\n                 Separator.VALUES.join(columnQualifierFirst,\n                     Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               // add separator since event key is empty\n               byte[] compoundColumnQualifierBytes \u003d\n                   Separator.VALUES.join(columnQualifierWithTsBytes,\n                       null);\n-              String compoundColumnQualifier \u003d\n-                  Bytes.toString(compoundColumnQualifierBytes);\n-              EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                  compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n+              if (isApplication) {\n+                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n+                    compoundColumnQualifierBytes, null,\n+                      TimelineWriterUtils.EMPTY_BYTES);\n+              } else {\n+                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                    compoundColumnQualifierBytes, null,\n+                    TimelineWriterUtils.EMPTY_BYTES);\n+              }\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n                 byte[] compoundColumnQualifierBytes \u003d\n                     Separator.VALUES.join(columnQualifierWithTsBytes,\n                         Bytes.toBytes(info.getKey()));\n-                // convert back to string to avoid additional API on store.\n-                String compoundColumnQualifier \u003d\n-                    Bytes.toString(compoundColumnQualifierBytes);\n                 if (isApplication) {\n                   ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n-                    compoundColumnQualifier, null, info.getValue());\n+                    compoundColumnQualifierBytes, null, info.getValue());\n                 } else {\n                   EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                    compoundColumnQualifier, null, info.getValue());\n+                    compoundColumnQualifierBytes, null, info.getValue());\n                 }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            byte[] columnQualifierFirst \u003d\n                Bytes.toBytes(Separator.VALUES.encode(eventId));\n            byte[] columnQualifierWithTsBytes \u003d\n                Separator.VALUES.join(columnQualifierFirst,\n                    Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              // add separator since event key is empty\n              byte[] compoundColumnQualifierBytes \u003d\n                  Separator.VALUES.join(columnQualifierWithTsBytes,\n                      null);\n              if (isApplication) {\n                ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifierBytes, null,\n                      TimelineWriterUtils.EMPTY_BYTES);\n              } else {\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifierBytes, null,\n                    TimelineWriterUtils.EMPTY_BYTES);\n              }\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierWithTsBytes,\n                        Bytes.toBytes(info.getKey()));\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifierBytes, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifierBytes, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "00e85e7a2b9446dc37265feba07473b156d66367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,52 @@\n-  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n-      throws IOException {\n+  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n+      boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             byte[] columnQualifierFirst \u003d\n                 Bytes.toBytes(Separator.VALUES.encode(eventId));\n             byte[] columnQualifierWithTsBytes \u003d\n                 Separator.VALUES.join(columnQualifierFirst,\n                     Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               // add separator since event key is empty\n               byte[] compoundColumnQualifierBytes \u003d\n                   Separator.VALUES.join(columnQualifierWithTsBytes,\n                       null);\n               String compoundColumnQualifier \u003d\n                   Bytes.toString(compoundColumnQualifierBytes);\n               EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                   compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n                 byte[] compoundColumnQualifierBytes \u003d\n                     Separator.VALUES.join(columnQualifierWithTsBytes,\n                         Bytes.toBytes(info.getKey()));\n                 // convert back to string to avoid additional API on store.\n                 String compoundColumnQualifier \u003d\n                     Bytes.toString(compoundColumnQualifierBytes);\n-                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                if (isApplication) {\n+                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                     compoundColumnQualifier, null, info.getValue());\n+                } else {\n+                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                    compoundColumnQualifier, null, info.getValue());\n+                }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            byte[] columnQualifierFirst \u003d\n                Bytes.toBytes(Separator.VALUES.encode(eventId));\n            byte[] columnQualifierWithTsBytes \u003d\n                Separator.VALUES.join(columnQualifierFirst,\n                    Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              // add separator since event key is empty\n              byte[] compoundColumnQualifierBytes \u003d\n                  Separator.VALUES.join(columnQualifierWithTsBytes,\n                      null);\n              String compoundColumnQualifier \u003d\n                  Bytes.toString(compoundColumnQualifierBytes);\n              EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                  compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierWithTsBytes,\n                        Bytes.toBytes(info.getKey()));\n                // convert back to string to avoid additional API on store.\n                String compoundColumnQualifier \u003d\n                    Bytes.toString(compoundColumnQualifierBytes);\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifier, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifier, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[rowKey-byte[], events-Set\u003cTimelineEvent\u003e]",
            "newValue": "[rowKey-byte[], events-Set\u003cTimelineEvent\u003e, isApplication-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,52 @@\n-  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n-      throws IOException {\n+  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n+      boolean isApplication) throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n             byte[] columnQualifierFirst \u003d\n                 Bytes.toBytes(Separator.VALUES.encode(eventId));\n             byte[] columnQualifierWithTsBytes \u003d\n                 Separator.VALUES.join(columnQualifierFirst,\n                     Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n               // add separator since event key is empty\n               byte[] compoundColumnQualifierBytes \u003d\n                   Separator.VALUES.join(columnQualifierWithTsBytes,\n                       null);\n               String compoundColumnQualifier \u003d\n                   Bytes.toString(compoundColumnQualifierBytes);\n               EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                   compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n             } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n                 byte[] compoundColumnQualifierBytes \u003d\n                     Separator.VALUES.join(columnQualifierWithTsBytes,\n                         Bytes.toBytes(info.getKey()));\n                 // convert back to string to avoid additional API on store.\n                 String compoundColumnQualifier \u003d\n                     Bytes.toString(compoundColumnQualifierBytes);\n-                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                if (isApplication) {\n+                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                     compoundColumnQualifier, null, info.getValue());\n+                } else {\n+                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                    compoundColumnQualifier, null, info.getValue());\n+                }\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events,\n      boolean isApplication) throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            byte[] columnQualifierFirst \u003d\n                Bytes.toBytes(Separator.VALUES.encode(eventId));\n            byte[] columnQualifierWithTsBytes \u003d\n                Separator.VALUES.join(columnQualifierFirst,\n                    Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              // add separator since event key is empty\n              byte[] compoundColumnQualifierBytes \u003d\n                  Separator.VALUES.join(columnQualifierWithTsBytes,\n                      null);\n              String compoundColumnQualifier \u003d\n                  Bytes.toString(compoundColumnQualifierBytes);\n              EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                  compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierWithTsBytes,\n                        Bytes.toBytes(info.getKey()));\n                // convert back to string to avoid additional API on store.\n                String compoundColumnQualifier \u003d\n                    Bytes.toString(compoundColumnQualifierBytes);\n                if (isApplication) {\n                  ApplicationColumnPrefix.EVENT.store(rowKey, applicationTable,\n                    compoundColumnQualifier, null, info.getValue());\n                } else {\n                  EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifier, null, info.getValue());\n                }\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "9422d9b50d90a99062880cf648dd86a764bf97ec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3984. Adjusted the event column key schema and avoided missing empty event. Contributed by Vrushali C.\n\n(cherry picked from commit 895ccfa1ab9e701f2908586e323249f670fe5544)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9422d9b50d90a99062880cf648dd86a764bf97ec",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,47 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n       throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n             long eventTimestamp \u003d event.getTimestamp();\n             // if the timestamp is not set, use the current timestamp\n             if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n               LOG.warn(\"timestamp is not set for event \" + eventId +\n                   \"! Using the current timestamp\");\n               eventTimestamp \u003d System.currentTimeMillis();\n             }\n+            byte[] columnQualifierFirst \u003d\n+                Bytes.toBytes(Separator.VALUES.encode(eventId));\n+            byte[] columnQualifierWithTsBytes \u003d\n+                Separator.VALUES.join(columnQualifierFirst,\n+                    Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n-            if (eventInfo !\u003d null) {\n+            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n+              // add separator since event key is empty\n+              byte[] compoundColumnQualifierBytes \u003d\n+                  Separator.VALUES.join(columnQualifierWithTsBytes,\n+                      null);\n+              String compoundColumnQualifier \u003d\n+                  Bytes.toString(compoundColumnQualifierBytes);\n+              EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                  compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n+            } else {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n-                byte[] columnQualifierFirst \u003d\n-                    Bytes.toBytes(Separator.VALUES.encode(eventId));\n                 byte[] compoundColumnQualifierBytes \u003d\n-                    Separator.VALUES.join(columnQualifierFirst,\n+                    Separator.VALUES.join(columnQualifierWithTsBytes,\n                         Bytes.toBytes(info.getKey()));\n                 // convert back to string to avoid additional API on store.\n                 String compoundColumnQualifier \u003d\n                     Bytes.toString(compoundColumnQualifierBytes);\n                 EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n-                    compoundColumnQualifier, eventTimestamp, info.getValue());\n+                    compoundColumnQualifier, null, info.getValue());\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            byte[] columnQualifierFirst \u003d\n                Bytes.toBytes(Separator.VALUES.encode(eventId));\n            byte[] columnQualifierWithTsBytes \u003d\n                Separator.VALUES.join(columnQualifierFirst,\n                    Bytes.toBytes(TimelineWriterUtils.invert(eventTimestamp)));\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if ((eventInfo \u003d\u003d null) || (eventInfo.size() \u003d\u003d 0)) {\n              // add separator since event key is empty\n              byte[] compoundColumnQualifierBytes \u003d\n                  Separator.VALUES.join(columnQualifierWithTsBytes,\n                      null);\n              String compoundColumnQualifier \u003d\n                  Bytes.toString(compoundColumnQualifierBytes);\n              EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                  compoundColumnQualifier, null, TimelineWriterUtils.EMPTY_BYTES);\n            } else {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierWithTsBytes,\n                        Bytes.toBytes(info.getKey()));\n                // convert back to string to avoid additional API on store.\n                String compoundColumnQualifier \u003d\n                    Bytes.toString(compoundColumnQualifierBytes);\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifier, null, info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "a9fab9b644e636c1f1b2632130d4eaea70111f16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3908. Fixed bugs in HBaseTimelineWriterImpl. Contributed by Vrushali C and Sangjin Lee.\n\n(cherry picked from commit df0ec473a84871b0effd7ca6faac776210d7df09)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a9fab9b644e636c1f1b2632130d4eaea70111f16",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8603736ef2bb34605ea10f516dbe4e73bed3f309",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n       throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n           String eventId \u003d event.getId();\n           if (eventId !\u003d null) {\n+            long eventTimestamp \u003d event.getTimestamp();\n+            // if the timestamp is not set, use the current timestamp\n+            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n+              LOG.warn(\"timestamp is not set for event \" + eventId +\n+                  \"! Using the current timestamp\");\n+              eventTimestamp \u003d System.currentTimeMillis();\n+            }\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if (eventInfo !\u003d null) {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                 // eventId?infoKey\n                 byte[] columnQualifierFirst \u003d\n                     Bytes.toBytes(Separator.VALUES.encode(eventId));\n                 byte[] compoundColumnQualifierBytes \u003d\n                     Separator.VALUES.join(columnQualifierFirst,\n                         Bytes.toBytes(info.getKey()));\n                 // convert back to string to avoid additional API on store.\n                 String compoundColumnQualifier \u003d\n                     Bytes.toString(compoundColumnQualifierBytes);\n-                EntityColumnPrefix.METRIC.store(rowKey, entityTable,\n-                    compoundColumnQualifier, null, info.getValue());\n+                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n+                    compoundColumnQualifier, eventTimestamp, info.getValue());\n               } // for info: eventInfo\n             }\n           }\n         }\n       } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            long eventTimestamp \u003d event.getTimestamp();\n            // if the timestamp is not set, use the current timestamp\n            if (eventTimestamp \u003d\u003d TimelineEvent.INVALID_TIMESTAMP) {\n              LOG.warn(\"timestamp is not set for event \" + eventId +\n                  \"! Using the current timestamp\");\n              eventTimestamp \u003d System.currentTimeMillis();\n            }\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if (eventInfo !\u003d null) {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] columnQualifierFirst \u003d\n                    Bytes.toBytes(Separator.VALUES.encode(eventId));\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierFirst,\n                        Bytes.toBytes(info.getKey()));\n                // convert back to string to avoid additional API on store.\n                String compoundColumnQualifier \u003d\n                    Bytes.toString(compoundColumnQualifierBytes);\n                EntityColumnPrefix.EVENT.store(rowKey, entityTable,\n                    compoundColumnQualifier, eventTimestamp, info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,28 @@\n   private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n       throws IOException {\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event !\u003d null) {\n-          String id \u003d event.getId();\n-          if (id !\u003d null) {\n-            byte[] idBytes \u003d Bytes.toBytes(id);\n+          String eventId \u003d event.getId();\n+          if (eventId !\u003d null) {\n             Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n             if (eventInfo !\u003d null) {\n               for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n-                EntityColumnDetails.PREFIX_EVENTS.store(rowKey,\n-                    entityTable, idBytes, info.getKey(), info.getValue());\n-              }\n+                // eventId?infoKey\n+                byte[] columnQualifierFirst \u003d\n+                    Bytes.toBytes(Separator.VALUES.encode(eventId));\n+                byte[] compoundColumnQualifierBytes \u003d\n+                    Separator.VALUES.join(columnQualifierFirst,\n+                        Bytes.toBytes(info.getKey()));\n+                // convert back to string to avoid additional API on store.\n+                String compoundColumnQualifier \u003d\n+                    Bytes.toString(compoundColumnQualifierBytes);\n+                EntityColumnPrefix.METRIC.store(rowKey, entityTable,\n+                    compoundColumnQualifier, null, info.getValue());\n+              } // for info: eventInfo\n             }\n           }\n         }\n-      }\n+      } // event : events\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String eventId \u003d event.getId();\n          if (eventId !\u003d null) {\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if (eventInfo !\u003d null) {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                // eventId?infoKey\n                byte[] columnQualifierFirst \u003d\n                    Bytes.toBytes(Separator.VALUES.encode(eventId));\n                byte[] compoundColumnQualifierBytes \u003d\n                    Separator.VALUES.join(columnQualifierFirst,\n                        Bytes.toBytes(info.getKey()));\n                // convert back to string to avoid additional API on store.\n                String compoundColumnQualifier \u003d\n                    Bytes.toString(compoundColumnQualifierBytes);\n                EntityColumnPrefix.METRIC.store(rowKey, entityTable,\n                    compoundColumnQualifier, null, info.getValue());\n              } // for info: eventInfo\n            }\n          }\n        }\n      } // event : events\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3411. [Storage implementation] explore the native HBase write schema for storage (Vrushali C via sjlee)\n\n(cherry picked from commit 7a3068854d27eadae1c57545988f5b2029bf119a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,20 @@\n+  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n+      throws IOException {\n+    if (events !\u003d null) {\n+      for (TimelineEvent event : events) {\n+        if (event !\u003d null) {\n+          String id \u003d event.getId();\n+          if (id !\u003d null) {\n+            byte[] idBytes \u003d Bytes.toBytes(id);\n+            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n+            if (eventInfo !\u003d null) {\n+              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n+                EntityColumnDetails.PREFIX_EVENTS.store(rowKey,\n+                    entityTable, idBytes, info.getKey(), info.getValue());\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeEvents(byte[] rowKey, Set\u003cTimelineEvent\u003e events)\n      throws IOException {\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event !\u003d null) {\n          String id \u003d event.getId();\n          if (id !\u003d null) {\n            byte[] idBytes \u003d Bytes.toBytes(id);\n            Map\u003cString, Object\u003e eventInfo \u003d event.getInfo();\n            if (eventInfo !\u003d null) {\n              for (Map.Entry\u003cString, Object\u003e info : eventInfo.entrySet()) {\n                EntityColumnDetails.PREFIX_EVENTS.store(rowKey,\n                    entityTable, idBytes, info.getKey(), info.getValue());\n              }\n            }\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
    }
  }
}