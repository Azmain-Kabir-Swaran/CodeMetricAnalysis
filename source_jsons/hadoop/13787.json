{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "commitOrCompleteLastBlock",
  "functionId": "commitOrCompleteLastBlock___bc-BlockCollection__commitBlock-Block__iip-INodesInPath",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1113,
  "functionEndLine": 1156,
  "numCommitsSeen": 1025,
  "timeTaken": 24620,
  "changeHistory": [
    "1290e3c647092f0bfbb250731a6805aba1be8e4b",
    "08ff1586d5d3e39f546200f9e696f62ea4cf000d",
    "385d2cb777a0272ac20c62336c944fad295d5d12",
    "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
    "972782d9568e0849484c027f27c1638ba50ec56e",
    "19adb2bc641999b83e25ff0e107ba8c6edbad399",
    "bd909ed9f2d853f614f04a50e2230a7932732776",
    "2a987243423eb5c7e191de2ba969b7591a441c70",
    "caa04de149030691b7bc952b534c6128db217ed2",
    "e535e0f05b5fbd087c93238deb888cc985254b4c",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "abf833a7b228fff2bca4f69cd9df99d532380038",
    "1e1e93040748231dc913190aec1e031c379d8271",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd",
    "f0f9a3631fe4950f5cf548f192226836925d0f05",
    "71071b904d0c9aec7b3713d41740f24182e81c36",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "1290e3c647092f0bfbb250731a6805aba1be8e4b": "Ybodychange",
    "08ff1586d5d3e39f546200f9e696f62ea4cf000d": "Ybodychange",
    "385d2cb777a0272ac20c62336c944fad295d5d12": "Ybodychange",
    "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6": "Ymultichange(Yparameterchange,Ybodychange)",
    "972782d9568e0849484c027f27c1638ba50ec56e": "Ybodychange",
    "19adb2bc641999b83e25ff0e107ba8c6edbad399": "Ybodychange",
    "bd909ed9f2d853f614f04a50e2230a7932732776": "Ybodychange",
    "2a987243423eb5c7e191de2ba969b7591a441c70": "Ybodychange",
    "caa04de149030691b7bc952b534c6128db217ed2": "Ybodychange",
    "e535e0f05b5fbd087c93238deb888cc985254b4c": "Ybodychange",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": "Ybodychange",
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": "Ybodychange",
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": "Ybodychange",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Ybodychange",
    "abf833a7b228fff2bca4f69cd9df99d532380038": "Ybodychange",
    "1e1e93040748231dc913190aec1e031c379d8271": "Ybodychange",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ybodychange",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ybodychange",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Yparameterchange",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0f9a3631fe4950f5cf548f192226836925d0f05": "Yparameterchange",
    "71071b904d0c9aec7b3713d41740f24182e81c36": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": "Ymultichange(Yreturntypechange,Ybodychange)",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Ymultichange(Yfilerename,Ymodifierchange)",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Ymultichange(Yfilerename,Ymodifierchange)",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Ymultichange(Yfilerename,Ymodifierchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1290e3c647092f0bfbb250731a6805aba1be8e4b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10240. Race between close/recoverLease leads to missing block. Contributed by Jinglun, zhouyingchao and Wei-Chiu Chuang.\n",
      "commitDate": "16/08/18 4:29 PM",
      "commitName": "1290e3c647092f0bfbb250731a6805aba1be8e4b",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "3ac07b720b7839a7fe6c83f4ccfe319b6a892501",
      "commitAuthorOld": "Uma Maheswara Rao Gangumalla",
      "daysBetweenCommits": 4.56,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock, INodesInPath iip) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n+    if(lastBlock.isUnderRecovery()) {\n+      throw new IOException(\"Commit or complete block \" + commitBlock +\n+          \", whereas it is under recovery.\");\n+    }\n     \n     final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n     if (committed \u0026\u0026 lastBlock.isStriped()) {\n       // update scheduled size for DatanodeStorages that do not store any\n       // internal blocks\n       lastBlock.getUnderConstructionFeature()\n           .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n     }\n \n     // Count replicas on decommissioning nodes, as these will not be\n     // decommissioned unless recovery/completing last block has finished\n     NumberReplicas numReplicas \u003d countNodes(lastBlock);\n     int numUsableReplicas \u003d numReplicas.liveReplicas() +\n         numReplicas.decommissioning() +\n         numReplicas.liveEnteringMaintenanceReplicas();\n \n     if (hasMinStorage(lastBlock, numUsableReplicas)) {\n       if (committed) {\n         addExpectedReplicasToPending(lastBlock);\n       }\n       completeBlock(lastBlock, iip, false);\n     } else if (pendingRecoveryBlocks.isUnderRecovery(lastBlock)) {\n       // We\u0027ve just finished recovery for this block, complete\n       // the block forcibly disregarding number of replicas.\n       // This is to ignore minReplication, the block will be closed\n       // and then replicated out.\n       completeBlock(lastBlock, iip, true);\n       updateNeededReconstructions(lastBlock, 1, 0);\n     }\n     return committed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock, INodesInPath iip) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    if(lastBlock.isUnderRecovery()) {\n      throw new IOException(\"Commit or complete block \" + commitBlock +\n          \", whereas it is under recovery.\");\n    }\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n\n    // Count replicas on decommissioning nodes, as these will not be\n    // decommissioned unless recovery/completing last block has finished\n    NumberReplicas numReplicas \u003d countNodes(lastBlock);\n    int numUsableReplicas \u003d numReplicas.liveReplicas() +\n        numReplicas.decommissioning() +\n        numReplicas.liveEnteringMaintenanceReplicas();\n\n    if (hasMinStorage(lastBlock, numUsableReplicas)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, iip, false);\n    } else if (pendingRecoveryBlocks.isUnderRecovery(lastBlock)) {\n      // We\u0027ve just finished recovery for this block, complete\n      // the block forcibly disregarding number of replicas.\n      // This is to ignore minReplication, the block will be closed\n      // and then replicated out.\n      completeBlock(lastBlock, iip, true);\n      updateNeededReconstructions(lastBlock, 1, 0);\n    }\n    return committed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "08ff1586d5d3e39f546200f9e696f62ea4cf000d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12886. Ignore minReplication for block recovery. Contributed by Lukas Majercak.\n",
      "commitDate": "16/03/18 10:29 AM",
      "commitName": "08ff1586d5d3e39f546200f9e696f62ea4cf000d",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "07/03/18 11:27 AM",
      "commitNameOld": "88fba00caa8c8e26f70deb9be5b534e7482620a1",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 8.92,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock, INodesInPath iip) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n     if (committed \u0026\u0026 lastBlock.isStriped()) {\n       // update scheduled size for DatanodeStorages that do not store any\n       // internal blocks\n       lastBlock.getUnderConstructionFeature()\n           .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n     }\n \n     // Count replicas on decommissioning nodes, as these will not be\n     // decommissioned unless recovery/completing last block has finished\n     NumberReplicas numReplicas \u003d countNodes(lastBlock);\n     int numUsableReplicas \u003d numReplicas.liveReplicas() +\n         numReplicas.decommissioning() +\n         numReplicas.liveEnteringMaintenanceReplicas();\n \n     if (hasMinStorage(lastBlock, numUsableReplicas)) {\n       if (committed) {\n         addExpectedReplicasToPending(lastBlock);\n       }\n       completeBlock(lastBlock, iip, false);\n+    } else if (pendingRecoveryBlocks.isUnderRecovery(lastBlock)) {\n+      // We\u0027ve just finished recovery for this block, complete\n+      // the block forcibly disregarding number of replicas.\n+      // This is to ignore minReplication, the block will be closed\n+      // and then replicated out.\n+      completeBlock(lastBlock, iip, true);\n+      updateNeededReconstructions(lastBlock, 1, 0);\n     }\n     return committed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock, INodesInPath iip) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n\n    // Count replicas on decommissioning nodes, as these will not be\n    // decommissioned unless recovery/completing last block has finished\n    NumberReplicas numReplicas \u003d countNodes(lastBlock);\n    int numUsableReplicas \u003d numReplicas.liveReplicas() +\n        numReplicas.decommissioning() +\n        numReplicas.liveEnteringMaintenanceReplicas();\n\n    if (hasMinStorage(lastBlock, numUsableReplicas)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, iip, false);\n    } else if (pendingRecoveryBlocks.isUnderRecovery(lastBlock)) {\n      // We\u0027ve just finished recovery for this block, complete\n      // the block forcibly disregarding number of replicas.\n      // This is to ignore minReplication, the block will be closed\n      // and then replicated out.\n      completeBlock(lastBlock, iip, true);\n      updateNeededReconstructions(lastBlock, 1, 0);\n    }\n    return committed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "385d2cb777a0272ac20c62336c944fad295d5d12": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11499. Decommissioning stuck because of failing recovery. Contributed by Lukas Majercak and Manoj Govindassamy.\n",
      "commitDate": "09/03/17 4:13 AM",
      "commitName": "385d2cb777a0272ac20c62336c944fad295d5d12",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "06/03/17 4:39 PM",
      "commitNameOld": "b5adc5c3011f111f86d232cb33ec522547f68a95",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.48,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,33 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock, INodesInPath iip) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n     if (committed \u0026\u0026 lastBlock.isStriped()) {\n       // update scheduled size for DatanodeStorages that do not store any\n       // internal blocks\n       lastBlock.getUnderConstructionFeature()\n           .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n     }\n-    if (hasMinStorage(lastBlock)) {\n+\n+    // Count replicas on decommissioning nodes, as these will not be\n+    // decommissioned unless recovery/completing last block has finished\n+    NumberReplicas numReplicas \u003d countNodes(lastBlock);\n+    int numUsableReplicas \u003d numReplicas.liveReplicas() +\n+        numReplicas.decommissioning() +\n+        numReplicas.liveEnteringMaintenanceReplicas();\n+\n+    if (hasMinStorage(lastBlock, numUsableReplicas)) {\n       if (committed) {\n         addExpectedReplicasToPending(lastBlock);\n       }\n       completeBlock(lastBlock, iip, false);\n     }\n     return committed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock, INodesInPath iip) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n\n    // Count replicas on decommissioning nodes, as these will not be\n    // decommissioned unless recovery/completing last block has finished\n    NumberReplicas numReplicas \u003d countNodes(lastBlock);\n    int numUsableReplicas \u003d numReplicas.liveReplicas() +\n        numReplicas.decommissioning() +\n        numReplicas.liveEnteringMaintenanceReplicas();\n\n    if (hasMinStorage(lastBlock, numUsableReplicas)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, iip, false);\n    }\n    return committed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10843. Update space quota when a UC block is completed rather than committed. Contributed by Erik Krogen.",
      "commitDate": "23/09/16 10:37 AM",
      "commitName": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
      "commitAuthor": "Konstantin V Shvachko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10843. Update space quota when a UC block is completed rather than committed. Contributed by Erik Krogen.",
          "commitDate": "23/09/16 10:37 AM",
          "commitName": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "12/09/16 4:40 PM",
          "commitNameOld": "72dfb048a9a7be64b371b74478b90150bf300d35",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 10.75,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n-      Block commitBlock) throws IOException {\n+      Block commitBlock, INodesInPath iip) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n     if (committed \u0026\u0026 lastBlock.isStriped()) {\n       // update scheduled size for DatanodeStorages that do not store any\n       // internal blocks\n       lastBlock.getUnderConstructionFeature()\n           .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n     }\n     if (hasMinStorage(lastBlock)) {\n       if (committed) {\n         addExpectedReplicasToPending(lastBlock);\n       }\n-      completeBlock(lastBlock, false);\n+      completeBlock(lastBlock, iip, false);\n     }\n     return committed;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock, INodesInPath iip) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n    if (hasMinStorage(lastBlock)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, iip, false);\n    }\n    return committed;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[bc-BlockCollection, commitBlock-Block]",
            "newValue": "[bc-BlockCollection, commitBlock-Block, iip-INodesInPath]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10843. Update space quota when a UC block is completed rather than committed. Contributed by Erik Krogen.",
          "commitDate": "23/09/16 10:37 AM",
          "commitName": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "12/09/16 4:40 PM",
          "commitNameOld": "72dfb048a9a7be64b371b74478b90150bf300d35",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 10.75,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n-      Block commitBlock) throws IOException {\n+      Block commitBlock, INodesInPath iip) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n     if (committed \u0026\u0026 lastBlock.isStriped()) {\n       // update scheduled size for DatanodeStorages that do not store any\n       // internal blocks\n       lastBlock.getUnderConstructionFeature()\n           .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n     }\n     if (hasMinStorage(lastBlock)) {\n       if (committed) {\n         addExpectedReplicasToPending(lastBlock);\n       }\n-      completeBlock(lastBlock, false);\n+      completeBlock(lastBlock, iip, false);\n     }\n     return committed;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock, INodesInPath iip) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n    if (hasMinStorage(lastBlock)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, iip, false);\n    }\n    return committed;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "972782d9568e0849484c027f27c1638ba50ec56e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9754. Avoid unnecessary getBlockCollection calls in BlockManager. Contributed by Jing Zhao.\n",
      "commitDate": "12/02/16 11:07 AM",
      "commitName": "972782d9568e0849484c027f27c1638ba50ec56e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/02/16 9:24 PM",
      "commitNameOld": "19adb2bc641999b83e25ff0e107ba8c6edbad399",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.57,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n     if (committed \u0026\u0026 lastBlock.isStriped()) {\n       // update scheduled size for DatanodeStorages that do not store any\n       // internal blocks\n       lastBlock.getUnderConstructionFeature()\n           .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n     }\n     if (hasMinStorage(lastBlock)) {\n       if (committed) {\n-        addExpectedReplicasToPending(lastBlock, bc);\n+        addExpectedReplicasToPending(lastBlock);\n       }\n       completeBlock(lastBlock, false);\n     }\n     return committed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n    if (hasMinStorage(lastBlock)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, false);\n    }\n    return committed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "19adb2bc641999b83e25ff0e107ba8c6edbad399": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9789. Correctly update DataNode\u0027s scheduled block size when writing small EC file. Contributed by Jing Zhao.\n",
      "commitDate": "10/02/16 9:24 PM",
      "commitName": "19adb2bc641999b83e25ff0e107ba8c6edbad399",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "09/02/16 2:43 PM",
      "commitNameOld": "a0fb2eff9b71e2e2c0e53262773b34bed82585d4",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 1.28,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,25 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n-    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n+    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n+    if (committed \u0026\u0026 lastBlock.isStriped()) {\n+      // update scheduled size for DatanodeStorages that do not store any\n+      // internal blocks\n+      lastBlock.getUnderConstructionFeature()\n+          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n+    }\n     if (hasMinStorage(lastBlock)) {\n-      if (b) {\n+      if (committed) {\n         addExpectedReplicasToPending(lastBlock, bc);\n       }\n       completeBlock(lastBlock, false);\n     }\n-    return b;\n+    return committed;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean committed \u003d commitBlock(lastBlock, commitBlock);\n    if (committed \u0026\u0026 lastBlock.isStriped()) {\n      // update scheduled size for DatanodeStorages that do not store any\n      // internal blocks\n      lastBlock.getUnderConstructionFeature()\n          .updateStorageScheduledSize((BlockInfoStriped) lastBlock);\n    }\n    if (hasMinStorage(lastBlock)) {\n      if (committed) {\n        addExpectedReplicasToPending(lastBlock, bc);\n      }\n      completeBlock(lastBlock, false);\n    }\n    return committed;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "bd909ed9f2d853f614f04a50e2230a7932732776": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8999. Allow a file to be closed with COMMITTED but not yet COMPLETE blocks.\n",
      "commitDate": "25/01/16 6:32 PM",
      "commitName": "bd909ed9f2d853f614f04a50e2230a7932732776",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "21/01/16 9:11 PM",
      "commitNameOld": "ae9c61ff0a90b070a5b7b2e7160d726e92c8eacf",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 3.89,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(lastBlock, commitBlock);\n     if (hasMinStorage(lastBlock)) {\n-      if (b \u0026\u0026 !bc.isStriped()) {\n-        addExpectedReplicasToPending(lastBlock);\n+      if (b) {\n+        addExpectedReplicasToPending(lastBlock, bc);\n       }\n       completeBlock(lastBlock, false);\n     }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if (hasMinStorage(lastBlock)) {\n      if (b) {\n        addExpectedReplicasToPending(lastBlock, bc);\n      }\n      completeBlock(lastBlock, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "2a987243423eb5c7e191de2ba969b7591a441c70": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1172. Blocks in newly completed files are considered under-replicated too quickly. Contributed by Masatake Iwasaki.\n",
      "commitDate": "13/10/15 11:00 PM",
      "commitName": "2a987243423eb5c7e191de2ba969b7591a441c70",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/10/15 11:40 PM",
      "commitNameOld": "73b86a5046fe3262dde7b05be46b18575e35fd5f",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 1.97,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(lastBlock, commitBlock);\n-      if (hasMinStorage(lastBlock)) {\n+    if (hasMinStorage(lastBlock)) {\n+      if (b \u0026\u0026 !bc.isStriped()) {\n+        addExpectedReplicasToPending(lastBlock);\n+      }\n       completeBlock(lastBlock, false);\n     }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if (hasMinStorage(lastBlock)) {\n      if (b \u0026\u0026 !bc.isStriped()) {\n        addExpectedReplicasToPending(lastBlock);\n      }\n      completeBlock(lastBlock, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "caa04de149030691b7bc952b534c6128db217ed2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8980. Remove unnecessary block replacement in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "31/08/15 11:48 AM",
      "commitName": "caa04de149030691b7bc952b534c6128db217ed2",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "28/08/15 2:14 PM",
      "commitNameOld": "6d12cd8d609dec26d44cece9937c35b7d72a3cd1",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 2.9,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(lastBlock, commitBlock);\n-    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n-      completeBlock(bc, bc.numBlocks()-1, false);\n+    if (countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication) {\n+      completeBlock(lastBlock, false);\n+    }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if (countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication) {\n      completeBlock(lastBlock, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "e535e0f05b5fbd087c93238deb888cc985254b4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
      "commitDate": "17/08/15 11:28 AM",
      "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 11.05,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,15 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n-    final boolean b \u003d commitBlock(\n-        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n+    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(\n-        (BlockInfoUnderConstruction) lastBlock, commitBlock);\n+        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(\n        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "663eba0ab1c73b45f98e46ffc87ad8fd91584046": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\"\n\nThis reverts commit de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "31/07/15 4:15 PM",
      "commitNameOld": "d311a38a6b32bbb210bd8748cfb65463e9c0740e",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n-    if (commitBlock \u003d\u003d null) {\n+    if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n-    }\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n-    if (lastBlock \u003d\u003d null) {\n+    if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n-    }\n-    if (lastBlock.isComplete()) {\n+    if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n-    }\n-\n+    \n     final boolean b \u003d commitBlock(\n         (BlockInfoUnderConstruction) lastBlock, commitBlock);\n-    if(hasMinStorage(lastBlock)) {\n+    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n-    }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(\n        (BlockInfoUnderConstruction) lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8623. Refactor NameNode handling of invalid, corrupt, and under-recovery blocks. Contributed by Zhe Zhang.\n",
      "commitDate": "26/06/15 10:49 AM",
      "commitName": "de480d6c8945bd8b5b00e8657b7a72ce8dd9b6b5",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/06/15 2:42 PM",
      "commitNameOld": "afe9ea3c12e1f5a71922400eadb642960bc87ca1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,20 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n-    if(commitBlock \u003d\u003d null)\n+    if (commitBlock \u003d\u003d null) {\n       return false; // not committing, this is a block allocation retry\n+    }\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n-    if(lastBlock \u003d\u003d null)\n+    if (lastBlock \u003d\u003d null) {\n       return false; // no blocks in file yet\n-    if(lastBlock.isComplete())\n+    }\n+    if (lastBlock.isComplete()) {\n       return false; // already completed (e.g. by syncBlock)\n-    \n+    }\n+\n     final boolean b \u003d commitBlock(\n         (BlockInfoUnderConstruction) lastBlock, commitBlock);\n-    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n+    if(hasMinStorage(lastBlock)) {\n       completeBlock(bc, bc.numBlocks()-1, false);\n+    }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if (commitBlock \u003d\u003d null) {\n      return false; // not committing, this is a block allocation retry\n    }\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if (lastBlock \u003d\u003d null) {\n      return false; // no blocks in file yet\n    }\n    if (lastBlock.isComplete()) {\n      return false; // already completed (e.g. by syncBlock)\n    }\n\n    final boolean b \u003d commitBlock(\n        (BlockInfoUnderConstruction) lastBlock, commitBlock);\n    if(hasMinStorage(lastBlock)) {\n      completeBlock(bc, bc.numBlocks()-1, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
      "commitDate": "12/06/15 11:38 AM",
      "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:17 AM",
      "commitNameOld": "12b5b06c063d93e6c683c9b6fac9a96912f59e59",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(\n-        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n+        (BlockInfoUnderConstruction) lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(\n        (BlockInfoUnderConstruction) lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/05/15 11:05 AM",
      "commitNameOld": "8860e352c394372e4eb3ebdf82ea899567f34e4e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n-    BlockInfoContiguous lastBlock \u003d bc.getLastBlock();\n+    BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(\n         (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(\n        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "abf833a7b228fff2bca4f69cd9df99d532380038": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7907. Erasure Coding: track invalid, corrupt, and under-recovery striped blocks in NameNode. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:43 AM",
      "commitName": "abf833a7b228fff2bca4f69cd9df99d532380038",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:43 AM",
      "commitNameOld": "ea2e60fbcc79c65ec571224bd3f57c262a5d9114",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(lastBlock, commitBlock);\n-    if (checkMinStorage(lastBlock)) {\n+    if (hasMinStorage(lastBlock)) {\n       completeBlock(bc, bc.numBlocks() - 1, false);\n     }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if (hasMinStorage(lastBlock)) {\n      completeBlock(bc, bc.numBlocks() - 1, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "1e1e93040748231dc913190aec1e031c379d8271": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7837. Erasure Coding: allocate and persist striped blocks in NameNode. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "1e1e93040748231dc913190aec1e031c379d8271",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:07 AM",
      "commitNameOld": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock(lastBlock, commitBlock);\n-    if (countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication) {\n+    if (checkMinStorage(lastBlock)) {\n       completeBlock(bc, bc.numBlocks() - 1, false);\n     }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if (checkMinStorage(lastBlock)) {\n      completeBlock(bc, bc.numBlocks() - 1, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:07 AM",
      "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n-    BlockInfoContiguous lastBlock \u003d bc.getLastBlock();\n+    BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n-    final boolean b \u003d commitBlock(\n-        (BlockInfoContiguousUnderConstruction)lastBlock, commitBlock);\n-    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n-      completeBlock(bc, bc.numBlocks()-1, false);\n+    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n+    if (countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication) {\n+      completeBlock(bc, bc.numBlocks() - 1, false);\n+    }\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(lastBlock, commitBlock);\n    if (countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication) {\n      completeBlock(bc, bc.numBlocks() - 1, false);\n    }\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/02/15 11:31 AM",
      "commitNameOld": "9175105eeaecf0a1d60b57989b73ce45cee4689b",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.01,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n-    BlockInfo lastBlock \u003d bc.getLastBlock();\n+    BlockInfoContiguous lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n-    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n+    final boolean b \u003d commitBlock(\n+        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfoContiguous lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock(\n        (BlockInfoContiguousUnderConstruction) lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/11/13 8:18 PM",
      "commitNameOld": "e3d7ef36ef7dd31b295b1f1d86a1bfa7887ca771",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 3.89,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  public boolean commitOrCompleteLastBlock(MutableBlockCollection bc, \n+  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(BlockCollection bc,\n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[bc-MutableBlockCollection, commitBlock-Block]",
        "newValue": "[bc-BlockCollection, commitBlock-Block]"
      }
    },
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/12 2:41 PM",
      "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/05/12 2:41 PM",
          "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/05/12 2:59 AM",
          "commitNameOld": "f1ff05bf47a7dfb670bc63e4e6e58d74f6b5b4a7",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  public boolean commitOrCompleteLastBlock(MutableBlockCollection fileINode, \n+  public boolean commitOrCompleteLastBlock(MutableBlockCollection bc, \n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n-    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n+    BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n-      completeBlock(fileINode, fileINode.numBlocks()-1, false);\n+      completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean commitOrCompleteLastBlock(MutableBlockCollection bc, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[fileINode-MutableBlockCollection, commitBlock-Block]",
            "newValue": "[bc-MutableBlockCollection, commitBlock-Block]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/05/12 2:41 PM",
          "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/05/12 2:59 AM",
          "commitNameOld": "f1ff05bf47a7dfb670bc63e4e6e58d74f6b5b4a7",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  public boolean commitOrCompleteLastBlock(MutableBlockCollection fileINode, \n+  public boolean commitOrCompleteLastBlock(MutableBlockCollection bc, \n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n-    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n+    BlockInfo lastBlock \u003d bc.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n-      completeBlock(fileINode, fileINode.numBlocks()-1, false);\n+      completeBlock(bc, bc.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean commitOrCompleteLastBlock(MutableBlockCollection bc, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d bc.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f0f9a3631fe4950f5cf548f192226836925d0f05": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-3363. Define BlockCollection and MutableBlockCollection interfaces so that INodeFile and INodeFileUnderConstruction do not have to be used in block management.  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/12 5:06 PM",
      "commitName": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/05/12 4:02 PM",
      "commitNameOld": "8620a99d1eea163b7505cde0a57e849b1b2a3a6f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public boolean commitOrCompleteLastBlock(MutableBlockCollection fileINode, \n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n-      completeBlock(fileINode,fileINode.numBlocks()-1, false);\n+      completeBlock(fileINode, fileINode.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(MutableBlockCollection fileINode, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode, fileINode.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[fileINode-INodeFileUnderConstruction, commitBlock-Block]",
        "newValue": "[fileINode-MutableBlockCollection, commitBlock-Block]"
      }
    },
    "71071b904d0c9aec7b3713d41740f24182e81c36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2602. NN should log newly-allocated blocks without losing BlockInfo. Contributed by Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1215036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/12/11 8:18 PM",
      "commitName": "71071b904d0c9aec7b3713d41740f24182e81c36",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "12/12/11 5:58 PM",
      "commitNameOld": "43100e9c0e14bae32ee0ca9e76b90e79561b568c",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     if(commitBlock \u003d\u003d null)\n       return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return false; // already completed (e.g. by syncBlock)\n     \n     final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n-      completeBlock(fileINode,fileINode.numBlocks()-1);\n+      completeBlock(fileINode,fileINode.numBlocks()-1, false);\n     return b;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1, false);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n    return b;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "2892f6d817d74e90ff50073cd3721ed4ec75ba92": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 4:14 PM",
      "commitName": "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/08/11 4:14 PM",
          "commitName": "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/08/11 3:28 PM",
          "commitNameOld": "513f17d115564e49124bb744cecf36d16a144ffc",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n-    \n     if(commitBlock \u003d\u003d null)\n-      return; // not committing, this is a block allocation retry\n+      return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n-      return; // no blocks in file yet\n+      return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n-      return; // already completed (e.g. by syncBlock)\n+      return false; // already completed (e.g. by syncBlock)\n     \n-    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n-\n+    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n+    return b;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n    return b;\n  }",
          "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2266.  Add Namesystem and SafeMode interfaces to avoid directly referring to FSNamesystem in BlockManager.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160493 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/08/11 4:14 PM",
          "commitName": "2892f6d817d74e90ff50073cd3721ed4ec75ba92",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/08/11 3:28 PM",
          "commitNameOld": "513f17d115564e49124bb744cecf36d16a144ffc",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,15 @@\n-  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n-    \n     if(commitBlock \u003d\u003d null)\n-      return; // not committing, this is a block allocation retry\n+      return false; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n-      return; // no blocks in file yet\n+      return false; // no blocks in file yet\n     if(lastBlock.isComplete())\n-      return; // already completed (e.g. by syncBlock)\n+      return false; // already completed (e.g. by syncBlock)\n     \n-    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n-\n+    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n+    return b;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    if(commitBlock \u003d\u003d null)\n      return false; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return false; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return false; // already completed (e.g. by syncBlock)\n    \n    final boolean b \u003d commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n    return b;\n  }",
          "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     \n     if(commitBlock \u003d\u003d null)\n       return; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return; // already completed (e.g. by syncBlock)\n     \n     commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n \n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     \n     if(commitBlock \u003d\u003d null)\n       return; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return; // already completed (e.g. by syncBlock)\n     \n     commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n \n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     \n     if(commitBlock \u003d\u003d null)\n       return; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return; // already completed (e.g. by syncBlock)\n     \n     commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n \n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     \n     if(commitBlock \u003d\u003d null)\n       return; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return; // already completed (e.g. by syncBlock)\n     \n     commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n \n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        }
      ]
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     \n     if(commitBlock \u003d\u003d null)\n       return; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return; // already completed (e.g. by syncBlock)\n     \n     commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n \n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n       Block commitBlock) throws IOException {\n     \n     if(commitBlock \u003d\u003d null)\n       return; // not committing, this is a block allocation retry\n     BlockInfo lastBlock \u003d fileINode.getLastBlock();\n     if(lastBlock \u003d\u003d null)\n       return; // no blocks in file yet\n     if(lastBlock.isComplete())\n       return; // already completed (e.g. by syncBlock)\n     \n     commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n \n     if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n       completeBlock(fileINode,fileINode.numBlocks()-1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,16 @@\n+  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n+      Block commitBlock) throws IOException {\n+    \n+    if(commitBlock \u003d\u003d null)\n+      return; // not committing, this is a block allocation retry\n+    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n+    if(lastBlock \u003d\u003d null)\n+      return; // no blocks in file yet\n+    if(lastBlock.isComplete())\n+      return; // already completed (e.g. by syncBlock)\n+    \n+    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n+\n+    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n+      completeBlock(fileINode,fileINode.numBlocks()-1);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void commitOrCompleteLastBlock(INodeFileUnderConstruction fileINode, \n      Block commitBlock) throws IOException {\n    \n    if(commitBlock \u003d\u003d null)\n      return; // not committing, this is a block allocation retry\n    BlockInfo lastBlock \u003d fileINode.getLastBlock();\n    if(lastBlock \u003d\u003d null)\n      return; // no blocks in file yet\n    if(lastBlock.isComplete())\n      return; // already completed (e.g. by syncBlock)\n    \n    commitBlock(fileINode, (BlockInfoUnderConstruction)lastBlock, commitBlock);\n\n    if(countNodes(lastBlock).liveReplicas() \u003e\u003d minReplication)\n      completeBlock(fileINode,fileINode.numBlocks()-1);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
    }
  }
}