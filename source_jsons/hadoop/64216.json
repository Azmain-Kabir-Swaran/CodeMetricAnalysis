{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RoleTokenBinding.java",
  "functionName": "createTokenIdentifier",
  "functionId": "createTokenIdentifier___policy-Optional__RoleModel.Policy__(modifiers-final)__encryptionSecrets-EncryptionSecrets(modifiers-final)__renewer-Text(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/RoleTokenBinding.java",
  "functionStartLine": 132,
  "functionEndLine": 163,
  "numCommitsSeen": 8,
  "timeTaken": 3492,
  "changeHistory": [
    "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502"
  ],
  "changeHistoryShort": {
    "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a": "Ymultichange(Yparameterchange,Ybodychange)",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16658. S3A connector does not support including the token renewer in the token identifier.\n\nContributed by Phil Zampino.\n\nChange-Id: Iea9d5028dcf58bda4da985604f5cd3ac283619bd\n",
      "commitDate": "23/10/19 8:32 AM",
      "commitName": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
      "commitAuthor": "Phil Zampino",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16658. S3A connector does not support including the token renewer in the token identifier.\n\nContributed by Phil Zampino.\n\nChange-Id: Iea9d5028dcf58bda4da985604f5cd3ac283619bd\n",
          "commitDate": "23/10/19 8:32 AM",
          "commitName": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
          "commitAuthor": "Phil Zampino",
          "commitDateOld": "14/01/19 9:59 AM",
          "commitNameOld": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 281.9,
          "commitsBetweenForRepo": 2176,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n   public RoleTokenIdentifier createTokenIdentifier(\n       final Optional\u003cRoleModel.Policy\u003e policy,\n-      final EncryptionSecrets encryptionSecrets) throws IOException {\n+      final EncryptionSecrets encryptionSecrets,\n+      final Text renewer) throws IOException {\n     requireServiceStarted();\n     Preconditions.checkState(!roleArn.isEmpty(), E_NO_ARN);\n     String policyJson \u003d policy.isPresent() ?\n         MODEL.toJson(policy.get()) : \"\";\n     final STSClientFactory.STSClient client \u003d prepareSTSClient()\n         .orElseThrow(() -\u003e {\n           // we\u0027ve come in on a parent binding, so fail fast\n           LOG.error(\"Cannot issue delegation tokens because the credential\"\n               + \" providers listed in \" + DELEGATION_TOKEN_CREDENTIALS_PROVIDER\n               + \" are returning session tokens\");\n           return new DelegationTokenIOException(\n               E_NO_SESSION_TOKENS_FOR_ROLE_BINDING);\n         });\n     Credentials credentials \u003d client\n         .requestRole(roleArn,\n             UUID.randomUUID().toString(),\n             policyJson,\n             getDuration(),\n             TimeUnit.SECONDS);\n     return new RoleTokenIdentifier(\n         getCanonicalUri(),\n         getOwnerText(),\n+        renewer,\n         fromSTSCredentials(credentials),\n         encryptionSecrets,\n         AbstractS3ATokenIdentifier.createDefaultOriginMessage()\n             + \" Role ARN\u003d\" + roleArn);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RoleTokenIdentifier createTokenIdentifier(\n      final Optional\u003cRoleModel.Policy\u003e policy,\n      final EncryptionSecrets encryptionSecrets,\n      final Text renewer) throws IOException {\n    requireServiceStarted();\n    Preconditions.checkState(!roleArn.isEmpty(), E_NO_ARN);\n    String policyJson \u003d policy.isPresent() ?\n        MODEL.toJson(policy.get()) : \"\";\n    final STSClientFactory.STSClient client \u003d prepareSTSClient()\n        .orElseThrow(() -\u003e {\n          // we\u0027ve come in on a parent binding, so fail fast\n          LOG.error(\"Cannot issue delegation tokens because the credential\"\n              + \" providers listed in \" + DELEGATION_TOKEN_CREDENTIALS_PROVIDER\n              + \" are returning session tokens\");\n          return new DelegationTokenIOException(\n              E_NO_SESSION_TOKENS_FOR_ROLE_BINDING);\n        });\n    Credentials credentials \u003d client\n        .requestRole(roleArn,\n            UUID.randomUUID().toString(),\n            policyJson,\n            getDuration(),\n            TimeUnit.SECONDS);\n    return new RoleTokenIdentifier(\n        getCanonicalUri(),\n        getOwnerText(),\n        renewer,\n        fromSTSCredentials(credentials),\n        encryptionSecrets,\n        AbstractS3ATokenIdentifier.createDefaultOriginMessage()\n            + \" Role ARN\u003d\" + roleArn);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/RoleTokenBinding.java",
          "extendedDetails": {
            "oldValue": "[policy-Optional\u003cRoleModel.Policy\u003e(modifiers-final), encryptionSecrets-EncryptionSecrets(modifiers-final)]",
            "newValue": "[policy-Optional\u003cRoleModel.Policy\u003e(modifiers-final), encryptionSecrets-EncryptionSecrets(modifiers-final), renewer-Text(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16658. S3A connector does not support including the token renewer in the token identifier.\n\nContributed by Phil Zampino.\n\nChange-Id: Iea9d5028dcf58bda4da985604f5cd3ac283619bd\n",
          "commitDate": "23/10/19 8:32 AM",
          "commitName": "1d5d7d0989e9ee2f4527dc47ba5c80e1c38f641a",
          "commitAuthor": "Phil Zampino",
          "commitDateOld": "14/01/19 9:59 AM",
          "commitNameOld": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 281.9,
          "commitsBetweenForRepo": 2176,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n   public RoleTokenIdentifier createTokenIdentifier(\n       final Optional\u003cRoleModel.Policy\u003e policy,\n-      final EncryptionSecrets encryptionSecrets) throws IOException {\n+      final EncryptionSecrets encryptionSecrets,\n+      final Text renewer) throws IOException {\n     requireServiceStarted();\n     Preconditions.checkState(!roleArn.isEmpty(), E_NO_ARN);\n     String policyJson \u003d policy.isPresent() ?\n         MODEL.toJson(policy.get()) : \"\";\n     final STSClientFactory.STSClient client \u003d prepareSTSClient()\n         .orElseThrow(() -\u003e {\n           // we\u0027ve come in on a parent binding, so fail fast\n           LOG.error(\"Cannot issue delegation tokens because the credential\"\n               + \" providers listed in \" + DELEGATION_TOKEN_CREDENTIALS_PROVIDER\n               + \" are returning session tokens\");\n           return new DelegationTokenIOException(\n               E_NO_SESSION_TOKENS_FOR_ROLE_BINDING);\n         });\n     Credentials credentials \u003d client\n         .requestRole(roleArn,\n             UUID.randomUUID().toString(),\n             policyJson,\n             getDuration(),\n             TimeUnit.SECONDS);\n     return new RoleTokenIdentifier(\n         getCanonicalUri(),\n         getOwnerText(),\n+        renewer,\n         fromSTSCredentials(credentials),\n         encryptionSecrets,\n         AbstractS3ATokenIdentifier.createDefaultOriginMessage()\n             + \" Role ARN\u003d\" + roleArn);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RoleTokenIdentifier createTokenIdentifier(\n      final Optional\u003cRoleModel.Policy\u003e policy,\n      final EncryptionSecrets encryptionSecrets,\n      final Text renewer) throws IOException {\n    requireServiceStarted();\n    Preconditions.checkState(!roleArn.isEmpty(), E_NO_ARN);\n    String policyJson \u003d policy.isPresent() ?\n        MODEL.toJson(policy.get()) : \"\";\n    final STSClientFactory.STSClient client \u003d prepareSTSClient()\n        .orElseThrow(() -\u003e {\n          // we\u0027ve come in on a parent binding, so fail fast\n          LOG.error(\"Cannot issue delegation tokens because the credential\"\n              + \" providers listed in \" + DELEGATION_TOKEN_CREDENTIALS_PROVIDER\n              + \" are returning session tokens\");\n          return new DelegationTokenIOException(\n              E_NO_SESSION_TOKENS_FOR_ROLE_BINDING);\n        });\n    Credentials credentials \u003d client\n        .requestRole(roleArn,\n            UUID.randomUUID().toString(),\n            policyJson,\n            getDuration(),\n            TimeUnit.SECONDS);\n    return new RoleTokenIdentifier(\n        getCanonicalUri(),\n        getOwnerText(),\n        renewer,\n        fromSTSCredentials(credentials),\n        encryptionSecrets,\n        AbstractS3ATokenIdentifier.createDefaultOriginMessage()\n            + \" Role ARN\u003d\" + roleArn);\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/RoleTokenBinding.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,30 @@\n+  public RoleTokenIdentifier createTokenIdentifier(\n+      final Optional\u003cRoleModel.Policy\u003e policy,\n+      final EncryptionSecrets encryptionSecrets) throws IOException {\n+    requireServiceStarted();\n+    Preconditions.checkState(!roleArn.isEmpty(), E_NO_ARN);\n+    String policyJson \u003d policy.isPresent() ?\n+        MODEL.toJson(policy.get()) : \"\";\n+    final STSClientFactory.STSClient client \u003d prepareSTSClient()\n+        .orElseThrow(() -\u003e {\n+          // we\u0027ve come in on a parent binding, so fail fast\n+          LOG.error(\"Cannot issue delegation tokens because the credential\"\n+              + \" providers listed in \" + DELEGATION_TOKEN_CREDENTIALS_PROVIDER\n+              + \" are returning session tokens\");\n+          return new DelegationTokenIOException(\n+              E_NO_SESSION_TOKENS_FOR_ROLE_BINDING);\n+        });\n+    Credentials credentials \u003d client\n+        .requestRole(roleArn,\n+            UUID.randomUUID().toString(),\n+            policyJson,\n+            getDuration(),\n+            TimeUnit.SECONDS);\n+    return new RoleTokenIdentifier(\n+        getCanonicalUri(),\n+        getOwnerText(),\n+        fromSTSCredentials(credentials),\n+        encryptionSecrets,\n+        AbstractS3ATokenIdentifier.createDefaultOriginMessage()\n+            + \" Role ARN\u003d\" + roleArn);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RoleTokenIdentifier createTokenIdentifier(\n      final Optional\u003cRoleModel.Policy\u003e policy,\n      final EncryptionSecrets encryptionSecrets) throws IOException {\n    requireServiceStarted();\n    Preconditions.checkState(!roleArn.isEmpty(), E_NO_ARN);\n    String policyJson \u003d policy.isPresent() ?\n        MODEL.toJson(policy.get()) : \"\";\n    final STSClientFactory.STSClient client \u003d prepareSTSClient()\n        .orElseThrow(() -\u003e {\n          // we\u0027ve come in on a parent binding, so fail fast\n          LOG.error(\"Cannot issue delegation tokens because the credential\"\n              + \" providers listed in \" + DELEGATION_TOKEN_CREDENTIALS_PROVIDER\n              + \" are returning session tokens\");\n          return new DelegationTokenIOException(\n              E_NO_SESSION_TOKENS_FOR_ROLE_BINDING);\n        });\n    Credentials credentials \u003d client\n        .requestRole(roleArn,\n            UUID.randomUUID().toString(),\n            policyJson,\n            getDuration(),\n            TimeUnit.SECONDS);\n    return new RoleTokenIdentifier(\n        getCanonicalUri(),\n        getOwnerText(),\n        fromSTSCredentials(credentials),\n        encryptionSecrets,\n        AbstractS3ATokenIdentifier.createDefaultOriginMessage()\n            + \" Role ARN\u003d\" + roleArn);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/delegation/RoleTokenBinding.java"
    }
  }
}