{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "createStorageID",
  "functionId": "createStorageID___sd-StorageDirectory__regenerateStorageIds-boolean__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 147,
  "functionEndLine": 166,
  "numCommitsSeen": 184,
  "timeTaken": 5652,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "d34074e237ee10b83aeb02294f595714d43e39e4"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7": "Ybodychange",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ymultichange(Yparameterchange,Ybodychange)",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ymodifierchange",
    "d34074e237ee10b83aeb02294f595714d43e39e4": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public static boolean createStorageID(\n       StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n     final String oldStorageID \u003d sd.getStorageUuid();\n     if (sd.getStorageLocation() !\u003d null \u0026\u0026\n         sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n       // Only one provided storage id is supported.\n       // TODO support multiple provided storage ids\n       sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n           DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n       return false;\n     }\n     if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n-      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n-          \" for directory \" + sd.getRoot() +\n+      LOG.info(\"Generated new storageID {} for directory {} {}\", sd\n+              .getStorageUuid(), sd.getRoot(),\n           (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (sd.getStorageLocation() !\u003d null \u0026\u0026\n        sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      // Only one provided storage id is supported.\n      // TODO support multiple provided storage ids\n      sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n          DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n      return false;\n    }\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID {} for directory {} {}\", sd\n              .getStorageUuid(), sd.getRoot(),\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12712. [9806] Code style cleanup\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public static boolean createStorageID(\n       StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n     final String oldStorageID \u003d sd.getStorageUuid();\n     if (sd.getStorageLocation() !\u003d null \u0026\u0026\n         sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n-      // We only support one provided storage per datanode for now.\n-      // TODO support multiple provided storage ids per datanode.\n+      // Only one provided storage id is supported.\n+      // TODO support multiple provided storage ids\n       sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n           DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n       return false;\n     }\n     if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n       LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n           \" for directory \" + sd.getRoot() +\n           (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (sd.getStorageLocation() !\u003d null \u0026\u0026\n        sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      // Only one provided storage id is supported.\n      // TODO support multiple provided storage ids\n      sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n          DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n      return false;\n    }\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "15/08/17 1:48 AM",
          "commitNameOld": "2e43c28e01fe006210e71aab179527669f6412ed",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 122.71,
          "commitsBetweenForRepo": 1011,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,20 @@\n   public static boolean createStorageID(\n-      StorageDirectory sd, boolean regenerateStorageIds) {\n+      StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n     final String oldStorageID \u003d sd.getStorageUuid();\n+    if (sd.getStorageLocation() !\u003d null \u0026\u0026\n+        sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n+      // We only support one provided storage per datanode for now.\n+      // TODO support multiple provided storage ids per datanode.\n+      sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n+          DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n+      return false;\n+    }\n     if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n       LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n           \" for directory \" + sd.getRoot() +\n           (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (sd.getStorageLocation() !\u003d null \u0026\u0026\n        sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      // We only support one provided storage per datanode for now.\n      // TODO support multiple provided storage ids per datanode.\n      sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n          DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n      return false;\n    }\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory, regenerateStorageIds-boolean]",
            "newValue": "[sd-StorageDirectory, regenerateStorageIds-boolean, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
          "commitDate": "15/12/17 5:51 PM",
          "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
          "commitAuthor": "Virajith Jalaparti",
          "commitDateOld": "15/08/17 1:48 AM",
          "commitNameOld": "2e43c28e01fe006210e71aab179527669f6412ed",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 122.71,
          "commitsBetweenForRepo": 1011,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,20 @@\n   public static boolean createStorageID(\n-      StorageDirectory sd, boolean regenerateStorageIds) {\n+      StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n     final String oldStorageID \u003d sd.getStorageUuid();\n+    if (sd.getStorageLocation() !\u003d null \u0026\u0026\n+        sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n+      // We only support one provided storage per datanode for now.\n+      // TODO support multiple provided storage ids per datanode.\n+      sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n+          DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n+      return false;\n+    }\n     if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n       LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n           \" for directory \" + sd.getRoot() +\n           (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds, Configuration conf) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (sd.getStorageLocation() !\u003d null \u0026\u0026\n        sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      // We only support one provided storage per datanode for now.\n      // TODO support multiple provided storage ids per datanode.\n      sd.setStorageUuid(conf.get(DFSConfigKeys.DFS_PROVIDER_STORAGEUUID,\n          DFSConfigKeys.DFS_PROVIDER_STORAGEUUID_DEFAULT));\n      return false;\n    }\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "05/11/15 10:00 AM",
      "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 83.37,
      "commitsBetweenForRepo": 510,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n-  public synchronized boolean createStorageID(\n+  public static boolean createStorageID(\n       StorageDirectory sd, boolean regenerateStorageIds) {\n     final String oldStorageID \u003d sd.getStorageUuid();\n     if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n       LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n           \" for directory \" + sd.getRoot() +\n           (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n       return true;\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public, static]"
      }
    },
    "d34074e237ee10b83aeb02294f595714d43e39e4": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7575. Upgrade should generate a unique storage ID for each volume. (Contributed by Arpit Agarwal)\n",
      "commitDate": "22/01/15 2:08 PM",
      "commitName": "d34074e237ee10b83aeb02294f595714d43e39e4",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7575. Upgrade should generate a unique storage ID for each volume. (Contributed by Arpit Agarwal)\n",
          "commitDate": "22/01/15 2:08 PM",
          "commitName": "d34074e237ee10b83aeb02294f595714d43e39e4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/12/14 1:18 PM",
          "commitNameOld": "8fa265a290792ff42635ff9b42416c634f88bdf3",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 34.03,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,12 @@\n-  public synchronized void createStorageID(StorageDirectory sd) {\n-    if (sd.getStorageUuid() \u003d\u003d null) {\n+  public synchronized boolean createStorageID(\n+      StorageDirectory sd, boolean regenerateStorageIds) {\n+    final String oldStorageID \u003d sd.getStorageUuid();\n+    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n+      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n+          \" for directory \" + sd.getRoot() +\n+          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n+      return true;\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory]",
            "newValue": "[sd-StorageDirectory, regenerateStorageIds-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7575. Upgrade should generate a unique storage ID for each volume. (Contributed by Arpit Agarwal)\n",
          "commitDate": "22/01/15 2:08 PM",
          "commitName": "d34074e237ee10b83aeb02294f595714d43e39e4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/12/14 1:18 PM",
          "commitNameOld": "8fa265a290792ff42635ff9b42416c634f88bdf3",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 34.03,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,12 @@\n-  public synchronized void createStorageID(StorageDirectory sd) {\n-    if (sd.getStorageUuid() \u003d\u003d null) {\n+  public synchronized boolean createStorageID(\n+      StorageDirectory sd, boolean regenerateStorageIds) {\n+    final String oldStorageID \u003d sd.getStorageUuid();\n+    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n+      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n+          \" for directory \" + sd.getRoot() +\n+          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n+      return true;\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7575. Upgrade should generate a unique storage ID for each volume. (Contributed by Arpit Agarwal)\n",
          "commitDate": "22/01/15 2:08 PM",
          "commitName": "d34074e237ee10b83aeb02294f595714d43e39e4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "19/12/14 1:18 PM",
          "commitNameOld": "8fa265a290792ff42635ff9b42416c634f88bdf3",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 34.03,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,12 @@\n-  public synchronized void createStorageID(StorageDirectory sd) {\n-    if (sd.getStorageUuid() \u003d\u003d null) {\n+  public synchronized boolean createStorageID(\n+      StorageDirectory sd, boolean regenerateStorageIds) {\n+    final String oldStorageID \u003d sd.getStorageUuid();\n+    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n       sd.setStorageUuid(DatanodeStorage.generateUuid());\n+      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n+          \" for directory \" + sd.getRoot() +\n+          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n+      return true;\n     }\n+    return false;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds) {\n    final String oldStorageID \u003d sd.getStorageUuid();\n    if (oldStorageID \u003d\u003d null || regenerateStorageIds) {\n      sd.setStorageUuid(DatanodeStorage.generateUuid());\n      LOG.info(\"Generated new storageID \" + sd.getStorageUuid() +\n          \" for directory \" + sd.getRoot() +\n          (oldStorageID \u003d\u003d null ? \"\" : (\" to replace \" + oldStorageID)));\n      return true;\n    }\n    return false;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}