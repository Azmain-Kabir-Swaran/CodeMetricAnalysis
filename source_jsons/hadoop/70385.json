{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "mkdirs",
  "functionId": "mkdirs___f-Path__permission-FsPermission",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 2987,
  "functionEndLine": 2989,
  "numCommitsSeen": 66,
  "timeTaken": 2826,
  "changeHistory": [
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "0d91576ec31f63402f2db6107a04155368e2632d",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ybodychange",
    "0d91576ec31f63402f2db6107a04155368e2632d": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "19/09/14 11:33 AM",
      "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 19.12,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,3 @@\n   public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Creating directory: \" + f.toString());\n-    }\n-\n-    if (containsColon(f)) {\n-      throw new IOException(\"Cannot create directory \" + f\n-          + \" through WASB that has colons in the name\");\n-    }\n-\n-    Path absolutePath \u003d makeAbsolute(f);\n-    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n-        permission, UMaskApplyMode.NewDirectory));\n-\n-    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n-    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n-    boolean childCreated \u003d false;\n-    // Check that there is no file in the parent chain of the given path.\n-    // Stop when you get to the root\n-    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n-        .getParent()) {\n-      String currentKey \u003d pathToKey(current);\n-      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n-      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n-        throw new IOException(\"Cannot create directory \" + f + \" because \"\n-            + current + \" is an existing file.\");\n-      } else if (currentMetadata \u003d\u003d null\n-          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n-              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n-        keysToCreateAsFolder.add(currentKey);\n-        childCreated \u003d true;\n-      } else {\n-        // The directory already exists. Its last modified time need to be\n-        // updated if there is a child directory created under it.\n-        if (childCreated) {\n-          keysToUpdateAsFolder.add(currentKey);\n-        }\n-        childCreated \u003d false;\n-      }\n-    }\n-\n-    for (String currentKey : keysToCreateAsFolder) {\n-      store.storeEmptyFolder(currentKey, permissionStatus);\n-    }\n-\n-    // Take the time after finishing mkdirs as the modified time, and update all\n-    // the existing directories\u0027 modified time to it uniformly.\n-    final Calendar lastModifiedCalendar \u003d Calendar\n-        .getInstance(Utility.LOCALE_US);\n-    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n-    Date lastModified \u003d lastModifiedCalendar.getTime();\n-    for (String key : keysToUpdateAsFolder) {\n-      store.updateFolderLastModifiedTime(key, lastModified);\n-    }\n-\n-    instrumentation.directoryCreated();\n-    \n-    // otherwise throws exception\n-    return true;\n+      return mkdirs(f, permission, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n      return mkdirs(f, permission, false);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0d91576ec31f63402f2db6107a04155368e2632d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 1:52 PM",
      "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/06/14 11:36 AM",
      "commitNameOld": "61bf9f779919206296d2ce84a8a6b2d912709a59",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Creating directory: \" + f.toString());\n     }\n \n     if (containsColon(f)) {\n       throw new IOException(\"Cannot create directory \" + f\n           + \" through WASB that has colons in the name\");\n     }\n \n     Path absolutePath \u003d makeAbsolute(f);\n     PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n         permission, UMaskApplyMode.NewDirectory));\n \n     ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n     ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n     boolean childCreated \u003d false;\n     // Check that there is no file in the parent chain of the given path.\n     // Stop when you get to the root\n     for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n         .getParent()) {\n       String currentKey \u003d pathToKey(current);\n       FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n       if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n         throw new IOException(\"Cannot create directory \" + f + \" because \"\n             + current + \" is an existing file.\");\n       } else if (currentMetadata \u003d\u003d null\n           || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n               .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n         keysToCreateAsFolder.add(currentKey);\n         childCreated \u003d true;\n       } else {\n         // The directory already exists. Its last modified time need to be\n         // updated if there is a child directory created under it.\n         if (childCreated) {\n           keysToUpdateAsFolder.add(currentKey);\n         }\n         childCreated \u003d false;\n       }\n     }\n \n     for (String currentKey : keysToCreateAsFolder) {\n       store.storeEmptyFolder(currentKey, permissionStatus);\n     }\n \n     // Take the time after finishing mkdirs as the modified time, and update all\n     // the existing directories\u0027 modified time to it uniformly.\n     final Calendar lastModifiedCalendar \u003d Calendar\n         .getInstance(Utility.LOCALE_US);\n     lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n     Date lastModified \u003d lastModifiedCalendar.getTime();\n     for (String key : keysToUpdateAsFolder) {\n       store.updateFolderLastModifiedTime(key, lastModified);\n     }\n \n+    instrumentation.directoryCreated();\n+    \n     // otherwise throws exception\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating directory: \" + f.toString());\n    }\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n        permission, UMaskApplyMode.NewDirectory));\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    // Stop when you get to the root\n    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n        .getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null\n          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    // Take the time after finishing mkdirs as the modified time, and update all\n    // the existing directories\u0027 modified time to it uniformly.\n    final Calendar lastModifiedCalendar \u003d Calendar\n        .getInstance(Utility.LOCALE_US);\n    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n    Date lastModified \u003d lastModifiedCalendar.getTime();\n    for (String key : keysToUpdateAsFolder) {\n      store.updateFolderLastModifiedTime(key, lastModified);\n    }\n\n    instrumentation.directoryCreated();\n    \n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,58 @@\n+  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Creating directory: \" + f.toString());\n+    }\n+\n+    if (containsColon(f)) {\n+      throw new IOException(\"Cannot create directory \" + f\n+          + \" through WASB that has colons in the name\");\n+    }\n+\n+    Path absolutePath \u003d makeAbsolute(f);\n+    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n+        permission, UMaskApplyMode.NewDirectory));\n+\n+    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n+    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n+    boolean childCreated \u003d false;\n+    // Check that there is no file in the parent chain of the given path.\n+    // Stop when you get to the root\n+    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n+        .getParent()) {\n+      String currentKey \u003d pathToKey(current);\n+      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n+      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n+        throw new IOException(\"Cannot create directory \" + f + \" because \"\n+            + current + \" is an existing file.\");\n+      } else if (currentMetadata \u003d\u003d null\n+          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n+              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n+        keysToCreateAsFolder.add(currentKey);\n+        childCreated \u003d true;\n+      } else {\n+        // The directory already exists. Its last modified time need to be\n+        // updated if there is a child directory created under it.\n+        if (childCreated) {\n+          keysToUpdateAsFolder.add(currentKey);\n+        }\n+        childCreated \u003d false;\n+      }\n+    }\n+\n+    for (String currentKey : keysToCreateAsFolder) {\n+      store.storeEmptyFolder(currentKey, permissionStatus);\n+    }\n+\n+    // Take the time after finishing mkdirs as the modified time, and update all\n+    // the existing directories\u0027 modified time to it uniformly.\n+    final Calendar lastModifiedCalendar \u003d Calendar\n+        .getInstance(Utility.LOCALE_US);\n+    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n+    Date lastModified \u003d lastModifiedCalendar.getTime();\n+    for (String key : keysToUpdateAsFolder) {\n+      store.updateFolderLastModifiedTime(key, lastModified);\n+    }\n+\n+    // otherwise throws exception\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(Path f, FsPermission permission) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Creating directory: \" + f.toString());\n    }\n\n    if (containsColon(f)) {\n      throw new IOException(\"Cannot create directory \" + f\n          + \" through WASB that has colons in the name\");\n    }\n\n    Path absolutePath \u003d makeAbsolute(f);\n    PermissionStatus permissionStatus \u003d createPermissionStatus(applyUMask(\n        permission, UMaskApplyMode.NewDirectory));\n\n    ArrayList\u003cString\u003e keysToCreateAsFolder \u003d new ArrayList\u003cString\u003e();\n    ArrayList\u003cString\u003e keysToUpdateAsFolder \u003d new ArrayList\u003cString\u003e();\n    boolean childCreated \u003d false;\n    // Check that there is no file in the parent chain of the given path.\n    // Stop when you get to the root\n    for (Path current \u003d absolutePath, parent \u003d current.getParent(); parent !\u003d null; current \u003d parent, parent \u003d current\n        .getParent()) {\n      String currentKey \u003d pathToKey(current);\n      FileMetadata currentMetadata \u003d store.retrieveMetadata(currentKey);\n      if (currentMetadata !\u003d null \u0026\u0026 !currentMetadata.isDir()) {\n        throw new IOException(\"Cannot create directory \" + f + \" because \"\n            + current + \" is an existing file.\");\n      } else if (currentMetadata \u003d\u003d null\n          || (currentMetadata.isDir() \u0026\u0026 currentMetadata\n              .getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit)) {\n        keysToCreateAsFolder.add(currentKey);\n        childCreated \u003d true;\n      } else {\n        // The directory already exists. Its last modified time need to be\n        // updated if there is a child directory created under it.\n        if (childCreated) {\n          keysToUpdateAsFolder.add(currentKey);\n        }\n        childCreated \u003d false;\n      }\n    }\n\n    for (String currentKey : keysToCreateAsFolder) {\n      store.storeEmptyFolder(currentKey, permissionStatus);\n    }\n\n    // Take the time after finishing mkdirs as the modified time, and update all\n    // the existing directories\u0027 modified time to it uniformly.\n    final Calendar lastModifiedCalendar \u003d Calendar\n        .getInstance(Utility.LOCALE_US);\n    lastModifiedCalendar.setTimeZone(Utility.UTC_ZONE);\n    Date lastModified \u003d lastModifiedCalendar.getTime();\n    for (String key : keysToUpdateAsFolder) {\n      store.updateFolderLastModifiedTime(key, lastModified);\n    }\n\n    // otherwise throws exception\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}