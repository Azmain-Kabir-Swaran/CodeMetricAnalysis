{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataNode.java",
  "functionName": "refreshVolumes",
  "functionId": "refreshVolumes___newVolumes-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
  "functionStartLine": 768,
  "functionEndLine": 856,
  "numCommitsSeen": 358,
  "timeTaken": 3364,
  "changeHistory": [
    "037ec8cfb1406ea3a8225a1b6306c2e78440353b",
    "dfcb331ba3516264398121c9f23af3a79c0509cc"
  ],
  "changeHistoryShort": {
    "037ec8cfb1406ea3a8225a1b6306c2e78440353b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "dfcb331ba3516264398121c9f23af3a79c0509cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "037ec8cfb1406ea3a8225a1b6306c2e78440353b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-15068. DataNode could meet deadlock if invoke refreshVolumes when register. Contributed by Aiphago.\n\nSigned-off-by: Masatake Iwasaki \u003ciwasakims@apache.org\u003e\n",
      "commitDate": "03/01/20 8:55 AM",
      "commitName": "037ec8cfb1406ea3a8225a1b6306c2e78440353b",
      "commitAuthor": "Masatake Iwasaki",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-15068. DataNode could meet deadlock if invoke refreshVolumes when register. Contributed by Aiphago.\n\nSigned-off-by: Masatake Iwasaki \u003ciwasakims@apache.org\u003e\n",
          "commitDate": "03/01/20 8:55 AM",
          "commitName": "037ec8cfb1406ea3a8225a1b6306c2e78440353b",
          "commitAuthor": "Masatake Iwasaki",
          "commitDateOld": "28/12/19 9:45 PM",
          "commitNameOld": "ee51eadda01e02ac5759ca19756f6f961c8eb0cd",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 5.47,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,89 @@\n-  private synchronized void refreshVolumes(String newVolumes) throws IOException {\n-    Configuration conf \u003d getConf();\n-    conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n-    ExecutorService service \u003d null;\n-    int numOldDataDirs \u003d dataDirs.size();\n-    ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n-    StringBuilder errorMessageBuilder \u003d new StringBuilder();\n-    List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n-    for (StorageLocation sl : changedVolumes.unchangedLocations) {\n-      effectiveVolumes.add(sl.toString());\n+  private void refreshVolumes(String newVolumes) throws IOException {\n+    // Add volumes for each Namespace\n+    final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n+    for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n+      nsInfos.add(bpos.getNamespaceInfo());\n     }\n-\n-    try {\n-      if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n-          + changedVolumes.newLocations.size()\n-          - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n-        throw new IOException(\"Attempt to remove all volumes.\");\n-      }\n-      if (!changedVolumes.newLocations.isEmpty()) {\n-        LOG.info(\"Adding new volumes: {}\",\n-            Joiner.on(\",\").join(changedVolumes.newLocations));\n-\n-        // Add volumes for each Namespace\n-        final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n-        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n-          nsInfos.add(bpos.getNamespaceInfo());\n-        }\n-        service \u003d Executors\n-            .newFixedThreadPool(changedVolumes.newLocations.size());\n-        List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n-        for (final StorageLocation location : changedVolumes.newLocations) {\n-          exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n-            @Override\n-            public IOException call() {\n-              try {\n-                data.addVolume(location, nsInfos);\n-              } catch (IOException e) {\n-                return e;\n-              }\n-              return null;\n-            }\n-          }));\n-        }\n-\n-        for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n-          StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n-          Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n-          try {\n-            IOException ioe \u003d ioExceptionFuture.get();\n-            if (ioe !\u003d null) {\n-              errorMessageBuilder.append(\n-                  String.format(\"FAILED TO ADD: %s: %s%n\",\n-                  volume, ioe.getMessage()));\n-              LOG.error(\"Failed to add volume: {}\", volume, ioe);\n-            } else {\n-              effectiveVolumes.add(volume.toString());\n-              LOG.info(\"Successfully added volume: {}\", volume);\n-            }\n-          } catch (Exception e) {\n-            errorMessageBuilder.append(\n-                String.format(\"FAILED to ADD: %s: %s%n\", volume,\n-                              e.toString()));\n-            LOG.error(\"Failed to add volume: {}\", volume, e);\n-          }\n-        }\n+    synchronized(this) {\n+      Configuration conf \u003d getConf();\n+      conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n+      ExecutorService service \u003d null;\n+      int numOldDataDirs \u003d dataDirs.size();\n+      ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n+      StringBuilder errorMessageBuilder \u003d new StringBuilder();\n+      List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n+      for (StorageLocation sl : changedVolumes.unchangedLocations) {\n+        effectiveVolumes.add(sl.toString());\n       }\n \n       try {\n-        removeVolumes(changedVolumes.deactivateLocations);\n-      } catch (IOException e) {\n-        errorMessageBuilder.append(e.getMessage());\n-        LOG.error(\"Failed to remove volume\", e);\n-      }\n+        if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n+            + changedVolumes.newLocations.size()\n+            - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n+          throw new IOException(\"Attempt to remove all volumes.\");\n+        }\n+        if (!changedVolumes.newLocations.isEmpty()) {\n+          LOG.info(\"Adding new volumes: {}\",\n+              Joiner.on(\",\").join(changedVolumes.newLocations));\n \n-      if (errorMessageBuilder.length() \u003e 0) {\n-        throw new IOException(errorMessageBuilder.toString());\n+          service \u003d Executors\n+              .newFixedThreadPool(changedVolumes.newLocations.size());\n+          List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n+\n+          for (final StorageLocation location : changedVolumes.newLocations) {\n+            exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n+              @Override\n+              public IOException call() {\n+                try {\n+                  data.addVolume(location, nsInfos);\n+                } catch (IOException e) {\n+                  return e;\n+                }\n+                return null;\n+              }\n+            }));\n+          }\n+\n+          for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n+            StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n+            Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n+            try {\n+              IOException ioe \u003d ioExceptionFuture.get();\n+              if (ioe !\u003d null) {\n+                errorMessageBuilder.append(\n+                    String.format(\"FAILED TO ADD: %s: %s%n\",\n+                        volume, ioe.getMessage()));\n+                LOG.error(\"Failed to add volume: {}\", volume, ioe);\n+              } else {\n+                effectiveVolumes.add(volume.toString());\n+                LOG.info(\"Successfully added volume: {}\", volume);\n+              }\n+            } catch (Exception e) {\n+              errorMessageBuilder.append(\n+                  String.format(\"FAILED to ADD: %s: %s%n\", volume,\n+                      e.toString()));\n+              LOG.error(\"Failed to add volume: {}\", volume, e);\n+            }\n+          }\n+        }\n+\n+        try {\n+          removeVolumes(changedVolumes.deactivateLocations);\n+        } catch (IOException e) {\n+          errorMessageBuilder.append(e.getMessage());\n+          LOG.error(\"Failed to remove volume\", e);\n+        }\n+\n+        if (errorMessageBuilder.length() \u003e 0) {\n+          throw new IOException(errorMessageBuilder.toString());\n+        }\n+      } finally {\n+        if (service !\u003d null) {\n+          service.shutdown();\n+        }\n+        conf.set(DFS_DATANODE_DATA_DIR_KEY,\n+            Joiner.on(\",\").join(effectiveVolumes));\n+        dataDirs \u003d getStorageLocations(conf);\n       }\n-    } finally {\n-      if (service !\u003d null) {\n-        service.shutdown();\n-      }\n-      conf.set(DFS_DATANODE_DATA_DIR_KEY,\n-          Joiner.on(\",\").join(effectiveVolumes));\n-      dataDirs \u003d getStorageLocations(conf);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void refreshVolumes(String newVolumes) throws IOException {\n    // Add volumes for each Namespace\n    final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n    for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n      nsInfos.add(bpos.getNamespaceInfo());\n    }\n    synchronized(this) {\n      Configuration conf \u003d getConf();\n      conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n      ExecutorService service \u003d null;\n      int numOldDataDirs \u003d dataDirs.size();\n      ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n      StringBuilder errorMessageBuilder \u003d new StringBuilder();\n      List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n      for (StorageLocation sl : changedVolumes.unchangedLocations) {\n        effectiveVolumes.add(sl.toString());\n      }\n\n      try {\n        if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n            + changedVolumes.newLocations.size()\n            - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n          throw new IOException(\"Attempt to remove all volumes.\");\n        }\n        if (!changedVolumes.newLocations.isEmpty()) {\n          LOG.info(\"Adding new volumes: {}\",\n              Joiner.on(\",\").join(changedVolumes.newLocations));\n\n          service \u003d Executors\n              .newFixedThreadPool(changedVolumes.newLocations.size());\n          List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n\n          for (final StorageLocation location : changedVolumes.newLocations) {\n            exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n              @Override\n              public IOException call() {\n                try {\n                  data.addVolume(location, nsInfos);\n                } catch (IOException e) {\n                  return e;\n                }\n                return null;\n              }\n            }));\n          }\n\n          for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n            StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n            Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n            try {\n              IOException ioe \u003d ioExceptionFuture.get();\n              if (ioe !\u003d null) {\n                errorMessageBuilder.append(\n                    String.format(\"FAILED TO ADD: %s: %s%n\",\n                        volume, ioe.getMessage()));\n                LOG.error(\"Failed to add volume: {}\", volume, ioe);\n              } else {\n                effectiveVolumes.add(volume.toString());\n                LOG.info(\"Successfully added volume: {}\", volume);\n              }\n            } catch (Exception e) {\n              errorMessageBuilder.append(\n                  String.format(\"FAILED to ADD: %s: %s%n\", volume,\n                      e.toString()));\n              LOG.error(\"Failed to add volume: {}\", volume, e);\n            }\n          }\n        }\n\n        try {\n          removeVolumes(changedVolumes.deactivateLocations);\n        } catch (IOException e) {\n          errorMessageBuilder.append(e.getMessage());\n          LOG.error(\"Failed to remove volume\", e);\n        }\n\n        if (errorMessageBuilder.length() \u003e 0) {\n          throw new IOException(errorMessageBuilder.toString());\n        }\n      } finally {\n        if (service !\u003d null) {\n          service.shutdown();\n        }\n        conf.set(DFS_DATANODE_DATA_DIR_KEY,\n            Joiner.on(\",\").join(effectiveVolumes));\n        dataDirs \u003d getStorageLocations(conf);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-15068. DataNode could meet deadlock if invoke refreshVolumes when register. Contributed by Aiphago.\n\nSigned-off-by: Masatake Iwasaki \u003ciwasakims@apache.org\u003e\n",
          "commitDate": "03/01/20 8:55 AM",
          "commitName": "037ec8cfb1406ea3a8225a1b6306c2e78440353b",
          "commitAuthor": "Masatake Iwasaki",
          "commitDateOld": "28/12/19 9:45 PM",
          "commitNameOld": "ee51eadda01e02ac5759ca19756f6f961c8eb0cd",
          "commitAuthorOld": "Surendra Singh Lilhore",
          "daysBetweenCommits": 5.47,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,89 @@\n-  private synchronized void refreshVolumes(String newVolumes) throws IOException {\n-    Configuration conf \u003d getConf();\n-    conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n-    ExecutorService service \u003d null;\n-    int numOldDataDirs \u003d dataDirs.size();\n-    ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n-    StringBuilder errorMessageBuilder \u003d new StringBuilder();\n-    List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n-    for (StorageLocation sl : changedVolumes.unchangedLocations) {\n-      effectiveVolumes.add(sl.toString());\n+  private void refreshVolumes(String newVolumes) throws IOException {\n+    // Add volumes for each Namespace\n+    final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n+    for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n+      nsInfos.add(bpos.getNamespaceInfo());\n     }\n-\n-    try {\n-      if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n-          + changedVolumes.newLocations.size()\n-          - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n-        throw new IOException(\"Attempt to remove all volumes.\");\n-      }\n-      if (!changedVolumes.newLocations.isEmpty()) {\n-        LOG.info(\"Adding new volumes: {}\",\n-            Joiner.on(\",\").join(changedVolumes.newLocations));\n-\n-        // Add volumes for each Namespace\n-        final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n-        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n-          nsInfos.add(bpos.getNamespaceInfo());\n-        }\n-        service \u003d Executors\n-            .newFixedThreadPool(changedVolumes.newLocations.size());\n-        List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n-        for (final StorageLocation location : changedVolumes.newLocations) {\n-          exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n-            @Override\n-            public IOException call() {\n-              try {\n-                data.addVolume(location, nsInfos);\n-              } catch (IOException e) {\n-                return e;\n-              }\n-              return null;\n-            }\n-          }));\n-        }\n-\n-        for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n-          StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n-          Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n-          try {\n-            IOException ioe \u003d ioExceptionFuture.get();\n-            if (ioe !\u003d null) {\n-              errorMessageBuilder.append(\n-                  String.format(\"FAILED TO ADD: %s: %s%n\",\n-                  volume, ioe.getMessage()));\n-              LOG.error(\"Failed to add volume: {}\", volume, ioe);\n-            } else {\n-              effectiveVolumes.add(volume.toString());\n-              LOG.info(\"Successfully added volume: {}\", volume);\n-            }\n-          } catch (Exception e) {\n-            errorMessageBuilder.append(\n-                String.format(\"FAILED to ADD: %s: %s%n\", volume,\n-                              e.toString()));\n-            LOG.error(\"Failed to add volume: {}\", volume, e);\n-          }\n-        }\n+    synchronized(this) {\n+      Configuration conf \u003d getConf();\n+      conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n+      ExecutorService service \u003d null;\n+      int numOldDataDirs \u003d dataDirs.size();\n+      ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n+      StringBuilder errorMessageBuilder \u003d new StringBuilder();\n+      List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n+      for (StorageLocation sl : changedVolumes.unchangedLocations) {\n+        effectiveVolumes.add(sl.toString());\n       }\n \n       try {\n-        removeVolumes(changedVolumes.deactivateLocations);\n-      } catch (IOException e) {\n-        errorMessageBuilder.append(e.getMessage());\n-        LOG.error(\"Failed to remove volume\", e);\n-      }\n+        if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n+            + changedVolumes.newLocations.size()\n+            - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n+          throw new IOException(\"Attempt to remove all volumes.\");\n+        }\n+        if (!changedVolumes.newLocations.isEmpty()) {\n+          LOG.info(\"Adding new volumes: {}\",\n+              Joiner.on(\",\").join(changedVolumes.newLocations));\n \n-      if (errorMessageBuilder.length() \u003e 0) {\n-        throw new IOException(errorMessageBuilder.toString());\n+          service \u003d Executors\n+              .newFixedThreadPool(changedVolumes.newLocations.size());\n+          List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n+\n+          for (final StorageLocation location : changedVolumes.newLocations) {\n+            exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n+              @Override\n+              public IOException call() {\n+                try {\n+                  data.addVolume(location, nsInfos);\n+                } catch (IOException e) {\n+                  return e;\n+                }\n+                return null;\n+              }\n+            }));\n+          }\n+\n+          for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n+            StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n+            Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n+            try {\n+              IOException ioe \u003d ioExceptionFuture.get();\n+              if (ioe !\u003d null) {\n+                errorMessageBuilder.append(\n+                    String.format(\"FAILED TO ADD: %s: %s%n\",\n+                        volume, ioe.getMessage()));\n+                LOG.error(\"Failed to add volume: {}\", volume, ioe);\n+              } else {\n+                effectiveVolumes.add(volume.toString());\n+                LOG.info(\"Successfully added volume: {}\", volume);\n+              }\n+            } catch (Exception e) {\n+              errorMessageBuilder.append(\n+                  String.format(\"FAILED to ADD: %s: %s%n\", volume,\n+                      e.toString()));\n+              LOG.error(\"Failed to add volume: {}\", volume, e);\n+            }\n+          }\n+        }\n+\n+        try {\n+          removeVolumes(changedVolumes.deactivateLocations);\n+        } catch (IOException e) {\n+          errorMessageBuilder.append(e.getMessage());\n+          LOG.error(\"Failed to remove volume\", e);\n+        }\n+\n+        if (errorMessageBuilder.length() \u003e 0) {\n+          throw new IOException(errorMessageBuilder.toString());\n+        }\n+      } finally {\n+        if (service !\u003d null) {\n+          service.shutdown();\n+        }\n+        conf.set(DFS_DATANODE_DATA_DIR_KEY,\n+            Joiner.on(\",\").join(effectiveVolumes));\n+        dataDirs \u003d getStorageLocations(conf);\n       }\n-    } finally {\n-      if (service !\u003d null) {\n-        service.shutdown();\n-      }\n-      conf.set(DFS_DATANODE_DATA_DIR_KEY,\n-          Joiner.on(\",\").join(effectiveVolumes));\n-      dataDirs \u003d getStorageLocations(conf);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void refreshVolumes(String newVolumes) throws IOException {\n    // Add volumes for each Namespace\n    final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n    for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n      nsInfos.add(bpos.getNamespaceInfo());\n    }\n    synchronized(this) {\n      Configuration conf \u003d getConf();\n      conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n      ExecutorService service \u003d null;\n      int numOldDataDirs \u003d dataDirs.size();\n      ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n      StringBuilder errorMessageBuilder \u003d new StringBuilder();\n      List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n      for (StorageLocation sl : changedVolumes.unchangedLocations) {\n        effectiveVolumes.add(sl.toString());\n      }\n\n      try {\n        if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n            + changedVolumes.newLocations.size()\n            - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n          throw new IOException(\"Attempt to remove all volumes.\");\n        }\n        if (!changedVolumes.newLocations.isEmpty()) {\n          LOG.info(\"Adding new volumes: {}\",\n              Joiner.on(\",\").join(changedVolumes.newLocations));\n\n          service \u003d Executors\n              .newFixedThreadPool(changedVolumes.newLocations.size());\n          List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n\n          for (final StorageLocation location : changedVolumes.newLocations) {\n            exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n              @Override\n              public IOException call() {\n                try {\n                  data.addVolume(location, nsInfos);\n                } catch (IOException e) {\n                  return e;\n                }\n                return null;\n              }\n            }));\n          }\n\n          for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n            StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n            Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n            try {\n              IOException ioe \u003d ioExceptionFuture.get();\n              if (ioe !\u003d null) {\n                errorMessageBuilder.append(\n                    String.format(\"FAILED TO ADD: %s: %s%n\",\n                        volume, ioe.getMessage()));\n                LOG.error(\"Failed to add volume: {}\", volume, ioe);\n              } else {\n                effectiveVolumes.add(volume.toString());\n                LOG.info(\"Successfully added volume: {}\", volume);\n              }\n            } catch (Exception e) {\n              errorMessageBuilder.append(\n                  String.format(\"FAILED to ADD: %s: %s%n\", volume,\n                      e.toString()));\n              LOG.error(\"Failed to add volume: {}\", volume, e);\n            }\n          }\n        }\n\n        try {\n          removeVolumes(changedVolumes.deactivateLocations);\n        } catch (IOException e) {\n          errorMessageBuilder.append(e.getMessage());\n          LOG.error(\"Failed to remove volume\", e);\n        }\n\n        if (errorMessageBuilder.length() \u003e 0) {\n          throw new IOException(errorMessageBuilder.toString());\n        }\n      } finally {\n        if (service !\u003d null) {\n          service.shutdown();\n        }\n        conf.set(DFS_DATANODE_DATA_DIR_KEY,\n            Joiner.on(\",\").join(effectiveVolumes));\n        dataDirs \u003d getStorageLocations(conf);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "dfcb331ba3516264398121c9f23af3a79c0509cc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13076: [SPS]: Addendum. Resolve conflicts after rebasing branch to trunk. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "dfcb331ba3516264398121c9f23af3a79c0509cc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,86 @@\n+  private synchronized void refreshVolumes(String newVolumes) throws IOException {\n+    Configuration conf \u003d getConf();\n+    conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n+    ExecutorService service \u003d null;\n+    int numOldDataDirs \u003d dataDirs.size();\n+    ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n+    StringBuilder errorMessageBuilder \u003d new StringBuilder();\n+    List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n+    for (StorageLocation sl : changedVolumes.unchangedLocations) {\n+      effectiveVolumes.add(sl.toString());\n+    }\n+\n+    try {\n+      if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n+          + changedVolumes.newLocations.size()\n+          - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n+        throw new IOException(\"Attempt to remove all volumes.\");\n+      }\n+      if (!changedVolumes.newLocations.isEmpty()) {\n+        LOG.info(\"Adding new volumes: {}\",\n+            Joiner.on(\",\").join(changedVolumes.newLocations));\n+\n+        // Add volumes for each Namespace\n+        final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n+        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n+          nsInfos.add(bpos.getNamespaceInfo());\n+        }\n+        service \u003d Executors\n+            .newFixedThreadPool(changedVolumes.newLocations.size());\n+        List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n+        for (final StorageLocation location : changedVolumes.newLocations) {\n+          exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n+            @Override\n+            public IOException call() {\n+              try {\n+                data.addVolume(location, nsInfos);\n+              } catch (IOException e) {\n+                return e;\n+              }\n+              return null;\n+            }\n+          }));\n+        }\n+\n+        for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n+          StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n+          Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n+          try {\n+            IOException ioe \u003d ioExceptionFuture.get();\n+            if (ioe !\u003d null) {\n+              errorMessageBuilder.append(\n+                  String.format(\"FAILED TO ADD: %s: %s%n\",\n+                  volume, ioe.getMessage()));\n+              LOG.error(\"Failed to add volume: {}\", volume, ioe);\n+            } else {\n+              effectiveVolumes.add(volume.toString());\n+              LOG.info(\"Successfully added volume: {}\", volume);\n+            }\n+          } catch (Exception e) {\n+            errorMessageBuilder.append(\n+                String.format(\"FAILED to ADD: %s: %s%n\", volume,\n+                              e.toString()));\n+            LOG.error(\"Failed to add volume: {}\", volume, e);\n+          }\n+        }\n+      }\n+\n+      try {\n+        removeVolumes(changedVolumes.deactivateLocations);\n+      } catch (IOException e) {\n+        errorMessageBuilder.append(e.getMessage());\n+        LOG.error(\"Failed to remove volume\", e);\n+      }\n+\n+      if (errorMessageBuilder.length() \u003e 0) {\n+        throw new IOException(errorMessageBuilder.toString());\n+      }\n+    } finally {\n+      if (service !\u003d null) {\n+        service.shutdown();\n+      }\n+      conf.set(DFS_DATANODE_DATA_DIR_KEY,\n+          Joiner.on(\",\").join(effectiveVolumes));\n+      dataDirs \u003d getStorageLocations(conf);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void refreshVolumes(String newVolumes) throws IOException {\n    Configuration conf \u003d getConf();\n    conf.set(DFS_DATANODE_DATA_DIR_KEY, newVolumes);\n    ExecutorService service \u003d null;\n    int numOldDataDirs \u003d dataDirs.size();\n    ChangedVolumes changedVolumes \u003d parseChangedVolumes(newVolumes);\n    StringBuilder errorMessageBuilder \u003d new StringBuilder();\n    List\u003cString\u003e effectiveVolumes \u003d Lists.newArrayList();\n    for (StorageLocation sl : changedVolumes.unchangedLocations) {\n      effectiveVolumes.add(sl.toString());\n    }\n\n    try {\n      if (numOldDataDirs + getFSDataset().getNumFailedVolumes()\n          + changedVolumes.newLocations.size()\n          - changedVolumes.deactivateLocations.size() \u003c\u003d 0) {\n        throw new IOException(\"Attempt to remove all volumes.\");\n      }\n      if (!changedVolumes.newLocations.isEmpty()) {\n        LOG.info(\"Adding new volumes: {}\",\n            Joiner.on(\",\").join(changedVolumes.newLocations));\n\n        // Add volumes for each Namespace\n        final List\u003cNamespaceInfo\u003e nsInfos \u003d Lists.newArrayList();\n        for (BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {\n          nsInfos.add(bpos.getNamespaceInfo());\n        }\n        service \u003d Executors\n            .newFixedThreadPool(changedVolumes.newLocations.size());\n        List\u003cFuture\u003cIOException\u003e\u003e exceptions \u003d Lists.newArrayList();\n        for (final StorageLocation location : changedVolumes.newLocations) {\n          exceptions.add(service.submit(new Callable\u003cIOException\u003e() {\n            @Override\n            public IOException call() {\n              try {\n                data.addVolume(location, nsInfos);\n              } catch (IOException e) {\n                return e;\n              }\n              return null;\n            }\n          }));\n        }\n\n        for (int i \u003d 0; i \u003c changedVolumes.newLocations.size(); i++) {\n          StorageLocation volume \u003d changedVolumes.newLocations.get(i);\n          Future\u003cIOException\u003e ioExceptionFuture \u003d exceptions.get(i);\n          try {\n            IOException ioe \u003d ioExceptionFuture.get();\n            if (ioe !\u003d null) {\n              errorMessageBuilder.append(\n                  String.format(\"FAILED TO ADD: %s: %s%n\",\n                  volume, ioe.getMessage()));\n              LOG.error(\"Failed to add volume: {}\", volume, ioe);\n            } else {\n              effectiveVolumes.add(volume.toString());\n              LOG.info(\"Successfully added volume: {}\", volume);\n            }\n          } catch (Exception e) {\n            errorMessageBuilder.append(\n                String.format(\"FAILED to ADD: %s: %s%n\", volume,\n                              e.toString()));\n            LOG.error(\"Failed to add volume: {}\", volume, e);\n          }\n        }\n      }\n\n      try {\n        removeVolumes(changedVolumes.deactivateLocations);\n      } catch (IOException e) {\n        errorMessageBuilder.append(e.getMessage());\n        LOG.error(\"Failed to remove volume\", e);\n      }\n\n      if (errorMessageBuilder.length() \u003e 0) {\n        throw new IOException(errorMessageBuilder.toString());\n      }\n    } finally {\n      if (service !\u003d null) {\n        service.shutdown();\n      }\n      conf.set(DFS_DATANODE_DATA_DIR_KEY,\n          Joiner.on(\",\").join(effectiveVolumes));\n      dataDirs \u003d getStorageLocations(conf);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}