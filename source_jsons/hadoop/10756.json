{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPoolSliceStorage.java",
  "functionName": "doTransition",
  "functionId": "doTransition___sd-StorageDirectory__nsInfo-NamespaceInfo__startOpt-StartupOption__callables-List__Callable__StorageDirectory______conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
  "functionStartLine": 370,
  "functionEndLine": 426,
  "numCommitsSeen": 110,
  "timeTaken": 10456,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "b668eb91556b8c85c2b4925808ccb1f769031c20",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "1a495fbb489c9e9a23b341a52696d10e9e272b04",
    "f949f6b54825dac61511a5761837e2fd14437239",
    "4ae8178c5626d188b137e3f806e56fd8661c4970",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
    "dbf14320c093991d2ca97b3608efe1c3c0af9888",
    "377424e36a25ab34bba9aaed5feaae9d293eb57f",
    "5df82fa01d26c18685ad7617128dbc2913547cb3",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "1a495fbb489c9e9a23b341a52696d10e9e272b04": "Ybodychange",
    "f949f6b54825dac61511a5761837e2fd14437239": "Ybodychange",
    "4ae8178c5626d188b137e3f806e56fd8661c4970": "Ybodychange",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": "Ymultichange(Yparameterchange,Ybodychange)",
    "dbf14320c093991d2ca97b3608efe1c3c0af9888": "Ybodychange",
    "377424e36a25ab34bba9aaed5feaae9d293eb57f": "Ybodychange",
    "5df82fa01d26c18685ad7617128dbc2913547cb3": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8": "Ymultichange(Yparameterchange,Ybodychange)",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n       StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n       Configuration conf) throws IOException {\n     if (sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n       return false; // regular startup for PROVIDED storage directories\n     }\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n-      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n+      LOG.info(\"Restored {} block files from trash.\", restored);\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n-      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n-        \"before the layout upgrade. These blocks will be moved to \" +\n-        \"the previous directory during the upgrade\");\n+      LOG.info(\"Restored {} block files from trash \" +\n+          \"before the layout upgrade. These blocks will be moved to \" +\n+          \"the previous directory during the upgrade\", restored);\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo, callables, conf); // upgrade\n       return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      return false; // regular startup for PROVIDED storage directories\n    }\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored {} block files from trash.\", restored);\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored {} block files from trash \" +\n          \"before the layout upgrade. These blocks will be moved to \" +\n          \"the previous directory during the upgrade\", restored);\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, callables, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "18/01/17 11:38 PM",
      "commitNameOld": "63320d1daab7ce846bb180623378efe431ad8c52",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 330.76,
      "commitsBetweenForRepo": 2183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n       StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n       Configuration conf) throws IOException {\n+    if (sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n+      return false; // regular startup for PROVIDED storage directories\n+    }\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo, callables, conf); // upgrade\n       return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (sd.getStorageLocation().getStorageType() \u003d\u003d StorageType.PROVIDED) {\n      return false; // regular startup for PROVIDED storage directories\n    }\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, callables, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 25.84,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n-      StartupOption startOpt, Configuration conf) throws IOException {\n+      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n+      Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(sd, nsInfo, conf); // upgrade\n+      doUpgrade(sd, nsInfo, callables, conf); // upgrade\n       return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, callables, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption, conf-Configuration]",
            "newValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption, callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 25.84,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n   private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n-      StartupOption startOpt, Configuration conf) throws IOException {\n+      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n+      Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(sd, nsInfo, conf); // upgrade\n+      doUpgrade(sd, nsInfo, callables, conf); // upgrade\n       return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, callables, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  private void doTransition(DataNode datanode, StorageDirectory sd,\n-      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n+      StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n-      return; // regular startup\n+      return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(datanode, sd, nsInfo); // upgrade\n-      return;\n+      doUpgrade(sd, nsInfo, conf); // upgrade\n+      return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption]",
            "newValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption, conf-Configuration]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  private void doTransition(DataNode datanode, StorageDirectory sd,\n-      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n+      StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n-      return; // regular startup\n+      return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(datanode, sd, nsInfo); // upgrade\n-      return;\n+      doUpgrade(sd, nsInfo, conf); // upgrade\n+      return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  private void doTransition(DataNode datanode, StorageDirectory sd,\n-      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n+  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n+      StartupOption startOpt, Configuration conf) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n-      return; // regular startup\n+      return false; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n     if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(datanode, sd, nsInfo); // upgrade\n-      return;\n+      doUpgrade(sd, nsInfo, conf); // upgrade\n+      return true;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean doTransition(StorageDirectory sd, NamespaceInfo nsInfo,\n      StartupOption startOpt, Configuration conf) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return false; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo, conf); // upgrade\n      return true;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/03/15 3:25 PM",
      "commitNameOld": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.78,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n         !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n-    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n+    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n-    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n+    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n-    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n+    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash \" +\n         \"before the layout upgrade. These blocks will be moved to \" +\n         \"the previous directory during the upgrade\");\n     }\n-    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n+    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(datanode, sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(datanode, sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "1a495fbb489c9e9a23b341a52696d10e9e272b04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7645. Rolling upgrade is restoring blocks from trash multiple times (Contributed by Vinayakumar B and Keisuke Ogiwara)\n",
      "commitDate": "30/03/15 3:25 PM",
      "commitName": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "04/02/15 12:10 PM",
      "commitNameOld": "40a415799b1ff3602fbb461765f8b36f1133bda2",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 54.09,
      "commitsBetweenForRepo": 529,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,53 @@\n   private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n       Preconditions.checkState(!getTrashRootDir(sd).exists(),\n           sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n           \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n-    } else {\n+    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n+        !sd.getPreviousDir().exists()) {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n+    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n+      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n+      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n+        \"before the layout upgrade. These blocks will be moved to \" +\n+        \"the previous directory during the upgrade\");\n+    }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(datanode, sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026\n        !sd.getPreviousDir().exists()) {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION) {\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash \" +\n        \"before the layout upgrade. These blocks will be moved to \" +\n        \"the previous directory during the upgrade\");\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(datanode, sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "f949f6b54825dac61511a5761837e2fd14437239": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6981. Fix DN upgrade with layout version change. (Arpit Agarwal)\n",
      "commitDate": "08/09/14 9:20 PM",
      "commitName": "f949f6b54825dac61511a5761837e2fd14437239",
      "commitAuthor": "arp",
      "commitDateOld": "29/08/14 1:00 PM",
      "commitNameOld": "7eab2a29a5706ce10912c12fa225ef6b27a82cbe",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 10.35,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,46 @@\n   private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n-      // we will already restore everything in the trash by rolling back to\n-      // the previous directory, so we must delete the trash to ensure\n-      // that it\u0027s not restored by BPOfferService.signalRollingUpgrade()\n-      if (!FileUtil.fullyDelete(getTrashRootDir(sd))) {\n-        throw new IOException(\"Unable to delete trash directory prior to \" +\n-            \"restoration of previous directory: \" + getTrashRootDir(sd));\n-      }\n+      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n+          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n+          \" both be present.\");\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(datanode, sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      Preconditions.checkState(!getTrashRootDir(sd).exists(),\n          sd.getPreviousDir() + \" and \" + getTrashRootDir(sd) + \" should not \" +\n          \" both be present.\");\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(datanode, sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "4ae8178c5626d188b137e3f806e56fd8661c4970": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6800. Support Datanode layout changes with rolling upgrade. (Contributed by James Thomas)\n",
      "commitDate": "29/08/14 12:26 AM",
      "commitName": "4ae8178c5626d188b137e3f806e56fd8661c4970",
      "commitAuthor": "arp",
      "commitDateOld": "07/08/14 3:46 PM",
      "commitNameOld": "eca80dca3ee0888304519ec96e9e4113cc35b112",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 21.36,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,50 @@\n   private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n-    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n+    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n+      // we will already restore everything in the trash by rolling back to\n+      // the previous directory, so we must delete the trash to ensure\n+      // that it\u0027s not restored by BPOfferService.signalRollingUpgrade()\n+      if (!FileUtil.fullyDelete(getTrashRootDir(sd))) {\n+        throw new IOException(\"Unable to delete trash directory prior to \" +\n+            \"restoration of previous directory: \" + getTrashRootDir(sd));\n+      }\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(datanode, sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK \u0026\u0026 sd.getPreviousDir().exists()) {\n      // we will already restore everything in the trash by rolling back to\n      // the previous directory, so we must delete the trash to ensure\n      // that it\u0027s not restored by BPOfferService.signalRollingUpgrade()\n      if (!FileUtil.fullyDelete(getTrashRootDir(sd))) {\n        throw new IOException(\"Unable to delete trash directory prior to \" +\n            \"restoration of previous directory: \" + getTrashRootDir(sd));\n      }\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(datanode, sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 1:41 PM",
      "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "31/07/14 6:13 PM",
          "commitNameOld": "b5b862e3afd0797dc8f940204622e174c1382f5e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  private void doTransition(StorageDirectory sd,\n+  private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(sd, nsInfo); // upgrade\n+      doUpgrade(datanode, sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(datanode, sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption]",
            "newValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "31/07/14 6:13 PM",
          "commitNameOld": "b5b862e3afd0797dc8f940204622e174c1382f5e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  private void doTransition(StorageDirectory sd,\n+  private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n     } else {\n       // Restore all the files in the trash. The restored files are retained\n       // during rolling upgrade rollback. They are deleted during rolling\n       // upgrade downgrade.\n       int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n       LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n-      doUpgrade(sd, nsInfo); // upgrade\n+      doUpgrade(datanode, sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(datanode, sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "dbf14320c093991d2ca97b3608efe1c3c0af9888": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6005. Simplify Datanode rollback and downgrade. (Contributed by Suresh Srinivas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571431 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 12:46 PM",
      "commitName": "dbf14320c093991d2ca97b3608efe1c3c0af9888",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "21/02/14 2:40 PM",
      "commitNameOld": "3f7852bd27de4f87e242ad4eb73932b739922a5b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private void doTransition(StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n-    } else if (StartupOption.isRollingUpgradeRollback(startOpt)) {\n-      File trashRoot \u003d getTrashRootDir(sd);\n-      int filesRestored \u003d\n-          trashRoot.exists() ? restoreBlockFilesFromTrash(trashRoot) : 0;\n-      LOG.info(\"Restored \" + filesRestored + \" block files from trash.\");\n+    } else {\n+      // Restore all the files in the trash. The restored files are retained\n+      // during rolling upgrade rollback. They are deleted during rolling\n+      // upgrade downgrade.\n+      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n+      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n     }\n-    \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else {\n      // Restore all the files in the trash. The restored files are retained\n      // during rolling upgrade rollback. They are deleted during rolling\n      // upgrade downgrade.\n      int restored \u003d restoreBlockFilesFromTrash(getTrashRootDir(sd));\n      LOG.info(\"Restored \" + restored + \" block files from trash.\");\n    }\n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "377424e36a25ab34bba9aaed5feaae9d293eb57f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5966. Fix rollback of rolling upgrade in NameNode HA setup.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1569885 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 11:41 AM",
      "commitName": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/02/14 8:37 AM",
      "commitNameOld": "5df82fa01d26c18685ad7617128dbc2913547cb3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 5.13,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   private void doTransition(StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n-    } else if (startOpt \u003d\u003d StartupOption.ROLLINGUPGRADE \u0026\u0026\n-        startOpt.getRollingUpgradeStartupOption() \u003d\u003d RollingUpgradeStartupOption.ROLLBACK) {\n+    } else if (StartupOption.isRollingUpgradeRollback(startOpt)) {\n       File trashRoot \u003d getTrashRootDir(sd);\n       int filesRestored \u003d\n           trashRoot.exists() ? restoreBlockFilesFromTrash(trashRoot) : 0;\n       LOG.info(\"Restored \" + filesRestored + \" block files from trash.\");\n     }\n     \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (StartupOption.isRollingUpgradeRollback(startOpt)) {\n      File trashRoot \u003d getTrashRootDir(sd);\n      int filesRestored \u003d\n          trashRoot.exists() ? restoreBlockFilesFromTrash(trashRoot) : 0;\n      LOG.info(\"Restored \" + filesRestored + \" block files from trash.\");\n    }\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "5df82fa01d26c18685ad7617128dbc2913547cb3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5907. BlockPoolSliceStorage trash to handle block deletions during rolling upgrade. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1568346 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 8:37 AM",
      "commitName": "5df82fa01d26c18685ad7617128dbc2913547cb3",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "30/01/14 7:21 PM",
      "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 14.55,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,44 @@\n   private void doTransition(StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n-    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n+    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n       doRollback(sd, nsInfo); // rollback if applicable\n+    } else if (startOpt \u003d\u003d StartupOption.ROLLINGUPGRADE \u0026\u0026\n+        startOpt.getRollingUpgradeStartupOption() \u003d\u003d RollingUpgradeStartupOption.ROLLBACK) {\n+      File trashRoot \u003d getTrashRootDir(sd);\n+      int filesRestored \u003d\n+          trashRoot.exists() ? restoreBlockFilesFromTrash(trashRoot) : 0;\n+      LOG.info(\"Restored \" + filesRestored + \" block files from trash.\");\n+    }\n     \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n     if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK) {\n      doRollback(sd, nsInfo); // rollback if applicable\n    } else if (startOpt \u003d\u003d StartupOption.ROLLINGUPGRADE \u0026\u0026\n        startOpt.getRollingUpgradeStartupOption() \u003d\u003d RollingUpgradeStartupOption.ROLLBACK) {\n      File trashRoot \u003d getTrashRootDir(sd);\n      int filesRestored \u003d\n          trashRoot.exists() ? restoreBlockFilesFromTrash(trashRoot) : 0;\n      LOG.info(\"Restored \" + filesRestored + \" block files from trash.\");\n    }\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/01/14 12:01 PM",
      "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private void doTransition(StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n       doRollback(sd, nsInfo); // rollback if applicable\n     \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n-    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n+    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n-    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n+    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n     }\n-    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n+    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.DATANODE_LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.DATANODE_LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.DATANODE_LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2686. Remove DistributedUpgrade related code. Contributed by Suresh Srinivas\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375800 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/12 2:18 PM",
      "commitName": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2686. Remove DistributedUpgrade related code. Contributed by Suresh Srinivas\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375800 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/12 2:18 PM",
          "commitName": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "15/07/12 7:58 PM",
          "commitNameOld": "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 36.76,
          "commitsBetweenForRepo": 189,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,37 @@\n-  private void doTransition(DataNode datanode, StorageDirectory sd,\n+  private void doTransition(StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n       doRollback(sd, nsInfo); // rollback if applicable\n     \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n-        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n+        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n-    \n-    // verify necessity of a distributed upgrade\n-    UpgradeManagerDatanode um \u003d \n-      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n-    verifyDistributedUpgradeProgress(um, nsInfo);\n+    }\n     if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doTransition(StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption]",
            "newValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo, startOpt-StartupOption]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2686. Remove DistributedUpgrade related code. Contributed by Suresh Srinivas\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375800 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/08/12 2:18 PM",
          "commitName": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "15/07/12 7:58 PM",
          "commitNameOld": "0e8e499ff482c165d21c8e4f5ff9c33f306ca0d9",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 36.76,
          "commitsBetweenForRepo": 189,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,37 @@\n-  private void doTransition(DataNode datanode, StorageDirectory sd,\n+  private void doTransition(StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n       doRollback(sd, nsInfo); // rollback if applicable\n     \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n-        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n+        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n       return; // regular startup\n-    \n-    // verify necessity of a distributed upgrade\n-    UpgradeManagerDatanode um \u003d \n-      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n-    verifyDistributedUpgradeProgress(um, nsInfo);\n+    }\n     if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doTransition(StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime()) {\n      return; // regular startup\n    }\n    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n       doRollback(sd, nsInfo); // rollback if applicable\n     \n     readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n-    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n+    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n-    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n+    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n       return; // regular startup\n     \n     // verify necessity of a distributed upgrade\n     UpgradeManagerDatanode um \u003d \n       datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n     verifyDistributedUpgradeProgress(um, nsInfo);\n-    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n+    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d HdfsConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d HdfsConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    \n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    if (this.layoutVersion \u003e HdfsConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    \n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    \n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 45.22,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private void doTransition(DataNode datanode, StorageDirectory sd,\n       NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n     if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n       doRollback(sd, nsInfo); // rollback if applicable\n     \n-    sd.read();\n+    readProperties(sd);\n     checkVersionUpgradable(this.layoutVersion);\n     assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n        : \"Future version is not allowed\";\n     if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n       throw new IOException(\"Incompatible namespaceIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n           + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n           + getNamespaceID());\n     }\n     if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n       throw new IOException(\"Incompatible blockpoolIDs in \"\n           + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n           + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n           + blockpoolID);\n     }\n     if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n         \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n       return; // regular startup\n     \n     // verify necessity of a distributed upgrade\n     UpgradeManagerDatanode um \u003d \n       datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n     verifyDistributedUpgradeProgress(um, nsInfo);\n     if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n         || this.cTime \u003c nsInfo.getCTime()) {\n       doUpgrade(sd, nsInfo); // upgrade\n       return;\n     }\n     // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n     // must shutdown\n     throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n         + \" CTime \u003d \" + this.getCTime()\n         + \" is newer than the namespace state: LV \u003d \"\n         + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    readProperties(sd);\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    \n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  private void doTransition(DataNode datanode, StorageDirectory sd,\n+      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n+    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n+      doRollback(sd, nsInfo); // rollback if applicable\n+    \n+    sd.read();\n+    checkVersionUpgradable(this.layoutVersion);\n+    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n+       : \"Future version is not allowed\";\n+    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n+      throw new IOException(\"Incompatible namespaceIDs in \"\n+          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n+          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n+          + getNamespaceID());\n+    }\n+    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n+      throw new IOException(\"Incompatible blockpoolIDs in \"\n+          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n+          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n+          + blockpoolID);\n+    }\n+    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n+        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n+      return; // regular startup\n+    \n+    // verify necessity of a distributed upgrade\n+    UpgradeManagerDatanode um \u003d \n+      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n+    verifyDistributedUpgradeProgress(um, nsInfo);\n+    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n+        || this.cTime \u003c nsInfo.getCTime()) {\n+      doUpgrade(sd, nsInfo); // upgrade\n+      return;\n+    }\n+    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n+    // must shutdown\n+    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n+        + \" CTime \u003d \" + this.getCTime()\n+        + \" is newer than the namespace state: LV \u003d \"\n+        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void doTransition(DataNode datanode, StorageDirectory sd,\n      NamespaceInfo nsInfo, StartupOption startOpt) throws IOException {\n    if (startOpt \u003d\u003d StartupOption.ROLLBACK)\n      doRollback(sd, nsInfo); // rollback if applicable\n    \n    sd.read();\n    checkVersionUpgradable(this.layoutVersion);\n    assert this.layoutVersion \u003e\u003d FSConstants.LAYOUT_VERSION \n       : \"Future version is not allowed\";\n    if (getNamespaceID() !\u003d nsInfo.getNamespaceID()) {\n      throw new IOException(\"Incompatible namespaceIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode namespaceID \u003d \"\n          + nsInfo.getNamespaceID() + \"; datanode namespaceID \u003d \"\n          + getNamespaceID());\n    }\n    if (!blockpoolID.equals(nsInfo.getBlockPoolID())) {\n      throw new IOException(\"Incompatible blockpoolIDs in \"\n          + sd.getRoot().getCanonicalPath() + \": namenode blockpoolID \u003d \"\n          + nsInfo.getBlockPoolID() + \"; datanode blockpoolID \u003d \"\n          + blockpoolID);\n    }\n    if (this.layoutVersion \u003d\u003d FSConstants.LAYOUT_VERSION\n        \u0026\u0026 this.cTime \u003d\u003d nsInfo.getCTime())\n      return; // regular startup\n    \n    // verify necessity of a distributed upgrade\n    UpgradeManagerDatanode um \u003d \n      datanode.getUpgradeManagerDatanode(nsInfo.getBlockPoolID());\n    verifyDistributedUpgradeProgress(um, nsInfo);\n    if (this.layoutVersion \u003e FSConstants.LAYOUT_VERSION\n        || this.cTime \u003c nsInfo.getCTime()) {\n      doUpgrade(sd, nsInfo); // upgrade\n      return;\n    }\n    // layoutVersion \u003d\u003d LAYOUT_VERSION \u0026\u0026 this.cTime \u003e nsInfo.cTime\n    // must shutdown\n    throw new IOException(\"Datanode state: LV \u003d \" + this.getLayoutVersion()\n        + \" CTime \u003d \" + this.getCTime()\n        + \" is newer than the namespace state: LV \u003d \"\n        + nsInfo.getLayoutVersion() + \" CTime \u003d \" + nsInfo.getCTime());\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
    }
  }
}