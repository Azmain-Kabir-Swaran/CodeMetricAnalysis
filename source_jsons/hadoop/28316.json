{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SQLFederationStateStore.java",
  "functionName": "getSubCluster",
  "functionId": "getSubCluster___subClusterRequest-GetSubClusterInfoRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
  "functionStartLine": 372,
  "functionEndLine": 450,
  "numCommitsSeen": 6,
  "timeTaken": 1944,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "75abc9a8e2cf1c7d2c574ede720df59421512be3",
    "825108d08a9b49d7c19915624f9167101528cb95",
    "5272af8c7eab76d779c621eb0208bf29ffa25613"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "75abc9a8e2cf1c7d2c574ede720df59421512be3": "Ybodychange",
    "825108d08a9b49d7c19915624f9167101528cb95": "Ybodychange",
    "5272af8c7eab76d779c621eb0208bf29ffa25613": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "27/07/18 3:23 PM",
      "commitNameOld": "79091cf76f6e966f64ac1d65e43e95782695e678",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 231.04,
      "commitsBetweenForRepo": 1874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,79 @@\n   public GetSubClusterInfoResponse getSubCluster(\n       GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n \n     // Input validator\n     FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n \n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n \n     SubClusterInfo subClusterInfo \u003d null;\n     SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n       cstmt.setString(1, subClusterId.getId());\n \n       // Set the parameters for the stored procedure\n       cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n       cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n       cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n \n       // Execute the query\n       long startTime \u003d clock.getTime();\n       cstmt.execute();\n       long stopTime \u003d clock.getTime();\n \n       String amRMAddress \u003d cstmt.getString(2);\n       String clientRMAddress \u003d cstmt.getString(3);\n       String rmAdminAddress \u003d cstmt.getString(4);\n       String webAppAddress \u003d cstmt.getString(5);\n \n       // first check if the subCluster exists\n       if((amRMAddress \u003d\u003d null) || (clientRMAddress \u003d\u003d null)) {\n         LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\n         return null;\n       }\n \n       Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n       long lastHeartBeat \u003d\n           heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n \n       SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n       long lastStartTime \u003d cstmt.getLong(8);\n       String capability \u003d cstmt.getString(9);\n \n       subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n           clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n           lastStartTime, capability);\n \n       FederationStateStoreClientMetrics\n           .succeededStateStoreCall(stopTime - startTime);\n \n       // Check if the output it is a valid subcluster\n       try {\n         FederationMembershipStateStoreInputValidator\n             .checkSubClusterInfo(subClusterInfo);\n       } catch (FederationStateStoreInvalidInputException e) {\n         String errMsg \u003d\n             \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n         FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n       }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Got the information about the specified SubCluster \"\n-            + subClusterInfo.toString());\n-      }\n+      LOG.debug(\"Got the information about the specified SubCluster {}\",\n+          subClusterInfo);\n     } catch (SQLException e) {\n       FederationStateStoreClientMetrics.failedStateStoreCall();\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n     }\n     return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterInfoResponse getSubCluster(\n      GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n\n    // Input validator\n    FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n\n    SubClusterInfo subClusterInfo \u003d null;\n    SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n      cstmt.setString(1, subClusterId.getId());\n\n      // Set the parameters for the stored procedure\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n      cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n      cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n\n      // Execute the query\n      long startTime \u003d clock.getTime();\n      cstmt.execute();\n      long stopTime \u003d clock.getTime();\n\n      String amRMAddress \u003d cstmt.getString(2);\n      String clientRMAddress \u003d cstmt.getString(3);\n      String rmAdminAddress \u003d cstmt.getString(4);\n      String webAppAddress \u003d cstmt.getString(5);\n\n      // first check if the subCluster exists\n      if((amRMAddress \u003d\u003d null) || (clientRMAddress \u003d\u003d null)) {\n        LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\n        return null;\n      }\n\n      Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n      long lastHeartBeat \u003d\n          heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n\n      SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n      long lastStartTime \u003d cstmt.getLong(8);\n      String capability \u003d cstmt.getString(9);\n\n      subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n          clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n          lastStartTime, capability);\n\n      FederationStateStoreClientMetrics\n          .succeededStateStoreCall(stopTime - startTime);\n\n      // Check if the output it is a valid subcluster\n      try {\n        FederationMembershipStateStoreInputValidator\n            .checkSubClusterInfo(subClusterInfo);\n      } catch (FederationStateStoreInvalidInputException e) {\n        String errMsg \u003d\n            \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n      }\n      LOG.debug(\"Got the information about the specified SubCluster {}\",\n          subClusterInfo);\n    } catch (SQLException e) {\n      FederationStateStoreClientMetrics.failedStateStoreCall();\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "75abc9a8e2cf1c7d2c574ede720df59421512be3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5603. Metrics for Federation StateStore. (Ellen Hui via asuresh)\n",
      "commitDate": "21/08/17 10:43 PM",
      "commitName": "75abc9a8e2cf1c7d2c574ede720df59421512be3",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "825108d08a9b49d7c19915624f9167101528cb95",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.22,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,81 @@\n   public GetSubClusterInfoResponse getSubCluster(\n       GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n \n     // Input validator\n     FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n \n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n \n     SubClusterInfo subClusterInfo \u003d null;\n     SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n       cstmt.setString(1, subClusterId.getId());\n \n       // Set the parameters for the stored procedure\n       cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n       cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n       cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n \n       // Execute the query\n+      long startTime \u003d clock.getTime();\n       cstmt.execute();\n+      long stopTime \u003d clock.getTime();\n \n       String amRMAddress \u003d cstmt.getString(2);\n       String clientRMAddress \u003d cstmt.getString(3);\n       String rmAdminAddress \u003d cstmt.getString(4);\n       String webAppAddress \u003d cstmt.getString(5);\n \n       // first check if the subCluster exists\n       if((amRMAddress \u003d\u003d null) || (clientRMAddress \u003d\u003d null)) {\n         LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\n         return null;\n       }\n \n       Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n       long lastHeartBeat \u003d\n           heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n \n       SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n       long lastStartTime \u003d cstmt.getLong(8);\n       String capability \u003d cstmt.getString(9);\n \n       subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n           clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n           lastStartTime, capability);\n \n+      FederationStateStoreClientMetrics\n+          .succeededStateStoreCall(stopTime - startTime);\n+\n       // Check if the output it is a valid subcluster\n       try {\n         FederationMembershipStateStoreInputValidator\n             .checkSubClusterInfo(subClusterInfo);\n       } catch (FederationStateStoreInvalidInputException e) {\n         String errMsg \u003d\n             \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n         FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Got the information about the specified SubCluster \"\n             + subClusterInfo.toString());\n       }\n     } catch (SQLException e) {\n+      FederationStateStoreClientMetrics.failedStateStoreCall();\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n     }\n     return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterInfoResponse getSubCluster(\n      GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n\n    // Input validator\n    FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n\n    SubClusterInfo subClusterInfo \u003d null;\n    SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n      cstmt.setString(1, subClusterId.getId());\n\n      // Set the parameters for the stored procedure\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n      cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n      cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n\n      // Execute the query\n      long startTime \u003d clock.getTime();\n      cstmt.execute();\n      long stopTime \u003d clock.getTime();\n\n      String amRMAddress \u003d cstmt.getString(2);\n      String clientRMAddress \u003d cstmt.getString(3);\n      String rmAdminAddress \u003d cstmt.getString(4);\n      String webAppAddress \u003d cstmt.getString(5);\n\n      // first check if the subCluster exists\n      if((amRMAddress \u003d\u003d null) || (clientRMAddress \u003d\u003d null)) {\n        LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\n        return null;\n      }\n\n      Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n      long lastHeartBeat \u003d\n          heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n\n      SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n      long lastStartTime \u003d cstmt.getLong(8);\n      String capability \u003d cstmt.getString(9);\n\n      subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n          clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n          lastStartTime, capability);\n\n      FederationStateStoreClientMetrics\n          .succeededStateStoreCall(stopTime - startTime);\n\n      // Check if the output it is a valid subcluster\n      try {\n        FederationMembershipStateStoreInputValidator\n            .checkSubClusterInfo(subClusterInfo);\n      } catch (FederationStateStoreInvalidInputException e) {\n        String errMsg \u003d\n            \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got the information about the specified SubCluster \"\n            + subClusterInfo.toString());\n      }\n    } catch (SQLException e) {\n      FederationStateStoreClientMetrics.failedStateStoreCall();\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "825108d08a9b49d7c19915624f9167101528cb95": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6815. FederationStateStoreFacade return behavior should be consistent irrespective of whether caching is enabled or not.\n\n(cherry picked from commit 8820693cd769065eed83193b673ec5d919d69500)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "825108d08a9b49d7c19915624f9167101528cb95",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "5272af8c7eab76d779c621eb0208bf29ffa25613",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,75 @@\n   public GetSubClusterInfoResponse getSubCluster(\n       GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n \n     // Input validator\n     FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n \n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n \n     SubClusterInfo subClusterInfo \u003d null;\n     SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n       cstmt.setString(1, subClusterId.getId());\n \n       // Set the parameters for the stored procedure\n       cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n       cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n       cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n       cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n \n       // Execute the query\n       cstmt.execute();\n \n       String amRMAddress \u003d cstmt.getString(2);\n       String clientRMAddress \u003d cstmt.getString(3);\n       String rmAdminAddress \u003d cstmt.getString(4);\n       String webAppAddress \u003d cstmt.getString(5);\n \n+      // first check if the subCluster exists\n+      if((amRMAddress \u003d\u003d null) || (clientRMAddress \u003d\u003d null)) {\n+        LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\n+        return null;\n+      }\n+\n       Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n       long lastHeartBeat \u003d\n           heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n \n       SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n       long lastStartTime \u003d cstmt.getLong(8);\n       String capability \u003d cstmt.getString(9);\n \n       subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n           clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n           lastStartTime, capability);\n \n       // Check if the output it is a valid subcluster\n       try {\n         FederationMembershipStateStoreInputValidator\n             .checkSubClusterInfo(subClusterInfo);\n       } catch (FederationStateStoreInvalidInputException e) {\n         String errMsg \u003d\n             \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n         FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Got the information about the specified SubCluster \"\n             + subClusterInfo.toString());\n       }\n     } catch (SQLException e) {\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n     }\n     return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterInfoResponse getSubCluster(\n      GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n\n    // Input validator\n    FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n\n    SubClusterInfo subClusterInfo \u003d null;\n    SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n      cstmt.setString(1, subClusterId.getId());\n\n      // Set the parameters for the stored procedure\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n      cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n      cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n\n      // Execute the query\n      cstmt.execute();\n\n      String amRMAddress \u003d cstmt.getString(2);\n      String clientRMAddress \u003d cstmt.getString(3);\n      String rmAdminAddress \u003d cstmt.getString(4);\n      String webAppAddress \u003d cstmt.getString(5);\n\n      // first check if the subCluster exists\n      if((amRMAddress \u003d\u003d null) || (clientRMAddress \u003d\u003d null)) {\n        LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\n        return null;\n      }\n\n      Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n      long lastHeartBeat \u003d\n          heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n\n      SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n      long lastStartTime \u003d cstmt.getLong(8);\n      String capability \u003d cstmt.getString(9);\n\n      subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n          clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n          lastStartTime, capability);\n\n      // Check if the output it is a valid subcluster\n      try {\n        FederationMembershipStateStoreInputValidator\n            .checkSubClusterInfo(subClusterInfo);\n      } catch (FederationStateStoreInvalidInputException e) {\n        String errMsg \u003d\n            \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got the information about the specified SubCluster \"\n            + subClusterInfo.toString());\n      }\n    } catch (SQLException e) {\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "5272af8c7eab76d779c621eb0208bf29ffa25613": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3663. Federation State and Policy Store (DBMS implementation). (Giovanni Matteo Fumarola via curino).\n\n(cherry picked from commit be99c1fe2eb150fabd69902118d65941f82971f6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "5272af8c7eab76d779c621eb0208bf29ffa25613",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,69 @@\n+  public GetSubClusterInfoResponse getSubCluster(\n+      GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n+\n+    // Input validator\n+    FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n+\n+    CallableStatement cstmt \u003d null;\n+    Connection conn \u003d null;\n+\n+    SubClusterInfo subClusterInfo \u003d null;\n+    SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n+\n+    try {\n+      conn \u003d getConnection();\n+      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n+      cstmt.setString(1, subClusterId.getId());\n+\n+      // Set the parameters for the stored procedure\n+      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n+      cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n+      cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n+      cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n+      cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n+      cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n+      cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n+      cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n+\n+      // Execute the query\n+      cstmt.execute();\n+\n+      String amRMAddress \u003d cstmt.getString(2);\n+      String clientRMAddress \u003d cstmt.getString(3);\n+      String rmAdminAddress \u003d cstmt.getString(4);\n+      String webAppAddress \u003d cstmt.getString(5);\n+\n+      Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n+      long lastHeartBeat \u003d\n+          heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n+\n+      SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n+      long lastStartTime \u003d cstmt.getLong(8);\n+      String capability \u003d cstmt.getString(9);\n+\n+      subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n+          clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n+          lastStartTime, capability);\n+\n+      // Check if the output it is a valid subcluster\n+      try {\n+        FederationMembershipStateStoreInputValidator\n+            .checkSubClusterInfo(subClusterInfo);\n+      } catch (FederationStateStoreInvalidInputException e) {\n+        String errMsg \u003d\n+            \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n+        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Got the information about the specified SubCluster \"\n+            + subClusterInfo.toString());\n+      }\n+    } catch (SQLException e) {\n+      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n+          \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n+    } finally {\n+      // Return to the pool the CallableStatement and the Connection\n+      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n+    }\n+    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClusterInfoResponse getSubCluster(\n      GetSubClusterInfoRequest subClusterRequest) throws YarnException {\n\n    // Input validator\n    FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\n\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n\n    SubClusterInfo subClusterInfo \u003d null;\n    SubClusterId subClusterId \u003d subClusterRequest.getSubClusterId();\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTER);\n      cstmt.setString(1, subClusterId.getId());\n\n      // Set the parameters for the stored procedure\n      cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\n      cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\n      cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\n      cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\n\n      // Execute the query\n      cstmt.execute();\n\n      String amRMAddress \u003d cstmt.getString(2);\n      String clientRMAddress \u003d cstmt.getString(3);\n      String rmAdminAddress \u003d cstmt.getString(4);\n      String webAppAddress \u003d cstmt.getString(5);\n\n      Timestamp heartBeatTimeStamp \u003d cstmt.getTimestamp(6, utcCalendar);\n      long lastHeartBeat \u003d\n          heartBeatTimeStamp !\u003d null ? heartBeatTimeStamp.getTime() : 0;\n\n      SubClusterState state \u003d SubClusterState.fromString(cstmt.getString(7));\n      long lastStartTime \u003d cstmt.getLong(8);\n      String capability \u003d cstmt.getString(9);\n\n      subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId, amRMAddress,\n          clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state,\n          lastStartTime, capability);\n\n      // Check if the output it is a valid subcluster\n      try {\n        FederationMembershipStateStoreInputValidator\n            .checkSubClusterInfo(subClusterInfo);\n      } catch (FederationStateStoreInvalidInputException e) {\n        String errMsg \u003d\n            \"SubCluster \" + subClusterId.toString() + \" does not exist\";\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Got the information about the specified SubCluster \"\n            + subClusterInfo.toString());\n      }\n    } catch (SQLException e) {\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to obtain the SubCluster information for \" + subClusterId, e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn);\n    }\n    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java"
    }
  }
}