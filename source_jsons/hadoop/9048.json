{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "appendFile",
  "functionId": "appendFile___srcArg-String__holder-String__clientMachine-String__flag-EnumSet__CreateFlag____logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 2878,
  "functionEndLine": 2919,
  "numCommitsSeen": 873,
  "timeTaken": 17446,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   LastBlockWithStatus appendFile(String srcArg, String holder,\n       String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"append\";\n     boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n     if (newBlock) {\n       requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n     }\n \n     NameNode.stateChangeLog.debug(\n         \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n         srcArg, holder, clientMachine);\n     try {\n       boolean skipSync \u003d false;\n       LastBlockWithStatus lbs \u003d null;\n       checkOperation(OperationCategory.WRITE);\n       final FSPermissionChecker pc \u003d getPermissionChecker();\n       FSPermissionChecker.setOperationType(operationName);\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n         lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n             newBlock, logRetryCache);\n       } catch (StandbyException se) {\n         skipSync \u003d true;\n         throw se;\n       } finally {\n-        writeUnlock(operationName);\n+        writeUnlock(operationName, getLockReportInfoSupplier(srcArg));\n         // There might be transactions logged while trying to recover the lease\n         // They need to be sync\u0027ed even when an exception was thrown.\n         if (!skipSync) {\n           getEditLog().logSync();\n         }\n       }\n       logAuditEvent(true, operationName, srcArg);\n       return lbs;\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, srcArg);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LastBlockWithStatus appendFile(String srcArg, String holder,\n      String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"append\";\n    boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n    if (newBlock) {\n      requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n    }\n\n    NameNode.stateChangeLog.debug(\n        \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n        srcArg, holder, clientMachine);\n    try {\n      boolean skipSync \u003d false;\n      LastBlockWithStatus lbs \u003d null;\n      checkOperation(OperationCategory.WRITE);\n      final FSPermissionChecker pc \u003d getPermissionChecker();\n      FSPermissionChecker.setOperationType(operationName);\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n        lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n            newBlock, logRetryCache);\n      } catch (StandbyException se) {\n        skipSync \u003d true;\n        throw se;\n      } finally {\n        writeUnlock(operationName, getLockReportInfoSupplier(srcArg));\n        // There might be transactions logged while trying to recover the lease\n        // They need to be sync\u0027ed even when an exception was thrown.\n        if (!skipSync) {\n          getEditLog().logSync();\n        }\n      }\n      logAuditEvent(true, operationName, srcArg);\n      return lbs;\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, srcArg);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   LastBlockWithStatus appendFile(String srcArg, String holder,\n       String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"append\";\n     boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n     if (newBlock) {\n       requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n     }\n \n     NameNode.stateChangeLog.debug(\n         \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n         srcArg, holder, clientMachine);\n     try {\n       boolean skipSync \u003d false;\n       LastBlockWithStatus lbs \u003d null;\n       checkOperation(OperationCategory.WRITE);\n       final FSPermissionChecker pc \u003d getPermissionChecker();\n+      FSPermissionChecker.setOperationType(operationName);\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n         lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n             newBlock, logRetryCache);\n       } catch (StandbyException se) {\n         skipSync \u003d true;\n         throw se;\n       } finally {\n         writeUnlock(operationName);\n         // There might be transactions logged while trying to recover the lease\n         // They need to be sync\u0027ed even when an exception was thrown.\n         if (!skipSync) {\n           getEditLog().logSync();\n         }\n       }\n       logAuditEvent(true, operationName, srcArg);\n       return lbs;\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, srcArg);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LastBlockWithStatus appendFile(String srcArg, String holder,\n      String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"append\";\n    boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n    if (newBlock) {\n      requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n    }\n\n    NameNode.stateChangeLog.debug(\n        \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n        srcArg, holder, clientMachine);\n    try {\n      boolean skipSync \u003d false;\n      LastBlockWithStatus lbs \u003d null;\n      checkOperation(OperationCategory.WRITE);\n      final FSPermissionChecker pc \u003d getPermissionChecker();\n      FSPermissionChecker.setOperationType(operationName);\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n        lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n            newBlock, logRetryCache);\n      } catch (StandbyException se) {\n        skipSync \u003d true;\n        throw se;\n      } finally {\n        writeUnlock(operationName);\n        // There might be transactions logged while trying to recover the lease\n        // They need to be sync\u0027ed even when an exception was thrown.\n        if (!skipSync) {\n          getEditLog().logSync();\n        }\n      }\n      logAuditEvent(true, operationName, srcArg);\n      return lbs;\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, srcArg);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   LastBlockWithStatus appendFile(String srcArg, String holder,\n       String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n       throws IOException {\n     final String operationName \u003d \"append\";\n     boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n     if (newBlock) {\n       requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n     }\n \n     NameNode.stateChangeLog.debug(\n         \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n         srcArg, holder, clientMachine);\n     try {\n       boolean skipSync \u003d false;\n       LastBlockWithStatus lbs \u003d null;\n-      final FSPermissionChecker pc \u003d getPermissionChecker();\n       checkOperation(OperationCategory.WRITE);\n+      final FSPermissionChecker pc \u003d getPermissionChecker();\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n         lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n             newBlock, logRetryCache);\n       } catch (StandbyException se) {\n         skipSync \u003d true;\n         throw se;\n       } finally {\n         writeUnlock(operationName);\n         // There might be transactions logged while trying to recover the lease\n         // They need to be sync\u0027ed even when an exception was thrown.\n         if (!skipSync) {\n           getEditLog().logSync();\n         }\n       }\n       logAuditEvent(true, operationName, srcArg);\n       return lbs;\n     } catch (AccessControlException e) {\n       logAuditEvent(false, operationName, srcArg);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LastBlockWithStatus appendFile(String srcArg, String holder,\n      String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"append\";\n    boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n    if (newBlock) {\n      requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n    }\n\n    NameNode.stateChangeLog.debug(\n        \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n        srcArg, holder, clientMachine);\n    try {\n      boolean skipSync \u003d false;\n      LastBlockWithStatus lbs \u003d null;\n      checkOperation(OperationCategory.WRITE);\n      final FSPermissionChecker pc \u003d getPermissionChecker();\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n        lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n            newBlock, logRetryCache);\n      } catch (StandbyException se) {\n        skipSync \u003d true;\n        throw se;\n      } finally {\n        writeUnlock(operationName);\n        // There might be transactions logged while trying to recover the lease\n        // They need to be sync\u0027ed even when an exception was thrown.\n        if (!skipSync) {\n          getEditLog().logSync();\n        }\n      }\n      logAuditEvent(true, operationName, srcArg);\n      return lbs;\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, srcArg);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   LastBlockWithStatus appendFile(String srcArg, String holder,\n       String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n       throws IOException {\n+    final String operationName \u003d \"append\";\n     boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n     if (newBlock) {\n       requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n     }\n \n     NameNode.stateChangeLog.debug(\n         \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n         srcArg, holder, clientMachine);\n     try {\n       boolean skipSync \u003d false;\n       LastBlockWithStatus lbs \u003d null;\n       final FSPermissionChecker pc \u003d getPermissionChecker();\n       checkOperation(OperationCategory.WRITE);\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n         lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n             newBlock, logRetryCache);\n       } catch (StandbyException se) {\n         skipSync \u003d true;\n         throw se;\n       } finally {\n-        writeUnlock();\n+        writeUnlock(operationName);\n         // There might be transactions logged while trying to recover the lease\n         // They need to be sync\u0027ed even when an exception was thrown.\n         if (!skipSync) {\n           getEditLog().logSync();\n         }\n       }\n-      logAuditEvent(true, \"append\", srcArg);\n+      logAuditEvent(true, operationName, srcArg);\n       return lbs;\n     } catch (AccessControlException e) {\n-      logAuditEvent(false, \"append\", srcArg);\n+      logAuditEvent(false, operationName, srcArg);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  LastBlockWithStatus appendFile(String srcArg, String holder,\n      String clientMachine, EnumSet\u003cCreateFlag\u003e flag, boolean logRetryCache)\n      throws IOException {\n    final String operationName \u003d \"append\";\n    boolean newBlock \u003d flag.contains(CreateFlag.NEW_BLOCK);\n    if (newBlock) {\n      requireEffectiveLayoutVersionForFeature(Feature.APPEND_NEW_BLOCK);\n    }\n\n    NameNode.stateChangeLog.debug(\n        \"DIR* NameSystem.appendFile: src\u003d{}, holder\u003d{}, clientMachine\u003d{}\",\n        srcArg, holder, clientMachine);\n    try {\n      boolean skipSync \u003d false;\n      LastBlockWithStatus lbs \u003d null;\n      final FSPermissionChecker pc \u003d getPermissionChecker();\n      checkOperation(OperationCategory.WRITE);\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot append to file\" + srcArg);\n        lbs \u003d FSDirAppendOp.appendFile(this, srcArg, pc, holder, clientMachine,\n            newBlock, logRetryCache);\n      } catch (StandbyException se) {\n        skipSync \u003d true;\n        throw se;\n      } finally {\n        writeUnlock(operationName);\n        // There might be transactions logged while trying to recover the lease\n        // They need to be sync\u0027ed even when an exception was thrown.\n        if (!skipSync) {\n          getEditLog().logSync();\n        }\n      }\n      logAuditEvent(true, operationName, srcArg);\n      return lbs;\n    } catch (AccessControlException e) {\n      logAuditEvent(false, operationName, srcArg);\n      throw e;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}