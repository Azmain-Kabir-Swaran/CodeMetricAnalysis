{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogsCLI.java",
  "functionName": "printAMContainerLogs",
  "functionId": "printAMContainerLogs___conf-Configuration__request-ContainerLogsRequest__amContainers-List__String____logCliHelper-LogCLIHelpers__useRegex-boolean__ignoreSizeLimit-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
  "functionStartLine": 632,
  "functionEndLine": 749,
  "numCommitsSeen": 140,
  "timeTaken": 6529,
  "changeHistory": [
    "b3a052d199ff71da042029f27979a5323d3a6981",
    "ec2ae3060a807c8754826af2135a68c08b2e4f13",
    "e605d47df05619c6b1c18aca59f709899498da75",
    "3818393297c7b337e380e8111a55f2ac4745cb83",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "e14ee0d3b55816bed1d27a8caf78001985119e3c",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "ef1757790d89cc72f88f5330761b1c8901c59e94",
    "a77d628339afaf2f5a085c73fd81a805b18348c9"
  ],
  "changeHistoryShort": {
    "b3a052d199ff71da042029f27979a5323d3a6981": "Ybodychange",
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": "Ymultichange(Yparameterchange,Ybodychange)",
    "e605d47df05619c6b1c18aca59f709899498da75": "Ymultichange(Yparameterchange,Ybodychange)",
    "3818393297c7b337e380e8111a55f2ac4745cb83": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ybodychange",
    "e14ee0d3b55816bed1d27a8caf78001985119e3c": "Ybodychange",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "ef1757790d89cc72f88f5330761b1c8901c59e94": "Ymultichange(Yparameterchange,Ybodychange)",
    "a77d628339afaf2f5a085c73fd81a805b18348c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3a052d199ff71da042029f27979a5323d3a6981": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9044. LogsCLI should contact ATSv2 for -am option. Contributed by Rohith Sharma K S\n",
      "commitDate": "28/11/18 12:46 AM",
      "commitName": "b3a052d199ff71da042029f27979a5323d3a6981",
      "commitAuthor": "Suma Shivaprasad",
      "commitDateOld": "16/11/18 4:28 AM",
      "commitNameOld": "ee3355be3cd1cd956296a1b79b264177ff139ce6",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,103 +1,118 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n       LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n       throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     StringBuilder errorMessage \u003d new StringBuilder();\n     // We will call RM webservice to get all AppAttempts information.\n     // If we get nothing, we will try to call AHS webservice to get AppAttempts\n     // which includes nodeAddress for the AM Containers.\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n           if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n             amRequest.setNodeHttpAddress(httpAddress);\n           }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage.append(ex.getMessage() + \"\\n\");\n       if (request.isAppFinished()) {\n         if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n           errorMessage.append(\"Please enable the timeline service \"\n               + \"and make sure the timeline server is running.\");\n         } else {\n           try {\n-            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n-            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n-              getAMContainerLists \u003d true;\n-              for (JSONObject amContainer : amContainersList) {\n-                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n-                    request);\n-                amRequest.setContainerId(\n-                    amContainer.getString(\"amContainerId\"));\n-                requests.add(amRequest);\n+            if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\n+              try {\n+                amContainersList \u003d\n+                    getAMContainerInfoFromTimelineReader(conf, appId);\n+                getAMContainerLists \u003d\n+                    createContainerLogsRequestForMasterContainer(requests,\n+                        request, amContainersList,\n+                        AppAttemptMetricsConstants.MASTER_CONTAINER_INFO);\n+              } catch (Exception e) {\n+                System.err.println(\n+                    \"Unable to get AM container informations from \"\n+                        + \"TimelineReader for the application:\" + appId);\n+                if (YarnConfiguration.timelineServiceV1Enabled(conf)\n+                    || YarnConfiguration.timelineServiceV15Enabled(conf)) {\n+                  getAMContainerLists \u003d\n+                      getAMContainerInfoForAHSWebService(conf, appId, requests,\n+                          request);\n+                } else {\n+                  throw e;\n+                }\n               }\n+            } else {\n+              getAMContainerLists \u003d\n+                  getAMContainerInfoForAHSWebService(conf, appId, requests,\n+                      request);\n             }\n           } catch (Exception e) {\n             errorMessage.append(e.getMessage());\n           }\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       System.err.println(\"Can not get AMContainers logs for \"\n           + \"the application:\" + appId + \" with the appOwner:\"\n           + request.getAppOwner());\n       return -1;\n     }\n \n     List\u003cContainerLogsRequest\u003e candidates \u003d new ArrayList\u003c\u003e();\n     if (amContainers.contains(\"ALL\")) {\n       candidates.addAll(requests);\n       outStream.println();\n       outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           candidates.add(requests.get(requests.size() - 1));\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             candidates.add(requests.get(amContainerId - 1));\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n     Map\u003cString, ContainerLogsRequest\u003e newOptions \u003d new HashMap\u003c\u003e();\n     if (request.isAppFinished()) {\n       newOptions \u003d getMatchedLogTypesForFinishedApp(candidates,\n           logCliHelper, useRegex, ignoreSizeLimit);\n     } else {\n       newOptions \u003d getMatchedLogTypesForRunningApp(candidates, useRegex,\n           ignoreSizeLimit);\n     }\n     for (Entry\u003cString, ContainerLogsRequest\u003e amRequest\n         : newOptions.entrySet()) {\n       outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,\n           useRegex, ignoreSizeLimit);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n      throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    StringBuilder errorMessage \u003d new StringBuilder();\n    // We will call RM webservice to get all AppAttempts information.\n    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n    // which includes nodeAddress for the AM Containers.\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage.append(ex.getMessage() + \"\\n\");\n      if (request.isAppFinished()) {\n        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n          errorMessage.append(\"Please enable the timeline service \"\n              + \"and make sure the timeline server is running.\");\n        } else {\n          try {\n            if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\n              try {\n                amContainersList \u003d\n                    getAMContainerInfoFromTimelineReader(conf, appId);\n                getAMContainerLists \u003d\n                    createContainerLogsRequestForMasterContainer(requests,\n                        request, amContainersList,\n                        AppAttemptMetricsConstants.MASTER_CONTAINER_INFO);\n              } catch (Exception e) {\n                System.err.println(\n                    \"Unable to get AM container informations from \"\n                        + \"TimelineReader for the application:\" + appId);\n                if (YarnConfiguration.timelineServiceV1Enabled(conf)\n                    || YarnConfiguration.timelineServiceV15Enabled(conf)) {\n                  getAMContainerLists \u003d\n                      getAMContainerInfoForAHSWebService(conf, appId, requests,\n                          request);\n                } else {\n                  throw e;\n                }\n              }\n            } else {\n              getAMContainerLists \u003d\n                  getAMContainerInfoForAHSWebService(conf, appId, requests,\n                      request);\n            }\n          } catch (Exception e) {\n            errorMessage.append(e.getMessage());\n          }\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      System.err.println(\"Can not get AMContainers logs for \"\n          + \"the application:\" + appId + \" with the appOwner:\"\n          + request.getAppOwner());\n      return -1;\n    }\n\n    List\u003cContainerLogsRequest\u003e candidates \u003d new ArrayList\u003c\u003e();\n    if (amContainers.contains(\"ALL\")) {\n      candidates.addAll(requests);\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          candidates.add(requests.get(requests.size() - 1));\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            candidates.add(requests.get(amContainerId - 1));\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    Map\u003cString, ContainerLogsRequest\u003e newOptions \u003d new HashMap\u003c\u003e();\n    if (request.isAppFinished()) {\n      newOptions \u003d getMatchedLogTypesForFinishedApp(candidates,\n          logCliHelper, useRegex, ignoreSizeLimit);\n    } else {\n      newOptions \u003d getMatchedLogTypesForRunningApp(candidates, useRegex,\n          ignoreSizeLimit);\n    }\n    for (Entry\u003cString, ContainerLogsRequest\u003e amRequest\n        : newOptions.entrySet()) {\n      outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,\n          useRegex, ignoreSizeLimit);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "ec2ae3060a807c8754826af2135a68c08b2e4f13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
      "commitDate": "29/09/17 4:42 PM",
      "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,103 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n-      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {\n+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n+      throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     StringBuilder errorMessage \u003d new StringBuilder();\n     // We will call RM webservice to get all AppAttempts information.\n     // If we get nothing, we will try to call AHS webservice to get AppAttempts\n     // which includes nodeAddress for the AM Containers.\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n           if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n             amRequest.setNodeHttpAddress(httpAddress);\n           }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage.append(ex.getMessage() + \"\\n\");\n       if (request.isAppFinished()) {\n         if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n           errorMessage.append(\"Please enable the timeline service \"\n               + \"and make sure the timeline server is running.\");\n         } else {\n           try {\n             amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n             if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n               getAMContainerLists \u003d true;\n               for (JSONObject amContainer : amContainersList) {\n                 ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                     request);\n                 amRequest.setContainerId(\n                     amContainer.getString(\"amContainerId\"));\n                 requests.add(amRequest);\n               }\n             }\n           } catch (Exception e) {\n             errorMessage.append(e.getMessage());\n           }\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       System.err.println(\"Can not get AMContainers logs for \"\n           + \"the application:\" + appId + \" with the appOwner:\"\n           + request.getAppOwner());\n       return -1;\n     }\n \n+    List\u003cContainerLogsRequest\u003e candidates \u003d new ArrayList\u003c\u003e();\n     if (amContainers.contains(\"ALL\")) {\n-      for (ContainerLogsRequest amRequest : requests) {\n-        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);\n-      }\n+      candidates.addAll(requests);\n       outStream.println();\n       outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n-          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n-              logCliHelper, useRegex);\n+          candidates.add(requests.get(requests.size() - 1));\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n-            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n-                logCliHelper, useRegex);\n+            candidates.add(requests.get(amContainerId - 1));\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n+    Map\u003cString, ContainerLogsRequest\u003e newOptions \u003d new HashMap\u003c\u003e();\n+    if (request.isAppFinished()) {\n+      newOptions \u003d getMatchedLogTypesForFinishedApp(candidates,\n+          logCliHelper, useRegex, ignoreSizeLimit);\n+    } else {\n+      newOptions \u003d getMatchedLogTypesForRunningApp(candidates, useRegex,\n+          ignoreSizeLimit);\n+    }\n+    for (Entry\u003cString, ContainerLogsRequest\u003e amRequest\n+        : newOptions.entrySet()) {\n+      outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,\n+          useRegex, ignoreSizeLimit);\n+    }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n      throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    StringBuilder errorMessage \u003d new StringBuilder();\n    // We will call RM webservice to get all AppAttempts information.\n    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n    // which includes nodeAddress for the AM Containers.\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage.append(ex.getMessage() + \"\\n\");\n      if (request.isAppFinished()) {\n        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n          errorMessage.append(\"Please enable the timeline service \"\n              + \"and make sure the timeline server is running.\");\n        } else {\n          try {\n            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n              getAMContainerLists \u003d true;\n              for (JSONObject amContainer : amContainersList) {\n                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                    request);\n                amRequest.setContainerId(\n                    amContainer.getString(\"amContainerId\"));\n                requests.add(amRequest);\n              }\n            }\n          } catch (Exception e) {\n            errorMessage.append(e.getMessage());\n          }\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      System.err.println(\"Can not get AMContainers logs for \"\n          + \"the application:\" + appId + \" with the appOwner:\"\n          + request.getAppOwner());\n      return -1;\n    }\n\n    List\u003cContainerLogsRequest\u003e candidates \u003d new ArrayList\u003c\u003e();\n    if (amContainers.contains(\"ALL\")) {\n      candidates.addAll(requests);\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          candidates.add(requests.get(requests.size() - 1));\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            candidates.add(requests.get(amContainerId - 1));\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    Map\u003cString, ContainerLogsRequest\u003e newOptions \u003d new HashMap\u003c\u003e();\n    if (request.isAppFinished()) {\n      newOptions \u003d getMatchedLogTypesForFinishedApp(candidates,\n          logCliHelper, useRegex, ignoreSizeLimit);\n    } else {\n      newOptions \u003d getMatchedLogTypesForRunningApp(candidates, useRegex,\n          ignoreSizeLimit);\n    }\n    for (Entry\u003cString, ContainerLogsRequest\u003e amRequest\n        : newOptions.entrySet()) {\n      outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,\n          useRegex, ignoreSizeLimit);\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logCliHelper-LogCLIHelpers, useRegex-boolean]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logCliHelper-LogCLIHelpers, useRegex-boolean, ignoreSizeLimit-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6509. Add a size threshold beyond which yarn logs will require a force option. (Xuan Gong via wangda)\n\nChange-Id: I755fe903337d4ff9ec35dae5b9cce638794e1d0f\n",
          "commitDate": "29/09/17 4:42 PM",
          "commitName": "ec2ae3060a807c8754826af2135a68c08b2e4f13",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/09/17 3:33 PM",
          "commitNameOld": "1a84c24b0cf6674fa755403971fa57d8e412b320",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 103,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,103 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n-      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {\n+      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n+      throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     StringBuilder errorMessage \u003d new StringBuilder();\n     // We will call RM webservice to get all AppAttempts information.\n     // If we get nothing, we will try to call AHS webservice to get AppAttempts\n     // which includes nodeAddress for the AM Containers.\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n           if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n             amRequest.setNodeHttpAddress(httpAddress);\n           }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage.append(ex.getMessage() + \"\\n\");\n       if (request.isAppFinished()) {\n         if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n           errorMessage.append(\"Please enable the timeline service \"\n               + \"and make sure the timeline server is running.\");\n         } else {\n           try {\n             amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n             if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n               getAMContainerLists \u003d true;\n               for (JSONObject amContainer : amContainersList) {\n                 ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                     request);\n                 amRequest.setContainerId(\n                     amContainer.getString(\"amContainerId\"));\n                 requests.add(amRequest);\n               }\n             }\n           } catch (Exception e) {\n             errorMessage.append(e.getMessage());\n           }\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       System.err.println(\"Can not get AMContainers logs for \"\n           + \"the application:\" + appId + \" with the appOwner:\"\n           + request.getAppOwner());\n       return -1;\n     }\n \n+    List\u003cContainerLogsRequest\u003e candidates \u003d new ArrayList\u003c\u003e();\n     if (amContainers.contains(\"ALL\")) {\n-      for (ContainerLogsRequest amRequest : requests) {\n-        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);\n-      }\n+      candidates.addAll(requests);\n       outStream.println();\n       outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n-          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n-              logCliHelper, useRegex);\n+          candidates.add(requests.get(requests.size() - 1));\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n-            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n-                logCliHelper, useRegex);\n+            candidates.add(requests.get(amContainerId - 1));\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n+    Map\u003cString, ContainerLogsRequest\u003e newOptions \u003d new HashMap\u003c\u003e();\n+    if (request.isAppFinished()) {\n+      newOptions \u003d getMatchedLogTypesForFinishedApp(candidates,\n+          logCliHelper, useRegex, ignoreSizeLimit);\n+    } else {\n+      newOptions \u003d getMatchedLogTypesForRunningApp(candidates, useRegex,\n+          ignoreSizeLimit);\n+    }\n+    for (Entry\u003cString, ContainerLogsRequest\u003e amRequest\n+        : newOptions.entrySet()) {\n+      outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,\n+          useRegex, ignoreSizeLimit);\n+    }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n      throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    StringBuilder errorMessage \u003d new StringBuilder();\n    // We will call RM webservice to get all AppAttempts information.\n    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n    // which includes nodeAddress for the AM Containers.\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage.append(ex.getMessage() + \"\\n\");\n      if (request.isAppFinished()) {\n        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n          errorMessage.append(\"Please enable the timeline service \"\n              + \"and make sure the timeline server is running.\");\n        } else {\n          try {\n            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n              getAMContainerLists \u003d true;\n              for (JSONObject amContainer : amContainersList) {\n                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                    request);\n                amRequest.setContainerId(\n                    amContainer.getString(\"amContainerId\"));\n                requests.add(amRequest);\n              }\n            }\n          } catch (Exception e) {\n            errorMessage.append(e.getMessage());\n          }\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      System.err.println(\"Can not get AMContainers logs for \"\n          + \"the application:\" + appId + \" with the appOwner:\"\n          + request.getAppOwner());\n      return -1;\n    }\n\n    List\u003cContainerLogsRequest\u003e candidates \u003d new ArrayList\u003c\u003e();\n    if (amContainers.contains(\"ALL\")) {\n      candidates.addAll(requests);\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          candidates.add(requests.get(requests.size() - 1));\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            candidates.add(requests.get(amContainerId - 1));\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    Map\u003cString, ContainerLogsRequest\u003e newOptions \u003d new HashMap\u003c\u003e();\n    if (request.isAppFinished()) {\n      newOptions \u003d getMatchedLogTypesForFinishedApp(candidates,\n          logCliHelper, useRegex, ignoreSizeLimit);\n    } else {\n      newOptions \u003d getMatchedLogTypesForRunningApp(candidates, useRegex,\n          ignoreSizeLimit);\n    }\n    for (Entry\u003cString, ContainerLogsRequest\u003e amRequest\n        : newOptions.entrySet()) {\n      outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper,\n          useRegex, ignoreSizeLimit);\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "e605d47df05619c6b1c18aca59f709899498da75": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
      "commitDate": "05/08/16 10:55 AM",
      "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,92 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n-      LogCLIHelpers logCliHelper) throws Exception {\n+      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     StringBuilder errorMessage \u003d new StringBuilder();\n     // We will call RM webservice to get all AppAttempts information.\n     // If we get nothing, we will try to call AHS webservice to get AppAttempts\n     // which includes nodeAddress for the AM Containers.\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n           if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n             amRequest.setNodeHttpAddress(httpAddress);\n           }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage.append(ex.getMessage() + \"\\n\");\n       if (request.isAppFinished()) {\n         if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n           errorMessage.append(\"Please enable the timeline service \"\n               + \"and make sure the timeline server is running.\");\n         } else {\n           try {\n             amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n             if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n               getAMContainerLists \u003d true;\n               for (JSONObject amContainer : amContainersList) {\n                 ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                     request);\n                 amRequest.setContainerId(\n                     amContainer.getString(\"amContainerId\"));\n                 requests.add(amRequest);\n               }\n             }\n           } catch (Exception e) {\n             errorMessage.append(e.getMessage());\n           }\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       System.err.println(\"Can not get AMContainers logs for \"\n           + \"the application:\" + appId + \" with the appOwner:\"\n           + request.getAppOwner());\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n-        outputAMContainerLogs(amRequest, conf, logCliHelper);\n+        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);\n       }\n       outStream.println();\n       outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n-              logCliHelper);\n+              logCliHelper, useRegex);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n-                logCliHelper);\n+                logCliHelper, useRegex);\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    StringBuilder errorMessage \u003d new StringBuilder();\n    // We will call RM webservice to get all AppAttempts information.\n    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n    // which includes nodeAddress for the AM Containers.\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage.append(ex.getMessage() + \"\\n\");\n      if (request.isAppFinished()) {\n        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n          errorMessage.append(\"Please enable the timeline service \"\n              + \"and make sure the timeline server is running.\");\n        } else {\n          try {\n            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n              getAMContainerLists \u003d true;\n              for (JSONObject amContainer : amContainersList) {\n                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                    request);\n                amRequest.setContainerId(\n                    amContainer.getString(\"amContainerId\"));\n                requests.add(amRequest);\n              }\n            }\n          } catch (Exception e) {\n            errorMessage.append(e.getMessage());\n          }\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      System.err.println(\"Can not get AMContainers logs for \"\n          + \"the application:\" + appId + \" with the appOwner:\"\n          + request.getAppOwner());\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);\n      }\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper, useRegex);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper, useRegex);\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logCliHelper-LogCLIHelpers]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logCliHelper-LogCLIHelpers, useRegex-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5470. Differentiate exactly match with regex in yarn log CLI. Contributed by Xuan Gong.\n",
          "commitDate": "05/08/16 10:55 AM",
          "commitName": "e605d47df05619c6b1c18aca59f709899498da75",
          "commitAuthor": "Junping Du",
          "commitDateOld": "02/08/16 10:41 AM",
          "commitNameOld": "3818393297c7b337e380e8111a55f2ac4745cb83",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 3.01,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,92 +1,92 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n-      LogCLIHelpers logCliHelper) throws Exception {\n+      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     StringBuilder errorMessage \u003d new StringBuilder();\n     // We will call RM webservice to get all AppAttempts information.\n     // If we get nothing, we will try to call AHS webservice to get AppAttempts\n     // which includes nodeAddress for the AM Containers.\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n           if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n             amRequest.setNodeHttpAddress(httpAddress);\n           }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage.append(ex.getMessage() + \"\\n\");\n       if (request.isAppFinished()) {\n         if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n             YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n           errorMessage.append(\"Please enable the timeline service \"\n               + \"and make sure the timeline server is running.\");\n         } else {\n           try {\n             amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n             if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n               getAMContainerLists \u003d true;\n               for (JSONObject amContainer : amContainersList) {\n                 ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                     request);\n                 amRequest.setContainerId(\n                     amContainer.getString(\"amContainerId\"));\n                 requests.add(amRequest);\n               }\n             }\n           } catch (Exception e) {\n             errorMessage.append(e.getMessage());\n           }\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       System.err.println(\"Can not get AMContainers logs for \"\n           + \"the application:\" + appId + \" with the appOwner:\"\n           + request.getAppOwner());\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n-        outputAMContainerLogs(amRequest, conf, logCliHelper);\n+        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);\n       }\n       outStream.println();\n       outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n-              logCliHelper);\n+              logCliHelper, useRegex);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n-                logCliHelper);\n+                logCliHelper, useRegex);\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper, boolean useRegex) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    StringBuilder errorMessage \u003d new StringBuilder();\n    // We will call RM webservice to get all AppAttempts information.\n    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n    // which includes nodeAddress for the AM Containers.\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage.append(ex.getMessage() + \"\\n\");\n      if (request.isAppFinished()) {\n        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n          errorMessage.append(\"Please enable the timeline service \"\n              + \"and make sure the timeline server is running.\");\n        } else {\n          try {\n            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n              getAMContainerLists \u003d true;\n              for (JSONObject amContainer : amContainersList) {\n                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                    request);\n                amRequest.setContainerId(\n                    amContainer.getString(\"amContainerId\"));\n                requests.add(amRequest);\n              }\n            }\n          } catch (Exception e) {\n            errorMessage.append(e.getMessage());\n          }\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      System.err.println(\"Can not get AMContainers logs for \"\n          + \"the application:\" + appId + \" with the appOwner:\"\n          + request.getAppOwner());\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper, useRegex);\n      }\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper, useRegex);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper, useRegex);\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "3818393297c7b337e380e8111a55f2ac4745cb83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5226. Remove AHS enable check from LogsCLI#fetchAMContainerLogs. Contributed by Xuan Gong.\n",
      "commitDate": "02/08/16 10:41 AM",
      "commitName": "3818393297c7b337e380e8111a55f2ac4745cb83",
      "commitAuthor": "Junping Du",
      "commitDateOld": "15/07/16 9:23 AM",
      "commitNameOld": "7e5355c14e55fd6540f7f070df4b78fa94a81618",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,92 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n       LogCLIHelpers logCliHelper) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n-    String errorMessage \u003d \"\";\n+    StringBuilder errorMessage \u003d new StringBuilder();\n+    // We will call RM webservice to get all AppAttempts information.\n+    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n+    // which includes nodeAddress for the AM Containers.\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n           if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n             amRequest.setNodeHttpAddress(httpAddress);\n           }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n-      errorMessage \u003d ex.getMessage();\n+      errorMessage.append(ex.getMessage() + \"\\n\");\n       if (request.isAppFinished()) {\n-        try {\n-          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n-          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n-            getAMContainerLists \u003d true;\n-            for (JSONObject amContainer : amContainersList) {\n-              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n-                  request);\n-              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n-              requests.add(amRequest);\n+        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n+            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n+          errorMessage.append(\"Please enable the timeline service \"\n+              + \"and make sure the timeline server is running.\");\n+        } else {\n+          try {\n+            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n+            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n+              getAMContainerLists \u003d true;\n+              for (JSONObject amContainer : amContainersList) {\n+                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n+                    request);\n+                amRequest.setContainerId(\n+                    amContainer.getString(\"amContainerId\"));\n+                requests.add(amRequest);\n+              }\n             }\n+          } catch (Exception e) {\n+            errorMessage.append(e.getMessage());\n           }\n-        } catch (Exception e) {\n-          errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n+      System.err.println(\"Can not get AMContainers logs for \"\n+          + \"the application:\" + appId + \" with the appOwner:\"\n+          + request.getAppOwner());\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n         outputAMContainerLogs(amRequest, conf, logCliHelper);\n       }\n       outStream.println();\n       outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n               logCliHelper);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                 logCliHelper);\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    StringBuilder errorMessage \u003d new StringBuilder();\n    // We will call RM webservice to get all AppAttempts information.\n    // If we get nothing, we will try to call AHS webservice to get AppAttempts\n    // which includes nodeAddress for the AM Containers.\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage.append(ex.getMessage() + \"\\n\");\n      if (request.isAppFinished()) {\n        if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n            YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n          errorMessage.append(\"Please enable the timeline service \"\n              + \"and make sure the timeline server is running.\");\n        } else {\n          try {\n            amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n            if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n              getAMContainerLists \u003d true;\n              for (JSONObject amContainer : amContainersList) {\n                ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                    request);\n                amRequest.setContainerId(\n                    amContainer.getString(\"amContainerId\"));\n                requests.add(amRequest);\n              }\n            }\n          } catch (Exception e) {\n            errorMessage.append(e.getMessage());\n          }\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      System.err.println(\"Can not get AMContainers logs for \"\n          + \"the application:\" + appId + \" with the appOwner:\"\n          + request.getAppOwner());\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper);\n      }\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper);\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/07/16 8:29 AM",
      "commitNameOld": "7705812c7e3a9f3f774130e25443fda249c08c9c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,79 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n       LogCLIHelpers logCliHelper) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     String errorMessage \u003d \"\";\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n-          amRequest.setNodeHttpAddress(\n-              amContainer.getString(\"nodeHttpAddress\"));\n+          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n+          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n+            amRequest.setNodeHttpAddress(httpAddress);\n+          }\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage \u003d ex.getMessage();\n       if (request.isAppFinished()) {\n         try {\n           amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n           if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n             getAMContainerLists \u003d true;\n             for (JSONObject amContainer : amContainersList) {\n               ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                   request);\n               amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n               requests.add(amRequest);\n             }\n           }\n         } catch (Exception e) {\n           errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n         outputAMContainerLogs(amRequest, conf, logCliHelper);\n       }\n-      System.out.println();      \n-      System.out.println(\"Specified ALL for -am option. \"\n+      outStream.println();\n+      outStream.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n               logCliHelper);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                 logCliHelper);\n           } else {\n             System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                 + \" (%s) exceeds the number of AM containers (%s).\",\n                 amContainerId, requests.size()));\n             return -1;\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          String httpAddress \u003d amContainer.getString(\"nodeHttpAddress\");\n          if (httpAddress !\u003d null \u0026\u0026 !httpAddress.isEmpty()) {\n            amRequest.setNodeHttpAddress(httpAddress);\n          }\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (request.isAppFinished()) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                  request);\n              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(amRequest);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper);\n      }\n      outStream.println();\n      outStream.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper);\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "e14ee0d3b55816bed1d27a8caf78001985119e3c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5083. YARN CLI for AM logs does not give any error message if entered invalid am value. Contributed by Jian He.\n",
      "commitDate": "16/06/16 8:55 AM",
      "commitName": "e14ee0d3b55816bed1d27a8caf78001985119e3c",
      "commitAuthor": "Junping Du",
      "commitDateOld": "15/06/16 12:12 AM",
      "commitNameOld": "25064fb2fb79751cedbb8019900d811e07549ecf",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 1.36,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,77 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n       LogCLIHelpers logCliHelper) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     String errorMessage \u003d \"\";\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           amRequest.setNodeHttpAddress(\n               amContainer.getString(\"nodeHttpAddress\"));\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage \u003d ex.getMessage();\n       if (request.isAppFinished()) {\n         try {\n           amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n           if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n             getAMContainerLists \u003d true;\n             for (JSONObject amContainer : amContainersList) {\n               ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                   request);\n               amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n               requests.add(amRequest);\n             }\n           }\n         } catch (Exception e) {\n           errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n         outputAMContainerLogs(amRequest, conf, logCliHelper);\n       }\n       System.out.println();      \n       System.out.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n               logCliHelper);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                 logCliHelper);\n+          } else {\n+            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n+                + \" (%s) exceeds the number of AM containers (%s).\",\n+                amContainerId, requests.size()));\n+            return -1;\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          amRequest.setNodeHttpAddress(\n              amContainer.getString(\"nodeHttpAddress\"));\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (request.isAppFinished()) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                  request);\n              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(amRequest);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper);\n      }\n      System.out.println();      \n      System.out.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper);\n          } else {\n            System.err.println(String.format(\"ERROR: Specified AM containerId\"\n                + \" (%s) exceeds the number of AM containers (%s).\",\n                amContainerId, requests.size()));\n            return -1;\n          }\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
      "extendedDetails": {}
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,72 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n-      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)\n-      throws Exception {\n+      LogCLIHelpers logCliHelper) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     String errorMessage \u003d \"\";\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           amRequest.setNodeHttpAddress(\n               amContainer.getString(\"nodeHttpAddress\"));\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage \u003d ex.getMessage();\n       if (request.isAppFinished()) {\n         try {\n           amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n           if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n             getAMContainerLists \u003d true;\n             for (JSONObject amContainer : amContainersList) {\n               ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                   request);\n               amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n               requests.add(amRequest);\n             }\n           }\n         } catch (Exception e) {\n           errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n-        outputAMContainerLogs(amRequest, conf, logFiles,\n-            logCliHelper, localDir);\n+        outputAMContainerLogs(amRequest, conf, logCliHelper);\n       }\n       System.out.println();      \n       System.out.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n-              logFiles, logCliHelper, localDir);\n+              logCliHelper);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n-                logFiles, logCliHelper, localDir);\n+                logCliHelper);\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          amRequest.setNodeHttpAddress(\n              amContainer.getString(\"nodeHttpAddress\"));\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (request.isAppFinished()) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                  request);\n              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(amRequest);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper);\n      }\n      System.out.println();      \n      System.out.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper);\n          }\n        }\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logFiles-String[], logCliHelper-LogCLIHelpers, localDir-String]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logCliHelper-LogCLIHelpers]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,72 @@\n   private int printAMContainerLogs(Configuration conf,\n       ContainerLogsRequest request, List\u003cString\u003e amContainers,\n-      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)\n-      throws Exception {\n+      LogCLIHelpers logCliHelper) throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n     List\u003cContainerLogsRequest\u003e requests \u003d\n         new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n     String appId \u003d request.getAppId().toString();\n     String errorMessage \u003d \"\";\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n           ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n           amRequest.setContainerId(amContainer.getString(\"containerId\"));\n           amRequest.setNodeHttpAddress(\n               amContainer.getString(\"nodeHttpAddress\"));\n           amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n           requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage \u003d ex.getMessage();\n       if (request.isAppFinished()) {\n         try {\n           amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n           if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n             getAMContainerLists \u003d true;\n             for (JSONObject amContainer : amContainersList) {\n               ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                   request);\n               amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n               requests.add(amRequest);\n             }\n           }\n         } catch (Exception e) {\n           errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n       for (ContainerLogsRequest amRequest : requests) {\n-        outputAMContainerLogs(amRequest, conf, logFiles,\n-            logCliHelper, localDir);\n+        outputAMContainerLogs(amRequest, conf, logCliHelper);\n       }\n       System.out.println();      \n       System.out.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n           outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n-              logFiles, logCliHelper, localDir);\n+              logCliHelper);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n             outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n-                logFiles, logCliHelper, localDir);\n+                logCliHelper);\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      LogCLIHelpers logCliHelper) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          amRequest.setNodeHttpAddress(\n              amContainer.getString(\"nodeHttpAddress\"));\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (request.isAppFinished()) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                  request);\n              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(amRequest);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logCliHelper);\n      }\n      System.out.println();      \n      System.out.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logCliHelper);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logCliHelper);\n          }\n        }\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "ef1757790d89cc72f88f5330761b1c8901c59e94": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
      "commitDate": "18/05/16 10:14 AM",
      "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "14/05/16 12:19 PM",
          "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,74 @@\n-  private int printAMContainerLogs(Configuration conf, String appId,\n-      List\u003cString\u003e amContainers, String[] logFiles, LogCLIHelpers logCliHelper,\n-      String appOwner, boolean applicationFinished) throws Exception {\n+  private int printAMContainerLogs(Configuration conf,\n+      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n+      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)\n+      throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n-    List\u003cAMLogsRequest\u003e requests \u003d new ArrayList\u003cAMLogsRequest\u003e();\n+    List\u003cContainerLogsRequest\u003e requests \u003d\n+        new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n+    String appId \u003d request.getAppId().toString();\n     String errorMessage \u003d \"\";\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n-          AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n-          request.setAmContainerId(amContainer.getString(\"containerId\"));\n-          request.setNodeHttpAddress(amContainer.getString(\"nodeHttpAddress\"));\n-          request.setNodeId(amContainer.getString(\"nodeId\"));\n-          requests.add(request);\n+          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n+          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n+          amRequest.setNodeHttpAddress(\n+              amContainer.getString(\"nodeHttpAddress\"));\n+          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n+          requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage \u003d ex.getMessage();\n-      if (applicationFinished) {\n+      if (request.isAppFinished()) {\n         try {\n           amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n           if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n             getAMContainerLists \u003d true;\n             for (JSONObject amContainer : amContainersList) {\n-              AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n-              request.setAmContainerId(amContainer.getString(\"amContainerId\"));\n-              requests.add(request);\n+              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n+                  request);\n+              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n+              requests.add(amRequest);\n             }\n           }\n         } catch (Exception e) {\n           errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n-      for (AMLogsRequest request : requests) {\n-        outputAMContainerLogs(request, conf, appId, logFiles, logCliHelper,\n-            appOwner);\n+      for (ContainerLogsRequest amRequest : requests) {\n+        outputAMContainerLogs(amRequest, conf, logFiles,\n+            logCliHelper, localDir);\n       }\n       System.out.println();      \n       System.out.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n-          outputAMContainerLogs(requests.get(requests.size() - 1), conf, appId,\n-              logFiles, logCliHelper, appOwner);\n+          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n+              logFiles, logCliHelper, localDir);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n-            outputAMContainerLogs(requests.get(amContainerId - 1), conf, appId,\n-                logFiles, logCliHelper, appOwner);\n+            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n+                logFiles, logCliHelper, localDir);\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)\n      throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          amRequest.setNodeHttpAddress(\n              amContainer.getString(\"nodeHttpAddress\"));\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (request.isAppFinished()) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                  request);\n              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(amRequest);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logFiles,\n            logCliHelper, localDir);\n      }\n      System.out.println();      \n      System.out.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logFiles, logCliHelper, localDir);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logFiles, logCliHelper, localDir);\n          }\n        }\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, appId-String, amContainers-List\u003cString\u003e, logFiles-String[], logCliHelper-LogCLIHelpers, appOwner-String, applicationFinished-boolean]",
            "newValue": "[conf-Configuration, request-ContainerLogsRequest, amContainers-List\u003cString\u003e, logFiles-String[], logCliHelper-LogCLIHelpers, localDir-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4913. Yarn logs should take a -out option to write to a directory. Contributed by Xuan Gong.\n",
          "commitDate": "18/05/16 10:14 AM",
          "commitName": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "14/05/16 12:19 PM",
          "commitNameOld": "7be53b65f95dae89c760cde354b42f15f5ee3b5f",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 3.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,69 +1,74 @@\n-  private int printAMContainerLogs(Configuration conf, String appId,\n-      List\u003cString\u003e amContainers, String[] logFiles, LogCLIHelpers logCliHelper,\n-      String appOwner, boolean applicationFinished) throws Exception {\n+  private int printAMContainerLogs(Configuration conf,\n+      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n+      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)\n+      throws Exception {\n     List\u003cJSONObject\u003e amContainersList \u003d null;\n-    List\u003cAMLogsRequest\u003e requests \u003d new ArrayList\u003cAMLogsRequest\u003e();\n+    List\u003cContainerLogsRequest\u003e requests \u003d\n+        new ArrayList\u003cContainerLogsRequest\u003e();\n     boolean getAMContainerLists \u003d false;\n+    String appId \u003d request.getAppId().toString();\n     String errorMessage \u003d \"\";\n     try {\n       amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n       if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n         getAMContainerLists \u003d true;\n         for (JSONObject amContainer : amContainersList) {\n-          AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n-          request.setAmContainerId(amContainer.getString(\"containerId\"));\n-          request.setNodeHttpAddress(amContainer.getString(\"nodeHttpAddress\"));\n-          request.setNodeId(amContainer.getString(\"nodeId\"));\n-          requests.add(request);\n+          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n+          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n+          amRequest.setNodeHttpAddress(\n+              amContainer.getString(\"nodeHttpAddress\"));\n+          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n+          requests.add(amRequest);\n         }\n       }\n     } catch (Exception ex) {\n       errorMessage \u003d ex.getMessage();\n-      if (applicationFinished) {\n+      if (request.isAppFinished()) {\n         try {\n           amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n           if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n             getAMContainerLists \u003d true;\n             for (JSONObject amContainer : amContainersList) {\n-              AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n-              request.setAmContainerId(amContainer.getString(\"amContainerId\"));\n-              requests.add(request);\n+              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n+                  request);\n+              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n+              requests.add(amRequest);\n             }\n           }\n         } catch (Exception e) {\n           errorMessage \u003d e.getMessage();\n         }\n       }\n     }\n \n     if (!getAMContainerLists) {\n       System.err.println(\"Unable to get AM container informations \"\n           + \"for the application:\" + appId);\n       System.err.println(errorMessage);\n       return -1;\n     }\n \n     if (amContainers.contains(\"ALL\")) {\n-      for (AMLogsRequest request : requests) {\n-        outputAMContainerLogs(request, conf, appId, logFiles, logCliHelper,\n-            appOwner);\n+      for (ContainerLogsRequest amRequest : requests) {\n+        outputAMContainerLogs(amRequest, conf, logFiles,\n+            logCliHelper, localDir);\n       }\n       System.out.println();      \n       System.out.println(\"Specified ALL for -am option. \"\n           + \"Printed logs for all am containers.\");\n     } else {\n       for (String amContainer : amContainers) {\n         int amContainerId \u003d Integer.parseInt(amContainer.trim());\n         if (amContainerId \u003d\u003d -1) {\n-          outputAMContainerLogs(requests.get(requests.size() - 1), conf, appId,\n-              logFiles, logCliHelper, appOwner);\n+          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n+              logFiles, logCliHelper, localDir);\n         } else {\n           if (amContainerId \u003c\u003d requests.size()) {\n-            outputAMContainerLogs(requests.get(amContainerId - 1), conf, appId,\n-                logFiles, logCliHelper, appOwner);\n+            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n+                logFiles, logCliHelper, localDir);\n           }\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int printAMContainerLogs(Configuration conf,\n      ContainerLogsRequest request, List\u003cString\u003e amContainers,\n      String[] logFiles, LogCLIHelpers logCliHelper, String localDir)\n      throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cContainerLogsRequest\u003e requests \u003d\n        new ArrayList\u003cContainerLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String appId \u003d request.getAppId().toString();\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(request);\n          amRequest.setContainerId(amContainer.getString(\"containerId\"));\n          amRequest.setNodeHttpAddress(\n              amContainer.getString(\"nodeHttpAddress\"));\n          amRequest.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(amRequest);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (request.isAppFinished()) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              ContainerLogsRequest amRequest \u003d new ContainerLogsRequest(\n                  request);\n              amRequest.setContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(amRequest);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (ContainerLogsRequest amRequest : requests) {\n        outputAMContainerLogs(amRequest, conf, logFiles,\n            logCliHelper, localDir);\n      }\n      System.out.println();      \n      System.out.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf,\n              logFiles, logCliHelper, localDir);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf,\n                logFiles, logCliHelper, localDir);\n          }\n        }\n      }\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "a77d628339afaf2f5a085c73fd81a805b18348c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3347. Improve YARN log command to get AMContainer logs as well as running containers logs. Contributed by Xuan Gong.\n",
      "commitDate": "13/04/15 5:29 PM",
      "commitName": "a77d628339afaf2f5a085c73fd81a805b18348c9",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,69 @@\n+  private int printAMContainerLogs(Configuration conf, String appId,\n+      List\u003cString\u003e amContainers, String[] logFiles, LogCLIHelpers logCliHelper,\n+      String appOwner, boolean applicationFinished) throws Exception {\n+    List\u003cJSONObject\u003e amContainersList \u003d null;\n+    List\u003cAMLogsRequest\u003e requests \u003d new ArrayList\u003cAMLogsRequest\u003e();\n+    boolean getAMContainerLists \u003d false;\n+    String errorMessage \u003d \"\";\n+    try {\n+      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n+      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n+        getAMContainerLists \u003d true;\n+        for (JSONObject amContainer : amContainersList) {\n+          AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n+          request.setAmContainerId(amContainer.getString(\"containerId\"));\n+          request.setNodeHttpAddress(amContainer.getString(\"nodeHttpAddress\"));\n+          request.setNodeId(amContainer.getString(\"nodeId\"));\n+          requests.add(request);\n+        }\n+      }\n+    } catch (Exception ex) {\n+      errorMessage \u003d ex.getMessage();\n+      if (applicationFinished) {\n+        try {\n+          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n+          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n+            getAMContainerLists \u003d true;\n+            for (JSONObject amContainer : amContainersList) {\n+              AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n+              request.setAmContainerId(amContainer.getString(\"amContainerId\"));\n+              requests.add(request);\n+            }\n+          }\n+        } catch (Exception e) {\n+          errorMessage \u003d e.getMessage();\n+        }\n+      }\n+    }\n+\n+    if (!getAMContainerLists) {\n+      System.err.println(\"Unable to get AM container informations \"\n+          + \"for the application:\" + appId);\n+      System.err.println(errorMessage);\n+      return -1;\n+    }\n+\n+    if (amContainers.contains(\"ALL\")) {\n+      for (AMLogsRequest request : requests) {\n+        outputAMContainerLogs(request, conf, appId, logFiles, logCliHelper,\n+          appOwner);\n+      }\n+      System.out.println();      \n+      System.out.println(\"Specified ALL for -am option. \"\n+          + \"Printed logs for all am containers.\");\n+    } else {\n+      for (String amContainer : amContainers) {\n+        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n+        if (amContainerId \u003d\u003d -1) {\n+          outputAMContainerLogs(requests.get(requests.size() - 1), conf, appId,\n+            logFiles, logCliHelper, appOwner);\n+        } else {\n+          if (amContainerId \u003c\u003d requests.size()) {\n+            outputAMContainerLogs(requests.get(amContainerId - 1), conf, appId,\n+              logFiles, logCliHelper, appOwner);\n+          }\n+        }\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int printAMContainerLogs(Configuration conf, String appId,\n      List\u003cString\u003e amContainers, String[] logFiles, LogCLIHelpers logCliHelper,\n      String appOwner, boolean applicationFinished) throws Exception {\n    List\u003cJSONObject\u003e amContainersList \u003d null;\n    List\u003cAMLogsRequest\u003e requests \u003d new ArrayList\u003cAMLogsRequest\u003e();\n    boolean getAMContainerLists \u003d false;\n    String errorMessage \u003d \"\";\n    try {\n      amContainersList \u003d getAMContainerInfoForRMWebService(conf, appId);\n      if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n        getAMContainerLists \u003d true;\n        for (JSONObject amContainer : amContainersList) {\n          AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n          request.setAmContainerId(amContainer.getString(\"containerId\"));\n          request.setNodeHttpAddress(amContainer.getString(\"nodeHttpAddress\"));\n          request.setNodeId(amContainer.getString(\"nodeId\"));\n          requests.add(request);\n        }\n      }\n    } catch (Exception ex) {\n      errorMessage \u003d ex.getMessage();\n      if (applicationFinished) {\n        try {\n          amContainersList \u003d getAMContainerInfoForAHSWebService(conf, appId);\n          if (amContainersList !\u003d null \u0026\u0026 !amContainersList.isEmpty()) {\n            getAMContainerLists \u003d true;\n            for (JSONObject amContainer : amContainersList) {\n              AMLogsRequest request \u003d new AMLogsRequest(applicationFinished);\n              request.setAmContainerId(amContainer.getString(\"amContainerId\"));\n              requests.add(request);\n            }\n          }\n        } catch (Exception e) {\n          errorMessage \u003d e.getMessage();\n        }\n      }\n    }\n\n    if (!getAMContainerLists) {\n      System.err.println(\"Unable to get AM container informations \"\n          + \"for the application:\" + appId);\n      System.err.println(errorMessage);\n      return -1;\n    }\n\n    if (amContainers.contains(\"ALL\")) {\n      for (AMLogsRequest request : requests) {\n        outputAMContainerLogs(request, conf, appId, logFiles, logCliHelper,\n          appOwner);\n      }\n      System.out.println();      \n      System.out.println(\"Specified ALL for -am option. \"\n          + \"Printed logs for all am containers.\");\n    } else {\n      for (String amContainer : amContainers) {\n        int amContainerId \u003d Integer.parseInt(amContainer.trim());\n        if (amContainerId \u003d\u003d -1) {\n          outputAMContainerLogs(requests.get(requests.size() - 1), conf, appId,\n            logFiles, logCliHelper, appOwner);\n        } else {\n          if (amContainerId \u003c\u003d requests.size()) {\n            outputAMContainerLogs(requests.get(amContainerId - 1), conf, appId,\n              logFiles, logCliHelper, appOwner);\n          }\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/LogsCLI.java"
    }
  }
}