{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMLauncher.java",
  "functionName": "getContainerMgrProxy",
  "functionId": "getContainerMgrProxy___containerId-ContainerId(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
  "functionStartLine": 159,
  "functionEndLine": 184,
  "numCommitsSeen": 72,
  "timeTaken": 8594,
  "changeHistory": [
    "9735afe967a660f356e953348cb6c34417f41055",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00",
    "b549c107825581b15fd14494099a943ff3213c6f",
    "88b82a0f6687ce103817fbb460fd30d870f717a0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "9735afe967a660f356e953348cb6c34417f41055": "Ybodychange",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ybodychange",
    "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "b549c107825581b15fd14494099a943ff3213c6f": "Ymodifierchange",
    "88b82a0f6687ce103817fbb460fd30d870f717a0": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9735afe967a660f356e953348cb6c34417f41055": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4180. AMLauncher does not retry on failures when talking to NM. (adhoot)\n",
      "commitDate": "28/09/15 4:13 PM",
      "commitName": "9735afe967a660f356e953348cb6c34417f41055",
      "commitAuthor": "Anubhav Dhoot",
      "commitDateOld": "27/05/15 4:40 PM",
      "commitNameOld": "d6e3164d4a18271299c63377326ca56e8a980830",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 123.98,
      "commitsBetweenForRepo": 779,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,26 @@\n   protected ContainerManagementProtocol getContainerMgrProxy(\n       final ContainerId containerId) {\n \n     final NodeId node \u003d masterContainer.getNodeId();\n-    final InetSocketAddress containerManagerBindAddress \u003d\n+    final InetSocketAddress containerManagerConnectAddress \u003d\n         NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n-    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n+    final YarnRPC rpc \u003d getYarnRPC();\n \n     UserGroupInformation currentUser \u003d\n         UserGroupInformation.createRemoteUser(containerId\n             .getApplicationAttemptId().toString());\n \n     String user \u003d\n         rmContext.getRMApps()\n             .get(containerId.getApplicationAttemptId().getApplicationId())\n             .getUser();\n     org.apache.hadoop.yarn.api.records.Token token \u003d\n         rmContext.getNMTokenSecretManager().createNMToken(\n             containerId.getApplicationAttemptId(), node, user);\n     currentUser.addToken(ConverterUtils.convertFromYarn(token,\n-        containerManagerBindAddress));\n+        containerManagerConnectAddress));\n \n-    return currentUser\n-        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n-\n-          @Override\n-          public ContainerManagementProtocol run() {\n-            return (ContainerManagementProtocol) rpc.getProxy(\n-                ContainerManagementProtocol.class,\n-                containerManagerBindAddress, conf);\n-          }\n-        });\n+    return NMProxy.createNMProxy(conf, ContainerManagementProtocol.class,\n+        currentUser, rpc, containerManagerConnectAddress);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManagementProtocol getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    final NodeId node \u003d masterContainer.getNodeId();\n    final InetSocketAddress containerManagerConnectAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d getYarnRPC();\n\n    UserGroupInformation currentUser \u003d\n        UserGroupInformation.createRemoteUser(containerId\n            .getApplicationAttemptId().toString());\n\n    String user \u003d\n        rmContext.getRMApps()\n            .get(containerId.getApplicationAttemptId().getApplicationId())\n            .getUser();\n    org.apache.hadoop.yarn.api.records.Token token \u003d\n        rmContext.getNMTokenSecretManager().createNMToken(\n            containerId.getApplicationAttemptId(), node, user);\n    currentUser.addToken(ConverterUtils.convertFromYarn(token,\n        containerManagerConnectAddress));\n\n    return NMProxy.createNMProxy(conf, ContainerManagementProtocol.class,\n        currentUser, rpc, containerManagerConnectAddress);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {}
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 10:47 PM",
      "commitNameOld": "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,34 @@\n   protected ContainerManagementProtocol getContainerMgrProxy(\n       final ContainerId containerId) {\n \n     final NodeId node \u003d masterContainer.getNodeId();\n     final InetSocketAddress containerManagerBindAddress \u003d\n         NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n-    UserGroupInformation currentUser \u003d UserGroupInformation\n-        .createRemoteUser(containerId.toString());\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      Token\u003cContainerTokenIdentifier\u003e token \u003d\n-          ConverterUtils.convertFromYarn(masterContainer\n-              .getContainerToken(), containerManagerBindAddress);\n-      currentUser.addToken(token);\n-    }\n-    return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n-      @Override\n-      public ContainerManagementProtocol run() {\n-        return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n-            containerManagerBindAddress, conf);\n-      }\n-    });\n+    UserGroupInformation currentUser \u003d\n+        UserGroupInformation.createRemoteUser(containerId\n+            .getApplicationAttemptId().toString());\n+\n+    String user \u003d\n+        rmContext.getRMApps()\n+            .get(containerId.getApplicationAttemptId().getApplicationId())\n+            .getUser();\n+    org.apache.hadoop.yarn.api.records.Token token \u003d\n+        rmContext.getNMTokenSecretManager().createNMToken(\n+            containerId.getApplicationAttemptId(), node, user);\n+    currentUser.addToken(ConverterUtils.convertFromYarn(token,\n+        containerManagerBindAddress));\n+\n+    return currentUser\n+        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n+\n+          @Override\n+          public ContainerManagementProtocol run() {\n+            return (ContainerManagementProtocol) rpc.getProxy(\n+                ContainerManagementProtocol.class,\n+                containerManagerBindAddress, conf);\n+          }\n+        });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManagementProtocol getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    final NodeId node \u003d masterContainer.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d\n        UserGroupInformation.createRemoteUser(containerId\n            .getApplicationAttemptId().toString());\n\n    String user \u003d\n        rmContext.getRMApps()\n            .get(containerId.getApplicationAttemptId().getApplicationId())\n            .getUser();\n    org.apache.hadoop.yarn.api.records.Token token \u003d\n        rmContext.getNMTokenSecretManager().createNMToken(\n            containerId.getApplicationAttemptId(), node, user);\n    currentUser.addToken(ConverterUtils.convertFromYarn(token,\n        containerManagerBindAddress));\n\n    return currentUser\n        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n\n          @Override\n          public ContainerManagementProtocol run() {\n            return (ContainerManagementProtocol) rpc.getProxy(\n                ContainerManagementProtocol.class,\n                containerManagerBindAddress, conf);\n          }\n        });\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {}
    },
    "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-840. Moved ProtoUtils to yarn.api.records.pb.impl. Contributed by Jian He.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494027 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 10:47 PM",
      "commitName": "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "17/06/13 4:13 PM",
      "commitNameOld": "5d1b453b8591d87ffb564857015c26c99fb7437c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.27,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   protected ContainerManagementProtocol getContainerMgrProxy(\n       final ContainerId containerId) {\n \n     final NodeId node \u003d masterContainer.getNodeId();\n     final InetSocketAddress containerManagerBindAddress \u003d\n         NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d UserGroupInformation\n         .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n-          ProtoUtils.convertFromProtoFormat(masterContainer\n+          ConverterUtils.convertFromYarn(masterContainer\n               .getContainerToken(), containerManagerBindAddress);\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n       @Override\n       public ContainerManagementProtocol run() {\n         return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n             containerManagerBindAddress, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManagementProtocol getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    final NodeId node \u003d masterContainer.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ConverterUtils.convertFromYarn(masterContainer\n              .getContainerToken(), containerManagerBindAddress);\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n      @Override\n      public ContainerManagementProtocol run() {\n        return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n            containerManagerBindAddress, conf);\n      }\n    });\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 12.93,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  protected ContainerManager getContainerMgrProxy(\n+  protected ContainerManagementProtocol getContainerMgrProxy(\n       final ContainerId containerId) {\n \n     final NodeId node \u003d masterContainer.getNodeId();\n     final InetSocketAddress containerManagerBindAddress \u003d\n         NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d UserGroupInformation\n         .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           ProtoUtils.convertFromProtoFormat(masterContainer\n               .getContainerToken(), containerManagerBindAddress);\n       currentUser.addToken(token);\n     }\n-    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+    return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n       @Override\n-      public ContainerManager run() {\n-        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+      public ContainerManagementProtocol run() {\n+        return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n             containerManagerBindAddress, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManagementProtocol getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    final NodeId node \u003d masterContainer.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ProtoUtils.convertFromProtoFormat(masterContainer\n              .getContainerToken(), containerManagerBindAddress);\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n      @Override\n      public ContainerManagementProtocol run() {\n        return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n            containerManagerBindAddress, conf);\n      }\n    });\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
          "extendedDetails": {
            "oldValue": "ContainerManager",
            "newValue": "ContainerManagementProtocol"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 12.93,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  protected ContainerManager getContainerMgrProxy(\n+  protected ContainerManagementProtocol getContainerMgrProxy(\n       final ContainerId containerId) {\n \n     final NodeId node \u003d masterContainer.getNodeId();\n     final InetSocketAddress containerManagerBindAddress \u003d\n         NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d UserGroupInformation\n         .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           ProtoUtils.convertFromProtoFormat(masterContainer\n               .getContainerToken(), containerManagerBindAddress);\n       currentUser.addToken(token);\n     }\n-    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+    return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n       @Override\n-      public ContainerManager run() {\n-        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+      public ContainerManagementProtocol run() {\n+        return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n             containerManagerBindAddress, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManagementProtocol getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    final NodeId node \u003d masterContainer.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ProtoUtils.convertFromProtoFormat(masterContainer\n              .getContainerToken(), containerManagerBindAddress);\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n      @Override\n      public ContainerManagementProtocol run() {\n        return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n            containerManagerBindAddress, conf);\n      }\n    });\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
          "extendedDetails": {}
        }
      ]
    },
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/13 12:28 PM",
      "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/03/13 2:11 PM",
      "commitNameOld": "07573640147bb4cf3568078acae7b245e9299cf7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n   protected ContainerManager getContainerMgrProxy(\n       final ContainerId containerId) {\n \n-    Container container \u003d application.getMasterContainer();\n-\n-    final NodeId node \u003d container.getNodeId();\n+    final NodeId node \u003d masterContainer.getNodeId();\n     final InetSocketAddress containerManagerBindAddress \u003d\n         NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d UserGroupInformation\n         .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n-          ProtoUtils.convertFromProtoFormat(container.getContainerToken(),\n-                                            containerManagerBindAddress);\n+          ProtoUtils.convertFromProtoFormat(masterContainer\n+              .getContainerToken(), containerManagerBindAddress);\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n             containerManagerBindAddress, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    final NodeId node \u003d masterContainer.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ProtoUtils.convertFromProtoFormat(masterContainer\n              .getContainerToken(), containerManagerBindAddress);\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            containerManagerBindAddress, conf);\n      }\n    });\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    Container container \u003d application.getMasterContainer();\n\n    final NodeId node \u003d container.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ProtoUtils.convertFromProtoFormat(container.getContainerToken(),\n                                            containerManagerBindAddress);\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            containerManagerBindAddress, conf);\n      }\n    });\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java"
      }
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   protected ContainerManager getContainerMgrProxy(\n       final ContainerId containerId) {\n \n     Container container \u003d application.getMasterContainer();\n \n-    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n+    final NodeId node \u003d container.getNodeId();\n+    final InetSocketAddress containerManagerBindAddress \u003d\n+        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d UserGroupInformation\n         .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n-      ContainerToken containerToken \u003d container.getContainerToken();\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n-          new Token\u003cContainerTokenIdentifier\u003e(\n-              containerToken.getIdentifier().array(),\n-              containerToken.getPassword().array(), new Text(\n-                  containerToken.getKind()), new Text(\n-                  containerToken.getService()));\n+          ProtoUtils.convertFromProtoFormat(container.getContainerToken(),\n+                                            containerManagerBindAddress);\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n-            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n+            containerManagerBindAddress, conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    Container container \u003d application.getMasterContainer();\n\n    final NodeId node \u003d container.getNodeId();\n    final InetSocketAddress containerManagerBindAddress \u003d\n        NetUtils.createSocketAddrForHost(node.getHost(), node.getPort());\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ProtoUtils.convertFromProtoFormat(container.getContainerToken(),\n                                            containerManagerBindAddress);\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            containerManagerBindAddress, conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {}
    },
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/11 2:35 AM",
      "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/10/11 2:35 AM",
          "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/10/11 11:45 PM",
          "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   protected ContainerManager getContainerMgrProxy(\n-      final ApplicationId applicationID) throws IOException {\n+      final ContainerId containerId) {\n \n     Container container \u003d application.getMasterContainer();\n \n     final String containerManagerBindAddress \u003d container.getNodeId().toString();\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n-    UserGroupInformation currentUser \u003d\n-        UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n+    UserGroupInformation currentUser \u003d UserGroupInformation\n+        .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d container.getContainerToken();\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           new Token\u003cContainerTokenIdentifier\u003e(\n               containerToken.getIdentifier().array(),\n               containerToken.getPassword().array(), new Text(\n                   containerToken.getKind()), new Text(\n                   containerToken.getService()));\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n             NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
          "extendedDetails": {
            "oldValue": "[applicationID-ApplicationId(modifiers-final)]",
            "newValue": "[containerId-ContainerId(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/10/11 2:35 AM",
          "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/10/11 11:45 PM",
          "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   protected ContainerManager getContainerMgrProxy(\n-      final ApplicationId applicationID) throws IOException {\n+      final ContainerId containerId) {\n \n     Container container \u003d application.getMasterContainer();\n \n     final String containerManagerBindAddress \u003d container.getNodeId().toString();\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n-    UserGroupInformation currentUser \u003d\n-        UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n+    UserGroupInformation currentUser \u003d UserGroupInformation\n+        .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d container.getContainerToken();\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           new Token\u003cContainerTokenIdentifier\u003e(\n               containerToken.getIdentifier().array(),\n               containerToken.getPassword().array(), new Text(\n                   containerToken.getKind()), new Text(\n                   containerToken.getService()));\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n             NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/10/11 2:35 AM",
          "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/10/11 11:45 PM",
          "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.12,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   protected ContainerManager getContainerMgrProxy(\n-      final ApplicationId applicationID) throws IOException {\n+      final ContainerId containerId) {\n \n     Container container \u003d application.getMasterContainer();\n \n     final String containerManagerBindAddress \u003d container.getNodeId().toString();\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n-    UserGroupInformation currentUser \u003d\n-        UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n+    UserGroupInformation currentUser \u003d UserGroupInformation\n+        .createRemoteUser(containerId.toString());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d container.getContainerToken();\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           new Token\u003cContainerTokenIdentifier\u003e(\n               containerToken.getIdentifier().array(),\n               containerToken.getPassword().array(), new Text(\n                   containerToken.getKind()), new Text(\n                   containerToken.getService()));\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n             NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ContainerId containerId) {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d UserGroupInformation\n        .createRemoteUser(containerId.toString());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
          "extendedDetails": {}
        }
      ]
    },
    "b549c107825581b15fd14494099a943ff3213c6f": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-3055. Simplified ApplicationAttemptId passing to ApplicationMaster via environment variable. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1174785 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/11 7:07 AM",
      "commitName": "b549c107825581b15fd14494099a943ff3213c6f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/09/11 12:26 AM",
      "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 9.28,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n-  private ContainerManager getContainerMgrProxy(\n+  protected ContainerManager getContainerMgrProxy(\n       final ApplicationId applicationID) throws IOException {\n \n     Container container \u003d application.getMasterContainer();\n \n     final String containerManagerBindAddress \u003d container.getNodeId().toString();\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d\n         UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d container.getContainerToken();\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           new Token\u003cContainerTokenIdentifier\u003e(\n               containerToken.getIdentifier().array(),\n               containerToken.getPassword().array(), new Text(\n                   containerToken.getKind()), new Text(\n                   containerToken.getService()));\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n             NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getContainerMgrProxy(\n      final ApplicationId applicationID) throws IOException {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d\n        UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "88b82a0f6687ce103817fbb460fd30d870f717a0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2899. Replace major parts of ApplicationSubmissionContext with a ContainerLaunchContext (Arun Murthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170459 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/11 12:26 AM",
      "commitName": "88b82a0f6687ce103817fbb460fd30d870f717a0",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "12/09/11 5:05 PM",
      "commitNameOld": "6165875dc6bf67d72fc3ce1d96dfc80ba312d4a1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private ContainerManager getContainerMgrProxy(\n       final ApplicationId applicationID) throws IOException {\n \n     Container container \u003d application.getMasterContainer();\n \n     final String containerManagerBindAddress \u003d container.getNodeId().toString();\n \n     final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n \n     UserGroupInformation currentUser \u003d\n-        UserGroupInformation.createRemoteUser(\"TODO\"); // TODO\n+        UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n     if (UserGroupInformation.isSecurityEnabled()) {\n       ContainerToken containerToken \u003d container.getContainerToken();\n       Token\u003cContainerTokenIdentifier\u003e token \u003d\n           new Token\u003cContainerTokenIdentifier\u003e(\n               containerToken.getIdentifier().array(),\n               containerToken.getPassword().array(), new Text(\n                   containerToken.getKind()), new Text(\n                   containerToken.getService()));\n       currentUser.addToken(token);\n     }\n     return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n       @Override\n       public ContainerManager run() {\n         return (ContainerManager) rpc.getProxy(ContainerManager.class,\n             NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerManager getContainerMgrProxy(\n      final ApplicationId applicationID) throws IOException {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d\n        UserGroupInformation.createRemoteUser(\"yarn\"); // TODO\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ContainerManager getContainerMgrProxy(\n      final ApplicationId applicationID) throws IOException {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d\n        UserGroupInformation.createRemoteUser(\"TODO\"); // TODO\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  private ContainerManager getContainerMgrProxy(\n+      final ApplicationId applicationID) throws IOException {\n+\n+    Container container \u003d application.getMasterContainer();\n+\n+    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n+\n+    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n+\n+    UserGroupInformation currentUser \u003d\n+        UserGroupInformation.createRemoteUser(\"TODO\"); // TODO\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      ContainerToken containerToken \u003d container.getContainerToken();\n+      Token\u003cContainerTokenIdentifier\u003e token \u003d\n+          new Token\u003cContainerTokenIdentifier\u003e(\n+              containerToken.getIdentifier().array(),\n+              containerToken.getPassword().array(), new Text(\n+                  containerToken.getKind()), new Text(\n+                  containerToken.getService()));\n+      currentUser.addToken(token);\n+    }\n+    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+      @Override\n+      public ContainerManager run() {\n+        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n+      }\n+    });\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerManager getContainerMgrProxy(\n      final ApplicationId applicationID) throws IOException {\n\n    Container container \u003d application.getMasterContainer();\n\n    final String containerManagerBindAddress \u003d container.getNodeId().toString();\n\n    final YarnRPC rpc \u003d YarnRPC.create(conf); // TODO: Don\u0027t create again and again.\n\n    UserGroupInformation currentUser \u003d\n        UserGroupInformation.createRemoteUser(\"TODO\"); // TODO\n    if (UserGroupInformation.isSecurityEnabled()) {\n      ContainerToken containerToken \u003d container.getContainerToken();\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                  containerToken.getService()));\n      currentUser.addToken(token);\n    }\n    return currentUser.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n      @Override\n      public ContainerManager run() {\n        return (ContainerManager) rpc.getProxy(ContainerManager.class,\n            NetUtils.createSocketAddr(containerManagerBindAddress), conf);\n      }\n    });\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/amlauncher/AMLauncher.java"
    }
  }
}