{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CompressionCodecFactory.java",
  "functionName": "getCodecClasses",
  "functionId": "getCodecClasses___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
  "functionStartLine": 111,
  "functionEndLine": 147,
  "numCommitsSeen": 20,
  "timeTaken": 1246,
  "changeHistory": [
    "ca1c00bf814a8b8290a81d06b1f4918c36c7d9e0",
    "db17fadd3849a9533e06a8444b4b48a2969cd712",
    "026d0b4d539de3007331fd3adab7808a0ca47fe1",
    "0363ca0489d498a908f11120dbdf710365effdfb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "ca1c00bf814a8b8290a81d06b1f4918c36c7d9e0": "Ybodychange",
    "db17fadd3849a9533e06a8444b4b48a2969cd712": "Ybodychange",
    "026d0b4d539de3007331fd3adab7808a0ca47fe1": "Ybodychange",
    "0363ca0489d498a908f11120dbdf710365effdfb": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca1c00bf814a8b8290a81d06b1f4918c36c7d9e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11658. Externalize io.compression.codecs property. Contributed by Kai Zheng.\n",
      "commitDate": "02/03/15 1:12 AM",
      "commitName": "ca1c00bf814a8b8290a81d06b1f4918c36c7d9e0",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.74,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n-  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n+  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(\n+      Configuration conf) {\n     List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n       \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n     // Add codec classes discovered via service loading\n     synchronized (CODEC_PROVIDERS) {\n       // CODEC_PROVIDERS is a lazy collection. Synchronize so it is\n       // thread-safe. See HADOOP-8406.\n       for (CompressionCodec codec : CODEC_PROVIDERS) {\n         result.add(codec.getClass());\n       }\n     }\n     // Add codec classes from configuration\n-    String codecsString \u003d conf.get(\"io.compression.codecs\");\n+    String codecsString \u003d conf.get(\n+        CommonConfigurationKeys.IO_COMPRESSION_CODECS_KEY);\n     if (codecsString !\u003d null) {\n       StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n       while (codecSplit.hasMoreElements()) {\n         String codecSubstring \u003d codecSplit.nextToken().trim();\n         if (codecSubstring.length() !\u003d 0) {\n           try {\n             Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n             if (!CompressionCodec.class.isAssignableFrom(cls)) {\n               throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                  \" is not a CompressionCodec\");\n             }\n             result.add(cls.asSubclass(CompressionCodec.class));\n           } catch (ClassNotFoundException ex) {\n             throw new IllegalArgumentException(\"Compression codec \" + \n                                                codecSubstring + \" not found.\",\n                                                ex);\n           }\n         }\n       }\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(\n      Configuration conf) {\n    List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n      \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n    // Add codec classes discovered via service loading\n    synchronized (CODEC_PROVIDERS) {\n      // CODEC_PROVIDERS is a lazy collection. Synchronize so it is\n      // thread-safe. See HADOOP-8406.\n      for (CompressionCodec codec : CODEC_PROVIDERS) {\n        result.add(codec.getClass());\n      }\n    }\n    // Add codec classes from configuration\n    String codecsString \u003d conf.get(\n        CommonConfigurationKeys.IO_COMPRESSION_CODECS_KEY);\n    if (codecsString !\u003d null) {\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken().trim();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {}
    },
    "db17fadd3849a9533e06a8444b4b48a2969cd712": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9216. CompressionCodecFactory#getCodecClasses should trim the result of parsing by Configuration. Contributed by Tsuyoshi Ozawa.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1434569 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/13 11:19 PM",
      "commitName": "db17fadd3849a9533e06a8444b4b48a2969cd712",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 145.26,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n     List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n       \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n     // Add codec classes discovered via service loading\n     synchronized (CODEC_PROVIDERS) {\n       // CODEC_PROVIDERS is a lazy collection. Synchronize so it is\n       // thread-safe. See HADOOP-8406.\n       for (CompressionCodec codec : CODEC_PROVIDERS) {\n         result.add(codec.getClass());\n       }\n     }\n     // Add codec classes from configuration\n     String codecsString \u003d conf.get(\"io.compression.codecs\");\n     if (codecsString !\u003d null) {\n       StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n       while (codecSplit.hasMoreElements()) {\n-        String codecSubstring \u003d codecSplit.nextToken();\n+        String codecSubstring \u003d codecSplit.nextToken().trim();\n         if (codecSubstring.length() !\u003d 0) {\n           try {\n             Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n             if (!CompressionCodec.class.isAssignableFrom(cls)) {\n               throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                  \" is not a CompressionCodec\");\n             }\n             result.add(cls.asSubclass(CompressionCodec.class));\n           } catch (ClassNotFoundException ex) {\n             throw new IllegalArgumentException(\"Compression codec \" + \n                                                codecSubstring + \" not found.\",\n                                                ex);\n           }\n         }\n       }\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n      \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n    // Add codec classes discovered via service loading\n    synchronized (CODEC_PROVIDERS) {\n      // CODEC_PROVIDERS is a lazy collection. Synchronize so it is\n      // thread-safe. See HADOOP-8406.\n      for (CompressionCodec codec : CODEC_PROVIDERS) {\n        result.add(codec.getClass());\n      }\n    }\n    // Add codec classes from configuration\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken().trim();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {}
    },
    "026d0b4d539de3007331fd3adab7808a0ca47fe1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8406. CompressionCodecFactory.CODEC_PROVIDERS iteration is thread-unsafe. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339476 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/12 9:28 PM",
      "commitName": "026d0b4d539de3007331fd3adab7808a0ca47fe1",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "19/04/12 12:20 PM",
      "commitNameOld": "0363ca0489d498a908f11120dbdf710365effdfb",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 27.38,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n     List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n       \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n     // Add codec classes discovered via service loading\n-    for (CompressionCodec codec : CODEC_PROVIDERS) {\n-      result.add(codec.getClass());\n+    synchronized (CODEC_PROVIDERS) {\n+      // CODEC_PROVIDERS is a lazy collection. Synchronize so it is\n+      // thread-safe. See HADOOP-8406.\n+      for (CompressionCodec codec : CODEC_PROVIDERS) {\n+        result.add(codec.getClass());\n+      }\n     }\n     // Add codec classes from configuration\n     String codecsString \u003d conf.get(\"io.compression.codecs\");\n     if (codecsString !\u003d null) {\n       StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n       while (codecSplit.hasMoreElements()) {\n         String codecSubstring \u003d codecSplit.nextToken();\n         if (codecSubstring.length() !\u003d 0) {\n           try {\n             Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n             if (!CompressionCodec.class.isAssignableFrom(cls)) {\n               throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                  \" is not a CompressionCodec\");\n             }\n             result.add(cls.asSubclass(CompressionCodec.class));\n           } catch (ClassNotFoundException ex) {\n             throw new IllegalArgumentException(\"Compression codec \" + \n                                                codecSubstring + \" not found.\",\n                                                ex);\n           }\n         }\n       }\n     }\n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n      \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n    // Add codec classes discovered via service loading\n    synchronized (CODEC_PROVIDERS) {\n      // CODEC_PROVIDERS is a lazy collection. Synchronize so it is\n      // thread-safe. See HADOOP-8406.\n      for (CompressionCodec codec : CODEC_PROVIDERS) {\n        result.add(codec.getClass());\n      }\n    }\n    // Add codec classes from configuration\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {}
    },
    "0363ca0489d498a908f11120dbdf710365effdfb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7350. Use ServiceLoader to discover compression codec classes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 12:20 PM",
      "commitName": "0363ca0489d498a908f11120dbdf710365effdfb",
      "commitAuthor": "Thomas White",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 238.8,
      "commitsBetweenForRepo": 1728,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n+    List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n+      \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n+    // Add codec classes discovered via service loading\n+    for (CompressionCodec codec : CODEC_PROVIDERS) {\n+      result.add(codec.getClass());\n+    }\n+    // Add codec classes from configuration\n     String codecsString \u003d conf.get(\"io.compression.codecs\");\n     if (codecsString !\u003d null) {\n-      List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n-        \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n       StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n       while (codecSplit.hasMoreElements()) {\n         String codecSubstring \u003d codecSplit.nextToken();\n         if (codecSubstring.length() !\u003d 0) {\n           try {\n             Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n             if (!CompressionCodec.class.isAssignableFrom(cls)) {\n               throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                  \" is not a CompressionCodec\");\n             }\n             result.add(cls.asSubclass(CompressionCodec.class));\n           } catch (ClassNotFoundException ex) {\n             throw new IllegalArgumentException(\"Compression codec \" + \n                                                codecSubstring + \" not found.\",\n                                                ex);\n           }\n         }\n       }\n-      return result;\n-    } else {\n-      return null;\n     }\n+    return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n      \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n    // Add codec classes discovered via service loading\n    for (CompressionCodec codec : CODEC_PROVIDERS) {\n      result.add(codec.getClass());\n    }\n    // Add codec classes from configuration\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n    }\n    return result;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n        \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n      return result;\n    } else {\n      return null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n        \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n      return result;\n    } else {\n      return null;\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n        \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n      return result;\n    } else {\n      return null;\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,28 @@\n+  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n+    String codecsString \u003d conf.get(\"io.compression.codecs\");\n+    if (codecsString !\u003d null) {\n+      List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n+        \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n+      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n+      while (codecSplit.hasMoreElements()) {\n+        String codecSubstring \u003d codecSplit.nextToken();\n+        if (codecSubstring.length() !\u003d 0) {\n+          try {\n+            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n+            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n+              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n+                                                 \" is not a CompressionCodec\");\n+            }\n+            result.add(cls.asSubclass(CompressionCodec.class));\n+          } catch (ClassNotFoundException ex) {\n+            throw new IllegalArgumentException(\"Compression codec \" + \n+                                               codecSubstring + \" not found.\",\n+                                               ex);\n+          }\n+        }\n+      }\n+      return result;\n+    } else {\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cClass\u003c? extends CompressionCodec\u003e\u003e getCodecClasses(Configuration conf) {\n    String codecsString \u003d conf.get(\"io.compression.codecs\");\n    if (codecsString !\u003d null) {\n      List\u003cClass\u003c? extends CompressionCodec\u003e\u003e result\n        \u003d new ArrayList\u003cClass\u003c? extends CompressionCodec\u003e\u003e();\n      StringTokenizer codecSplit \u003d new StringTokenizer(codecsString, \",\");\n      while (codecSplit.hasMoreElements()) {\n        String codecSubstring \u003d codecSplit.nextToken();\n        if (codecSubstring.length() !\u003d 0) {\n          try {\n            Class\u003c?\u003e cls \u003d conf.getClassByName(codecSubstring);\n            if (!CompressionCodec.class.isAssignableFrom(cls)) {\n              throw new IllegalArgumentException(\"Class \" + codecSubstring +\n                                                 \" is not a CompressionCodec\");\n            }\n            result.add(cls.asSubclass(CompressionCodec.class));\n          } catch (ClassNotFoundException ex) {\n            throw new IllegalArgumentException(\"Compression codec \" + \n                                               codecSubstring + \" not found.\",\n                                               ex);\n          }\n        }\n      }\n      return result;\n    } else {\n      return null;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/CompressionCodecFactory.java"
    }
  }
}