{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnitsConversionUtil.java",
  "functionName": "convert",
  "functionId": "convert___fromUnit-String__toUnit-String__fromValue-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
  "functionStartLine": 130,
  "functionEndLine": 163,
  "numCommitsSeen": 8,
  "timeTaken": 2240,
  "changeHistory": [
    "58da54640e37571f82eb340f32641d58160e92b2",
    "7ba698997b6845b664b2f8c82e384b457c30d176",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137"
  ],
  "changeHistoryShort": {
    "58da54640e37571f82eb340f32641d58160e92b2": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "7ba698997b6845b664b2f8c82e384b457c30d176": "Ybodychange",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": "Yintroduced"
  },
  "changeHistoryDetails": {
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "7ba698997b6845b664b2f8c82e384b457c30d176",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n-  public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n-    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n+  public static long convert(String fromUnit, String toUnit, long fromValue) {\n+    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null) {\n       throw new IllegalArgumentException(\"One or more arguments are null\");\n     }\n-    String overflowMsg \u003d\n-        \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n-            + \"\u0027 will result in an overflow of Long\";\n+\n     if (fromUnit.equals(toUnit)) {\n       return fromValue;\n     }\n     Converter fc \u003d getConverter(fromUnit);\n     Converter tc \u003d getConverter(toUnit);\n-    Long numerator \u003d fc.numerator * tc.denominator;\n-    Long denominator \u003d fc.denominator * tc.numerator;\n-    Long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n+    long numerator \u003d fc.numerator * tc.denominator;\n+    long denominator \u003d fc.denominator * tc.numerator;\n+    long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n     if (numerator \u003c denominator) {\n       if (numeratorMultiplierLimit \u003c fromValue) {\n+        String overflowMsg \u003d\n+            \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+                + \"\u0027 will result in an overflow of Long\";\n         throw new IllegalArgumentException(overflowMsg);\n       }\n       return (fromValue * numerator) / denominator;\n     }\n     if (numeratorMultiplierLimit \u003e fromValue) {\n       return (numerator * fromValue) / denominator;\n     }\n-    Long tmp \u003d numerator / denominator;\n+    long tmp \u003d numerator / denominator;\n     if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n+      String overflowMsg \u003d\n+          \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+              + \"\u0027 will result in an overflow of Long\";\n       throw new IllegalArgumentException(overflowMsg);\n     }\n     return fromValue * tmp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static long convert(String fromUnit, String toUnit, long fromValue) {\n    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null) {\n      throw new IllegalArgumentException(\"One or more arguments are null\");\n    }\n\n    if (fromUnit.equals(toUnit)) {\n      return fromValue;\n    }\n    Converter fc \u003d getConverter(fromUnit);\n    Converter tc \u003d getConverter(toUnit);\n    long numerator \u003d fc.numerator * tc.denominator;\n    long denominator \u003d fc.denominator * tc.numerator;\n    long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n    if (numerator \u003c denominator) {\n      if (numeratorMultiplierLimit \u003c fromValue) {\n        String overflowMsg \u003d\n            \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n                + \"\u0027 will result in an overflow of Long\";\n        throw new IllegalArgumentException(overflowMsg);\n      }\n      return (fromValue * numerator) / denominator;\n    }\n    if (numeratorMultiplierLimit \u003e fromValue) {\n      return (numerator * fromValue) / denominator;\n    }\n    long tmp \u003d numerator / denominator;\n    if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n      String overflowMsg \u003d\n          \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n              + \"\u0027 will result in an overflow of Long\";\n      throw new IllegalArgumentException(overflowMsg);\n    }\n    return fromValue * tmp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
          "extendedDetails": {
            "oldValue": "[fromUnit-String, toUnit-String, fromValue-Long]",
            "newValue": "[fromUnit-String, toUnit-String, fromValue-long]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "7ba698997b6845b664b2f8c82e384b457c30d176",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n-  public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n-    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n+  public static long convert(String fromUnit, String toUnit, long fromValue) {\n+    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null) {\n       throw new IllegalArgumentException(\"One or more arguments are null\");\n     }\n-    String overflowMsg \u003d\n-        \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n-            + \"\u0027 will result in an overflow of Long\";\n+\n     if (fromUnit.equals(toUnit)) {\n       return fromValue;\n     }\n     Converter fc \u003d getConverter(fromUnit);\n     Converter tc \u003d getConverter(toUnit);\n-    Long numerator \u003d fc.numerator * tc.denominator;\n-    Long denominator \u003d fc.denominator * tc.numerator;\n-    Long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n+    long numerator \u003d fc.numerator * tc.denominator;\n+    long denominator \u003d fc.denominator * tc.numerator;\n+    long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n     if (numerator \u003c denominator) {\n       if (numeratorMultiplierLimit \u003c fromValue) {\n+        String overflowMsg \u003d\n+            \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+                + \"\u0027 will result in an overflow of Long\";\n         throw new IllegalArgumentException(overflowMsg);\n       }\n       return (fromValue * numerator) / denominator;\n     }\n     if (numeratorMultiplierLimit \u003e fromValue) {\n       return (numerator * fromValue) / denominator;\n     }\n-    Long tmp \u003d numerator / denominator;\n+    long tmp \u003d numerator / denominator;\n     if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n+      String overflowMsg \u003d\n+          \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+              + \"\u0027 will result in an overflow of Long\";\n       throw new IllegalArgumentException(overflowMsg);\n     }\n     return fromValue * tmp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static long convert(String fromUnit, String toUnit, long fromValue) {\n    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null) {\n      throw new IllegalArgumentException(\"One or more arguments are null\");\n    }\n\n    if (fromUnit.equals(toUnit)) {\n      return fromValue;\n    }\n    Converter fc \u003d getConverter(fromUnit);\n    Converter tc \u003d getConverter(toUnit);\n    long numerator \u003d fc.numerator * tc.denominator;\n    long denominator \u003d fc.denominator * tc.numerator;\n    long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n    if (numerator \u003c denominator) {\n      if (numeratorMultiplierLimit \u003c fromValue) {\n        String overflowMsg \u003d\n            \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n                + \"\u0027 will result in an overflow of Long\";\n        throw new IllegalArgumentException(overflowMsg);\n      }\n      return (fromValue * numerator) / denominator;\n    }\n    if (numeratorMultiplierLimit \u003e fromValue) {\n      return (numerator * fromValue) / denominator;\n    }\n    long tmp \u003d numerator / denominator;\n    if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n      String overflowMsg \u003d\n          \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n              + \"\u0027 will result in an overflow of Long\";\n      throw new IllegalArgumentException(overflowMsg);\n    }\n    return fromValue * tmp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
          "extendedDetails": {
            "oldValue": "Long",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "7ba698997b6845b664b2f8c82e384b457c30d176",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,34 @@\n-  public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n-    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n+  public static long convert(String fromUnit, String toUnit, long fromValue) {\n+    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null) {\n       throw new IllegalArgumentException(\"One or more arguments are null\");\n     }\n-    String overflowMsg \u003d\n-        \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n-            + \"\u0027 will result in an overflow of Long\";\n+\n     if (fromUnit.equals(toUnit)) {\n       return fromValue;\n     }\n     Converter fc \u003d getConverter(fromUnit);\n     Converter tc \u003d getConverter(toUnit);\n-    Long numerator \u003d fc.numerator * tc.denominator;\n-    Long denominator \u003d fc.denominator * tc.numerator;\n-    Long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n+    long numerator \u003d fc.numerator * tc.denominator;\n+    long denominator \u003d fc.denominator * tc.numerator;\n+    long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n     if (numerator \u003c denominator) {\n       if (numeratorMultiplierLimit \u003c fromValue) {\n+        String overflowMsg \u003d\n+            \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+                + \"\u0027 will result in an overflow of Long\";\n         throw new IllegalArgumentException(overflowMsg);\n       }\n       return (fromValue * numerator) / denominator;\n     }\n     if (numeratorMultiplierLimit \u003e fromValue) {\n       return (numerator * fromValue) / denominator;\n     }\n-    Long tmp \u003d numerator / denominator;\n+    long tmp \u003d numerator / denominator;\n     if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n+      String overflowMsg \u003d\n+          \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+              + \"\u0027 will result in an overflow of Long\";\n       throw new IllegalArgumentException(overflowMsg);\n     }\n     return fromValue * tmp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static long convert(String fromUnit, String toUnit, long fromValue) {\n    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null) {\n      throw new IllegalArgumentException(\"One or more arguments are null\");\n    }\n\n    if (fromUnit.equals(toUnit)) {\n      return fromValue;\n    }\n    Converter fc \u003d getConverter(fromUnit);\n    Converter tc \u003d getConverter(toUnit);\n    long numerator \u003d fc.numerator * tc.denominator;\n    long denominator \u003d fc.denominator * tc.numerator;\n    long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n    if (numerator \u003c denominator) {\n      if (numeratorMultiplierLimit \u003c fromValue) {\n        String overflowMsg \u003d\n            \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n                + \"\u0027 will result in an overflow of Long\";\n        throw new IllegalArgumentException(overflowMsg);\n      }\n      return (fromValue * numerator) / denominator;\n    }\n    if (numeratorMultiplierLimit \u003e fromValue) {\n      return (numerator * fromValue) / denominator;\n    }\n    long tmp \u003d numerator / denominator;\n    if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n      String overflowMsg \u003d\n          \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n              + \"\u0027 will result in an overflow of Long\";\n      throw new IllegalArgumentException(overflowMsg);\n    }\n    return fromValue * tmp;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ba698997b6845b664b2f8c82e384b457c30d176": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4829. Add support for binary units in Resource class.(vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "7ba698997b6845b664b2f8c82e384b457c30d176",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n     if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n       throw new IllegalArgumentException(\"One or more arguments are null\");\n     }\n-    Long tmp;\n     String overflowMsg \u003d\n         \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n             + \"\u0027 will result in an overflow of Long\";\n+    if (fromUnit.equals(toUnit)) {\n+      return fromValue;\n+    }\n     Converter fc \u003d getConverter(fromUnit);\n     Converter tc \u003d getConverter(toUnit);\n     Long numerator \u003d fc.numerator * tc.denominator;\n     Long denominator \u003d fc.denominator * tc.numerator;\n+    Long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n     if (numerator \u003c denominator) {\n-      if (!toUnit.equals(fromUnit)) {\n-        tmp \u003d Long.MAX_VALUE / numerator;\n-        if (tmp \u003c fromValue) {\n-          throw new IllegalArgumentException(overflowMsg);\n-        }\n+      if (numeratorMultiplierLimit \u003c fromValue) {\n+        throw new IllegalArgumentException(overflowMsg);\n       }\n       return (fromValue * numerator) / denominator;\n     }\n-    tmp \u003d numerator / denominator;\n-    if (!toUnit.equals(fromUnit)) {\n-      if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n-        throw new IllegalArgumentException(overflowMsg);\n-      }\n+    if (numeratorMultiplierLimit \u003e fromValue) {\n+      return (numerator * fromValue) / denominator;\n+    }\n+    Long tmp \u003d numerator / denominator;\n+    if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n+      throw new IllegalArgumentException(overflowMsg);\n     }\n     return fromValue * tmp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n      throw new IllegalArgumentException(\"One or more arguments are null\");\n    }\n    String overflowMsg \u003d\n        \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n            + \"\u0027 will result in an overflow of Long\";\n    if (fromUnit.equals(toUnit)) {\n      return fromValue;\n    }\n    Converter fc \u003d getConverter(fromUnit);\n    Converter tc \u003d getConverter(toUnit);\n    Long numerator \u003d fc.numerator * tc.denominator;\n    Long denominator \u003d fc.denominator * tc.numerator;\n    Long numeratorMultiplierLimit \u003d Long.MAX_VALUE / numerator;\n    if (numerator \u003c denominator) {\n      if (numeratorMultiplierLimit \u003c fromValue) {\n        throw new IllegalArgumentException(overflowMsg);\n      }\n      return (fromValue * numerator) / denominator;\n    }\n    if (numeratorMultiplierLimit \u003e fromValue) {\n      return (numerator * fromValue) / denominator;\n    }\n    Long tmp \u003d numerator / denominator;\n    if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n      throw new IllegalArgumentException(overflowMsg);\n    }\n    return fromValue * tmp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java",
      "extendedDetails": {}
    },
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,29 @@\n+  public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n+    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"One or more arguments are null\");\n+    }\n+    Long tmp;\n+    String overflowMsg \u003d\n+        \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n+            + \"\u0027 will result in an overflow of Long\";\n+    Converter fc \u003d getConverter(fromUnit);\n+    Converter tc \u003d getConverter(toUnit);\n+    Long numerator \u003d fc.numerator * tc.denominator;\n+    Long denominator \u003d fc.denominator * tc.numerator;\n+    if (numerator \u003c denominator) {\n+      if (!toUnit.equals(fromUnit)) {\n+        tmp \u003d Long.MAX_VALUE / numerator;\n+        if (tmp \u003c fromValue) {\n+          throw new IllegalArgumentException(overflowMsg);\n+        }\n+      }\n+      return (fromValue * numerator) / denominator;\n+    }\n+    tmp \u003d numerator / denominator;\n+    if (!toUnit.equals(fromUnit)) {\n+      if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n+        throw new IllegalArgumentException(overflowMsg);\n+      }\n+    }\n+    return fromValue * tmp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Long convert(String fromUnit, String toUnit, Long fromValue) {\n    if (toUnit \u003d\u003d null || fromUnit \u003d\u003d null || fromValue \u003d\u003d null) {\n      throw new IllegalArgumentException(\"One or more arguments are null\");\n    }\n    Long tmp;\n    String overflowMsg \u003d\n        \"Converting \" + fromValue + \" from \u0027\" + fromUnit + \"\u0027 to \u0027\" + toUnit\n            + \"\u0027 will result in an overflow of Long\";\n    Converter fc \u003d getConverter(fromUnit);\n    Converter tc \u003d getConverter(toUnit);\n    Long numerator \u003d fc.numerator * tc.denominator;\n    Long denominator \u003d fc.denominator * tc.numerator;\n    if (numerator \u003c denominator) {\n      if (!toUnit.equals(fromUnit)) {\n        tmp \u003d Long.MAX_VALUE / numerator;\n        if (tmp \u003c fromValue) {\n          throw new IllegalArgumentException(overflowMsg);\n        }\n      }\n      return (fromValue * numerator) / denominator;\n    }\n    tmp \u003d numerator / denominator;\n    if (!toUnit.equals(fromUnit)) {\n      if ((Long.MAX_VALUE / tmp) \u003c fromValue) {\n        throw new IllegalArgumentException(overflowMsg);\n      }\n    }\n    return fromValue * tmp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/UnitsConversionUtil.java"
    }
  }
}