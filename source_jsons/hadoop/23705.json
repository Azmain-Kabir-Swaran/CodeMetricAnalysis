{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HsTaskPage.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
  "functionStartLine": 75,
  "functionEndLine": 246,
  "numCommitsSeen": 22,
  "timeTaken": 3340,
  "changeHistory": [
    "159a715eef23046ee9909289defe62e68a5df533",
    "488806baca6d84c12b24532ddeacf6d249c2136b",
    "d1e2b8098078af4af31392ed7f2fa350a7d1c3b2",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "63d40d528654707b3f56619a4eb20e21cdeadc7e",
    "857d134fda8b7bb7faa6eb3606639554de4db47a",
    "04dac636953532c9c4ab6692e193e3ffe292edb2",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
    "c2d6407070338f26baaa7d67c968501a987dfe1a",
    "4bca22005f48f426b9bc7cf36d435ead470a2590",
    "796e1a48ac03c1496728e0f3e1860a70b90c6edd",
    "b73738d21e86d71122860b70b1e0f570e2b2290b",
    "9db078212f5a37154925cc8872f9adaeca0ed371",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "d9ba4670ed0134816d5d063d48394e31b51c3b35",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f",
    "b3c9c3c182f1fead0f47ef560e90fcc86042ea7f"
  ],
  "changeHistoryShort": {
    "159a715eef23046ee9909289defe62e68a5df533": "Ybodychange",
    "488806baca6d84c12b24532ddeacf6d249c2136b": "Ybodychange",
    "d1e2b8098078af4af31392ed7f2fa350a7d1c3b2": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "63d40d528654707b3f56619a4eb20e21cdeadc7e": "Ybodychange",
    "857d134fda8b7bb7faa6eb3606639554de4db47a": "Ybodychange",
    "04dac636953532c9c4ab6692e193e3ffe292edb2": "Ybodychange",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": "Ybodychange",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": "Ybodychange",
    "c2d6407070338f26baaa7d67c968501a987dfe1a": "Ybodychange",
    "4bca22005f48f426b9bc7cf36d435ead470a2590": "Ybodychange",
    "796e1a48ac03c1496728e0f3e1860a70b90c6edd": "Ybodychange",
    "b73738d21e86d71122860b70b1e0f570e2b2290b": "Ybodychange",
    "9db078212f5a37154925cc8872f9adaeca0ed371": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ybodychange",
    "d9ba4670ed0134816d5d063d48394e31b51c3b35": "Ybodychange",
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": "Ybodychange",
    "b3c9c3c182f1fead0f47ef560e90fcc86042ea7f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "159a715eef23046ee9909289defe62e68a5df533": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7192. JobHistoryServer attempts page support jump to containers log page in NM when logAggregation is disable. Contributed by Jiandan Yang.\n",
      "commitDate": "13/03/19 2:00 AM",
      "commitName": "159a715eef23046ee9909289defe62e68a5df533",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "14/09/18 1:10 PM",
      "commitNameOld": "488806baca6d84c12b24532ddeacf6d249c2136b",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 179.53,
      "commitsBetweenForRepo": 1427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,172 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt attempt : getTaskAttempts()) {\n         final TaskAttemptInfo ta \u003d new MapTaskAttemptInfo(attempt, false);\n         String taid \u003d ta.getId();\n \n         String nodeHttpAddr \u003d ta.getNode();\n         String containerIdString \u003d ta.getAssignedContainerIdStr();\n         String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getRack();\n \n         long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n           sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         TaskId taskId \u003d attempt.getID().getTaskId();\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n         .append(ta.getState()).append(\"\\\",\\\"\")\n         .append(StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(ta.getStatus()))).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n-        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n+        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\");\n \n-        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n-          , containerIdString, taid, app.getJob().getUserName()))\n-          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n+         String logsUrl \u003d url(\"logs\", nodeIdString, containerIdString, taid,\n+             app.getJob().getUserName());\n+         if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n+             YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n+           logsUrl \u003d\n+               url(MRWebAppUtil.getYARNWebappScheme(), nodeHttpAddr, \"node\",\n+                   \"containerlogs\", containerIdString,\n+                   app.getJob().getUserName());\n+         }\n+         attemptsTableData.append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(logsUrl)\n+             .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\");\n \n-          .append(attemptStartTime).append(\"\\\",\\\"\");\n+        attemptsTableData.append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(ta.getNote())))\n           .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n            __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_status\").$value(\"Status\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\").__().__();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\").__().__();\n       \n       footRow.__().__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new MapTaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        TaskId taskId \u003d attempt.getID().getTaskId();\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(ta.getStatus()))).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\");\n\n         String logsUrl \u003d url(\"logs\", nodeIdString, containerIdString, taid,\n             app.getJob().getUserName());\n         if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n             YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n           logsUrl \u003d\n               url(MRWebAppUtil.getYARNWebappScheme(), nodeHttpAddr, \"node\",\n                   \"containerlogs\", containerIdString,\n                   app.getJob().getUserName());\n         }\n         attemptsTableData.append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(logsUrl)\n             .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\");\n\n        attemptsTableData.append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n           __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\").__().__();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\").__().__();\n      \n      footRow.__().__().__();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "488806baca6d84c12b24532ddeacf6d249c2136b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7140. Refactoring TaskAttemptInfo to separate Map and Reduce tasks. Contributed by Oleksandr Shevchenko\n",
      "commitDate": "14/09/18 1:10 PM",
      "commitName": "488806baca6d84c12b24532ddeacf6d249c2136b",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/18 8:42 AM",
      "commitNameOld": "88625f5cd90766136a9ebd76a8d84b45a37e6c99",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 63.19,
      "commitsBetweenForRepo": 507,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt attempt : getTaskAttempts()) {\n-        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n+        final TaskAttemptInfo ta \u003d new MapTaskAttemptInfo(attempt, false);\n         String taid \u003d ta.getId();\n \n         String nodeHttpAddr \u003d ta.getNode();\n         String containerIdString \u003d ta.getAssignedContainerIdStr();\n         String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getRack();\n \n         long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n           sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         TaskId taskId \u003d attempt.getID().getTaskId();\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n         .append(ta.getState()).append(\"\\\",\\\"\")\n         .append(StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(ta.getStatus()))).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeEcmaScript(\n               StringEscapeUtils.escapeHtml4(ta.getNote())))\n           .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n            __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_status\").$value(\"Status\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\").__().__();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\").__().__();\n       \n       footRow.__().__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new MapTaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        TaskId taskId \u003d attempt.getID().getTaskId();\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(ta.getStatus()))).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n           __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\").__().__();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\").__().__();\n      \n      footRow.__().__().__();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "d1e2b8098078af4af31392ed7f2fa350a7d1c3b2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7098. Upgrade common-langs version to 3.7 in hadoop-mapreduce-project\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "31/05/18 2:31 AM",
      "commitName": "d1e2b8098078af4af31392ed7f2fa350a7d1c3b2",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 307.39,
      "commitsBetweenForRepo": 2911,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt attempt : getTaskAttempts()) {\n         final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n         String taid \u003d ta.getId();\n \n         String nodeHttpAddr \u003d ta.getNode();\n         String containerIdString \u003d ta.getAssignedContainerIdStr();\n         String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getRack();\n \n         long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n           sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         TaskId taskId \u003d attempt.getID().getTaskId();\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n         .append(ta.getState()).append(\"\\\",\\\"\")\n-        .append(StringEscapeUtils.escapeJavaScript(\n-              StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n+        .append(StringEscapeUtils.escapeEcmaScript(\n+              StringEscapeUtils.escapeHtml4(ta.getStatus()))).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n-          .append(StringEscapeUtils.escapeJavaScript(\n-              StringEscapeUtils.escapeHtml(ta.getNote())))\n+          .append(StringEscapeUtils.escapeEcmaScript(\n+              StringEscapeUtils.escapeHtml4(ta.getNote())))\n           .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n            __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_status\").$value(\"Status\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\").__().__();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\").__().__();\n       \n       footRow.__().__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        TaskId taskId \u003d attempt.getID().getTaskId();\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(ta.getStatus()))).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeEcmaScript(\n              StringEscapeUtils.escapeHtml4(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n           __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\").__().__();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\").__().__();\n      \n      footRow.__().__().__();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "23/12/15 10:25 PM",
      "commitNameOld": "a308e86621b1a7692fe1004ed14c919fdaba03cd",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 581.74,
      "commitsBetweenForRepo": 3662,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n-       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n+       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt attempt : getTaskAttempts()) {\n         final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n         String taid \u003d ta.getId();\n \n         String nodeHttpAddr \u003d ta.getNode();\n         String containerIdString \u003d ta.getAssignedContainerIdStr();\n         String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getRack();\n \n         long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n           sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         TaskId taskId \u003d attempt.getID().getTaskId();\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n         .append(ta.getState()).append(\"\\\",\\\"\")\n         .append(StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(ta.getNote())))\n           .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n-       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+           __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n \n-      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n+      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n-              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n+              $name(\"attempt_name\").$value(\"Attempt\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n-              $name(\"attempt_state\").$value(\"State\")._()._().\n+              $name(\"attempt_state\").$value(\"State\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n-              $name(\"attempt_status\").$value(\"Status\")._()._().\n+              $name(\"attempt_status\").$value(\"Status\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n-              $name(\"attempt_node\").$value(\"Node\")._()._().\n+              $name(\"attempt_node\").$value(\"Node\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n-              $name(\"attempt_node\").$value(\"Logs\")._()._().\n+              $name(\"attempt_node\").$value(\"Logs\").__().__().\n           th().input(\"search_init\").$type(InputType.text).\n-              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n+              $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n+            $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n+            $name(\"merge_time\").$value(\"Merge Time\").__().__();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n+            $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n+            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n+            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n+            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n+            $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n         th().input(\"search_init\").$type(InputType.text).\n-            $name(\"note\").$value(\"Note\")._()._();\n+            $name(\"note\").$value(\"Note\").__().__();\n       \n-      footRow._()._()._();\n+      footRow.__().__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow.__().__().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        TaskId taskId \u003d attempt.getID().getTaskId();\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n           __(\"var attemptsTableData\u003d\" + attemptsTableData).__();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody.__().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\").__().__().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\").__().__();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\").__().__();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\").__().__();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\").__().__();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\").__().__().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\").__().__();\n      \n      footRow.__().__().__();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "63d40d528654707b3f56619a4eb20e21cdeadc7e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6316. Task Attempt List entries should link to the task overview. (Siqi Li via gera)\n",
      "commitDate": "20/06/15 11:38 AM",
      "commitName": "63d40d528654707b3f56619a4eb20e21cdeadc7e",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "05/08/14 2:52 PM",
      "commitNameOld": "857d134fda8b7bb7faa6eb3606639554de4db47a",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 318.87,
      "commitsBetweenForRepo": 2794,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,165 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt attempt : getTaskAttempts()) {\n         final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n         String taid \u003d ta.getId();\n \n         String nodeHttpAddr \u003d ta.getNode();\n         String containerIdString \u003d ta.getAssignedContainerIdStr();\n         String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getRack();\n \n         long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n           sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n-        int sortId \u003d attempt.getID().getId()\n-                   + (attempt.getID().getTaskId().getId() * 10000);\n+        TaskId taskId \u003d attempt.getID().getTaskId();\n \n         attemptsTableData.append(\"[\\\"\")\n-        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n+        .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n         .append(ta.getState()).append(\"\\\",\\\"\")\n         .append(StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(ta.getNote())))\n           .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n        _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_status\").$value(\"Status\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        TaskId taskId \u003d attempt.getID().getTaskId();\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(getAttemptId(taskId, ta)).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "857d134fda8b7bb7faa6eb3606639554de4db47a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6014. New task status field in task attempts table can lead to an empty web page. Contributed by Mit Desai\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616018 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 2:52 PM",
      "commitName": "857d134fda8b7bb7faa6eb3606639554de4db47a",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "20/12/13 1:00 PM",
      "commitNameOld": "04dac636953532c9c4ab6692e193e3ffe292edb2",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 228.04,
      "commitsBetweenForRepo": 1535,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,165 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt attempt : getTaskAttempts()) {\n         final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n         String taid \u003d ta.getId();\n \n         String nodeHttpAddr \u003d ta.getNode();\n         String containerIdString \u003d ta.getAssignedContainerIdStr();\n         String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getRack();\n \n         long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n           sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d attempt.getID().getId()\n                    + (attempt.getID().getTaskId().getId() * 10000);\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n         .append(ta.getState()).append(\"\\\",\\\"\")\n-        .append(ta.getStatus()).append(\"\\\",\\\"\")\n+        .append(StringEscapeUtils.escapeJavaScript(\n+              StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeJavaScript(\n               StringEscapeUtils.escapeHtml(ta.getNote())))\n           .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n        _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_status\").$value(\"Status\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d attempt.getID().getId()\n                   + (attempt.getID().getTaskId().getId() * 10000);\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getStatus()))).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "04dac636953532c9c4ab6692e193e3ffe292edb2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5550. Task Status message (reporter.setStatus) not shown in UI with Hadoop 2.0 (Gera Shegalov via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/13 1:00 PM",
      "commitName": "04dac636953532c9c4ab6692e193e3ffe292edb2",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "01/10/13 3:52 PM",
      "commitNameOld": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 79.92,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,157 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n+            th(\".status\", \"Status\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n-       for (TaskAttempt ta : getTaskAttempts()) {\n-        String taid \u003d MRApps.toString(ta.getID());\n+       for (TaskAttempt attempt : getTaskAttempts()) {\n+        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n+        String taid \u003d ta.getId();\n \n-        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n-        String containerIdString \u003d ta.getAssignedContainerID().toString();\n-        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n-        String nodeRackName \u003d ta.getNodeRackName();\n+        String nodeHttpAddr \u003d ta.getNode();\n+        String containerIdString \u003d ta.getAssignedContainerIdStr();\n+        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n+        String nodeRackName \u003d ta.getRack();\n \n-        long attemptStartTime \u003d ta.getLaunchTime();\n+        long attemptStartTime \u003d ta.getStartTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n-          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n-          sortFinishTime \u003d ta.getSortFinishTime();\n+          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n+          sortFinishTime \u003d attempt.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n-        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n+        int sortId \u003d attempt.getID().getId()\n+                   + (attempt.getID().getTaskId().getId() * 10000);\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n-        .append(ta.getState().toString()).append(\"\\\",\\\"\")\n+        .append(ta.getState()).append(\"\\\",\\\"\")\n+        .append(ta.getStatus()).append(\"\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n-          .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n-           Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n+          .append(StringEscapeUtils.escapeJavaScript(\n+              StringEscapeUtils.escapeHtml(ta.getNote())))\n+          .append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n        _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n+              $name(\"attempt_status\").$value(\"Status\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".status\", \"Status\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt attempt : getTaskAttempts()) {\n        final TaskAttemptInfo ta \u003d new TaskAttemptInfo(attempt, false);\n        String taid \u003d ta.getId();\n\n        String nodeHttpAddr \u003d ta.getNode();\n        String containerIdString \u003d ta.getAssignedContainerIdStr();\n        String nodeIdString \u003d attempt.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getRack();\n\n        long attemptStartTime \u003d ta.getStartTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d attempt.getShuffleFinishTime();\n          sortFinishTime \u003d attempt.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d attempt.getID().getId()\n                   + (attempt.getID().getTaskId().getId() * 10000);\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n        .append(ta.getState()).append(\"\\\",\\\"\")\n        .append(ta.getStatus()).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(\n              StringEscapeUtils.escapeHtml(ta.getNote())))\n          .append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_status\").$value(\"Status\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5536. Fixed MR AM and JHS to respect mapreduce.jobhistory.webapp.https.address. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:52 PM",
      "commitName": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 4:35 PM",
      "commitNameOld": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,157 +1,157 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getNodeRackName();\n \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n         .append(ta.getState().toString()).append(\"\\\",\\\"\")\n \n-        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + WebAppUtil.getSchemePrefix() + nodeHttpAddr + \"\u0027\u003e\")\n+        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n            Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n        _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();\n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n        .append(ta.getState().toString()).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + MRWebAppUtil.getYARNWebappScheme() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n           Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1203. Changed YARN web-app proxy to handle http and https URLs from AM registration and finish correctly. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5515. Fixed MR AM\u0027s webapp to depend on a new config mapreduce.ssl.enabled to enable https and disabling it by default as MR AM needs\nto set up its own certificates etc and not depend on clusters\u0027. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 4:35 PM",
      "commitName": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/02/13 5:15 PM",
      "commitNameOld": "c2d6407070338f26baaa7d67c968501a987dfe1a",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 218.93,
      "commitsBetweenForRepo": 1295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,157 +1,157 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n        // Write all the data into a JavaScript array of arrays for JQuery\n        // DataTables to display\n        StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n \n        for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getNodeRackName();\n \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n \n         attemptsTableData.append(\"[\\\"\")\n         .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n         .append(ta.getState().toString()).append(\"\\\",\\\"\")\n \n-        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + HttpConfig.getSchemePrefix() + nodeHttpAddr + \"\u0027\u003e\")\n+        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + WebAppUtil.getSchemePrefix() + nodeHttpAddr + \"\u0027\u003e\")\n         .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n \n         .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n           , containerIdString, taid, app.getJob().getUserName()))\n           .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n \n           .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n           .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n         attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n           .append(elapsedSortTime).append(\"\\\",\\\"\")\n           .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n           attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n           .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n            Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n       }\n        //Remove the last comma and close off the array of arrays\n        if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n          attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n        }\n        attemptsTableData.append(\"]\");\n        html.script().$type(\"text/javascript\").\n        _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();\n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n        .append(ta.getState().toString()).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + WebAppUtil.getSchemePrefix() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n           Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "c2d6407070338f26baaa7d67c968501a987dfe1a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4989. JSONify DataTables input data for Attempts page. Contributed by Ravi Prakash\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1445448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/13 5:15 PM",
      "commitName": "c2d6407070338f26baaa7d67c968501a987dfe1a",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "09/08/12 3:52 PM",
      "commitNameOld": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 187.1,
      "commitsBetweenForRepo": 972,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,168 +1,157 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n-      for (TaskAttempt ta : getTaskAttempts()) {\n+       // Write all the data into a JavaScript array of arrays for JQuery\n+       // DataTables to display\n+       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n+\n+       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n-        String nodeRackName \u003d ta.getNodeRackName();        \n+        String nodeRackName \u003d ta.getNodeRackName();\n \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n-        \n-        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n-        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n \n-        td.br().$title(String.valueOf(sortId))._(). // sorting\n-            _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n-                HttpConfig.getSchemePrefix()+ nodeHttpAddr,\n-                nodeRackName + \"/\" + nodeHttpAddr);\n-        td._();\n-        row.td().\n-          a(\".logslink\",\n-            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n-                .getUserName()), \"logs\")._();\n-        \n-        row.td().\n-          br().$title(String.valueOf(attemptStartTime))._().\n-            _(Times.format(attemptStartTime))._();\n+        attemptsTableData.append(\"[\\\"\")\n+        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n+        .append(ta.getState().toString()).append(\"\\\",\\\"\")\n+\n+        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + HttpConfig.getSchemePrefix() + nodeHttpAddr + \"\u0027\u003e\")\n+        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n+\n+        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n+          , containerIdString, taid, app.getJob().getUserName()))\n+          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n+\n+          .append(attemptStartTime).append(\"\\\",\\\"\");\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n-          row.td().\n-            br().$title(String.valueOf(shuffleFinishTime))._().\n-            _(Times.format(shuffleFinishTime))._();\n-          row.td().\n-          br().$title(String.valueOf(sortFinishTime))._().\n-          _(Times.format(sortFinishTime))._();\n+          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n+          .append(sortFinishTime).append(\"\\\",\\\"\");\n         }\n-        row.\n-            td().\n-              br().$title(String.valueOf(attemptFinishTime))._().\n-              _(Times.format(attemptFinishTime))._();\n-        \n+        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n+\n         if(type \u003d\u003d TaskType.REDUCE) {\n-          row.td().\n-            br().$title(String.valueOf(elapsedShuffleTime))._().\n-          _(formatTime(elapsedShuffleTime))._();\n-          row.td().\n-          br().$title(String.valueOf(elapsedSortTime))._().\n-        _(formatTime(elapsedSortTime))._();\n-          row.td().\n-            br().$title(String.valueOf(elapsedReduceTime))._().\n-          _(formatTime(elapsedReduceTime))._();\n+          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n+          .append(elapsedSortTime).append(\"\\\",\\\"\")\n+          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n         }\n-        \n-        row.\n-          td().\n-            br().$title(String.valueOf(attemptElapsed))._().\n-          _(formatTime(attemptElapsed))._().\n-          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n-        row._();\n+          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n+          .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n+           Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n       }\n-      \n-      \n+       //Remove the last comma and close off the array of arrays\n+       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n+       }\n+       attemptsTableData.append(\"]\");\n+       html.script().$type(\"text/javascript\").\n+       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n+\n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       // Write all the data into a JavaScript array of arrays for JQuery\n       // DataTables to display\n       StringBuilder attemptsTableData \u003d new StringBuilder(\"[\\n\");\n\n       for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();\n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n\n        attemptsTableData.append(\"[\\\"\")\n        .append(sortId + \" \").append(taid).append(\"\\\",\\\"\")\n        .append(ta.getState().toString()).append(\"\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027nodelink\u0027 href\u003d\u0027\" + HttpConfig.getSchemePrefix() + nodeHttpAddr + \"\u0027\u003e\")\n        .append(nodeRackName + \"/\" + nodeHttpAddr + \"\u003c/a\u003e\\\",\\\"\")\n\n        .append(\"\u003ca class\u003d\u0027logslink\u0027 href\u003d\u0027\").append(url(\"logs\", nodeIdString\n          , containerIdString, taid, app.getJob().getUserName()))\n          .append(\"\u0027\u003elogs\u003c/a\u003e\\\",\\\"\")\n\n          .append(attemptStartTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(shuffleFinishTime).append(\"\\\",\\\"\")\n          .append(sortFinishTime).append(\"\\\",\\\"\");\n        }\n        attemptsTableData.append(attemptFinishTime).append(\"\\\",\\\"\");\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          attemptsTableData.append(elapsedShuffleTime).append(\"\\\",\\\"\")\n          .append(elapsedSortTime).append(\"\\\",\\\"\")\n          .append(elapsedReduceTime).append(\"\\\",\\\"\");\n        }\n          attemptsTableData.append(attemptElapsed).append(\"\\\",\\\"\")\n          .append(StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(\n           Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics())))).append(\"\\\"],\\n\");\n      }\n       //Remove the last comma and close off the array of arrays\n       if(attemptsTableData.charAt(attemptsTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         attemptsTableData.delete(attemptsTableData.length()-2, attemptsTableData.length()-1);\n       }\n       attemptsTableData.append(\"]\");\n       html.script().$type(\"text/javascript\").\n       _(\"var attemptsTableData\u003d\" + attemptsTableData)._();\n\n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "4bca22005f48f426b9bc7cf36d435ead470a2590": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8681. add support for HTTPS to the web UIs. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/12 3:52 PM",
      "commitName": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "23/04/12 12:38 PM",
      "commitNameOld": "796e1a48ac03c1496728e0f3e1860a70b90c6edd",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 108.14,
      "commitsBetweenForRepo": 581,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,168 +1,168 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"Node\").\n             th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getNodeRackName();        \n \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n         \n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n         TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n \n         td.br().$title(String.valueOf(sortId))._(). // sorting\n             _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n-                \"http://\"+ nodeHttpAddr,\n+                HttpConfig.getSchemePrefix()+ nodeHttpAddr,\n                 nodeRackName + \"/\" + nodeHttpAddr);\n         td._();\n         row.td().\n           a(\".logslink\",\n             url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                 .getUserName()), \"logs\")._();\n         \n         row.td().\n           br().$title(String.valueOf(attemptStartTime))._().\n             _(Times.format(attemptStartTime))._();\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(shuffleFinishTime))._().\n             _(Times.format(shuffleFinishTime))._();\n           row.td().\n           br().$title(String.valueOf(sortFinishTime))._().\n           _(Times.format(sortFinishTime))._();\n         }\n         row.\n             td().\n               br().$title(String.valueOf(attemptFinishTime))._().\n               _(Times.format(attemptFinishTime))._();\n         \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(elapsedShuffleTime))._().\n           _(formatTime(elapsedShuffleTime))._();\n           row.td().\n           br().$title(String.valueOf(elapsedSortTime))._().\n         _(formatTime(elapsedSortTime))._();\n           row.td().\n             br().$title(String.valueOf(elapsedReduceTime))._().\n           _(formatTime(elapsedReduceTime))._();\n         }\n         \n         row.\n           td().\n             br().$title(String.valueOf(attemptElapsed))._().\n           _(formatTime(attemptElapsed))._().\n           td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n         row._();\n       }\n       \n       \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Logs\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();        \n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n        \n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n\n        td.br().$title(String.valueOf(sortId))._(). // sorting\n            _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n                HttpConfig.getSchemePrefix()+ nodeHttpAddr,\n                nodeRackName + \"/\" + nodeHttpAddr);\n        td._();\n        row.td().\n          a(\".logslink\",\n            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                .getUserName()), \"logs\")._();\n        \n        row.td().\n          br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(shuffleFinishTime))._().\n            _(Times.format(shuffleFinishTime))._();\n          row.td().\n          br().$title(String.valueOf(sortFinishTime))._().\n          _(Times.format(sortFinishTime))._();\n        }\n        row.\n            td().\n              br().$title(String.valueOf(attemptFinishTime))._().\n              _(Times.format(attemptFinishTime))._();\n        \n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(elapsedShuffleTime))._().\n          _(formatTime(elapsedShuffleTime))._();\n          row.td().\n          br().$title(String.valueOf(elapsedSortTime))._().\n        _(formatTime(elapsedSortTime))._();\n          row.td().\n            br().$title(String.valueOf(elapsedReduceTime))._().\n          _(formatTime(elapsedReduceTime))._();\n        }\n        \n        row.\n          td().\n            br().$title(String.valueOf(attemptElapsed))._().\n          _(formatTime(attemptElapsed))._().\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n        row._();\n      }\n      \n      \n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "796e1a48ac03c1496728e0f3e1860a70b90c6edd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4190. Improve web UI for task attempts userlog link (Tom Graves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329398 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/12 12:38 PM",
      "commitName": "796e1a48ac03c1496728e0f3e1860a70b90c6edd",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/03/12 10:29 AM",
      "commitNameOld": "b73738d21e86d71122860b70b1e0f570e2b2290b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 49.05,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,168 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n-            th(\".node\", \"node\").\n+            th(\".node\", \"Node\").\n+            th(\".logs\", \"Logs\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getNodeRackName();        \n \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n         \n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n         TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n \n         td.br().$title(String.valueOf(sortId))._(). // sorting\n             _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n                 \"http://\"+ nodeHttpAddr,\n                 nodeRackName + \"/\" + nodeHttpAddr);\n-        td._(\" \").a(\".logslink\",\n-            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n-                .getUserName()), \"logs\");\n         td._();\n+        row.td().\n+          a(\".logslink\",\n+            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n+                .getUserName()), \"logs\")._();\n         \n         row.td().\n           br().$title(String.valueOf(attemptStartTime))._().\n             _(Times.format(attemptStartTime))._();\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(shuffleFinishTime))._().\n             _(Times.format(shuffleFinishTime))._();\n           row.td().\n           br().$title(String.valueOf(sortFinishTime))._().\n           _(Times.format(sortFinishTime))._();\n         }\n         row.\n             td().\n               br().$title(String.valueOf(attemptFinishTime))._().\n               _(Times.format(attemptFinishTime))._();\n         \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(elapsedShuffleTime))._().\n           _(formatTime(elapsedShuffleTime))._();\n           row.td().\n           br().$title(String.valueOf(elapsedSortTime))._().\n         _(formatTime(elapsedSortTime))._();\n           row.td().\n             br().$title(String.valueOf(elapsedReduceTime))._().\n           _(formatTime(elapsedReduceTime))._();\n         }\n         \n         row.\n           td().\n             br().$title(String.valueOf(attemptElapsed))._().\n           _(formatTime(attemptElapsed))._().\n           td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n         row._();\n       }\n       \n       \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n+              $name(\"attempt_node\").$value(\"Logs\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"Node\").\n            th(\".logs\", \"Logs\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();        \n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n        \n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n\n        td.br().$title(String.valueOf(sortId))._(). // sorting\n            _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n                \"http://\"+ nodeHttpAddr,\n                nodeRackName + \"/\" + nodeHttpAddr);\n        td._();\n        row.td().\n          a(\".logslink\",\n            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                .getUserName()), \"logs\")._();\n        \n        row.td().\n          br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(shuffleFinishTime))._().\n            _(Times.format(shuffleFinishTime))._();\n          row.td().\n          br().$title(String.valueOf(sortFinishTime))._().\n          _(Times.format(sortFinishTime))._();\n        }\n        row.\n            td().\n              br().$title(String.valueOf(attemptFinishTime))._().\n              _(Times.format(attemptFinishTime))._();\n        \n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(elapsedShuffleTime))._().\n          _(formatTime(elapsedShuffleTime))._();\n          row.td().\n          br().$title(String.valueOf(elapsedSortTime))._().\n        _(formatTime(elapsedSortTime))._();\n          row.td().\n            br().$title(String.valueOf(elapsedReduceTime))._().\n          _(formatTime(elapsedReduceTime))._();\n        }\n        \n        row.\n          td().\n            br().$title(String.valueOf(attemptElapsed))._().\n          _(formatTime(attemptElapsed))._().\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n        row._();\n      }\n      \n      \n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Logs\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "b73738d21e86d71122860b70b1e0f570e2b2290b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3009. Fixed node link on JobHistory webapp. Contributed by hackaravarthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297149 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/12 10:29 AM",
      "commitName": "b73738d21e86d71122860b70b1e0f570e2b2290b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/11/11 3:56 PM",
      "commitNameOld": "cc4a468113831e502b26c571d04e31b475bca5c1",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 98.77,
      "commitsBetweenForRepo": 725,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,164 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"node\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n         String nodeRackName \u003d ta.getNodeRackName();        \n \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n         \n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n         TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n \n         td.br().$title(String.valueOf(sortId))._(). // sorting\n             _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n-                url(\"http://\", nodeHttpAddr),\n+                \"http://\"+ nodeHttpAddr,\n                 nodeRackName + \"/\" + nodeHttpAddr);\n         td._(\" \").a(\".logslink\",\n             url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                 .getUserName()), \"logs\");\n         td._();\n         \n         row.td().\n           br().$title(String.valueOf(attemptStartTime))._().\n             _(Times.format(attemptStartTime))._();\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(shuffleFinishTime))._().\n             _(Times.format(shuffleFinishTime))._();\n           row.td().\n           br().$title(String.valueOf(sortFinishTime))._().\n           _(Times.format(sortFinishTime))._();\n         }\n         row.\n             td().\n               br().$title(String.valueOf(attemptFinishTime))._().\n               _(Times.format(attemptFinishTime))._();\n         \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(elapsedShuffleTime))._().\n           _(formatTime(elapsedShuffleTime))._();\n           row.td().\n           br().$title(String.valueOf(elapsedSortTime))._().\n         _(formatTime(elapsedSortTime))._();\n           row.td().\n             br().$title(String.valueOf(elapsedReduceTime))._().\n           _(formatTime(elapsedReduceTime))._();\n         }\n         \n         row.\n           td().\n             br().$title(String.valueOf(attemptElapsed))._().\n           _(formatTime(attemptElapsed))._().\n           td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n         row._();\n       }\n       \n       \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"node\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();        \n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n        \n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n\n        td.br().$title(String.valueOf(sortId))._(). // sorting\n            _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n                \"http://\"+ nodeHttpAddr,\n                nodeRackName + \"/\" + nodeHttpAddr);\n        td._(\" \").a(\".logslink\",\n            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                .getUserName()), \"logs\");\n        td._();\n        \n        row.td().\n          br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(shuffleFinishTime))._().\n            _(Times.format(shuffleFinishTime))._();\n          row.td().\n          br().$title(String.valueOf(sortFinishTime))._().\n          _(Times.format(sortFinishTime))._();\n        }\n        row.\n            td().\n              br().$title(String.valueOf(attemptFinishTime))._().\n              _(Times.format(attemptFinishTime))._();\n        \n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(elapsedShuffleTime))._().\n          _(formatTime(elapsedShuffleTime))._();\n          row.td().\n          br().$title(String.valueOf(elapsedSortTime))._().\n        _(formatTime(elapsedSortTime))._();\n          row.td().\n            br().$title(String.valueOf(elapsedReduceTime))._().\n          _(formatTime(elapsedReduceTime))._();\n        }\n        \n        row.\n          td().\n            br().$title(String.valueOf(attemptElapsed))._().\n          _(formatTime(attemptElapsed))._().\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n        row._();\n      }\n      \n      \n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "9db078212f5a37154925cc8872f9adaeca0ed371": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3035. Fixed MR JobHistory to ensure rack information is present. Contributed by chakravarthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/11 10:27 AM",
      "commitName": "9db078212f5a37154925cc8872f9adaeca0ed371",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/10/11 11:45 PM",
      "commitNameOld": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.45,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,163 +1,164 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"node\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         String containerIdString \u003d ta.getAssignedContainerID().toString();\n         String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n-        \n+        String nodeRackName \u003d ta.getNodeRackName();        \n+\n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n         \n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n         TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n \n-        td.br().$title(String.valueOf(sortId))._()\n-            . // sorting\n-            _(taid)._().td(ta.getState().toString()).td()\n-            .a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n+        td.br().$title(String.valueOf(sortId))._(). // sorting\n+            _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n+                url(\"http://\", nodeHttpAddr),\n+                nodeRackName + \"/\" + nodeHttpAddr);\n         td._(\" \").a(\".logslink\",\n             url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                 .getUserName()), \"logs\");\n         td._();\n         \n         row.td().\n           br().$title(String.valueOf(attemptStartTime))._().\n             _(Times.format(attemptStartTime))._();\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(shuffleFinishTime))._().\n             _(Times.format(shuffleFinishTime))._();\n           row.td().\n           br().$title(String.valueOf(sortFinishTime))._().\n           _(Times.format(sortFinishTime))._();\n         }\n         row.\n             td().\n               br().$title(String.valueOf(attemptFinishTime))._().\n               _(Times.format(attemptFinishTime))._();\n         \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(elapsedShuffleTime))._().\n           _(formatTime(elapsedShuffleTime))._();\n           row.td().\n           br().$title(String.valueOf(elapsedSortTime))._().\n         _(formatTime(elapsedSortTime))._();\n           row.td().\n             br().$title(String.valueOf(elapsedReduceTime))._().\n           _(formatTime(elapsedReduceTime))._();\n         }\n         \n         row.\n           td().\n             br().$title(String.valueOf(attemptElapsed))._().\n           _(formatTime(attemptElapsed))._().\n           td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n         row._();\n       }\n       \n       \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"node\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        String nodeRackName \u003d ta.getNodeRackName();        \n\n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n        \n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n\n        td.br().$title(String.valueOf(sortId))._(). // sorting\n            _(taid)._().td(ta.getState().toString()).td().a(\".nodelink\",\n                url(\"http://\", nodeHttpAddr),\n                nodeRackName + \"/\" + nodeHttpAddr);\n        td._(\" \").a(\".logslink\",\n            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                .getUserName()), \"logs\");\n        td._();\n        \n        row.td().\n          br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(shuffleFinishTime))._().\n            _(Times.format(shuffleFinishTime))._();\n          row.td().\n          br().$title(String.valueOf(sortFinishTime))._().\n          _(Times.format(sortFinishTime))._();\n        }\n        row.\n            td().\n              br().$title(String.valueOf(attemptFinishTime))._().\n              _(Times.format(attemptFinishTime))._();\n        \n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(elapsedShuffleTime))._().\n          _(formatTime(elapsedShuffleTime))._();\n          row.td().\n          br().$title(String.valueOf(elapsedSortTime))._().\n        _(formatTime(elapsedSortTime))._();\n          row.td().\n            br().$title(String.valueOf(elapsedReduceTime))._().\n          _(formatTime(elapsedReduceTime))._();\n        }\n        \n        row.\n          td().\n            br().$title(String.valueOf(attemptElapsed))._().\n          _(formatTime(attemptElapsed))._().\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n        row._();\n      }\n      \n      \n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/09/11 1:08 AM",
      "commitNameOld": "71886657f89f64b289c6f426bd9f557ed0e53590",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.94,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,157 +1,163 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TaskType type \u003d null;\n       String symbol \u003d $(TASK_TYPE);\n       if (!symbol.isEmpty()) {\n         type \u003d MRApps.taskType(symbol);\n       } else {\n         type \u003d app.getTask().getType();\n       }\n       \n       TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr();\n       \n       headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"node\").\n             th(\".tsh\", \"Start Time\");\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Shuffle Finish Time\");\n         headRow.th(\"Merge Finish Time\");\n       }\n       \n       headRow.th(\"Finish Time\"); //Attempt\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n         headRow.th(\"Elapsed Time Merge\"); //Attempt\n         headRow.th(\"Elapsed Time Reduce\"); //Attempt\n       }\n       headRow.th(\"Elapsed Time\").\n               th(\".note\", \"Note\");\n       \n        TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n+        String containerIdString \u003d ta.getAssignedContainerID().toString();\n+        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n         \n         long attemptStartTime \u003d ta.getLaunchTime();\n         long shuffleFinishTime \u003d -1;\n         long sortFinishTime \u003d -1;\n         long attemptFinishTime \u003d ta.getFinishTime();\n         long elapsedShuffleTime \u003d -1;\n         long elapsedSortTime \u003d -1;\n         long elapsedReduceTime \u003d -1;\n         if(type \u003d\u003d TaskType.REDUCE) {\n           shuffleFinishTime \u003d ta.getShuffleFinishTime();\n           sortFinishTime \u003d ta.getSortFinishTime();\n           elapsedShuffleTime \u003d\n               Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n           elapsedSortTime \u003d\n               Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n           elapsedReduceTime \u003d\n               Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n         long attemptElapsed \u003d\n             Times.elapsed(attemptStartTime, attemptFinishTime, false);\n         int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n         \n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n-        row.\n-            td().\n-              br().$title(String.valueOf(sortId))._(). // sorting\n-              _(taid)._().\n-            td(ta.getState().toString()).\n-            td().a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr)._();\n+        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n+\n+        td.br().$title(String.valueOf(sortId))._()\n+            . // sorting\n+            _(taid)._().td(ta.getState().toString()).td()\n+            .a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n+        td._(\" \").a(\".logslink\",\n+            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n+                .getUserName()), \"logs\");\n+        td._();\n         \n         row.td().\n           br().$title(String.valueOf(attemptStartTime))._().\n             _(Times.format(attemptStartTime))._();\n \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(shuffleFinishTime))._().\n             _(Times.format(shuffleFinishTime))._();\n           row.td().\n           br().$title(String.valueOf(sortFinishTime))._().\n           _(Times.format(sortFinishTime))._();\n         }\n         row.\n             td().\n               br().$title(String.valueOf(attemptFinishTime))._().\n               _(Times.format(attemptFinishTime))._();\n         \n         if(type \u003d\u003d TaskType.REDUCE) {\n           row.td().\n             br().$title(String.valueOf(elapsedShuffleTime))._().\n           _(formatTime(elapsedShuffleTime))._();\n           row.td().\n           br().$title(String.valueOf(elapsedSortTime))._().\n         _(formatTime(elapsedSortTime))._();\n           row.td().\n             br().$title(String.valueOf(elapsedReduceTime))._().\n           _(formatTime(elapsedReduceTime))._();\n         }\n         \n         row.\n           td().\n             br().$title(String.valueOf(attemptElapsed))._().\n           _(formatTime(attemptElapsed))._().\n           td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n         row._();\n       }\n       \n       \n       TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n       footRow.\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_name\").$value(\"Attempt\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_state\").$value(\"State\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_node\").$value(\"Node\")._()._().\n           th().input(\"search_init\").$type(InputType.text).\n               $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"merge_time\").$value(\"Merge Time\")._()._();\n       }\n       \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n       \n       if(type \u003d\u003d TaskType.REDUCE) {\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n         footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n       }\n \n       footRow.\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n         th().input(\"search_init\").$type(InputType.text).\n             $name(\"note\").$value(\"Note\")._()._();\n       \n       footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"node\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        String containerIdString \u003d ta.getAssignedContainerID().toString();\n        String nodeIdString \u003d ta.getAssignedContainerMgrAddress();\n        \n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n        \n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e td \u003d row.td();\n\n        td.br().$title(String.valueOf(sortId))._()\n            . // sorting\n            _(taid)._().td(ta.getState().toString()).td()\n            .a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n        td._(\" \").a(\".logslink\",\n            url(\"logs\", nodeIdString, containerIdString, taid, app.getJob()\n                .getUserName()), \"logs\");\n        td._();\n        \n        row.td().\n          br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(shuffleFinishTime))._().\n            _(Times.format(shuffleFinishTime))._();\n          row.td().\n          br().$title(String.valueOf(sortFinishTime))._().\n          _(Times.format(sortFinishTime))._();\n        }\n        row.\n            td().\n              br().$title(String.valueOf(attemptFinishTime))._().\n              _(Times.format(attemptFinishTime))._();\n        \n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(elapsedShuffleTime))._().\n          _(formatTime(elapsedShuffleTime))._();\n          row.td().\n          br().$title(String.valueOf(elapsedSortTime))._().\n        _(formatTime(elapsedSortTime))._();\n          row.td().\n            br().$title(String.valueOf(elapsedReduceTime))._().\n          _(formatTime(elapsedReduceTime))._();\n        }\n        \n        row.\n          td().\n            br().$title(String.valueOf(attemptElapsed))._().\n          _(formatTime(attemptElapsed))._().\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n        row._();\n      }\n      \n      \n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "d9ba4670ed0134816d5d063d48394e31b51c3b35": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2672. MR-279: JobHistory Server needs Analysis this job. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1171297 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/09/11 3:21 PM",
      "commitName": "d9ba4670ed0134816d5d063d48394e31b51c3b35",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/09/11 3:55 PM",
      "commitNameOld": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,157 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n-      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n+      TaskType type \u003d null;\n+      String symbol \u003d $(TASK_TYPE);\n+      if (!symbol.isEmpty()) {\n+        type \u003d MRApps.taskType(symbol);\n+      } else {\n+        type \u003d app.getTask().getType();\n+      }\n+      \n+      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n       table(\"#attempts\").\n         thead().\n-          tr().\n+          tr();\n+      \n+      headRow.\n             th(\".id\", \"Attempt\").\n             th(\".state\", \"State\").\n             th(\".node\", \"node\").\n-            th(\".tsh\", \"Started\").\n-            th(\".tsh\", \"Finished\").\n-            th(\".tsh\", \"Elapsed\").\n-            th(\".note\", \"Note\")._()._().\n-        tbody();\n+            th(\".tsh\", \"Start Time\");\n+      \n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        headRow.th(\"Shuffle Finish Time\");\n+        headRow.th(\"Merge Finish Time\");\n+      }\n+      \n+      headRow.th(\"Finish Time\"); //Attempt\n+      \n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n+        headRow.th(\"Elapsed Time Merge\"); //Attempt\n+        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n+      }\n+      headRow.th(\"Elapsed Time\").\n+              th(\".note\", \"Note\");\n+      \n+       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n-        ContainerId containerId \u003d ta.getAssignedContainerID();\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n-        long startTime \u003d ta.getLaunchTime();\n-        long finishTime \u003d ta.getFinishTime();\n-        long elapsed \u003d Times.elapsed(startTime, finishTime);\n-        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e nodeTd \u003d tbody.\n-          tr().\n-            td(\".id\", taid).\n-            td(\".state\", ta.getState().toString()).\n-            td().\n-              a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n-        if (containerId !\u003d null) {\n-          String containerIdStr \u003d ConverterUtils.toString(containerId);\n-          nodeTd._(\" \").\n-            a(\".logslink\", url(\"http://\", nodeHttpAddr, \"yarn\", \"containerlogs\",\n-              containerIdStr), \"logs\");\n+        \n+        long attemptStartTime \u003d ta.getLaunchTime();\n+        long shuffleFinishTime \u003d -1;\n+        long sortFinishTime \u003d -1;\n+        long attemptFinishTime \u003d ta.getFinishTime();\n+        long elapsedShuffleTime \u003d -1;\n+        long elapsedSortTime \u003d -1;\n+        long elapsedReduceTime \u003d -1;\n+        if(type \u003d\u003d TaskType.REDUCE) {\n+          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n+          sortFinishTime \u003d ta.getSortFinishTime();\n+          elapsedShuffleTime \u003d\n+              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n+          elapsedSortTime \u003d\n+              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n+          elapsedReduceTime \u003d\n+              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n         }\n-        nodeTd._().\n-          td(\".ts\", Times.format(startTime)).\n-          td(\".ts\", Times.format(finishTime)).\n-          td(\".dt\", StringUtils.formatTime(elapsed)).\n-          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()))._();\n+        long attemptElapsed \u003d\n+            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n+        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n+        \n+        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n+        row.\n+            td().\n+              br().$title(String.valueOf(sortId))._(). // sorting\n+              _(taid)._().\n+            td(ta.getState().toString()).\n+            td().a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr)._();\n+        \n+        row.td().\n+          br().$title(String.valueOf(attemptStartTime))._().\n+            _(Times.format(attemptStartTime))._();\n+\n+        if(type \u003d\u003d TaskType.REDUCE) {\n+          row.td().\n+            br().$title(String.valueOf(shuffleFinishTime))._().\n+            _(Times.format(shuffleFinishTime))._();\n+          row.td().\n+          br().$title(String.valueOf(sortFinishTime))._().\n+          _(Times.format(sortFinishTime))._();\n+        }\n+        row.\n+            td().\n+              br().$title(String.valueOf(attemptFinishTime))._().\n+              _(Times.format(attemptFinishTime))._();\n+        \n+        if(type \u003d\u003d TaskType.REDUCE) {\n+          row.td().\n+            br().$title(String.valueOf(elapsedShuffleTime))._().\n+          _(formatTime(elapsedShuffleTime))._();\n+          row.td().\n+          br().$title(String.valueOf(elapsedSortTime))._().\n+        _(formatTime(elapsedSortTime))._();\n+          row.td().\n+            br().$title(String.valueOf(elapsedReduceTime))._().\n+          _(formatTime(elapsedReduceTime))._();\n+        }\n+        \n+        row.\n+          td().\n+            br().$title(String.valueOf(attemptElapsed))._().\n+          _(formatTime(attemptElapsed))._().\n+          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n+        row._();\n       }\n-      tbody._()._();\n+      \n+      \n+      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n+      footRow.\n+          th().input(\"search_init\").$type(InputType.text).\n+              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).\n+              $name(\"attempt_state\").$value(\"State\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).\n+              $name(\"attempt_node\").$value(\"Node\")._()._().\n+          th().input(\"search_init\").$type(InputType.text).\n+              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n+      \n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n+        footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n+      }\n+      \n+      footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n+      \n+      if(type \u003d\u003d TaskType.REDUCE) {\n+        footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n+        footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n+        footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n+      }\n+\n+      footRow.\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n+        th().input(\"search_init\").$type(InputType.text).\n+            $name(\"note\").$value(\"Note\")._()._();\n+      \n+      footRow._()._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TaskType type \u003d null;\n      String symbol \u003d $(TASK_TYPE);\n      if (!symbol.isEmpty()) {\n        type \u003d MRApps.taskType(symbol);\n      } else {\n        type \u003d app.getTask().getType();\n      }\n      \n      TR\u003cTHEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e headRow \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr();\n      \n      headRow.\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"node\").\n            th(\".tsh\", \"Start Time\");\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Shuffle Finish Time\");\n        headRow.th(\"Merge Finish Time\");\n      }\n      \n      headRow.th(\"Finish Time\"); //Attempt\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        headRow.th(\"Elapsed Time Shuffle\"); //Attempt\n        headRow.th(\"Elapsed Time Merge\"); //Attempt\n        headRow.th(\"Elapsed Time Reduce\"); //Attempt\n      }\n      headRow.th(\"Elapsed Time\").\n              th(\".note\", \"Note\");\n      \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d headRow._()._().tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        \n        long attemptStartTime \u003d ta.getLaunchTime();\n        long shuffleFinishTime \u003d -1;\n        long sortFinishTime \u003d -1;\n        long attemptFinishTime \u003d ta.getFinishTime();\n        long elapsedShuffleTime \u003d -1;\n        long elapsedSortTime \u003d -1;\n        long elapsedReduceTime \u003d -1;\n        if(type \u003d\u003d TaskType.REDUCE) {\n          shuffleFinishTime \u003d ta.getShuffleFinishTime();\n          sortFinishTime \u003d ta.getSortFinishTime();\n          elapsedShuffleTime \u003d\n              Times.elapsed(attemptStartTime, shuffleFinishTime, false);\n          elapsedSortTime \u003d\n              Times.elapsed(shuffleFinishTime, sortFinishTime, false);\n          elapsedReduceTime \u003d\n              Times.elapsed(sortFinishTime, attemptFinishTime, false); \n        }\n        long attemptElapsed \u003d\n            Times.elapsed(attemptStartTime, attemptFinishTime, false);\n        int sortId \u003d ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);\n        \n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n        row.\n            td().\n              br().$title(String.valueOf(sortId))._(). // sorting\n              _(taid)._().\n            td(ta.getState().toString()).\n            td().a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr)._();\n        \n        row.td().\n          br().$title(String.valueOf(attemptStartTime))._().\n            _(Times.format(attemptStartTime))._();\n\n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(shuffleFinishTime))._().\n            _(Times.format(shuffleFinishTime))._();\n          row.td().\n          br().$title(String.valueOf(sortFinishTime))._().\n          _(Times.format(sortFinishTime))._();\n        }\n        row.\n            td().\n              br().$title(String.valueOf(attemptFinishTime))._().\n              _(Times.format(attemptFinishTime))._();\n        \n        if(type \u003d\u003d TaskType.REDUCE) {\n          row.td().\n            br().$title(String.valueOf(elapsedShuffleTime))._().\n          _(formatTime(elapsedShuffleTime))._();\n          row.td().\n          br().$title(String.valueOf(elapsedSortTime))._().\n        _(formatTime(elapsedSortTime))._();\n          row.td().\n            br().$title(String.valueOf(elapsedReduceTime))._().\n          _(formatTime(elapsedReduceTime))._();\n        }\n        \n        row.\n          td().\n            br().$title(String.valueOf(attemptElapsed))._().\n          _(formatTime(attemptElapsed))._().\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()));\n        row._();\n      }\n      \n      \n      TR\u003cTFOOT\u003cTABLE\u003cHamlet\u003e\u003e\u003e footRow \u003d tbody._().tfoot().tr();\n      footRow.\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_name\").$value(\"Attempt\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_state\").$value(\"State\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_node\").$value(\"Node\")._()._().\n          th().input(\"search_init\").$type(InputType.text).\n              $name(\"attempt_start_time\").$value(\"Start Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"shuffle_time\").$value(\"Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"merge_time\").$value(\"Merge Time\")._()._();\n      }\n      \n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_finish\").$value(\"Finish Time\")._()._();\n      \n      if(type \u003d\u003d TaskType.REDUCE) {\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_shuffle_time\").$value(\"Elapsed Shuffle Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_merge_time\").$value(\"Elapsed Merge Time\")._()._();\n        footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"elapsed_reduce_time\").$value(\"Elapsed Reduce Time\")._()._();\n      }\n\n      footRow.\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"attempt_elapsed\").$value(\"Elapsed Time\")._()._().\n        th().input(\"search_init\").$type(InputType.text).\n            $name(\"note\").$value(\"Note\")._()._();\n      \n      footRow._()._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "a3e8f6836b489f8f2ddd785ae038df729c85059f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2676. MR-279: JobHistory Job page needs reformatted. (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170379 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 3:55 PM",
      "commitName": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "08/09/11 1:59 PM",
      "commitNameOld": "b3c9c3c182f1fead0f47ef560e90fcc86042ea7f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.08,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,46 @@\n     protected void render(Block html) {\n       if (!isValidRequest()) {\n         html.\n           h2($(TITLE));\n         return;\n       }\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n       table(\"#attempts\").\n         thead().\n           tr().\n             th(\".id\", \"Attempt\").\n-            th(\".progress\", \"Progress\").\n             th(\".state\", \"State\").\n             th(\".node\", \"node\").\n             th(\".tsh\", \"Started\").\n             th(\".tsh\", \"Finished\").\n             th(\".tsh\", \"Elapsed\").\n             th(\".note\", \"Note\")._()._().\n         tbody();\n       for (TaskAttempt ta : getTaskAttempts()) {\n         String taid \u003d MRApps.toString(ta.getID());\n-        String progress \u003d percent(ta.getProgress());\n         ContainerId containerId \u003d ta.getAssignedContainerID();\n \n         String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n         long startTime \u003d ta.getLaunchTime();\n         long finishTime \u003d ta.getFinishTime();\n         long elapsed \u003d Times.elapsed(startTime, finishTime);\n         TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e nodeTd \u003d tbody.\n           tr().\n             td(\".id\", taid).\n-            td(\".progress\", progress).\n             td(\".state\", ta.getState().toString()).\n             td().\n               a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n         if (containerId !\u003d null) {\n           String containerIdStr \u003d ConverterUtils.toString(containerId);\n           nodeTd._(\" \").\n             a(\".logslink\", url(\"http://\", nodeHttpAddr, \"yarn\", \"containerlogs\",\n               containerIdStr), \"logs\");\n         }\n         nodeTd._().\n           td(\".ts\", Times.format(startTime)).\n           td(\".ts\", Times.format(finishTime)).\n           td(\".dt\", StringUtils.formatTime(elapsed)).\n           td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()))._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr().\n            th(\".id\", \"Attempt\").\n            th(\".state\", \"State\").\n            th(\".node\", \"node\").\n            th(\".tsh\", \"Started\").\n            th(\".tsh\", \"Finished\").\n            th(\".tsh\", \"Elapsed\").\n            th(\".note\", \"Note\")._()._().\n        tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n        ContainerId containerId \u003d ta.getAssignedContainerID();\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        long startTime \u003d ta.getLaunchTime();\n        long finishTime \u003d ta.getFinishTime();\n        long elapsed \u003d Times.elapsed(startTime, finishTime);\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e nodeTd \u003d tbody.\n          tr().\n            td(\".id\", taid).\n            td(\".state\", ta.getState().toString()).\n            td().\n              a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n        if (containerId !\u003d null) {\n          String containerIdStr \u003d ConverterUtils.toString(containerId);\n          nodeTd._(\" \").\n            a(\".logslink\", url(\"http://\", nodeHttpAddr, \"yarn\", \"containerlogs\",\n              containerIdStr), \"logs\");\n        }\n        nodeTd._().\n          td(\".ts\", Times.format(startTime)).\n          td(\".ts\", Times.format(finishTime)).\n          td(\".dt\", StringUtils.formatTime(elapsed)).\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()))._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java",
      "extendedDetails": {}
    },
    "b3c9c3c182f1fead0f47ef560e90fcc86042ea7f": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2677. Fixed 404 for some links from HistoryServer. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166901 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 1:59 PM",
      "commitName": "b3c9c3c182f1fead0f47ef560e90fcc86042ea7f",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,49 @@\n+    protected void render(Block html) {\n+      if (!isValidRequest()) {\n+        html.\n+          h2($(TITLE));\n+        return;\n+      }\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n+      table(\"#attempts\").\n+        thead().\n+          tr().\n+            th(\".id\", \"Attempt\").\n+            th(\".progress\", \"Progress\").\n+            th(\".state\", \"State\").\n+            th(\".node\", \"node\").\n+            th(\".tsh\", \"Started\").\n+            th(\".tsh\", \"Finished\").\n+            th(\".tsh\", \"Elapsed\").\n+            th(\".note\", \"Note\")._()._().\n+        tbody();\n+      for (TaskAttempt ta : getTaskAttempts()) {\n+        String taid \u003d MRApps.toString(ta.getID());\n+        String progress \u003d percent(ta.getProgress());\n+        ContainerId containerId \u003d ta.getAssignedContainerID();\n+\n+        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n+        long startTime \u003d ta.getLaunchTime();\n+        long finishTime \u003d ta.getFinishTime();\n+        long elapsed \u003d Times.elapsed(startTime, finishTime);\n+        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e nodeTd \u003d tbody.\n+          tr().\n+            td(\".id\", taid).\n+            td(\".progress\", progress).\n+            td(\".state\", ta.getState().toString()).\n+            td().\n+              a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n+        if (containerId !\u003d null) {\n+          String containerIdStr \u003d ConverterUtils.toString(containerId);\n+          nodeTd._(\" \").\n+            a(\".logslink\", url(\"http://\", nodeHttpAddr, \"yarn\", \"containerlogs\",\n+              containerIdStr), \"logs\");\n+        }\n+        nodeTd._().\n+          td(\".ts\", Times.format(startTime)).\n+          td(\".ts\", Times.format(finishTime)).\n+          td(\".dt\", StringUtils.formatTime(elapsed)).\n+          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()))._();\n+      }\n+      tbody._()._();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      if (!isValidRequest()) {\n        html.\n          h2($(TITLE));\n        return;\n      }\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.\n      table(\"#attempts\").\n        thead().\n          tr().\n            th(\".id\", \"Attempt\").\n            th(\".progress\", \"Progress\").\n            th(\".state\", \"State\").\n            th(\".node\", \"node\").\n            th(\".tsh\", \"Started\").\n            th(\".tsh\", \"Finished\").\n            th(\".tsh\", \"Elapsed\").\n            th(\".note\", \"Note\")._()._().\n        tbody();\n      for (TaskAttempt ta : getTaskAttempts()) {\n        String taid \u003d MRApps.toString(ta.getID());\n        String progress \u003d percent(ta.getProgress());\n        ContainerId containerId \u003d ta.getAssignedContainerID();\n\n        String nodeHttpAddr \u003d ta.getNodeHttpAddress();\n        long startTime \u003d ta.getLaunchTime();\n        long finishTime \u003d ta.getFinishTime();\n        long elapsed \u003d Times.elapsed(startTime, finishTime);\n        TD\u003cTR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e\u003e nodeTd \u003d tbody.\n          tr().\n            td(\".id\", taid).\n            td(\".progress\", progress).\n            td(\".state\", ta.getState().toString()).\n            td().\n              a(\".nodelink\", url(\"http://\", nodeHttpAddr), nodeHttpAddr);\n        if (containerId !\u003d null) {\n          String containerIdStr \u003d ConverterUtils.toString(containerId);\n          nodeTd._(\" \").\n            a(\".logslink\", url(\"http://\", nodeHttpAddr, \"yarn\", \"containerlogs\",\n              containerIdStr), \"logs\");\n        }\n        nodeTd._().\n          td(\".ts\", Times.format(startTime)).\n          td(\".ts\", Times.format(finishTime)).\n          td(\".dt\", StringUtils.formatTime(elapsed)).\n          td(\".note\", Joiner.on(\u0027\\n\u0027).join(ta.getDiagnostics()))._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/webapp/HsTaskPage.java"
    }
  }
}