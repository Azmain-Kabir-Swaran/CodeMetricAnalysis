{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbfsConfiguration.java",
  "functionName": "getSASTokenProvider",
  "functionId": "getSASTokenProvider",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
  "functionStartLine": 705,
  "functionEndLine": 733,
  "numCommitsSeen": 33,
  "timeTaken": 1668,
  "changeHistory": [
    "4c5cd751e3911e350c7437dcb28c0ed67735f635",
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc"
  ],
  "changeHistoryShort": {
    "4c5cd751e3911e350c7437dcb28c0ed67735f635": "Ybodychange",
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c5cd751e3911e350c7437dcb28c0ed67735f635": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-17053. ABFS: Fix Account-specific OAuth config setting parsing\n\nContributed by Sneha Vijayarajan",
      "commitDate": "27/05/20 1:56 PM",
      "commitName": "4c5cd751e3911e350c7437dcb28c0ed67735f635",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "19/05/20 12:30 PM",
      "commitNameOld": "8f78aeb2500011e568929b585ed5b0987355f88d",
      "commitAuthorOld": "Sneha Vijayarajan",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public SASTokenProvider getSASTokenProvider() throws AzureBlobFileSystemException {\n     AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n     if (authType !\u003d AuthType.SAS) {\n       throw new SASTokenProviderException(String.format(\n         \"Invalid auth type: %s is being used, expecting SAS\", authType));\n     }\n \n     try {\n       String configKey \u003d FS_AZURE_SAS_TOKEN_PROVIDER_TYPE;\n       Class\u003c? extends SASTokenProvider\u003e sasTokenProviderClass \u003d\n-          getClass(configKey, null, SASTokenProvider.class);\n+          getTokenProviderClass(authType, configKey, null,\n+              SASTokenProvider.class);\n+\n       Preconditions.checkArgument(sasTokenProviderClass !\u003d null,\n           String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n \n       SASTokenProvider sasTokenProvider \u003d ReflectionUtils\n           .newInstance(sasTokenProviderClass, rawConfig);\n       Preconditions.checkArgument(sasTokenProvider !\u003d null,\n           String.format(\"Failed to initialize %s\", sasTokenProviderClass));\n \n       LOG.trace(\"Initializing {}\", sasTokenProviderClass.getName());\n       sasTokenProvider.initialize(rawConfig, accountName);\n       LOG.trace(\"{} init complete\", sasTokenProviderClass.getName());\n       return sasTokenProvider;\n     } catch (Exception e) {\n       throw new TokenAccessProviderException(\"Unable to load SAS token provider class: \" + e, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SASTokenProvider getSASTokenProvider() throws AzureBlobFileSystemException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType !\u003d AuthType.SAS) {\n      throw new SASTokenProviderException(String.format(\n        \"Invalid auth type: %s is being used, expecting SAS\", authType));\n    }\n\n    try {\n      String configKey \u003d FS_AZURE_SAS_TOKEN_PROVIDER_TYPE;\n      Class\u003c? extends SASTokenProvider\u003e sasTokenProviderClass \u003d\n          getTokenProviderClass(authType, configKey, null,\n              SASTokenProvider.class);\n\n      Preconditions.checkArgument(sasTokenProviderClass !\u003d null,\n          String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n\n      SASTokenProvider sasTokenProvider \u003d ReflectionUtils\n          .newInstance(sasTokenProviderClass, rawConfig);\n      Preconditions.checkArgument(sasTokenProvider !\u003d null,\n          String.format(\"Failed to initialize %s\", sasTokenProviderClass));\n\n      LOG.trace(\"Initializing {}\", sasTokenProviderClass.getName());\n      sasTokenProvider.initialize(rawConfig, accountName);\n      LOG.trace(\"{} init complete\", sasTokenProviderClass.getName());\n      return sasTokenProvider;\n    } catch (Exception e) {\n      throw new TokenAccessProviderException(\"Unable to load SAS token provider class: \" + e, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java",
      "extendedDetails": {}
    },
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.\n",
      "commitDate": "27/02/20 10:27 AM",
      "commitName": "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
      "commitAuthor": "Sneha Vijayarajan",
      "diff": "@@ -0,0 +1,27 @@\n+  public SASTokenProvider getSASTokenProvider() throws AzureBlobFileSystemException {\n+    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n+    if (authType !\u003d AuthType.SAS) {\n+      throw new SASTokenProviderException(String.format(\n+        \"Invalid auth type: %s is being used, expecting SAS\", authType));\n+    }\n+\n+    try {\n+      String configKey \u003d FS_AZURE_SAS_TOKEN_PROVIDER_TYPE;\n+      Class\u003c? extends SASTokenProvider\u003e sasTokenProviderClass \u003d\n+          getClass(configKey, null, SASTokenProvider.class);\n+      Preconditions.checkArgument(sasTokenProviderClass !\u003d null,\n+          String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n+\n+      SASTokenProvider sasTokenProvider \u003d ReflectionUtils\n+          .newInstance(sasTokenProviderClass, rawConfig);\n+      Preconditions.checkArgument(sasTokenProvider !\u003d null,\n+          String.format(\"Failed to initialize %s\", sasTokenProviderClass));\n+\n+      LOG.trace(\"Initializing {}\", sasTokenProviderClass.getName());\n+      sasTokenProvider.initialize(rawConfig, accountName);\n+      LOG.trace(\"{} init complete\", sasTokenProviderClass.getName());\n+      return sasTokenProvider;\n+    } catch (Exception e) {\n+      throw new TokenAccessProviderException(\"Unable to load SAS token provider class: \" + e, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SASTokenProvider getSASTokenProvider() throws AzureBlobFileSystemException {\n    AuthType authType \u003d getEnum(FS_AZURE_ACCOUNT_AUTH_TYPE_PROPERTY_NAME, AuthType.SharedKey);\n    if (authType !\u003d AuthType.SAS) {\n      throw new SASTokenProviderException(String.format(\n        \"Invalid auth type: %s is being used, expecting SAS\", authType));\n    }\n\n    try {\n      String configKey \u003d FS_AZURE_SAS_TOKEN_PROVIDER_TYPE;\n      Class\u003c? extends SASTokenProvider\u003e sasTokenProviderClass \u003d\n          getClass(configKey, null, SASTokenProvider.class);\n      Preconditions.checkArgument(sasTokenProviderClass !\u003d null,\n          String.format(\"The configuration value for \\\"%s\\\" is invalid.\", configKey));\n\n      SASTokenProvider sasTokenProvider \u003d ReflectionUtils\n          .newInstance(sasTokenProviderClass, rawConfig);\n      Preconditions.checkArgument(sasTokenProvider !\u003d null,\n          String.format(\"Failed to initialize %s\", sasTokenProviderClass));\n\n      LOG.trace(\"Initializing {}\", sasTokenProviderClass.getName());\n      sasTokenProvider.initialize(rawConfig, accountName);\n      LOG.trace(\"{} init complete\", sasTokenProviderClass.getName());\n      return sasTokenProvider;\n    } catch (Exception e) {\n      throw new TokenAccessProviderException(\"Unable to load SAS token provider class: \" + e, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AbfsConfiguration.java"
    }
  }
}