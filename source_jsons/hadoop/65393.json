{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3Guard.java",
  "functionName": "getMetadataStore",
  "functionId": "getMetadataStore___fs-FileSystem__ttlTimeProvider-ITtlTimeProvider",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java",
  "functionStartLine": 113,
  "functionEndLine": 143,
  "numCommitsSeen": 39,
  "timeTaken": 2985,
  "changeHistory": [
    "c58e11bf521d746842ce16724211a2a0339d7b61",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "c58e11bf521d746842ce16724211a2a0339d7b61": "Ymultichange(Yparameterchange,Ybodychange)",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c58e11bf521d746842ce16724211a2a0339d7b61": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
      "commitDate": "17/07/19 7:24 AM",
      "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
          "commitDate": "17/07/19 7:24 AM",
          "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "08/07/19 10:27 AM",
          "commitNameOld": "de6b7bc67ace7744adb0320ee7de79cf28259d2d",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 8.87,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  public static MetadataStore getMetadataStore(FileSystem fs)\n+  public static MetadataStore getMetadataStore(FileSystem fs,\n+      ITtlTimeProvider ttlTimeProvider)\n       throws IOException {\n     Preconditions.checkNotNull(fs);\n     Configuration conf \u003d fs.getConf();\n     Preconditions.checkNotNull(conf);\n     MetadataStore msInstance;\n     try {\n       Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n       msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n       LOG.debug(\"Using {} metadata store for {} filesystem\",\n           msClass.getSimpleName(), fs.getScheme());\n-      msInstance.initialize(fs);\n+      msInstance.initialize(fs, ttlTimeProvider);\n       return msInstance;\n     } catch (FileNotFoundException e) {\n       // Don\u0027t log this exception as it means the table doesn\u0027t exist yet;\n       // rely on callers to catch and treat specially\n       throw e;\n     } catch (RuntimeException | IOException e) {\n       String message \u003d \"Failed to instantiate metadata store \" +\n           conf.get(S3_METADATA_STORE_IMPL)\n           + \" defined in \" + S3_METADATA_STORE_IMPL\n           + \": \" + e;\n       LOG.error(message, e);\n       if (e instanceof IOException) {\n         throw e;\n       } else {\n         throw new IOException(message, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static MetadataStore getMetadataStore(FileSystem fs,\n      ITtlTimeProvider ttlTimeProvider)\n      throws IOException {\n    Preconditions.checkNotNull(fs);\n    Configuration conf \u003d fs.getConf();\n    Preconditions.checkNotNull(conf);\n    MetadataStore msInstance;\n    try {\n      Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n      msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n      LOG.debug(\"Using {} metadata store for {} filesystem\",\n          msClass.getSimpleName(), fs.getScheme());\n      msInstance.initialize(fs, ttlTimeProvider);\n      return msInstance;\n    } catch (FileNotFoundException e) {\n      // Don\u0027t log this exception as it means the table doesn\u0027t exist yet;\n      // rely on callers to catch and treat specially\n      throw e;\n    } catch (RuntimeException | IOException e) {\n      String message \u003d \"Failed to instantiate metadata store \" +\n          conf.get(S3_METADATA_STORE_IMPL)\n          + \" defined in \" + S3_METADATA_STORE_IMPL\n          + \": \" + e;\n      LOG.error(message, e);\n      if (e instanceof IOException) {\n        throw e;\n      } else {\n        throw new IOException(message, e);\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java",
          "extendedDetails": {
            "oldValue": "[fs-FileSystem]",
            "newValue": "[fs-FileSystem, ttlTimeProvider-ITtlTimeProvider]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16383. Pass ITtlTimeProvider instance in initialize method in MetadataStore interface.  Contributed by Gabor Bota. (#1009) \n\n\r\n",
          "commitDate": "17/07/19 7:24 AM",
          "commitName": "c58e11bf521d746842ce16724211a2a0339d7b61",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "08/07/19 10:27 AM",
          "commitNameOld": "de6b7bc67ace7744adb0320ee7de79cf28259d2d",
          "commitAuthorOld": "Sean Mackrory",
          "daysBetweenCommits": 8.87,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  public static MetadataStore getMetadataStore(FileSystem fs)\n+  public static MetadataStore getMetadataStore(FileSystem fs,\n+      ITtlTimeProvider ttlTimeProvider)\n       throws IOException {\n     Preconditions.checkNotNull(fs);\n     Configuration conf \u003d fs.getConf();\n     Preconditions.checkNotNull(conf);\n     MetadataStore msInstance;\n     try {\n       Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n       msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n       LOG.debug(\"Using {} metadata store for {} filesystem\",\n           msClass.getSimpleName(), fs.getScheme());\n-      msInstance.initialize(fs);\n+      msInstance.initialize(fs, ttlTimeProvider);\n       return msInstance;\n     } catch (FileNotFoundException e) {\n       // Don\u0027t log this exception as it means the table doesn\u0027t exist yet;\n       // rely on callers to catch and treat specially\n       throw e;\n     } catch (RuntimeException | IOException e) {\n       String message \u003d \"Failed to instantiate metadata store \" +\n           conf.get(S3_METADATA_STORE_IMPL)\n           + \" defined in \" + S3_METADATA_STORE_IMPL\n           + \": \" + e;\n       LOG.error(message, e);\n       if (e instanceof IOException) {\n         throw e;\n       } else {\n         throw new IOException(message, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static MetadataStore getMetadataStore(FileSystem fs,\n      ITtlTimeProvider ttlTimeProvider)\n      throws IOException {\n    Preconditions.checkNotNull(fs);\n    Configuration conf \u003d fs.getConf();\n    Preconditions.checkNotNull(conf);\n    MetadataStore msInstance;\n    try {\n      Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n      msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n      LOG.debug(\"Using {} metadata store for {} filesystem\",\n          msClass.getSimpleName(), fs.getScheme());\n      msInstance.initialize(fs, ttlTimeProvider);\n      return msInstance;\n    } catch (FileNotFoundException e) {\n      // Don\u0027t log this exception as it means the table doesn\u0027t exist yet;\n      // rely on callers to catch and treat specially\n      throw e;\n    } catch (RuntimeException | IOException e) {\n      String message \u003d \"Failed to instantiate metadata store \" +\n          conf.get(S3_METADATA_STORE_IMPL)\n          + \" defined in \" + S3_METADATA_STORE_IMPL\n          + \": \" + e;\n      LOG.error(message, e);\n      if (e instanceof IOException) {\n        throw e;\n      } else {\n        throw new IOException(message, e);\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java",
          "extendedDetails": {}
        }
      ]
    },
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
      "commitDate": "25/09/17 3:59 PM",
      "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "01/09/17 6:13 AM",
      "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 24.41,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,30 @@\n   public static MetadataStore getMetadataStore(FileSystem fs)\n       throws IOException {\n     Preconditions.checkNotNull(fs);\n     Configuration conf \u003d fs.getConf();\n     Preconditions.checkNotNull(conf);\n     MetadataStore msInstance;\n     try {\n       Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n       msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n       LOG.debug(\"Using {} metadata store for {} filesystem\",\n           msClass.getSimpleName(), fs.getScheme());\n       msInstance.initialize(fs);\n       return msInstance;\n+    } catch (FileNotFoundException e) {\n+      // Don\u0027t log this exception as it means the table doesn\u0027t exist yet;\n+      // rely on callers to catch and treat specially\n+      throw e;\n     } catch (RuntimeException | IOException e) {\n       String message \u003d \"Failed to instantiate metadata store \" +\n           conf.get(S3_METADATA_STORE_IMPL)\n           + \" defined in \" + S3_METADATA_STORE_IMPL\n           + \": \" + e;\n       LOG.error(message, e);\n       if (e instanceof IOException) {\n         throw e;\n       } else {\n         throw new IOException(message, e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static MetadataStore getMetadataStore(FileSystem fs)\n      throws IOException {\n    Preconditions.checkNotNull(fs);\n    Configuration conf \u003d fs.getConf();\n    Preconditions.checkNotNull(conf);\n    MetadataStore msInstance;\n    try {\n      Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n      msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n      LOG.debug(\"Using {} metadata store for {} filesystem\",\n          msClass.getSimpleName(), fs.getScheme());\n      msInstance.initialize(fs);\n      return msInstance;\n    } catch (FileNotFoundException e) {\n      // Don\u0027t log this exception as it means the table doesn\u0027t exist yet;\n      // rely on callers to catch and treat specially\n      throw e;\n    } catch (RuntimeException | IOException e) {\n      String message \u003d \"Failed to instantiate metadata store \" +\n          conf.get(S3_METADATA_STORE_IMPL)\n          + \" defined in \" + S3_METADATA_STORE_IMPL\n          + \": \" + e;\n      LOG.error(message, e);\n      if (e instanceof IOException) {\n        throw e;\n      } else {\n        throw new IOException(message, e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,26 @@\n+  public static MetadataStore getMetadataStore(FileSystem fs)\n+      throws IOException {\n+    Preconditions.checkNotNull(fs);\n+    Configuration conf \u003d fs.getConf();\n+    Preconditions.checkNotNull(conf);\n+    MetadataStore msInstance;\n+    try {\n+      Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n+      msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n+      LOG.debug(\"Using {} metadata store for {} filesystem\",\n+          msClass.getSimpleName(), fs.getScheme());\n+      msInstance.initialize(fs);\n+      return msInstance;\n+    } catch (RuntimeException | IOException e) {\n+      String message \u003d \"Failed to instantiate metadata store \" +\n+          conf.get(S3_METADATA_STORE_IMPL)\n+          + \" defined in \" + S3_METADATA_STORE_IMPL\n+          + \": \" + e;\n+      LOG.error(message, e);\n+      if (e instanceof IOException) {\n+        throw e;\n+      } else {\n+        throw new IOException(message, e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static MetadataStore getMetadataStore(FileSystem fs)\n      throws IOException {\n    Preconditions.checkNotNull(fs);\n    Configuration conf \u003d fs.getConf();\n    Preconditions.checkNotNull(conf);\n    MetadataStore msInstance;\n    try {\n      Class\u003c? extends MetadataStore\u003e msClass \u003d getMetadataStoreClass(conf);\n      msInstance \u003d ReflectionUtils.newInstance(msClass, conf);\n      LOG.debug(\"Using {} metadata store for {} filesystem\",\n          msClass.getSimpleName(), fs.getScheme());\n      msInstance.initialize(fs);\n      return msInstance;\n    } catch (RuntimeException | IOException e) {\n      String message \u003d \"Failed to instantiate metadata store \" +\n          conf.get(S3_METADATA_STORE_IMPL)\n          + \" defined in \" + S3_METADATA_STORE_IMPL\n          + \": \" + e;\n      LOG.error(message, e);\n      if (e instanceof IOException) {\n        throw e;\n      } else {\n        throw new IOException(message, e);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java"
    }
  }
}