{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getEntities",
  "functionId": "getEntities___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__clusterId-String(annotations-@PathParam(\"clusterid\"))__appId-String(annotations-@PathParam(\"appid\"))__entityType-String(annotations-@PathParam(\"entitytype\"))__userId-String(annotations-@QueryParam(\"userid\"))__flowName-String(annotations-@QueryParam(\"flowname\"))__flowRunId-String(annotations-@QueryParam(\"flowrunid\"))__limit-String(annotations-@QueryParam(\"limit\"))__createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\"))__createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\"))__relatesTo-String(annotations-@QueryParam(\"relatesto\"))__isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\"))__infofilters-String(annotations-@QueryParam(\"infofilters\"))__conffilters-String(annotations-@QueryParam(\"conffilters\"))__metricfilters-String(annotations-@QueryParam(\"metricfilters\"))__eventfilters-String(annotations-@QueryParam(\"eventfilters\"))__confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\"))__metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\"))__fields-String(annotations-@QueryParam(\"fields\"))__metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))__metricsTimeStart-String(annotations-@QueryParam(\"metricstimestart\"))__metricsTimeEnd-String(annotations-@QueryParam(\"metricstimeend\"))__fromId-String(annotations-@QueryParam(\"fromid\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 614,
  "functionEndLine": 680,
  "numCommitsSeen": 147,
  "timeTaken": 8628,
  "changeHistory": [
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
    "02a9710a099fc9572122d87dd3e90c78522f5836",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "8ef546c1ee9fce0b171813547253374d268566ba",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
    "451c13b1de1e42394a4c92888192da9a9519d9ac"
  ],
  "changeHistoryShort": {
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65": "Ybodychange",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": "Ybodychange",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": "Ymultichange(Yparameterchange,Ybodychange)",
    "02a9710a099fc9572122d87dd3e90c78522f5836": "Ymultichange(Yparameterchange,Ybodychange)",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": "Ymultichange(Yparameterchange,Ybodychange)",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": "Ymultichange(Yparameterchange,Ybodychange)",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Ybodychange",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ymultichange(Yparameterchange,Ybodychange)",
    "8ef546c1ee9fce0b171813547253374d268566ba": "Ymultichange(Yparameterchange,Ybodychange)",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": "Ybodychange",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": "Ybodychange",
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1": "Ybodychange",
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0": "Ymultichange(Ybodychange,Yparametermetachange)",
    "451c13b1de1e42394a4c92888192da9a9519d9ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7627. [ATSv2] When passing a non-number as metricslimit, the error message is wrong. Contributed by Charan Hebri.\n",
      "commitDate": "06/02/19 8:28 PM",
      "commitName": "1e5e08d83b8dc168e636e0834584fecf5d44cb65",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "27/09/18 3:53 PM",
      "commitNameOld": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 132.23,
      "commitsBetweenForRepo": 983,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils\n               .createTimelineEntityFilters(limit, createdTimeStart,\n                   createdTimeEnd, relatesTo, isRelatedTo, infofilters,\n                   conffilters, metricfilters, eventfilters, fromId),\n           TimelineReaderWebServicesUtils\n               .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,\n                   fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\n \n       checkAccessForGenericEntities(entities, callerUGI, entityType);\n       succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n-          \"createdTime start/end or limit or flowrunid\");\n+          \"Either flowrunid or limit or createdtime start/end or metricslimit\"\n+              + \" or metricstime start/end or fromid\");\n     } finally {\n       long latency \u003d Time.monotonicNow() - startTime;\n       METRICS.addGetEntitiesLatency(latency, succeeded);\n       LOG.info(\"Processed URL \" + url +\n           \" (Took \" + latency + \" ms.)\");\n     }\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils\n              .createTimelineEntityFilters(limit, createdTimeStart,\n                  createdTimeEnd, relatesTo, isRelatedTo, infofilters,\n                  conffilters, metricfilters, eventfilters, fromId),\n          TimelineReaderWebServicesUtils\n              .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,\n                  fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\n\n      checkAccessForGenericEntities(entities, callerUGI, entityType);\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"Either flowrunid or limit or createdtime start/end or metricslimit\"\n              + \" or metricstime start/end or fromid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,66 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils\n               .createTimelineEntityFilters(limit, createdTimeStart,\n                   createdTimeEnd, relatesTo, isRelatedTo, infofilters,\n                   conffilters, metricfilters, eventfilters, fromId),\n           TimelineReaderWebServicesUtils\n               .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,\n                   fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\n \n       checkAccessForGenericEntities(entities, callerUGI, entityType);\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntitiesLatency(latency, succeeded);\n+      LOG.info(\"Processed URL \" + url +\n+          \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n-    LOG.info(\"Processed URL \" + url +\n-        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils\n              .createTimelineEntityFilters(limit, createdTimeStart,\n                  createdTimeEnd, relatesTo, isRelatedTo, infofilters,\n                  conffilters, metricfilters, eventfilters, fromId),\n          TimelineReaderWebServicesUtils\n              .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,\n                  fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\n\n      checkAccessForGenericEntities(entities, callerUGI, entityType);\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8455. Add basic ACL check for all ATS v2 REST APIs. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/06/18 10:02 AM",
      "commitName": "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/06/18 8:59 PM",
      "commitNameOld": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 27.54,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,62 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n-          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n-          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n-              infofilters, conffilters, metricfilters, eventfilters,\n-              fromId),\n-          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n-          metricsTimeStart, metricsTimeEnd));\n+          TimelineReaderWebServicesUtils\n+              .createTimelineEntityFilters(limit, createdTimeStart,\n+                  createdTimeEnd, relatesTo, isRelatedTo, infofilters,\n+                  conffilters, metricfilters, eventfilters, fromId),\n+          TimelineReaderWebServicesUtils\n+              .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,\n+                  fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\n+\n+      checkAccessForGenericEntities(entities, callerUGI, entityType);\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils\n              .createTimelineEntityFilters(limit, createdTimeStart,\n                  createdTimeEnd, relatesTo, isRelatedTo, infofilters,\n                  conffilters, metricfilters, eventfilters, fromId),\n          TimelineReaderWebServicesUtils\n              .createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve,\n                  fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\n\n      checkAccessForGenericEntities(entities, callerUGI, entityType);\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,60 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n+      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n+          metricsTimeStart, metricsTimeEnd));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromId-String(annotations-@QueryParam(\"fromid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), metricsTimeStart-String(annotations-@QueryParam(\"metricstimestart\")), metricsTimeEnd-String(annotations-@QueryParam(\"metricstimeend\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,60 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n+      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n+          metricsTimeStart, metricsTimeEnd));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n-      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n-              fromIdPrefix, fromId),\n+              fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromIdPrefix-String(annotations-@QueryParam(\"fromidprefix\")), fromId-String(annotations-@QueryParam(\"fromid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n-      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n               appId, entityType, null, null);\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n-              fromIdPrefix, fromId),\n+              fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "02a9710a099fc9572122d87dd3e90c78522f5836": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,58 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n-      @QueryParam(\"metricslimit\") String metricsLimit) {\n+      @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n-      entities \u003d timelineReaderManager.getEntities(\n-          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n-          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n+      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n+          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n+              appId, entityType, null, null);\n+      entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n-          infofilters, conffilters, metricfilters, eventfilters),\n+              infofilters, conffilters, metricfilters, eventfilters,\n+              fromIdPrefix, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromIdPrefix, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromIdPrefix-String(annotations-@QueryParam(\"fromidprefix\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,58 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n-      @QueryParam(\"metricslimit\") String metricsLimit) {\n+      @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n-      entities \u003d timelineReaderManager.getEntities(\n-          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n-          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n+      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n+          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n+              appId, entityType, null, null);\n+      entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n-          infofilters, conffilters, metricfilters, eventfilters),\n+              infofilters, conffilters, metricfilters, eventfilters,\n+              fromIdPrefix, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, userId, flowName, flowRunId,\n              appId, entityType, null, null);\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromIdPrefix, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"metricslimit\") String metricsLimit) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, userId, flowName, flowRunId, appId, entityType, null),\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"metricslimit\") String metricsLimit) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, userId, flowName, flowRunId, appId, entityType, null),\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,53 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n+      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, userId, flowName, flowRunId, appId, entityType, null),\n-\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, null, fields));\n+          confsToRetrieve, metricsToRetrieve, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,53 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n+      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           TimelineReaderWebServicesUtils.createTimelineReaderContext(\n           clusterId, userId, flowName, flowRunId, appId, entityType, null),\n-\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, null, fields));\n+          confsToRetrieve, metricsToRetrieve, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,52 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          TimelineReaderWebServicesUtils.parseStr(userId),\n-          TimelineReaderWebServicesUtils.parseStr(clusterId),\n-          TimelineReaderWebServicesUtils.parseStr(flowName),\n-          TimelineReaderWebServicesUtils.parseLongStr(flowRunId),\n-          TimelineReaderWebServicesUtils.parseStr(appId),\n-          TimelineReaderWebServicesUtils.parseStr(entityType),\n-          TimelineReaderWebServicesUtils.parseLongStr(limit),\n-          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n-          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n-          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n-          relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n-          isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseKeyStrValueObj(\n-          infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseKeyStrValueStr(\n-          conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseValuesStr(\n-          metricfilters, COMMA_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseValuesStr(\n-          eventfilters, COMMA_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseFieldsStr(\n-          fields, COMMA_DELIMITER));\n+          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n+          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n+\n+          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n+          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n+          infofilters, conffilters, metricfilters, eventfilters),\n+          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n+          null, null, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.createTimelineReaderContext(\n          clusterId, userId, flowName, flowRunId, appId, entityType, null),\n\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, null, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,67 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n-          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n-          parseLongStr(limit), parseLongStr(createdTimeStart),\n-          parseLongStr(createdTimeEnd),\n-          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n-          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n-          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n-          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n-          parseValuesStr(metricfilters, COMMA_DELIMITER),\n-          parseValuesStr(eventfilters, COMMA_DELIMITER),\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+          TimelineReaderWebServicesUtils.parseStr(userId),\n+          TimelineReaderWebServicesUtils.parseStr(clusterId),\n+          TimelineReaderWebServicesUtils.parseStr(flowName),\n+          TimelineReaderWebServicesUtils.parseLongStr(flowRunId),\n+          TimelineReaderWebServicesUtils.parseStr(appId),\n+          TimelineReaderWebServicesUtils.parseStr(entityType),\n+          TimelineReaderWebServicesUtils.parseLongStr(limit),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n+          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n+          relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n+          isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseKeyStrValueObj(\n+          infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseKeyStrValueStr(\n+          conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseValuesStr(\n+          metricfilters, COMMA_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseValuesStr(\n+          eventfilters, COMMA_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseFieldsStr(\n+          fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.parseStr(userId),\n          TimelineReaderWebServicesUtils.parseStr(clusterId),\n          TimelineReaderWebServicesUtils.parseStr(flowName),\n          TimelineReaderWebServicesUtils.parseLongStr(flowRunId),\n          TimelineReaderWebServicesUtils.parseStr(appId),\n          TimelineReaderWebServicesUtils.parseStr(entityType),\n          TimelineReaderWebServicesUtils.parseLongStr(limit),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n          relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n          isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseKeyStrValueObj(\n          infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseKeyStrValueStr(\n          conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseValuesStr(\n          metricfilters, COMMA_DELIMITER),\n          TimelineReaderWebServicesUtils.parseValuesStr(\n          eventfilters, COMMA_DELIMITER),\n          TimelineReaderWebServicesUtils.parseFieldsStr(\n          fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,53 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n-      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n-      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           parseStr(userId), parseStr(clusterId), parseStr(flowName),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n-          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n-          parseLongStr(modifiedTimeEnd),\n+          parseLongStr(createdTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n-          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n+          \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), modifiedTimeStart-String(annotations-@QueryParam(\"modifiedtimestart\")), modifiedTimeEnd-String(annotations-@QueryParam(\"modifiedtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthor": "Naganarasimha",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthorOld": "Li Lu",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,53 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n-      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n-      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           parseStr(userId), parseStr(clusterId), parseStr(flowName),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n-          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n-          parseLongStr(modifiedTimeEnd),\n+          parseLongStr(createdTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n-          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n+          \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "8ef546c1ee9fce0b171813547253374d268566ba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,56 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n-      @QueryParam(\"flowid\") String flowId,\n+      @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n       @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowId),\n+          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime or modifiedTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowId-String(annotations-@QueryParam(\"flowid\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), modifiedTimeStart-String(annotations-@QueryParam(\"modifiedtimestart\")), modifiedTimeEnd-String(annotations-@QueryParam(\"modifiedtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowName-String(annotations-@QueryParam(\"flowname\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), modifiedTimeStart-String(annotations-@QueryParam(\"modifiedtimestart\")), modifiedTimeEnd-String(annotations-@QueryParam(\"modifiedtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,56 +1,56 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n-      @QueryParam(\"flowid\") String flowId,\n+      @QueryParam(\"flowname\") String flowName,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n       @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowId),\n+          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime or modifiedTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowname\") String flowName,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowid\") String flowId,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n       @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n+          parseStr(userId), parseStr(clusterId), parseStr(flowId),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime or modifiedTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowid\") String flowId,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowId),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3864. Implement support for querying single app and all apps for a flow run (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowid\") String flowId,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n       @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n-        (null \u003d\u003d req.getQueryString() ? \"\" :\n+        (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n-          \"createdTime or modifiedTime start/end or limit or flowId\");\n+          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowid\") String flowId,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime or modifiedTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4203. Add request/response logging \u0026 timing for each REST endpoint call (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
      "commitAuthor": "Vrushali Channapattan",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,56 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"appid\") String appId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"flowid\") String flowId,\n       @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n       @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n+    String url \u003d req.getRequestURI() +\n+        (null \u003d\u003d req.getQueryString() ? \"\" :\n+            QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n-    UserGroupInformation callerUGI \u003d getUser(req);\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n-    } catch (NumberFormatException e) {\n-      throw new BadRequestException(\n-          \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n-          \" a numeric value.\");\n     } catch (Exception e) {\n-      handleException(e);\n+      handleException(e, url, startTime,\n+          \"createdTime or modifiedTime start/end or limit or flowId\");\n     }\n+    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n+    LOG.info(\"Processed URL \" + url +\n+        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowid\") String flowId,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (null \u003d\u003d req.getQueryString() ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime or modifiedTime start/end or limit or flowId\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-4075 [reader REST API] implement support for querying for flows and flow runs (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
      "commitAuthor": "Vrushali Channapattan",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4075 [reader REST API] implement support for querying for flows and flow runs (Varun Saxena via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
          "commitAuthor": "Vrushali Channapattan",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "451c13b1de1e42394a4c92888192da9a9519d9ac",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"clusterId\") String clusterId,\n-      @PathParam(\"appId\") String appId,\n-      @PathParam(\"entityType\") String entityType,\n-      @QueryParam(\"userId\") String userId,\n-      @QueryParam(\"flowId\") String flowId,\n-      @QueryParam(\"flowRunId\") String flowRunId,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @PathParam(\"appid\") String appId,\n+      @PathParam(\"entitytype\") String entityType,\n+      @QueryParam(\"userid\") String userId,\n+      @QueryParam(\"flowid\") String flowId,\n+      @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n-      @QueryParam(\"createdTimeStart\") String createdTimeStart,\n-      @QueryParam(\"createdTimeEnd\") String createdTimeEnd,\n-      @QueryParam(\"modifiedTimeStart\") String modifiedTimeStart,\n-      @QueryParam(\"modifiedTimeEnd\") String modifiedTimeEnd,\n+      @QueryParam(\"createdtimestart\") String createdTimeStart,\n+      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n+      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n+      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     UserGroupInformation callerUGI \u003d getUser(req);\n+    Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n-      return timelineReaderManager.getEntities(\n-          callerUGI !\u003d null \u0026\u0026 (userId \u003d\u003d null || userId.isEmpty()) ?\n-          callerUGI.getUserName().trim() : parseStr(userId),\n-          parseStr(clusterId), parseStr(flowId),\n+      entities \u003d timelineReaderManager.getEntities(\n+          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n           \" a numeric value.\");\n-    } catch (IllegalArgumentException e) {\n-      throw new BadRequestException(\"Requested Invalid Field.\");\n     } catch (Exception e) {\n-      LOG.error(\"Error getting entities\", e);\n-      throw new WebApplicationException(e,\n-          Response.Status.INTERNAL_SERVER_ERROR);\n+      handleException(e);\n     }\n+    if (entities \u003d\u003d null) {\n+      entities \u003d Collections.emptySet();\n+    }\n+    return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowid\") String flowId,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    UserGroupInformation callerUGI \u003d getUser(req);\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n          \" a numeric value.\");\n    } catch (Exception e) {\n      handleException(e);\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-4075 [reader REST API] implement support for querying for flows and flow runs (Varun Saxena via vrushali)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
          "commitAuthor": "Vrushali Channapattan",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "451c13b1de1e42394a4c92888192da9a9519d9ac",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"clusterId\") String clusterId,\n-      @PathParam(\"appId\") String appId,\n-      @PathParam(\"entityType\") String entityType,\n-      @QueryParam(\"userId\") String userId,\n-      @QueryParam(\"flowId\") String flowId,\n-      @QueryParam(\"flowRunId\") String flowRunId,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @PathParam(\"appid\") String appId,\n+      @PathParam(\"entitytype\") String entityType,\n+      @QueryParam(\"userid\") String userId,\n+      @QueryParam(\"flowid\") String flowId,\n+      @QueryParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"limit\") String limit,\n-      @QueryParam(\"createdTimeStart\") String createdTimeStart,\n-      @QueryParam(\"createdTimeEnd\") String createdTimeEnd,\n-      @QueryParam(\"modifiedTimeStart\") String modifiedTimeStart,\n-      @QueryParam(\"modifiedTimeEnd\") String modifiedTimeEnd,\n+      @QueryParam(\"createdtimestart\") String createdTimeStart,\n+      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n+      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n+      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     UserGroupInformation callerUGI \u003d getUser(req);\n+    Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n-      return timelineReaderManager.getEntities(\n-          callerUGI !\u003d null \u0026\u0026 (userId \u003d\u003d null || userId.isEmpty()) ?\n-          callerUGI.getUserName().trim() : parseStr(userId),\n-          parseStr(clusterId), parseStr(flowId),\n+      entities \u003d timelineReaderManager.getEntities(\n+          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n           parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n           parseLongStr(limit), parseLongStr(createdTimeStart),\n           parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n           parseLongStr(modifiedTimeEnd),\n           parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n           parseValuesStr(metricfilters, COMMA_DELIMITER),\n           parseValuesStr(eventfilters, COMMA_DELIMITER),\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n           \" a numeric value.\");\n-    } catch (IllegalArgumentException e) {\n-      throw new BadRequestException(\"Requested Invalid Field.\");\n     } catch (Exception e) {\n-      LOG.error(\"Error getting entities\", e);\n-      throw new WebApplicationException(e,\n-          Response.Status.INTERNAL_SERVER_ERROR);\n+      handleException(e);\n     }\n+    if (entities \u003d\u003d null) {\n+      entities \u003d Collections.emptySet();\n+    }\n+    return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"appid\") String appId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"flowid\") String flowId,\n      @QueryParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"modifiedtimestart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedtimeend\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    UserGroupInformation callerUGI \u003d getUser(req);\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n          \" a numeric value.\");\n    } catch (Exception e) {\n      handleException(e);\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterId\")), appId-String(annotations-@PathParam(\"appId\")), entityType-String(annotations-@PathParam(\"entityType\")), userId-String(annotations-@QueryParam(\"userId\")), flowId-String(annotations-@QueryParam(\"flowId\")), flowRunId-String(annotations-@QueryParam(\"flowRunId\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdTimeStart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdTimeEnd\")), modifiedTimeStart-String(annotations-@QueryParam(\"modifiedTimeStart\")), modifiedTimeEnd-String(annotations-@QueryParam(\"modifiedTimeEnd\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), appId-String(annotations-@PathParam(\"appid\")), entityType-String(annotations-@PathParam(\"entitytype\")), userId-String(annotations-@QueryParam(\"userid\")), flowId-String(annotations-@QueryParam(\"flowid\")), flowRunId-String(annotations-@QueryParam(\"flowrunid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), modifiedTimeStart-String(annotations-@QueryParam(\"modifiedtimestart\")), modifiedTimeEnd-String(annotations-@QueryParam(\"modifiedtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        }
      ]
    },
    "451c13b1de1e42394a4c92888192da9a9519d9ac": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3814. REST API implementation for getting raw entities in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "451c13b1de1e42394a4c92888192da9a9519d9ac",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,52 @@\n+  public Set\u003cTimelineEntity\u003e getEntities(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"clusterId\") String clusterId,\n+      @PathParam(\"appId\") String appId,\n+      @PathParam(\"entityType\") String entityType,\n+      @QueryParam(\"userId\") String userId,\n+      @QueryParam(\"flowId\") String flowId,\n+      @QueryParam(\"flowRunId\") String flowRunId,\n+      @QueryParam(\"limit\") String limit,\n+      @QueryParam(\"createdTimeStart\") String createdTimeStart,\n+      @QueryParam(\"createdTimeEnd\") String createdTimeEnd,\n+      @QueryParam(\"modifiedTimeStart\") String modifiedTimeStart,\n+      @QueryParam(\"modifiedTimeEnd\") String modifiedTimeEnd,\n+      @QueryParam(\"relatesto\") String relatesTo,\n+      @QueryParam(\"isrelatedto\") String isRelatedTo,\n+      @QueryParam(\"infofilters\") String infofilters,\n+      @QueryParam(\"conffilters\") String conffilters,\n+      @QueryParam(\"metricfilters\") String metricfilters,\n+      @QueryParam(\"eventfilters\") String eventfilters,\n+      @QueryParam(\"fields\") String fields) {\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    try {\n+      return timelineReaderManager.getEntities(\n+          callerUGI !\u003d null \u0026\u0026 (userId \u003d\u003d null || userId.isEmpty()) ?\n+          callerUGI.getUserName().trim() : parseStr(userId),\n+          parseStr(clusterId), parseStr(flowId),\n+          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n+          parseLongStr(limit), parseLongStr(createdTimeStart),\n+          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n+          parseLongStr(modifiedTimeEnd),\n+          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n+          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n+          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n+          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n+          parseValuesStr(metricfilters, COMMA_DELIMITER),\n+          parseValuesStr(eventfilters, COMMA_DELIMITER),\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n+    } catch (NumberFormatException e) {\n+      throw new BadRequestException(\n+          \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n+          \" a numeric value.\");\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"Requested Invalid Field.\");\n+    } catch (Exception e) {\n+      LOG.error(\"Error getting entities\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterId\") String clusterId,\n      @PathParam(\"appId\") String appId,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"userId\") String userId,\n      @QueryParam(\"flowId\") String flowId,\n      @QueryParam(\"flowRunId\") String flowRunId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdTimeStart\") String createdTimeStart,\n      @QueryParam(\"createdTimeEnd\") String createdTimeEnd,\n      @QueryParam(\"modifiedTimeStart\") String modifiedTimeStart,\n      @QueryParam(\"modifiedTimeEnd\") String modifiedTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    UserGroupInformation callerUGI \u003d getUser(req);\n    try {\n      return timelineReaderManager.getEntities(\n          callerUGI !\u003d null \u0026\u0026 (userId \u003d\u003d null || userId.isEmpty()) ?\n          callerUGI.getUserName().trim() : parseStr(userId),\n          parseStr(clusterId), parseStr(flowId),\n          parseLongStr(flowRunId), parseStr(appId), parseStr(entityType),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), parseLongStr(modifiedTimeStart),\n          parseLongStr(modifiedTimeEnd),\n          parseKeyStrValuesStr(relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValuesStr(isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueObj(infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseKeyStrValueStr(conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          parseValuesStr(metricfilters, COMMA_DELIMITER),\n          parseValuesStr(eventfilters, COMMA_DELIMITER),\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"createdTime or modifiedTime start/end or limit or flowId is not\" +\n          \" a numeric value.\");\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"Requested Invalid Field.\");\n    } catch (Exception e) {\n      LOG.error(\"Error getting entities\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}