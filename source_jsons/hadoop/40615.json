{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintProcessor.java",
  "functionName": "schedulePlacedRequests",
  "functionId": "schedulePlacedRequests___appAttemptId-ApplicationAttemptId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
  "functionStartLine": 210,
  "functionEndLine": 241,
  "numCommitsSeen": 7,
  "timeTaken": 1782,
  "changeHistory": [
    "0b489e564ce5a50324a530e29c18aa8a75276c50",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68"
  ],
  "changeHistoryShort": {
    "0b489e564ce5a50324a530e29c18aa8a75276c50": "Yfilerename",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b489e564ce5a50324a530e29c18aa8a75276c50": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7920. Simplify configuration for PlacementConstraints. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 2:23 PM",
      "commitName": "0b489e564ce5a50324a530e29c18aa8a75276c50",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void schedulePlacedRequests(ApplicationAttemptId appAttemptId) {\n    ApplicationId applicationId \u003d appAttemptId.getApplicationId();\n    List\u003cPlacedSchedulingRequest\u003e placedSchedulingRequests \u003d\n        this.placementDispatcher.pullPlacedRequests(applicationId);\n    for (PlacedSchedulingRequest placedReq : placedSchedulingRequests) {\n      SchedulingRequest sReq \u003d placedReq.getSchedulingRequest();\n      for (SchedulerNode node : placedReq.getNodes()) {\n        final SchedulingRequest sReqClone \u003d\n            SchedulingRequest.newInstance(sReq.getAllocationRequestId(),\n                sReq.getPriority(), sReq.getExecutionType(),\n                sReq.getAllocationTags(),\n                ResourceSizing.newInstance(\n                    sReq.getResourceSizing().getResources()),\n                sReq.getPlacementConstraint());\n        SchedulerApplicationAttempt applicationAttempt \u003d\n            this.scheduler.getApplicationAttempt(appAttemptId);\n        Runnable task \u003d () -\u003e {\n          boolean success \u003d\n              scheduler.attemptAllocationOnNode(\n                  applicationAttempt, sReqClone, node);\n          if (!success) {\n            LOG.warn(\"Unsuccessful allocation attempt [{}] for [{}]\",\n                placedReq.getPlacementAttempt(), sReqClone);\n          }\n          handleSchedulingResponse(\n              new Response(success, applicationId, sReqClone,\n              placedReq.getPlacementAttempt(), node));\n        };\n        this.schedulingThreadPool.submit(task);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementConstraintProcessor.java"
      }
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,32 @@\n+  private void schedulePlacedRequests(ApplicationAttemptId appAttemptId) {\n+    ApplicationId applicationId \u003d appAttemptId.getApplicationId();\n+    List\u003cPlacedSchedulingRequest\u003e placedSchedulingRequests \u003d\n+        this.placementDispatcher.pullPlacedRequests(applicationId);\n+    for (PlacedSchedulingRequest placedReq : placedSchedulingRequests) {\n+      SchedulingRequest sReq \u003d placedReq.getSchedulingRequest();\n+      for (SchedulerNode node : placedReq.getNodes()) {\n+        final SchedulingRequest sReqClone \u003d\n+            SchedulingRequest.newInstance(sReq.getAllocationRequestId(),\n+                sReq.getPriority(), sReq.getExecutionType(),\n+                sReq.getAllocationTags(),\n+                ResourceSizing.newInstance(\n+                    sReq.getResourceSizing().getResources()),\n+                sReq.getPlacementConstraint());\n+        SchedulerApplicationAttempt applicationAttempt \u003d\n+            this.scheduler.getApplicationAttempt(appAttemptId);\n+        Runnable task \u003d () -\u003e {\n+          boolean success \u003d\n+              scheduler.attemptAllocationOnNode(\n+                  applicationAttempt, sReqClone, node);\n+          if (!success) {\n+            LOG.warn(\"Unsuccessful allocation attempt [{}] for [{}]\",\n+                placedReq.getPlacementAttempt(), sReqClone);\n+          }\n+          handleSchedulingResponse(\n+              new Response(success, applicationId, sReqClone,\n+              placedReq.getPlacementAttempt(), node));\n+        };\n+        this.schedulingThreadPool.submit(task);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void schedulePlacedRequests(ApplicationAttemptId appAttemptId) {\n    ApplicationId applicationId \u003d appAttemptId.getApplicationId();\n    List\u003cPlacedSchedulingRequest\u003e placedSchedulingRequests \u003d\n        this.placementDispatcher.pullPlacedRequests(applicationId);\n    for (PlacedSchedulingRequest placedReq : placedSchedulingRequests) {\n      SchedulingRequest sReq \u003d placedReq.getSchedulingRequest();\n      for (SchedulerNode node : placedReq.getNodes()) {\n        final SchedulingRequest sReqClone \u003d\n            SchedulingRequest.newInstance(sReq.getAllocationRequestId(),\n                sReq.getPriority(), sReq.getExecutionType(),\n                sReq.getAllocationTags(),\n                ResourceSizing.newInstance(\n                    sReq.getResourceSizing().getResources()),\n                sReq.getPlacementConstraint());\n        SchedulerApplicationAttempt applicationAttempt \u003d\n            this.scheduler.getApplicationAttempt(appAttemptId);\n        Runnable task \u003d () -\u003e {\n          boolean success \u003d\n              scheduler.attemptAllocationOnNode(\n                  applicationAttempt, sReqClone, node);\n          if (!success) {\n            LOG.warn(\"Unsuccessful allocation attempt [{}] for [{}]\",\n                placedReq.getPlacementAttempt(), sReqClone);\n          }\n          handleSchedulingResponse(\n              new Response(success, applicationId, sReqClone,\n              placedReq.getPlacementAttempt(), node));\n        };\n        this.schedulingThreadPool.submit(task);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/processor/PlacementProcessor.java"
    }
  }
}