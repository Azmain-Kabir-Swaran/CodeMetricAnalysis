{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineDataManager.java",
  "functionName": "getEvents",
  "functionId": "getEvents___entityType-String__entityIds-SortedSet__String____eventTypes-SortedSet__String____windowStart-Long__windowEnd-Long__limit-Long__callerUGI-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
  "functionStartLine": 240,
  "functionEndLine": 264,
  "numCommitsSeen": 15,
  "timeTaken": 1651,
  "changeHistory": [
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
    "4a114dd67aae83e5bb2d65470166de954acf36a2",
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357"
  ],
  "changeHistoryShort": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": "Ybodychange",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Ybodychange",
    "4a114dd67aae83e5bb2d65470166de954acf36a2": "Ybodychange",
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614": "Ybodychange",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3360. Add JMX metrics to TimelineDataManager (Jason Lowe via jeagles)\n",
      "commitDate": "24/06/15 2:16 PM",
      "commitName": "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "07/05/15 10:01 AM",
      "commitNameOld": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 48.18,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,25 @@\n   public TimelineEvents getEvents(\n       String entityType,\n       SortedSet\u003cString\u003e entityIds,\n       SortedSet\u003cString\u003e eventTypes,\n       Long windowStart,\n       Long windowEnd,\n       Long limit,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n-    TimelineEvents events \u003d null;\n-    events \u003d store.getEntityTimelines(\n-        entityType,\n-        entityIds,\n-        limit,\n-        windowStart,\n-        windowEnd,\n-        eventTypes);\n-    if (events !\u003d null) {\n-      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n-          events.getAllEvents().iterator();\n-      while (eventsItr.hasNext()) {\n-        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n-        try {\n-          TimelineEntity entity \u003d store.getEntity(\n-              eventsOfOneEntity.getEntityId(),\n-              eventsOfOneEntity.getEntityType(),\n-              EnumSet.of(Field.PRIMARY_FILTERS));\n-          addDefaultDomainIdIfAbsent(entity);\n-          // check ACLs\n-          if (!timelineACLsManager.checkAccess(\n-              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n-            eventsItr.remove();\n-          }\n-        } catch (Exception e) {\n-          LOG.warn(\"Error when verifying access for user \" + callerUGI\n-              + \" on the events of the timeline entity \"\n-              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n-                  eventsOfOneEntity.getEntityType()), e);\n-          eventsItr.remove();\n-        }\n-      }\n+    long startTime \u003d Time.monotonicNow();\n+    metrics.incrGetEventsOps();\n+    try {\n+      TimelineEvents events \u003d doGetEvents(\n+          entityType,\n+          entityIds,\n+          eventTypes,\n+          windowStart,\n+          windowEnd,\n+          limit,\n+          callerUGI);\n+      metrics.incrGetEventsTotal(events.getAllEvents().size());\n+      return events;\n+    } finally {\n+      metrics.addGetEventsTime(Time.monotonicNow() - startTime);\n     }\n-    if (events \u003d\u003d null) {\n-      return new TimelineEvents();\n-    }\n-    return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      String entityType,\n      SortedSet\u003cString\u003e entityIds,\n      SortedSet\u003cString\u003e eventTypes,\n      Long windowStart,\n      Long windowEnd,\n      Long limit,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    long startTime \u003d Time.monotonicNow();\n    metrics.incrGetEventsOps();\n    try {\n      TimelineEvents events \u003d doGetEvents(\n          entityType,\n          entityIds,\n          eventTypes,\n          windowStart,\n          windowEnd,\n          limit,\n          callerUGI);\n      metrics.incrGetEventsTotal(events.getAllEvents().size());\n      return events;\n    } finally {\n      metrics.addGetEventsTime(Time.monotonicNow() - startTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "13/03/15 10:04 AM",
      "commitNameOld": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 55.0,
      "commitsBetweenForRepo": 503,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public TimelineEvents getEvents(\n       String entityType,\n       SortedSet\u003cString\u003e entityIds,\n       SortedSet\u003cString\u003e eventTypes,\n       Long windowStart,\n       Long windowEnd,\n       Long limit,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEvents events \u003d null;\n     events \u003d store.getEntityTimelines(\n         entityType,\n         entityIds,\n         limit,\n         windowStart,\n         windowEnd,\n         eventTypes);\n     if (events !\u003d null) {\n       Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n           events.getAllEvents().iterator();\n       while (eventsItr.hasNext()) {\n         TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n         try {\n           TimelineEntity entity \u003d store.getEntity(\n               eventsOfOneEntity.getEntityId(),\n               eventsOfOneEntity.getEntityType(),\n               EnumSet.of(Field.PRIMARY_FILTERS));\n           addDefaultDomainIdIfAbsent(entity);\n           // check ACLs\n           if (!timelineACLsManager.checkAccess(\n               callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n             eventsItr.remove();\n           }\n         } catch (Exception e) {\n-          LOG.error(\"Error when verifying access for user \" + callerUGI\n+          LOG.warn(\"Error when verifying access for user \" + callerUGI\n               + \" on the events of the timeline entity \"\n               + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                   eventsOfOneEntity.getEntityType()), e);\n           eventsItr.remove();\n         }\n       }\n     }\n     if (events \u003d\u003d null) {\n       return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      String entityType,\n      SortedSet\u003cString\u003e entityIds,\n      SortedSet\u003cString\u003e eventTypes,\n      Long windowStart,\n      Long windowEnd,\n      Long limit,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEvents events \u003d null;\n    events \u003d store.getEntityTimelines(\n        entityType,\n        entityIds,\n        limit,\n        windowStart,\n        windowEnd,\n        eventTypes);\n    if (events !\u003d null) {\n      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n          events.getAllEvents().iterator();\n      while (eventsItr.hasNext()) {\n        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n        try {\n          TimelineEntity entity \u003d store.getEntity(\n              eventsOfOneEntity.getEntityId(),\n              eventsOfOneEntity.getEntityType(),\n              EnumSet.of(Field.PRIMARY_FILTERS));\n          addDefaultDomainIdIfAbsent(entity);\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            eventsItr.remove();\n          }\n        } catch (Exception e) {\n          LOG.warn(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                  eventsOfOneEntity.getEntityType()), e);\n          eventsItr.remove();\n        }\n      }\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "4a114dd67aae83e5bb2d65470166de954acf36a2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2819. NPE in ATS Timeline Domains when upgrading from 2.4 to 2.6. Contributed by Zhijie Shen\n",
      "commitDate": "07/11/14 4:11 PM",
      "commitName": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthor": "Xuan",
      "commitDateOld": "06/11/14 11:48 AM",
      "commitNameOld": "f5b19bed7d71979dc8685b03152188902b6e45e9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n   public TimelineEvents getEvents(\n       String entityType,\n       SortedSet\u003cString\u003e entityIds,\n       SortedSet\u003cString\u003e eventTypes,\n       Long windowStart,\n       Long windowEnd,\n       Long limit,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEvents events \u003d null;\n     events \u003d store.getEntityTimelines(\n         entityType,\n         entityIds,\n         limit,\n         windowStart,\n         windowEnd,\n         eventTypes);\n     if (events !\u003d null) {\n       Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n           events.getAllEvents().iterator();\n       while (eventsItr.hasNext()) {\n         TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n         try {\n           TimelineEntity entity \u003d store.getEntity(\n               eventsOfOneEntity.getEntityId(),\n               eventsOfOneEntity.getEntityType(),\n               EnumSet.of(Field.PRIMARY_FILTERS));\n+          addDefaultDomainIdIfAbsent(entity);\n           // check ACLs\n           if (!timelineACLsManager.checkAccess(\n               callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n             eventsItr.remove();\n           }\n         } catch (Exception e) {\n           LOG.error(\"Error when verifying access for user \" + callerUGI\n               + \" on the events of the timeline entity \"\n               + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                   eventsOfOneEntity.getEntityType()), e);\n           eventsItr.remove();\n         }\n       }\n     }\n     if (events \u003d\u003d null) {\n       return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      String entityType,\n      SortedSet\u003cString\u003e entityIds,\n      SortedSet\u003cString\u003e eventTypes,\n      Long windowStart,\n      Long windowEnd,\n      Long limit,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEvents events \u003d null;\n    events \u003d store.getEntityTimelines(\n        entityType,\n        entityIds,\n        limit,\n        windowStart,\n        windowEnd,\n        eventTypes);\n    if (events !\u003d null) {\n      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n          events.getAllEvents().iterator();\n      while (eventsItr.hasNext()) {\n        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n        try {\n          TimelineEntity entity \u003d store.getEntity(\n              eventsOfOneEntity.getEntityId(),\n              eventsOfOneEntity.getEntityType(),\n              EnumSet.of(Field.PRIMARY_FILTERS));\n          addDefaultDomainIdIfAbsent(entity);\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            eventsItr.remove();\n          }\n        } catch (Exception e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                  eventsOfOneEntity.getEntityType()), e);\n          eventsItr.remove();\n        }\n      }\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2446. Augmented Timeline service APIs to start taking in domains as a parameter while posting entities and events. Contributed by Zhijie Shen.\n",
      "commitDate": "01/10/14 5:52 PM",
      "commitName": "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/14 11:27 AM",
      "commitNameOld": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.27,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   public TimelineEvents getEvents(\n       String entityType,\n       SortedSet\u003cString\u003e entityIds,\n       SortedSet\u003cString\u003e eventTypes,\n       Long windowStart,\n       Long windowEnd,\n       Long limit,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineEvents events \u003d null;\n     events \u003d store.getEntityTimelines(\n         entityType,\n         entityIds,\n         limit,\n         windowStart,\n         windowEnd,\n         eventTypes);\n     if (events !\u003d null) {\n       Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n           events.getAllEvents().iterator();\n       while (eventsItr.hasNext()) {\n         TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n         try {\n           TimelineEntity entity \u003d store.getEntity(\n               eventsOfOneEntity.getEntityId(),\n               eventsOfOneEntity.getEntityType(),\n               EnumSet.of(Field.PRIMARY_FILTERS));\n           // check ACLs\n-          if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n+          if (!timelineACLsManager.checkAccess(\n+              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n             eventsItr.remove();\n           }\n         } catch (Exception e) {\n           LOG.error(\"Error when verifying access for user \" + callerUGI\n               + \" on the events of the timeline entity \"\n               + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                   eventsOfOneEntity.getEntityType()), e);\n           eventsItr.remove();\n         }\n       }\n     }\n     if (events \u003d\u003d null) {\n       return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      String entityType,\n      SortedSet\u003cString\u003e entityIds,\n      SortedSet\u003cString\u003e eventTypes,\n      Long windowStart,\n      Long windowEnd,\n      Long limit,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEvents events \u003d null;\n    events \u003d store.getEntityTimelines(\n        entityType,\n        entityIds,\n        limit,\n        windowStart,\n        windowEnd,\n        eventTypes);\n    if (events !\u003d null) {\n      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n          events.getAllEvents().iterator();\n      while (eventsItr.hasNext()) {\n        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n        try {\n          TimelineEntity entity \u003d store.getEntity(\n              eventsOfOneEntity.getEntityId(),\n              eventsOfOneEntity.getEntityType(),\n              EnumSet.of(Field.PRIMARY_FILTERS));\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(\n              callerUGI, ApplicationAccessType.VIEW_APP, entity)) {\n            eventsItr.remove();\n          }\n        } catch (Exception e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                  eventsOfOneEntity.getEntityType()), e);\n          eventsItr.remove();\n        }\n      }\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 12:21 AM",
      "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,44 @@\n+  public TimelineEvents getEvents(\n+      String entityType,\n+      SortedSet\u003cString\u003e entityIds,\n+      SortedSet\u003cString\u003e eventTypes,\n+      Long windowStart,\n+      Long windowEnd,\n+      Long limit,\n+      UserGroupInformation callerUGI) throws YarnException, IOException {\n+    TimelineEvents events \u003d null;\n+    events \u003d store.getEntityTimelines(\n+        entityType,\n+        entityIds,\n+        limit,\n+        windowStart,\n+        windowEnd,\n+        eventTypes);\n+    if (events !\u003d null) {\n+      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n+          events.getAllEvents().iterator();\n+      while (eventsItr.hasNext()) {\n+        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n+        try {\n+          TimelineEntity entity \u003d store.getEntity(\n+              eventsOfOneEntity.getEntityId(),\n+              eventsOfOneEntity.getEntityType(),\n+              EnumSet.of(Field.PRIMARY_FILTERS));\n+          // check ACLs\n+          if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n+            eventsItr.remove();\n+          }\n+        } catch (Exception e) {\n+          LOG.error(\"Error when verifying access for user \" + callerUGI\n+              + \" on the events of the timeline entity \"\n+              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n+                  eventsOfOneEntity.getEntityType()), e);\n+          eventsItr.remove();\n+        }\n+      }\n+    }\n+    if (events \u003d\u003d null) {\n+      return new TimelineEvents();\n+    }\n+    return events;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      String entityType,\n      SortedSet\u003cString\u003e entityIds,\n      SortedSet\u003cString\u003e eventTypes,\n      Long windowStart,\n      Long windowEnd,\n      Long limit,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineEvents events \u003d null;\n    events \u003d store.getEntityTimelines(\n        entityType,\n        entityIds,\n        limit,\n        windowStart,\n        windowEnd,\n        eventTypes);\n    if (events !\u003d null) {\n      Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n          events.getAllEvents().iterator();\n      while (eventsItr.hasNext()) {\n        TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n        try {\n          TimelineEntity entity \u003d store.getEntity(\n              eventsOfOneEntity.getEntityId(),\n              eventsOfOneEntity.getEntityType(),\n              EnumSet.of(Field.PRIMARY_FILTERS));\n          // check ACLs\n          if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n            eventsItr.remove();\n          }\n        } catch (Exception e) {\n          LOG.error(\"Error when verifying access for user \" + callerUGI\n              + \" on the events of the timeline entity \"\n              + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                  eventsOfOneEntity.getEntityType()), e);\n          eventsItr.remove();\n        }\n      }\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java"
    }
  }
}