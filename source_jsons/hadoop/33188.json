{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FpgaDiscoverer.java",
  "functionName": "discover",
  "functionId": "discover",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
  "functionStartLine": 93,
  "functionEndLine": 145,
  "numCommitsSeen": 8,
  "timeTaken": 4117,
  "changeHistory": [
    "95fc38f2e9011b16ca09ac44843a71a2cac45c99",
    "606061aa147dc6d619d6240b7ea31d8f8f220e5d",
    "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51",
    "eeda6891e49bc13ae86d0193f94238b7109e291d",
    "de15a66d782094632abd09222b87a01bab8e0f5e",
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "95fc38f2e9011b16ca09ac44843a71a2cac45c99": "Ybodychange",
    "606061aa147dc6d619d6240b7ea31d8f8f220e5d": "Ybodychange",
    "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51": "Ymultichange(Yreturntypechange,Ybodychange)",
    "eeda6891e49bc13ae86d0193f94238b7109e291d": "Ybodychange",
    "de15a66d782094632abd09222b87a01bab8e0f5e": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95fc38f2e9011b16ca09ac44843a71a2cac45c99": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9375. Use Configured in GpuDiscoverer and FpgaDiscoverer (#1131)\n\nContributed by Adam Antal",
      "commitDate": "02/08/19 2:24 AM",
      "commitName": "95fc38f2e9011b16ca09ac44843a71a2cac45c99",
      "commitAuthor": "Adam Antal",
      "commitDateOld": "03/06/19 6:56 PM",
      "commitNameOld": "606061aa147dc6d619d6240b7ea31d8f8f220e5d",
      "commitAuthorOld": "Zhankun Tang",
      "daysBetweenCommits": 59.31,
      "commitsBetweenForRepo": 495,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public List\u003cFpgaDevice\u003e discover()\n       throws ResourceHandlerException {\n     List\u003cFpgaDevice\u003e list;\n-    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n+    String allowed \u003d getConf().get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n \n-    String availableDevices \u003d conf.get(\n+    String availableDevices \u003d getConf().get(\n         YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n-    String discoveryScript \u003d conf.get(\n+    String discoveryScript \u003d getConf().get(\n         YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n \n     FPGADiscoveryStrategy discoveryStrategy;\n     if (availableDevices !\u003d null) {\n       discoveryStrategy \u003d\n           new SettingsBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), availableDevices);\n     } else if (discoveryScript !\u003d null) {\n       discoveryStrategy \u003d\n           new ScriptBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), scriptRunner, discoveryScript);\n     } else {\n       discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n \n     list \u003d discoveryStrategy.discover();\n \n     if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n       currentFpgaInfo \u003d ImmutableList.copyOf(list);\n       return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n       Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n \n       // Replace list with a filtered one\n       list \u003d list\n         .stream()\n         .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n         .collect(Collectors.toList());\n \n       currentFpgaInfo \u003d ImmutableList.copyOf(list);\n \n       // if the count of user configured is still larger than actual\n       if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n \n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e list;\n    String allowed \u003d getConf().get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d getConf().get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d getConf().get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      currentFpgaInfo \u003d ImmutableList.copyOf(list);\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n        .collect(Collectors.toList());\n\n      currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
      "extendedDetails": {}
    },
    "606061aa147dc6d619d6240b7ea31d8f8f220e5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9595. FPGA plugin: NullPointerException in FpgaNodeResourceUpdateHandler.updateConfiguredResource(). Contributed by Peter Bacsko.\n",
      "commitDate": "03/06/19 6:56 PM",
      "commitName": "606061aa147dc6d619d6240b7ea31d8f8f220e5d",
      "commitAuthor": "Zhankun Tang",
      "commitDateOld": "29/03/19 10:58 AM",
      "commitNameOld": "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 66.33,
      "commitsBetweenForRepo": 390,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public List\u003cFpgaDevice\u003e discover()\n       throws ResourceHandlerException {\n     List\u003cFpgaDevice\u003e list;\n     String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n \n     String availableDevices \u003d conf.get(\n         YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n     String discoveryScript \u003d conf.get(\n         YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n \n     FPGADiscoveryStrategy discoveryStrategy;\n     if (availableDevices !\u003d null) {\n       discoveryStrategy \u003d\n           new SettingsBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), availableDevices);\n     } else if (discoveryScript !\u003d null) {\n       discoveryStrategy \u003d\n           new ScriptBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), scriptRunner, discoveryScript);\n     } else {\n       discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n \n     list \u003d discoveryStrategy.discover();\n \n     if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n+      currentFpgaInfo \u003d ImmutableList.copyOf(list);\n       return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n       Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n \n       // Replace list with a filtered one\n       list \u003d list\n         .stream()\n         .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n         .collect(Collectors.toList());\n \n+      currentFpgaInfo \u003d ImmutableList.copyOf(list);\n+\n       // if the count of user configured is still larger than actual\n       if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n \n-    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n-\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d conf.get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d conf.get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      currentFpgaInfo \u003d ImmutableList.copyOf(list);\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n        .collect(Collectors.toList());\n\n      currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
      "extendedDetails": {}
    },
    "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-9270. Minor cleanup in TestFpgaDiscoverer. Contributed by Peter Bacsko.\n",
      "commitDate": "29/03/19 10:58 AM",
      "commitName": "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51",
      "commitAuthor": "Devaraj K",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-9270. Minor cleanup in TestFpgaDiscoverer. Contributed by Peter Bacsko.\n",
          "commitDate": "29/03/19 10:58 AM",
          "commitName": "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "25/03/19 1:22 PM",
          "commitNameOld": "eeda6891e49bc13ae86d0193f94238b7109e291d",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 3.9,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n+  public List\u003cFpgaDevice\u003e discover()\n       throws ResourceHandlerException {\n-    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n+    List\u003cFpgaDevice\u003e list;\n     String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n \n     String availableDevices \u003d conf.get(\n         YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n     String discoveryScript \u003d conf.get(\n         YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n \n     FPGADiscoveryStrategy discoveryStrategy;\n     if (availableDevices !\u003d null) {\n       discoveryStrategy \u003d\n           new SettingsBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), availableDevices);\n     } else if (discoveryScript !\u003d null) {\n       discoveryStrategy \u003d\n           new ScriptBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), scriptRunner, discoveryScript);\n     } else {\n       discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n \n     list \u003d discoveryStrategy.discover();\n \n     if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n       return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n       Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n \n       // Replace list with a filtered one\n       list \u003d list\n         .stream()\n         .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n         .collect(Collectors.toList());\n \n       // if the count of user configured is still larger than actual\n       if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n \n     currentFpgaInfo \u003d ImmutableList.copyOf(list);\n \n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cFpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d conf.get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d conf.get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n        .collect(Collectors.toList());\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
          "extendedDetails": {
            "oldValue": "List\u003cFpgaResourceAllocator.FpgaDevice\u003e",
            "newValue": "List\u003cFpgaDevice\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9270. Minor cleanup in TestFpgaDiscoverer. Contributed by Peter Bacsko.\n",
          "commitDate": "29/03/19 10:58 AM",
          "commitName": "56f1e131ecb9f53dcc2596807f8dec2d2b95bb51",
          "commitAuthor": "Devaraj K",
          "commitDateOld": "25/03/19 1:22 PM",
          "commitNameOld": "eeda6891e49bc13ae86d0193f94238b7109e291d",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 3.9,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n+  public List\u003cFpgaDevice\u003e discover()\n       throws ResourceHandlerException {\n-    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n+    List\u003cFpgaDevice\u003e list;\n     String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n \n     String availableDevices \u003d conf.get(\n         YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n     String discoveryScript \u003d conf.get(\n         YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n \n     FPGADiscoveryStrategy discoveryStrategy;\n     if (availableDevices !\u003d null) {\n       discoveryStrategy \u003d\n           new SettingsBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), availableDevices);\n     } else if (discoveryScript !\u003d null) {\n       discoveryStrategy \u003d\n           new ScriptBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), scriptRunner, discoveryScript);\n     } else {\n       discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n \n     list \u003d discoveryStrategy.discover();\n \n     if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n       return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n       Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n \n       // Replace list with a filtered one\n       list \u003d list\n         .stream()\n         .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n         .collect(Collectors.toList());\n \n       // if the count of user configured is still larger than actual\n       if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n \n     currentFpgaInfo \u003d ImmutableList.copyOf(list);\n \n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cFpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d conf.get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d conf.get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n        .collect(Collectors.toList());\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
          "extendedDetails": {}
        }
      ]
    },
    "eeda6891e49bc13ae86d0193f94238b7109e291d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9268. General improvements in FpgaDevice. Contributed by Peter Bacsko.\n",
      "commitDate": "25/03/19 1:22 PM",
      "commitName": "eeda6891e49bc13ae86d0193f94238b7109e291d",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "20/03/19 12:45 PM",
      "commitNameOld": "f2b862cac666217ccb77f49776c54191035b13c4",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 5.03,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n       throws ResourceHandlerException {\n     List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n     String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n \n     String availableDevices \u003d conf.get(\n         YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n     String discoveryScript \u003d conf.get(\n         YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n \n     FPGADiscoveryStrategy discoveryStrategy;\n     if (availableDevices !\u003d null) {\n       discoveryStrategy \u003d\n           new SettingsBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), availableDevices);\n     } else if (discoveryScript !\u003d null) {\n       discoveryStrategy \u003d\n           new ScriptBasedFPGADiscoveryStrategy(\n               plugin.getFpgaType(), scriptRunner, discoveryScript);\n     } else {\n       discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n \n     list \u003d discoveryStrategy.discover();\n \n     if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n       return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n       Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n \n       // Replace list with a filtered one\n       list \u003d list\n         .stream()\n-        .filter(dev -\u003e minors.contains(dev.getMinor().toString()))\n+        .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n         .collect(Collectors.toList());\n \n       // if the count of user configured is still larger than actual\n       if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n \n     currentFpgaInfo \u003d ImmutableList.copyOf(list);\n \n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d conf.get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d conf.get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(String.valueOf(dev.getMinor())))\n        .collect(Collectors.toList());\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
      "extendedDetails": {}
    },
    "de15a66d782094632abd09222b87a01bab8e0f5e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9265. FPGA plugin fails to recognize Intel Processing Accelerator Card. Contributed by Peter Bacsko.\n",
      "commitDate": "08/03/19 4:09 AM",
      "commitName": "de15a66d782094632abd09222b87a01bab8e0f5e",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9265. FPGA plugin fails to recognize Intel Processing Accelerator Card. Contributed by Peter Bacsko.\n",
          "commitDate": "08/03/19 4:09 AM",
          "commitName": "de15a66d782094632abd09222b87a01bab8e0f5e",
          "commitAuthor": "Sunil G",
          "commitDateOld": "01/12/17 10:50 AM",
          "commitNameOld": "7225ec0ceb49ae8f5588484297a20f07ec047420",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 461.72,
          "commitsBetweenForRepo": 4020,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,52 @@\n-  public synchronized List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover() throws ResourceHandlerException {\n+  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n+      throws ResourceHandlerException {\n     List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n     String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n-    // whatever static or auto discover, we always needs\n-    // the vendor plugin to discover. For instance, IntelFpgaOpenclPlugin need to\n-    // setup a mapping of \u003cmajor:minor\u003e to \u003caliasDevName\u003e\n-    list \u003d this.plugin.discover(MAX_EXEC_TIMEOUT_MS);\n-    if (0 \u003d\u003d list.size()) {\n-      throw new ResourceHandlerException(\"No FPGA devices detected!\");\n+\n+    String availableDevices \u003d conf.get(\n+        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n+    String discoveryScript \u003d conf.get(\n+        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n+\n+    FPGADiscoveryStrategy discoveryStrategy;\n+    if (availableDevices !\u003d null) {\n+      discoveryStrategy \u003d\n+          new SettingsBasedFPGADiscoveryStrategy(\n+              plugin.getFpgaType(), availableDevices);\n+    } else if (discoveryScript !\u003d null) {\n+      discoveryStrategy \u003d\n+          new ScriptBasedFPGADiscoveryStrategy(\n+              plugin.getFpgaType(), scriptRunner, discoveryScript);\n+    } else {\n+      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n-    currentFpgaInfo \u003d list;\n-    if (allowed.equalsIgnoreCase(\n+\n+    list \u003d discoveryStrategy.discover();\n+\n+    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n-        return list;\n+      return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n-      String[] minors \u003d allowed.split(\",\");\n-      Iterator\u003cFpgaResourceAllocator.FpgaDevice\u003e iterator \u003d list.iterator();\n-      // remove the non-configured minor numbers\n-      FpgaResourceAllocator.FpgaDevice t;\n-      while (iterator.hasNext()) {\n-        boolean valid \u003d false;\n-        t \u003d iterator.next();\n-        for (String minorNumber : minors) {\n-          if (t.getMinor().toString().equals(minorNumber)) {\n-            valid \u003d true;\n-            break;\n-          }\n-        }\n-        if (!valid) {\n-          iterator.remove();\n-        }\n-      }\n+      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n+\n+      // Replace list with a filtered one\n+      list \u003d list\n+        .stream()\n+        .filter(dev -\u003e minors.contains(dev.getMinor().toString()))\n+        .collect(Collectors.toList());\n+\n       // if the count of user configured is still larger than actual\n-      if (list.size() !\u003d minors.length) {\n+      if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n+\n+    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n+\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d conf.get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d conf.get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(dev.getMinor().toString()))\n        .collect(Collectors.toList());\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9265. FPGA plugin fails to recognize Intel Processing Accelerator Card. Contributed by Peter Bacsko.\n",
          "commitDate": "08/03/19 4:09 AM",
          "commitName": "de15a66d782094632abd09222b87a01bab8e0f5e",
          "commitAuthor": "Sunil G",
          "commitDateOld": "01/12/17 10:50 AM",
          "commitNameOld": "7225ec0ceb49ae8f5588484297a20f07ec047420",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 461.72,
          "commitsBetweenForRepo": 4020,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,52 @@\n-  public synchronized List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover() throws ResourceHandlerException {\n+  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n+      throws ResourceHandlerException {\n     List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n     String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n-    // whatever static or auto discover, we always needs\n-    // the vendor plugin to discover. For instance, IntelFpgaOpenclPlugin need to\n-    // setup a mapping of \u003cmajor:minor\u003e to \u003caliasDevName\u003e\n-    list \u003d this.plugin.discover(MAX_EXEC_TIMEOUT_MS);\n-    if (0 \u003d\u003d list.size()) {\n-      throw new ResourceHandlerException(\"No FPGA devices detected!\");\n+\n+    String availableDevices \u003d conf.get(\n+        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n+    String discoveryScript \u003d conf.get(\n+        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n+\n+    FPGADiscoveryStrategy discoveryStrategy;\n+    if (availableDevices !\u003d null) {\n+      discoveryStrategy \u003d\n+          new SettingsBasedFPGADiscoveryStrategy(\n+              plugin.getFpgaType(), availableDevices);\n+    } else if (discoveryScript !\u003d null) {\n+      discoveryStrategy \u003d\n+          new ScriptBasedFPGADiscoveryStrategy(\n+              plugin.getFpgaType(), scriptRunner, discoveryScript);\n+    } else {\n+      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n     }\n-    currentFpgaInfo \u003d list;\n-    if (allowed.equalsIgnoreCase(\n+\n+    list \u003d discoveryStrategy.discover();\n+\n+    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n         YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n-        return list;\n+      return list;\n     } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n-      String[] minors \u003d allowed.split(\",\");\n-      Iterator\u003cFpgaResourceAllocator.FpgaDevice\u003e iterator \u003d list.iterator();\n-      // remove the non-configured minor numbers\n-      FpgaResourceAllocator.FpgaDevice t;\n-      while (iterator.hasNext()) {\n-        boolean valid \u003d false;\n-        t \u003d iterator.next();\n-        for (String minorNumber : minors) {\n-          if (t.getMinor().toString().equals(minorNumber)) {\n-            valid \u003d true;\n-            break;\n-          }\n-        }\n-        if (!valid) {\n-          iterator.remove();\n-        }\n-      }\n+      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n+\n+      // Replace list with a filtered one\n+      list \u003d list\n+        .stream()\n+        .filter(dev -\u003e minors.contains(dev.getMinor().toString()))\n+        .collect(Collectors.toList());\n+\n       // if the count of user configured is still larger than actual\n-      if (list.size() !\u003d minors.length) {\n+      if (list.size() !\u003d minors.size()) {\n         LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n             YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n             \"user configured:\" + allowed + \", while the real:\" + list.toString());\n       }\n     } else {\n       throw new ResourceHandlerException(\"Invalid value configured for \" +\n           YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n     }\n+\n+    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n+\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover()\n      throws ResourceHandlerException {\n    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n\n    String availableDevices \u003d conf.get(\n        YarnConfiguration.NM_FPGA_AVAILABLE_DEVICES);\n    String discoveryScript \u003d conf.get(\n        YarnConfiguration.NM_FPGA_DEVICE_DISCOVERY_SCRIPT);\n\n    FPGADiscoveryStrategy discoveryStrategy;\n    if (availableDevices !\u003d null) {\n      discoveryStrategy \u003d\n          new SettingsBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), availableDevices);\n    } else if (discoveryScript !\u003d null) {\n      discoveryStrategy \u003d\n          new ScriptBasedFPGADiscoveryStrategy(\n              plugin.getFpgaType(), scriptRunner, discoveryScript);\n    } else {\n      discoveryStrategy \u003d new AoclOutputBasedDiscoveryStrategy(plugin);\n    }\n\n    list \u003d discoveryStrategy.discover();\n\n    if (allowed \u003d\u003d null || allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n      return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      Set\u003cString\u003e minors \u003d Sets.newHashSet(allowed.split(\",\"));\n\n      // Replace list with a filtered one\n      list \u003d list\n        .stream()\n        .filter(dev -\u003e minors.contains(dev.getMinor().toString()))\n        .collect(Collectors.toList());\n\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.size()) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n\n    currentFpgaInfo \u003d ImmutableList.copyOf(list);\n\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java",
          "extendedDetails": {}
        }
      ]
    },
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,44 @@\n+  public synchronized List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover() throws ResourceHandlerException {\n+    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n+    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n+    // whatever static or auto discover, we always needs\n+    // the vendor plugin to discover. For instance, IntelFpgaOpenclPlugin need to\n+    // setup a mapping of \u003cmajor:minor\u003e to \u003caliasDevName\u003e\n+    list \u003d this.plugin.discover(MAX_EXEC_TIMEOUT_MS);\n+    if (0 \u003d\u003d list.size()) {\n+      throw new ResourceHandlerException(\"No FPGA devices detected!\");\n+    }\n+    currentFpgaInfo \u003d list;\n+    if (allowed.equalsIgnoreCase(\n+        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n+        return list;\n+    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n+      String[] minors \u003d allowed.split(\",\");\n+      Iterator\u003cFpgaResourceAllocator.FpgaDevice\u003e iterator \u003d list.iterator();\n+      // remove the non-configured minor numbers\n+      FpgaResourceAllocator.FpgaDevice t;\n+      while (iterator.hasNext()) {\n+        boolean valid \u003d false;\n+        t \u003d iterator.next();\n+        for (String minorNumber : minors) {\n+          if (t.getMinor().toString().equals(minorNumber)) {\n+            valid \u003d true;\n+            break;\n+          }\n+        }\n+        if (!valid) {\n+          iterator.remove();\n+        }\n+      }\n+      // if the count of user configured is still larger than actual\n+      if (list.size() !\u003d minors.length) {\n+        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n+            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n+            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n+      }\n+    } else {\n+      throw new ResourceHandlerException(\"Invalid value configured for \" +\n+          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized List\u003cFpgaResourceAllocator.FpgaDevice\u003e discover() throws ResourceHandlerException {\n    List\u003cFpgaResourceAllocator.FpgaDevice\u003e list;\n    String allowed \u003d this.conf.get(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES);\n    // whatever static or auto discover, we always needs\n    // the vendor plugin to discover. For instance, IntelFpgaOpenclPlugin need to\n    // setup a mapping of \u003cmajor:minor\u003e to \u003caliasDevName\u003e\n    list \u003d this.plugin.discover(MAX_EXEC_TIMEOUT_MS);\n    if (0 \u003d\u003d list.size()) {\n      throw new ResourceHandlerException(\"No FPGA devices detected!\");\n    }\n    currentFpgaInfo \u003d list;\n    if (allowed.equalsIgnoreCase(\n        YarnConfiguration.AUTOMATICALLY_DISCOVER_GPU_DEVICES)) {\n        return list;\n    } else if (allowed.matches(\"(\\\\d,)*\\\\d\")){\n      String[] minors \u003d allowed.split(\",\");\n      Iterator\u003cFpgaResourceAllocator.FpgaDevice\u003e iterator \u003d list.iterator();\n      // remove the non-configured minor numbers\n      FpgaResourceAllocator.FpgaDevice t;\n      while (iterator.hasNext()) {\n        boolean valid \u003d false;\n        t \u003d iterator.next();\n        for (String minorNumber : minors) {\n          if (t.getMinor().toString().equals(minorNumber)) {\n            valid \u003d true;\n            break;\n          }\n        }\n        if (!valid) {\n          iterator.remove();\n        }\n      }\n      // if the count of user configured is still larger than actual\n      if (list.size() !\u003d minors.length) {\n        LOG.warn(\"We continue although there\u0027re mistakes in user\u0027s configuration \" +\n            YarnConfiguration.NM_FPGA_ALLOWED_DEVICES +\n            \"user configured:\" + allowed + \", while the real:\" + list.toString());\n      }\n    } else {\n      throw new ResourceHandlerException(\"Invalid value configured for \" +\n          YarnConfiguration.NM_FPGA_ALLOWED_DEVICES + \":\\\"\" + allowed + \"\\\"\");\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/FpgaDiscoverer.java"
    }
  }
}