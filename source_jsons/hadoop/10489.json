{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStorage.java",
  "functionName": "doUpgradePreFederation",
  "functionId": "doUpgradePreFederation___sd-StorageDirectory(modifiers-final)__nsInfo-NamespaceInfo(modifiers-final)__callables-List__Callable__StorageDirectory____(modifiers-final)__conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
  "functionStartLine": 798,
  "functionEndLine": 844,
  "numCommitsSeen": 258,
  "timeTaken": 10539,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "496f33de0ce80dc455cfd51f19612da6f9b914f9",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "f949f6b54825dac61511a5761837e2fd14437239",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "a11042365f93cf235ecc6f8b1a615cf3edd3e75a",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Ymultichange(Yparameterchange,Ybodychange)",
    "496f33de0ce80dc455cfd51f19612da6f9b914f9": "Ymultichange(Yrename,Ybodychange)",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "f949f6b54825dac61511a5761837e2fd14437239": "Ybodychange",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": "Ymultichange(Yparameterchange,Ybodychange)",
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "a11042365f93cf235ecc6f8b1a615cf3edd3e75a": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   void doUpgradePreFederation(final StorageDirectory sd,\n       final NamespaceInfo nsInfo,\n       final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n       final Configuration conf) throws IOException {\n     final int oldLV \u003d getLayoutVersion();\n-    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n-             + \".\\n   old LV \u003d \" + oldLV\n-             + \"; old CTime \u003d \" + this.getCTime()\n-             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-             + \"; new CTime \u003d \" + nsInfo.getCTime());\n+    LOG.info(\"Upgrading storage directory {}.\\n old LV \u003d {}; old CTime \u003d {}\"\n+            + \".\\n new LV \u003d {}; new CTime \u003d {}\", sd.getRoot(), oldLV,\n+        this.getCTime(), HdfsServerConstants.DATANODE_LAYOUT_VERSION,\n+        nsInfo.getCTime());\n     \n     final File curDir \u003d sd.getCurrentDir();\n     final File prevDir \u003d sd.getPreviousDir();\n     final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n \n     final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n     if (callables \u003d\u003d null) {\n       doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n     } else {\n       callables.add(new Callable\u003cStorageDirectory\u003e() {\n         @Override\n         public StorageDirectory call() throws Exception {\n           doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n           return sd;\n         }\n       });\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgradePreFederation(final StorageDirectory sd,\n      final NamespaceInfo nsInfo,\n      final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      final Configuration conf) throws IOException {\n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory {}.\\n old LV \u003d {}; old CTime \u003d {}\"\n            + \".\\n new LV \u003d {}; new CTime \u003d {}\", sd.getRoot(), oldLV,\n        this.getCTime(), HdfsServerConstants.DATANODE_LAYOUT_VERSION,\n        nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    if (callables \u003d\u003d null) {\n      doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n    } else {\n      callables.add(new Callable\u003cStorageDirectory\u003e() {\n        @Override\n        public StorageDirectory call() throws Exception {\n          doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n          return sd;\n        }\n      });\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,48 @@\n   void doUpgradePreFederation(final StorageDirectory sd,\n-      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {\n+      final NamespaceInfo nsInfo,\n+      final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n+      final Configuration conf) throws IOException {\n     final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     final File curDir \u003d sd.getCurrentDir();\n     final File prevDir \u003d sd.getPreviousDir();\n     final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n \n     final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n-    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n+    if (callables \u003d\u003d null) {\n+      doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n+    } else {\n+      callables.add(new Callable\u003cStorageDirectory\u003e() {\n+        @Override\n+        public StorageDirectory call() throws Exception {\n+          doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n+          return sd;\n+        }\n+      });\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgradePreFederation(final StorageDirectory sd,\n      final NamespaceInfo nsInfo,\n      final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      final Configuration conf) throws IOException {\n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    if (callables \u003d\u003d null) {\n      doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n    } else {\n      callables.add(new Callable\u003cStorageDirectory\u003e() {\n        @Override\n        public StorageDirectory call() throws Exception {\n          doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n          return sd;\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory(modifiers-final), nsInfo-NamespaceInfo(modifiers-final), conf-Configuration(modifiers-final)]",
            "newValue": "[sd-StorageDirectory(modifiers-final), nsInfo-NamespaceInfo(modifiers-final), callables-List\u003cCallable\u003cStorageDirectory\u003e\u003e(modifiers-final), conf-Configuration(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
          "commitDate": "22/02/16 3:01 PM",
          "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "04/02/16 11:19 AM",
          "commitNameOld": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 18.15,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,48 @@\n   void doUpgradePreFederation(final StorageDirectory sd,\n-      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {\n+      final NamespaceInfo nsInfo,\n+      final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n+      final Configuration conf) throws IOException {\n     final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     final File curDir \u003d sd.getCurrentDir();\n     final File prevDir \u003d sd.getPreviousDir();\n     final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n \n     final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n-    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n+    if (callables \u003d\u003d null) {\n+      doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n+    } else {\n+      callables.add(new Callable\u003cStorageDirectory\u003e() {\n+        @Override\n+        public StorageDirectory call() throws Exception {\n+          doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n+          return sd;\n+        }\n+      });\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgradePreFederation(final StorageDirectory sd,\n      final NamespaceInfo nsInfo,\n      final List\u003cCallable\u003cStorageDirectory\u003e\u003e callables,\n      final Configuration conf) throws IOException {\n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    if (callables \u003d\u003d null) {\n      doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n    } else {\n      callables.add(new Callable\u003cStorageDirectory\u003e() {\n        @Override\n        public StorageDirectory call() throws Exception {\n          doUpgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n          return sd;\n        }\n      });\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "496f33de0ce80dc455cfd51f19612da6f9b914f9": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-9730. Storage ID update does not happen when there is a layout change. Contributed by  Tsz Wo Nicholas Sze.\n",
      "commitDate": "04/02/16 11:19 AM",
      "commitName": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9730. Storage ID update does not happen when there is a layout change. Contributed by  Tsz Wo Nicholas Sze.\n",
          "commitDate": "04/02/16 11:19 AM",
          "commitName": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 7.68,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,36 @@\n-  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n-      final Configuration conf) throws IOException {\n-    // If the existing on-disk layout version supportes federation, simply\n-    // update its layout version.\n-    if (DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      // The VERSION file is already read in. Override the layoutVersion \n-      // field and overwrite the file. The upgrade work is handled by\n-      // {@link BlockPoolSliceStorage#doUpgrade}\n-      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n-          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n-          + sd.getRoot());\n-      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n-      writeProperties(sd);\n-      return;\n-    }\n-    \n+  void doUpgradePreFederation(final StorageDirectory sd,\n+      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {\n     final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     final File curDir \u003d sd.getCurrentDir();\n     final File prevDir \u003d sd.getPreviousDir();\n     final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n \n     final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n     doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgradePreFederation(final StorageDirectory sd,\n      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {\n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "doUpgrade",
            "newValue": "doUpgradePreFederation"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9730. Storage ID update does not happen when there is a layout change. Contributed by  Tsz Wo Nicholas Sze.\n",
          "commitDate": "04/02/16 11:19 AM",
          "commitName": "496f33de0ce80dc455cfd51f19612da6f9b914f9",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "27/01/16 6:58 PM",
          "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 7.68,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,36 @@\n-  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n-      final Configuration conf) throws IOException {\n-    // If the existing on-disk layout version supportes federation, simply\n-    // update its layout version.\n-    if (DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      // The VERSION file is already read in. Override the layoutVersion \n-      // field and overwrite the file. The upgrade work is handled by\n-      // {@link BlockPoolSliceStorage#doUpgrade}\n-      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n-          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n-          + sd.getRoot());\n-      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n-      writeProperties(sd);\n-      return;\n-    }\n-    \n+  void doUpgradePreFederation(final StorageDirectory sd,\n+      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {\n     final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     final File curDir \u003d sd.getCurrentDir();\n     final File prevDir \u003d sd.getPreviousDir();\n     final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n \n     final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n     doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgradePreFederation(final StorageDirectory sd,\n      final NamespaceInfo nsInfo, final Configuration conf) throws IOException {\n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/11/15 10:00 AM",
          "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 83.37,
          "commitsBetweenForRepo": 510,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,51 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n-      throws IOException {\n+  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n+      final Configuration conf) throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file. The upgrade work is handled by\n       // {@link BlockPoolSliceStorage#doUpgrade}\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n       layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n+    final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n-             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n+             + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n-    File curDir \u003d sd.getCurrentDir();\n-    File prevDir \u003d sd.getPreviousDir();\n-    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n+    final File curDir \u003d sd.getCurrentDir();\n+    final File prevDir \u003d sd.getPreviousDir();\n+    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n-    File tmpDir \u003d sd.getPreviousTmp();\n+    final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n-    // 3. Format BP and hard link blocks from previous directory\n+    // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n-    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n-        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n+    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n-    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n-        STORAGE_DIR_CURRENT));\n-    \n-    // 4. Write version file under \u003cSD\u003e/current\n-    layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n-    clusterID \u003d nsInfo.getClusterID();\n-    writeProperties(sd);\n-    \n-    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n-    rename(tmpDir, prevDir);\n-    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n-    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n+\n+    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n+    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n      final Configuration conf) throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file. The upgrade work is handled by\n      // {@link BlockPoolSliceStorage#doUpgrade}\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo]",
            "newValue": "[sd-StorageDirectory(modifiers-final), nsInfo-NamespaceInfo(modifiers-final), conf-Configuration(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/11/15 10:00 AM",
          "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 83.37,
          "commitsBetweenForRepo": 510,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,51 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n-      throws IOException {\n+  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n+      final Configuration conf) throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file. The upgrade work is handled by\n       // {@link BlockPoolSliceStorage#doUpgrade}\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n       layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n+    final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n-             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n+             + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n-    File curDir \u003d sd.getCurrentDir();\n-    File prevDir \u003d sd.getPreviousDir();\n-    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n+    final File curDir \u003d sd.getCurrentDir();\n+    final File prevDir \u003d sd.getPreviousDir();\n+    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n-    File tmpDir \u003d sd.getPreviousTmp();\n+    final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n-    // 3. Format BP and hard link blocks from previous directory\n+    // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n-    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n-        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n+    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n-    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n-        STORAGE_DIR_CURRENT));\n-    \n-    // 4. Write version file under \u003cSD\u003e/current\n-    layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n-    clusterID \u003d nsInfo.getClusterID();\n-    writeProperties(sd);\n-    \n-    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n-    rename(tmpDir, prevDir);\n-    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n-    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n+\n+    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n+    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n      final Configuration conf) throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file. The upgrade work is handled by\n      // {@link BlockPoolSliceStorage#doUpgrade}\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "05/11/15 10:00 AM",
          "commitNameOld": "efc73d7896e65a8a03d226ac21309257a7dc126c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 83.37,
          "commitsBetweenForRepo": 510,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,51 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n-      throws IOException {\n+  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n+      final Configuration conf) throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file. The upgrade work is handled by\n       // {@link BlockPoolSliceStorage#doUpgrade}\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n       layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n+    final int oldLV \u003d getLayoutVersion();\n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n-             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n+             + \".\\n   old LV \u003d \" + oldLV\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n-    File curDir \u003d sd.getCurrentDir();\n-    File prevDir \u003d sd.getPreviousDir();\n-    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n+    final File curDir \u003d sd.getCurrentDir();\n+    final File prevDir \u003d sd.getPreviousDir();\n+    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n-    File tmpDir \u003d sd.getPreviousTmp();\n+    final File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n-    // 3. Format BP and hard link blocks from previous directory\n+    // 3.1. Format BP\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n-    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n-        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n+    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n     bpStorage.format(curDir, nsInfo);\n-    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n-        STORAGE_DIR_CURRENT));\n-    \n-    // 4. Write version file under \u003cSD\u003e/current\n-    layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n-    clusterID \u003d nsInfo.getClusterID();\n-    writeProperties(sd);\n-    \n-    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n-    rename(tmpDir, prevDir);\n-    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n-    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n+\n+    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n+    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(final StorageDirectory sd, final NamespaceInfo nsInfo,\n      final Configuration conf) throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file. The upgrade work is handled by\n      // {@link BlockPoolSliceStorage#doUpgrade}\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    final int oldLV \u003d getLayoutVersion();\n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + oldLV\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    final File curDir \u003d sd.getCurrentDir();\n    final File prevDir \u003d sd.getPreviousDir();\n    final File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    final File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3.1. Format BP\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d getBlockPoolSliceStorage(nsInfo);\n    bpStorage.format(curDir, nsInfo);\n\n    final File toDir \u003d new File(curBpDir, STORAGE_DIR_CURRENT);\n    doUgrade(sd, nsInfo, prevDir, tmpDir, bbwDir, toDir, oldLV, conf);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo]",
            "newValue": "[sd-StorageDirectory(modifiers-final), nsInfo-NamespaceInfo(modifiers-final), conf-Configuration(modifiers-final)]"
          }
        }
      ]
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/03/15 3:25 PM",
      "commitNameOld": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.78,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n       throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file. The upgrade work is handled by\n       // {@link BlockPoolSliceStorage#doUpgrade}\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n-          + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n+          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n-      layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n+      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n-             + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n         STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n-    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n+    layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n      throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file. The upgrade work is handled by\n      // {@link BlockPoolSliceStorage#doUpgrade}\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsServerConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n        STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "f949f6b54825dac61511a5761837e2fd14437239": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6981. Fix DN upgrade with layout version change. (Arpit Agarwal)\n",
      "commitDate": "08/09/14 9:20 PM",
      "commitName": "f949f6b54825dac61511a5761837e2fd14437239",
      "commitAuthor": "arp",
      "commitDateOld": "03/09/14 5:17 PM",
      "commitNameOld": "3a0142bd773ab11bfb4de76ef6f449d9852732a9",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 5.17,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n       throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n-      // field and overwrite the file.\n+      // field and overwrite the file. The upgrade work is handled by\n+      // {@link BlockPoolSliceStorage#doUpgrade}\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n       layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n         STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n      throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file. The upgrade work is handled by\n      // {@link BlockPoolSliceStorage#doUpgrade}\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n        STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 1:41 PM",
      "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "29/04/14 3:27 AM",
          "commitNameOld": "9d21180c1a625295bb9da0d9d5d8c55740944008",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 94.43,
          "commitsBetweenForRepo": 594,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,59 @@\n-  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n+  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n+      throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file.\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n       layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n-    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n+    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n+        STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n      throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file.\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n        STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {
            "oldValue": "[sd-StorageDirectory, nsInfo-NamespaceInfo]",
            "newValue": "[datanode-DataNode, sd-StorageDirectory, nsInfo-NamespaceInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "29/04/14 3:27 AM",
          "commitNameOld": "9d21180c1a625295bb9da0d9d5d8c55740944008",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 94.43,
          "commitsBetweenForRepo": 594,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,59 @@\n-  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n+  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n+      throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file.\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n           + sd.getRoot());\n       layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n-    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n+    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n+        STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)\n      throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file.\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(datanode, tmpDir, bbwDir, new File(curBpDir,\n        STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "300e4906af6d16f4fed5119028d87d8d5a8bddbb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5874. Should not compare DataNode current layout version with that of NameNode in DataStrorage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1565750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 10:25 AM",
      "commitName": "300e4906af6d16f4fed5119028d87d8d5a8bddbb",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/01/14 7:21 PM",
      "commitNameOld": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.63,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n     if (DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file.\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n-          + nsInfo.getLayoutVersion() + \" for storage \" + sd.getRoot());\n-      layoutVersion \u003d nsInfo.getLayoutVersion();\n+          + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n+          + sd.getRoot());\n+      layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n-             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n+             + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file.\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + HdfsConstants.DATANODE_LAYOUT_VERSION + \" for storage \"\n          + sd.getRoot());\n      layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "02/12/13 9:41 AM",
      "commitNameOld": "18159be495f96bde4bd4fa2cacb14aafb87e87bc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 59.4,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n     // If the existing on-disk layout version supportes federation, simply\n     // update its layout version.\n-    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+    if (DataNodeLayoutVersion.supports(\n+        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       // The VERSION file is already read in. Override the layoutVersion \n       // field and overwrite the file.\n       LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n           + nsInfo.getLayoutVersion() + \" for storage \" + sd.getRoot());\n       layoutVersion \u003d nsInfo.getLayoutVersion();\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n-    layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n+    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file.\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + nsInfo.getLayoutVersion() + \" for storage \" + sd.getRoot());\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "65ee88b0de5218a07c0f9dbb7416db551584f0a6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5526. Datanode cannot roll back to previous layout version. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 7:33 AM",
      "commitName": "65ee88b0de5218a07c0f9dbb7416db551584f0a6",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "10/01/13 4:09 PM",
      "commitNameOld": "82b218c605add2f5cf01c5aa21ab8c55fa5967fd",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 318.64,
      "commitsBetweenForRepo": 1933,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,55 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n+    // If the existing on-disk layout version supportes federation, simply\n+    // update its layout version.\n     if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n-      clusterID \u003d nsInfo.getClusterID();\n+      // The VERSION file is already read in. Override the layoutVersion \n+      // field and overwrite the file.\n+      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n+          + nsInfo.getLayoutVersion() + \" for storage \" + sd.getRoot());\n       layoutVersion \u003d nsInfo.getLayoutVersion();\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    // If the existing on-disk layout version supportes federation, simply\n    // update its layout version.\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      // The VERSION file is already read in. Override the layoutVersion \n      // field and overwrite the file.\n      LOG.info(\"Updating layout version from \" + layoutVersion + \" to \"\n          + nsInfo.getLayoutVersion() + \" for storage \" + sd.getRoot());\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 3:10 PM",
      "commitNameOld": "a11042365f93cf235ecc6f8b1a615cf3edd3e75a",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 65.04,
      "commitsBetweenForRepo": 386,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n     if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       clusterID \u003d nsInfo.getClusterID();\n       layoutVersion \u003d nsInfo.getLayoutVersion();\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n \n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n-    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n+    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a11042365f93cf235ecc6f8b1a615cf3edd3e75a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3731. 2.0 release upgrade must handle blocks being written from 1.0. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377137 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 3:10 PM",
      "commitName": "a11042365f93cf235ecc6f8b1a615cf3edd3e75a",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "21/08/12 2:18 PM",
      "commitNameOld": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 3.04,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n     if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       clusterID \u003d nsInfo.getClusterID();\n       layoutVersion \u003d nsInfo.getLayoutVersion();\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n+    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n+\n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n-    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n+    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    File bbwDir \u003d new File(sd.getRoot(), Storage.STORAGE_1_BBW);\n\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, bbwDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n     if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       clusterID \u003d nsInfo.getClusterID();\n       layoutVersion \u003d nsInfo.getLayoutVersion();\n       writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n-    layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n+    layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n     writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/07/11 6:11 PM",
      "commitNameOld": "2c5dd549e31aa5d3377ff2619ede8e92b8dc5d0f",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n     if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       clusterID \u003d nsInfo.getClusterID();\n       layoutVersion \u003d nsInfo.getLayoutVersion();\n-      sd.write();\n+      writeProperties(sd);\n       return;\n     }\n     \n     LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n              + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n              + \"; old CTime \u003d \" + this.getCTime()\n              + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n              + \"; new CTime \u003d \" + nsInfo.getCTime());\n     \n     File curDir \u003d sd.getCurrentDir();\n     File prevDir \u003d sd.getPreviousDir();\n     assert curDir.exists() : \"Data node current directory must exist.\";\n     // Cleanup directory \"detach\"\n     cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n     \n     // 1. delete \u003cSD\u003e/previous dir before upgrading\n     if (prevDir.exists())\n       deleteDir(prevDir);\n     // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n     File tmpDir \u003d sd.getPreviousTmp();\n     assert !tmpDir.exists() : \n       \"Data node previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n     rename(curDir, tmpDir);\n     \n     // 3. Format BP and hard link blocks from previous directory\n     File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n     BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n         nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n     bpStorage.format(curDir, nsInfo);\n     linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n     \n     // 4. Write version file under \u003cSD\u003e/current\n     layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n     clusterID \u003d nsInfo.getClusterID();\n-    sd.write();\n+    writeProperties(sd);\n     \n     // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n     rename(tmpDir, prevDir);\n     LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n     addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      writeProperties(sd);\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    writeProperties(sd);\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,48 @@\n+  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n+    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+      clusterID \u003d nsInfo.getClusterID();\n+      layoutVersion \u003d nsInfo.getLayoutVersion();\n+      sd.write();\n+      return;\n+    }\n+    \n+    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n+             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n+             + \"; old CTime \u003d \" + this.getCTime()\n+             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n+             + \"; new CTime \u003d \" + nsInfo.getCTime());\n+    \n+    File curDir \u003d sd.getCurrentDir();\n+    File prevDir \u003d sd.getPreviousDir();\n+    assert curDir.exists() : \"Data node current directory must exist.\";\n+    // Cleanup directory \"detach\"\n+    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n+    \n+    // 1. delete \u003cSD\u003e/previous dir before upgrading\n+    if (prevDir.exists())\n+      deleteDir(prevDir);\n+    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n+    File tmpDir \u003d sd.getPreviousTmp();\n+    assert !tmpDir.exists() : \n+      \"Data node previous.tmp directory must not exist.\";\n+    \n+    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n+    rename(curDir, tmpDir);\n+    \n+    // 3. Format BP and hard link blocks from previous directory\n+    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n+    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n+        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n+    bpStorage.format(curDir, nsInfo);\n+    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n+    \n+    // 4. Write version file under \u003cSD\u003e/current\n+    layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n+    clusterID \u003d nsInfo.getClusterID();\n+    sd.write();\n+    \n+    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n+    rename(tmpDir, prevDir);\n+    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n+    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory sd, NamespaceInfo nsInfo) throws IOException {\n    if (LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      clusterID \u003d nsInfo.getClusterID();\n      layoutVersion \u003d nsInfo.getLayoutVersion();\n      sd.write();\n      return;\n    }\n    \n    LOG.info(\"Upgrading storage directory \" + sd.getRoot()\n             + \".\\n   old LV \u003d \" + this.getLayoutVersion()\n             + \"; old CTime \u003d \" + this.getCTime()\n             + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n             + \"; new CTime \u003d \" + nsInfo.getCTime());\n    \n    File curDir \u003d sd.getCurrentDir();\n    File prevDir \u003d sd.getPreviousDir();\n    assert curDir.exists() : \"Data node current directory must exist.\";\n    // Cleanup directory \"detach\"\n    cleanupDetachDir(new File(curDir, STORAGE_DIR_DETACHED));\n    \n    // 1. delete \u003cSD\u003e/previous dir before upgrading\n    if (prevDir.exists())\n      deleteDir(prevDir);\n    // get previous.tmp directory, \u003cSD\u003e/previous.tmp\n    File tmpDir \u003d sd.getPreviousTmp();\n    assert !tmpDir.exists() : \n      \"Data node previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current to \u003cSD\u003e/previous.tmp\n    rename(curDir, tmpDir);\n    \n    // 3. Format BP and hard link blocks from previous directory\n    File curBpDir \u003d BlockPoolSliceStorage.getBpRoot(nsInfo.getBlockPoolID(), curDir);\n    BlockPoolSliceStorage bpStorage \u003d new BlockPoolSliceStorage(nsInfo.getNamespaceID(), \n        nsInfo.getBlockPoolID(), nsInfo.getCTime(), nsInfo.getClusterID());\n    bpStorage.format(curDir, nsInfo);\n    linkAllBlocks(tmpDir, new File(curBpDir, STORAGE_DIR_CURRENT));\n    \n    // 4. Write version file under \u003cSD\u003e/current\n    layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    clusterID \u003d nsInfo.getClusterID();\n    sd.write();\n    \n    // 5. Rename \u003cSD\u003e/previous.tmp to \u003cSD\u003e/previous\n    rename(tmpDir, prevDir);\n    LOG.info(\"Upgrade of \" + sd.getRoot()+ \" is complete.\");\n    addBlockPoolStorage(nsInfo.getBlockPoolID(), bpStorage);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"
    }
  }
}