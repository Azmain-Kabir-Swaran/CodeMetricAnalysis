{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalDirsHandlerService.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___config-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
  "functionStartLine": 224,
  "functionEndLine": 255,
  "numCommitsSeen": 35,
  "timeTaken": 2410,
  "changeHistory": [
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
    "0928502029ef141759008997335ea2cd836a7154",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "41ebf4fb24241e9b09bf29965630a7a73af129f3",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "123c4f57d3de1771c762c89f5befd04d420cf7e7",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb"
  ],
  "changeHistoryShort": {
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "41ebf4fb24241e9b09bf29965630a7a73af129f3": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "123c4f57d3de1771c762c89f5befd04d420cf7e7": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6f2028bd1514d90b831f889fd0ee7f2ba5c15000": {
      "type": "Ybodychange",
      "commitMessage": "YARN-90. NodeManager should identify failed disks becoming good again. Contributed by Varun Vasudev\n",
      "commitDate": "21/10/14 10:31 AM",
      "commitName": "6f2028bd1514d90b831f889fd0ee7f2ba5c15000",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/03/14 4:52 PM",
      "commitNameOld": "0b1304d098169bda3c7eadf9a07dd0b9e87ab150",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 227.69,
      "commitsBetweenForRepo": 1802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   protected void serviceInit(Configuration config) throws Exception {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n     super.serviceInit(conf);\n \n     FileContext localFs;\n     try {\n       localFs \u003d FileContext.getLocalFSFileContext(config);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n     }\n     FsPermission perm \u003d new FsPermission((short)0755);\n     boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n     createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n     if (!createSucceeded) {\n-      updateDirsAfterFailure();\n+      updateDirsAfterTest();\n     }\n \n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.serviceInit(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterTest();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public void init(Configuration config) {\n+  protected void serviceInit(Configuration config) throws Exception {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n-    super.init(conf);\n+    super.serviceInit(conf);\n \n     FileContext localFs;\n     try {\n       localFs \u003d FileContext.getLocalFSFileContext(config);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n     }\n     FsPermission perm \u003d new FsPermission((short)0755);\n     boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n     createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n     if (!createSucceeded) {\n       updateDirsAfterFailure();\n     }\n \n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.serviceInit(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterFailure();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public void init(Configuration config) {\n+  protected void serviceInit(Configuration config) throws Exception {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n-    super.init(conf);\n+    super.serviceInit(conf);\n \n     FileContext localFs;\n     try {\n       localFs \u003d FileContext.getLocalFSFileContext(config);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n     }\n     FsPermission perm \u003d new FsPermission((short)0755);\n     boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n     createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n     if (!createSucceeded) {\n       updateDirsAfterFailure();\n     }\n \n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.serviceInit(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterFailure();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public void init(Configuration config) {\n+  protected void serviceInit(Configuration config) throws Exception {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n-    super.init(conf);\n+    super.serviceInit(conf);\n \n     FileContext localFs;\n     try {\n       localFs \u003d FileContext.getLocalFSFileContext(config);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n     }\n     FsPermission perm \u003d new FsPermission((short)0755);\n     boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n     createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n     if (!createSucceeded) {\n       updateDirsAfterFailure();\n     }\n \n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.serviceInit(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterFailure();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public void init(Configuration config) {\n+  protected void serviceInit(Configuration config) throws Exception {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n-    super.init(conf);\n+    super.serviceInit(conf);\n \n     FileContext localFs;\n     try {\n       localFs \u003d FileContext.getLocalFSFileContext(config);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n     }\n     FsPermission perm \u003d new FsPermission((short)0755);\n     boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n     createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n     if (!createSucceeded) {\n       updateDirsAfterFailure();\n     }\n \n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration config) throws Exception {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.serviceInit(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterFailure();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/04/13 6:00 PM",
      "commitNameOld": "add00d6d74ee694f8368561f72c4cc83162b4b90",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 54.13,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void init(Configuration config) {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n     super.init(conf);\n \n     FileContext localFs;\n     try {\n       localFs \u003d FileContext.getLocalFSFileContext(config);\n     } catch (IOException e) {\n-      throw new YarnException(\"Unable to get the local filesystem\", e);\n+      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n     }\n     FsPermission perm \u003d new FsPermission((short)0755);\n     boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n     createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n     if (!createSucceeded) {\n       updateDirsAfterFailure();\n     }\n \n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.init(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterFailure();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "41ebf4fb24241e9b09bf29965630a7a73af129f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-106. Nodemanager needs to set permissions of local directories (jlowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1391649 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/12 1:50 PM",
      "commitName": "41ebf4fb24241e9b09bf29965630a7a73af129f3",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 51.64,
      "commitsBetweenForRepo": 293,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,32 @@\n   public void init(Configuration config) {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n     super.init(conf);\n \n+    FileContext localFs;\n+    try {\n+      localFs \u003d FileContext.getLocalFSFileContext(config);\n+    } catch (IOException e) {\n+      throw new YarnException(\"Unable to get the local filesystem\", e);\n+    }\n+    FsPermission perm \u003d new FsPermission((short)0755);\n+    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n+    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n+    if (!createSucceeded) {\n+      updateDirsAfterFailure();\n+    }\n+\n     // Check the disk health immediately to weed out bad directories\n     // before other init code attempts to use them.\n     checkDirs();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.init(conf);\n\n    FileContext localFs;\n    try {\n      localFs \u003d FileContext.getLocalFSFileContext(config);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get the local filesystem\", e);\n    }\n    FsPermission perm \u003d new FsPermission((short)0755);\n    boolean createSucceeded \u003d localDirs.createNonExistentDirs(localFs, perm);\n    createSucceeded \u0026\u003d logDirs.createNonExistentDirs(localFs, perm);\n    if (!createSucceeded) {\n      updateDirsAfterFailure();\n    }\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Configuration config) {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.init(conf);\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java"
      }
    },
    "123c4f57d3de1771c762c89f5befd04d420cf7e7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4444. nodemanager fails to start when one of the local-dirs is  bad (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 2:08 PM",
      "commitName": "123c4f57d3de1771c762c89f5befd04d420cf7e7",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "09/12/11 3:16 PM",
      "commitNameOld": "b0d3781b64bcb4850feb143a81a4dd2ce125d4a6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 234.91,
      "commitsBetweenForRepo": 1544,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,19 @@\n   public void init(Configuration config) {\n     // Clone the configuration as we may do modifications to dirs-list\n     Configuration conf \u003d new Configuration(config);\n     diskHealthCheckInterval \u003d conf.getLong(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n     monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n     isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n         YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n     minNeededHealthyDisksFactor \u003d conf.getFloat(\n         YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n         YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n     lastDisksCheckTime \u003d System.currentTimeMillis();\n     super.init(conf);\n+\n+    // Check the disk health immediately to weed out bad directories\n+    // before other init code attempts to use them.\n+    checkDirs();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.init(conf);\n\n    // Check the disk health immediately to weed out bad directories\n    // before other init code attempts to use them.\n    checkDirs();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,15 @@\n+  public void init(Configuration config) {\n+    // Clone the configuration as we may do modifications to dirs-list\n+    Configuration conf \u003d new Configuration(config);\n+    diskHealthCheckInterval \u003d conf.getLong(\n+        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n+        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n+    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n+    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n+        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n+    minNeededHealthyDisksFactor \u003d conf.getFloat(\n+        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n+        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n+    lastDisksCheckTime \u003d System.currentTimeMillis();\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Configuration config) {\n    // Clone the configuration as we may do modifications to dirs-list\n    Configuration conf \u003d new Configuration(config);\n    diskHealthCheckInterval \u003d conf.getLong(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS);\n    monitoringTimerTask \u003d new MonitoringTimerTask(conf);\n    isDiskHealthCheckerEnabled \u003d conf.getBoolean(\n        YarnConfiguration.NM_DISK_HEALTH_CHECK_ENABLE, true);\n    minNeededHealthyDisksFactor \u003d conf.getFloat(\n        YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION,\n        YarnConfiguration.DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION);\n    lastDisksCheckTime \u003d System.currentTimeMillis();\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java"
    }
  }
}