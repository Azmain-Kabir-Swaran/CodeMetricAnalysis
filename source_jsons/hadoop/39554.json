{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "setupQueueConfigs",
  "functionId": "setupQueueConfigs___clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 127,
  "functionEndLine": 164,
  "numCommitsSeen": 194,
  "timeTaken": 15561,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "95372657fc25c02399b01793833021ccf88dada2",
    "ce832059db077fa95922198b066a737ed4f609fe",
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "1eae719bcead45915977aa220324650eab3c1b9e",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "4174b9756c8c7877797545c4356b1f40df603ec5",
    "18a594257e052e8f10a03e5594e6cc6901dc56be",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "eb3e40b833b9d82c1556843f960194dc42e482f3",
    "9c22065109a77681bc2534063eabe8692fbcb3cd",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
    "c7007a8a3508a24a6f023302516fe8fbe270eab1",
    "41b1e3ffec808db440778bebc258c10c76834513",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "ce832059db077fa95922198b066a737ed4f609fe": "Ymultichange(Ymodifierchange,Ybodychange)",
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "1eae719bcead45915977aa220324650eab3c1b9e": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "4174b9756c8c7877797545c4356b1f40df603ec5": "Ybodychange",
    "18a594257e052e8f10a03e5594e6cc6901dc56be": "Ymultichange(Yparameterchange,Ybodychange)",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": "Ymultichange(Yparameterchange,Ybodychange)",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "eb3e40b833b9d82c1556843f960194dc42e482f3": "Ymodifierchange",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef": "Ybodychange",
    "c7007a8a3508a24a6f023302516fe8fbe270eab1": "Ymultichange(Yparameterchange,Ybodychange)",
    "41b1e3ffec808db440778bebc258c10c76834513": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   protected void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n           labelStrBuilder.append(s)\n               .append(\",\");\n         }\n       }\n \n       // Initialize queue ordering policy\n       queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n           getQueuePath(), parent \u003d\u003d null ?\n               null :\n               ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n       queueOrderingPolicy.setQueues(childQueues);\n \n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n           .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n           + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n           + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n           + \", priority\u003d\" + priority);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    writeLock.lock();\n    try {\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s)\n              .append(\",\");\n        }\n      }\n\n      // Initialize queue ordering policy\n      queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n          getQueuePath(), parent \u003d\u003d null ?\n              null :\n              ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n      queueOrderingPolicy.setQueues(childQueues);\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n          + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n          + \", priority\u003d\" + priority);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "07/01/19 10:30 PM",
      "commitNameOld": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 48.55,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   protected void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     try {\n       writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n-          labelStrBuilder.append(s);\n-          labelStrBuilder.append(\",\");\n+          labelStrBuilder.append(s)\n+              .append(\",\");\n         }\n       }\n \n       // Initialize queue ordering policy\n       queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n           getQueuePath(), parent \u003d\u003d null ?\n               null :\n               ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n       queueOrderingPolicy.setQueues(childQueues);\n \n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n           .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n           + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n           + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n           + \", priority\u003d\" + priority);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s)\n              .append(\",\");\n        }\n      }\n\n      // Initialize queue ordering policy\n      queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n          getQueuePath(), parent \u003d\u003d null ?\n              null :\n              ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n      queueOrderingPolicy.setQueues(childQueues);\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n          + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n          + \", priority\u003d\" + priority);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "ce832059db077fa95922198b066a737ed4f609fe": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)\n",
      "commitDate": "23/01/17 10:52 AM",
      "commitName": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)\n",
          "commitDate": "23/01/17 10:52 AM",
          "commitName": "ce832059db077fa95922198b066a737ed4f609fe",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/17 1:31 PM",
          "commitNameOld": "72054a817dfb43e93916d7036eba19cf2f49cea2",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 4.89,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,38 @@\n-  void setupQueueConfigs(Resource clusterResource)\n+  protected void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     try {\n       writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n           labelStrBuilder.append(s);\n           labelStrBuilder.append(\",\");\n         }\n       }\n \n+      // Initialize queue ordering policy\n+      queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n+          getQueuePath(), parent \u003d\u003d null ?\n+              null :\n+              ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n+      queueOrderingPolicy.setQueues(childQueues);\n+\n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n           .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n-          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n+          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n+          + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n+          + \", priority\u003d\" + priority);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      // Initialize queue ordering policy\n      queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n          getQueuePath(), parent \u003d\u003d null ?\n              null :\n              ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n      queueOrderingPolicy.setQueues(childQueues);\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n          + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n          + \", priority\u003d\" + priority);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5864. Capacity Scheduler - Queue Priorities. (wangda)\n",
          "commitDate": "23/01/17 10:52 AM",
          "commitName": "ce832059db077fa95922198b066a737ed4f609fe",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "18/01/17 1:31 PM",
          "commitNameOld": "72054a817dfb43e93916d7036eba19cf2f49cea2",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 4.89,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,38 @@\n-  void setupQueueConfigs(Resource clusterResource)\n+  protected void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     try {\n       writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n           labelStrBuilder.append(s);\n           labelStrBuilder.append(\",\");\n         }\n       }\n \n+      // Initialize queue ordering policy\n+      queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n+          getQueuePath(), parent \u003d\u003d null ?\n+              null :\n+              ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n+      queueOrderingPolicy.setQueues(childQueues);\n+\n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n           .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n-          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n+          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n+          + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n+          + \", priority\u003d\" + priority);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      // Initialize queue ordering policy\n      queueOrderingPolicy \u003d csContext.getConfiguration().getQueueOrderingPolicy(\n          getQueuePath(), parent \u003d\u003d null ?\n              null :\n              ((ParentQueue) parent).getQueueOrderingPolicyConfigName());\n      queueOrderingPolicy.setQueues(childQueues);\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking\n          + \", orderingPolicy\u003d\" + getQueueOrderingPolicyConfigName()\n          + \", priority\u003d\" + priority);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5756. Add state-machine implementation for scheduler queues. (Xuan Gong via wangda)\n",
      "commitDate": "27/12/16 9:18 PM",
      "commitName": "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/12/16 9:09 PM",
      "commitNameOld": "563480dccd0136d82730f4228f1df44449ed5822",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     try {\n       writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n           labelStrBuilder.append(s);\n           labelStrBuilder.append(\",\");\n         }\n       }\n \n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n-          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n+          .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n           + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + getState() + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/10/16 10:30 AM",
      "commitNameOld": "1eae719bcead45915977aa220324650eab3c1b9e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 10.03,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,29 @@\n   void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     try {\n       writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n           labelStrBuilder.append(s);\n           labelStrBuilder.append(\",\");\n         }\n       }\n \n-      offswitchPerHeartbeatLimit \u003d\n-        csContext.getConfiguration().getOffSwitchPerHeartbeatLimit();\n-\n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n           .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n-          + \", offswitchPerHeartbeatLimit \u003d \" + getOffSwitchPerHeartbeatLimit()\n           + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "1eae719bcead45915977aa220324650eab3c1b9e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4963. capacity scheduler: Make number of OFF_SWITCH assignments per heartbeat configurable. Contributed by Nathan Roberts\n",
      "commitDate": "28/10/16 10:30 AM",
      "commitName": "1eae719bcead45915977aa220324650eab3c1b9e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "20/09/16 12:03 AM",
      "commitNameOld": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 38.44,
      "commitsBetweenForRepo": 323,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     try {\n       writeLock.lock();\n       super.setupQueueConfigs(clusterResource);\n       StringBuilder aclsString \u003d new StringBuilder();\n       for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n         aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n \n       StringBuilder labelStrBuilder \u003d new StringBuilder();\n       if (accessibleLabels !\u003d null) {\n         for (String s : accessibleLabels) {\n           labelStrBuilder.append(s);\n           labelStrBuilder.append(\",\");\n         }\n       }\n \n+      offswitchPerHeartbeatLimit \u003d\n+        csContext.getConfiguration().getOffSwitchPerHeartbeatLimit();\n+\n       LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n           + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n           + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n           + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n           .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n           + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n+          + \", offswitchPerHeartbeatLimit \u003d \" + getOffSwitchPerHeartbeatLimit()\n           + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      offswitchPerHeartbeatLimit \u003d\n        csContext.getConfiguration().getOffSwitchPerHeartbeatLimit();\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", offswitchPerHeartbeatLimit \u003d \" + getOffSwitchPerHeartbeatLimit()\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  synchronized void setupQueueConfigs(Resource clusterResource)\n+  void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n-    super.setupQueueConfigs(clusterResource);\n-    StringBuilder aclsString \u003d new StringBuilder();\n-    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n-      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n-    }\n-\n-    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n-    if (accessibleLabels !\u003d null) {\n-      for (String s : accessibleLabels) {\n-        labelStrBuilder.append(s);\n-        labelStrBuilder.append(\",\");\n+    try {\n+      writeLock.lock();\n+      super.setupQueueConfigs(clusterResource);\n+      StringBuilder aclsString \u003d new StringBuilder();\n+      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n+        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n-    }\n \n-    LOG.info(queueName +\n-        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n-        \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n-        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n-        \", absoluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() +\n-        \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString + \n-        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n-        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n+      StringBuilder labelStrBuilder \u003d new StringBuilder();\n+      if (accessibleLabels !\u003d null) {\n+        for (String s : accessibleLabels) {\n+          labelStrBuilder.append(s);\n+          labelStrBuilder.append(\",\");\n+        }\n+      }\n+\n+      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n+          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n+          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n+          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n+          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n+          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n+          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/09/16 10:05 PM",
          "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 3.08,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  synchronized void setupQueueConfigs(Resource clusterResource)\n+  void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n-    super.setupQueueConfigs(clusterResource);\n-    StringBuilder aclsString \u003d new StringBuilder();\n-    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n-      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n-    }\n-\n-    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n-    if (accessibleLabels !\u003d null) {\n-      for (String s : accessibleLabels) {\n-        labelStrBuilder.append(s);\n-        labelStrBuilder.append(\",\");\n+    try {\n+      writeLock.lock();\n+      super.setupQueueConfigs(clusterResource);\n+      StringBuilder aclsString \u003d new StringBuilder();\n+      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n+        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n       }\n-    }\n \n-    LOG.info(queueName +\n-        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n-        \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n-        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n-        \", absoluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() +\n-        \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString + \n-        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n-        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n+      StringBuilder labelStrBuilder \u003d new StringBuilder();\n+      if (accessibleLabels !\u003d null) {\n+        for (String s : accessibleLabels) {\n+          labelStrBuilder.append(s);\n+          labelStrBuilder.append(\",\");\n+        }\n+      }\n+\n+      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n+          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n+          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n+          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n+          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n+          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n+          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    try {\n      writeLock.lock();\n      super.setupQueueConfigs(clusterResource);\n      StringBuilder aclsString \u003d new StringBuilder();\n      for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n        aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n      }\n\n      StringBuilder labelStrBuilder \u003d new StringBuilder();\n      if (accessibleLabels !\u003d null) {\n        for (String s : accessibleLabels) {\n          labelStrBuilder.append(s);\n          labelStrBuilder.append(\",\");\n        }\n      }\n\n      LOG.info(queueName + \", capacity\u003d\" + this.queueCapacities.getCapacity()\n          + \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity()\n          + \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity()\n          + \", absoluteMaxCapacity\u003d\" + this.queueCapacities\n          .getAbsoluteMaximumCapacity() + \", state\u003d\" + state + \", acls\u003d\"\n          + aclsString + \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\"\n          + \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "4174b9756c8c7877797545c4356b1f40df603ec5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5642. Typos in 9 log messages. Contributed by Mehran Hassani\n",
      "commitDate": "16/09/16 10:05 PM",
      "commitName": "4174b9756c8c7877797545c4356b1f40df603ec5",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "05/08/16 10:27 AM",
      "commitNameOld": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 42.48,
      "commitsBetweenForRepo": 259,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   synchronized void setupQueueConfigs(Resource clusterResource)\n       throws IOException {\n     super.setupQueueConfigs(clusterResource);\n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     StringBuilder labelStrBuilder \u003d new StringBuilder(); \n     if (accessibleLabels !\u003d null) {\n       for (String s : accessibleLabels) {\n         labelStrBuilder.append(s);\n         labelStrBuilder.append(\",\");\n       }\n     }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n-        \", asboluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n+        \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n         \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n-        \", asboluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() + \n+        \", absoluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() +\n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString + \n         \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    super.setupQueueConfigs(clusterResource);\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n        \", absoluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n        \", absoluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() +\n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "18a594257e052e8f10a03e5594e6cc6901dc56be": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
      "commitDate": "12/02/15 2:58 PM",
      "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
          "commitDate": "12/02/15 2:58 PM",
          "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/02/15 8:34 PM",
          "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,26 @@\n-  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n-      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n-      QueueState state, Map\u003cAccessType, AccessControlList\u003e acls,\n-      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n-      Map\u003cString, Float\u003e nodeLabelCapacities,\n-      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n-      boolean reservationContinueLooking) throws IOException {\n-    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n-        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n-        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n-        reservationContinueLooking, maximumAllocation);\n-   StringBuilder aclsString \u003d new StringBuilder();\n+  synchronized void setupQueueConfigs(Resource clusterResource)\n+      throws IOException {\n+    super.setupQueueConfigs(clusterResource);\n+    StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     StringBuilder labelStrBuilder \u003d new StringBuilder(); \n     if (accessibleLabels !\u003d null) {\n       for (String s : accessibleLabels) {\n         labelStrBuilder.append(s);\n         labelStrBuilder.append(\",\");\n       }\n     }\n \n     LOG.info(queueName +\n-        \", capacity\u003d\" + capacity +\n-        \", asboluteCapacity\u003d\" + absoluteCapacity +\n-        \", maxCapacity\u003d\" + maximumCapacity +\n-        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n+        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n+        \", asboluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n+        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n+        \", asboluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString + \n         \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    super.setupQueueConfigs(clusterResource);\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n        \", asboluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n        \", asboluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cAccessType,AccessControlList\u003e, accessibleLabels-Set\u003cString\u003e, defaultLabelExpression-String, nodeLabelCapacities-Map\u003cString,Float\u003e, maximumCapacitiesByLabel-Map\u003cString,Float\u003e, reservationContinueLooking-boolean]",
            "newValue": "[clusterResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
          "commitDate": "12/02/15 2:58 PM",
          "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/02/15 8:34 PM",
          "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 2.77,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,26 @@\n-  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n-      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n-      QueueState state, Map\u003cAccessType, AccessControlList\u003e acls,\n-      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n-      Map\u003cString, Float\u003e nodeLabelCapacities,\n-      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n-      boolean reservationContinueLooking) throws IOException {\n-    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n-        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n-        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n-        reservationContinueLooking, maximumAllocation);\n-   StringBuilder aclsString \u003d new StringBuilder();\n+  synchronized void setupQueueConfigs(Resource clusterResource)\n+      throws IOException {\n+    super.setupQueueConfigs(clusterResource);\n+    StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     StringBuilder labelStrBuilder \u003d new StringBuilder(); \n     if (accessibleLabels !\u003d null) {\n       for (String s : accessibleLabels) {\n         labelStrBuilder.append(s);\n         labelStrBuilder.append(\",\");\n       }\n     }\n \n     LOG.info(queueName +\n-        \", capacity\u003d\" + capacity +\n-        \", asboluteCapacity\u003d\" + absoluteCapacity +\n-        \", maxCapacity\u003d\" + maximumCapacity +\n-        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n+        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n+        \", asboluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n+        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n+        \", asboluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString + \n         \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource)\n      throws IOException {\n    super.setupQueueConfigs(clusterResource);\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + this.queueCapacities.getCapacity() +\n        \", asboluteCapacity\u003d\" + this.queueCapacities.getAbsoluteCapacity() +\n        \", maxCapacity\u003d\" + this.queueCapacities.getMaximumCapacity() +\n        \", asboluteMaxCapacity\u003d\" + this.queueCapacities.getAbsoluteMaximumCapacity() + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
      "commitDate": "09/02/15 8:34 PM",
      "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
          "commitDate": "09/02/15 8:34 PM",
          "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "05/02/15 4:12 PM",
          "commitNameOld": "4641196fe02af5cab3d56a9f3c78875c495dbe03",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 4.18,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n       float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n-      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n+      QueueState state, Map\u003cAccessType, AccessControlList\u003e acls,\n       Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n       Map\u003cString, Float\u003e nodeLabelCapacities,\n       Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n       boolean reservationContinueLooking) throws IOException {\n     super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n         maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n         defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n         reservationContinueLooking, maximumAllocation);\n    StringBuilder aclsString \u003d new StringBuilder();\n-    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n+    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     StringBuilder labelStrBuilder \u003d new StringBuilder(); \n     if (accessibleLabels !\u003d null) {\n       for (String s : accessibleLabels) {\n         labelStrBuilder.append(s);\n         labelStrBuilder.append(\",\");\n       }\n     }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString + \n         \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cAccessType, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking, maximumAllocation);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e, accessibleLabels-Set\u003cString\u003e, defaultLabelExpression-String, nodeLabelCapacities-Map\u003cString,Float\u003e, maximumCapacitiesByLabel-Map\u003cString,Float\u003e, reservationContinueLooking-boolean]",
            "newValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cAccessType,AccessControlList\u003e, accessibleLabels-Set\u003cString\u003e, defaultLabelExpression-String, nodeLabelCapacities-Map\u003cString,Float\u003e, maximumCapacitiesByLabel-Map\u003cString,Float\u003e, reservationContinueLooking-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
          "commitDate": "09/02/15 8:34 PM",
          "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "05/02/15 4:12 PM",
          "commitNameOld": "4641196fe02af5cab3d56a9f3c78875c495dbe03",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 4.18,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,34 @@\n   synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n       float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n-      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n+      QueueState state, Map\u003cAccessType, AccessControlList\u003e acls,\n       Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n       Map\u003cString, Float\u003e nodeLabelCapacities,\n       Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n       boolean reservationContinueLooking) throws IOException {\n     super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n         maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n         defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n         reservationContinueLooking, maximumAllocation);\n    StringBuilder aclsString \u003d new StringBuilder();\n-    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n+    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     StringBuilder labelStrBuilder \u003d new StringBuilder(); \n     if (accessibleLabels !\u003d null) {\n       for (String s : accessibleLabels) {\n         labelStrBuilder.append(s);\n         labelStrBuilder.append(\",\");\n       }\n     }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString + \n         \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cAccessType, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking, maximumAllocation);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cAccessType, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1582. Capacity Scheduler: add a maximum-allocation-mb setting per queue. Contributed by Thomas Graves\n",
      "commitDate": "05/02/15 11:28 AM",
      "commitName": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "30/01/15 3:15 PM",
      "commitNameOld": "86358221fc85a7743052a0b4c1647353508bf308",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.84,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n       float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n       Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n       Map\u003cString, Float\u003e nodeLabelCapacities,\n       Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n       boolean reservationContinueLooking) throws IOException {\n     super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n         maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n         defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n-        reservationContinueLooking);\n+        reservationContinueLooking, maximumAllocation);\n    StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     StringBuilder labelStrBuilder \u003d new StringBuilder(); \n     if (accessibleLabels !\u003d null) {\n       for (String s : accessibleLabels) {\n         labelStrBuilder.append(s);\n         labelStrBuilder.append(\",\");\n       }\n     }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString + \n         \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking, maximumAllocation);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/14 3:41 PM",
          "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 12.12,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,34 @@\n-  protected synchronized void setupQueueConfigs(\n-      Resource clusterResource,\n-      float capacity, float absoluteCapacity, \n-      float maximumCapacity, float absoluteMaxCapacity,\n+  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n+      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n-      boolean continueLooking\n-  ) {\n-    // Sanity check\n-    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n-    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n-\n-    this.capacity \u003d capacity;\n-    this.absoluteCapacity \u003d absoluteCapacity;\n-\n-    this.maximumCapacity \u003d maximumCapacity;\n-    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n-\n-    this.state \u003d state;\n-\n-    this.acls \u003d acls;\n-    \n-    this.queueInfo.setCapacity(this.capacity);\n-    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n-    this.queueInfo.setQueueState(this.state);\n-\n-    this.reservationsContinueLooking \u003d continueLooking;\n-\n-    StringBuilder aclsString \u003d new StringBuilder();\n+      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n+      Map\u003cString, Float\u003e nodeLabelCapacities,\n+      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n+      boolean reservationContinueLooking) throws IOException {\n+    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n+        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n+        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n+        reservationContinueLooking);\n+   StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n-    // Update metrics\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n+    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n+    if (accessibleLabels !\u003d null) {\n+      for (String s : accessibleLabels) {\n+        labelStrBuilder.append(s);\n+        labelStrBuilder.append(\",\");\n+      }\n+    }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString +\n+        \", acls\u003d\" + aclsString + \n+        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e, continueLooking-boolean]",
            "newValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e, accessibleLabels-Set\u003cString\u003e, defaultLabelExpression-String, nodeLabelCapacities-Map\u003cString,Float\u003e, maximumCapacitiesByLabel-Map\u003cString,Float\u003e, reservationContinueLooking-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/14 3:41 PM",
          "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 12.12,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,34 @@\n-  protected synchronized void setupQueueConfigs(\n-      Resource clusterResource,\n-      float capacity, float absoluteCapacity, \n-      float maximumCapacity, float absoluteMaxCapacity,\n+  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n+      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n-      boolean continueLooking\n-  ) {\n-    // Sanity check\n-    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n-    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n-\n-    this.capacity \u003d capacity;\n-    this.absoluteCapacity \u003d absoluteCapacity;\n-\n-    this.maximumCapacity \u003d maximumCapacity;\n-    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n-\n-    this.state \u003d state;\n-\n-    this.acls \u003d acls;\n-    \n-    this.queueInfo.setCapacity(this.capacity);\n-    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n-    this.queueInfo.setQueueState(this.state);\n-\n-    this.reservationsContinueLooking \u003d continueLooking;\n-\n-    StringBuilder aclsString \u003d new StringBuilder();\n+      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n+      Map\u003cString, Float\u003e nodeLabelCapacities,\n+      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n+      boolean reservationContinueLooking) throws IOException {\n+    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n+        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n+        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n+        reservationContinueLooking);\n+   StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n-    // Update metrics\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n+    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n+    if (accessibleLabels !\u003d null) {\n+      for (String s : accessibleLabels) {\n+        labelStrBuilder.append(s);\n+        labelStrBuilder.append(\",\");\n+      }\n+    }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString +\n+        \", acls\u003d\" + aclsString + \n+        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[protected, synchronized]",
            "newValue": "[synchronized]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/14 3:41 PM",
          "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 12.12,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,34 @@\n-  protected synchronized void setupQueueConfigs(\n-      Resource clusterResource,\n-      float capacity, float absoluteCapacity, \n-      float maximumCapacity, float absoluteMaxCapacity,\n+  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n+      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n-      boolean continueLooking\n-  ) {\n-    // Sanity check\n-    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n-    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n-\n-    this.capacity \u003d capacity;\n-    this.absoluteCapacity \u003d absoluteCapacity;\n-\n-    this.maximumCapacity \u003d maximumCapacity;\n-    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n-\n-    this.state \u003d state;\n-\n-    this.acls \u003d acls;\n-    \n-    this.queueInfo.setCapacity(this.capacity);\n-    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n-    this.queueInfo.setQueueState(this.state);\n-\n-    this.reservationsContinueLooking \u003d continueLooking;\n-\n-    StringBuilder aclsString \u003d new StringBuilder();\n+      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n+      Map\u003cString, Float\u003e nodeLabelCapacities,\n+      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n+      boolean reservationContinueLooking) throws IOException {\n+    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n+        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n+        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n+        reservationContinueLooking);\n+   StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n-    // Update metrics\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n+    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n+    if (accessibleLabels !\u003d null) {\n+      for (String s : accessibleLabels) {\n+        labelStrBuilder.append(s);\n+        labelStrBuilder.append(\",\");\n+      }\n+    }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString +\n+        \", acls\u003d\" + aclsString + \n+        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/14 3:41 PM",
          "commitNameOld": "eb3e40b833b9d82c1556843f960194dc42e482f3",
          "commitAuthorOld": "carlo curino",
          "daysBetweenCommits": 12.12,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,34 @@\n-  protected synchronized void setupQueueConfigs(\n-      Resource clusterResource,\n-      float capacity, float absoluteCapacity, \n-      float maximumCapacity, float absoluteMaxCapacity,\n+  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n+      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n-      boolean continueLooking\n-  ) {\n-    // Sanity check\n-    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n-    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n-\n-    this.capacity \u003d capacity;\n-    this.absoluteCapacity \u003d absoluteCapacity;\n-\n-    this.maximumCapacity \u003d maximumCapacity;\n-    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n-\n-    this.state \u003d state;\n-\n-    this.acls \u003d acls;\n-    \n-    this.queueInfo.setCapacity(this.capacity);\n-    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n-    this.queueInfo.setQueueState(this.state);\n-\n-    this.reservationsContinueLooking \u003d continueLooking;\n-\n-    StringBuilder aclsString \u003d new StringBuilder();\n+      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n+      Map\u003cString, Float\u003e nodeLabelCapacities,\n+      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n+      boolean reservationContinueLooking) throws IOException {\n+    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n+        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n+        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n+        reservationContinueLooking);\n+   StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n-    // Update metrics\n-    CSQueueUtils.updateQueueStatistics(\n-        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n+    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n+    if (accessibleLabels !\u003d null) {\n+      for (String s : accessibleLabels) {\n+        labelStrBuilder.append(s);\n+        labelStrBuilder.append(\",\");\n+      }\n+    }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString +\n+        \", acls\u003d\" + aclsString + \n+        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void setupQueueConfigs(Resource clusterResource, float capacity,\n      float absoluteCapacity, float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      Set\u003cString\u003e accessibleLabels, String defaultLabelExpression,\n      Map\u003cString, Float\u003e nodeLabelCapacities,\n      Map\u003cString, Float\u003e maximumCapacitiesByLabel, \n      boolean reservationContinueLooking) throws IOException {\n    super.setupQueueConfigs(clusterResource, capacity, absoluteCapacity,\n        maximumCapacity, absoluteMaxCapacity, state, acls, accessibleLabels,\n        defaultLabelExpression, nodeLabelCapacities, maximumCapacitiesByLabel,\n        reservationContinueLooking);\n   StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    StringBuilder labelStrBuilder \u003d new StringBuilder(); \n    if (accessibleLabels !\u003d null) {\n      for (String s : accessibleLabels) {\n        labelStrBuilder.append(s);\n        labelStrBuilder.append(\",\");\n      }\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString + \n        \", labels\u003d\" + labelStrBuilder.toString() + \"\\n\" +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "eb3e40b833b9d82c1556843f960194dc42e482f3": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1707. Introduce APIs to add/remove/resize queues in the CapacityScheduler. Contributed by Carlo Curino and Subru Krishnan\n(cherry picked from commit aac47fda7fecda9fc18ade34d633eca895865a70)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthor": "carlo curino",
      "commitDateOld": "29/09/14 7:12 AM",
      "commitNameOld": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.35,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n-  private synchronized void setupQueueConfigs(\n+  protected synchronized void setupQueueConfigs(\n       Resource clusterResource,\n       float capacity, float absoluteCapacity, \n       float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n       boolean continueLooking\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n     CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n \n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n     this.reservationsContinueLooking \u003d continueLooking;\n \n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, parent, clusterResource, minimumAllocation);\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString +\n         \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      boolean continueLooking\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    this.reservationsContinueLooking \u003d continueLooking;\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldValue": "[private, synchronized]",
        "newValue": "[protected, synchronized]"
      }
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,45 @@\n   private synchronized void setupQueueConfigs(\n       Resource clusterResource,\n       float capacity, float absoluteCapacity, \n       float maximumCapacity, float absoluteMaxCapacity,\n-      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n+      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n+      boolean continueLooking\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n     CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n \n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n+    this.reservationsContinueLooking \u003d continueLooking;\n+\n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, parent, clusterResource, minimumAllocation);\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString);\n+        \", acls\u003d\" + aclsString +\n+        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      boolean continueLooking\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    this.reservationsContinueLooking \u003d continueLooking;\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e]",
            "newValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e, continueLooking-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,45 @@\n   private synchronized void setupQueueConfigs(\n       Resource clusterResource,\n       float capacity, float absoluteCapacity, \n       float maximumCapacity, float absoluteMaxCapacity,\n-      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n+      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n+      boolean continueLooking\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n     CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n \n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n+    this.reservationsContinueLooking \u003d continueLooking;\n+\n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         resourceCalculator, this, parent, clusterResource, minimumAllocation);\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n-        \", acls\u003d\" + aclsString);\n+        \", acls\u003d\" + aclsString +\n+        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls,\n      boolean continueLooking\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    this.reservationsContinueLooking \u003d continueLooking;\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString +\n        \", reservationsContinueLooking\u003d\" + reservationsContinueLooking);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "31/10/12 9:56 AM",
      "commitNameOld": "ab8fa651f736525c8e40229ee99859cee9c1ba33",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 69.51,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private synchronized void setupQueueConfigs(\n       Resource clusterResource,\n       float capacity, float absoluteCapacity, \n       float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n     CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n \n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n-        this, parent, clusterResource, minimumAllocation);\n+        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        resourceCalculator, this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3816 capacity scheduler web ui bar graphs for used capacity wrong (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1294808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 12:06 PM",
      "commitName": "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "07/02/12 2:08 PM",
      "commitNameOld": "59b88655bc15535d7bf765987cb9b82f17e16b80",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   private synchronized void setupQueueConfigs(\n       Resource clusterResource,\n       float capacity, float absoluteCapacity, \n       float maximumCapacity, float absoluteMaxCapacity,\n       QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n+    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n+\n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     // Update metrics\n     CSQueueUtils.updateQueueStatistics(\n         this, parent, clusterResource, minimumAllocation);\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n    CSQueueUtils.checkAbsoluteCapacities(getQueueName(), absoluteCapacity, absoluteMaxCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "c7007a8a3508a24a6f023302516fe8fbe270eab1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3747. Initialize queue metrics upfront and added start/finish time to RM Web-UI. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240886 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/12 7:38 PM",
      "commitName": "c7007a8a3508a24a6f023302516fe8fbe270eab1",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3747. Initialize queue metrics upfront and added start/finish time to RM Web-UI. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240886 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/02/12 7:38 PM",
          "commitName": "c7007a8a3508a24a6f023302516fe8fbe270eab1",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/01/12 5:32 PM",
          "commitNameOld": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.09,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,39 @@\n   private synchronized void setupQueueConfigs(\n-          float capacity, float absoluteCapacity, \n-          float maximumCapacity, float absoluteMaxCapacity,\n-          QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n+      Resource clusterResource,\n+      float capacity, float absoluteCapacity, \n+      float maximumCapacity, float absoluteMaxCapacity,\n+      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n+    // Update metrics\n+    CSQueueUtils.updateQueueStatistics(\n+        this, parent, clusterResource, minimumAllocation);\n+\n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {
            "oldValue": "[capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e]",
            "newValue": "[clusterResource-Resource, capacity-float, absoluteCapacity-float, maximumCapacity-float, absoluteMaxCapacity-float, state-QueueState, acls-Map\u003cQueueACL,AccessControlList\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3747. Initialize queue metrics upfront and added start/finish time to RM Web-UI. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240886 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/02/12 7:38 PM",
          "commitName": "c7007a8a3508a24a6f023302516fe8fbe270eab1",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/01/12 5:32 PM",
          "commitNameOld": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.09,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,39 @@\n   private synchronized void setupQueueConfigs(\n-          float capacity, float absoluteCapacity, \n-          float maximumCapacity, float absoluteMaxCapacity,\n-          QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n+      Resource clusterResource,\n+      float capacity, float absoluteCapacity, \n+      float maximumCapacity, float absoluteMaxCapacity,\n+      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n   ) {\n     // Sanity check\n     CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n \n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n     this.queueInfo.setCapacity(this.capacity);\n     this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n     this.queueInfo.setQueueState(this.state);\n \n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n+    // Update metrics\n+    CSQueueUtils.updateQueueStatistics(\n+        this, parent, clusterResource, minimumAllocation);\n+\n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void setupQueueConfigs(\n      Resource clusterResource,\n      float capacity, float absoluteCapacity, \n      float maximumCapacity, float absoluteMaxCapacity,\n      QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    // Update metrics\n    CSQueueUtils.updateQueueStatistics(\n        this, parent, clusterResource, minimumAllocation);\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "41b1e3ffec808db440778bebc258c10c76834513": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3329. Fixed CapacityScheduler to ensure maximum-capacity cannot be lesser than capacity for any queue.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1205260 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/11/11 5:42 PM",
      "commitName": "41b1e3ffec808db440778bebc258c10c76834513",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "05/10/11 4:56 AM",
      "commitNameOld": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 48.57,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   private synchronized void setupQueueConfigs(\n           float capacity, float absoluteCapacity, \n           float maximumCapacity, float absoluteMaxCapacity,\n           QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n   ) {\n+    // Sanity check\n+    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n+\n     this.capacity \u003d capacity;\n     this.absoluteCapacity \u003d absoluteCapacity;\n     this.maximumCapacity \u003d maximumCapacity;\n     this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n \n     this.state \u003d state;\n \n     this.acls \u003d acls;\n     \n-    this.queueInfo.setCapacity(capacity);\n-    this.queueInfo.setMaximumCapacity(maximumCapacity);\n-    this.queueInfo.setQueueState(state);\n+    this.queueInfo.setCapacity(this.capacity);\n+    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n+    this.queueInfo.setQueueState(this.state);\n \n     StringBuilder aclsString \u003d new StringBuilder();\n     for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n       aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n     }\n \n     LOG.info(queueName +\n         \", capacity\u003d\" + capacity +\n         \", asboluteCapacity\u003d\" + absoluteCapacity +\n         \", maxCapacity\u003d\" + maximumCapacity +\n         \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n         \", state\u003d\" + state +\n         \", acls\u003d\" + aclsString);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void setupQueueConfigs(\n          float capacity, float absoluteCapacity, \n          float maximumCapacity, float absoluteMaxCapacity,\n          QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    // Sanity check\n    CSQueueUtils.checkMaxCapacity(getQueueName(), capacity, maximumCapacity);\n\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(this.capacity);\n    this.queueInfo.setMaximumCapacity(this.maximumCapacity);\n    this.queueInfo.setQueueState(this.state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void setupQueueConfigs(\n          float capacity, float absoluteCapacity, \n          float maximumCapacity, float absoluteMaxCapacity,\n          QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(capacity);\n    this.queueInfo.setMaximumCapacity(maximumCapacity);\n    this.queueInfo.setQueueState(state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,31 @@\n+  private synchronized void setupQueueConfigs(\n+          float capacity, float absoluteCapacity, \n+          float maximumCapacity, float absoluteMaxCapacity,\n+          QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n+  ) {\n+    this.capacity \u003d capacity;\n+    this.absoluteCapacity \u003d absoluteCapacity;\n+    this.maximumCapacity \u003d maximumCapacity;\n+    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n+\n+    this.state \u003d state;\n+\n+    this.acls \u003d acls;\n+    \n+    this.queueInfo.setCapacity(capacity);\n+    this.queueInfo.setMaximumCapacity(maximumCapacity);\n+    this.queueInfo.setQueueState(state);\n+\n+    StringBuilder aclsString \u003d new StringBuilder();\n+    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n+      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n+    }\n+\n+    LOG.info(queueName +\n+        \", capacity\u003d\" + capacity +\n+        \", asboluteCapacity\u003d\" + absoluteCapacity +\n+        \", maxCapacity\u003d\" + maximumCapacity +\n+        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n+        \", state\u003d\" + state +\n+        \", acls\u003d\" + aclsString);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void setupQueueConfigs(\n          float capacity, float absoluteCapacity, \n          float maximumCapacity, float absoluteMaxCapacity,\n          QueueState state, Map\u003cQueueACL, AccessControlList\u003e acls\n  ) {\n    this.capacity \u003d capacity;\n    this.absoluteCapacity \u003d absoluteCapacity;\n    this.maximumCapacity \u003d maximumCapacity;\n    this.absoluteMaxCapacity \u003d absoluteMaxCapacity;\n\n    this.state \u003d state;\n\n    this.acls \u003d acls;\n    \n    this.queueInfo.setCapacity(capacity);\n    this.queueInfo.setMaximumCapacity(maximumCapacity);\n    this.queueInfo.setQueueState(state);\n\n    StringBuilder aclsString \u003d new StringBuilder();\n    for (Map.Entry\u003cQueueACL, AccessControlList\u003e e : acls.entrySet()) {\n      aclsString.append(e.getKey() + \":\" + e.getValue().getAclString());\n    }\n\n    LOG.info(queueName +\n        \", capacity\u003d\" + capacity +\n        \", asboluteCapacity\u003d\" + absoluteCapacity +\n        \", maxCapacity\u003d\" + maximumCapacity +\n        \", asboluteMaxCapacity\u003d\" + absoluteMaxCapacity + \n        \", state\u003d\" + state +\n        \", acls\u003d\" + aclsString);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}