{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureADAuthenticator.java",
  "functionName": "getTokenFromMsi",
  "functionId": "getTokenFromMsi___authEndpoint-String(modifiers-final)__tenantGuid-String(modifiers-final)__clientId-String(modifiers-final)__authority-String__bypassCache-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
  "functionStartLine": 121,
  "functionEndLine": 147,
  "numCommitsSeen": 14,
  "timeTaken": 4102,
  "changeHistory": [
    "0b931f36ec83dc72729a9e84a0d313f471061c64",
    "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
    "e374584479b687e41d5379bb6d827dcae620e123",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1"
  ],
  "changeHistoryShort": {
    "0b931f36ec83dc72729a9e84a0d313f471061c64": "Ybodychange",
    "1a77a15fe44df9ec837be5c558279d8fd4d25e97": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "e374584479b687e41d5379bb6d827dcae620e123": "Ybodychange",
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0b931f36ec83dc72729a9e84a0d313f471061c64": {
      "type": "Ybodychange",
      "commitMessage": "Hadoop 16890. Change in expiry calculation for MSI token provider.\n\n\r\nContributed by Bilahari T H",
      "commitDate": "11/03/20 1:39 PM",
      "commitName": "0b931f36ec83dc72729a9e84a0d313f471061c64",
      "commitAuthor": "bilaharith",
      "commitDateOld": "07/10/19 5:07 AM",
      "commitNameOld": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
      "commitAuthorOld": "bilaharith",
      "daysBetweenCommits": 156.36,
      "commitsBetweenForRepo": 555,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public static AzureADToken getTokenFromMsi(final String authEndpoint,\n       final String tenantGuid, final String clientId, String authority,\n       boolean bypassCache) throws IOException {\n     QueryParams qp \u003d new QueryParams();\n     qp.add(\"api-version\", \"2018-02-01\");\n     qp.add(\"resource\", RESOURCE_NAME);\n \n     if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n       authority \u003d authority + tenantGuid;\n       LOG.debug(\"MSI authority : {}\", authority);\n       qp.add(\"authority\", authority);\n     }\n \n     if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n       qp.add(\"client_id\", clientId);\n     }\n \n     if (bypassCache) {\n       qp.add(\"bypass_cache\", \"true\");\n     }\n \n     Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n     headers.put(\"Metadata\", \"true\");\n \n     LOG.debug(\"AADToken: starting to fetch token using MSI\");\n-    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n+    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\", true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n      final String tenantGuid, final String clientId, String authority,\n      boolean bypassCache) throws IOException {\n    QueryParams qp \u003d new QueryParams();\n    qp.add(\"api-version\", \"2018-02-01\");\n    qp.add(\"resource\", RESOURCE_NAME);\n\n    if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n      authority \u003d authority + tenantGuid;\n      LOG.debug(\"MSI authority : {}\", authority);\n      qp.add(\"authority\", authority);\n    }\n\n    if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n      qp.add(\"client_id\", clientId);\n    }\n\n    if (bypassCache) {\n      qp.add(\"bypass_cache\", \"true\");\n    }\n\n    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n    headers.put(\"Metadata\", \"true\");\n\n    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\", true);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
      "extendedDetails": {}
    },
    "1a77a15fe44df9ec837be5c558279d8fd4d25e97": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-16587. Make ABFS AAD endpoints configurable.\n\nContributed by Bilahari T H.\n\nThis also addresses HADOOP-16498: AzureADAuthenticator cannot authenticate\nin China.\n\nChange-Id: I2441dd48b50b59b912b0242f7f5a4418cf94a87c\n",
      "commitDate": "07/10/19 5:07 AM",
      "commitName": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
      "commitAuthor": "bilaharith",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16587. Make ABFS AAD endpoints configurable.\n\nContributed by Bilahari T H.\n\nThis also addresses HADOOP-16498: AzureADAuthenticator cannot authenticate\nin China.\n\nChange-Id: I2441dd48b50b59b912b0242f7f5a4418cf94a87c\n",
          "commitDate": "07/10/19 5:07 AM",
          "commitName": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
          "commitAuthor": "bilaharith",
          "commitDateOld": "19/06/19 9:43 AM",
          "commitNameOld": "450c070a8fb61910f4cd3cf263ce85091509a336",
          "commitAuthorOld": "Robert Levas",
          "daysBetweenCommits": 109.81,
          "commitsBetweenForRepo": 970,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n-  public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n-                                             boolean bypassCache) throws IOException {\n-    String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n-\n+  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n+      final String tenantGuid, final String clientId, String authority,\n+      boolean bypassCache) throws IOException {\n     QueryParams qp \u003d new QueryParams();\n     qp.add(\"api-version\", \"2018-02-01\");\n     qp.add(\"resource\", RESOURCE_NAME);\n \n-\n     if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n-      String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n+      authority \u003d authority + tenantGuid;\n+      LOG.debug(\"MSI authority : {}\", authority);\n       qp.add(\"authority\", authority);\n     }\n \n     if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n       qp.add(\"client_id\", clientId);\n     }\n \n     if (bypassCache) {\n       qp.add(\"bypass_cache\", \"true\");\n     }\n \n     Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n     headers.put(\"Metadata\", \"true\");\n \n     LOG.debug(\"AADToken: starting to fetch token using MSI\");\n     return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n      final String tenantGuid, final String clientId, String authority,\n      boolean bypassCache) throws IOException {\n    QueryParams qp \u003d new QueryParams();\n    qp.add(\"api-version\", \"2018-02-01\");\n    qp.add(\"resource\", RESOURCE_NAME);\n\n    if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n      authority \u003d authority + tenantGuid;\n      LOG.debug(\"MSI authority : {}\", authority);\n      qp.add(\"authority\", authority);\n    }\n\n    if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n      qp.add(\"client_id\", clientId);\n    }\n\n    if (bypassCache) {\n      qp.add(\"bypass_cache\", \"true\");\n    }\n\n    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n    headers.put(\"Metadata\", \"true\");\n\n    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
          "extendedDetails": {
            "oldValue": "[tenantGuid-String, clientId-String, bypassCache-boolean]",
            "newValue": "[authEndpoint-String(modifiers-final), tenantGuid-String(modifiers-final), clientId-String(modifiers-final), authority-String, bypassCache-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16587. Make ABFS AAD endpoints configurable.\n\nContributed by Bilahari T H.\n\nThis also addresses HADOOP-16498: AzureADAuthenticator cannot authenticate\nin China.\n\nChange-Id: I2441dd48b50b59b912b0242f7f5a4418cf94a87c\n",
          "commitDate": "07/10/19 5:07 AM",
          "commitName": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
          "commitAuthor": "bilaharith",
          "commitDateOld": "19/06/19 9:43 AM",
          "commitNameOld": "450c070a8fb61910f4cd3cf263ce85091509a336",
          "commitAuthorOld": "Robert Levas",
          "daysBetweenCommits": 109.81,
          "commitsBetweenForRepo": 970,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n-  public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n-                                             boolean bypassCache) throws IOException {\n-    String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n-\n+  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n+      final String tenantGuid, final String clientId, String authority,\n+      boolean bypassCache) throws IOException {\n     QueryParams qp \u003d new QueryParams();\n     qp.add(\"api-version\", \"2018-02-01\");\n     qp.add(\"resource\", RESOURCE_NAME);\n \n-\n     if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n-      String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n+      authority \u003d authority + tenantGuid;\n+      LOG.debug(\"MSI authority : {}\", authority);\n       qp.add(\"authority\", authority);\n     }\n \n     if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n       qp.add(\"client_id\", clientId);\n     }\n \n     if (bypassCache) {\n       qp.add(\"bypass_cache\", \"true\");\n     }\n \n     Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n     headers.put(\"Metadata\", \"true\");\n \n     LOG.debug(\"AADToken: starting to fetch token using MSI\");\n     return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n      final String tenantGuid, final String clientId, String authority,\n      boolean bypassCache) throws IOException {\n    QueryParams qp \u003d new QueryParams();\n    qp.add(\"api-version\", \"2018-02-01\");\n    qp.add(\"resource\", RESOURCE_NAME);\n\n    if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n      authority \u003d authority + tenantGuid;\n      LOG.debug(\"MSI authority : {}\", authority);\n      qp.add(\"authority\", authority);\n    }\n\n    if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n      qp.add(\"client_id\", clientId);\n    }\n\n    if (bypassCache) {\n      qp.add(\"bypass_cache\", \"true\");\n    }\n\n    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n    headers.put(\"Metadata\", \"true\");\n\n    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-16587. Make ABFS AAD endpoints configurable.\n\nContributed by Bilahari T H.\n\nThis also addresses HADOOP-16498: AzureADAuthenticator cannot authenticate\nin China.\n\nChange-Id: I2441dd48b50b59b912b0242f7f5a4418cf94a87c\n",
          "commitDate": "07/10/19 5:07 AM",
          "commitName": "1a77a15fe44df9ec837be5c558279d8fd4d25e97",
          "commitAuthor": "bilaharith",
          "commitDateOld": "19/06/19 9:43 AM",
          "commitNameOld": "450c070a8fb61910f4cd3cf263ce85091509a336",
          "commitAuthorOld": "Robert Levas",
          "daysBetweenCommits": 109.81,
          "commitsBetweenForRepo": 970,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n-  public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n-                                             boolean bypassCache) throws IOException {\n-    String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n-\n+  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n+      final String tenantGuid, final String clientId, String authority,\n+      boolean bypassCache) throws IOException {\n     QueryParams qp \u003d new QueryParams();\n     qp.add(\"api-version\", \"2018-02-01\");\n     qp.add(\"resource\", RESOURCE_NAME);\n \n-\n     if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n-      String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n+      authority \u003d authority + tenantGuid;\n+      LOG.debug(\"MSI authority : {}\", authority);\n       qp.add(\"authority\", authority);\n     }\n \n     if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n       qp.add(\"client_id\", clientId);\n     }\n \n     if (bypassCache) {\n       qp.add(\"bypass_cache\", \"true\");\n     }\n \n     Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n     headers.put(\"Metadata\", \"true\");\n \n     LOG.debug(\"AADToken: starting to fetch token using MSI\");\n     return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AzureADToken getTokenFromMsi(final String authEndpoint,\n      final String tenantGuid, final String clientId, String authority,\n      boolean bypassCache) throws IOException {\n    QueryParams qp \u003d new QueryParams();\n    qp.add(\"api-version\", \"2018-02-01\");\n    qp.add(\"resource\", RESOURCE_NAME);\n\n    if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n      authority \u003d authority + tenantGuid;\n      LOG.debug(\"MSI authority : {}\", authority);\n      qp.add(\"authority\", authority);\n    }\n\n    if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n      qp.add(\"client_id\", clientId);\n    }\n\n    if (bypassCache) {\n      qp.add(\"bypass_cache\", \"true\");\n    }\n\n    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n    headers.put(\"Metadata\", \"true\");\n\n    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
          "extendedDetails": {
            "oldValue": "[tenantGuid-String, clientId-String, bypassCache-boolean]",
            "newValue": "[authEndpoint-String(modifiers-final), tenantGuid-String(modifiers-final), clientId-String(modifiers-final), authority-String, bypassCache-boolean]"
          }
        }
      ]
    },
    "e374584479b687e41d5379bb6d827dcae620e123": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15823. ABFS: Stop requiring client ID and tenant ID for MSI\n(Contributed by Da Zhou via Daniel Templeton)\n\nChange-Id: I546ab3a1df1efec635c08c388148e718dc4a9843\n",
      "commitDate": "24/10/18 2:18 PM",
      "commitName": "e374584479b687e41d5379bb6d827dcae620e123",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "05/10/18 3:29 AM",
      "commitNameOld": "273cc2d4e972dc7cc371761a4ab2d1bc20dd5ca0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 19.45,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n                                              boolean bypassCache) throws IOException {\n-    Preconditions.checkNotNull(tenantGuid, \"tenantGuid\");\n-    Preconditions.checkNotNull(clientId, \"clientId\");\n-\n     String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n \n     QueryParams qp \u003d new QueryParams();\n     qp.add(\"api-version\", \"2018-02-01\");\n     qp.add(\"resource\", RESOURCE_NAME);\n \n \n-    if (tenantGuid.length() \u003e 0) {\n+    if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n       String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n       qp.add(\"authority\", authority);\n     }\n \n-    if (clientId.length() \u003e 0) {\n+    if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n       qp.add(\"client_id\", clientId);\n     }\n \n     if (bypassCache) {\n       qp.add(\"bypass_cache\", \"true\");\n     }\n \n     Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n     headers.put(\"Metadata\", \"true\");\n \n     LOG.debug(\"AADToken: starting to fetch token using MSI\");\n     return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n                                             boolean bypassCache) throws IOException {\n    String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n\n    QueryParams qp \u003d new QueryParams();\n    qp.add(\"api-version\", \"2018-02-01\");\n    qp.add(\"resource\", RESOURCE_NAME);\n\n\n    if (tenantGuid !\u003d null \u0026\u0026 tenantGuid.length() \u003e 0) {\n      String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n      qp.add(\"authority\", authority);\n    }\n\n    if (clientId !\u003d null \u0026\u0026 clientId.length() \u003e 0) {\n      qp.add(\"client_id\", clientId);\n    }\n\n    if (bypassCache) {\n      qp.add(\"bypass_cache\", \"true\");\n    }\n\n    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n    headers.put(\"Metadata\", \"true\");\n\n    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java",
      "extendedDetails": {}
    },
    "9149b9703e3ab09abdc087db129e82ad3f4cefa1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15660. ABFS: Add support for OAuth\nContributed by Da Zhou, Rajeev Bansal, and Junhua Gu.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "9149b9703e3ab09abdc087db129e82ad3f4cefa1",
      "commitAuthor": "Thomas Marquardt",
      "diff": "@@ -0,0 +1,31 @@\n+  public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n+                                             boolean bypassCache) throws IOException {\n+    Preconditions.checkNotNull(tenantGuid, \"tenantGuid\");\n+    Preconditions.checkNotNull(clientId, \"clientId\");\n+\n+    String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n+\n+    QueryParams qp \u003d new QueryParams();\n+    qp.add(\"api-version\", \"2018-02-01\");\n+    qp.add(\"resource\", RESOURCE_NAME);\n+\n+\n+    if (tenantGuid.length() \u003e 0) {\n+      String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n+      qp.add(\"authority\", authority);\n+    }\n+\n+    if (clientId.length() \u003e 0) {\n+      qp.add(\"client_id\", clientId);\n+    }\n+\n+    if (bypassCache) {\n+      qp.add(\"bypass_cache\", \"true\");\n+    }\n+\n+    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n+    headers.put(\"Metadata\", \"true\");\n+\n+    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n+    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AzureADToken getTokenFromMsi(String tenantGuid, String clientId,\n                                             boolean bypassCache) throws IOException {\n    Preconditions.checkNotNull(tenantGuid, \"tenantGuid\");\n    Preconditions.checkNotNull(clientId, \"clientId\");\n\n    String authEndpoint \u003d \"http://169.254.169.254/metadata/identity/oauth2/token\";\n\n    QueryParams qp \u003d new QueryParams();\n    qp.add(\"api-version\", \"2018-02-01\");\n    qp.add(\"resource\", RESOURCE_NAME);\n\n\n    if (tenantGuid.length() \u003e 0) {\n      String authority \u003d \"https://login.microsoftonline.com/\" + tenantGuid;\n      qp.add(\"authority\", authority);\n    }\n\n    if (clientId.length() \u003e 0) {\n      qp.add(\"client_id\", clientId);\n    }\n\n    if (bypassCache) {\n      qp.add(\"bypass_cache\", \"true\");\n    }\n\n    Hashtable\u003cString, String\u003e headers \u003d new Hashtable\u003c\u003e();\n    headers.put(\"Metadata\", \"true\");\n\n    LOG.debug(\"AADToken: starting to fetch token using MSI\");\n    return getTokenCall(authEndpoint, qp.serialize(), headers, \"GET\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/oauth2/AzureADAuthenticator.java"
    }
  }
}