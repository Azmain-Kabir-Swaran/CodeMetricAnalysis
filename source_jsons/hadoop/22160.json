{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleSchedulerImpl.java",
  "functionName": "copyFailed",
  "functionId": "copyFailed___mapId-TaskAttemptID__host-MapHost__readError-boolean__connectExcpt-boolean",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
  "functionStartLine": 278,
  "functionEndLine": 318,
  "numCommitsSeen": 21,
  "timeTaken": 6370,
  "changeHistory": [
    "d4725bfcb2d300219d65395a78f957afbf37b201",
    "f4e2b3cc0b1f4e49c306bc09a9dddd0495225bb2",
    "b42d09eb62bd1725d70da59f1a6fdac83cea82d1",
    "f8e871d01b851cd5d8c57dd7e364b3e787521765",
    "1a389305b27ac1efec4d7923b87de3e703bf70e1",
    "6ee6eb843013324788f30384d9d967ff8743a970",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d4725bfcb2d300219d65395a78f957afbf37b201": "Ybodychange",
    "f4e2b3cc0b1f4e49c306bc09a9dddd0495225bb2": "Ybodychange",
    "b42d09eb62bd1725d70da59f1a6fdac83cea82d1": "Ybodychange",
    "f8e871d01b851cd5d8c57dd7e364b3e787521765": "Ybodychange",
    "1a389305b27ac1efec4d7923b87de3e703bf70e1": "Ymovefromfile",
    "6ee6eb843013324788f30384d9d967ff8743a970": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d4725bfcb2d300219d65395a78f957afbf37b201": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6728. Give fetchers hint when ShuffleHandler rejects a shuffling connection (haibochen via rkanter)\n",
      "commitDate": "21/10/16 5:46 PM",
      "commitName": "d4725bfcb2d300219d65395a78f957afbf37b201",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "26/05/15 12:15 PM",
      "commitNameOld": "7dba7005b79994106321b0f86bc8f4ea51a3c185",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 514.23,
      "commitsBetweenForRepo": 3578,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,41 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n       boolean readError, boolean connectExcpt) {\n-    host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n       failureCounts.put(mapId, new IntWritable(1));\n     }\n     String hostname \u003d host.getHostName();\n     IntWritable hostFailedNum \u003d hostFailures.get(hostname);\n     // MAPREDUCE-6361: hostname could get cleanup from hostFailures in another\n     // thread with copySucceeded.\n     // In this case, add back hostname to hostFailures to get rid of NPE issue.\n     if (hostFailedNum \u003d\u003d null) {\n       hostFailures.put(hostname, new IntWritable(1));\n     }\n     //report failure if already retried maxHostFailures times\n     boolean hostFail \u003d hostFailures.get(hostname).get() \u003e\n         getMaxHostFailures() ? true : false;\n \n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n \n     checkAndInformMRAppMaster(failures, mapId, readError, connectExcpt,\n         hostFail);\n \n     checkReducerHealth();\n \n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n-    if (delay \u003e maxDelay) {\n-      delay \u003d maxDelay;\n-    }\n-\n-    penalties.add(new Penalty(host, delay));\n+    penalize(host, Math.min(delay, maxPenalty));\n \n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n      boolean readError, boolean connectExcpt) {\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));\n    }\n    String hostname \u003d host.getHostName();\n    IntWritable hostFailedNum \u003d hostFailures.get(hostname);\n    // MAPREDUCE-6361: hostname could get cleanup from hostFailures in another\n    // thread with copySucceeded.\n    // In this case, add back hostname to hostFailures to get rid of NPE issue.\n    if (hostFailedNum \u003d\u003d null) {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    //report failure if already retried maxHostFailures times\n    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e\n        getMaxHostFailures() ? true : false;\n\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n\n    checkAndInformMRAppMaster(failures, mapId, readError, connectExcpt,\n        hostFail);\n\n    checkReducerHealth();\n\n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    penalize(host, Math.min(delay, maxPenalty));\n\n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "f4e2b3cc0b1f4e49c306bc09a9dddd0495225bb2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6361. NPE issue in shuffle caused by concurrent issue between copySucceeded() in one thread and copyFailed() in another thread on the same host. Contributed by Junping Du.\n",
      "commitDate": "12/05/15 8:28 AM",
      "commitName": "f4e2b3cc0b1f4e49c306bc09a9dddd0495225bb2",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "08/05/15 8:57 AM",
      "commitNameOld": "dc2b2ae31f2eb6dae324c2e14ed7660ce605a89b",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 3.98,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,46 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n       boolean readError, boolean connectExcpt) {\n     host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n       failureCounts.put(mapId, new IntWritable(1));\n     }\n     String hostname \u003d host.getHostName();\n+    IntWritable hostFailedNum \u003d hostFailures.get(hostname);\n+    // MAPREDUCE-6361: hostname could get cleanup from hostFailures in another\n+    // thread with copySucceeded.\n+    // In this case, add back hostname to hostFailures to get rid of NPE issue.\n+    if (hostFailedNum \u003d\u003d null) {\n+      hostFailures.put(hostname, new IntWritable(1));\n+    }\n     //report failure if already retried maxHostFailures times\n-    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e getMaxHostFailures() ? true : false;\n-    \n+    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e\n+        getMaxHostFailures() ? true : false;\n+\n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n \n     checkAndInformMRAppMaster(failures, mapId, readError, connectExcpt,\n         hostFail);\n \n     checkReducerHealth();\n \n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n     if (delay \u003e maxDelay) {\n       delay \u003d maxDelay;\n     }\n \n     penalties.add(new Penalty(host, delay));\n \n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n      boolean readError, boolean connectExcpt) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));\n    }\n    String hostname \u003d host.getHostName();\n    IntWritable hostFailedNum \u003d hostFailures.get(hostname);\n    // MAPREDUCE-6361: hostname could get cleanup from hostFailures in another\n    // thread with copySucceeded.\n    // In this case, add back hostname to hostFailures to get rid of NPE issue.\n    if (hostFailedNum \u003d\u003d null) {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    //report failure if already retried maxHostFailures times\n    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e\n        getMaxHostFailures() ? true : false;\n\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n\n    checkAndInformMRAppMaster(failures, mapId, readError, connectExcpt,\n        hostFail);\n\n    checkReducerHealth();\n\n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    if (delay \u003e maxDelay) {\n      delay \u003d maxDelay;\n    }\n\n    penalties.add(new Penalty(host, delay));\n\n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "b42d09eb62bd1725d70da59f1a6fdac83cea82d1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5335. Rename Job Tracker terminology in ShuffleSchedulerImpl. Contributed by Devaraj K.\n",
      "commitDate": "12/02/15 3:08 AM",
      "commitName": "b42d09eb62bd1725d70da59f1a6fdac83cea82d1",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "15/10/14 8:52 AM",
      "commitNameOld": "b9edad64034a9c8a121ec2b37792c190ba561e26",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 119.8,
      "commitsBetweenForRepo": 919,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n       boolean readError, boolean connectExcpt) {\n     host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n       failureCounts.put(mapId, new IntWritable(1));\n     }\n     String hostname \u003d host.getHostName();\n     //report failure if already retried maxHostFailures times\n     boolean hostFail \u003d hostFailures.get(hostname).get() \u003e getMaxHostFailures() ? true : false;\n     \n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n \n-    checkAndInformJobTracker(failures, mapId, readError, connectExcpt, hostFail);\n+    checkAndInformMRAppMaster(failures, mapId, readError, connectExcpt,\n+        hostFail);\n \n     checkReducerHealth();\n \n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n     if (delay \u003e maxDelay) {\n       delay \u003d maxDelay;\n     }\n \n     penalties.add(new Penalty(host, delay));\n \n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n      boolean readError, boolean connectExcpt) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));\n    }\n    String hostname \u003d host.getHostName();\n    //report failure if already retried maxHostFailures times\n    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e getMaxHostFailures() ? true : false;\n    \n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n\n    checkAndInformMRAppMaster(failures, mapId, readError, connectExcpt,\n        hostFail);\n\n    checkReducerHealth();\n\n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    if (delay \u003e maxDelay) {\n      delay \u003d maxDelay;\n    }\n\n    penalties.add(new Penalty(host, delay));\n\n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "f8e871d01b851cd5d8c57dd7e364b3e787521765": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6024. Shortened the time when Fetcher is stuck in retrying before concluding the failure by configuration. Contributed by Yunjiong Zhao.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618677 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/14 10:57 AM",
      "commitName": "f8e871d01b851cd5d8c57dd7e364b3e787521765",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "25/07/13 12:38 PM",
      "commitNameOld": "b9b2647ebc7ae2c513a7be58ba16c9232a845fb4",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 388.93,
      "commitsBetweenForRepo": 2627,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,37 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n-                                      boolean readError, boolean connectExcpt) {\n+      boolean readError, boolean connectExcpt) {\n     host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n       failureCounts.put(mapId, new IntWritable(1));\n     }\n     String hostname \u003d host.getHostName();\n-    if (hostFailures.containsKey(hostname)) {\n-      IntWritable x \u003d hostFailures.get(hostname);\n-      x.set(x.get() + 1);\n-    } else {\n-      hostFailures.put(hostname, new IntWritable(1));\n-    }\n+    //report failure if already retried maxHostFailures times\n+    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e getMaxHostFailures() ? true : false;\n+    \n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n \n-    checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n+    checkAndInformJobTracker(failures, mapId, readError, connectExcpt, hostFail);\n \n     checkReducerHealth();\n \n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n     if (delay \u003e maxDelay) {\n       delay \u003d maxDelay;\n     }\n \n     penalties.add(new Penalty(host, delay));\n \n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n      boolean readError, boolean connectExcpt) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));\n    }\n    String hostname \u003d host.getHostName();\n    //report failure if already retried maxHostFailures times\n    boolean hostFail \u003d hostFailures.get(hostname).get() \u003e getMaxHostFailures() ? true : false;\n    \n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n\n    checkAndInformJobTracker(failures, mapId, readError, connectExcpt, hostFail);\n\n    checkReducerHealth();\n\n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    if (delay \u003e maxDelay) {\n      delay \u003d maxDelay;\n    }\n\n    penalties.add(new Penalty(host, delay));\n\n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {}
    },
    "1a389305b27ac1efec4d7923b87de3e703bf70e1": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-5192. Allow for alternate resolutions of TaskCompletionEvents. Contributed by Chris Douglas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/13 8:07 PM",
      "commitName": "1a389305b27ac1efec4d7923b87de3e703bf70e1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "15/06/13 4:09 PM",
      "commitNameOld": "29a370872435ee558fbeb9f64bf70da87f8cd27a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                       boolean readError, boolean connectExcpt) {\n     host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n-      failureCounts.put(mapId, new IntWritable(1));      \n+      failureCounts.put(mapId, new IntWritable(1));\n     }\n     String hostname \u003d host.getHostName();\n     if (hostFailures.containsKey(hostname)) {\n       IntWritable x \u003d hostFailures.get(hostname);\n       x.set(x.get() + 1);\n     } else {\n       hostFailures.put(hostname, new IntWritable(1));\n     }\n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n-    \n+\n     checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n \n     checkReducerHealth();\n-    \n+\n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n     if (delay \u003e maxDelay) {\n       delay \u003d maxDelay;\n     }\n-    \n+\n     penalties.add(new Penalty(host, delay));\n-    \n+\n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                      boolean readError, boolean connectExcpt) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));\n    }\n    String hostname \u003d host.getHostName();\n    if (hostFailures.containsKey(hostname)) {\n      IntWritable x \u003d hostFailures.get(hostname);\n      x.set(x.get() + 1);\n    } else {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n\n    checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n\n    checkReducerHealth();\n\n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    if (delay \u003e maxDelay) {\n      delay \u003d maxDelay;\n    }\n\n    penalties.add(new Penalty(host, delay));\n\n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
        "oldMethodName": "copyFailed",
        "newMethodName": "copyFailed"
      }
    },
    "6ee6eb843013324788f30384d9d967ff8743a970": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4772. Fetch failures can take way too long for a map to be restarted (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/12 7:17 AM",
      "commitName": "6ee6eb843013324788f30384d9d967ff8743a970",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4772. Fetch failures can take way too long for a map to be restarted (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407118 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/11/12 7:17 AM",
          "commitName": "6ee6eb843013324788f30384d9d967ff8743a970",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "11/06/12 6:54 AM",
          "commitNameOld": "27d1c74a0c7831f8a83922ea2e87d1762ccf8021",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 150.06,
          "commitsBetweenForRepo": 869,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n-                                      boolean readError) {\n+                                      boolean readError, boolean connectExcpt) {\n     host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n       failureCounts.put(mapId, new IntWritable(1));      \n     }\n     String hostname \u003d host.getHostName();\n     if (hostFailures.containsKey(hostname)) {\n       IntWritable x \u003d hostFailures.get(hostname);\n       x.set(x.get() + 1);\n     } else {\n       hostFailures.put(hostname, new IntWritable(1));\n     }\n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n     \n-    checkAndInformJobTracker(failures, mapId, readError);\n+    checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n \n     checkReducerHealth();\n     \n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n+    if (delay \u003e maxDelay) {\n+      delay \u003d maxDelay;\n+    }\n     \n     penalties.add(new Penalty(host, delay));\n     \n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                      boolean readError, boolean connectExcpt) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));      \n    }\n    String hostname \u003d host.getHostName();\n    if (hostFailures.containsKey(hostname)) {\n      IntWritable x \u003d hostFailures.get(hostname);\n      x.set(x.get() + 1);\n    } else {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n    \n    checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n\n    checkReducerHealth();\n    \n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    if (delay \u003e maxDelay) {\n      delay \u003d maxDelay;\n    }\n    \n    penalties.add(new Penalty(host, delay));\n    \n    failedShuffleCounter.increment(1);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
          "extendedDetails": {
            "oldValue": "[mapId-TaskAttemptID, host-MapHost, readError-boolean]",
            "newValue": "[mapId-TaskAttemptID, host-MapHost, readError-boolean, connectExcpt-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4772. Fetch failures can take way too long for a map to be restarted (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407118 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/11/12 7:17 AM",
          "commitName": "6ee6eb843013324788f30384d9d967ff8743a970",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "11/06/12 6:54 AM",
          "commitNameOld": "27d1c74a0c7831f8a83922ea2e87d1762ccf8021",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 150.06,
          "commitsBetweenForRepo": 869,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n   public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n-                                      boolean readError) {\n+                                      boolean readError, boolean connectExcpt) {\n     host.penalize();\n     int failures \u003d 1;\n     if (failureCounts.containsKey(mapId)) {\n       IntWritable x \u003d failureCounts.get(mapId);\n       x.set(x.get() + 1);\n       failures \u003d x.get();\n     } else {\n       failureCounts.put(mapId, new IntWritable(1));      \n     }\n     String hostname \u003d host.getHostName();\n     if (hostFailures.containsKey(hostname)) {\n       IntWritable x \u003d hostFailures.get(hostname);\n       x.set(x.get() + 1);\n     } else {\n       hostFailures.put(hostname, new IntWritable(1));\n     }\n     if (failures \u003e\u003d abortFailureLimit) {\n       try {\n         throw new IOException(failures + \" failures downloading \" + mapId);\n       } catch (IOException ie) {\n         reporter.reportException(ie);\n       }\n     }\n     \n-    checkAndInformJobTracker(failures, mapId, readError);\n+    checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n \n     checkReducerHealth();\n     \n     long delay \u003d (long) (INITIAL_PENALTY *\n         Math.pow(PENALTY_GROWTH_RATE, failures));\n+    if (delay \u003e maxDelay) {\n+      delay \u003d maxDelay;\n+    }\n     \n     penalties.add(new Penalty(host, delay));\n     \n     failedShuffleCounter.increment(1);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                      boolean readError, boolean connectExcpt) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));      \n    }\n    String hostname \u003d host.getHostName();\n    if (hostFailures.containsKey(hostname)) {\n      IntWritable x \u003d hostFailures.get(hostname);\n      x.set(x.get() + 1);\n    } else {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n    \n    checkAndInformJobTracker(failures, mapId, readError, connectExcpt);\n\n    checkReducerHealth();\n    \n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    if (delay \u003e maxDelay) {\n      delay \u003d maxDelay;\n    }\n    \n    penalties.add(new Penalty(host, delay));\n    \n    failedShuffleCounter.increment(1);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                      boolean readError) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));      \n    }\n    String hostname \u003d host.getHostName();\n    if (hostFailures.containsKey(hostname)) {\n      IntWritable x \u003d hostFailures.get(hostname);\n      x.set(x.get() + 1);\n    } else {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n    \n    checkAndInformJobTracker(failures, mapId, readError);\n\n    checkReducerHealth();\n    \n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    \n    penalties.add(new Penalty(host, delay));\n    \n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                      boolean readError) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));      \n    }\n    String hostname \u003d host.getHostName();\n    if (hostFailures.containsKey(hostname)) {\n      IntWritable x \u003d hostFailures.get(hostname);\n      x.set(x.get() + 1);\n    } else {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n    \n    checkAndInformJobTracker(failures, mapId, readError);\n\n    checkReducerHealth();\n    \n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    \n    penalties.add(new Penalty(host, delay));\n    \n    failedShuffleCounter.increment(1);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,37 @@\n+  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n+                                      boolean readError) {\n+    host.penalize();\n+    int failures \u003d 1;\n+    if (failureCounts.containsKey(mapId)) {\n+      IntWritable x \u003d failureCounts.get(mapId);\n+      x.set(x.get() + 1);\n+      failures \u003d x.get();\n+    } else {\n+      failureCounts.put(mapId, new IntWritable(1));      \n+    }\n+    String hostname \u003d host.getHostName();\n+    if (hostFailures.containsKey(hostname)) {\n+      IntWritable x \u003d hostFailures.get(hostname);\n+      x.set(x.get() + 1);\n+    } else {\n+      hostFailures.put(hostname, new IntWritable(1));\n+    }\n+    if (failures \u003e\u003d abortFailureLimit) {\n+      try {\n+        throw new IOException(failures + \" failures downloading \" + mapId);\n+      } catch (IOException ie) {\n+        reporter.reportException(ie);\n+      }\n+    }\n+    \n+    checkAndInformJobTracker(failures, mapId, readError);\n+\n+    checkReducerHealth();\n+    \n+    long delay \u003d (long) (INITIAL_PENALTY *\n+        Math.pow(PENALTY_GROWTH_RATE, failures));\n+    \n+    penalties.add(new Penalty(host, delay));\n+    \n+    failedShuffleCounter.increment(1);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void copyFailed(TaskAttemptID mapId, MapHost host,\n                                      boolean readError) {\n    host.penalize();\n    int failures \u003d 1;\n    if (failureCounts.containsKey(mapId)) {\n      IntWritable x \u003d failureCounts.get(mapId);\n      x.set(x.get() + 1);\n      failures \u003d x.get();\n    } else {\n      failureCounts.put(mapId, new IntWritable(1));      \n    }\n    String hostname \u003d host.getHostName();\n    if (hostFailures.containsKey(hostname)) {\n      IntWritable x \u003d hostFailures.get(hostname);\n      x.set(x.get() + 1);\n    } else {\n      hostFailures.put(hostname, new IntWritable(1));\n    }\n    if (failures \u003e\u003d abortFailureLimit) {\n      try {\n        throw new IOException(failures + \" failures downloading \" + mapId);\n      } catch (IOException ie) {\n        reporter.reportException(ie);\n      }\n    }\n    \n    checkAndInformJobTracker(failures, mapId, readError);\n\n    checkReducerHealth();\n    \n    long delay \u003d (long) (INITIAL_PENALTY *\n        Math.pow(PENALTY_GROWTH_RATE, failures));\n    \n    penalties.add(new Penalty(host, delay));\n    \n    failedShuffleCounter.increment(1);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleScheduler.java"
    }
  }
}