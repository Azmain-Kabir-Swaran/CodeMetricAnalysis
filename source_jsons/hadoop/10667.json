{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFuture.java",
  "functionName": "getFutureValue",
  "functionId": "getFutureValue___future-ListenableFuture__?__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java",
  "functionStartLine": 826,
  "functionEndLine": 849,
  "numCommitsSeen": 4,
  "timeTaken": 739,
  "changeHistory": [
    "d69a82c89c1e857a2a86ff614ae11fb5df993614"
  ],
  "changeHistoryShort": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11511. Support Timeout when checking single disk. Contributed by Hanisha Koneru.\n",
      "commitDate": "15/03/17 6:01 PM",
      "commitName": "d69a82c89c1e857a2a86ff614ae11fb5df993614",
      "commitAuthor": "Hanisha Koneru",
      "diff": "@@ -0,0 +1,24 @@\n+  private static Object getFutureValue(ListenableFuture\u003c?\u003e future) {\n+    Object valueToSet;\n+    if (future instanceof TrustedFuture) {\n+      // Break encapsulation for TrustedFuture instances since we know that\n+      // subclasses cannot override .get() (since it is final) and therefore\n+      // this is equivalent to calling .get() and unpacking the exceptions\n+      // like we do below (just much faster because it is a single field read\n+      // instead of a read, several branches and possibly creating exceptions).\n+      return ((AbstractFuture\u003c?\u003e) future).value;\n+    } else {\n+      // Otherwise calculate valueToSet by calling .get()\n+      try {\n+        Object v \u003d getDone(future);\n+        valueToSet \u003d v \u003d\u003d null ? NULL : v;\n+      } catch (ExecutionException exception) {\n+        valueToSet \u003d new Failure(exception.getCause());\n+      } catch (CancellationException cancellation) {\n+        valueToSet \u003d new Cancellation(false, cancellation);\n+      } catch (Throwable t) {\n+        valueToSet \u003d new Failure(t);\n+      }\n+    }\n+    return valueToSet;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Object getFutureValue(ListenableFuture\u003c?\u003e future) {\n    Object valueToSet;\n    if (future instanceof TrustedFuture) {\n      // Break encapsulation for TrustedFuture instances since we know that\n      // subclasses cannot override .get() (since it is final) and therefore\n      // this is equivalent to calling .get() and unpacking the exceptions\n      // like we do below (just much faster because it is a single field read\n      // instead of a read, several branches and possibly creating exceptions).\n      return ((AbstractFuture\u003c?\u003e) future).value;\n    } else {\n      // Otherwise calculate valueToSet by calling .get()\n      try {\n        Object v \u003d getDone(future);\n        valueToSet \u003d v \u003d\u003d null ? NULL : v;\n      } catch (ExecutionException exception) {\n        valueToSet \u003d new Failure(exception.getCause());\n      } catch (CancellationException cancellation) {\n        valueToSet \u003d new Cancellation(false, cancellation);\n      } catch (Throwable t) {\n        valueToSet \u003d new Failure(t);\n      }\n    }\n    return valueToSet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java"
    }
  }
}