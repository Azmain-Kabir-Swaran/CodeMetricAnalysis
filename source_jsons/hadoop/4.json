{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramMountd.java",
  "functionName": "mnt",
  "functionId": "mnt___xdr-XDR__out-XDR__xid-int__client-InetAddress",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java",
  "functionStartLine": 122,
  "functionEndLine": 179,
  "numCommitsSeen": 21,
  "timeTaken": 1313,
  "changeHistory": [
    "d6602b5f39833611b4afa4581552f6c4c37e23a8",
    "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": "Ybodychange",
    "2a5f1029a5221c42ab61b22f99d79251ed069ca4": "Ybodychange",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": "Ybodychange",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Ybodychange",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11575. Supporting HDFS NFS gateway with Federated HDFS. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "10/10/17 10:38 AM",
      "commitName": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "16/01/17 2:53 PM",
      "commitNameOld": "d1d0b3e1fd593d590aaf2e3db8f730a296b20aa1",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 266.78,
      "commitsBetweenForRepo": 1716,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,58 @@\n   public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n     if (hostsMatcher \u003d\u003d null) {\n       return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n           null);\n     }\n     AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n     if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n       return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n           null);\n     }\n \n     String path \u003d xdr.readString();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n     }\n \n     String host \u003d client.getHostName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Got host: \" + host + \" path: \" + path);\n     }\n-    if (!exports.contains(path)) {\n+    URI exportURI \u003d exports.get(path);\n+    if (exportURI \u003d\u003d null) {\n       LOG.info(\"Path \" + path + \" is not shared.\");\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n+    DFSClient dfsClient \u003d null;\n+    try {\n+      dfsClient \u003d new DFSClient(exportURI, config);\n+    } catch (Exception e) {\n+      LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n+      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n+      return out;\n+    }\n+\n     FileHandle handle \u003d null;\n     try {\n-      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n-      \n-      handle \u003d new FileHandle(exFileStatus.getFileId());\n+      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(exportURI.getPath());\n+\n+      handle \u003d new FileHandle(exFileStatus.getFileId(),\n+                              Nfs3Utils.getNamenodeId(config, exportURI));\n     } catch (IOException e) {\n       LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     assert (handle !\u003d null);\n-    LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n+    LOG.info(\"Giving handle (fileHandle:\" + handle.dumpFileHandle()\n+        + \" file URI: \" + exportURI\n         + \") to client for export \" + path);\n     mounts.add(new MountEntry(host, path));\n \n     MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n         handle.getContent());\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n    if (hostsMatcher \u003d\u003d null) {\n      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n          null);\n    }\n    AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n    if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n          null);\n    }\n\n    String path \u003d xdr.readString();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n    }\n\n    String host \u003d client.getHostName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got host: \" + host + \" path: \" + path);\n    }\n    URI exportURI \u003d exports.get(path);\n    if (exportURI \u003d\u003d null) {\n      LOG.info(\"Path \" + path + \" is not shared.\");\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    DFSClient dfsClient \u003d null;\n    try {\n      dfsClient \u003d new DFSClient(exportURI, config);\n    } catch (Exception e) {\n      LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    FileHandle handle \u003d null;\n    try {\n      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(exportURI.getPath());\n\n      handle \u003d new FileHandle(exFileStatus.getFileId(),\n                              Nfs3Utils.getNamenodeId(config, exportURI));\n    } catch (IOException e) {\n      LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    assert (handle !\u003d null);\n    LOG.info(\"Giving handle (fileHandle:\" + handle.dumpFileHandle()\n        + \" file URI: \" + exportURI\n        + \") to client for export \" + path);\n    mounts.add(new MountEntry(host, path));\n\n    MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n        handle.getContent());\n    return out;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java",
      "extendedDetails": {}
    },
    "2a5f1029a5221c42ab61b22f99d79251ed069ca4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6455. NFS: Exception should be added in NFS log for invalid separator in nfs.exports.allowed.hosts. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 2:22 PM",
      "commitName": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "18/06/14 1:45 PM",
      "commitNameOld": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 35.03,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,46 @@\n   public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n+    if (hostsMatcher \u003d\u003d null) {\n+      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n+          null);\n+    }\n     AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n     if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n       return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n           null);\n     }\n \n     String path \u003d xdr.readString();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n     }\n \n     String host \u003d client.getHostName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Got host: \" + host + \" path: \" + path);\n     }\n     if (!exports.contains(path)) {\n       LOG.info(\"Path \" + path + \" is not shared.\");\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     FileHandle handle \u003d null;\n     try {\n       HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n       \n       handle \u003d new FileHandle(exFileStatus.getFileId());\n     } catch (IOException e) {\n       LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     assert (handle !\u003d null);\n     LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n         + \") to client for export \" + path);\n     mounts.add(new MountEntry(host, path));\n \n     MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n         handle.getContent());\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n    if (hostsMatcher \u003d\u003d null) {\n      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n          null);\n    }\n    AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n    if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n          null);\n    }\n\n    String path \u003d xdr.readString();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n    }\n\n    String host \u003d client.getHostName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got host: \" + host + \" path: \" + path);\n    }\n    if (!exports.contains(path)) {\n      LOG.info(\"Path \" + path + \" is not shared.\");\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    FileHandle handle \u003d null;\n    try {\n      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n      \n      handle \u003d new FileHandle(exFileStatus.getFileId());\n    } catch (IOException e) {\n      LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    assert (handle !\u003d null);\n    LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n        + \") to client for export \" + path);\n    mounts.add(new MountEntry(host, path));\n\n    MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n        handle.getContent());\n    return out;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java",
      "extendedDetails": {}
    },
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6050. NFS does not handle exceptions correctly in a few places. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 1:49 PM",
      "commitName": "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "05/03/14 2:20 PM",
      "commitNameOld": "6adf7a0ecb7946434b9312aa01505f58eaefd21f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 18.94,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n     AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n     if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n       return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n           null);\n     }\n \n     String path \u003d xdr.readString();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n     }\n \n     String host \u003d client.getHostName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Got host: \" + host + \" path: \" + path);\n     }\n     if (!exports.contains(path)) {\n       LOG.info(\"Path \" + path + \" is not shared.\");\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     FileHandle handle \u003d null;\n     try {\n       HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n       \n       handle \u003d new FileHandle(exFileStatus.getFileId());\n     } catch (IOException e) {\n-      LOG.error(\"Can\u0027t get handle for export:\" + path + \", exception:\" + e);\n+      LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     assert (handle !\u003d null);\n     LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n         + \") to client for export \" + path);\n     mounts.add(new MountEntry(host, path));\n \n     MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n         handle.getContent());\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n    AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n    if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n          null);\n    }\n\n    String path \u003d xdr.readString();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n    }\n\n    String host \u003d client.getHostName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got host: \" + host + \" path: \" + path);\n    }\n    if (!exports.contains(path)) {\n      LOG.info(\"Path \" + path + \" is not shared.\");\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    FileHandle handle \u003d null;\n    try {\n      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n      \n      handle \u003d new FileHandle(exFileStatus.getFileId());\n    } catch (IOException e) {\n      LOG.error(\"Can\u0027t get handle for export:\" + path, e);\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    assert (handle !\u003d null);\n    LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n        + \") to client for export \" + path);\n    mounts.add(new MountEntry(host, path));\n\n    MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n        handle.getContent());\n    return out;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java",
      "extendedDetails": {}
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "10/07/13 10:01 AM",
      "commitNameOld": "58d75576c4d2a03d4954174bc223ed0334b34fee",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 44.18,
      "commitsBetweenForRepo": 287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n+    AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n+    if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n+      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n+          null);\n+    }\n+\n     String path \u003d xdr.readString();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n     }\n \n     String host \u003d client.getHostName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Got host: \" + host + \" path: \" + path);\n     }\n     if (!exports.contains(path)) {\n       LOG.info(\"Path \" + path + \" is not shared.\");\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     FileHandle handle \u003d null;\n     try {\n       HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n       \n       handle \u003d new FileHandle(exFileStatus.getFileId());\n     } catch (IOException e) {\n       LOG.error(\"Can\u0027t get handle for export:\" + path + \", exception:\" + e);\n       MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n       return out;\n     }\n \n     assert (handle !\u003d null);\n     LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n         + \") to client for export \" + path);\n     mounts.add(new MountEntry(host, path));\n \n     MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n         handle.getContent());\n     return out;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n    AccessPrivilege accessPrivilege \u003d hostsMatcher.getAccessPrivilege(client);\n    if (accessPrivilege \u003d\u003d AccessPrivilege.NONE) {\n      return MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_ACCES, out, xid,\n          null);\n    }\n\n    String path \u003d xdr.readString();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n    }\n\n    String host \u003d client.getHostName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got host: \" + host + \" path: \" + path);\n    }\n    if (!exports.contains(path)) {\n      LOG.info(\"Path \" + path + \" is not shared.\");\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    FileHandle handle \u003d null;\n    try {\n      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n      \n      handle \u003d new FileHandle(exFileStatus.getFileId());\n    } catch (IOException e) {\n      LOG.error(\"Can\u0027t get handle for export:\" + path + \", exception:\" + e);\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    assert (handle !\u003d null);\n    LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n        + \") to client for export \" + path);\n    mounts.add(new MountEntry(host, path));\n\n    MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n        handle.getContent());\n    return out;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java",
      "extendedDetails": {}
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,36 @@\n+  public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n+    String path \u003d xdr.readString();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n+    }\n+\n+    String host \u003d client.getHostName();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Got host: \" + host + \" path: \" + path);\n+    }\n+    if (!exports.contains(path)) {\n+      LOG.info(\"Path \" + path + \" is not shared.\");\n+      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n+      return out;\n+    }\n+\n+    FileHandle handle \u003d null;\n+    try {\n+      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n+      \n+      handle \u003d new FileHandle(exFileStatus.getFileId());\n+    } catch (IOException e) {\n+      LOG.error(\"Can\u0027t get handle for export:\" + path + \", exception:\" + e);\n+      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n+      return out;\n+    }\n+\n+    assert (handle !\u003d null);\n+    LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n+        + \") to client for export \" + path);\n+    mounts.add(new MountEntry(host, path));\n+\n+    MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n+        handle.getContent());\n+    return out;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public XDR mnt(XDR xdr, XDR out, int xid, InetAddress client) {\n    String path \u003d xdr.readString();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"MOUNT MNT path: \" + path + \" client: \" + client);\n    }\n\n    String host \u003d client.getHostName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got host: \" + host + \" path: \" + path);\n    }\n    if (!exports.contains(path)) {\n      LOG.info(\"Path \" + path + \" is not shared.\");\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    FileHandle handle \u003d null;\n    try {\n      HdfsFileStatus exFileStatus \u003d dfsClient.getFileInfo(path);\n      \n      handle \u003d new FileHandle(exFileStatus.getFileId());\n    } catch (IOException e) {\n      LOG.error(\"Can\u0027t get handle for export:\" + path + \", exception:\" + e);\n      MountResponse.writeMNTResponse(Nfs3Status.NFS3ERR_NOENT, out, xid, null);\n      return out;\n    }\n\n    assert (handle !\u003d null);\n    LOG.info(\"Giving handle (fileId:\" + handle.getFileId()\n        + \") to client for export \" + path);\n    mounts.add(new MountEntry(host, path));\n\n    MountResponse.writeMNTResponse(Nfs3Status.NFS3_OK, out, xid,\n        handle.getContent());\n    return out;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/mount/RpcProgramMountd.java"
    }
  }
}