{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MountTable.java",
  "functionName": "validate",
  "functionId": "validate",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java",
  "functionStartLine": 379,
  "functionEndLine": 418,
  "numCommitsSeen": 14,
  "timeTaken": 2803,
  "changeHistory": [
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "19292bc264cada5117ec76063d36cc88159afdf4",
    "6f0de2731806628b5b01bd1350225692147590da"
  ],
  "changeHistoryShort": {
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "19292bc264cada5117ec76063d36cc88159afdf4": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6f0de2731806628b5b01bd1350225692147590da": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "02/10/18 8:48 PM",
      "commitNameOld": "fa7f7078a713c44783425195a891582bcf8a6d5c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 264.53,
      "commitsBetweenForRepo": 1977,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,40 @@\n   public void validate() {\n     super.validate();\n     if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n       throw new IllegalArgumentException(\n           ERROR_MSG_NO_SOURCE_PATH + this);\n     }\n     if (!this.getSourcePath().startsWith(\"/\")) {\n       throw new IllegalArgumentException(\n           ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n     }\n     if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n       throw new IllegalArgumentException(\n           ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n     }\n     for (RemoteLocation loc : getDestinations()) {\n       String nsId \u003d loc.getNameserviceId();\n       if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\n             ERROR_MSG_INVAILD_DEST_NS + this);\n       }\n       if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\n             ERROR_MSG_INVAILD_DEST_PATH + this);\n       }\n       if (!loc.getDest().startsWith(\"/\")) {\n         throw new IllegalArgumentException(\n             ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n       }\n     }\n+    if (isFaultTolerant()) {\n+      if (getDestinations().size() \u003c 2) {\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_FAULT_TOLERANT_MULTI_DEST + this);\n+      }\n+      if (!isAll()) {\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_FAULT_TOLERANT_ALL + this);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate() {\n    super.validate();\n    if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_SOURCE_PATH + this);\n    }\n    if (!this.getSourcePath().startsWith(\"/\")) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n    }\n    if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n    }\n    for (RemoteLocation loc : getDestinations()) {\n      String nsId \u003d loc.getNameserviceId();\n      if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_NS + this);\n      }\n      if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_PATH + this);\n      }\n      if (!loc.getDest().startsWith(\"/\")) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n      }\n    }\n    if (isFaultTolerant()) {\n      if (getDestinations().size() \u003c 2) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_FAULT_TOLERANT_MULTI_DEST + this);\n      }\n      if (!isAll()) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_FAULT_TOLERANT_ALL + this);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void validate() {\n    super.validate();\n    if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_SOURCE_PATH + this);\n    }\n    if (!this.getSourcePath().startsWith(\"/\")) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n    }\n    if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n    }\n    for (RemoteLocation loc : getDestinations()) {\n      String nsId \u003d loc.getNameserviceId();\n      if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_NS + this);\n      }\n      if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_PATH + this);\n      }\n      if (!loc.getDest().startsWith(\"/\")) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java"
      }
    },
    "19292bc264cada5117ec76063d36cc88159afdf4": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-13226. RBF: Throw the exception if mount table entry validated failed. Contributed by maobaolong.\n",
      "commitDate": "12/03/18 8:03 PM",
      "commitName": "19292bc264cada5117ec76063d36cc88159afdf4",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-13226. RBF: Throw the exception if mount table entry validated failed. Contributed by maobaolong.\n",
          "commitDate": "12/03/18 8:03 PM",
          "commitName": "19292bc264cada5117ec76063d36cc88159afdf4",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "12/01/18 9:16 PM",
          "commitNameOld": "9afb8025d6549f0ade0ae7d36f5e67cd20c500f4",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 58.91,
          "commitsBetweenForRepo": 377,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,30 @@\n-  public boolean validate() {\n-    boolean ret \u003d super.validate();\n+  public void validate() {\n+    super.validate();\n     if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n-      LOG.error(\"Invalid entry, no source path specified \", this);\n-      ret \u003d false;\n+      throw new IllegalArgumentException(\n+          ERROR_MSG_NO_SOURCE_PATH + this);\n     }\n     if (!this.getSourcePath().startsWith(\"/\")) {\n-      LOG.error(\"Invalid entry, all mount points must start with / \", this);\n-      ret \u003d false;\n+      throw new IllegalArgumentException(\n+          ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n     }\n     if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n-      LOG.error(\"Invalid entry, no destination paths specified \", this);\n-      ret \u003d false;\n+      throw new IllegalArgumentException(\n+          ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n     }\n     for (RemoteLocation loc : getDestinations()) {\n       String nsId \u003d loc.getNameserviceId();\n       if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n-        LOG.error(\"Invalid entry, invalid destination nameservice \", this);\n-        ret \u003d false;\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_INVAILD_DEST_NS + this);\n       }\n       if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n-        LOG.error(\"Invalid entry, invalid destination path \", this);\n-        ret \u003d false;\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_INVAILD_DEST_PATH + this);\n       }\n       if (!loc.getDest().startsWith(\"/\")) {\n-        LOG.error(\"Invalid entry, all destination must start with / \", this);\n-        ret \u003d false;\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n       }\n     }\n-    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validate() {\n    super.validate();\n    if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_SOURCE_PATH + this);\n    }\n    if (!this.getSourcePath().startsWith(\"/\")) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n    }\n    if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n    }\n    for (RemoteLocation loc : getDestinations()) {\n      String nsId \u003d loc.getNameserviceId();\n      if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_NS + this);\n      }\n      if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_PATH + this);\n      }\n      if (!loc.getDest().startsWith(\"/\")) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13226. RBF: Throw the exception if mount table entry validated failed. Contributed by maobaolong.\n",
          "commitDate": "12/03/18 8:03 PM",
          "commitName": "19292bc264cada5117ec76063d36cc88159afdf4",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "12/01/18 9:16 PM",
          "commitNameOld": "9afb8025d6549f0ade0ae7d36f5e67cd20c500f4",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 58.91,
          "commitsBetweenForRepo": 377,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,30 @@\n-  public boolean validate() {\n-    boolean ret \u003d super.validate();\n+  public void validate() {\n+    super.validate();\n     if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n-      LOG.error(\"Invalid entry, no source path specified \", this);\n-      ret \u003d false;\n+      throw new IllegalArgumentException(\n+          ERROR_MSG_NO_SOURCE_PATH + this);\n     }\n     if (!this.getSourcePath().startsWith(\"/\")) {\n-      LOG.error(\"Invalid entry, all mount points must start with / \", this);\n-      ret \u003d false;\n+      throw new IllegalArgumentException(\n+          ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n     }\n     if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n-      LOG.error(\"Invalid entry, no destination paths specified \", this);\n-      ret \u003d false;\n+      throw new IllegalArgumentException(\n+          ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n     }\n     for (RemoteLocation loc : getDestinations()) {\n       String nsId \u003d loc.getNameserviceId();\n       if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n-        LOG.error(\"Invalid entry, invalid destination nameservice \", this);\n-        ret \u003d false;\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_INVAILD_DEST_NS + this);\n       }\n       if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n-        LOG.error(\"Invalid entry, invalid destination path \", this);\n-        ret \u003d false;\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_INVAILD_DEST_PATH + this);\n       }\n       if (!loc.getDest().startsWith(\"/\")) {\n-        LOG.error(\"Invalid entry, all destination must start with / \", this);\n-        ret \u003d false;\n+        throw new IllegalArgumentException(\n+            ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n       }\n     }\n-    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void validate() {\n    super.validate();\n    if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_SOURCE_PATH + this);\n    }\n    if (!this.getSourcePath().startsWith(\"/\")) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_MUST_START_WITH_BACK_SLASH + this);\n    }\n    if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(\n          ERROR_MSG_NO_DEST_PATH_SPECIFIED + this);\n    }\n    for (RemoteLocation loc : getDestinations()) {\n      String nsId \u003d loc.getNameserviceId();\n      if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_NS + this);\n      }\n      if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_INVAILD_DEST_PATH + this);\n      }\n      if (!loc.getDest().startsWith(\"/\")) {\n        throw new IllegalArgumentException(\n            ERROR_MSG_ALL_DEST_MUST_START_WITH_BACK_SLASH + this);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f0de2731806628b5b01bd1350225692147590da": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10880. Federation Mount Table State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 58b97df661441150d35abd44b3a8606206b46441)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "6f0de2731806628b5b01bd1350225692147590da",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,31 @@\n+  public boolean validate() {\n+    boolean ret \u003d super.validate();\n+    if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n+      LOG.error(\"Invalid entry, no source path specified \", this);\n+      ret \u003d false;\n+    }\n+    if (!this.getSourcePath().startsWith(\"/\")) {\n+      LOG.error(\"Invalid entry, all mount points must start with / \", this);\n+      ret \u003d false;\n+    }\n+    if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n+      LOG.error(\"Invalid entry, no destination paths specified \", this);\n+      ret \u003d false;\n+    }\n+    for (RemoteLocation loc : getDestinations()) {\n+      String nsId \u003d loc.getNameserviceId();\n+      if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n+        LOG.error(\"Invalid entry, invalid destination nameservice \", this);\n+        ret \u003d false;\n+      }\n+      if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n+        LOG.error(\"Invalid entry, invalid destination path \", this);\n+        ret \u003d false;\n+      }\n+      if (!loc.getDest().startsWith(\"/\")) {\n+        LOG.error(\"Invalid entry, all destination must start with / \", this);\n+        ret \u003d false;\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean validate() {\n    boolean ret \u003d super.validate();\n    if (this.getSourcePath() \u003d\u003d null || this.getSourcePath().length() \u003d\u003d 0) {\n      LOG.error(\"Invalid entry, no source path specified \", this);\n      ret \u003d false;\n    }\n    if (!this.getSourcePath().startsWith(\"/\")) {\n      LOG.error(\"Invalid entry, all mount points must start with / \", this);\n      ret \u003d false;\n    }\n    if (this.getDestinations() \u003d\u003d null || this.getDestinations().size() \u003d\u003d 0) {\n      LOG.error(\"Invalid entry, no destination paths specified \", this);\n      ret \u003d false;\n    }\n    for (RemoteLocation loc : getDestinations()) {\n      String nsId \u003d loc.getNameserviceId();\n      if (nsId \u003d\u003d null || nsId.length() \u003d\u003d 0) {\n        LOG.error(\"Invalid entry, invalid destination nameservice \", this);\n        ret \u003d false;\n      }\n      if (loc.getDest() \u003d\u003d null || loc.getDest().length() \u003d\u003d 0) {\n        LOG.error(\"Invalid entry, invalid destination path \", this);\n        ret \u003d false;\n      }\n      if (!loc.getDest().startsWith(\"/\")) {\n        LOG.error(\"Invalid entry, all destination must start with / \", this);\n        ret \u003d false;\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/records/MountTable.java"
    }
  }
}