{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "checkQueuePartition",
  "functionId": "checkQueuePartition___app-FiCaSchedulerApp__dest-LeafQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2566,
  "functionEndLine": 2589,
  "numCommitsSeen": 239,
  "timeTaken": 4670,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "46e02ab719d06f2708c0a61e8011b8f261235193"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "46e02ab719d06f2708c0a61e8011b8f261235193": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private void checkQueuePartition(FiCaSchedulerApp app, LeafQueue dest)\n       throws YarnException {\n     if (!YarnConfiguration.areNodeLabelsEnabled(conf)) {\n       return;\n     }\n     Set\u003cString\u003e targetqueuelabels \u003d dest.getAccessibleNodeLabels();\n     AppSchedulingInfo schedulingInfo \u003d app.getAppSchedulingInfo();\n     Set\u003cString\u003e appLabelexpressions \u003d schedulingInfo.getRequestedPartitions();\n     // default partition access always available remove empty label\n     appLabelexpressions.remove(RMNodeLabelsManager.NO_LABEL);\n     Set\u003cString\u003e nonAccessiblelabels \u003d new HashSet\u003cString\u003e();\n     for (String label : appLabelexpressions) {\n       if (!SchedulerUtils.checkQueueLabelExpression(targetqueuelabels, label,\n           null)) {\n         nonAccessiblelabels.add(label);\n       }\n     }\n     if (nonAccessiblelabels.size() \u003e 0) {\n       throw new YarnException(\n-          \"Specified queue\u003d\" + dest.getQueueName() + \" can\u0027t satisfy following \"\n+          \"Specified queue\u003d\" + dest.getQueuePath() + \" can\u0027t satisfy following \"\n               + \"apps label expressions \u003d\" + nonAccessiblelabels\n               + \" accessible node labels \u003d\" + targetqueuelabels);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkQueuePartition(FiCaSchedulerApp app, LeafQueue dest)\n      throws YarnException {\n    if (!YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      return;\n    }\n    Set\u003cString\u003e targetqueuelabels \u003d dest.getAccessibleNodeLabels();\n    AppSchedulingInfo schedulingInfo \u003d app.getAppSchedulingInfo();\n    Set\u003cString\u003e appLabelexpressions \u003d schedulingInfo.getRequestedPartitions();\n    // default partition access always available remove empty label\n    appLabelexpressions.remove(RMNodeLabelsManager.NO_LABEL);\n    Set\u003cString\u003e nonAccessiblelabels \u003d new HashSet\u003cString\u003e();\n    for (String label : appLabelexpressions) {\n      if (!SchedulerUtils.checkQueueLabelExpression(targetqueuelabels, label,\n          null)) {\n        nonAccessiblelabels.add(label);\n      }\n    }\n    if (nonAccessiblelabels.size() \u003e 0) {\n      throw new YarnException(\n          \"Specified queue\u003d\" + dest.getQueuePath() + \" can\u0027t satisfy following \"\n              + \"apps label expressions \u003d\" + nonAccessiblelabels\n              + \" accessible node labels \u003d\" + targetqueuelabels);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "46e02ab719d06f2708c0a61e8011b8f261235193": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3940. Application moveToQueue should check NodeLabel permission. Contributed by Bibin A Chundatt\n",
      "commitDate": "26/08/16 7:49 AM",
      "commitName": "46e02ab719d06f2708c0a61e8011b8f261235193",
      "commitAuthor": "Naganarasimha",
      "diff": "@@ -0,0 +1,24 @@\n+  private void checkQueuePartition(FiCaSchedulerApp app, LeafQueue dest)\n+      throws YarnException {\n+    if (!YarnConfiguration.areNodeLabelsEnabled(conf)) {\n+      return;\n+    }\n+    Set\u003cString\u003e targetqueuelabels \u003d dest.getAccessibleNodeLabels();\n+    AppSchedulingInfo schedulingInfo \u003d app.getAppSchedulingInfo();\n+    Set\u003cString\u003e appLabelexpressions \u003d schedulingInfo.getRequestedPartitions();\n+    // default partition access always available remove empty label\n+    appLabelexpressions.remove(RMNodeLabelsManager.NO_LABEL);\n+    Set\u003cString\u003e nonAccessiblelabels \u003d new HashSet\u003cString\u003e();\n+    for (String label : appLabelexpressions) {\n+      if (!SchedulerUtils.checkQueueLabelExpression(targetqueuelabels, label,\n+          null)) {\n+        nonAccessiblelabels.add(label);\n+      }\n+    }\n+    if (nonAccessiblelabels.size() \u003e 0) {\n+      throw new YarnException(\n+          \"Specified queue\u003d\" + dest.getQueueName() + \" can\u0027t satisfy following \"\n+              + \"apps label expressions \u003d\" + nonAccessiblelabels\n+              + \" accessible node labels \u003d\" + targetqueuelabels);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkQueuePartition(FiCaSchedulerApp app, LeafQueue dest)\n      throws YarnException {\n    if (!YarnConfiguration.areNodeLabelsEnabled(conf)) {\n      return;\n    }\n    Set\u003cString\u003e targetqueuelabels \u003d dest.getAccessibleNodeLabels();\n    AppSchedulingInfo schedulingInfo \u003d app.getAppSchedulingInfo();\n    Set\u003cString\u003e appLabelexpressions \u003d schedulingInfo.getRequestedPartitions();\n    // default partition access always available remove empty label\n    appLabelexpressions.remove(RMNodeLabelsManager.NO_LABEL);\n    Set\u003cString\u003e nonAccessiblelabels \u003d new HashSet\u003cString\u003e();\n    for (String label : appLabelexpressions) {\n      if (!SchedulerUtils.checkQueueLabelExpression(targetqueuelabels, label,\n          null)) {\n        nonAccessiblelabels.add(label);\n      }\n    }\n    if (nonAccessiblelabels.size() \u003e 0) {\n      throw new YarnException(\n          \"Specified queue\u003d\" + dest.getQueueName() + \" can\u0027t satisfy following \"\n              + \"apps label expressions \u003d\" + nonAccessiblelabels\n              + \" accessible node labels \u003d\" + targetqueuelabels);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}