{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawLocalFileSystem.java",
  "functionName": "getFileLinkStatusInternal",
  "functionId": "getFileLinkStatusInternal___f-Path(modifiers-final)__dereference-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
  "functionStartLine": 984,
  "functionEndLine": 993,
  "numCommitsSeen": 70,
  "timeTaken": 1839,
  "changeHistory": [
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
    "f2942687d44caaaedae98132024f8fc1dc4a884a",
    "e1a1c336323804e77265216da38a5e04e8214d85"
  ],
  "changeHistoryShort": {
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": "Ymultichange(Yparameterchange,Ybodychange)",
    "f2942687d44caaaedae98132024f8fc1dc4a884a": "Ybodychange",
    "e1a1c336323804e77265216da38a5e04e8214d85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514088 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/13 4:12 PM",
      "commitName": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514088 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/13 4:12 PM",
          "commitName": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/08/13 1:35 PM",
          "commitNameOld": "f2942687d44caaaedae98132024f8fc1dc4a884a",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 8.11,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,10 @@\n-  private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {\n-    String target \u003d FileUtil.readLink(new File(f.toString()));\n-\n-    try {\n-      FileStatus fs \u003d getFileStatus(f);\n-      // If f refers to a regular file or directory\n-      if (target.isEmpty()) {\n-        return fs;\n-      }\n-      // Otherwise f refers to a symlink\n-      return new FileStatus(fs.getLen(),\n-          false,\n-          fs.getReplication(),\n-          fs.getBlockSize(),\n-          fs.getModificationTime(),\n-          fs.getAccessTime(),\n-          fs.getPermission(),\n-          fs.getOwner(),\n-          fs.getGroup(),\n-          new Path(target),\n-          f);\n-    } catch (FileNotFoundException e) {\n-      /* The exists method in the File class returns false for dangling\n-       * links so we can get a FileNotFoundException for links that exist.\n-       * It\u0027s also possible that we raced with a delete of the link. Use\n-       * the readBasicFileAttributes method in java.nio.file.attributes\n-       * when available.\n-       */\n-      if (!target.isEmpty()) {\n-        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n-            \"\", \"\", new Path(target), f);\n-      }\n-      // f refers to a file or directory that does not exist\n-      throw e;\n+  private FileStatus getFileLinkStatusInternal(final Path f,\n+      boolean dereference) throws IOException {\n+    if (!useDeprecatedFileStatus) {\n+      return getNativeFileLinkStatus(f, dereference);\n+    } else if (dereference) {\n+      return deprecatedGetFileStatus(f);\n+    } else {\n+      return deprecatedGetFileLinkStatusInternal(f);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileStatus getFileLinkStatusInternal(final Path f,\n      boolean dereference) throws IOException {\n    if (!useDeprecatedFileStatus) {\n      return getNativeFileLinkStatus(f, dereference);\n    } else if (dereference) {\n      return deprecatedGetFileStatus(f);\n    } else {\n      return deprecatedGetFileLinkStatusInternal(f);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
          "extendedDetails": {
            "oldValue": "[f-Path(modifiers-final)]",
            "newValue": "[f-Path(modifiers-final), dereference-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514088 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/08/13 4:12 PM",
          "commitName": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/08/13 1:35 PM",
          "commitNameOld": "f2942687d44caaaedae98132024f8fc1dc4a884a",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 8.11,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,10 @@\n-  private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {\n-    String target \u003d FileUtil.readLink(new File(f.toString()));\n-\n-    try {\n-      FileStatus fs \u003d getFileStatus(f);\n-      // If f refers to a regular file or directory\n-      if (target.isEmpty()) {\n-        return fs;\n-      }\n-      // Otherwise f refers to a symlink\n-      return new FileStatus(fs.getLen(),\n-          false,\n-          fs.getReplication(),\n-          fs.getBlockSize(),\n-          fs.getModificationTime(),\n-          fs.getAccessTime(),\n-          fs.getPermission(),\n-          fs.getOwner(),\n-          fs.getGroup(),\n-          new Path(target),\n-          f);\n-    } catch (FileNotFoundException e) {\n-      /* The exists method in the File class returns false for dangling\n-       * links so we can get a FileNotFoundException for links that exist.\n-       * It\u0027s also possible that we raced with a delete of the link. Use\n-       * the readBasicFileAttributes method in java.nio.file.attributes\n-       * when available.\n-       */\n-      if (!target.isEmpty()) {\n-        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n-            \"\", \"\", new Path(target), f);\n-      }\n-      // f refers to a file or directory that does not exist\n-      throw e;\n+  private FileStatus getFileLinkStatusInternal(final Path f,\n+      boolean dereference) throws IOException {\n+    if (!useDeprecatedFileStatus) {\n+      return getNativeFileLinkStatus(f, dereference);\n+    } else if (dereference) {\n+      return deprecatedGetFileStatus(f);\n+    } else {\n+      return deprecatedGetFileLinkStatusInternal(f);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileStatus getFileLinkStatusInternal(final Path f,\n      boolean dereference) throws IOException {\n    if (!useDeprecatedFileStatus) {\n      return getNativeFileLinkStatus(f, dereference);\n    } else if (dereference) {\n      return deprecatedGetFileStatus(f);\n    } else {\n      return deprecatedGetFileLinkStatusInternal(f);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2942687d44caaaedae98132024f8fc1dc4a884a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9527. Add symlink support to LocalFileSystem on Windows. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1511118 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/08/13 1:35 PM",
      "commitName": "f2942687d44caaaedae98132024f8fc1dc4a884a",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "29/07/13 4:56 PM",
      "commitNameOld": "f593d5729687ec1acc6b6a253303a2b5481dc962",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 7.86,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {\n-    String target \u003d readLink(f);\n+    String target \u003d FileUtil.readLink(new File(f.toString()));\n \n     try {\n       FileStatus fs \u003d getFileStatus(f);\n       // If f refers to a regular file or directory\n       if (target.isEmpty()) {\n         return fs;\n       }\n       // Otherwise f refers to a symlink\n       return new FileStatus(fs.getLen(),\n           false,\n           fs.getReplication(),\n           fs.getBlockSize(),\n           fs.getModificationTime(),\n           fs.getAccessTime(),\n           fs.getPermission(),\n           fs.getOwner(),\n           fs.getGroup(),\n           new Path(target),\n           f);\n     } catch (FileNotFoundException e) {\n       /* The exists method in the File class returns false for dangling\n        * links so we can get a FileNotFoundException for links that exist.\n        * It\u0027s also possible that we raced with a delete of the link. Use\n        * the readBasicFileAttributes method in java.nio.file.attributes\n        * when available.\n        */\n       if (!target.isEmpty()) {\n         return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n             \"\", \"\", new Path(target), f);\n       }\n       // f refers to a file or directory that does not exist\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {\n    String target \u003d FileUtil.readLink(new File(f.toString()));\n\n    try {\n      FileStatus fs \u003d getFileStatus(f);\n      // If f refers to a regular file or directory\n      if (target.isEmpty()) {\n        return fs;\n      }\n      // Otherwise f refers to a symlink\n      return new FileStatus(fs.getLen(),\n          false,\n          fs.getReplication(),\n          fs.getBlockSize(),\n          fs.getModificationTime(),\n          fs.getAccessTime(),\n          fs.getPermission(),\n          fs.getOwner(),\n          fs.getGroup(),\n          new Path(target),\n          f);\n    } catch (FileNotFoundException e) {\n      /* The exists method in the File class returns false for dangling\n       * links so we can get a FileNotFoundException for links that exist.\n       * It\u0027s also possible that we raced with a delete of the link. Use\n       * the readBasicFileAttributes method in java.nio.file.attributes\n       * when available.\n       */\n      if (!target.isEmpty()) {\n        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n            \"\", \"\", new Path(target), f);\n      }\n      // f refers to a file or directory that does not exist\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "e1a1c336323804e77265216da38a5e04e8214d85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9417.  Support for symlink resolution in LocalFileSystem / RawLocalFileSystem.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502307 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/13 11:10 AM",
      "commitName": "e1a1c336323804e77265216da38a5e04e8214d85",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,36 @@\n+  private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {\n+    String target \u003d readLink(f);\n+\n+    try {\n+      FileStatus fs \u003d getFileStatus(f);\n+      // If f refers to a regular file or directory\n+      if (target.isEmpty()) {\n+        return fs;\n+      }\n+      // Otherwise f refers to a symlink\n+      return new FileStatus(fs.getLen(),\n+          false,\n+          fs.getReplication(),\n+          fs.getBlockSize(),\n+          fs.getModificationTime(),\n+          fs.getAccessTime(),\n+          fs.getPermission(),\n+          fs.getOwner(),\n+          fs.getGroup(),\n+          new Path(target),\n+          f);\n+    } catch (FileNotFoundException e) {\n+      /* The exists method in the File class returns false for dangling\n+       * links so we can get a FileNotFoundException for links that exist.\n+       * It\u0027s also possible that we raced with a delete of the link. Use\n+       * the readBasicFileAttributes method in java.nio.file.attributes\n+       * when available.\n+       */\n+      if (!target.isEmpty()) {\n+        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n+            \"\", \"\", new Path(target), f);\n+      }\n+      // f refers to a file or directory that does not exist\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus getFileLinkStatusInternal(final Path f) throws IOException {\n    String target \u003d readLink(f);\n\n    try {\n      FileStatus fs \u003d getFileStatus(f);\n      // If f refers to a regular file or directory\n      if (target.isEmpty()) {\n        return fs;\n      }\n      // Otherwise f refers to a symlink\n      return new FileStatus(fs.getLen(),\n          false,\n          fs.getReplication(),\n          fs.getBlockSize(),\n          fs.getModificationTime(),\n          fs.getAccessTime(),\n          fs.getPermission(),\n          fs.getOwner(),\n          fs.getGroup(),\n          new Path(target),\n          f);\n    } catch (FileNotFoundException e) {\n      /* The exists method in the File class returns false for dangling\n       * links so we can get a FileNotFoundException for links that exist.\n       * It\u0027s also possible that we raced with a delete of the link. Use\n       * the readBasicFileAttributes method in java.nio.file.attributes\n       * when available.\n       */\n      if (!target.isEmpty()) {\n        return new FileStatus(0, false, 0, 0, 0, 0, FsPermission.getDefault(),\n            \"\", \"\", new Path(target), f);\n      }\n      // f refers to a file or directory that does not exist\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
    }
  }
}