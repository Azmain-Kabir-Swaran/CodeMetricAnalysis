{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "getNodeManagerResource",
  "functionId": "getNodeManagerResource",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 204,
  "functionEndLine": 224,
  "numCommitsSeen": 40,
  "timeTaken": 970,
  "changeHistory": [
    "ba8136615ab66c450884614557eddc6509d63b7c"
  ],
  "changeHistoryShort": {
    "ba8136615ab66c450884614557eddc6509d63b7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba8136615ab66c450884614557eddc6509d63b7c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)\n\nChange-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b\n",
      "commitDate": "09/11/17 12:09 PM",
      "commitName": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,21 @@\n+  private Resource getNodeManagerResource() {\n+    Resource resource \u003d Resources.createResource(0);\n+    ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n+    for (ResourceInformation info : infors) {\n+      long value;\n+      if (info.getName().equals(ResourceInformation.MEMORY_URI)) {\n+        value \u003d getConf().getInt(SLSConfiguration.NM_MEMORY_MB,\n+            SLSConfiguration.NM_MEMORY_MB_DEFAULT);\n+      } else if (info.getName().equals(ResourceInformation.VCORES_URI)) {\n+        value \u003d getConf().getInt(SLSConfiguration.NM_VCORES,\n+            SLSConfiguration.NM_VCORES_DEFAULT);\n+      } else {\n+        value \u003d getConf().getLong(SLSConfiguration.NM_PREFIX +\n+            info.getName(), SLSConfiguration.NM_RESOURCE_DEFAULT);\n+      }\n+\n+      resource.setResourceValue(info.getName(), value);\n+    }\n+\n+    return resource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource getNodeManagerResource() {\n    Resource resource \u003d Resources.createResource(0);\n    ResourceInformation[] infors \u003d ResourceUtils.getResourceTypesArray();\n    for (ResourceInformation info : infors) {\n      long value;\n      if (info.getName().equals(ResourceInformation.MEMORY_URI)) {\n        value \u003d getConf().getInt(SLSConfiguration.NM_MEMORY_MB,\n            SLSConfiguration.NM_MEMORY_MB_DEFAULT);\n      } else if (info.getName().equals(ResourceInformation.VCORES_URI)) {\n        value \u003d getConf().getInt(SLSConfiguration.NM_VCORES,\n            SLSConfiguration.NM_VCORES_DEFAULT);\n      } else {\n        value \u003d getConf().getLong(SLSConfiguration.NM_PREFIX +\n            info.getName(), SLSConfiguration.NM_RESOURCE_DEFAULT);\n      }\n\n      resource.setResourceValue(info.getName(), value);\n    }\n\n    return resource;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}