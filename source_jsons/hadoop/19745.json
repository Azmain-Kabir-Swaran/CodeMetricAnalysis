{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapTask.java",
  "functionName": "flush",
  "functionId": "flush",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
  "functionStartLine": 863,
  "functionEndLine": 865,
  "numCommitsSeen": 36,
  "timeTaken": 10245,
  "changeHistory": [
    "5a725bb886eb0b9182840c4a91466c361ecc11e0",
    "4981d082d4f3c82d1c2c900c7488b83bf20301cc",
    "dea1b2e84aed0d2e597036f070ae8830f579a498",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "4796e1adcb912005198c9003305c97cf3a8b523e",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "5a725bb886eb0b9182840c4a91466c361ecc11e0": "Ybodychange",
    "4981d082d4f3c82d1c2c900c7488b83bf20301cc": "Ybodychange",
    "dea1b2e84aed0d2e597036f070ae8830f579a498": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "4796e1adcb912005198c9003305c97cf3a8b523e": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5a725bb886eb0b9182840c4a91466c361ecc11e0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7033: Map outputs implicitly rely on permissive umask for shuffle. Contributed by Jason Lowe\n",
      "commitDate": "31/01/18 1:45 PM",
      "commitName": "5a725bb886eb0b9182840c4a91466c361ecc11e0",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "26/01/18 12:36 PM",
      "commitNameOld": "a37e7f0ad8b68c7ed16c242bedf62f4cde48d6fd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 5.05,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,64 @@\n     public void flush() throws IOException, ClassNotFoundException,\n            InterruptedException {\n       LOG.info(\"Starting flush of map output\");\n       if (kvbuffer \u003d\u003d null) {\n         LOG.info(\"kvbuffer is null. Skipping flush.\");\n         return;\n       }\n       spillLock.lock();\n       try {\n         while (spillInProgress) {\n           reporter.progress();\n           spillDone.await();\n         }\n         checkSpillException();\n \n         final int kvbend \u003d 4 * kvend;\n         if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n             equator - (equator % METASIZE)) {\n           // spill finished\n           resetSpill();\n         }\n         if (kvindex !\u003d kvend) {\n           kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n           bufend \u003d bufmark;\n           LOG.info(\"Spilling map output\");\n           LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                    \"; bufvoid \u003d \" + bufvoid);\n           LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                    \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                    \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                          kvmeta.capacity()) + 1) + \"/\" + maxRec);\n           sortAndSpill();\n         }\n       } catch (InterruptedException e) {\n         throw new IOException(\"Interrupted while waiting for the writer\", e);\n       } finally {\n         spillLock.unlock();\n       }\n       assert !spillLock.isHeldByCurrentThread();\n       // shut down spill thread and wait for it to exit. Since the preceding\n       // ensures that it is finished with its work (and sortAndSpill did not\n       // throw), we elect to use an interrupt instead of setting a flag.\n       // Spilling simultaneously from this thread while the spill thread\n       // finishes its work might be both a useful way to extend this and also\n       // sufficient motivation for the latter approach.\n       try {\n         spillThread.interrupt();\n         spillThread.join();\n       } catch (InterruptedException e) {\n         throw new IOException(\"Spill failed\", e);\n       }\n       // release sort buffer before the merge\n       kvbuffer \u003d null;\n       mergeParts();\n       Path outputPath \u003d mapOutputFile.getOutputFile();\n       fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n+      // If necessary, make outputs permissive enough for shuffling.\n+      if (!SHUFFLE_OUTPUT_PERM.equals(\n+          SHUFFLE_OUTPUT_PERM.applyUMask(FsPermission.getUMask(job)))) {\n+        Path indexPath \u003d mapOutputFile.getOutputIndexFile();\n+        rfs.setPermission(outputPath, SHUFFLE_OUTPUT_PERM);\n+        rfs.setPermission(indexPath, SHUFFLE_OUTPUT_PERM);\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      if (kvbuffer \u003d\u003d null) {\n        LOG.info(\"kvbuffer is null. Skipping flush.\");\n        return;\n      }\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          LOG.info(\"Spilling map output\");\n          LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                   \"; bufvoid \u003d \" + bufvoid);\n          LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                   \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                   \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                         kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n      Path outputPath \u003d mapOutputFile.getOutputFile();\n      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n      // If necessary, make outputs permissive enough for shuffling.\n      if (!SHUFFLE_OUTPUT_PERM.equals(\n          SHUFFLE_OUTPUT_PERM.applyUMask(FsPermission.getUMask(job)))) {\n        Path indexPath \u003d mapOutputFile.getOutputIndexFile();\n        rfs.setPermission(outputPath, SHUFFLE_OUTPUT_PERM);\n        rfs.setPermission(indexPath, SHUFFLE_OUTPUT_PERM);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {}
    },
    "4981d082d4f3c82d1c2c900c7488b83bf20301cc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6261. NullPointerException if MapOutputBuffer.flush invoked twice. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "18/02/15 11:28 AM",
      "commitName": "4981d082d4f3c82d1c2c900c7488b83bf20301cc",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/12/14 12:56 AM",
      "commitNameOld": "298d09c9b583088f364038adcb1edf1eb1c2c196",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 65.44,
      "commitsBetweenForRepo": 499,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n     public void flush() throws IOException, ClassNotFoundException,\n            InterruptedException {\n       LOG.info(\"Starting flush of map output\");\n+      if (kvbuffer \u003d\u003d null) {\n+        LOG.info(\"kvbuffer is null. Skipping flush.\");\n+        return;\n+      }\n       spillLock.lock();\n       try {\n         while (spillInProgress) {\n           reporter.progress();\n           spillDone.await();\n         }\n         checkSpillException();\n \n         final int kvbend \u003d 4 * kvend;\n         if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n             equator - (equator % METASIZE)) {\n           // spill finished\n           resetSpill();\n         }\n         if (kvindex !\u003d kvend) {\n           kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n           bufend \u003d bufmark;\n           LOG.info(\"Spilling map output\");\n           LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                    \"; bufvoid \u003d \" + bufvoid);\n           LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                    \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                    \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                          kvmeta.capacity()) + 1) + \"/\" + maxRec);\n           sortAndSpill();\n         }\n       } catch (InterruptedException e) {\n         throw new IOException(\"Interrupted while waiting for the writer\", e);\n       } finally {\n         spillLock.unlock();\n       }\n       assert !spillLock.isHeldByCurrentThread();\n       // shut down spill thread and wait for it to exit. Since the preceding\n       // ensures that it is finished with its work (and sortAndSpill did not\n       // throw), we elect to use an interrupt instead of setting a flag.\n       // Spilling simultaneously from this thread while the spill thread\n       // finishes its work might be both a useful way to extend this and also\n       // sufficient motivation for the latter approach.\n       try {\n         spillThread.interrupt();\n         spillThread.join();\n       } catch (InterruptedException e) {\n         throw new IOException(\"Spill failed\", e);\n       }\n       // release sort buffer before the merge\n       kvbuffer \u003d null;\n       mergeParts();\n       Path outputPath \u003d mapOutputFile.getOutputFile();\n       fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      if (kvbuffer \u003d\u003d null) {\n        LOG.info(\"kvbuffer is null. Skipping flush.\");\n        return;\n      }\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          LOG.info(\"Spilling map output\");\n          LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                   \"; bufvoid \u003d \" + bufvoid);\n          LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                   \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                   \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                         kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n      Path outputPath \u003d mapOutputFile.getOutputFile();\n      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {}
    },
    "dea1b2e84aed0d2e597036f070ae8830f579a498": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10005. No need to check INFO severity level is enabled or not. Contributed by Jackie Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1532907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 2:00 PM",
      "commitName": "dea1b2e84aed0d2e597036f070ae8830f579a498",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/08/13 1:11 AM",
      "commitNameOld": "cae55de2cd1f9ea068f3410c8bdea14cf55738cb",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 61.53,
      "commitsBetweenForRepo": 369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,53 @@\n     public void flush() throws IOException, ClassNotFoundException,\n            InterruptedException {\n       LOG.info(\"Starting flush of map output\");\n       spillLock.lock();\n       try {\n         while (spillInProgress) {\n           reporter.progress();\n           spillDone.await();\n         }\n         checkSpillException();\n \n         final int kvbend \u003d 4 * kvend;\n         if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n             equator - (equator % METASIZE)) {\n           // spill finished\n           resetSpill();\n         }\n         if (kvindex !\u003d kvend) {\n           kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n           bufend \u003d bufmark;\n-          if (LOG.isInfoEnabled()) {\n-            LOG.info(\"Spilling map output\");\n-            LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n-                     \"; bufvoid \u003d \" + bufvoid);\n-            LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n-                     \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n-                     \"); length \u003d \" + (distanceTo(kvend, kvstart,\n-                           kvmeta.capacity()) + 1) + \"/\" + maxRec);\n-          }\n+          LOG.info(\"Spilling map output\");\n+          LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n+                   \"; bufvoid \u003d \" + bufvoid);\n+          LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n+                   \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n+                   \"); length \u003d \" + (distanceTo(kvend, kvstart,\n+                         kvmeta.capacity()) + 1) + \"/\" + maxRec);\n           sortAndSpill();\n         }\n       } catch (InterruptedException e) {\n         throw new IOException(\"Interrupted while waiting for the writer\", e);\n       } finally {\n         spillLock.unlock();\n       }\n       assert !spillLock.isHeldByCurrentThread();\n       // shut down spill thread and wait for it to exit. Since the preceding\n       // ensures that it is finished with its work (and sortAndSpill did not\n       // throw), we elect to use an interrupt instead of setting a flag.\n       // Spilling simultaneously from this thread while the spill thread\n       // finishes its work might be both a useful way to extend this and also\n       // sufficient motivation for the latter approach.\n       try {\n         spillThread.interrupt();\n         spillThread.join();\n       } catch (InterruptedException e) {\n         throw new IOException(\"Spill failed\", e);\n       }\n       // release sort buffer before the merge\n       kvbuffer \u003d null;\n       mergeParts();\n       Path outputPath \u003d mapOutputFile.getOutputFile();\n       fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          LOG.info(\"Spilling map output\");\n          LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                   \"; bufvoid \u003d \" + bufvoid);\n          LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                   \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                   \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                         kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n      Path outputPath \u003d mapOutputFile.getOutputFile();\n      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          if (LOG.isInfoEnabled()) {\n            LOG.info(\"Spilling map output\");\n            LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                     \"; bufvoid \u003d \" + bufvoid);\n            LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                     \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                     \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                           kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          }\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n      Path outputPath \u003d mapOutputFile.getOutputFile();\n      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          if (LOG.isInfoEnabled()) {\n            LOG.info(\"Spilling map output\");\n            LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                     \"; bufvoid \u003d \" + bufvoid);\n            LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                     \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                     \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                           kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          }\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n      Path outputPath \u003d mapOutputFile.getOutputFile();\n      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/MapTask.java",
        "oldMethodName": "flush",
        "newMethodName": "flush"
      }
    },
    "4796e1adcb912005198c9003305c97cf3a8b523e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2365. Add counters to track bytes (read,written) via File(Input,Output)Format. Contributed by Siddharth Seth. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1146515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/07/11 4:36 PM",
      "commitName": "4796e1adcb912005198c9003305c97cf3a8b523e",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/07/11 5:54 PM",
      "commitNameOld": "ad7cf36d5fd99ecaf29e33d8de437e21f81a32d3",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n     public void flush() throws IOException, ClassNotFoundException,\n            InterruptedException {\n       LOG.info(\"Starting flush of map output\");\n       spillLock.lock();\n       try {\n         while (spillInProgress) {\n           reporter.progress();\n           spillDone.await();\n         }\n         checkSpillException();\n \n         final int kvbend \u003d 4 * kvend;\n         if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n             equator - (equator % METASIZE)) {\n           // spill finished\n           resetSpill();\n         }\n         if (kvindex !\u003d kvend) {\n           kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n           bufend \u003d bufmark;\n           if (LOG.isInfoEnabled()) {\n             LOG.info(\"Spilling map output\");\n             LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                      \"; bufvoid \u003d \" + bufvoid);\n             LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                      \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                      \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                            kvmeta.capacity()) + 1) + \"/\" + maxRec);\n           }\n           sortAndSpill();\n         }\n       } catch (InterruptedException e) {\n         throw new IOException(\"Interrupted while waiting for the writer\", e);\n       } finally {\n         spillLock.unlock();\n       }\n       assert !spillLock.isHeldByCurrentThread();\n       // shut down spill thread and wait for it to exit. Since the preceding\n       // ensures that it is finished with its work (and sortAndSpill did not\n       // throw), we elect to use an interrupt instead of setting a flag.\n       // Spilling simultaneously from this thread while the spill thread\n       // finishes its work might be both a useful way to extend this and also\n       // sufficient motivation for the latter approach.\n       try {\n         spillThread.interrupt();\n         spillThread.join();\n       } catch (InterruptedException e) {\n         throw new IOException(\"Spill failed\", e);\n       }\n       // release sort buffer before the merge\n       kvbuffer \u003d null;\n       mergeParts();\n+      Path outputPath \u003d mapOutputFile.getOutputFile();\n+      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          if (LOG.isInfoEnabled()) {\n            LOG.info(\"Spilling map output\");\n            LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                     \"; bufvoid \u003d \" + bufvoid);\n            LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                     \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                     \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                           kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          }\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n      Path outputPath \u003d mapOutputFile.getOutputFile();\n      fileOutputByteCounter.increment(rfs.getFileStatus(outputPath).getLen());\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,53 @@\n+    public void flush() throws IOException, ClassNotFoundException,\n+           InterruptedException {\n+      LOG.info(\"Starting flush of map output\");\n+      spillLock.lock();\n+      try {\n+        while (spillInProgress) {\n+          reporter.progress();\n+          spillDone.await();\n+        }\n+        checkSpillException();\n+\n+        final int kvbend \u003d 4 * kvend;\n+        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n+            equator - (equator % METASIZE)) {\n+          // spill finished\n+          resetSpill();\n+        }\n+        if (kvindex !\u003d kvend) {\n+          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n+          bufend \u003d bufmark;\n+          if (LOG.isInfoEnabled()) {\n+            LOG.info(\"Spilling map output\");\n+            LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n+                     \"; bufvoid \u003d \" + bufvoid);\n+            LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n+                     \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n+                     \"); length \u003d \" + (distanceTo(kvend, kvstart,\n+                           kvmeta.capacity()) + 1) + \"/\" + maxRec);\n+          }\n+          sortAndSpill();\n+        }\n+      } catch (InterruptedException e) {\n+        throw new IOException(\"Interrupted while waiting for the writer\", e);\n+      } finally {\n+        spillLock.unlock();\n+      }\n+      assert !spillLock.isHeldByCurrentThread();\n+      // shut down spill thread and wait for it to exit. Since the preceding\n+      // ensures that it is finished with its work (and sortAndSpill did not\n+      // throw), we elect to use an interrupt instead of setting a flag.\n+      // Spilling simultaneously from this thread while the spill thread\n+      // finishes its work might be both a useful way to extend this and also\n+      // sufficient motivation for the latter approach.\n+      try {\n+        spillThread.interrupt();\n+        spillThread.join();\n+      } catch (InterruptedException e) {\n+        throw new IOException(\"Spill failed\", e);\n+      }\n+      // release sort buffer before the merge\n+      kvbuffer \u003d null;\n+      mergeParts();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void flush() throws IOException, ClassNotFoundException,\n           InterruptedException {\n      LOG.info(\"Starting flush of map output\");\n      spillLock.lock();\n      try {\n        while (spillInProgress) {\n          reporter.progress();\n          spillDone.await();\n        }\n        checkSpillException();\n\n        final int kvbend \u003d 4 * kvend;\n        if ((kvbend + METASIZE) % kvbuffer.length !\u003d\n            equator - (equator % METASIZE)) {\n          // spill finished\n          resetSpill();\n        }\n        if (kvindex !\u003d kvend) {\n          kvend \u003d (kvindex + NMETA) % kvmeta.capacity();\n          bufend \u003d bufmark;\n          if (LOG.isInfoEnabled()) {\n            LOG.info(\"Spilling map output\");\n            LOG.info(\"bufstart \u003d \" + bufstart + \"; bufend \u003d \" + bufmark +\n                     \"; bufvoid \u003d \" + bufvoid);\n            LOG.info(\"kvstart \u003d \" + kvstart + \"(\" + (kvstart * 4) +\n                     \"); kvend \u003d \" + kvend + \"(\" + (kvend * 4) +\n                     \"); length \u003d \" + (distanceTo(kvend, kvstart,\n                           kvmeta.capacity()) + 1) + \"/\" + maxRec);\n          }\n          sortAndSpill();\n        }\n      } catch (InterruptedException e) {\n        throw new IOException(\"Interrupted while waiting for the writer\", e);\n      } finally {\n        spillLock.unlock();\n      }\n      assert !spillLock.isHeldByCurrentThread();\n      // shut down spill thread and wait for it to exit. Since the preceding\n      // ensures that it is finished with its work (and sortAndSpill did not\n      // throw), we elect to use an interrupt instead of setting a flag.\n      // Spilling simultaneously from this thread while the spill thread\n      // finishes its work might be both a useful way to extend this and also\n      // sufficient motivation for the latter approach.\n      try {\n        spillThread.interrupt();\n        spillThread.join();\n      } catch (InterruptedException e) {\n        throw new IOException(\"Spill failed\", e);\n      }\n      // release sort buffer before the merge\n      kvbuffer \u003d null;\n      mergeParts();\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/MapTask.java"
    }
  }
}