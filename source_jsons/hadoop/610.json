{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockReaderFactory.java",
  "functionName": "tryToCreateExternalBlockReader",
  "functionId": "tryToCreateExternalBlockReader",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
  "functionStartLine": 384,
  "functionEndLine": 420,
  "numCommitsSeen": 63,
  "timeTaken": 3047,
  "changeHistory": [
    "f308561f1d885491b88db73ac63003202056d661",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "e5992ef4df63fbc6a6b8e357b32c647e7837c662",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "5eb237d544fc8eeea85ac4bd4f7500edd49c8727",
    "7087e700e032dabc174ecc12b62c12e7d49b995f"
  ],
  "changeHistoryShort": {
    "f308561f1d885491b88db73ac63003202056d661": "Yfilerename",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "e5992ef4df63fbc6a6b8e357b32c647e7837c662": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "5eb237d544fc8eeea85ac4bd4f7500edd49c8727": "Ybodychange",
    "7087e700e032dabc174ecc12b62c12e7d49b995f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f308561f1d885491b88db73ac63003202056d661": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8057 Move BlockReader implementation to the client implementation package.  Contributed by Takanobu Asanuma\n",
      "commitDate": "25/04/16 12:01 PM",
      "commitName": "f308561f1d885491b88db73ac63003202056d661",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "25/04/16 9:38 AM",
      "commitNameOld": "10f0f7851a3255caab775777e8fb6c2781d97062",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        long visibleLength \u003d startOffset + length;\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(visibleLength).\n            build();\n        if (accessor \u003d\u003d null) {\n          LOG.trace(\"{}: No ReplicaAccessor created by {}\",\n              this, cls.getName());\n        } else {\n          return new ExternalBlockReader(accessor, visibleLength, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/BlockReaderFactory.java"
      }
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n   private BlockReader tryToCreateExternalBlockReader() {\n     List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n         conf.getReplicaAccessorBuilderClasses();\n     for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n       try {\n         ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n         token.write(bado);\n         byte tokenBytes[] \u003d bado.toByteArray();\n \n         Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n             cls.getConstructor();\n         ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n         long visibleLength \u003d startOffset + length;\n         ReplicaAccessor accessor \u003d builder.\n             setAllowShortCircuitReads(allowShortCircuitLocalReads).\n             setBlock(block.getBlockId(), block.getBlockPoolId()).\n             setGenerationStamp(block.getGenerationStamp()).\n             setBlockAccessToken(tokenBytes).\n             setClientName(clientName).\n             setConfiguration(configuration).\n             setFileName(fileName).\n             setVerifyChecksum(verifyChecksum).\n             setVisibleLength(visibleLength).\n             build();\n         if (accessor \u003d\u003d null) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": No ReplicaAccessor created by \" +\n-                cls.getName());\n-          }\n+          LOG.trace(\"{}: No ReplicaAccessor created by {}\",\n+              this, cls.getName());\n         } else {\n           return new ExternalBlockReader(accessor, visibleLength, startOffset);\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Failed to construct new object of type \" +\n             cls.getName(), t);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        long visibleLength \u003d startOffset + length;\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(visibleLength).\n            build();\n        if (accessor \u003d\u003d null) {\n          LOG.trace(\"{}: No ReplicaAccessor created by {}\",\n              this, cls.getName());\n        } else {\n          return new ExternalBlockReader(accessor, visibleLength, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   private BlockReader tryToCreateExternalBlockReader() {\n     List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n         conf.getReplicaAccessorBuilderClasses();\n     for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n       try {\n         ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n         token.write(bado);\n         byte tokenBytes[] \u003d bado.toByteArray();\n \n         Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n             cls.getConstructor();\n         ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n         long visibleLength \u003d startOffset + length;\n         ReplicaAccessor accessor \u003d builder.\n             setAllowShortCircuitReads(allowShortCircuitLocalReads).\n             setBlock(block.getBlockId(), block.getBlockPoolId()).\n             setGenerationStamp(block.getGenerationStamp()).\n             setBlockAccessToken(tokenBytes).\n             setClientName(clientName).\n             setConfiguration(configuration).\n             setFileName(fileName).\n             setVerifyChecksum(verifyChecksum).\n             setVisibleLength(visibleLength).\n             build();\n         if (accessor \u003d\u003d null) {\n-          LOG.trace(\"{}: No ReplicaAccessor created by {}\",\n-              this, cls.getName());\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": No ReplicaAccessor created by \" +\n+                cls.getName());\n+          }\n         } else {\n           return new ExternalBlockReader(accessor, visibleLength, startOffset);\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Failed to construct new object of type \" +\n             cls.getName(), t);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        long visibleLength \u003d startOffset + length;\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(visibleLength).\n            build();\n        if (accessor \u003d\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": No ReplicaAccessor created by \" +\n                cls.getName());\n          }\n        } else {\n          return new ExternalBlockReader(accessor, visibleLength, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 1:39 PM",
      "commitNameOld": "e5992ef4df63fbc6a6b8e357b32c647e7837c662",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n   private BlockReader tryToCreateExternalBlockReader() {\n     List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n         conf.getReplicaAccessorBuilderClasses();\n     for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n       try {\n         ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n         token.write(bado);\n         byte tokenBytes[] \u003d bado.toByteArray();\n \n         Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n             cls.getConstructor();\n         ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n         long visibleLength \u003d startOffset + length;\n         ReplicaAccessor accessor \u003d builder.\n             setAllowShortCircuitReads(allowShortCircuitLocalReads).\n             setBlock(block.getBlockId(), block.getBlockPoolId()).\n             setGenerationStamp(block.getGenerationStamp()).\n             setBlockAccessToken(tokenBytes).\n             setClientName(clientName).\n             setConfiguration(configuration).\n             setFileName(fileName).\n             setVerifyChecksum(verifyChecksum).\n             setVisibleLength(visibleLength).\n             build();\n         if (accessor \u003d\u003d null) {\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": No ReplicaAccessor created by \" +\n-                cls.getName());\n-          }\n+          LOG.trace(\"{}: No ReplicaAccessor created by {}\",\n+              this, cls.getName());\n         } else {\n           return new ExternalBlockReader(accessor, visibleLength, startOffset);\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Failed to construct new object of type \" +\n             cls.getName(), t);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        long visibleLength \u003d startOffset + length;\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(visibleLength).\n            build();\n        if (accessor \u003d\u003d null) {\n          LOG.trace(\"{}: No ReplicaAccessor created by {}\",\n              this, cls.getName());\n        } else {\n          return new ExternalBlockReader(accessor, visibleLength, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "e5992ef4df63fbc6a6b8e357b32c647e7837c662": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9147. Fix the setting of visibleLength in ExternalBlockReader.  (Colin P. McCabe via Lei (Eddy) Xu)\n",
      "commitDate": "28/09/15 1:39 PM",
      "commitName": "e5992ef4df63fbc6a6b8e357b32c647e7837c662",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   private BlockReader tryToCreateExternalBlockReader() {\n     List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n         conf.getReplicaAccessorBuilderClasses();\n     for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n       try {\n         ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n         token.write(bado);\n         byte tokenBytes[] \u003d bado.toByteArray();\n \n         Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n             cls.getConstructor();\n         ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n+        long visibleLength \u003d startOffset + length;\n         ReplicaAccessor accessor \u003d builder.\n             setAllowShortCircuitReads(allowShortCircuitLocalReads).\n             setBlock(block.getBlockId(), block.getBlockPoolId()).\n             setGenerationStamp(block.getGenerationStamp()).\n             setBlockAccessToken(tokenBytes).\n             setClientName(clientName).\n             setConfiguration(configuration).\n             setFileName(fileName).\n             setVerifyChecksum(verifyChecksum).\n-            setVisibleLength(length).\n+            setVisibleLength(visibleLength).\n             build();\n         if (accessor \u003d\u003d null) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": No ReplicaAccessor created by \" +\n                 cls.getName());\n           }\n         } else {\n-          return new ExternalBlockReader(accessor, length, startOffset);\n+          return new ExternalBlockReader(accessor, visibleLength, startOffset);\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Failed to construct new object of type \" +\n             cls.getName(), t);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        long visibleLength \u003d startOffset + length;\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(visibleLength).\n            build();\n        if (accessor \u003d\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": No ReplicaAccessor created by \" +\n                cls.getName());\n          }\n        } else {\n          return new ExternalBlockReader(accessor, visibleLength, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(length).\n            build();\n        if (accessor \u003d\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": No ReplicaAccessor created by \" +\n                cls.getName());\n          }\n        } else {\n          return new ExternalBlockReader(accessor, length, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
      }
    },
    "5eb237d544fc8eeea85ac4bd4f7500edd49c8727": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9132. Pass genstamp to ReplicaAccessorBuilder. (Colin Patrick McCabe via Lei (Eddy) Xu)\n",
      "commitDate": "25/09/15 3:50 PM",
      "commitName": "5eb237d544fc8eeea85ac4bd4f7500edd49c8727",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "27/08/15 9:02 AM",
      "commitNameOld": "7e971b7315fa2942b4db7ba11ed513766957b777",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 29.28,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   private BlockReader tryToCreateExternalBlockReader() {\n     List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n         conf.getReplicaAccessorBuilderClasses();\n     for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n       try {\n         ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n         token.write(bado);\n         byte tokenBytes[] \u003d bado.toByteArray();\n \n         Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n             cls.getConstructor();\n         ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n         ReplicaAccessor accessor \u003d builder.\n             setAllowShortCircuitReads(allowShortCircuitLocalReads).\n             setBlock(block.getBlockId(), block.getBlockPoolId()).\n+            setGenerationStamp(block.getGenerationStamp()).\n             setBlockAccessToken(tokenBytes).\n             setClientName(clientName).\n             setConfiguration(configuration).\n             setFileName(fileName).\n             setVerifyChecksum(verifyChecksum).\n             setVisibleLength(length).\n             build();\n         if (accessor \u003d\u003d null) {\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": No ReplicaAccessor created by \" +\n                 cls.getName());\n           }\n         } else {\n           return new ExternalBlockReader(accessor, length, startOffset);\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Failed to construct new object of type \" +\n             cls.getName(), t);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setGenerationStamp(block.getGenerationStamp()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(length).\n            build();\n        if (accessor \u003d\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": No ReplicaAccessor created by \" +\n                cls.getName());\n          }\n        } else {\n          return new ExternalBlockReader(accessor, length, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java",
      "extendedDetails": {}
    },
    "7087e700e032dabc174ecc12b62c12e7d49b995f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8924. Add pluggable interface for reading replicas in DFSClient. (Colin Patrick McCabe via Lei Xu)\n",
      "commitDate": "21/08/15 5:02 PM",
      "commitName": "7087e700e032dabc174ecc12b62c12e7d49b995f",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,37 @@\n+  private BlockReader tryToCreateExternalBlockReader() {\n+    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n+        conf.getReplicaAccessorBuilderClasses();\n+    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n+      try {\n+        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n+        token.write(bado);\n+        byte tokenBytes[] \u003d bado.toByteArray();\n+\n+        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n+            cls.getConstructor();\n+        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n+        ReplicaAccessor accessor \u003d builder.\n+            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n+            setBlock(block.getBlockId(), block.getBlockPoolId()).\n+            setBlockAccessToken(tokenBytes).\n+            setClientName(clientName).\n+            setConfiguration(configuration).\n+            setFileName(fileName).\n+            setVerifyChecksum(verifyChecksum).\n+            setVisibleLength(length).\n+            build();\n+        if (accessor \u003d\u003d null) {\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": No ReplicaAccessor created by \" +\n+                cls.getName());\n+          }\n+        } else {\n+          return new ExternalBlockReader(accessor, length, startOffset);\n+        }\n+      } catch (Throwable t) {\n+        LOG.warn(\"Failed to construct new object of type \" +\n+            cls.getName(), t);\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private BlockReader tryToCreateExternalBlockReader() {\n    List\u003cClass\u003c? extends ReplicaAccessorBuilder\u003e\u003e clses \u003d\n        conf.getReplicaAccessorBuilderClasses();\n    for (Class\u003c? extends ReplicaAccessorBuilder\u003e cls : clses) {\n      try {\n        ByteArrayDataOutput bado \u003d ByteStreams.newDataOutput();\n        token.write(bado);\n        byte tokenBytes[] \u003d bado.toByteArray();\n\n        Constructor\u003c? extends ReplicaAccessorBuilder\u003e ctor \u003d\n            cls.getConstructor();\n        ReplicaAccessorBuilder builder \u003d ctor.newInstance();\n        ReplicaAccessor accessor \u003d builder.\n            setAllowShortCircuitReads(allowShortCircuitLocalReads).\n            setBlock(block.getBlockId(), block.getBlockPoolId()).\n            setBlockAccessToken(tokenBytes).\n            setClientName(clientName).\n            setConfiguration(configuration).\n            setFileName(fileName).\n            setVerifyChecksum(verifyChecksum).\n            setVisibleLength(length).\n            build();\n        if (accessor \u003d\u003d null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": No ReplicaAccessor created by \" +\n                cls.getName());\n          }\n        } else {\n          return new ExternalBlockReader(accessor, length, startOffset);\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Failed to construct new object of type \" +\n            cls.getName(), t);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/BlockReaderFactory.java"
    }
  }
}