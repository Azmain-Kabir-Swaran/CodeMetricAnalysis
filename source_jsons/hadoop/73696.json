{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WritableRpcEngine.java",
  "functionName": "invoke",
  "functionId": "invoke___proxy-Object__method-Method__args-Object[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
  "functionStartLine": 233,
  "functionEndLine": 261,
  "numCommitsSeen": 37,
  "timeTaken": 2142,
  "changeHistory": [
    "e880660a204b6fd0e5a0799393a4d36359765a54",
    "d08b8c801a908b4242e7b21a54f3b1e4072f1eae",
    "93d8a7f2a2d72a1719d02b1ed90678397900b6ed"
  ],
  "changeHistoryShort": {
    "e880660a204b6fd0e5a0799393a4d36359765a54": "Ybodychange",
    "d08b8c801a908b4242e7b21a54f3b1e4072f1eae": "Ybodychange",
    "93d8a7f2a2d72a1719d02b1ed90678397900b6ed": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e880660a204b6fd0e5a0799393a4d36359765a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13399. [SBN read] Make Client field AlignmentContext non-static. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "c9d73437e881296282abe46a6b3196befc8cef72",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public Object invoke(Object proxy, Method method, Object[] args)\n       throws Throwable {\n       long startTime \u003d 0;\n       if (LOG.isDebugEnabled()) {\n         startTime \u003d Time.monotonicNow();\n       }\n \n       // if Tracing is on then start a new span for this rpc.\n       // guard it in the if statement to make sure there isn\u0027t\n       // any extra string manipulation.\n       Tracer tracer \u003d Tracer.curThreadTracer();\n       TraceScope traceScope \u003d null;\n       if (tracer !\u003d null) {\n         traceScope \u003d tracer.newScope(RpcClientUtil.methodToTraceString(method));\n       }\n       ObjectWritable value;\n       try {\n         value \u003d (ObjectWritable)\n           client.call(RPC.RpcKind.RPC_WRITABLE, new Invocation(method, args),\n-            remoteId, fallbackToSimpleAuth);\n+            remoteId, fallbackToSimpleAuth, alignmentContext);\n       } finally {\n         if (traceScope !\u003d null) traceScope.close();\n       }\n       if (LOG.isDebugEnabled()) {\n         long callTime \u003d Time.monotonicNow() - startTime;\n         LOG.debug(\"Call: \" + method.getName() + \" \" + callTime);\n       }\n       return value.get();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Object invoke(Object proxy, Method method, Object[] args)\n      throws Throwable {\n      long startTime \u003d 0;\n      if (LOG.isDebugEnabled()) {\n        startTime \u003d Time.monotonicNow();\n      }\n\n      // if Tracing is on then start a new span for this rpc.\n      // guard it in the if statement to make sure there isn\u0027t\n      // any extra string manipulation.\n      Tracer tracer \u003d Tracer.curThreadTracer();\n      TraceScope traceScope \u003d null;\n      if (tracer !\u003d null) {\n        traceScope \u003d tracer.newScope(RpcClientUtil.methodToTraceString(method));\n      }\n      ObjectWritable value;\n      try {\n        value \u003d (ObjectWritable)\n          client.call(RPC.RpcKind.RPC_WRITABLE, new Invocation(method, args),\n            remoteId, fallbackToSimpleAuth, alignmentContext);\n      } finally {\n        if (traceScope !\u003d null) traceScope.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        long callTime \u003d Time.monotonicNow() - startTime;\n        LOG.debug(\"Call: \" + method.getName() + \" \" + callTime);\n      }\n      return value.get();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
      "extendedDetails": {}
    },
    "d08b8c801a908b4242e7b21a54f3b1e4072f1eae": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14893. WritableRpcEngine should use Time.monotonicNow. Contributed by Chetna Chaudhari.\n",
      "commitDate": "26/09/17 12:46 AM",
      "commitName": "d08b8c801a908b4242e7b21a54f3b1e4072f1eae",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 70.13,
      "commitsBetweenForRepo": 624,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public Object invoke(Object proxy, Method method, Object[] args)\n       throws Throwable {\n       long startTime \u003d 0;\n       if (LOG.isDebugEnabled()) {\n-        startTime \u003d Time.now();\n+        startTime \u003d Time.monotonicNow();\n       }\n \n       // if Tracing is on then start a new span for this rpc.\n       // guard it in the if statement to make sure there isn\u0027t\n       // any extra string manipulation.\n       Tracer tracer \u003d Tracer.curThreadTracer();\n       TraceScope traceScope \u003d null;\n       if (tracer !\u003d null) {\n         traceScope \u003d tracer.newScope(RpcClientUtil.methodToTraceString(method));\n       }\n       ObjectWritable value;\n       try {\n         value \u003d (ObjectWritable)\n           client.call(RPC.RpcKind.RPC_WRITABLE, new Invocation(method, args),\n             remoteId, fallbackToSimpleAuth);\n       } finally {\n         if (traceScope !\u003d null) traceScope.close();\n       }\n       if (LOG.isDebugEnabled()) {\n-        long callTime \u003d Time.now() - startTime;\n+        long callTime \u003d Time.monotonicNow() - startTime;\n         LOG.debug(\"Call: \" + method.getName() + \" \" + callTime);\n       }\n       return value.get();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public Object invoke(Object proxy, Method method, Object[] args)\n      throws Throwable {\n      long startTime \u003d 0;\n      if (LOG.isDebugEnabled()) {\n        startTime \u003d Time.monotonicNow();\n      }\n\n      // if Tracing is on then start a new span for this rpc.\n      // guard it in the if statement to make sure there isn\u0027t\n      // any extra string manipulation.\n      Tracer tracer \u003d Tracer.curThreadTracer();\n      TraceScope traceScope \u003d null;\n      if (tracer !\u003d null) {\n        traceScope \u003d tracer.newScope(RpcClientUtil.methodToTraceString(method));\n      }\n      ObjectWritable value;\n      try {\n        value \u003d (ObjectWritable)\n          client.call(RPC.RpcKind.RPC_WRITABLE, new Invocation(method, args),\n            remoteId, fallbackToSimpleAuth);\n      } finally {\n        if (traceScope !\u003d null) traceScope.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        long callTime \u003d Time.monotonicNow() - startTime;\n        LOG.debug(\"Call: \" + method.getName() + \" \" + callTime);\n      }\n      return value.get();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
      "extendedDetails": {}
    },
    "93d8a7f2a2d72a1719d02b1ed90678397900b6ed": {
      "type": "Yintroduced",
      "commitMessage": "Revert \"HADOOP-12579. Deprecate and remove WriteableRPCEngine. Contributed by Kai Zheng\"\n\nThis reverts commit a6c79f92d503c664f2d109355b719124f29a30e5.\n",
      "commitDate": "31/05/16 5:41 PM",
      "commitName": "93d8a7f2a2d72a1719d02b1ed90678397900b6ed",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,29 @@\n+    public Object invoke(Object proxy, Method method, Object[] args)\n+      throws Throwable {\n+      long startTime \u003d 0;\n+      if (LOG.isDebugEnabled()) {\n+        startTime \u003d Time.now();\n+      }\n+\n+      // if Tracing is on then start a new span for this rpc.\n+      // guard it in the if statement to make sure there isn\u0027t\n+      // any extra string manipulation.\n+      Tracer tracer \u003d Tracer.curThreadTracer();\n+      TraceScope traceScope \u003d null;\n+      if (tracer !\u003d null) {\n+        traceScope \u003d tracer.newScope(RpcClientUtil.methodToTraceString(method));\n+      }\n+      ObjectWritable value;\n+      try {\n+        value \u003d (ObjectWritable)\n+          client.call(RPC.RpcKind.RPC_WRITABLE, new Invocation(method, args),\n+            remoteId, fallbackToSimpleAuth);\n+      } finally {\n+        if (traceScope !\u003d null) traceScope.close();\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        long callTime \u003d Time.now() - startTime;\n+        LOG.debug(\"Call: \" + method.getName() + \" \" + callTime);\n+      }\n+      return value.get();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public Object invoke(Object proxy, Method method, Object[] args)\n      throws Throwable {\n      long startTime \u003d 0;\n      if (LOG.isDebugEnabled()) {\n        startTime \u003d Time.now();\n      }\n\n      // if Tracing is on then start a new span for this rpc.\n      // guard it in the if statement to make sure there isn\u0027t\n      // any extra string manipulation.\n      Tracer tracer \u003d Tracer.curThreadTracer();\n      TraceScope traceScope \u003d null;\n      if (tracer !\u003d null) {\n        traceScope \u003d tracer.newScope(RpcClientUtil.methodToTraceString(method));\n      }\n      ObjectWritable value;\n      try {\n        value \u003d (ObjectWritable)\n          client.call(RPC.RpcKind.RPC_WRITABLE, new Invocation(method, args),\n            remoteId, fallbackToSimpleAuth);\n      } finally {\n        if (traceScope !\u003d null) traceScope.close();\n      }\n      if (LOG.isDebugEnabled()) {\n        long callTime \u003d Time.now() - startTime;\n        LOG.debug(\"Call: \" + method.getName() + \" \" + callTime);\n      }\n      return value.get();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java"
    }
  }
}