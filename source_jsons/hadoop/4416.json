{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryAliasMapProtocolClientSideTranslatorPB.java",
  "functionName": "init",
  "functionId": "init___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/InMemoryAliasMapProtocolClientSideTranslatorPB.java",
  "functionStartLine": 79,
  "functionEndLine": 129,
  "numCommitsSeen": 6,
  "timeTaken": 1142,
  "changeHistory": [
    "1804a31515e541b3371925aa895589919b54d443"
  ],
  "changeHistoryShort": {
    "1804a31515e541b3371925aa895589919b54d443": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1804a31515e541b3371925aa895589919b54d443": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13536. [PROVIDED Storage] HA for InMemoryAliasMap. Contributed by Virajith Jalaparti.\n",
      "commitDate": "02/07/18 10:48 AM",
      "commitName": "1804a31515e541b3371925aa895589919b54d443",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,51 @@\n+  public static Collection\u003cInMemoryAliasMapProtocol\u003e init(Configuration conf) {\n+    Collection\u003cInMemoryAliasMapProtocol\u003e aliasMaps \u003d new ArrayList\u003c\u003e();\n+    // Try to connect to all configured nameservices as it is not known which\n+    // nameservice supports the AliasMap.\n+    for (String nsId : getNameServiceIds(conf)) {\n+      try {\n+        URI namenodeURI \u003d null;\n+        Configuration newConf \u003d new Configuration(conf);\n+        if (HAUtil.isHAEnabled(conf, nsId)) {\n+          // set the failover-proxy provider if HA is enabled.\n+          newConf.setClass(\n+              addKeySuffixes(PROXY_PROVIDER_KEY_PREFIX, nsId),\n+              InMemoryAliasMapFailoverProxyProvider.class,\n+              AbstractNNFailoverProxyProvider.class);\n+          namenodeURI \u003d new URI(HdfsConstants.HDFS_URI_SCHEME + \"://\" + nsId);\n+        } else {\n+          String key \u003d\n+              addKeySuffixes(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, nsId);\n+          String addr \u003d conf.get(key);\n+          if (addr !\u003d null) {\n+            namenodeURI \u003d createUri(HdfsConstants.HDFS_URI_SCHEME,\n+                NetUtils.createSocketAddr(addr));\n+          }\n+        }\n+        if (namenodeURI !\u003d null) {\n+          aliasMaps.add(NameNodeProxies\n+              .createProxy(newConf, namenodeURI, InMemoryAliasMapProtocol.class)\n+              .getProxy());\n+          LOG.info(\"Connected to InMemoryAliasMap at {}\", namenodeURI);\n+        }\n+      } catch (IOException | URISyntaxException e) {\n+        LOG.warn(\"Exception in connecting to InMemoryAliasMap for nameservice \"\n+            + \"{}: {}\", nsId, e);\n+      }\n+    }\n+    // if a separate AliasMap is configured using\n+    // DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, try to connect it.\n+    if (conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS) !\u003d null) {\n+      URI uri \u003d createUri(\"hdfs\", NetUtils.createSocketAddr(\n+          conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS)));\n+      try {\n+        aliasMaps.add(NameNodeProxies\n+            .createProxy(conf, uri, InMemoryAliasMapProtocol.class).getProxy());\n+        LOG.info(\"Connected to InMemoryAliasMap at {}\", uri);\n+      } catch (IOException e) {\n+        LOG.warn(\"Exception in connecting to InMemoryAliasMap at {}: {}\", uri,\n+            e);\n+      }\n+    }\n+    return aliasMaps;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Collection\u003cInMemoryAliasMapProtocol\u003e init(Configuration conf) {\n    Collection\u003cInMemoryAliasMapProtocol\u003e aliasMaps \u003d new ArrayList\u003c\u003e();\n    // Try to connect to all configured nameservices as it is not known which\n    // nameservice supports the AliasMap.\n    for (String nsId : getNameServiceIds(conf)) {\n      try {\n        URI namenodeURI \u003d null;\n        Configuration newConf \u003d new Configuration(conf);\n        if (HAUtil.isHAEnabled(conf, nsId)) {\n          // set the failover-proxy provider if HA is enabled.\n          newConf.setClass(\n              addKeySuffixes(PROXY_PROVIDER_KEY_PREFIX, nsId),\n              InMemoryAliasMapFailoverProxyProvider.class,\n              AbstractNNFailoverProxyProvider.class);\n          namenodeURI \u003d new URI(HdfsConstants.HDFS_URI_SCHEME + \"://\" + nsId);\n        } else {\n          String key \u003d\n              addKeySuffixes(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, nsId);\n          String addr \u003d conf.get(key);\n          if (addr !\u003d null) {\n            namenodeURI \u003d createUri(HdfsConstants.HDFS_URI_SCHEME,\n                NetUtils.createSocketAddr(addr));\n          }\n        }\n        if (namenodeURI !\u003d null) {\n          aliasMaps.add(NameNodeProxies\n              .createProxy(newConf, namenodeURI, InMemoryAliasMapProtocol.class)\n              .getProxy());\n          LOG.info(\"Connected to InMemoryAliasMap at {}\", namenodeURI);\n        }\n      } catch (IOException | URISyntaxException e) {\n        LOG.warn(\"Exception in connecting to InMemoryAliasMap for nameservice \"\n            + \"{}: {}\", nsId, e);\n      }\n    }\n    // if a separate AliasMap is configured using\n    // DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS, try to connect it.\n    if (conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS) !\u003d null) {\n      URI uri \u003d createUri(\"hdfs\", NetUtils.createSocketAddr(\n          conf.get(DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS)));\n      try {\n        aliasMaps.add(NameNodeProxies\n            .createProxy(conf, uri, InMemoryAliasMapProtocol.class).getProxy());\n        LOG.info(\"Connected to InMemoryAliasMap at {}\", uri);\n      } catch (IOException e) {\n        LOG.warn(\"Exception in connecting to InMemoryAliasMap at {}: {}\", uri,\n            e);\n      }\n    }\n    return aliasMaps;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/InMemoryAliasMapProtocolClientSideTranslatorPB.java"
    }
  }
}