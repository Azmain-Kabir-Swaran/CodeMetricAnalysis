{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetricsSourceAdapter.java",
  "functionName": "updateJmxCache",
  "functionId": "updateJmxCache",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
  "functionStartLine": 160,
  "functionEndLine": 194,
  "numCommitsSeen": 19,
  "timeTaken": 2964,
  "changeHistory": [
    "77ffe7621212be9f462ca37a542a13d167eca4e0",
    "17b1a5482b32dab82225e8233648990bc77674ba",
    "0eb9c60c5bec79f531da8cb3226d7e8b1d7e6639",
    "4356e8a5ef0ac6d11a34704b80ef360a710e623a",
    "b36f29298247f6c5db9f6eff7c2f5177a0fe3de5",
    "692d3b83e4a2d0dfaf5c77acccc6a7a6dd4e272e",
    "74f4d8590de85eaa92c711010bbc0ff0e33ee2e8",
    "4e312a4345f83d66784fe2f997a1b92617c63aa2",
    "fb41615887b6a92a1bf8d34f5fbe7779b090ec15",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "def0ac806025905e79cbfea1dfd8a1d7fe80f08e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de"
  ],
  "changeHistoryShort": {
    "77ffe7621212be9f462ca37a542a13d167eca4e0": "Ybodychange",
    "17b1a5482b32dab82225e8233648990bc77674ba": "Ybodychange",
    "0eb9c60c5bec79f531da8cb3226d7e8b1d7e6639": "Ybodychange",
    "4356e8a5ef0ac6d11a34704b80ef360a710e623a": "Ybodychange",
    "b36f29298247f6c5db9f6eff7c2f5177a0fe3de5": "Ybodychange",
    "692d3b83e4a2d0dfaf5c77acccc6a7a6dd4e272e": "Ybodychange",
    "74f4d8590de85eaa92c711010bbc0ff0e33ee2e8": "Ybodychange",
    "4e312a4345f83d66784fe2f997a1b92617c63aa2": "Ybodychange",
    "fb41615887b6a92a1bf8d34f5fbe7779b090ec15": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "def0ac806025905e79cbfea1dfd8a1d7fe80f08e": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77ffe7621212be9f462ca37a542a13d167eca4e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11361. Fix a race condition in MetricsSourceAdapter.updateJmxCache. Contributed by Vinayakumar B, Yongjun Zhang, and Brahma Reddy Battula. (ozawa)\n",
      "commitDate": "13/07/16 5:28 AM",
      "commitName": "77ffe7621212be9f462ca37a542a13d167eca4e0",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/11/15 11:12 AM",
      "commitNameOld": "17b1a5482b32dab82225e8233648990bc77674ba",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 231.72,
      "commitsBetweenForRepo": 1587,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         // lastRecs might have been set to an object already by another thread.\n         // Track the fact that lastRecs has been reset once to make sure refresh\n         // is correctly triggered.\n         if (lastRecsCleared) {\n           getAllMetrics \u003d true;\n           lastRecsCleared \u003d false;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n+    // HADOOP-11361: Release lock here for avoid deadlock between\n+    // MetricsSystemImpl\u0027s lock and MetricsSourceAdapter\u0027s lock.\n+    Iterable\u003cMetricsRecordImpl\u003e lastRecs \u003d null;\n     if (getAllMetrics) {\n-      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n-      getMetrics(builder, true);\n+      lastRecs \u003d getMetrics(new MetricsCollectorImpl(), true);\n     }\n \n-    synchronized(this) {\n-      updateAttrCache();\n-      if (getAllMetrics) {\n-        updateInfoCache();\n+    synchronized (this) {\n+      if (lastRecs !\u003d null) {\n+        updateAttrCache(lastRecs);\n+        updateInfoCache(lastRecs);\n       }\n       jmxCacheTS \u003d Time.now();\n-      lastRecs \u003d null;  // in case regular interval update is not running\n       lastRecsCleared \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        // lastRecs might have been set to an object already by another thread.\n        // Track the fact that lastRecs has been reset once to make sure refresh\n        // is correctly triggered.\n        if (lastRecsCleared) {\n          getAllMetrics \u003d true;\n          lastRecsCleared \u003d false;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    // HADOOP-11361: Release lock here for avoid deadlock between\n    // MetricsSystemImpl\u0027s lock and MetricsSourceAdapter\u0027s lock.\n    Iterable\u003cMetricsRecordImpl\u003e lastRecs \u003d null;\n    if (getAllMetrics) {\n      lastRecs \u003d getMetrics(new MetricsCollectorImpl(), true);\n    }\n\n    synchronized (this) {\n      if (lastRecs !\u003d null) {\n        updateAttrCache(lastRecs);\n        updateInfoCache(lastRecs);\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecsCleared \u003d true;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "17b1a5482b32dab82225e8233648990bc77674ba": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11361. Fix a race condition in MetricsSourceAdapter.updateJmxCache. Contributed by Brahma Reddy Battula.\"\n\nThis reverts commit 4356e8a5ef0ac6d11a34704b80ef360a710e623a.\n\nConflicts:\n\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java\n",
      "commitDate": "24/11/15 11:12 AM",
      "commitName": "17b1a5482b32dab82225e8233648990bc77674ba",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "09/11/15 11:01 PM",
      "commitNameOld": "0eb9c60c5bec79f531da8cb3226d7e8b1d7e6639",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 14.51,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n-    synchronized (this) {\n+    synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         // lastRecs might have been set to an object already by another thread.\n         // Track the fact that lastRecs has been reset once to make sure refresh\n         // is correctly triggered.\n         if (lastRecsCleared) {\n           getAllMetrics \u003d true;\n           lastRecsCleared \u003d false;\n         }\n-      } else {\n+      }\n+      else {\n         return;\n       }\n+    }\n \n-      if (getAllMetrics) {\n-        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n-        getMetrics(builder, true);\n-      }\n+    if (getAllMetrics) {\n+      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n+      getMetrics(builder, true);\n+    }\n \n+    synchronized(this) {\n       updateAttrCache();\n       if (getAllMetrics) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n-      lastRecs \u003d null; // in case regular interval update is not running\n+      lastRecs \u003d null;  // in case regular interval update is not running\n       lastRecsCleared \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        // lastRecs might have been set to an object already by another thread.\n        // Track the fact that lastRecs has been reset once to make sure refresh\n        // is correctly triggered.\n        if (lastRecsCleared) {\n          getAllMetrics \u003d true;\n          lastRecsCleared \u003d false;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n      lastRecsCleared \u003d true;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "0eb9c60c5bec79f531da8cb3226d7e8b1d7e6639": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12482. Race condition in JMX cache update. (Tony Wu via lei)\n",
      "commitDate": "09/11/15 11:01 PM",
      "commitName": "0eb9c60c5bec79f531da8cb3226d7e8b1d7e6639",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "11/09/15 3:20 PM",
      "commitNameOld": "9538af0e1a7428b8787afa8d5e0b82c1e04adca7",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 59.36,
      "commitsBetweenForRepo": 483,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized (this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n-        if (lastRecs \u003d\u003d null) {\n+        // lastRecs might have been set to an object already by another thread.\n+        // Track the fact that lastRecs has been reset once to make sure refresh\n+        // is correctly triggered.\n+        if (lastRecsCleared) {\n           getAllMetrics \u003d true;\n+          lastRecsCleared \u003d false;\n         }\n       } else {\n         return;\n       }\n \n       if (getAllMetrics) {\n         MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n         getMetrics(builder, true);\n       }\n \n       updateAttrCache();\n       if (getAllMetrics) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null; // in case regular interval update is not running\n+      lastRecsCleared \u003d true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized (this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        // lastRecs might have been set to an object already by another thread.\n        // Track the fact that lastRecs has been reset once to make sure refresh\n        // is correctly triggered.\n        if (lastRecsCleared) {\n          getAllMetrics \u003d true;\n          lastRecsCleared \u003d false;\n        }\n      } else {\n        return;\n      }\n\n      if (getAllMetrics) {\n        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n        getMetrics(builder, true);\n      }\n\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null; // in case regular interval update is not running\n      lastRecsCleared \u003d true;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "4356e8a5ef0ac6d11a34704b80ef360a710e623a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11361. Fix a race condition in MetricsSourceAdapter.updateJmxCache. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "13/05/15 6:20 PM",
      "commitName": "4356e8a5ef0ac6d11a34704b80ef360a710e623a",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "01/12/14 11:07 PM",
      "commitNameOld": "b36f29298247f6c5db9f6eff7c2f5177a0fe3de5",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 162.76,
      "commitsBetweenForRepo": 1403,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n-    synchronized(this) {\n+    synchronized (this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n-      }\n-      else {\n+      } else {\n         return;\n       }\n-    }\n \n-    if (getAllMetrics) {\n-      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n-      getMetrics(builder, true);\n-    }\n+      if (getAllMetrics) {\n+        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n+        getMetrics(builder, true);\n+      }\n \n-    synchronized(this) {\n       updateAttrCache();\n       if (getAllMetrics) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n-      lastRecs \u003d null;  // in case regular interval update is not running\n+      lastRecs \u003d null; // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized (this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      } else {\n        return;\n      }\n\n      if (getAllMetrics) {\n        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n        getMetrics(builder, true);\n      }\n\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null; // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "b36f29298247f6c5db9f6eff7c2f5177a0fe3de5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11301. [optionally] update jmx cache to drop old metrics  (Maysam Yabandeh via stack) -- REAPPLY #2\n",
      "commitDate": "01/12/14 11:07 PM",
      "commitName": "b36f29298247f6c5db9f6eff7c2f5177a0fe3de5",
      "commitAuthor": "stack",
      "commitDateOld": "01/12/14 11:04 PM",
      "commitNameOld": "692d3b83e4a2d0dfaf5c77acccc6a7a6dd4e272e",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n     if (getAllMetrics) {\n       MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n       getMetrics(builder, true);\n     }\n \n     synchronized(this) {\n-      int oldCacheSize \u003d attrCache.size();\n-      int newCacheSize \u003d updateAttrCache();\n-      if (oldCacheSize \u003c newCacheSize) {\n+      updateAttrCache();\n+      if (getAllMetrics) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "692d3b83e4a2d0dfaf5c77acccc6a7a6dd4e272e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack) -- REAPPLY\"\n\nThis reverts commit 74f4d8590de85eaa92c711010bbc0ff0e33ee2e8.\n\nRefers to the wrong issue (HBASE rather than HADOOP)\n",
      "commitDate": "01/12/14 11:04 PM",
      "commitName": "692d3b83e4a2d0dfaf5c77acccc6a7a6dd4e272e",
      "commitAuthor": "stack",
      "commitDateOld": "01/12/14 10:46 PM",
      "commitNameOld": "74f4d8590de85eaa92c711010bbc0ff0e33ee2e8",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n     if (getAllMetrics) {\n       MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n       getMetrics(builder, true);\n     }\n \n     synchronized(this) {\n-      updateAttrCache();\n-      if (getAllMetrics) {\n+      int oldCacheSize \u003d attrCache.size();\n+      int newCacheSize \u003d updateAttrCache();\n+      if (oldCacheSize \u003c newCacheSize) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "74f4d8590de85eaa92c711010bbc0ff0e33ee2e8": {
      "type": "Ybodychange",
      "commitMessage": "HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack) -- REAPPLY\n",
      "commitDate": "01/12/14 10:46 PM",
      "commitName": "74f4d8590de85eaa92c711010bbc0ff0e33ee2e8",
      "commitAuthor": "stack",
      "commitDateOld": "01/12/14 10:41 PM",
      "commitNameOld": "4e312a4345f83d66784fe2f997a1b92617c63aa2",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n     if (getAllMetrics) {\n       MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n       getMetrics(builder, true);\n     }\n \n     synchronized(this) {\n-      int oldCacheSize \u003d attrCache.size();\n-      int newCacheSize \u003d updateAttrCache();\n-      if (oldCacheSize \u003c newCacheSize) {\n+      updateAttrCache();\n+      if (getAllMetrics) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "4e312a4345f83d66784fe2f997a1b92617c63aa2": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack)\"\n\nThis reverts commit fb41615887b6a92a1bf8d34f5fbe7779b090ec15.\n\nReverting because I over-changed CHANGES.txt white-space.\n",
      "commitDate": "01/12/14 10:41 PM",
      "commitName": "4e312a4345f83d66784fe2f997a1b92617c63aa2",
      "commitAuthor": "stack",
      "commitDateOld": "01/12/14 10:34 PM",
      "commitNameOld": "fb41615887b6a92a1bf8d34f5fbe7779b090ec15",
      "commitAuthorOld": "stack",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n     if (getAllMetrics) {\n       MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n       getMetrics(builder, true);\n     }\n \n     synchronized(this) {\n-      updateAttrCache();\n-      if (getAllMetrics) {\n+      int oldCacheSize \u003d attrCache.size();\n+      int newCacheSize \u003d updateAttrCache();\n+      if (oldCacheSize \u003c newCacheSize) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "fb41615887b6a92a1bf8d34f5fbe7779b090ec15": {
      "type": "Ybodychange",
      "commitMessage": "HBASE-11301 [optionally] update jmx cache to drop old metrics (Maysam Yabandeh via stack)\n",
      "commitDate": "01/12/14 10:34 PM",
      "commitName": "fb41615887b6a92a1bf8d34f5fbe7779b090ec15",
      "commitAuthor": "stack",
      "commitDateOld": "20/06/14 11:24 AM",
      "commitNameOld": "f8041b05404dce7088d73f5befc500cb2786c9bd",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 164.51,
      "commitsBetweenForRepo": 1491,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n       if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n         jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n     if (getAllMetrics) {\n       MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n       getMetrics(builder, true);\n     }\n \n     synchronized(this) {\n-      int oldCacheSize \u003d attrCache.size();\n-      int newCacheSize \u003d updateAttrCache();\n-      if (oldCacheSize \u003c newCacheSize) {\n+      updateAttrCache();\n+      if (getAllMetrics) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      updateAttrCache();\n      if (getAllMetrics) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "19/02/12 2:45 PM",
      "commitNameOld": "def0ac806025905e79cbfea1dfd8a1d7fe80f08e",
      "commitAuthorOld": "Matthew Foley",
      "daysBetweenCommits": 143.84,
      "commitsBetweenForRepo": 906,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void updateJmxCache() {\n     boolean getAllMetrics \u003d false;\n     synchronized(this) {\n-      if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n+      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n         // temporarilly advance the expiry while updating the cache\n-        jmxCacheTS \u003d System.currentTimeMillis() + jmxCacheTTL;\n+        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n         if (lastRecs \u003d\u003d null) {\n           getAllMetrics \u003d true;\n         }\n       }\n       else {\n         return;\n       }\n     }\n \n     if (getAllMetrics) {\n       MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n       getMetrics(builder, true);\n     }\n \n     synchronized(this) {\n       int oldCacheSize \u003d attrCache.size();\n       int newCacheSize \u003d updateAttrCache();\n       if (oldCacheSize \u003c newCacheSize) {\n         updateInfoCache();\n       }\n-      jmxCacheTS \u003d System.currentTimeMillis();\n+      jmxCacheTS \u003d Time.now();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (Time.now() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d Time.now() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d Time.now();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {}
    },
    "def0ac806025905e79cbfea1dfd8a1d7fe80f08e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-8050. Deadlock in metrics. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291084 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/12 2:45 PM",
      "commitName": "def0ac806025905e79cbfea1dfd8a1d7fe80f08e",
      "commitAuthor": "Matthew Foley",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-8050. Deadlock in metrics. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291084 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/12 2:45 PM",
          "commitName": "def0ac806025905e79cbfea1dfd8a1d7fe80f08e",
          "commitAuthor": "Matthew Foley",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 178.94,
          "commitsBetweenForRepo": 1136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,30 @@\n-  private synchronized void updateJmxCache() {\n-    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n-      if (lastRecs \u003d\u003d null) {\n-        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n-        getMetrics(builder, true);\n+  private void updateJmxCache() {\n+    boolean getAllMetrics \u003d false;\n+    synchronized(this) {\n+      if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n+        // temporarilly advance the expiry while updating the cache\n+        jmxCacheTS \u003d System.currentTimeMillis() + jmxCacheTTL;\n+        if (lastRecs \u003d\u003d null) {\n+          getAllMetrics \u003d true;\n+        }\n       }\n+      else {\n+        return;\n+      }\n+    }\n+\n+    if (getAllMetrics) {\n+      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n+      getMetrics(builder, true);\n+    }\n+\n+    synchronized(this) {\n       int oldCacheSize \u003d attrCache.size();\n       int newCacheSize \u003d updateAttrCache();\n       if (oldCacheSize \u003c newCacheSize) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d System.currentTimeMillis();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d System.currentTimeMillis() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d System.currentTimeMillis();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8050. Deadlock in metrics. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291084 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/12 2:45 PM",
          "commitName": "def0ac806025905e79cbfea1dfd8a1d7fe80f08e",
          "commitAuthor": "Matthew Foley",
          "commitDateOld": "24/08/11 5:14 PM",
          "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 178.94,
          "commitsBetweenForRepo": 1136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,30 @@\n-  private synchronized void updateJmxCache() {\n-    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n-      if (lastRecs \u003d\u003d null) {\n-        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n-        getMetrics(builder, true);\n+  private void updateJmxCache() {\n+    boolean getAllMetrics \u003d false;\n+    synchronized(this) {\n+      if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n+        // temporarilly advance the expiry while updating the cache\n+        jmxCacheTS \u003d System.currentTimeMillis() + jmxCacheTTL;\n+        if (lastRecs \u003d\u003d null) {\n+          getAllMetrics \u003d true;\n+        }\n       }\n+      else {\n+        return;\n+      }\n+    }\n+\n+    if (getAllMetrics) {\n+      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n+      getMetrics(builder, true);\n+    }\n+\n+    synchronized(this) {\n       int oldCacheSize \u003d attrCache.size();\n       int newCacheSize \u003d updateAttrCache();\n       if (oldCacheSize \u003c newCacheSize) {\n         updateInfoCache();\n       }\n       jmxCacheTS \u003d System.currentTimeMillis();\n       lastRecs \u003d null;  // in case regular interval update is not running\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateJmxCache() {\n    boolean getAllMetrics \u003d false;\n    synchronized(this) {\n      if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n        // temporarilly advance the expiry while updating the cache\n        jmxCacheTS \u003d System.currentTimeMillis() + jmxCacheTTL;\n        if (lastRecs \u003d\u003d null) {\n          getAllMetrics \u003d true;\n        }\n      }\n      else {\n        return;\n      }\n    }\n\n    if (getAllMetrics) {\n      MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n      getMetrics(builder, true);\n    }\n\n    synchronized(this) {\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d System.currentTimeMillis();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void updateJmxCache() {\n    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n      if (lastRecs \u003d\u003d null) {\n        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n        getMetrics(builder, true);\n      }\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d System.currentTimeMillis();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void updateJmxCache() {\n    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n      if (lastRecs \u003d\u003d null) {\n        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n        getMetrics(builder, true);\n      }\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d System.currentTimeMillis();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private synchronized void updateJmxCache() {\n    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n      if (lastRecs \u003d\u003d null) {\n        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n        getMetrics(builder, true);\n      }\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d System.currentTimeMillis();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java"
      }
    },
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6919. New metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 12:28 AM",
      "commitName": "827401a9b1d85fe1f443d21ebe9d917ba23153de",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,15 @@\n+  private synchronized void updateJmxCache() {\n+    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n+      if (lastRecs \u003d\u003d null) {\n+        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n+        getMetrics(builder, true);\n+      }\n+      int oldCacheSize \u003d attrCache.size();\n+      int newCacheSize \u003d updateAttrCache();\n+      if (oldCacheSize \u003c newCacheSize) {\n+        updateInfoCache();\n+      }\n+      jmxCacheTS \u003d System.currentTimeMillis();\n+      lastRecs \u003d null;  // in case regular interval update is not running\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void updateJmxCache() {\n    if (System.currentTimeMillis() - jmxCacheTS \u003e\u003d jmxCacheTTL) {\n      if (lastRecs \u003d\u003d null) {\n        MetricsCollectorImpl builder \u003d new MetricsCollectorImpl();\n        getMetrics(builder, true);\n      }\n      int oldCacheSize \u003d attrCache.size();\n      int newCacheSize \u003d updateAttrCache();\n      if (oldCacheSize \u003c newCacheSize) {\n        updateInfoCache();\n      }\n      jmxCacheTS \u003d System.currentTimeMillis();\n      lastRecs \u003d null;  // in case regular interval update is not running\n    }\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/impl/MetricsSourceAdapter.java"
    }
  }
}