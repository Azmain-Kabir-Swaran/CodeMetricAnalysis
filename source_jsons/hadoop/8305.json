{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeWebHdfsMethods.java",
  "functionName": "put",
  "functionId": "put___ugi-UserGroupInformation(modifiers-final)__delegation-DelegationParam(modifiers-final)__username-UserParam(modifiers-final)__doAsUser-DoAsParam(modifiers-final)__fullpath-String(modifiers-final)__op-PutOpParam(modifiers-final)__destination-DestinationParam(modifiers-final)__owner-OwnerParam(modifiers-final)__group-GroupParam(modifiers-final)__permission-PermissionParam(modifiers-final)__unmaskedPermission-UnmaskedPermissionParam(modifiers-final)__overwrite-OverwriteParam(modifiers-final)__bufferSize-BufferSizeParam(modifiers-final)__replication-ReplicationParam(modifiers-final)__blockSize-BlockSizeParam(modifiers-final)__modificationTime-ModificationTimeParam(modifiers-final)__accessTime-AccessTimeParam(modifiers-final)__renameOptions-RenameOptionSetParam(modifiers-final)__createParent-CreateParentParam(modifiers-final)__delegationTokenArgument-TokenArgumentParam(modifiers-final)__aclPermission-AclPermissionParam(modifiers-final)__xattrName-XAttrNameParam(modifiers-final)__xattrValue-XAttrValueParam(modifiers-final)__xattrSetFlag-XAttrSetFlagParam(modifiers-final)__snapshotName-SnapshotNameParam(modifiers-final)__oldSnapshotName-OldSnapshotNameParam(modifiers-final)__exclDatanodes-ExcludeDatanodesParam(modifiers-final)__createFlagParam-CreateFlagParam(modifiers-final)__noredirectParam-NoRedirectParam(modifiers-final)__policyName-StoragePolicyParam(modifiers-final)__ecpolicy-ECPolicyParam(modifiers-final)__namespaceQuota-NameSpaceQuotaParam(modifiers-final)__storagespaceQuota-StorageSpaceQuotaParam(modifiers-final)__storageType-StorageTypeParam(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
  "functionStartLine": 647,
  "functionEndLine": 872,
  "numCommitsSeen": 722,
  "timeTaken": 16557,
  "changeHistory": [
    "29bd6f3fc3bd78b439d61768885c9f3e7f31a540",
    "221e308cb5ea13053652981ef43144a168bb7e83",
    "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc",
    "892b33e054efdcfb6127f20b7468fb08b0e2b8aa",
    "e7b63baca1e10b28d8b4462fd80537b871951aa3",
    "6e31a090842f8aeedb331b653b075499f8df6c60",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea",
    "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
    "c0829f449337b78ac0b995e216f7324843e74dd2",
    "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
    "6d2332ae375e26d024358c6e75fdb3c68a781a66",
    "30e342a5d32be5efffeb472cce76d4ed43642608",
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
    "752a9d84bb3ff7451667de3cfaa74fe7feeecb83",
    "ac23a55547716df29b3e25c98a113399e184d9d1",
    "44e9d346e974d0d862b2cc7ef406ac9e5a321c17",
    "b46fbd0275bfc7ec16a219c72cff555d912170d7"
  ],
  "changeHistoryShort": {
    "29bd6f3fc3bd78b439d61768885c9f3e7f31a540": "Ymultichange(Yparameterchange,Ybodychange)",
    "221e308cb5ea13053652981ef43144a168bb7e83": "Ybodychange",
    "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc": "Ybodychange",
    "892b33e054efdcfb6127f20b7468fb08b0e2b8aa": "Ymultichange(Yparameterchange,Ybodychange)",
    "e7b63baca1e10b28d8b4462fd80537b871951aa3": "Ybodychange",
    "6e31a090842f8aeedb331b653b075499f8df6c60": "Ymultichange(Ymodifierchange,Ybodychange)",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ybodychange",
    "2ee0d64aceed876f57f09eb9efe1872b6de98d2e": "Ybodychange",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": "Ymultichange(Yparameterchange,Ybodychange)",
    "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a": "Ybodychange",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": "Ymultichange(Yparameterchange,Ybodychange)",
    "c0829f449337b78ac0b995e216f7324843e74dd2": "Ybodychange",
    "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6": "Ymultichange(Yparameterchange,Ybodychange)",
    "6d2332ae375e26d024358c6e75fdb3c68a781a66": "Ybodychange",
    "30e342a5d32be5efffeb472cce76d4ed43642608": "Ymultichange(Yparameterchange,Ybodychange)",
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a": "Ymultichange(Yparameterchange,Ybodychange)",
    "752a9d84bb3ff7451667de3cfaa74fe7feeecb83": "Ybodychange",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "44e9d346e974d0d862b2cc7ef406ac9e5a321c17": "Ymultichange(Yparameterchange,Ybodychange)",
    "b46fbd0275bfc7ec16a219c72cff555d912170d7": "Ybodychange"
  },
  "changeHistoryDetails": {
    "29bd6f3fc3bd78b439d61768885c9f3e7f31a540": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8631. WebHDFS : Support setQuota. Contributed by Chao Sun.\n",
      "commitDate": "28/08/19 11:28 AM",
      "commitName": "29bd6f3fc3bd78b439d61768885c9f3e7f31a540",
      "commitAuthor": "Surendra Singh Lilhore",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8631. WebHDFS : Support setQuota. Contributed by Chao Sun.\n",
          "commitDate": "28/08/19 11:28 AM",
          "commitName": "29bd6f3fc3bd78b439d61768885c9f3e7f31a540",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "13/08/19 4:39 PM",
          "commitNameOld": "da0006fe0473e353ee2d489156248a01aa982dfd",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 14.78,
          "commitsBetweenForRepo": 155,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,212 +1,226 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName,\n-      final ECPolicyParam ecpolicy\n+      final ECPolicyParam ecpolicy,\n+      final NameSpaceQuotaParam namespaceQuota,\n+      final StorageSpaceQuotaParam storagespaceQuota,\n+      final StorageTypeParam storageType\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SATISFYSTORAGEPOLICY:\n       cp.satisfyStoragePolicy(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n \n     case ENABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.enableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     case DISABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.disableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     case SETECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    case SETQUOTA:\n+      validateOpParams(op, namespaceQuota, storagespaceQuota);\n+      cp.setQuota(fullpath, namespaceQuota.getValue(),\n+          storagespaceQuota.getValue(), null);\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    case SETQUOTABYSTORAGETYPE:\n+      validateOpParams(op, storagespaceQuota, storageType);\n+      cp.setQuota(fullpath, HdfsConstants.QUOTA_DONT_SET,\n+          storagespaceQuota.getValue(),\n+          StorageType.parseStorageType(storageType.getValue()));\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName,\n      final ECPolicyParam ecpolicy,\n      final NameSpaceQuotaParam namespaceQuota,\n      final StorageSpaceQuotaParam storagespaceQuota,\n      final StorageTypeParam storageType\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SATISFYSTORAGEPOLICY:\n      cp.satisfyStoragePolicy(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    case ENABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case DISABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETQUOTA:\n      validateOpParams(op, namespaceQuota, storagespaceQuota);\n      cp.setQuota(fullpath, namespaceQuota.getValue(),\n          storagespaceQuota.getValue(), null);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETQUOTABYSTORAGETYPE:\n      validateOpParams(op, storagespaceQuota, storageType);\n      cp.setQuota(fullpath, HdfsConstants.QUOTA_DONT_SET,\n          storagespaceQuota.getValue(),\n          StorageType.parseStorageType(storageType.getValue()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final), policyName-StoragePolicyParam(modifiers-final), ecpolicy-ECPolicyParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final), policyName-StoragePolicyParam(modifiers-final), ecpolicy-ECPolicyParam(modifiers-final), namespaceQuota-NameSpaceQuotaParam(modifiers-final), storagespaceQuota-StorageSpaceQuotaParam(modifiers-final), storageType-StorageTypeParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8631. WebHDFS : Support setQuota. Contributed by Chao Sun.\n",
          "commitDate": "28/08/19 11:28 AM",
          "commitName": "29bd6f3fc3bd78b439d61768885c9f3e7f31a540",
          "commitAuthor": "Surendra Singh Lilhore",
          "commitDateOld": "13/08/19 4:39 PM",
          "commitNameOld": "da0006fe0473e353ee2d489156248a01aa982dfd",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 14.78,
          "commitsBetweenForRepo": 155,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,212 +1,226 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName,\n-      final ECPolicyParam ecpolicy\n+      final ECPolicyParam ecpolicy,\n+      final NameSpaceQuotaParam namespaceQuota,\n+      final StorageSpaceQuotaParam storagespaceQuota,\n+      final StorageTypeParam storageType\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SATISFYSTORAGEPOLICY:\n       cp.satisfyStoragePolicy(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n \n     case ENABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.enableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     case DISABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.disableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     case SETECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    case SETQUOTA:\n+      validateOpParams(op, namespaceQuota, storagespaceQuota);\n+      cp.setQuota(fullpath, namespaceQuota.getValue(),\n+          storagespaceQuota.getValue(), null);\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    case SETQUOTABYSTORAGETYPE:\n+      validateOpParams(op, storagespaceQuota, storageType);\n+      cp.setQuota(fullpath, HdfsConstants.QUOTA_DONT_SET,\n+          storagespaceQuota.getValue(),\n+          StorageType.parseStorageType(storageType.getValue()));\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName,\n      final ECPolicyParam ecpolicy,\n      final NameSpaceQuotaParam namespaceQuota,\n      final StorageSpaceQuotaParam storagespaceQuota,\n      final StorageTypeParam storageType\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SATISFYSTORAGEPOLICY:\n      cp.satisfyStoragePolicy(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    case ENABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case DISABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETQUOTA:\n      validateOpParams(op, namespaceQuota, storagespaceQuota);\n      cp.setQuota(fullpath, namespaceQuota.getValue(),\n          storagespaceQuota.getValue(), null);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETQUOTABYSTORAGETYPE:\n      validateOpParams(op, storagespaceQuota, storageType);\n      cp.setQuota(fullpath, HdfsConstants.QUOTA_DONT_SET,\n          storagespaceQuota.getValue(),\n          StorageType.parseStorageType(storageType.getValue()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "221e308cb5ea13053652981ef43144a168bb7e83": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14153. [SPS] : Add Support for Storage Policy Satisfier in WEBHDFS. Contributed by Ayush Saxena.\n",
      "commitDate": "23/01/19 3:30 AM",
      "commitName": "221e308cb5ea13053652981ef43144a168bb7e83",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "11/12/18 4:29 AM",
      "commitNameOld": "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 42.96,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,208 +1,212 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName,\n       final ECPolicyParam ecpolicy\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case SATISFYSTORAGEPOLICY:\n+      cp.satisfyStoragePolicy(fullpath);\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+\n     case ENABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.enableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     case DISABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.disableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     case SETECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName,\n      final ECPolicyParam ecpolicy\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SATISFYSTORAGEPOLICY:\n      cp.satisfyStoragePolicy(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    case ENABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case DISABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14124. EC : Support EC Commands (set/get/unset EcPolicy) via WebHdfs. Contributed by Ayush Saxena.\n",
      "commitDate": "11/12/18 4:29 AM",
      "commitName": "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "21/11/18 10:43 AM",
      "commitNameOld": "892b33e054efdcfb6127f20b7468fb08b0e2b8aa",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 19.74,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,206 +1,208 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName,\n       final ECPolicyParam ecpolicy\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ENABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.enableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n-\n     case DISABLEECPOLICY:\n       validateOpParams(op, ecpolicy);\n       cp.disableErasureCodingPolicy(ecpolicy.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n-\n+    case SETECPOLICY:\n+      validateOpParams(op, ecpolicy);\n+      cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName,\n      final ECPolicyParam ecpolicy\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ENABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case DISABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    case SETECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.setErasureCodingPolicy(fullpath, ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "892b33e054efdcfb6127f20b7468fb08b0e2b8aa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14064. WEBHDFS: Support Enable/Disable EC Policy. Contributed by Ayush Saxena.\n",
      "commitDate": "21/11/18 10:43 AM",
      "commitName": "892b33e054efdcfb6127f20b7468fb08b0e2b8aa",
      "commitAuthor": "Brahma Reddy Battula",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14064. WEBHDFS: Support Enable/Disable EC Policy. Contributed by Ayush Saxena.\n",
          "commitDate": "21/11/18 10:43 AM",
          "commitName": "892b33e054efdcfb6127f20b7468fb08b0e2b8aa",
          "commitAuthor": "Brahma Reddy Battula",
          "commitDateOld": "12/11/18 11:15 PM",
          "commitNameOld": "e7b63baca1e10b28d8b4462fd80537b871951aa3",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 8.48,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,195 +1,206 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n-      final StoragePolicyParam policyName\n+      final StoragePolicyParam policyName,\n+      final ECPolicyParam ecpolicy\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case ENABLEECPOLICY:\n+      validateOpParams(op, ecpolicy);\n+      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+\n+    case DISABLEECPOLICY:\n+      validateOpParams(op, ecpolicy);\n+      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName,\n      final ECPolicyParam ecpolicy\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ENABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    case DISABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final), policyName-StoragePolicyParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final), policyName-StoragePolicyParam(modifiers-final), ecpolicy-ECPolicyParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14064. WEBHDFS: Support Enable/Disable EC Policy. Contributed by Ayush Saxena.\n",
          "commitDate": "21/11/18 10:43 AM",
          "commitName": "892b33e054efdcfb6127f20b7468fb08b0e2b8aa",
          "commitAuthor": "Brahma Reddy Battula",
          "commitDateOld": "12/11/18 11:15 PM",
          "commitNameOld": "e7b63baca1e10b28d8b4462fd80537b871951aa3",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 8.48,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,195 +1,206 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n-      final StoragePolicyParam policyName\n+      final StoragePolicyParam policyName,\n+      final ECPolicyParam ecpolicy\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case ENABLEECPOLICY:\n+      validateOpParams(op, ecpolicy);\n+      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+\n+    case DISABLEECPOLICY:\n+      validateOpParams(op, ecpolicy);\n+      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName,\n      final ECPolicyParam ecpolicy\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ENABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.enableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    case DISABLEECPOLICY:\n      validateOpParams(op, ecpolicy);\n      cp.disableErasureCodingPolicy(ecpolicy.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "e7b63baca1e10b28d8b4462fd80537b871951aa3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14070. Refactor NameNodeWebHdfsMethods to allow better extensibility. Contributed by CR Hota\n",
      "commitDate": "12/11/18 11:15 PM",
      "commitName": "e7b63baca1e10b28d8b4462fd80537b871951aa3",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "10/10/18 10:11 AM",
      "commitNameOld": "3ead525c71cba068e7abf1c76ad629bfeec10852",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 33.59,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,195 +1,195 @@\n   protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n-      final long expiryTime \u003d cp.renewDelegationToken(token);\n+      final long expiryTime \u003d renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n-      cp.cancelDelegationToken(token);\n+      cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "6e31a090842f8aeedb331b653b075499f8df6c60": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
      "commitDate": "23/03/18 8:32 AM",
      "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
      "commitAuthor": "weiy",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
          "commitDate": "23/03/18 8:32 AM",
          "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
          "commitAuthor": "weiy",
          "commitDateOld": "12/03/18 8:41 PM",
          "commitNameOld": "0355ec20ebeb988679c7192c7024bef7a2a3bced",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 10.49,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,196 +1,195 @@\n-  private Response put(\n+  protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n-\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n-    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n+      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d cp.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cp.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d cp.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cp.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
          "commitDate": "23/03/18 8:32 AM",
          "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
          "commitAuthor": "weiy",
          "commitDateOld": "12/03/18 8:41 PM",
          "commitNameOld": "0355ec20ebeb988679c7192c7024bef7a2a3bced",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 10.49,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,196 +1,195 @@\n-  private Response put(\n+  protected Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n-\n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n-    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n+      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d cp.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cp.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d cp.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cp.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "08/01/18 2:25 PM",
      "commitNameOld": "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
      "commitAuthorOld": "Wei Yan",
      "daysBetweenCommits": 21.04,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,196 +1,196 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n-      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n+      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d cp.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       cp.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       cp.removeXAttr(fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d\n           cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n       cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d cp.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cp.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "2ee0d64aceed876f57f09eb9efe1872b6de98d2e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12945. Switch to ClientProtocol instead of NamenodeProtocols in NamenodeWebHdfsMethods. Contributed by Wei Yan.\n",
      "commitDate": "08/01/18 2:25 PM",
      "commitName": "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
      "commitAuthor": "Wei Yan",
      "commitDateOld": "26/09/17 1:15 PM",
      "commitNameOld": "0da29cbeea40cb7839abcd72566b997962829329",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 104.09,
      "commitsBetweenForRepo": 716,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,194 +1,196 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam,\n       final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n-    final NamenodeProtocols np \u003d getRPCServer(namenode);\n+    final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n-      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n+      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n-      np.createSymlink(destination.getValue(), fullpath,\n+      cp.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n-        final boolean b \u003d np.rename(fullpath, destination.getValue());\n+        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n-        np.rename2(fullpath, destination.getValue(),\n+        cp.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n-      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n+      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n-      np.setOwner(fullpath, owner.getValue(), group.getValue());\n+      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n-      np.setPermission(fullpath, permission.getDirFsPermission());\n+      cp.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n-      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n+      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n-      final long expiryTime \u003d np.renewDelegationToken(token);\n+      final long expiryTime \u003d cp.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n-      np.cancelDelegationToken(token);\n+      cp.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n-      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n+      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n-      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n+      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n-      np.removeDefaultAcl(fullpath);\n+      cp.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n-      np.removeAcl(fullpath);\n+      cp.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n-      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n+      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n-      np.setXAttr(\n+      cp.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n-      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n+      cp.removeXAttr(fullpath,\n+          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n-      np.allowSnapshot(fullpath);\n+      cp.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n-      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n+      String snapshotPath \u003d\n+          cp.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n-      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n+      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n-      np.disallowSnapshot(fullpath);\n+      cp.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETSTORAGEPOLICY: {\n       if (policyName.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Storage policy name is empty.\");\n       }\n-      np.setStoragePolicy(fullpath, policyName.getValue());\n+      cp.setStoragePolicy(fullpath, policyName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d cp.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      cp.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d cp.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        cp.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d cp.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      cp.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      cp.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      cp.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d cp.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      cp.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      cp.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      cp.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      cp.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      cp.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      cp.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      cp.removeXAttr(fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      cp.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d\n          cp.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      cp.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      cp.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      cp.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "07/12/16 3:52 PM",
      "commitName": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "07/12/16 3:52 PM",
          "commitName": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "05/12/16 11:09 PM",
          "commitNameOld": "08a7253bc0eb6c9155457feecb9c5cdc17c3a814",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.7,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,186 +1,194 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n-      final NoRedirectParam noredirectParam\n+      final NoRedirectParam noredirectParam,\n+      final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d np.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case SETSTORAGEPOLICY: {\n+      if (policyName.getValue() \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n+      }\n+      np.setStoragePolicy(fullpath, policyName.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      np.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final), policyName-StoragePolicyParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "07/12/16 3:52 PM",
          "commitName": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "05/12/16 11:09 PM",
          "commitNameOld": "08a7253bc0eb6c9155457feecb9c5cdc17c3a814",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.7,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,186 +1,194 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n-      final NoRedirectParam noredirectParam\n+      final NoRedirectParam noredirectParam,\n+      final StoragePolicyParam policyName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d np.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       validateOpParams(op, destination);\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       validateOpParams(op, aclPermission);\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       validateOpParams(op, aclPermission);\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       validateOpParams(op, xattrName, xattrSetFlag);\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       validateOpParams(op, xattrName);\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       validateOpParams(op, oldSnapshotName, snapshotName);\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case SETSTORAGEPOLICY: {\n+      if (policyName.getValue() \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n+      }\n+      np.setStoragePolicy(fullpath, policyName.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam,\n      final StoragePolicyParam policyName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETSTORAGEPOLICY: {\n      if (policyName.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Storage policy name is empty.\");\n      }\n      np.setStoragePolicy(fullpath, policyName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9337. Validate required params for WebHDFS requests (Contributed by Jagadesh Kiran N)\n",
      "commitDate": "10/11/16 3:21 AM",
      "commitName": "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "04/11/16 6:06 PM",
      "commitNameOld": "d8bab3dcb693b2773ede9a6e4f71ae85ee056f79",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,176 +1,186 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue,\n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, unmaskedPermission,\n           overwrite, bufferSize, replication, blockSize, createParent,\n           createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n       FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n           permission.getDirFsPermission() :\n           FsCreateModes.create(permission.getDirFsPermission(),\n               unmaskedPermission.getDirFsPermission());\n       final boolean b \u003d np.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n+      validateOpParams(op, destination);\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n+      validateOpParams(op, destination);\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n+      validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n+      validateOpParams(op, delegationTokenArgument);\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n+      validateOpParams(op, aclPermission);\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n+      validateOpParams(op, aclPermission);\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n+      validateOpParams(op, aclPermission);\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n+      validateOpParams(op, xattrName, xattrSetFlag);\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n+      validateOpParams(op, xattrName);\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n+      validateOpParams(op, oldSnapshotName, snapshotName);\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue,\n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      validateOpParams(op, destination);\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      validateOpParams(op, destination);\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      validateOpParams(op, delegationTokenArgument);\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      validateOpParams(op, aclPermission);\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      validateOpParams(op, aclPermission);\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      validateOpParams(op, xattrName, xattrSetFlag);\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      validateOpParams(op, xattrName);\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      validateOpParams(op, oldSnapshotName, snapshotName);\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 11:02 AM",
      "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 11:02 AM",
          "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "31/08/16 2:29 PM",
          "commitNameOld": "85bab5fb572194fda38854f1f21c670925058009",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 5.86,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,171 +1,176 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n+      final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n-          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n-          replication, blockSize, createParent, createFlagParam);\n+          exclDatanodes.getValue(), permission, unmaskedPermission,\n+          overwrite, bufferSize, replication, blockSize, createParent,\n+          createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n-      final boolean b \u003d np.mkdirs(fullpath,\n-          permission.getDirFsPermission(), true);\n+      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n+          permission.getDirFsPermission() :\n+          FsCreateModes.create(permission.getDirFsPermission(),\n+              unmaskedPermission.getDirFsPermission());\n+      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), unmaskedPermission-UnmaskedPermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
          "commitDate": "06/09/16 11:02 AM",
          "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "31/08/16 2:29 PM",
          "commitNameOld": "85bab5fb572194fda38854f1f21c670925058009",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 5.86,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,171 +1,176 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n+      final UnmaskedPermissionParam unmaskedPermission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n-          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n-          replication, blockSize, createParent, createFlagParam);\n+          exclDatanodes.getValue(), permission, unmaskedPermission,\n+          overwrite, bufferSize, replication, blockSize, createParent,\n+          createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n-      final boolean b \u003d np.mkdirs(fullpath,\n-          permission.getDirFsPermission(), true);\n+      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n+          permission.getDirFsPermission() :\n+          FsCreateModes.create(permission.getDirFsPermission(),\n+              unmaskedPermission.getDirFsPermission());\n+      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultSymLinkFsPermission(),\n           createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final UnmaskedPermissionParam unmaskedPermission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, unmaskedPermission,\n          overwrite, bufferSize, replication, blockSize, createParent,\n          createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      FsPermission masked \u003d unmaskedPermission.getValue() \u003d\u003d null ?\n          permission.getDirFsPermission() :\n          FsCreateModes.create(permission.getDirFsPermission(),\n              unmaskedPermission.getDirFsPermission());\n      final boolean b \u003d np.mkdirs(fullpath, masked, true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "c0829f449337b78ac0b995e216f7324843e74dd2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6434. Default permission for creating file should be 644 for WebHdfs/HttpFS. Contributed by Wellington Chevreuil.\n",
      "commitDate": "28/06/16 1:55 PM",
      "commitName": "c0829f449337b78ac0b995e216f7324843e74dd2",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "23/05/16 3:52 PM",
      "commitNameOld": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 35.92,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,169 +1,171 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, overwrite, bufferSize,\n           replication, blockSize, createParent, createFlagParam);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case MKDIRS:\n     {\n-      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n+      final boolean b \u003d np.mkdirs(fullpath,\n+          permission.getDirFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n-          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n+          PermissionParam.getDefaultSymLinkFsPermission(),\n+          createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n-      np.setPermission(fullpath, permission.getFsPermission());\n+      np.setPermission(fullpath, permission.getDirFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize, createParent, createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath,\n          permission.getDirFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultSymLinkFsPermission(),\n          createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getDirFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7766. Add a flag to WebHDFS op\u003dCREATE to not respond with a 307 redirect (Ravi Prakash via aw)\n",
      "commitDate": "23/05/16 3:52 PM",
      "commitName": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
      "commitAuthor": "Allen Wittenauer",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7766. Add a flag to WebHDFS op\u003dCREATE to not respond with a 307 redirect (Ravi Prakash via aw)\n",
          "commitDate": "23/05/16 3:52 PM",
          "commitName": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "04/05/16 5:02 PM",
          "commitNameOld": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 18.95,
          "commitsBetweenForRepo": 134,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,162 +1,169 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n-      final CreateFlagParam createFlagParam\n+      final CreateFlagParam createFlagParam,\n+      final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, overwrite, bufferSize,\n           replication, blockSize, createParent, createFlagParam);\n-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n-    } \n+      if(!noredirectParam.getValue()) {\n+        return Response.temporaryRedirect(uri)\n+          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n+      } else {\n+        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+      }\n+    }\n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize, createParent, createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7766. Add a flag to WebHDFS op\u003dCREATE to not respond with a 307 redirect (Ravi Prakash via aw)\n",
          "commitDate": "23/05/16 3:52 PM",
          "commitName": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "04/05/16 5:02 PM",
          "commitNameOld": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 18.95,
          "commitsBetweenForRepo": 134,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,162 +1,169 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n-      final CreateFlagParam createFlagParam\n+      final CreateFlagParam createFlagParam,\n+      final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, overwrite, bufferSize,\n           replication, blockSize, createParent, createFlagParam);\n-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n-    } \n+      if(!noredirectParam.getValue()) {\n+        return Response.temporaryRedirect(uri)\n+          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n+      } else {\n+        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+      }\n+    }\n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case ALLOWSNAPSHOT: {\n       np.allowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case DISALLOWSNAPSHOT: {\n       np.disallowSnapshot(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize, createParent, createFlagParam);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d2332ae375e26d024358c6e75fdb3c68a781a66": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9057. allow/disallow snapshots via webhdfs (Contributed by Brahma Reddy Battula)\n",
      "commitDate": "08/11/15 2:54 AM",
      "commitName": "6d2332ae375e26d024358c6e75fdb3c68a781a66",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "28/10/15 12:54 AM",
      "commitNameOld": "6ff6663f64476eab5612ae9eb409104f44c6e6c7",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 11.13,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,154 +1,162 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n       final ExcludeDatanodesParam exclDatanodes,\n       final CreateFlagParam createFlagParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, overwrite, bufferSize,\n           replication, blockSize, createParent, createFlagParam);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case ALLOWSNAPSHOT: {\n+      np.allowSnapshot(fullpath);\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case DISALLOWSNAPSHOT: {\n+      np.disallowSnapshot(fullpath);\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize, createParent, createFlagParam);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case ALLOWSNAPSHOT: {\n      np.allowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case DISALLOWSNAPSHOT: {\n      np.disallowSnapshot(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "30e342a5d32be5efffeb472cce76d4ed43642608": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8435. Support CreateFlag in WebHDFS. Contributed by Jakob Homan\n",
      "commitDate": "18/08/15 5:32 PM",
      "commitName": "30e342a5d32be5efffeb472cce76d4ed43642608",
      "commitAuthor": "Chris Douglas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8435. Support CreateFlag in WebHDFS. Contributed by Jakob Homan\n",
          "commitDate": "18/08/15 5:32 PM",
          "commitName": "30e342a5d32be5efffeb472cce76d4ed43642608",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "22/06/15 4:30 PM",
          "commitNameOld": "fac4e04dd359a7ff31f286d664fb06f019ec0b58",
          "commitAuthorOld": "Jakob Homan",
          "daysBetweenCommits": 57.04,
          "commitsBetweenForRepo": 336,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,153 +1,154 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n-      final ExcludeDatanodesParam exclDatanodes\n+      final ExcludeDatanodesParam exclDatanodes,\n+      final CreateFlagParam createFlagParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, overwrite, bufferSize,\n-          replication, blockSize);\n+          replication, blockSize, createParent, createFlagParam);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize, createParent, createFlagParam);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final), createFlagParam-CreateFlagParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8435. Support CreateFlag in WebHDFS. Contributed by Jakob Homan\n",
          "commitDate": "18/08/15 5:32 PM",
          "commitName": "30e342a5d32be5efffeb472cce76d4ed43642608",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "22/06/15 4:30 PM",
          "commitNameOld": "fac4e04dd359a7ff31f286d664fb06f019ec0b58",
          "commitAuthorOld": "Jakob Homan",
          "daysBetweenCommits": 57.04,
          "commitsBetweenForRepo": 336,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,153 +1,154 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName,\n-      final ExcludeDatanodesParam exclDatanodes\n+      final ExcludeDatanodesParam exclDatanodes,\n+      final CreateFlagParam createFlagParam\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           exclDatanodes.getValue(), permission, overwrite, bufferSize,\n-          replication, blockSize);\n+          replication, blockSize, createParent, createFlagParam);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes,\n      final CreateFlagParam createFlagParam\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize, createParent, createFlagParam);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 11:20 AM",
      "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 11:20 AM",
          "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "05/06/14 8:48 PM",
          "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 42.61,
          "commitsBetweenForRepo": 298,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,151 +1,153 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n-      final OldSnapshotNameParam oldSnapshotName\n+      final OldSnapshotNameParam oldSnapshotName,\n+      final ExcludeDatanodesParam exclDatanodes\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n-      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n-          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n-          permission, overwrite, bufferSize, replication, blockSize);\n+      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n+          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n+          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n+          replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final), exclDatanodes-ExcludeDatanodesParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 11:20 AM",
          "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "05/06/14 8:48 PM",
          "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 42.61,
          "commitsBetweenForRepo": 298,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,151 +1,153 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n-      final OldSnapshotNameParam oldSnapshotName\n+      final OldSnapshotNameParam oldSnapshotName,\n+      final ExcludeDatanodesParam exclDatanodes\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n-      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n-          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n-          permission, overwrite, bufferSize, replication, blockSize);\n+      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n+          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n+          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n+          replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName,\n      final ExcludeDatanodesParam exclDatanodes\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          exclDatanodes.getValue(), permission, overwrite, bufferSize,\n          replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "752a9d84bb3ff7451667de3cfaa74fe7feeecb83": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6438. DeleteSnapshot should be a DELETE request in WebHdfs. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596772 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/14 12:30 AM",
      "commitName": "752a9d84bb3ff7451667de3cfaa74fe7feeecb83",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/05/14 6:57 AM",
      "commitNameOld": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,155 +1,151 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n       final XAttrNameParam xattrName,\n       final XAttrValueParam xattrValue, \n       final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           permission, overwrite, bufferSize, replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETXATTR: {\n       np.setXAttr(\n           fullpath,\n           XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n               xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEXATTR: {\n       np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n-    case DELETESNAPSHOT: {\n-      np.deleteSnapshot(fullpath, snapshotName.getValue());\n-      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n-    }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          permission, overwrite, bufferSize, replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/05/14 6:57 AM",
          "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "20/05/14 10:33 AM",
          "commitNameOld": "44e9d346e974d0d862b2cc7ef406ac9e5a321c17",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.85,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,141 +1,155 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n+      final XAttrNameParam xattrName,\n+      final XAttrValueParam xattrValue, \n+      final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           permission, overwrite, bufferSize, replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case SETXATTR: {\n+      np.setXAttr(\n+          fullpath,\n+          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n+              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n+    case REMOVEXATTR: {\n+      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case DELETESNAPSHOT: {\n       np.deleteSnapshot(fullpath, snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          permission, overwrite, bufferSize, replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case DELETESNAPSHOT: {\n      np.deleteSnapshot(fullpath, snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), xattrName-XAttrNameParam(modifiers-final), xattrValue-XAttrValueParam(modifiers-final), xattrSetFlag-XAttrSetFlagParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/05/14 6:57 AM",
          "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "20/05/14 10:33 AM",
          "commitNameOld": "44e9d346e974d0d862b2cc7ef406ac9e5a321c17",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.85,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,141 +1,155 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission,\n+      final XAttrNameParam xattrName,\n+      final XAttrValueParam xattrValue, \n+      final XAttrSetFlagParam xattrSetFlag,\n       final SnapshotNameParam snapshotName,\n       final OldSnapshotNameParam oldSnapshotName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           permission, overwrite, bufferSize, replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case SETXATTR: {\n+      np.setXAttr(\n+          fullpath,\n+          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n+              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n+    case REMOVEXATTR: {\n+      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     case CREATESNAPSHOT: {\n       String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n       final String js \u003d JsonUtil.toJsonString(\n           org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case DELETESNAPSHOT: {\n       np.deleteSnapshot(fullpath, snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAMESNAPSHOT: {\n       np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n           snapshotName.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final XAttrNameParam xattrName,\n      final XAttrValueParam xattrValue, \n      final XAttrSetFlagParam xattrSetFlag,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          permission, overwrite, bufferSize, replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETXATTR: {\n      np.setXAttr(\n          fullpath,\n          XAttrHelper.buildXAttr(xattrName.getXAttrName(),\n              xattrValue.getXAttrValue()), xattrSetFlag.getFlag());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEXATTR: {\n      np.removeXAttr(fullpath, XAttrHelper.buildXAttr(xattrName.getXAttrName()));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case DELETESNAPSHOT: {\n      np.deleteSnapshot(fullpath, snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "44e9d346e974d0d862b2cc7ef406ac9e5a321c17": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6432. Add snapshot related APIs to webhdfs. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596334 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/05/14 10:33 AM",
      "commitName": "44e9d346e974d0d862b2cc7ef406ac9e5a321c17",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6432. Add snapshot related APIs to webhdfs. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596334 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/05/14 10:33 AM",
          "commitName": "44e9d346e974d0d862b2cc7ef406ac9e5a321c17",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/04/14 7:00 AM",
          "commitNameOld": "02d0f0ba549e584f98b4606c7cea325c9c1afb6c",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 22.15,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,124 +1,141 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n-      final AclPermissionParam aclPermission\n+      final AclPermissionParam aclPermission,\n+      final SnapshotNameParam snapshotName,\n+      final OldSnapshotNameParam oldSnapshotName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           permission, overwrite, bufferSize, replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case CREATESNAPSHOT: {\n+      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n+      final String js \u003d JsonUtil.toJsonString(\n+          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n+      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+    }\n+    case DELETESNAPSHOT: {\n+      np.deleteSnapshot(fullpath, snapshotName.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n+    case RENAMESNAPSHOT: {\n+      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n+          snapshotName.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          permission, overwrite, bufferSize, replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case DELETESNAPSHOT: {\n      np.deleteSnapshot(fullpath, snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PutOpParam(modifiers-final), destination-DestinationParam(modifiers-final), owner-OwnerParam(modifiers-final), group-GroupParam(modifiers-final), permission-PermissionParam(modifiers-final), overwrite-OverwriteParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), replication-ReplicationParam(modifiers-final), blockSize-BlockSizeParam(modifiers-final), modificationTime-ModificationTimeParam(modifiers-final), accessTime-AccessTimeParam(modifiers-final), renameOptions-RenameOptionSetParam(modifiers-final), createParent-CreateParentParam(modifiers-final), delegationTokenArgument-TokenArgumentParam(modifiers-final), aclPermission-AclPermissionParam(modifiers-final), snapshotName-SnapshotNameParam(modifiers-final), oldSnapshotName-OldSnapshotNameParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6432. Add snapshot related APIs to webhdfs. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596334 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/05/14 10:33 AM",
          "commitName": "44e9d346e974d0d862b2cc7ef406ac9e5a321c17",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "28/04/14 7:00 AM",
          "commitNameOld": "02d0f0ba549e584f98b4606c7cea325c9c1afb6c",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 22.15,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,124 +1,141 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n-      final AclPermissionParam aclPermission\n+      final AclPermissionParam aclPermission,\n+      final SnapshotNameParam snapshotName,\n+      final OldSnapshotNameParam oldSnapshotName\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           permission, overwrite, bufferSize, replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case CREATESNAPSHOT: {\n+      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n+      final String js \u003d JsonUtil.toJsonString(\n+          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n+      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+    }\n+    case DELETESNAPSHOT: {\n+      np.deleteSnapshot(fullpath, snapshotName.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n+    case RENAMESNAPSHOT: {\n+      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n+          snapshotName.getValue());\n+      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission,\n      final SnapshotNameParam snapshotName,\n      final OldSnapshotNameParam oldSnapshotName\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          permission, overwrite, bufferSize, replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CREATESNAPSHOT: {\n      String snapshotPath \u003d np.createSnapshot(fullpath, snapshotName.getValue());\n      final String js \u003d JsonUtil.toJsonString(\n          org.apache.hadoop.fs.Path.class.getSimpleName(), snapshotPath);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case DELETESNAPSHOT: {\n      np.deleteSnapshot(fullpath, snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAMESNAPSHOT: {\n      np.renameSnapshot(fullpath, oldSnapshotName.getValue(),\n          snapshotName.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "b46fbd0275bfc7ec16a219c72cff555d912170d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5857. TestWebHDFS#testNamenodeRestart fails intermittently with NPE. Contributed By Mit Desai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574683 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/14 1:51 PM",
      "commitName": "b46fbd0275bfc7ec16a219c72cff555d912170d7",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/02/14 10:36 AM",
      "commitNameOld": "df6e1ab4916e41810f092474a1f3abd9845d9956",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 8.14,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,124 @@\n   private Response put(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PutOpParam op,\n       final DestinationParam destination,\n       final OwnerParam owner,\n       final GroupParam group,\n       final PermissionParam permission,\n       final OverwriteParam overwrite,\n       final BufferSizeParam bufferSize,\n       final ReplicationParam replication,\n       final BlockSizeParam blockSize,\n       final ModificationTimeParam modificationTime,\n       final AccessTimeParam accessTime,\n       final RenameOptionSetParam renameOptions,\n       final CreateParentParam createParent,\n       final TokenArgumentParam delegationTokenArgument,\n       final AclPermissionParam aclPermission\n       ) throws IOException, URISyntaxException {\n \n     final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n-    final NamenodeProtocols np \u003d namenode.getRpcServer();\n+    final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case CREATE:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n           permission, overwrite, bufferSize, replication, blockSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     } \n     case MKDIRS:\n     {\n       final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CREATESYMLINK:\n     {\n       np.createSymlink(destination.getValue(), fullpath,\n           PermissionParam.getDefaultFsPermission(), createParent.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENAME:\n     {\n       final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n       if (s.isEmpty()) {\n         final boolean b \u003d np.rename(fullpath, destination.getValue());\n         final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       } else {\n         np.rename2(fullpath, destination.getValue(),\n             s.toArray(new Options.Rename[s.size()]));\n         return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n       }\n     }\n     case SETREPLICATION:\n     {\n       final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case SETOWNER:\n     {\n       if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Both owner and group are empty.\");\n       }\n \n       np.setOwner(fullpath, owner.getValue(), group.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETPERMISSION:\n     {\n       np.setPermission(fullpath, permission.getFsPermission());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETTIMES:\n     {\n       np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case RENEWDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       final long expiryTime \u003d np.renewDelegationToken(token);\n       final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case CANCELDELEGATIONTOKEN:\n     {\n       final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n       token.decodeFromUrlString(delegationTokenArgument.getValue());\n       np.cancelDelegationToken(token);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case MODIFYACLENTRIES: {\n       np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACLENTRIES: {\n       np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEDEFAULTACL: {\n       np.removeDefaultAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case REMOVEACL: {\n       np.removeAcl(fullpath);\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case SETACL: {\n       np.setAcl(fullpath, aclPermission.getAclPermission(true));\n       return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response put(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PutOpParam op,\n      final DestinationParam destination,\n      final OwnerParam owner,\n      final GroupParam group,\n      final PermissionParam permission,\n      final OverwriteParam overwrite,\n      final BufferSizeParam bufferSize,\n      final ReplicationParam replication,\n      final BlockSizeParam blockSize,\n      final ModificationTimeParam modificationTime,\n      final AccessTimeParam accessTime,\n      final RenameOptionSetParam renameOptions,\n      final CreateParentParam createParent,\n      final TokenArgumentParam delegationTokenArgument,\n      final AclPermissionParam aclPermission\n      ) throws IOException, URISyntaxException {\n\n    final Configuration conf \u003d (Configuration)context.getAttribute(JspHelper.CURRENT_CONF);\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case CREATE:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, blockSize.getValue(conf),\n          permission, overwrite, bufferSize, replication, blockSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    } \n    case MKDIRS:\n    {\n      final boolean b \u003d np.mkdirs(fullpath, permission.getFsPermission(), true);\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CREATESYMLINK:\n    {\n      np.createSymlink(destination.getValue(), fullpath,\n          PermissionParam.getDefaultFsPermission(), createParent.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENAME:\n    {\n      final EnumSet\u003cOptions.Rename\u003e s \u003d renameOptions.getValue();\n      if (s.isEmpty()) {\n        final boolean b \u003d np.rename(fullpath, destination.getValue());\n        final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      } else {\n        np.rename2(fullpath, destination.getValue(),\n            s.toArray(new Options.Rename[s.size()]));\n        return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n      }\n    }\n    case SETREPLICATION:\n    {\n      final boolean b \u003d np.setReplication(fullpath, replication.getValue(conf));\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case SETOWNER:\n    {\n      if (owner.getValue() \u003d\u003d null \u0026\u0026 group.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Both owner and group are empty.\");\n      }\n\n      np.setOwner(fullpath, owner.getValue(), group.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETPERMISSION:\n    {\n      np.setPermission(fullpath, permission.getFsPermission());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETTIMES:\n    {\n      np.setTimes(fullpath, modificationTime.getValue(), accessTime.getValue());\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case RENEWDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      final long expiryTime \u003d np.renewDelegationToken(token);\n      final String js \u003d JsonUtil.toJsonString(\"long\", expiryTime);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case CANCELDELEGATIONTOKEN:\n    {\n      final Token\u003cDelegationTokenIdentifier\u003e token \u003d new Token\u003cDelegationTokenIdentifier\u003e();\n      token.decodeFromUrlString(delegationTokenArgument.getValue());\n      np.cancelDelegationToken(token);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case MODIFYACLENTRIES: {\n      np.modifyAclEntries(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACLENTRIES: {\n      np.removeAclEntries(fullpath, aclPermission.getAclPermission(false));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEDEFAULTACL: {\n      np.removeDefaultAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case REMOVEACL: {\n      np.removeAcl(fullpath);\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case SETACL: {\n      np.setAcl(fullpath, aclPermission.getAclPermission(true));\n      return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    }
  }
}