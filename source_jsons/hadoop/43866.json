{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceTimelinePublisher.java",
  "functionName": "publishComponents",
  "functionId": "publishComponents___components-List__Component__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
  "functionStartLine": 241,
  "functionEndLine": 281,
  "numCommitsSeen": 13,
  "timeTaken": 3409,
  "changeHistory": [
    "a0bde7d525911680f9e5fb0a939604865eb8e164",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "eed9e3e8f4724ca42e0140754b8fe598b6472747",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "f4216b7bba511cc79439e7dab9f0282d831a16b2"
  ],
  "changeHistoryShort": {
    "a0bde7d525911680f9e5fb0a939604865eb8e164": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "eed9e3e8f4724ca42e0140754b8fe598b6472747": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Ybodychange)",
    "f4216b7bba511cc79439e7dab9f0282d831a16b2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0bde7d525911680f9e5fb0a939604865eb8e164": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7142. Support placement policy in yarn native services. (Gour Saha via wangda)\n\nChange-Id: I166c67a7a34430627c17365f60bac75b6da1b434\n",
      "commitDate": "02/04/18 7:26 AM",
      "commitName": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/11/17 7:58 AM",
      "commitNameOld": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 136.94,
      "commitsBetweenForRepo": 942,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,41 @@\n   private void publishComponents(List\u003cComponent\u003e components) {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     for (Component component : components) {\n       TimelineEntity entity \u003d createComponentEntity(component.getName());\n       entity.setCreatedTime(currentTimeMillis);\n \n       // create info keys\n       Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n       if (component.getArtifact() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n             component.getArtifact().getId());\n         entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n             component.getArtifact().getType().toString());\n       }\n \n       if (component.getResource() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n             component.getResource().getCpus());\n         entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n             component.getResource().getMemory());\n         if (component.getResource().getProfile() !\u003d null) {\n           entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n               component.getResource().getProfile());\n         }\n       }\n \n       if (component.getLaunchCommand() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n             component.getLaunchCommand());\n       }\n       entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n           component.getRunPrivilegedContainer().toString());\n-      if (component.getPlacementPolicy() !\u003d null) {\n-        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n-            component.getPlacementPolicy().getLabel());\n-      }\n       entity.addInfo(entityInfos);\n \n       putEntity(entity);\n \n       // publish container specific configurations\n       publishContainerConf(component.getConfiguration(), component.getName(),\n           ServiceTimelineEntityType.COMPONENT.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      if (component.getArtifact() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n            component.getArtifact().getId());\n        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n            component.getArtifact().getType().toString());\n      }\n\n      if (component.getResource() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n            component.getResource().getCpus());\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n            component.getResource().getMemory());\n        if (component.getResource().getProfile() !\u003d null) {\n          entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n              component.getResource().getProfile());\n        }\n      }\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish container specific configurations\n      publishContainerConf(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private void publishComponents(List\u003cComponent\u003e components) {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     for (Component component : components) {\n       TimelineEntity entity \u003d createComponentEntity(component.getName());\n       entity.setCreatedTime(currentTimeMillis);\n \n       // create info keys\n       Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n       if (component.getArtifact() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n             component.getArtifact().getId());\n         entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n             component.getArtifact().getType().toString());\n       }\n \n       if (component.getResource() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n             component.getResource().getCpus());\n         entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n             component.getResource().getMemory());\n         if (component.getResource().getProfile() !\u003d null) {\n           entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n               component.getResource().getProfile());\n         }\n       }\n \n       if (component.getLaunchCommand() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n             component.getLaunchCommand());\n       }\n       entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n           component.getRunPrivilegedContainer().toString());\n       if (component.getPlacementPolicy() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n             component.getPlacementPolicy().getLabel());\n       }\n       entity.addInfo(entityInfos);\n \n       putEntity(entity);\n \n-      // publish component specific configurations\n-      publishUserConf(component.getConfiguration(), component.getName(),\n+      // publish container specific configurations\n+      publishContainerConf(component.getConfiguration(), component.getName(),\n           ServiceTimelineEntityType.COMPONENT.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      if (component.getArtifact() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n            component.getArtifact().getId());\n        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n            component.getArtifact().getType().toString());\n      }\n\n      if (component.getResource() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n            component.getResource().getCpus());\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n            component.getResource().getMemory());\n        if (component.getResource().getProfile() !\u003d null) {\n          entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n              component.getResource().getProfile());\n        }\n      }\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish container specific configurations\n      publishContainerConf(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "eed9e3e8f4724ca42e0140754b8fe598b6472747": {
      "type": "Ybodychange",
      "commitMessage": "Rebase onto trunk - fix some issues. Contributed by Rohith Sharma K S\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "eed9e3e8f4724ca42e0140754b8fe598b6472747",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,45 @@\n   private void publishComponents(List\u003cComponent\u003e components) {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     for (Component component : components) {\n       TimelineEntity entity \u003d createComponentEntity(component.getName());\n       entity.setCreatedTime(currentTimeMillis);\n \n       // create info keys\n       Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n-          component.getArtifact().getId());\n-      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n-          component.getArtifact().getType().toString());\n-      if (component.getResource().getProfile() !\u003d null) {\n-        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n-            component.getResource().getProfile());\n+      if (component.getArtifact() !\u003d null) {\n+        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n+            component.getArtifact().getId());\n+        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n+            component.getArtifact().getType().toString());\n       }\n-      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n-          component.getResource().getCpus());\n-      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n-          component.getResource().getMemory());\n+\n+      if (component.getResource() !\u003d null) {\n+        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n+            component.getResource().getCpus());\n+        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n+            component.getResource().getMemory());\n+        if (component.getResource().getProfile() !\u003d null) {\n+          entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n+              component.getResource().getProfile());\n+        }\n+      }\n \n       if (component.getLaunchCommand() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n             component.getLaunchCommand());\n       }\n       entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n           component.getRunPrivilegedContainer().toString());\n       if (component.getPlacementPolicy() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n             component.getPlacementPolicy().getLabel());\n       }\n       entity.addInfo(entityInfos);\n \n       putEntity(entity);\n \n       // publish component specific configurations\n       publishUserConf(component.getConfiguration(), component.getName(),\n           ServiceTimelineEntityType.COMPONENT.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      if (component.getArtifact() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n            component.getArtifact().getId());\n        entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n            component.getArtifact().getType().toString());\n      }\n\n      if (component.getResource() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n            component.getResource().getCpus());\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n            component.getResource().getMemory());\n        if (component.getResource().getProfile() !\u003d null) {\n          entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n              component.getResource().getProfile());\n        }\n      }\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish component specific configurations\n      publishUserConf(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n          component.getArtifact().getId());\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n          component.getArtifact().getType().toString());\n      if (component.getResource().getProfile() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n            component.getResource().getProfile());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n          component.getResource().getCpus());\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n          component.getResource().getMemory());\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish component specific configurations\n      publishUserConf(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   private void publishComponents(List\u003cComponent\u003e components) {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     for (Component component : components) {\n       TimelineEntity entity \u003d createComponentEntity(component.getName());\n       entity.setCreatedTime(currentTimeMillis);\n \n       // create info keys\n       Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n       entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n           component.getArtifact().getId());\n       entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n           component.getArtifact().getType().toString());\n       if (component.getResource().getProfile() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n             component.getResource().getProfile());\n       }\n       entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n           component.getResource().getCpus());\n       entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n           component.getResource().getMemory());\n \n       if (component.getLaunchCommand() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n             component.getLaunchCommand());\n       }\n-      entityInfos.put(ServiceTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n-          component.getUniqueComponentSupport().toString());\n       entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n           component.getRunPrivilegedContainer().toString());\n       if (component.getPlacementPolicy() !\u003d null) {\n         entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n             component.getPlacementPolicy().getLabel());\n       }\n       entity.addInfo(entityInfos);\n \n       putEntity(entity);\n \n       // publish component specific configurations\n-      publishConfigurations(component.getConfiguration(), component.getName(),\n-          ServiceTimelineEntityType.COMPONENT.toString(), false);\n+      publishUserConf(component.getConfiguration(), component.getName(),\n+          ServiceTimelineEntityType.COMPONENT.toString());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n          component.getArtifact().getId());\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n          component.getArtifact().getType().toString());\n      if (component.getResource().getProfile() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n            component.getResource().getProfile());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n          component.getResource().getCpus());\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n          component.getResource().getMemory());\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish component specific configurations\n      publishUserConf(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n   private void publishComponents(List\u003cComponent\u003e components) {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     for (Component component : components) {\n       TimelineEntity entity \u003d createComponentEntity(component.getName());\n       entity.setCreatedTime(currentTimeMillis);\n \n       // create info keys\n       Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_ID,\n+      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n           component.getArtifact().getId());\n-      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_TYPE,\n+      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n           component.getArtifact().getType().toString());\n       if (component.getResource().getProfile() !\u003d null) {\n-        entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_PROFILE,\n+        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n             component.getResource().getProfile());\n       }\n-      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_CPU,\n+      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n           component.getResource().getCpus());\n-      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_MEMORY,\n+      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n           component.getResource().getMemory());\n \n       if (component.getLaunchCommand() !\u003d null) {\n-        entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_COMMAND,\n+        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n             component.getLaunchCommand());\n       }\n-      entityInfos.put(SliderTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n+      entityInfos.put(ServiceTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n           component.getUniqueComponentSupport().toString());\n-      entityInfos.put(SliderTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n+      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n           component.getRunPrivilegedContainer().toString());\n       if (component.getPlacementPolicy() !\u003d null) {\n-        entityInfos.put(SliderTimelineMetricsConstants.PLACEMENT_POLICY,\n+        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n             component.getPlacementPolicy().getLabel());\n       }\n       entity.addInfo(entityInfos);\n \n       putEntity(entity);\n \n       // publish component specific configurations\n       publishConfigurations(component.getConfiguration(), component.getName(),\n-          SliderTimelineEntityType.COMPONENT.toString(), false);\n+          ServiceTimelineEntityType.COMPONENT.toString(), false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n          component.getArtifact().getId());\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n          component.getArtifact().getType().toString());\n      if (component.getResource().getProfile() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n            component.getResource().getProfile());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n          component.getResource().getCpus());\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n          component.getResource().getMemory());\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n          component.getUniqueComponentSupport().toString());\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish component specific configurations\n      publishConfigurations(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString(), false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/server/appmaster/timelineservice/ServiceTimelinePublisher.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,42 @@\n   private void publishComponents(List\u003cComponent\u003e components) {\n     long currentTimeMillis \u003d System.currentTimeMillis();\n     for (Component component : components) {\n       TimelineEntity entity \u003d createComponentEntity(component.getName());\n       entity.setCreatedTime(currentTimeMillis);\n \n       // create info keys\n       Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n-      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_ID,\n+      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n           component.getArtifact().getId());\n-      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_TYPE,\n+      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n           component.getArtifact().getType().toString());\n       if (component.getResource().getProfile() !\u003d null) {\n-        entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_PROFILE,\n+        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n             component.getResource().getProfile());\n       }\n-      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_CPU,\n+      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n           component.getResource().getCpus());\n-      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_MEMORY,\n+      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n           component.getResource().getMemory());\n \n       if (component.getLaunchCommand() !\u003d null) {\n-        entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_COMMAND,\n+        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n             component.getLaunchCommand());\n       }\n-      entityInfos.put(SliderTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n+      entityInfos.put(ServiceTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n           component.getUniqueComponentSupport().toString());\n-      entityInfos.put(SliderTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n+      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n           component.getRunPrivilegedContainer().toString());\n       if (component.getPlacementPolicy() !\u003d null) {\n-        entityInfos.put(SliderTimelineMetricsConstants.PLACEMENT_POLICY,\n+        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n             component.getPlacementPolicy().getLabel());\n       }\n       entity.addInfo(entityInfos);\n \n       putEntity(entity);\n \n       // publish component specific configurations\n       publishConfigurations(component.getConfiguration(), component.getName(),\n-          SliderTimelineEntityType.COMPONENT.toString(), false);\n+          ServiceTimelineEntityType.COMPONENT.toString(), false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID,\n          component.getArtifact().getId());\n      entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE,\n          component.getArtifact().getType().toString());\n      if (component.getResource().getProfile() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE,\n            component.getResource().getProfile());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU,\n          component.getResource().getCpus());\n      entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY,\n          component.getResource().getMemory());\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(ServiceTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n          component.getUniqueComponentSupport().toString());\n      entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(ServiceTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish component specific configurations\n      publishConfigurations(component.getConfiguration(), component.getName(),\n          ServiceTimelineEntityType.COMPONENT.toString(), false);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4216b7bba511cc79439e7dab9f0282d831a16b2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6395. Integrate service app master to write data into ATSv2. Contributed by Rohith Sharma K S\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f4216b7bba511cc79439e7dab9f0282d831a16b2",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,42 @@\n+  private void publishComponents(List\u003cComponent\u003e components) {\n+    long currentTimeMillis \u003d System.currentTimeMillis();\n+    for (Component component : components) {\n+      TimelineEntity entity \u003d createComponentEntity(component.getName());\n+      entity.setCreatedTime(currentTimeMillis);\n+\n+      // create info keys\n+      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n+      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_ID,\n+          component.getArtifact().getId());\n+      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_TYPE,\n+          component.getArtifact().getType().toString());\n+      if (component.getResource().getProfile() !\u003d null) {\n+        entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_PROFILE,\n+            component.getResource().getProfile());\n+      }\n+      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_CPU,\n+          component.getResource().getCpus());\n+      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_MEMORY,\n+          component.getResource().getMemory());\n+\n+      if (component.getLaunchCommand() !\u003d null) {\n+        entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_COMMAND,\n+            component.getLaunchCommand());\n+      }\n+      entityInfos.put(SliderTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n+          component.getUniqueComponentSupport().toString());\n+      entityInfos.put(SliderTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n+          component.getRunPrivilegedContainer().toString());\n+      if (component.getPlacementPolicy() !\u003d null) {\n+        entityInfos.put(SliderTimelineMetricsConstants.PLACEMENT_POLICY,\n+            component.getPlacementPolicy().getLabel());\n+      }\n+      entity.addInfo(entityInfos);\n+\n+      putEntity(entity);\n+\n+      // publish component specific configurations\n+      publishConfigurations(component.getConfiguration(), component.getName(),\n+          SliderTimelineEntityType.COMPONENT.toString(), false);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void publishComponents(List\u003cComponent\u003e components) {\n    long currentTimeMillis \u003d System.currentTimeMillis();\n    for (Component component : components) {\n      TimelineEntity entity \u003d createComponentEntity(component.getName());\n      entity.setCreatedTime(currentTimeMillis);\n\n      // create info keys\n      Map\u003cString, Object\u003e entityInfos \u003d new HashMap\u003cString, Object\u003e();\n      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_ID,\n          component.getArtifact().getId());\n      entityInfos.put(SliderTimelineMetricsConstants.ARTIFACT_TYPE,\n          component.getArtifact().getType().toString());\n      if (component.getResource().getProfile() !\u003d null) {\n        entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_PROFILE,\n            component.getResource().getProfile());\n      }\n      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_CPU,\n          component.getResource().getCpus());\n      entityInfos.put(SliderTimelineMetricsConstants.RESOURCE_MEMORY,\n          component.getResource().getMemory());\n\n      if (component.getLaunchCommand() !\u003d null) {\n        entityInfos.put(SliderTimelineMetricsConstants.LAUNCH_COMMAND,\n            component.getLaunchCommand());\n      }\n      entityInfos.put(SliderTimelineMetricsConstants.UNIQUE_COMPONENT_SUPPORT,\n          component.getUniqueComponentSupport().toString());\n      entityInfos.put(SliderTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER,\n          component.getRunPrivilegedContainer().toString());\n      if (component.getPlacementPolicy() !\u003d null) {\n        entityInfos.put(SliderTimelineMetricsConstants.PLACEMENT_POLICY,\n            component.getPlacementPolicy().getLabel());\n      }\n      entity.addInfo(entityInfos);\n\n      putEntity(entity);\n\n      // publish component specific configurations\n      publishConfigurations(component.getConfiguration(), component.getName(),\n          SliderTimelineEntityType.COMPONENT.toString(), false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/server/appmaster/timelineservice/ServiceTimelinePublisher.java"
    }
  }
}