{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GreedyPlanner.java",
  "functionName": "computeMove",
  "functionId": "computeMove___currentSet-DiskBalancerVolumeSet__lowVolume-DiskBalancerVolume__highVolume-DiskBalancerVolume",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
  "functionStartLine": 168,
  "functionEndLine": 209,
  "numCommitsSeen": 8,
  "timeTaken": 1217,
  "changeHistory": [
    "69489ff2d18a26be9c56d632672079e134f1cd99",
    "bed69d18e6c84583cbe5fd765f068d9faa807617",
    "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8",
    "5724a103161424f4b293ba937f0d0540179f36ac"
  ],
  "changeHistoryShort": {
    "69489ff2d18a26be9c56d632672079e134f1cd99": "Ybodychange",
    "bed69d18e6c84583cbe5fd765f068d9faa807617": "Ybodychange",
    "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8": "Ybodychange",
    "5724a103161424f4b293ba937f0d0540179f36ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69489ff2d18a26be9c56d632672079e134f1cd99": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14119. Improve GreedyPlanner Parameter Logging. Contributed by Beluga Behr.\n",
      "commitDate": "03/12/18 12:55 PM",
      "commitName": "69489ff2d18a26be9c56d632672079e134f1cd99",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "30/10/18 10:43 PM",
      "commitNameOld": "fac9f91b2944cee641049fffcafa6b65e0cf68f2",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 33.63,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private Step computeMove(DiskBalancerVolumeSet currentSet,\n                            DiskBalancerVolume lowVolume,\n                            DiskBalancerVolume highVolume) {\n     // Compute how many bytes we can move. First Compute the maximum that\n     // low Volume Can receive, then compute maximum high volume can give\n     // Then take the minimum of those two numbers that is the bytesToMove.\n \n     long maxLowVolumeCanReceive \u003d (long) (\n         (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n             lowVolume.getUsed());\n \n     // This disk cannot take any more data from any disk.\n     // Remove it from our computation matrix.\n     if (maxLowVolumeCanReceive \u003c\u003d 0) {\n       LOG.debug(\"{} Skipping disk from computation. Maximum data size \" +\n           \"achieved.\", lowVolume.getPath());\n       skipVolume(currentSet, lowVolume);\n     }\n \n     long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n         (long) (currentSet.getIdealUsed() *\n             highVolume.computeEffectiveCapacity());\n     // This volume cannot give any more data, remove it from the\n     // computation matrix\n     if (maxHighVolumeCanGive \u003c\u003d 0) {\n       LOG.debug(\" {} Skipping disk from computation. Minimum data size \" +\n           \"achieved.\", highVolume.getPath());\n       skipVolume(currentSet, highVolume);\n     }\n \n \n     long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n     Step nextStep \u003d null;\n \n     if (bytesToMove \u003e 0) {\n       // Create a new step\n       nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n           bytesToMove, currentSet.getSetID());\n-      LOG.debug(nextStep.toString());\n+      LOG.debug(\"Next Step: {}\", nextStep);\n     }\n     return nextStep;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Step computeMove(DiskBalancerVolumeSet currentSet,\n                           DiskBalancerVolume lowVolume,\n                           DiskBalancerVolume highVolume) {\n    // Compute how many bytes we can move. First Compute the maximum that\n    // low Volume Can receive, then compute maximum high volume can give\n    // Then take the minimum of those two numbers that is the bytesToMove.\n\n    long maxLowVolumeCanReceive \u003d (long) (\n        (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n            lowVolume.getUsed());\n\n    // This disk cannot take any more data from any disk.\n    // Remove it from our computation matrix.\n    if (maxLowVolumeCanReceive \u003c\u003d 0) {\n      LOG.debug(\"{} Skipping disk from computation. Maximum data size \" +\n          \"achieved.\", lowVolume.getPath());\n      skipVolume(currentSet, lowVolume);\n    }\n\n    long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n        (long) (currentSet.getIdealUsed() *\n            highVolume.computeEffectiveCapacity());\n    // This volume cannot give any more data, remove it from the\n    // computation matrix\n    if (maxHighVolumeCanGive \u003c\u003d 0) {\n      LOG.debug(\" {} Skipping disk from computation. Minimum data size \" +\n          \"achieved.\", highVolume.getPath());\n      skipVolume(currentSet, highVolume);\n    }\n\n\n    long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n    Step nextStep \u003d null;\n\n    if (bytesToMove \u003e 0) {\n      // Create a new step\n      nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n          bytesToMove, currentSet.getSetID());\n      LOG.debug(\"Next Step: {}\", nextStep);\n    }\n    return nextStep;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
      "extendedDetails": {}
    },
    "bed69d18e6c84583cbe5fd765f068d9faa807617": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10580. DiskBalancer: Make use of unused methods in GreedyPlanner to print debug info. Contributed by Yiqun Lin\n",
      "commitDate": "15/08/16 12:40 PM",
      "commitName": "bed69d18e6c84583cbe5fd765f068d9faa807617",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:27 PM",
      "commitNameOld": "66fa34c839c89733839cb67878fdfdc4b1f65ab8",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 52.76,
      "commitsBetweenForRepo": 434,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private Step computeMove(DiskBalancerVolumeSet currentSet,\n                            DiskBalancerVolume lowVolume,\n                            DiskBalancerVolume highVolume) {\n     // Compute how many bytes we can move. First Compute the maximum that\n     // low Volume Can receive, then compute maximum high volume can give\n     // Then take the minimum of those two numbers that is the bytesToMove.\n \n     long maxLowVolumeCanReceive \u003d (long) (\n         (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n             lowVolume.getUsed());\n \n     // This disk cannot take any more data from any disk.\n     // Remove it from our computation matrix.\n     if (maxLowVolumeCanReceive \u003c\u003d 0) {\n       LOG.debug(\"{} Skipping disk from computation. Maximum data size \" +\n           \"achieved.\", lowVolume.getPath());\n-      lowVolume.setSkip(true);\n+      skipVolume(currentSet, lowVolume);\n     }\n \n     long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n         (long) (currentSet.getIdealUsed() *\n             highVolume.computeEffectiveCapacity());\n     // This volume cannot give any more data, remove it from the\n     // computation matrix\n     if (maxHighVolumeCanGive \u003c\u003d 0) {\n       LOG.debug(\" {} Skipping disk from computation. Minimum data size \" +\n           \"achieved.\", highVolume.getPath());\n-      highVolume.setSkip(true);\n+      skipVolume(currentSet, highVolume);\n     }\n \n \n     long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n     Step nextStep \u003d null;\n \n     if (bytesToMove \u003e 0) {\n       // Create a new step\n       nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n           bytesToMove, currentSet.getSetID());\n       LOG.debug(nextStep.toString());\n     }\n     return nextStep;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Step computeMove(DiskBalancerVolumeSet currentSet,\n                           DiskBalancerVolume lowVolume,\n                           DiskBalancerVolume highVolume) {\n    // Compute how many bytes we can move. First Compute the maximum that\n    // low Volume Can receive, then compute maximum high volume can give\n    // Then take the minimum of those two numbers that is the bytesToMove.\n\n    long maxLowVolumeCanReceive \u003d (long) (\n        (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n            lowVolume.getUsed());\n\n    // This disk cannot take any more data from any disk.\n    // Remove it from our computation matrix.\n    if (maxLowVolumeCanReceive \u003c\u003d 0) {\n      LOG.debug(\"{} Skipping disk from computation. Maximum data size \" +\n          \"achieved.\", lowVolume.getPath());\n      skipVolume(currentSet, lowVolume);\n    }\n\n    long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n        (long) (currentSet.getIdealUsed() *\n            highVolume.computeEffectiveCapacity());\n    // This volume cannot give any more data, remove it from the\n    // computation matrix\n    if (maxHighVolumeCanGive \u003c\u003d 0) {\n      LOG.debug(\" {} Skipping disk from computation. Minimum data size \" +\n          \"achieved.\", highVolume.getPath());\n      skipVolume(currentSet, highVolume);\n    }\n\n\n    long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n    Step nextStep \u003d null;\n\n    if (bytesToMove \u003e 0) {\n      // Create a new step\n      nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n          bytesToMove, currentSet.getSetID());\n      LOG.debug(nextStep.toString());\n    }\n    return nextStep;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
      "extendedDetails": {}
    },
    "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9817. Use SLF4J in new classes. Contributed by Anu Engineer\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "747227e9dea10ac6b5f601b7cf4dcc418b10d9c8",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:18 PM",
      "commitNameOld": "0501d430e2f6111ad8b65dc36f4a98d94cb9589b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,42 @@\n   private Step computeMove(DiskBalancerVolumeSet currentSet,\n                            DiskBalancerVolume lowVolume,\n                            DiskBalancerVolume highVolume) {\n     // Compute how many bytes we can move. First Compute the maximum that\n     // low Volume Can receive, then compute maximum high volume can give\n     // Then take the minimum of those two numbers that is the bytesToMove.\n \n     long maxLowVolumeCanReceive \u003d (long) (\n         (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n             lowVolume.getUsed());\n \n     // This disk cannot take any more data from any disk.\n     // Remove it from our computation matrix.\n     if (maxLowVolumeCanReceive \u003c\u003d 0) {\n-      LOG.debug(lowVolume.getPath() +\n-          \" Skipping disk from computation. Maximum data size \" +\n-          \"achieved.\");\n+      LOG.debug(\"{} Skipping disk from computation. Maximum data size \" +\n+          \"achieved.\", lowVolume.getPath());\n       lowVolume.setSkip(true);\n     }\n \n     long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n         (long) (currentSet.getIdealUsed() *\n             highVolume.computeEffectiveCapacity());\n     // This volume cannot give any more data, remove it from the\n     // computation matrix\n     if (maxHighVolumeCanGive \u003c\u003d 0) {\n-      LOG.debug(highVolume.getPath() +\n-          \" Skipping disk from computation. Minimum data size \" +\n-          \"achieved.\");\n+      LOG.debug(\" {} Skipping disk from computation. Minimum data size \" +\n+          \"achieved.\", highVolume.getPath());\n       highVolume.setSkip(true);\n     }\n \n \n     long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n     Step nextStep \u003d null;\n \n     if (bytesToMove \u003e 0) {\n       // Create a new step\n       nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n           bytesToMove, currentSet.getSetID());\n       LOG.debug(nextStep.toString());\n     }\n     return nextStep;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Step computeMove(DiskBalancerVolumeSet currentSet,\n                           DiskBalancerVolume lowVolume,\n                           DiskBalancerVolume highVolume) {\n    // Compute how many bytes we can move. First Compute the maximum that\n    // low Volume Can receive, then compute maximum high volume can give\n    // Then take the minimum of those two numbers that is the bytesToMove.\n\n    long maxLowVolumeCanReceive \u003d (long) (\n        (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n            lowVolume.getUsed());\n\n    // This disk cannot take any more data from any disk.\n    // Remove it from our computation matrix.\n    if (maxLowVolumeCanReceive \u003c\u003d 0) {\n      LOG.debug(\"{} Skipping disk from computation. Maximum data size \" +\n          \"achieved.\", lowVolume.getPath());\n      lowVolume.setSkip(true);\n    }\n\n    long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n        (long) (currentSet.getIdealUsed() *\n            highVolume.computeEffectiveCapacity());\n    // This volume cannot give any more data, remove it from the\n    // computation matrix\n    if (maxHighVolumeCanGive \u003c\u003d 0) {\n      LOG.debug(\" {} Skipping disk from computation. Minimum data size \" +\n          \"achieved.\", highVolume.getPath());\n      highVolume.setSkip(true);\n    }\n\n\n    long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n    Step nextStep \u003d null;\n\n    if (bytesToMove \u003e 0) {\n      // Create a new step\n      nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n          bytesToMove, currentSet.getSetID());\n      LOG.debug(nextStep.toString());\n    }\n    return nextStep;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java",
      "extendedDetails": {}
    },
    "5724a103161424f4b293ba937f0d0540179f36ac": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9469. DiskBalancer: Add Planner. (Contributed by Anu Engineer)\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "5724a103161424f4b293ba937f0d0540179f36ac",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,44 @@\n+  private Step computeMove(DiskBalancerVolumeSet currentSet,\n+                           DiskBalancerVolume lowVolume,\n+                           DiskBalancerVolume highVolume) {\n+    // Compute how many bytes we can move. First Compute the maximum that\n+    // low Volume Can receive, then compute maximum high volume can give\n+    // Then take the minimum of those two numbers that is the bytesToMove.\n+\n+    long maxLowVolumeCanReceive \u003d (long) (\n+        (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n+            lowVolume.getUsed());\n+\n+    // This disk cannot take any more data from any disk.\n+    // Remove it from our computation matrix.\n+    if (maxLowVolumeCanReceive \u003c\u003d 0) {\n+      LOG.debug(lowVolume.getPath() +\n+          \" Skipping disk from computation. Maximum data size \" +\n+          \"achieved.\");\n+      lowVolume.setSkip(true);\n+    }\n+\n+    long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n+        (long) (currentSet.getIdealUsed() *\n+            highVolume.computeEffectiveCapacity());\n+    // This volume cannot give any more data, remove it from the\n+    // computation matrix\n+    if (maxHighVolumeCanGive \u003c\u003d 0) {\n+      LOG.debug(highVolume.getPath() +\n+          \" Skipping disk from computation. Minimum data size \" +\n+          \"achieved.\");\n+      highVolume.setSkip(true);\n+    }\n+\n+\n+    long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n+    Step nextStep \u003d null;\n+\n+    if (bytesToMove \u003e 0) {\n+      // Create a new step\n+      nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n+          bytesToMove, currentSet.getSetID());\n+      LOG.debug(nextStep.toString());\n+    }\n+    return nextStep;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Step computeMove(DiskBalancerVolumeSet currentSet,\n                           DiskBalancerVolume lowVolume,\n                           DiskBalancerVolume highVolume) {\n    // Compute how many bytes we can move. First Compute the maximum that\n    // low Volume Can receive, then compute maximum high volume can give\n    // Then take the minimum of those two numbers that is the bytesToMove.\n\n    long maxLowVolumeCanReceive \u003d (long) (\n        (currentSet.getIdealUsed() * lowVolume.computeEffectiveCapacity()) -\n            lowVolume.getUsed());\n\n    // This disk cannot take any more data from any disk.\n    // Remove it from our computation matrix.\n    if (maxLowVolumeCanReceive \u003c\u003d 0) {\n      LOG.debug(lowVolume.getPath() +\n          \" Skipping disk from computation. Maximum data size \" +\n          \"achieved.\");\n      lowVolume.setSkip(true);\n    }\n\n    long maxHighVolumeCanGive \u003d highVolume.getUsed() -\n        (long) (currentSet.getIdealUsed() *\n            highVolume.computeEffectiveCapacity());\n    // This volume cannot give any more data, remove it from the\n    // computation matrix\n    if (maxHighVolumeCanGive \u003c\u003d 0) {\n      LOG.debug(highVolume.getPath() +\n          \" Skipping disk from computation. Minimum data size \" +\n          \"achieved.\");\n      highVolume.setSkip(true);\n    }\n\n\n    long bytesToMove \u003d Math.min(maxLowVolumeCanReceive, maxHighVolumeCanGive);\n    Step nextStep \u003d null;\n\n    if (bytesToMove \u003e 0) {\n      // Create a new step\n      nextStep \u003d new MoveStep(highVolume, currentSet.getIdealUsed(), lowVolume,\n          bytesToMove, currentSet.getSetID());\n      LOG.debug(nextStep.toString());\n    }\n    return nextStep;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/diskbalancer/planner/GreedyPlanner.java"
    }
  }
}