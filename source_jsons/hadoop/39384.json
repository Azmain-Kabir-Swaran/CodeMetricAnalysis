{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GuaranteedOrZeroCapacityOverTimePolicy.java",
  "functionName": "commitQueueManagementChanges",
  "functionId": "commitQueueManagementChanges___queueManagementChanges-List__QueueManagementChange__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
  "functionStartLine": 651,
  "functionEndLine": 705,
  "numCommitsSeen": 7,
  "timeTaken": 4700,
  "changeHistory": [
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "344c335a920e6f32a35ebace0a118a9dc4a22fb7",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c"
  ],
  "changeHistoryShort": {
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f": "Ybodychange",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "344c335a920e6f32a35ebace0a118a9dc4a22fb7": "Ybodychange",
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10154. CS Dynamic Queues cannot be configured with absolute resources. Contributed by Manikandan R.\n",
      "commitDate": "17/04/20 6:21 AM",
      "commitName": "2fe122e322afd35dfae6e45b3e7fdaddd20a411f",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/03/20 4:20 AM",
      "commitNameOld": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,55 @@\n   public void commitQueueManagementChanges(\n       List\u003cQueueManagementChange\u003e queueManagementChanges)\n       throws SchedulerDynamicEditException {\n     writeLock.lock();\n     try {\n       for (QueueManagementChange queueManagementChange :\n           queueManagementChanges) {\n         AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n             queueManagementChange.getUpdatedQueueTemplate();\n         CSQueue queue \u003d queueManagementChange.getQueue();\n         if (!(queue instanceof AutoCreatedLeafQueue)) {\n           throw new SchedulerDynamicEditException(\n               \"Expected queue management change for AutoCreatedLeafQueue. \"\n                   + \"Found \" + queue.getClass().getName());\n         }\n \n         AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n \n         for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n             .getExistingNodeLabels()) {\n           if (updatedQueueTemplate.getQueueCapacities().\n               getCapacity(nodeLabel) \u003e 0) {\n             if (isActive(leafQueue, nodeLabel)) {\n               LOG.debug(\"Queue is already active. Skipping activation : {}\",\n                   leafQueue.getQueuePath());\n             } else{\n               activate(leafQueue, nodeLabel);\n             }\n           } else{\n             if (!isActive(leafQueue, nodeLabel)) {\n               LOG.debug(\"Queue is already de-activated. Skipping \"\n                   + \"de-activation : {}\", leafQueue.getQueuePath());\n             } else{\n+              /**\n+               * While deactivating queues of type ABSOLUTE_RESOURCE, configured\n+               * min resource has to be set based on updated capacity (which is\n+               * again based on updated queue entitlements). Otherwise,\n+               * ParentQueue#calculateEffectiveResourcesAndCapacity calculations\n+               * leads to incorrect results.\n+               */\n+              leafQueue\n+                  .mergeCapacities(updatedQueueTemplate.getQueueCapacities());\n+              leafQueue.getQueueResourceQuotas()\n+                  .setConfiguredMinResource(Resources.multiply(\n+                      this.scheduler.getClusterResource(), updatedQueueTemplate\n+                          .getQueueCapacities().getCapacity(nodeLabel)));\n               deactivate(leafQueue, nodeLabel);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n            .getExistingNodeLabels()) {\n          if (updatedQueueTemplate.getQueueCapacities().\n              getCapacity(nodeLabel) \u003e 0) {\n            if (isActive(leafQueue, nodeLabel)) {\n              LOG.debug(\"Queue is already active. Skipping activation : {}\",\n                  leafQueue.getQueuePath());\n            } else{\n              activate(leafQueue, nodeLabel);\n            }\n          } else{\n            if (!isActive(leafQueue, nodeLabel)) {\n              LOG.debug(\"Queue is already de-activated. Skipping \"\n                  + \"de-activation : {}\", leafQueue.getQueuePath());\n            } else{\n              /**\n               * While deactivating queues of type ABSOLUTE_RESOURCE, configured\n               * min resource has to be set based on updated capacity (which is\n               * again based on updated queue entitlements). Otherwise,\n               * ParentQueue#calculateEffectiveResourcesAndCapacity calculations\n               * leads to incorrect results.\n               */\n              leafQueue\n                  .mergeCapacities(updatedQueueTemplate.getQueueCapacities());\n              leafQueue.getQueueResourceQuotas()\n                  .setConfiguredMinResource(Resources.multiply(\n                      this.scheduler.getClusterResource(), updatedQueueTemplate\n                          .getQueueCapacities().getCapacity(nodeLabel)));\n              deactivate(leafQueue, nodeLabel);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/03/19 10:57 AM",
      "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 372.72,
      "commitsBetweenForRepo": 2179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public void commitQueueManagementChanges(\n       List\u003cQueueManagementChange\u003e queueManagementChanges)\n       throws SchedulerDynamicEditException {\n     writeLock.lock();\n     try {\n       for (QueueManagementChange queueManagementChange :\n           queueManagementChanges) {\n         AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n             queueManagementChange.getUpdatedQueueTemplate();\n         CSQueue queue \u003d queueManagementChange.getQueue();\n         if (!(queue instanceof AutoCreatedLeafQueue)) {\n           throw new SchedulerDynamicEditException(\n               \"Expected queue management change for AutoCreatedLeafQueue. \"\n                   + \"Found \" + queue.getClass().getName());\n         }\n \n         AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n \n         for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n             .getExistingNodeLabels()) {\n           if (updatedQueueTemplate.getQueueCapacities().\n               getCapacity(nodeLabel) \u003e 0) {\n             if (isActive(leafQueue, nodeLabel)) {\n               LOG.debug(\"Queue is already active. Skipping activation : {}\",\n-                  leafQueue.getQueueName());\n+                  leafQueue.getQueuePath());\n             } else{\n               activate(leafQueue, nodeLabel);\n             }\n           } else{\n             if (!isActive(leafQueue, nodeLabel)) {\n               LOG.debug(\"Queue is already de-activated. Skipping \"\n-                  + \"de-activation : {}\", leafQueue.getQueueName());\n+                  + \"de-activation : {}\", leafQueue.getQueuePath());\n             } else{\n               deactivate(leafQueue, nodeLabel);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n            .getExistingNodeLabels()) {\n          if (updatedQueueTemplate.getQueueCapacities().\n              getCapacity(nodeLabel) \u003e 0) {\n            if (isActive(leafQueue, nodeLabel)) {\n              LOG.debug(\"Queue is already active. Skipping activation : {}\",\n                  leafQueue.getQueuePath());\n            } else{\n              activate(leafQueue, nodeLabel);\n            }\n          } else{\n            if (!isActive(leafQueue, nodeLabel)) {\n              LOG.debug(\"Queue is already de-activated. Skipping \"\n                  + \"de-activation : {}\", leafQueue.getQueuePath());\n            } else{\n              deactivate(leafQueue, nodeLabel);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 10.84,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,42 @@\n   public void commitQueueManagementChanges(\n       List\u003cQueueManagementChange\u003e queueManagementChanges)\n       throws SchedulerDynamicEditException {\n     writeLock.lock();\n     try {\n       for (QueueManagementChange queueManagementChange :\n           queueManagementChanges) {\n         AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n             queueManagementChange.getUpdatedQueueTemplate();\n         CSQueue queue \u003d queueManagementChange.getQueue();\n         if (!(queue instanceof AutoCreatedLeafQueue)) {\n           throw new SchedulerDynamicEditException(\n               \"Expected queue management change for AutoCreatedLeafQueue. \"\n                   + \"Found \" + queue.getClass().getName());\n         }\n \n         AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n \n         for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n             .getExistingNodeLabels()) {\n           if (updatedQueueTemplate.getQueueCapacities().\n               getCapacity(nodeLabel) \u003e 0) {\n             if (isActive(leafQueue, nodeLabel)) {\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n-                    + leafQueue.getQueueName());\n-              }\n+              LOG.debug(\"Queue is already active. Skipping activation : {}\",\n+                  leafQueue.getQueueName());\n             } else{\n               activate(leafQueue, nodeLabel);\n             }\n           } else{\n             if (!isActive(leafQueue, nodeLabel)) {\n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Queue is already de-activated. Skipping \"\n-                    + \"de-activation : \" + leafQueue.getQueueName());\n-              }\n+              LOG.debug(\"Queue is already de-activated. Skipping \"\n+                  + \"de-activation : {}\", leafQueue.getQueueName());\n             } else{\n               deactivate(leafQueue, nodeLabel);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n            .getExistingNodeLabels()) {\n          if (updatedQueueTemplate.getQueueCapacities().\n              getCapacity(nodeLabel) \u003e 0) {\n            if (isActive(leafQueue, nodeLabel)) {\n              LOG.debug(\"Queue is already active. Skipping activation : {}\",\n                  leafQueue.getQueueName());\n            } else{\n              activate(leafQueue, nodeLabel);\n            }\n          } else{\n            if (!isActive(leafQueue, nodeLabel)) {\n              LOG.debug(\"Queue is already de-activated. Skipping \"\n                  + \"de-activation : {}\", leafQueue.getQueueName());\n            } else{\n              deactivate(leafQueue, nodeLabel);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "09/08/18 11:04 AM",
      "commitNameOld": "344c335a920e6f32a35ebace0a118a9dc4a22fb7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 210.16,
      "commitsBetweenForRepo": 1721,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void commitQueueManagementChanges(\n       List\u003cQueueManagementChange\u003e queueManagementChanges)\n       throws SchedulerDynamicEditException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       for (QueueManagementChange queueManagementChange :\n           queueManagementChanges) {\n         AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n             queueManagementChange.getUpdatedQueueTemplate();\n         CSQueue queue \u003d queueManagementChange.getQueue();\n         if (!(queue instanceof AutoCreatedLeafQueue)) {\n           throw new SchedulerDynamicEditException(\n               \"Expected queue management change for AutoCreatedLeafQueue. \"\n                   + \"Found \" + queue.getClass().getName());\n         }\n \n         AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n \n         for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n             .getExistingNodeLabels()) {\n           if (updatedQueueTemplate.getQueueCapacities().\n               getCapacity(nodeLabel) \u003e 0) {\n             if (isActive(leafQueue, nodeLabel)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n                     + leafQueue.getQueueName());\n               }\n             } else{\n               activate(leafQueue, nodeLabel);\n             }\n           } else{\n             if (!isActive(leafQueue, nodeLabel)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Queue is already de-activated. Skipping \"\n                     + \"de-activation : \" + leafQueue.getQueueName());\n               }\n             } else{\n               deactivate(leafQueue, nodeLabel);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    writeLock.lock();\n    try {\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n            .getExistingNodeLabels()) {\n          if (updatedQueueTemplate.getQueueCapacities().\n              getCapacity(nodeLabel) \u003e 0) {\n            if (isActive(leafQueue, nodeLabel)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n                    + leafQueue.getQueueName());\n              }\n            } else{\n              activate(leafQueue, nodeLabel);\n            }\n          } else{\n            if (!isActive(leafQueue, nodeLabel)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Queue is already de-activated. Skipping \"\n                    + \"de-activation : \" + leafQueue.getQueueName());\n              }\n            } else{\n              deactivate(leafQueue, nodeLabel);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "344c335a920e6f32a35ebace0a118a9dc4a22fb7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8588. Logging improvements for better debuggability. (Suma Shivaprasad via wangda)\n\nChange-Id: I66aa4b0ec031ae5ce0fae558e2f8cbcbbfebc442\n",
      "commitDate": "09/08/18 11:04 AM",
      "commitName": "344c335a920e6f32a35ebace0a118a9dc4a22fb7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/04/18 8:47 AM",
      "commitNameOld": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 122.09,
      "commitsBetweenForRepo": 1381,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void commitQueueManagementChanges(\n       List\u003cQueueManagementChange\u003e queueManagementChanges)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       for (QueueManagementChange queueManagementChange :\n           queueManagementChanges) {\n         AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n             queueManagementChange.getUpdatedQueueTemplate();\n         CSQueue queue \u003d queueManagementChange.getQueue();\n         if (!(queue instanceof AutoCreatedLeafQueue)) {\n           throw new SchedulerDynamicEditException(\n               \"Expected queue management change for AutoCreatedLeafQueue. \"\n                   + \"Found \" + queue.getClass().getName());\n         }\n \n         AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n \n         for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n             .getExistingNodeLabels()) {\n           if (updatedQueueTemplate.getQueueCapacities().\n               getCapacity(nodeLabel) \u003e 0) {\n             if (isActive(leafQueue, nodeLabel)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n-                    + queue.getQueuePath());\n+                    + leafQueue.getQueueName());\n               }\n             } else{\n               activate(leafQueue, nodeLabel);\n             }\n           } else{\n             if (!isActive(leafQueue, nodeLabel)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Queue is already de-activated. Skipping \"\n-                    + \"de-activation : \" + leafQueue.getQueuePath());\n+                    + \"de-activation : \" + leafQueue.getQueueName());\n               }\n             } else{\n               deactivate(leafQueue, nodeLabel);\n             }\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n            .getExistingNodeLabels()) {\n          if (updatedQueueTemplate.getQueueCapacities().\n              getCapacity(nodeLabel) \u003e 0) {\n            if (isActive(leafQueue, nodeLabel)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n                    + leafQueue.getQueueName());\n              }\n            } else{\n              activate(leafQueue, nodeLabel);\n            }\n          } else{\n            if (!isActive(leafQueue, nodeLabel)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Queue is already de-activated. Skipping \"\n                    + \"de-activation : \" + leafQueue.getQueueName());\n              }\n            } else{\n              deactivate(leafQueue, nodeLabel);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "821b0de4c59156d4a65112de03ba3e7e1c88e309": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7574. Add support for Node Labels on Auto Created Leaf Queue Template. Contributed by Suma Shivaprasad.\n",
      "commitDate": "09/04/18 8:47 AM",
      "commitName": "821b0de4c59156d4a65112de03ba3e7e1c88e309",
      "commitAuthor": "Sunil G",
      "commitDateOld": "08/12/17 3:10 PM",
      "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 121.69,
      "commitsBetweenForRepo": 859,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,46 @@\n   public void commitQueueManagementChanges(\n       List\u003cQueueManagementChange\u003e queueManagementChanges)\n       throws SchedulerDynamicEditException {\n     try {\n       writeLock.lock();\n       for (QueueManagementChange queueManagementChange :\n           queueManagementChanges) {\n         AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n             queueManagementChange.getUpdatedQueueTemplate();\n         CSQueue queue \u003d queueManagementChange.getQueue();\n         if (!(queue instanceof AutoCreatedLeafQueue)) {\n           throw new SchedulerDynamicEditException(\n               \"Expected queue management change for AutoCreatedLeafQueue. \"\n                   + \"Found \" + queue.getClass().getName());\n         }\n \n         AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n \n-        if (updatedQueueTemplate.getQueueCapacities().getCapacity() \u003e 0) {\n-          if (isActive(leafQueue)) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\n-                  \"Queue is already active. Skipping activation : \" + queue\n-                      .getQueuePath());\n+        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n+            .getExistingNodeLabels()) {\n+          if (updatedQueueTemplate.getQueueCapacities().\n+              getCapacity(nodeLabel) \u003e 0) {\n+            if (isActive(leafQueue, nodeLabel)) {\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n+                    + queue.getQueuePath());\n+              }\n+            } else{\n+              activate(leafQueue, nodeLabel);\n             }\n           } else{\n-            activate(leafQueue);\n-          }\n-        } else{\n-          if (!isActive(leafQueue)) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\n-                  \"Queue is already de-activated. \" + \"Skipping de-activation \"\n-                      + \": \" + leafQueue.getQueuePath());\n+            if (!isActive(leafQueue, nodeLabel)) {\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Queue is already de-activated. Skipping \"\n+                    + \"de-activation : \" + leafQueue.getQueuePath());\n+              }\n+            } else{\n+              deactivate(leafQueue, nodeLabel);\n             }\n-          } else{\n-            deactivate(leafQueue);\n           }\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        for (String nodeLabel : updatedQueueTemplate.getQueueCapacities()\n            .getExistingNodeLabels()) {\n          if (updatedQueueTemplate.getQueueCapacities().\n              getCapacity(nodeLabel) \u003e 0) {\n            if (isActive(leafQueue, nodeLabel)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Queue is already active.\" + \" Skipping activation : \"\n                    + queue.getQueuePath());\n              }\n            } else{\n              activate(leafQueue, nodeLabel);\n            }\n          } else{\n            if (!isActive(leafQueue, nodeLabel)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Queue is already de-activated. Skipping \"\n                    + \"de-activation : \" + leafQueue.getQueuePath());\n              }\n            } else{\n              deactivate(leafQueue, nodeLabel);\n            }\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,44 @@\n+  public void commitQueueManagementChanges(\n+      List\u003cQueueManagementChange\u003e queueManagementChanges)\n+      throws SchedulerDynamicEditException {\n+    try {\n+      writeLock.lock();\n+      for (QueueManagementChange queueManagementChange :\n+          queueManagementChanges) {\n+        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n+            queueManagementChange.getUpdatedQueueTemplate();\n+        CSQueue queue \u003d queueManagementChange.getQueue();\n+        if (!(queue instanceof AutoCreatedLeafQueue)) {\n+          throw new SchedulerDynamicEditException(\n+              \"Expected queue management change for AutoCreatedLeafQueue. \"\n+                  + \"Found \" + queue.getClass().getName());\n+        }\n+\n+        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n+\n+        if (updatedQueueTemplate.getQueueCapacities().getCapacity() \u003e 0) {\n+          if (isActive(leafQueue)) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\n+                  \"Queue is already active. Skipping activation : \" + queue\n+                      .getQueuePath());\n+            }\n+          } else{\n+            activate(leafQueue);\n+          }\n+        } else{\n+          if (!isActive(leafQueue)) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\n+                  \"Queue is already de-activated. \" + \"Skipping de-activation \"\n+                      + \": \" + leafQueue.getQueuePath());\n+            }\n+          } else{\n+            deactivate(leafQueue);\n+          }\n+        }\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void commitQueueManagementChanges(\n      List\u003cQueueManagementChange\u003e queueManagementChanges)\n      throws SchedulerDynamicEditException {\n    try {\n      writeLock.lock();\n      for (QueueManagementChange queueManagementChange :\n          queueManagementChanges) {\n        AutoCreatedLeafQueueConfig updatedQueueTemplate \u003d\n            queueManagementChange.getUpdatedQueueTemplate();\n        CSQueue queue \u003d queueManagementChange.getQueue();\n        if (!(queue instanceof AutoCreatedLeafQueue)) {\n          throw new SchedulerDynamicEditException(\n              \"Expected queue management change for AutoCreatedLeafQueue. \"\n                  + \"Found \" + queue.getClass().getName());\n        }\n\n        AutoCreatedLeafQueue leafQueue \u003d (AutoCreatedLeafQueue) queue;\n\n        if (updatedQueueTemplate.getQueueCapacities().getCapacity() \u003e 0) {\n          if (isActive(leafQueue)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                  \"Queue is already active. Skipping activation : \" + queue\n                      .getQueuePath());\n            }\n          } else{\n            activate(leafQueue);\n          }\n        } else{\n          if (!isActive(leafQueue)) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\n                  \"Queue is already de-activated. \" + \"Skipping de-activation \"\n                      + \": \" + leafQueue.getQueuePath());\n            }\n          } else{\n            deactivate(leafQueue);\n          }\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/queuemanagement/GuaranteedOrZeroCapacityOverTimePolicy.java"
    }
  }
}