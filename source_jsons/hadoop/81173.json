{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InnerNodeImpl.java",
  "functionName": "remove",
  "functionId": "remove___n-Node",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/InnerNodeImpl.java",
  "functionStartLine": 181,
  "functionEndLine": 225,
  "numCommitsSeen": 41,
  "timeTaken": 3231,
  "changeHistory": [
    "003ae00693d079799c4dcf02705379bcf34b8c79",
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
    "53bef9c5b98dee87d4ffaf35415bc38e2f876ed8",
    "47a69ec7a5417cb56b75d07184dd6888ff068302",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "003ae00693d079799c4dcf02705379bcf34b8c79": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9": "Ybodychange",
    "53bef9c5b98dee87d4ffaf35415bc38e2f876ed8": "Ybodychange",
    "47a69ec7a5417cb56b75d07184dd6888ff068302": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "003ae00693d079799c4dcf02705379bcf34b8c79": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-11430. Separate class InnerNode from class NetworkTopology and make it extendable. Contributed by Tsz Wo Nicholas Sze\n",
      "commitDate": "21/02/17 3:32 PM",
      "commitName": "003ae00693d079799c4dcf02705379bcf34b8c79",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-11430. Separate class InnerNode from class NetworkTopology and make it extendable. Contributed by Tsz Wo Nicholas Sze\n",
          "commitDate": "21/02/17 3:32 PM",
          "commitName": "003ae00693d079799c4dcf02705379bcf34b8c79",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "21/02/17 2:54 PM",
          "commitNameOld": "8ef7ebbc7112e1868c9b12ff1df4a40fe7afa8af",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-    boolean remove(Node n) {\n-      if (!isAncestor(n)) {\n-        throw new IllegalArgumentException(n.getName()\n-            + \", which is located at \" + n.getNetworkLocation()\n-            + \", is not a descendant of \" + getPath(this));\n-      }\n-      if (isParent(n)) {\n-        // this node is the parent of n; remove n directly\n-        if (childrenMap.containsKey(n.getName())) {\n-          for (int i\u003d0; i\u003cchildren.size(); i++) {\n-            if (children.get(i).getName().equals(n.getName())) {\n-              children.remove(i);\n-              childrenMap.remove(n.getName());\n-              numOfLeaves--;\n-              n.setParent(null);\n-              return true;\n-            }\n+  public boolean remove(Node n) {\n+    if (!isAncestor(n)) {\n+      throw new IllegalArgumentException(n.getName()\n+          + \", which is located at \" + n.getNetworkLocation()\n+          + \", is not a descendant of \" + getPath(this));\n+    }\n+    if (isParent(n)) {\n+      // this node is the parent of n; remove n directly\n+      if (childrenMap.containsKey(n.getName())) {\n+        for (int i\u003d0; i\u003cchildren.size(); i++) {\n+          if (children.get(i).getName().equals(n.getName())) {\n+            children.remove(i);\n+            childrenMap.remove(n.getName());\n+            numOfLeaves--;\n+            n.setParent(null);\n+            return true;\n           }\n         }\n+      }\n+      return false;\n+    } else {\n+      // find the next ancestor node: the parent node\n+      String parentName \u003d getNextAncestorName(n);\n+      InnerNodeImpl parentNode \u003d (InnerNodeImpl)childrenMap.get(parentName);\n+      if (parentNode \u003d\u003d null) {\n         return false;\n-      } else {\n-        // find the next ancestor node: the parent node\n-        String parentName \u003d getNextAncestorName(n);\n-        InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n-        if (parentNode \u003d\u003d null) {\n-          return false;\n-        }\n-        // remove n from the parent node\n-        boolean isRemoved \u003d parentNode.remove(n);\n-        // if the parent node has no children, remove the parent node too\n-        if (isRemoved) {\n-          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n-            for(int i\u003d0; i \u003c children.size(); i++) {\n-              if (children.get(i).getName().equals(parentName)) {\n-                children.remove(i);\n-                childrenMap.remove(parentName);\n-                break;\n-              }\n+      }\n+      // remove n from the parent node\n+      boolean isRemoved \u003d parentNode.remove(n);\n+      // if the parent node has no children, remove the parent node too\n+      if (isRemoved) {\n+        if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n+          for(int i\u003d0; i \u003c children.size(); i++) {\n+            if (children.get(i).getName().equals(parentName)) {\n+              children.remove(i);\n+              childrenMap.remove(parentName);\n+              break;\n             }\n           }\n-          numOfLeaves--;\n         }\n-        return isRemoved;\n+        numOfLeaves--;\n       }\n-    } // end of remove\n\\ No newline at end of file\n+      return isRemoved;\n+    }\n+  } // end of remove\n\\ No newline at end of file\n",
          "actualSource": "  public boolean remove(Node n) {\n    if (!isAncestor(n)) {\n      throw new IllegalArgumentException(n.getName()\n          + \", which is located at \" + n.getNetworkLocation()\n          + \", is not a descendant of \" + getPath(this));\n    }\n    if (isParent(n)) {\n      // this node is the parent of n; remove n directly\n      if (childrenMap.containsKey(n.getName())) {\n        for (int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            childrenMap.remove(n.getName());\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n      }\n      return false;\n    } else {\n      // find the next ancestor node: the parent node\n      String parentName \u003d getNextAncestorName(n);\n      InnerNodeImpl parentNode \u003d (InnerNodeImpl)childrenMap.get(parentName);\n      if (parentNode \u003d\u003d null) {\n        return false;\n      }\n      // remove n from the parent node\n      boolean isRemoved \u003d parentNode.remove(n);\n      // if the parent node has no children, remove the parent node too\n      if (isRemoved) {\n        if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n          for(int i\u003d0; i \u003c children.size(); i++) {\n            if (children.get(i).getName().equals(parentName)) {\n              children.remove(i);\n              childrenMap.remove(parentName);\n              break;\n            }\n          }\n        }\n        numOfLeaves--;\n      }\n      return isRemoved;\n    }\n  } // end of remove",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/InnerNodeImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/InnerNodeImpl.java",
            "oldMethodName": "remove",
            "newMethodName": "remove"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-11430. Separate class InnerNode from class NetworkTopology and make it extendable. Contributed by Tsz Wo Nicholas Sze\n",
          "commitDate": "21/02/17 3:32 PM",
          "commitName": "003ae00693d079799c4dcf02705379bcf34b8c79",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "21/02/17 2:54 PM",
          "commitNameOld": "8ef7ebbc7112e1868c9b12ff1df4a40fe7afa8af",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-    boolean remove(Node n) {\n-      if (!isAncestor(n)) {\n-        throw new IllegalArgumentException(n.getName()\n-            + \", which is located at \" + n.getNetworkLocation()\n-            + \", is not a descendant of \" + getPath(this));\n-      }\n-      if (isParent(n)) {\n-        // this node is the parent of n; remove n directly\n-        if (childrenMap.containsKey(n.getName())) {\n-          for (int i\u003d0; i\u003cchildren.size(); i++) {\n-            if (children.get(i).getName().equals(n.getName())) {\n-              children.remove(i);\n-              childrenMap.remove(n.getName());\n-              numOfLeaves--;\n-              n.setParent(null);\n-              return true;\n-            }\n+  public boolean remove(Node n) {\n+    if (!isAncestor(n)) {\n+      throw new IllegalArgumentException(n.getName()\n+          + \", which is located at \" + n.getNetworkLocation()\n+          + \", is not a descendant of \" + getPath(this));\n+    }\n+    if (isParent(n)) {\n+      // this node is the parent of n; remove n directly\n+      if (childrenMap.containsKey(n.getName())) {\n+        for (int i\u003d0; i\u003cchildren.size(); i++) {\n+          if (children.get(i).getName().equals(n.getName())) {\n+            children.remove(i);\n+            childrenMap.remove(n.getName());\n+            numOfLeaves--;\n+            n.setParent(null);\n+            return true;\n           }\n         }\n+      }\n+      return false;\n+    } else {\n+      // find the next ancestor node: the parent node\n+      String parentName \u003d getNextAncestorName(n);\n+      InnerNodeImpl parentNode \u003d (InnerNodeImpl)childrenMap.get(parentName);\n+      if (parentNode \u003d\u003d null) {\n         return false;\n-      } else {\n-        // find the next ancestor node: the parent node\n-        String parentName \u003d getNextAncestorName(n);\n-        InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n-        if (parentNode \u003d\u003d null) {\n-          return false;\n-        }\n-        // remove n from the parent node\n-        boolean isRemoved \u003d parentNode.remove(n);\n-        // if the parent node has no children, remove the parent node too\n-        if (isRemoved) {\n-          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n-            for(int i\u003d0; i \u003c children.size(); i++) {\n-              if (children.get(i).getName().equals(parentName)) {\n-                children.remove(i);\n-                childrenMap.remove(parentName);\n-                break;\n-              }\n+      }\n+      // remove n from the parent node\n+      boolean isRemoved \u003d parentNode.remove(n);\n+      // if the parent node has no children, remove the parent node too\n+      if (isRemoved) {\n+        if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n+          for(int i\u003d0; i \u003c children.size(); i++) {\n+            if (children.get(i).getName().equals(parentName)) {\n+              children.remove(i);\n+              childrenMap.remove(parentName);\n+              break;\n             }\n           }\n-          numOfLeaves--;\n         }\n-        return isRemoved;\n+        numOfLeaves--;\n       }\n-    } // end of remove\n\\ No newline at end of file\n+      return isRemoved;\n+    }\n+  } // end of remove\n\\ No newline at end of file\n",
          "actualSource": "  public boolean remove(Node n) {\n    if (!isAncestor(n)) {\n      throw new IllegalArgumentException(n.getName()\n          + \", which is located at \" + n.getNetworkLocation()\n          + \", is not a descendant of \" + getPath(this));\n    }\n    if (isParent(n)) {\n      // this node is the parent of n; remove n directly\n      if (childrenMap.containsKey(n.getName())) {\n        for (int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            childrenMap.remove(n.getName());\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n      }\n      return false;\n    } else {\n      // find the next ancestor node: the parent node\n      String parentName \u003d getNextAncestorName(n);\n      InnerNodeImpl parentNode \u003d (InnerNodeImpl)childrenMap.get(parentName);\n      if (parentNode \u003d\u003d null) {\n        return false;\n      }\n      // remove n from the parent node\n      boolean isRemoved \u003d parentNode.remove(n);\n      // if the parent node has no children, remove the parent node too\n      if (isRemoved) {\n        if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n          for(int i\u003d0; i \u003c children.size(); i++) {\n            if (children.get(i).getName().equals(parentName)) {\n              children.remove(i);\n              childrenMap.remove(parentName);\n              break;\n            }\n          }\n        }\n        numOfLeaves--;\n      }\n      return isRemoved;\n    }\n  } // end of remove",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/InnerNodeImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11430. Separate class InnerNode from class NetworkTopology and make it extendable. Contributed by Tsz Wo Nicholas Sze\n",
          "commitDate": "21/02/17 3:32 PM",
          "commitName": "003ae00693d079799c4dcf02705379bcf34b8c79",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "21/02/17 2:54 PM",
          "commitNameOld": "8ef7ebbc7112e1868c9b12ff1df4a40fe7afa8af",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-    boolean remove(Node n) {\n-      if (!isAncestor(n)) {\n-        throw new IllegalArgumentException(n.getName()\n-            + \", which is located at \" + n.getNetworkLocation()\n-            + \", is not a descendant of \" + getPath(this));\n-      }\n-      if (isParent(n)) {\n-        // this node is the parent of n; remove n directly\n-        if (childrenMap.containsKey(n.getName())) {\n-          for (int i\u003d0; i\u003cchildren.size(); i++) {\n-            if (children.get(i).getName().equals(n.getName())) {\n-              children.remove(i);\n-              childrenMap.remove(n.getName());\n-              numOfLeaves--;\n-              n.setParent(null);\n-              return true;\n-            }\n+  public boolean remove(Node n) {\n+    if (!isAncestor(n)) {\n+      throw new IllegalArgumentException(n.getName()\n+          + \", which is located at \" + n.getNetworkLocation()\n+          + \", is not a descendant of \" + getPath(this));\n+    }\n+    if (isParent(n)) {\n+      // this node is the parent of n; remove n directly\n+      if (childrenMap.containsKey(n.getName())) {\n+        for (int i\u003d0; i\u003cchildren.size(); i++) {\n+          if (children.get(i).getName().equals(n.getName())) {\n+            children.remove(i);\n+            childrenMap.remove(n.getName());\n+            numOfLeaves--;\n+            n.setParent(null);\n+            return true;\n           }\n         }\n+      }\n+      return false;\n+    } else {\n+      // find the next ancestor node: the parent node\n+      String parentName \u003d getNextAncestorName(n);\n+      InnerNodeImpl parentNode \u003d (InnerNodeImpl)childrenMap.get(parentName);\n+      if (parentNode \u003d\u003d null) {\n         return false;\n-      } else {\n-        // find the next ancestor node: the parent node\n-        String parentName \u003d getNextAncestorName(n);\n-        InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n-        if (parentNode \u003d\u003d null) {\n-          return false;\n-        }\n-        // remove n from the parent node\n-        boolean isRemoved \u003d parentNode.remove(n);\n-        // if the parent node has no children, remove the parent node too\n-        if (isRemoved) {\n-          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n-            for(int i\u003d0; i \u003c children.size(); i++) {\n-              if (children.get(i).getName().equals(parentName)) {\n-                children.remove(i);\n-                childrenMap.remove(parentName);\n-                break;\n-              }\n+      }\n+      // remove n from the parent node\n+      boolean isRemoved \u003d parentNode.remove(n);\n+      // if the parent node has no children, remove the parent node too\n+      if (isRemoved) {\n+        if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n+          for(int i\u003d0; i \u003c children.size(); i++) {\n+            if (children.get(i).getName().equals(parentName)) {\n+              children.remove(i);\n+              childrenMap.remove(parentName);\n+              break;\n             }\n           }\n-          numOfLeaves--;\n         }\n-        return isRemoved;\n+        numOfLeaves--;\n       }\n-    } // end of remove\n\\ No newline at end of file\n+      return isRemoved;\n+    }\n+  } // end of remove\n\\ No newline at end of file\n",
          "actualSource": "  public boolean remove(Node n) {\n    if (!isAncestor(n)) {\n      throw new IllegalArgumentException(n.getName()\n          + \", which is located at \" + n.getNetworkLocation()\n          + \", is not a descendant of \" + getPath(this));\n    }\n    if (isParent(n)) {\n      // this node is the parent of n; remove n directly\n      if (childrenMap.containsKey(n.getName())) {\n        for (int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            childrenMap.remove(n.getName());\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n      }\n      return false;\n    } else {\n      // find the next ancestor node: the parent node\n      String parentName \u003d getNextAncestorName(n);\n      InnerNodeImpl parentNode \u003d (InnerNodeImpl)childrenMap.get(parentName);\n      if (parentNode \u003d\u003d null) {\n        return false;\n      }\n      // remove n from the parent node\n      boolean isRemoved \u003d parentNode.remove(n);\n      // if the parent node has no children, remove the parent node too\n      if (isRemoved) {\n        if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n          for(int i\u003d0; i \u003c children.size(); i++) {\n            if (children.get(i).getName().equals(parentName)) {\n              children.remove(i);\n              childrenMap.remove(parentName);\n              break;\n            }\n          }\n        }\n        numOfLeaves--;\n      }\n      return isRemoved;\n    }\n  } // end of remove",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/InnerNodeImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13861. Spelling errors in logging and exceptions for code. Contributed by Grant Sohn.\n",
      "commitDate": "05/12/16 11:18 PM",
      "commitName": "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "06/10/16 5:17 AM",
      "commitNameOld": "b90fc70d671481564e468550c770c925f25d7db0",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 60.79,
      "commitsBetweenForRepo": 488,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     boolean remove(Node n) {\n       if (!isAncestor(n)) {\n         throw new IllegalArgumentException(n.getName()\n             + \", which is located at \" + n.getNetworkLocation()\n-            + \", is not a descendent of \" + getPath(this));\n+            + \", is not a descendant of \" + getPath(this));\n       }\n       if (isParent(n)) {\n         // this node is the parent of n; remove n directly\n         if (childrenMap.containsKey(n.getName())) {\n           for (int i\u003d0; i\u003cchildren.size(); i++) {\n             if (children.get(i).getName().equals(n.getName())) {\n               children.remove(i);\n               childrenMap.remove(n.getName());\n               numOfLeaves--;\n               n.setParent(null);\n               return true;\n             }\n           }\n         }\n         return false;\n       } else {\n         // find the next ancestor node: the parent node\n         String parentName \u003d getNextAncestorName(n);\n         InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n         if (parentNode \u003d\u003d null) {\n           return false;\n         }\n         // remove n from the parent node\n         boolean isRemoved \u003d parentNode.remove(n);\n         // if the parent node has no children, remove the parent node too\n         if (isRemoved) {\n           if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n             for(int i\u003d0; i \u003c children.size(); i++) {\n               if (children.get(i).getName().equals(parentName)) {\n                 children.remove(i);\n                 childrenMap.remove(parentName);\n                 break;\n               }\n             }\n           }\n           numOfLeaves--;\n         }\n         return isRemoved;\n       }\n     } // end of remove\n\\ No newline at end of file\n",
      "actualSource": "    boolean remove(Node n) {\n      if (!isAncestor(n)) {\n        throw new IllegalArgumentException(n.getName()\n            + \", which is located at \" + n.getNetworkLocation()\n            + \", is not a descendant of \" + getPath(this));\n      }\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        if (childrenMap.containsKey(n.getName())) {\n          for (int i\u003d0; i\u003cchildren.size(); i++) {\n            if (children.get(i).getName().equals(n.getName())) {\n              children.remove(i);\n              childrenMap.remove(n.getName());\n              numOfLeaves--;\n              n.setParent(null);\n              return true;\n            }\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n        if (parentNode \u003d\u003d null) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            for(int i\u003d0; i \u003c children.size(); i++) {\n              if (children.get(i).getName().equals(parentName)) {\n                children.remove(i);\n                childrenMap.remove(parentName);\n                break;\n              }\n            }\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "53bef9c5b98dee87d4ffaf35415bc38e2f876ed8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12295. Improve NetworkTopology#InnerNode#remove logic. (yliu)\n",
      "commitDate": "13/08/15 1:45 AM",
      "commitName": "53bef9c5b98dee87d4ffaf35415bc38e2f876ed8",
      "commitAuthor": "yliu",
      "commitDateOld": "06/07/15 3:03 PM",
      "commitNameOld": "47a69ec7a5417cb56b75d07184dd6888ff068302",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 37.45,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,45 @@\n     boolean remove(Node n) {\n-      String parent \u003d n.getNetworkLocation();\n-      String currentPath \u003d getPath(this);\n-      if (!isAncestor(n))\n+      if (!isAncestor(n)) {\n         throw new IllegalArgumentException(n.getName()\n-                                           +\", which is located at \"\n-                                           +parent+\", is not a descendent of \"+currentPath);\n+            + \", which is located at \" + n.getNetworkLocation()\n+            + \", is not a descendent of \" + getPath(this));\n+      }\n       if (isParent(n)) {\n         // this node is the parent of n; remove n directly\n         if (childrenMap.containsKey(n.getName())) {\n           for (int i\u003d0; i\u003cchildren.size(); i++) {\n             if (children.get(i).getName().equals(n.getName())) {\n               children.remove(i);\n               childrenMap.remove(n.getName());\n               numOfLeaves--;\n               n.setParent(null);\n               return true;\n             }\n           }\n         }\n         return false;\n       } else {\n         // find the next ancestor node: the parent node\n         String parentName \u003d getNextAncestorName(n);\n-        InnerNode parentNode \u003d null;\n-        int i;\n-        for(i\u003d0; i\u003cchildren.size(); i++) {\n-          if (children.get(i).getName().equals(parentName)) {\n-            parentNode \u003d (InnerNode)children.get(i);\n-            break;\n-          }\n-        }\n-        if (parentNode\u003d\u003dnull) {\n+        InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n+        if (parentNode \u003d\u003d null) {\n           return false;\n         }\n         // remove n from the parent node\n         boolean isRemoved \u003d parentNode.remove(n);\n         // if the parent node has no children, remove the parent node too\n         if (isRemoved) {\n           if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n-            Node prev \u003d children.remove(i);\n-            childrenMap.remove(prev.getName());\n+            for(int i\u003d0; i \u003c children.size(); i++) {\n+              if (children.get(i).getName().equals(parentName)) {\n+                children.remove(i);\n+                childrenMap.remove(parentName);\n+                break;\n+              }\n+            }\n           }\n           numOfLeaves--;\n         }\n         return isRemoved;\n       }\n     } // end of remove\n\\ No newline at end of file\n",
      "actualSource": "    boolean remove(Node n) {\n      if (!isAncestor(n)) {\n        throw new IllegalArgumentException(n.getName()\n            + \", which is located at \" + n.getNetworkLocation()\n            + \", is not a descendent of \" + getPath(this));\n      }\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        if (childrenMap.containsKey(n.getName())) {\n          for (int i\u003d0; i\u003cchildren.size(); i++) {\n            if (children.get(i).getName().equals(n.getName())) {\n              children.remove(i);\n              childrenMap.remove(n.getName());\n              numOfLeaves--;\n              n.setParent(null);\n              return true;\n            }\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d (InnerNode)childrenMap.get(parentName);\n        if (parentNode \u003d\u003d null) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            for(int i\u003d0; i \u003c children.size(); i++) {\n              if (children.get(i).getName().equals(parentName)) {\n                children.remove(i);\n                childrenMap.remove(parentName);\n                break;\n              }\n            }\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "47a69ec7a5417cb56b75d07184dd6888ff068302": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12185. NetworkTopology is not efficient adding/getting/removing nodes. Contributed by Inigo Goiri\n",
      "commitDate": "06/07/15 3:03 PM",
      "commitName": "47a69ec7a5417cb56b75d07184dd6888ff068302",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "02/07/15 9:39 PM",
      "commitNameOld": "e59f6fad6a8849cfab6acbf012f338d9cc7dd63c",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 3.72,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n     boolean remove(Node n) {\n       String parent \u003d n.getNetworkLocation();\n       String currentPath \u003d getPath(this);\n       if (!isAncestor(n))\n         throw new IllegalArgumentException(n.getName()\n                                            +\", which is located at \"\n                                            +parent+\", is not a descendent of \"+currentPath);\n       if (isParent(n)) {\n         // this node is the parent of n; remove n directly\n-        for(int i\u003d0; i\u003cchildren.size(); i++) {\n-          if (children.get(i).getName().equals(n.getName())) {\n-            children.remove(i);\n-            numOfLeaves--;\n-            n.setParent(null);\n-            return true;\n+        if (childrenMap.containsKey(n.getName())) {\n+          for (int i\u003d0; i\u003cchildren.size(); i++) {\n+            if (children.get(i).getName().equals(n.getName())) {\n+              children.remove(i);\n+              childrenMap.remove(n.getName());\n+              numOfLeaves--;\n+              n.setParent(null);\n+              return true;\n+            }\n           }\n         }\n         return false;\n       } else {\n         // find the next ancestor node: the parent node\n         String parentName \u003d getNextAncestorName(n);\n         InnerNode parentNode \u003d null;\n         int i;\n         for(i\u003d0; i\u003cchildren.size(); i++) {\n           if (children.get(i).getName().equals(parentName)) {\n             parentNode \u003d (InnerNode)children.get(i);\n             break;\n           }\n         }\n         if (parentNode\u003d\u003dnull) {\n           return false;\n         }\n         // remove n from the parent node\n         boolean isRemoved \u003d parentNode.remove(n);\n         // if the parent node has no children, remove the parent node too\n         if (isRemoved) {\n           if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n-            children.remove(i);\n+            Node prev \u003d children.remove(i);\n+            childrenMap.remove(prev.getName());\n           }\n           numOfLeaves--;\n         }\n         return isRemoved;\n       }\n     } // end of remove\n\\ No newline at end of file\n",
      "actualSource": "    boolean remove(Node n) {\n      String parent \u003d n.getNetworkLocation();\n      String currentPath \u003d getPath(this);\n      if (!isAncestor(n))\n        throw new IllegalArgumentException(n.getName()\n                                           +\", which is located at \"\n                                           +parent+\", is not a descendent of \"+currentPath);\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        if (childrenMap.containsKey(n.getName())) {\n          for (int i\u003d0; i\u003cchildren.size(); i++) {\n            if (children.get(i).getName().equals(n.getName())) {\n              children.remove(i);\n              childrenMap.remove(n.getName());\n              numOfLeaves--;\n              n.setParent(null);\n              return true;\n            }\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d null;\n        int i;\n        for(i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(parentName)) {\n            parentNode \u003d (InnerNode)children.get(i);\n            break;\n          }\n        }\n        if (parentNode\u003d\u003dnull) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            Node prev \u003d children.remove(i);\n            childrenMap.remove(prev.getName());\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    boolean remove(Node n) {\n      String parent \u003d n.getNetworkLocation();\n      String currentPath \u003d getPath(this);\n      if (!isAncestor(n))\n        throw new IllegalArgumentException(n.getName()\n                                           +\", which is located at \"\n                                           +parent+\", is not a descendent of \"+currentPath);\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        for(int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d null;\n        int i;\n        for(i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(parentName)) {\n            parentNode \u003d (InnerNode)children.get(i);\n            break;\n          }\n        }\n        if (parentNode\u003d\u003dnull) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            children.remove(i);\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    boolean remove(Node n) {\n      String parent \u003d n.getNetworkLocation();\n      String currentPath \u003d getPath(this);\n      if (!isAncestor(n))\n        throw new IllegalArgumentException(n.getName()\n                                           +\", which is located at \"\n                                           +parent+\", is not a descendent of \"+currentPath);\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        for(int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d null;\n        int i;\n        for(i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(parentName)) {\n            parentNode \u003d (InnerNode)children.get(i);\n            break;\n          }\n        }\n        if (parentNode\u003d\u003dnull) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            children.remove(i);\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    boolean remove(Node n) {\n      String parent \u003d n.getNetworkLocation();\n      String currentPath \u003d getPath(this);\n      if (!isAncestor(n))\n        throw new IllegalArgumentException(n.getName()\n                                           +\", which is located at \"\n                                           +parent+\", is not a descendent of \"+currentPath);\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        for(int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d null;\n        int i;\n        for(i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(parentName)) {\n            parentNode \u003d (InnerNode)children.get(i);\n            break;\n          }\n        }\n        if (parentNode\u003d\u003dnull) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            children.remove(i);\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "common/src/java/org/apache/hadoop/net/NetworkTopology.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/NetworkTopology.java",
        "newPath": "common/src/java/org/apache/hadoop/net/NetworkTopology.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,44 @@\n+    boolean remove(Node n) {\n+      String parent \u003d n.getNetworkLocation();\n+      String currentPath \u003d getPath(this);\n+      if (!isAncestor(n))\n+        throw new IllegalArgumentException(n.getName()\n+                                           +\", which is located at \"\n+                                           +parent+\", is not a descendent of \"+currentPath);\n+      if (isParent(n)) {\n+        // this node is the parent of n; remove n directly\n+        for(int i\u003d0; i\u003cchildren.size(); i++) {\n+          if (children.get(i).getName().equals(n.getName())) {\n+            children.remove(i);\n+            numOfLeaves--;\n+            n.setParent(null);\n+            return true;\n+          }\n+        }\n+        return false;\n+      } else {\n+        // find the next ancestor node: the parent node\n+        String parentName \u003d getNextAncestorName(n);\n+        InnerNode parentNode \u003d null;\n+        int i;\n+        for(i\u003d0; i\u003cchildren.size(); i++) {\n+          if (children.get(i).getName().equals(parentName)) {\n+            parentNode \u003d (InnerNode)children.get(i);\n+            break;\n+          }\n+        }\n+        if (parentNode\u003d\u003dnull) {\n+          return false;\n+        }\n+        // remove n from the parent node\n+        boolean isRemoved \u003d parentNode.remove(n);\n+        // if the parent node has no children, remove the parent node too\n+        if (isRemoved) {\n+          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n+            children.remove(i);\n+          }\n+          numOfLeaves--;\n+        }\n+        return isRemoved;\n+      }\n+    } // end of remove\n\\ No newline at end of file\n",
      "actualSource": "    boolean remove(Node n) {\n      String parent \u003d n.getNetworkLocation();\n      String currentPath \u003d getPath(this);\n      if (!isAncestor(n))\n        throw new IllegalArgumentException(n.getName()\n                                           +\", which is located at \"\n                                           +parent+\", is not a descendent of \"+currentPath);\n      if (isParent(n)) {\n        // this node is the parent of n; remove n directly\n        for(int i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(n.getName())) {\n            children.remove(i);\n            numOfLeaves--;\n            n.setParent(null);\n            return true;\n          }\n        }\n        return false;\n      } else {\n        // find the next ancestor node: the parent node\n        String parentName \u003d getNextAncestorName(n);\n        InnerNode parentNode \u003d null;\n        int i;\n        for(i\u003d0; i\u003cchildren.size(); i++) {\n          if (children.get(i).getName().equals(parentName)) {\n            parentNode \u003d (InnerNode)children.get(i);\n            break;\n          }\n        }\n        if (parentNode\u003d\u003dnull) {\n          return false;\n        }\n        // remove n from the parent node\n        boolean isRemoved \u003d parentNode.remove(n);\n        // if the parent node has no children, remove the parent node too\n        if (isRemoved) {\n          if (parentNode.getNumOfChildren() \u003d\u003d 0) {\n            children.remove(i);\n          }\n          numOfLeaves--;\n        }\n        return isRemoved;\n      }\n    } // end of remove",
      "path": "src/java/org/apache/hadoop/net/NetworkTopology.java"
    }
  }
}