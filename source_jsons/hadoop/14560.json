{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSUtil.java",
  "functionName": "getNNServiceRpcAddressesForCluster",
  "functionId": "getNNServiceRpcAddressesForCluster___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
  "functionStartLine": 595,
  "functionEndLine": 636,
  "numCommitsSeen": 288,
  "timeTaken": 8939,
  "changeHistory": [
    "696a663cd0a1deb818f6b44ddc8ca20571bac980",
    "65a941008d4bbf906772399d3f035f2a0da5abfa",
    "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
    "9eee97508f350ed4629abb04e7781514ffa04070",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "62c7e2edfc0cd5baeda71d7c3737398302aea795",
    "9146ad23f3f1af7c5547fba08e2a867cee49e015",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "696a663cd0a1deb818f6b44ddc8ca20571bac980": "Ybodychange",
    "65a941008d4bbf906772399d3f035f2a0da5abfa": "Ymultichange(Yrename,Ybodychange)",
    "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e": "Ybodychange",
    "9eee97508f350ed4629abb04e7781514ffa04070": "Ybodychange",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ybodychange",
    "62c7e2edfc0cd5baeda71d7c3737398302aea795": "Ybodychange",
    "9146ad23f3f1af7c5547fba08e2a867cee49e015": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "696a663cd0a1deb818f6b44ddc8ca20571bac980": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15193. Improving the error message for missing `dfs.namenode.rpc-address.$NAMESERVICE`. Contributed by Ctest.\n",
      "commitDate": "28/03/20 11:31 AM",
      "commitName": "696a663cd0a1deb818f6b44ddc8ca20571bac980",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "07/02/20 1:21 AM",
      "commitNameOld": "7dac7e1d13eaf0eac04fe805c7502dcecd597979",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 50.38,
      "commitsBetweenForRepo": 176,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n     getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n       defaultAddress \u003d NetUtils.getHostPortString(\n           DFSUtilClient.getNNAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n \n     Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n             (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n \n     if (parentNameServices.isEmpty()) {\n       parentNameServices \u003d conf.getTrimmedStringCollection\n               (DFSConfigKeys.DFS_NAMESERVICES);\n     } else {\n       // Ensure that the internal service is ineed in the list of all available\n       // nameservices.\n       Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n               .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n       for (String nsId : parentNameServices) {\n         if (!availableNameServices.contains(nsId)) {\n           throw new IOException(\"Unknown nameservice: \" + nsId);\n         }\n       }\n     }\n \n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n             DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,\n                                                defaultAddress,\n                                                DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                                DFS_NAMENODE_RPC_ADDRESS_KEY);\n     if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n-              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n-              + DFS_NAMENODE_RPC_ADDRESS_KEY\n+              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \".\" + parentNameServices\n+              + \" or \"\n+              + DFS_NAMENODE_RPC_ADDRESS_KEY + \".\" + parentNameServices\n               + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NetUtils.getHostPortString(\n          DFSUtilClient.getNNAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n\n    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n            (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n\n    if (parentNameServices.isEmpty()) {\n      parentNameServices \u003d conf.getTrimmedStringCollection\n              (DFSConfigKeys.DFS_NAMESERVICES);\n    } else {\n      // Ensure that the internal service is ineed in the list of all available\n      // nameservices.\n      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n              .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n      for (String nsId : parentNameServices) {\n        if (!availableNameServices.contains(nsId)) {\n          throw new IOException(\"Unknown nameservice: \" + nsId);\n        }\n      }\n    }\n\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n            DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,\n                                               defaultAddress,\n                                               DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                               DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \".\" + parentNameServices\n              + \" or \"\n              + DFS_NAMENODE_RPC_ADDRESS_KEY + \".\" + parentNameServices\n              + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "65a941008d4bbf906772399d3f035f2a0da5abfa": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Revert \"HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.\"\n\nThis reverts commit aa4b6fbe754ab7e3cf8ee106598d550f6e14783e.\n",
      "commitDate": "14/09/17 11:17 AM",
      "commitName": "65a941008d4bbf906772399d3f035f2a0da5abfa",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Revert \"HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.\"\n\nThis reverts commit aa4b6fbe754ab7e3cf8ee106598d550f6e14783e.\n",
          "commitDate": "14/09/17 11:17 AM",
          "commitName": "65a941008d4bbf906772399d3f035f2a0da5abfa",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "09/09/17 8:40 AM",
          "commitNameOld": "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 5.11,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,41 @@\n-      getNNServiceRpcAddresses(Configuration conf) throws IOException {\n+    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n-      InetSocketAddress rpcAddress \u003d DFSUtilClient.getNNAddress(conf);\n-      InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n-          rpcAddress.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n-      defaultAddress \u003d NetUtils.getHostPortString(serviceAddress);\n+      defaultAddress \u003d NetUtils.getHostPortString(\n+          DFSUtilClient.getNNAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n \n     Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n             (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n \n     if (parentNameServices.isEmpty()) {\n       parentNameServices \u003d conf.getTrimmedStringCollection\n               (DFSConfigKeys.DFS_NAMESERVICES);\n     } else {\n       // Ensure that the internal service is ineed in the list of all available\n       // nameservices.\n       Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n               .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n       for (String nsId : parentNameServices) {\n         if (!availableNameServices.contains(nsId)) {\n           throw new IOException(\"Unknown nameservice: \" + nsId);\n         }\n       }\n     }\n \n-    // If true, then replace the port numbers in the final address list\n-    // with the default service RPC port.\n-    boolean replacePortNumbers \u003d false;\n-\n-    // First try to lookup using the service RPC address keys.\n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n-            DFSUtilClient.getAddressesForNsIds(\n-                conf, parentNameServices, null,\n-                DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY);\n-\n-    // Next try to lookup using the RPC address key.\n-    if (addressList.isEmpty()) {\n-      replacePortNumbers \u003d true;\n-      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n-          conf, parentNameServices, null, DFS_NAMENODE_RPC_ADDRESS_KEY);\n-    }\n-\n-    // Finally, fallback to the default address.\n-    // This will not yield the correct address in a federated/HA setup.\n-    if (addressList.isEmpty()) {\n-      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n-          conf, parentNameServices, defaultAddress);\n-    }\n-\n+            DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,\n+                                               defaultAddress,\n+                                               DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n+                                               DFS_NAMENODE_RPC_ADDRESS_KEY);\n     if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n-          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n-          + DFS_NAMENODE_RPC_ADDRESS_KEY\n-          + \" is not configured.\");\n-    }\n-\n-    if (replacePortNumbers) {\n-      // Replace the RPC port(s) with the default service RPC port(s)\n-      addressList.forEach((nsId, addresses) -\u003e {\n-        addresses.forEach((nnId, address) -\u003e {\n-          InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n-              address.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n-          addresses.put(nnId, serviceAddress);\n-        });\n-      });\n+              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n+              + DFS_NAMENODE_RPC_ADDRESS_KEY\n+              + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NetUtils.getHostPortString(\n          DFSUtilClient.getNNAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n\n    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n            (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n\n    if (parentNameServices.isEmpty()) {\n      parentNameServices \u003d conf.getTrimmedStringCollection\n              (DFSConfigKeys.DFS_NAMESERVICES);\n    } else {\n      // Ensure that the internal service is ineed in the list of all available\n      // nameservices.\n      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n              .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n      for (String nsId : parentNameServices) {\n        if (!availableNameServices.contains(nsId)) {\n          throw new IOException(\"Unknown nameservice: \" + nsId);\n        }\n      }\n    }\n\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n            DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,\n                                               defaultAddress,\n                                               DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                               DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n              + DFS_NAMENODE_RPC_ADDRESS_KEY\n              + \" is not configured.\");\n    }\n    return addressList;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {
            "oldValue": "getNNServiceRpcAddresses",
            "newValue": "getNNServiceRpcAddressesForCluster"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.\"\n\nThis reverts commit aa4b6fbe754ab7e3cf8ee106598d550f6e14783e.\n",
          "commitDate": "14/09/17 11:17 AM",
          "commitName": "65a941008d4bbf906772399d3f035f2a0da5abfa",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "09/09/17 8:40 AM",
          "commitNameOld": "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 5.11,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,41 @@\n-      getNNServiceRpcAddresses(Configuration conf) throws IOException {\n+    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n-      InetSocketAddress rpcAddress \u003d DFSUtilClient.getNNAddress(conf);\n-      InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n-          rpcAddress.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n-      defaultAddress \u003d NetUtils.getHostPortString(serviceAddress);\n+      defaultAddress \u003d NetUtils.getHostPortString(\n+          DFSUtilClient.getNNAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n \n     Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n             (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n \n     if (parentNameServices.isEmpty()) {\n       parentNameServices \u003d conf.getTrimmedStringCollection\n               (DFSConfigKeys.DFS_NAMESERVICES);\n     } else {\n       // Ensure that the internal service is ineed in the list of all available\n       // nameservices.\n       Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n               .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n       for (String nsId : parentNameServices) {\n         if (!availableNameServices.contains(nsId)) {\n           throw new IOException(\"Unknown nameservice: \" + nsId);\n         }\n       }\n     }\n \n-    // If true, then replace the port numbers in the final address list\n-    // with the default service RPC port.\n-    boolean replacePortNumbers \u003d false;\n-\n-    // First try to lookup using the service RPC address keys.\n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n-            DFSUtilClient.getAddressesForNsIds(\n-                conf, parentNameServices, null,\n-                DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY);\n-\n-    // Next try to lookup using the RPC address key.\n-    if (addressList.isEmpty()) {\n-      replacePortNumbers \u003d true;\n-      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n-          conf, parentNameServices, null, DFS_NAMENODE_RPC_ADDRESS_KEY);\n-    }\n-\n-    // Finally, fallback to the default address.\n-    // This will not yield the correct address in a federated/HA setup.\n-    if (addressList.isEmpty()) {\n-      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n-          conf, parentNameServices, defaultAddress);\n-    }\n-\n+            DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,\n+                                               defaultAddress,\n+                                               DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n+                                               DFS_NAMENODE_RPC_ADDRESS_KEY);\n     if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n-          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n-          + DFS_NAMENODE_RPC_ADDRESS_KEY\n-          + \" is not configured.\");\n-    }\n-\n-    if (replacePortNumbers) {\n-      // Replace the RPC port(s) with the default service RPC port(s)\n-      addressList.forEach((nsId, addresses) -\u003e {\n-        addresses.forEach((nnId, address) -\u003e {\n-          InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n-              address.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n-          addresses.put(nnId, serviceAddress);\n-        });\n-      });\n+              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n+              + DFS_NAMENODE_RPC_ADDRESS_KEY\n+              + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "    getNNServiceRpcAddressesForCluster(Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NetUtils.getHostPortString(\n          DFSUtilClient.getNNAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n\n    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n            (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n\n    if (parentNameServices.isEmpty()) {\n      parentNameServices \u003d conf.getTrimmedStringCollection\n              (DFSConfigKeys.DFS_NAMESERVICES);\n    } else {\n      // Ensure that the internal service is ineed in the list of all available\n      // nameservices.\n      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n              .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n      for (String nsId : parentNameServices) {\n        if (!availableNameServices.contains(nsId)) {\n          throw new IOException(\"Unknown nameservice: \" + nsId);\n        }\n      }\n    }\n\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n            DFSUtilClient.getAddressesForNsIds(conf, parentNameServices,\n                                               defaultAddress,\n                                               DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                               DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n              + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n              + DFS_NAMENODE_RPC_ADDRESS_KEY\n              + \" is not configured.\");\n    }\n    return addressList;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.\n",
      "commitDate": "09/09/17 8:40 AM",
      "commitName": "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "31/08/17 11:20 PM",
      "commitNameOld": "1b3b9938cf663c71d2e5d9032fdfb1460bae0d3f",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 8.39,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,73 @@\n-  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n-      Configuration conf) throws IOException {\n+      getNNServiceRpcAddresses(Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n-      defaultAddress \u003d NetUtils.getHostPortString(\n-          DFSUtilClient.getNNAddress(conf));\n+      InetSocketAddress rpcAddress \u003d DFSUtilClient.getNNAddress(conf);\n+      InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n+          rpcAddress.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n+      defaultAddress \u003d NetUtils.getHostPortString(serviceAddress);\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n-    \n+\n+    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n+            (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n+\n+    if (parentNameServices.isEmpty()) {\n+      parentNameServices \u003d conf.getTrimmedStringCollection\n+              (DFSConfigKeys.DFS_NAMESERVICES);\n+    } else {\n+      // Ensure that the internal service is ineed in the list of all available\n+      // nameservices.\n+      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n+              .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n+      for (String nsId : parentNameServices) {\n+        if (!availableNameServices.contains(nsId)) {\n+          throw new IOException(\"Unknown nameservice: \" + nsId);\n+        }\n+      }\n+    }\n+\n+    // If true, then replace the port numbers in the final address list\n+    // with the default service RPC port.\n+    boolean replacePortNumbers \u003d false;\n+\n+    // First try to lookup using the service RPC address keys.\n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n-      DFSUtilClient.getAddresses(conf, defaultAddress,\n-                                 DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n-                                 DFS_NAMENODE_RPC_ADDRESS_KEY);\n+            DFSUtilClient.getAddressesForNsIds(\n+                conf, parentNameServices, null,\n+                DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY);\n+\n+    // Next try to lookup using the RPC address key.\n+    if (addressList.isEmpty()) {\n+      replacePortNumbers \u003d true;\n+      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n+          conf, parentNameServices, null, DFS_NAMENODE_RPC_ADDRESS_KEY);\n+    }\n+\n+    // Finally, fallback to the default address.\n+    // This will not yield the correct address in a federated/HA setup.\n+    if (addressList.isEmpty()) {\n+      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n+          conf, parentNameServices, defaultAddress);\n+    }\n+\n     if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n-          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n+          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n           + DFS_NAMENODE_RPC_ADDRESS_KEY\n           + \" is not configured.\");\n     }\n+\n+    if (replacePortNumbers) {\n+      // Replace the RPC port(s) with the default service RPC port(s)\n+      addressList.forEach((nsId, addresses) -\u003e {\n+        addresses.forEach((nnId, address) -\u003e {\n+          InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n+              address.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n+          addresses.put(nnId, serviceAddress);\n+        });\n+      });\n+    }\n     return addressList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      getNNServiceRpcAddresses(Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      InetSocketAddress rpcAddress \u003d DFSUtilClient.getNNAddress(conf);\n      InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n          rpcAddress.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n      defaultAddress \u003d NetUtils.getHostPortString(serviceAddress);\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n\n    Collection\u003cString\u003e parentNameServices \u003d conf.getTrimmedStringCollection\n            (DFSConfigKeys.DFS_INTERNAL_NAMESERVICES_KEY);\n\n    if (parentNameServices.isEmpty()) {\n      parentNameServices \u003d conf.getTrimmedStringCollection\n              (DFSConfigKeys.DFS_NAMESERVICES);\n    } else {\n      // Ensure that the internal service is ineed in the list of all available\n      // nameservices.\n      Set\u003cString\u003e availableNameServices \u003d Sets.newHashSet(conf\n              .getTrimmedStringCollection(DFSConfigKeys.DFS_NAMESERVICES));\n      for (String nsId : parentNameServices) {\n        if (!availableNameServices.contains(nsId)) {\n          throw new IOException(\"Unknown nameservice: \" + nsId);\n        }\n      }\n    }\n\n    // If true, then replace the port numbers in the final address list\n    // with the default service RPC port.\n    boolean replacePortNumbers \u003d false;\n\n    // First try to lookup using the service RPC address keys.\n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n            DFSUtilClient.getAddressesForNsIds(\n                conf, parentNameServices, null,\n                DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY);\n\n    // Next try to lookup using the RPC address key.\n    if (addressList.isEmpty()) {\n      replacePortNumbers \u003d true;\n      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n          conf, parentNameServices, null, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    }\n\n    // Finally, fallback to the default address.\n    // This will not yield the correct address in a federated/HA setup.\n    if (addressList.isEmpty()) {\n      addressList \u003d DFSUtilClient.getAddressesForNsIds(\n          conf, parentNameServices, defaultAddress);\n    }\n\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"\n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n\n    if (replacePortNumbers) {\n      // Replace the RPC port(s) with the default service RPC port(s)\n      addressList.forEach((nsId, addresses) -\u003e {\n        addresses.forEach((nnId, address) -\u003e {\n          InetSocketAddress serviceAddress \u003d InetSocketAddress.createUnresolved(\n              address.getHostName(), DFS_NAMENODE_SERVICE_RPC_PORT_DEFAULT);\n          addresses.put(nnId, serviceAddress);\n        });\n      });\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "9eee97508f350ed4629abb04e7781514ffa04070": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9022. Move NameNode.getAddress() and NameNode.getUri() to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "17/09/15 2:18 PM",
      "commitName": "9eee97508f350ed4629abb04e7781514ffa04070",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/08/15 2:38 PM",
      "commitNameOld": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 19.99,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n       Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n-      defaultAddress \u003d NetUtils.getHostPortString(NameNode.getAddress(conf));\n+      defaultAddress \u003d NetUtils.getHostPortString(\n+          DFSUtilClient.getNNAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n     \n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n       DFSUtilClient.getAddresses(conf, defaultAddress,\n                                  DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                  DFS_NAMENODE_RPC_ADDRESS_KEY);\n     if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n           + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n           + DFS_NAMENODE_RPC_ADDRESS_KEY\n           + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NetUtils.getHostPortString(\n          DFSUtilClient.getNNAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n      DFSUtilClient.getAddresses(conf, defaultAddress,\n                                 DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                 DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/04/15 12:36 AM",
      "commitNameOld": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n       Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n       defaultAddress \u003d NetUtils.getHostPortString(NameNode.getAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n     \n     Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n-      getAddresses(conf, defaultAddress,\n-        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n+      DFSUtilClient.getAddresses(conf, defaultAddress,\n+                                 DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n+                                 DFS_NAMENODE_RPC_ADDRESS_KEY);\n     if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n           + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n           + DFS_NAMENODE_RPC_ADDRESS_KEY\n           + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NetUtils.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n      DFSUtilClient.getAddresses(conf, defaultAddress,\n                                 DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY,\n                                 DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "62c7e2edfc0cd5baeda71d7c3737398302aea795": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3003. Remove getHostPortString() from NameNode, replace it with NetUtils.getHostPortString(). Contributed by Brandon Li.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1293338 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/12 9:03 AM",
      "commitName": "62c7e2edfc0cd5baeda71d7c3737398302aea795",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "07/02/12 7:55 PM",
      "commitNameOld": "11db1b855fa08a5ef7cdf2d40bd18ee33eba92ee",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 16.55,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n       Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n-      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n+      defaultAddress \u003d NetUtils.getHostPortString(NameNode.getAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n     \n     List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n         DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n     if (addressList \u003d\u003d null) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n           + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n           + DFS_NAMENODE_RPC_ADDRESS_KEY\n           + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NetUtils.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList \u003d\u003d null) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "9146ad23f3f1af7c5547fba08e2a867cee49e015": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/11/11 6:27 PM",
      "commitName": "9146ad23f3f1af7c5547fba08e2a867cee49e015",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/11/11 6:27 PM",
          "commitName": "9146ad23f3f1af7c5547fba08e2a867cee49e015",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "21/11/11 7:18 PM",
          "commitNameOld": "6a0671977b0d51f143df6171f3621532c04eef04",
          "commitAuthorOld": "",
          "daysBetweenCommits": 6.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n+  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n       Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n       defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n     \n-    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n+    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n+      getAddresses(conf, defaultAddress,\n         DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n-    if (addressList \u003d\u003d null) {\n+    if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n           + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n           + DFS_NAMENODE_RPC_ADDRESS_KEY\n           + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n      getAddresses(conf, defaultAddress,\n        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {
            "oldValue": "List\u003cInetSocketAddress\u003e",
            "newValue": "Map\u003cString,Map\u003cString,InetSocketAddress\u003e\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2582. Scope dfs.ha.namenodes config by nameservice. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1207738 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/11/11 6:27 PM",
          "commitName": "9146ad23f3f1af7c5547fba08e2a867cee49e015",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "21/11/11 7:18 PM",
          "commitNameOld": "6a0671977b0d51f143df6171f3621532c04eef04",
          "commitAuthorOld": "",
          "daysBetweenCommits": 6.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n-  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n+  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n       Configuration conf) throws IOException {\n     // Use default address as fall back\n     String defaultAddress;\n     try {\n       defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n     } catch (IllegalArgumentException e) {\n       defaultAddress \u003d null;\n     }\n     \n-    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n+    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n+      getAddresses(conf, defaultAddress,\n         DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n-    if (addressList \u003d\u003d null) {\n+    if (addressList.isEmpty()) {\n       throw new IOException(\"Incorrect configuration: namenode address \"\n           + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n           + DFS_NAMENODE_RPC_ADDRESS_KEY\n           + \" is not configured.\");\n     }\n     return addressList;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addressList \u003d\n      getAddresses(conf, defaultAddress,\n        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList.isEmpty()) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList \u003d\u003d null) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList \u003d\u003d null) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/DFSUtil.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n+      Configuration conf) throws IOException {\n+    // Use default address as fall back\n+    String defaultAddress;\n+    try {\n+      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n+    } catch (IllegalArgumentException e) {\n+      defaultAddress \u003d null;\n+    }\n+    \n+    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n+        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n+    if (addressList \u003d\u003d null) {\n+      throw new IOException(\"Incorrect configuration: namenode address \"\n+          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n+          + DFS_NAMENODE_RPC_ADDRESS_KEY\n+          + \" is not configured.\");\n+    }\n+    return addressList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cInetSocketAddress\u003e getNNServiceRpcAddresses(\n      Configuration conf) throws IOException {\n    // Use default address as fall back\n    String defaultAddress;\n    try {\n      defaultAddress \u003d NameNode.getHostPortString(NameNode.getAddress(conf));\n    } catch (IllegalArgumentException e) {\n      defaultAddress \u003d null;\n    }\n    \n    List\u003cInetSocketAddress\u003e addressList \u003d getAddresses(conf, defaultAddress,\n        DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY, DFS_NAMENODE_RPC_ADDRESS_KEY);\n    if (addressList \u003d\u003d null) {\n      throw new IOException(\"Incorrect configuration: namenode address \"\n          + DFS_NAMENODE_SERVICE_RPC_ADDRESS_KEY + \" or \"  \n          + DFS_NAMENODE_RPC_ADDRESS_KEY\n          + \" is not configured.\");\n    }\n    return addressList;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/DFSUtil.java"
    }
  }
}