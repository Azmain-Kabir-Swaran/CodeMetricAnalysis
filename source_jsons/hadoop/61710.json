{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDownload.java",
  "functionName": "verifyAndCopy",
  "functionId": "verifyAndCopy___destination-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
  "functionStartLine": 262,
  "functionEndLine": 289,
  "numCommitsSeen": 26,
  "timeTaken": 1308,
  "changeHistory": [
    "8e4517f251e9f12917f2f457831664905015612f",
    "7288b08330001102f944124d18e02bf0585d3e96"
  ],
  "changeHistoryShort": {
    "8e4517f251e9f12917f2f457831664905015612f": "Ybodychange",
    "7288b08330001102f944124d18e02bf0585d3e96": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e4517f251e9f12917f2f457831664905015612f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5277. When localizers fail due to resource timestamps being out, provide more diagnostics. Contributed by Siddharth Ahuja\n",
      "commitDate": "09/04/20 3:31 AM",
      "commitName": "8e4517f251e9f12917f2f457831664905015612f",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 390.47,
      "commitsBetweenForRepo": 2235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private void verifyAndCopy(Path destination)\n       throws IOException, YarnException {\n     final Path sCopy;\n     try {\n       sCopy \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n     FileSystem sourceFs \u003d sCopy.getFileSystem(conf);\n     FileStatus sStat \u003d sourceFs.getFileStatus(sCopy);\n     if (sStat.getModificationTime() !\u003d resource.getTimestamp()) {\n-      throw new IOException(\"Resource \" + sCopy +\n-          \" changed on src filesystem (expected \" + resource.getTimestamp() +\n-          \", was \" + sStat.getModificationTime());\n+      throw new IOException(\"Resource \" + sCopy + \" changed on src filesystem\" +\n+          \" - expected: \" +\n+          \"\\\"\" + Times.formatISO8601(resource.getTimestamp()) + \"\\\"\" +\n+          \", was: \" +\n+          \"\\\"\" + Times.formatISO8601(sStat.getModificationTime()) + \"\\\"\" +\n+          \", current time: \" + \"\\\"\" + Times.formatISO8601(Time.now()) + \"\\\"\");\n     }\n     if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n       if (!isPublic(sourceFs, sCopy, sStat, statCache)) {\n         throw new IOException(\"Resource \" + sCopy +\n             \" is not publicly accessible and as such cannot be part of the\" +\n             \" public cache.\");\n       }\n     }\n \n     downloadAndUnpack(sCopy, destination);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyAndCopy(Path destination)\n      throws IOException, YarnException {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n    FileSystem sourceFs \u003d sCopy.getFileSystem(conf);\n    FileStatus sStat \u003d sourceFs.getFileStatus(sCopy);\n    if (sStat.getModificationTime() !\u003d resource.getTimestamp()) {\n      throw new IOException(\"Resource \" + sCopy + \" changed on src filesystem\" +\n          \" - expected: \" +\n          \"\\\"\" + Times.formatISO8601(resource.getTimestamp()) + \"\\\"\" +\n          \", was: \" +\n          \"\\\"\" + Times.formatISO8601(sStat.getModificationTime()) + \"\\\"\" +\n          \", current time: \" + \"\\\"\" + Times.formatISO8601(Time.now()) + \"\\\"\");\n    }\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      if (!isPublic(sourceFs, sCopy, sStat, statCache)) {\n        throw new IOException(\"Resource \" + sCopy +\n            \" is not publicly accessible and as such cannot be part of the\" +\n            \" public cache.\");\n      }\n    }\n\n    downloadAndUnpack(sCopy, destination);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java",
      "extendedDetails": {}
    },
    "7288b08330001102f944124d18e02bf0585d3e96": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2185. Use pipes when localizing archives. Contributed by Miklos Szegedi\n",
      "commitDate": "31/01/18 7:39 AM",
      "commitName": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,25 @@\n+  private void verifyAndCopy(Path destination)\n+      throws IOException, YarnException {\n+    final Path sCopy;\n+    try {\n+      sCopy \u003d resource.getResource().toPath();\n+    } catch (URISyntaxException e) {\n+      throw new IOException(\"Invalid resource\", e);\n+    }\n+    FileSystem sourceFs \u003d sCopy.getFileSystem(conf);\n+    FileStatus sStat \u003d sourceFs.getFileStatus(sCopy);\n+    if (sStat.getModificationTime() !\u003d resource.getTimestamp()) {\n+      throw new IOException(\"Resource \" + sCopy +\n+          \" changed on src filesystem (expected \" + resource.getTimestamp() +\n+          \", was \" + sStat.getModificationTime());\n+    }\n+    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n+      if (!isPublic(sourceFs, sCopy, sStat, statCache)) {\n+        throw new IOException(\"Resource \" + sCopy +\n+            \" is not publicly accessible and as such cannot be part of the\" +\n+            \" public cache.\");\n+      }\n+    }\n+\n+    downloadAndUnpack(sCopy, destination);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyAndCopy(Path destination)\n      throws IOException, YarnException {\n    final Path sCopy;\n    try {\n      sCopy \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n    FileSystem sourceFs \u003d sCopy.getFileSystem(conf);\n    FileStatus sStat \u003d sourceFs.getFileStatus(sCopy);\n    if (sStat.getModificationTime() !\u003d resource.getTimestamp()) {\n      throw new IOException(\"Resource \" + sCopy +\n          \" changed on src filesystem (expected \" + resource.getTimestamp() +\n          \", was \" + sStat.getModificationTime());\n    }\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      if (!isPublic(sourceFs, sCopy, sStat, statCache)) {\n        throw new IOException(\"Resource \" + sCopy +\n            \" is not publicly accessible and as such cannot be part of the\" +\n            \" public cache.\");\n      }\n    }\n\n    downloadAndUnpack(sCopy, destination);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/FSDownload.java"
    }
  }
}