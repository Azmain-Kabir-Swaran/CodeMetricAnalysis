{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingFileSystemSink.java",
  "functionName": "createOrAppendLogFile",
  "functionId": "createOrAppendLogFile___targetFile-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
  "functionStartLine": 789,
  "functionEndLine": 820,
  "numCommitsSeen": 9,
  "timeTaken": 621,
  "changeHistory": [
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca"
  ],
  "changeHistoryShort": {
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12702. Add an HDFS metrics sink. (Daniel Templeton via kasha)\n",
      "commitDate": "28/01/16 5:43 PM",
      "commitName": "ee005e010cff3f97a5daa8000ac2cd151e2631ca",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,32 @@\n+  private void createOrAppendLogFile(Path targetFile) throws IOException {\n+    // First try blindly creating the file. If we fail, it either means\n+    // the file exists, or the operation actually failed.  We do it this way\n+    // because if we check whether the file exists, it might still be created\n+    // by the time we try to create it. Creating first works like a\n+    // test-and-set.\n+    try {\n+      currentFSOutStream \u003d fileSystem.create(targetFile, false);\n+      currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n+          StandardCharsets.UTF_8.name());\n+    } catch (IOException ex) {\n+      // Try appending instead.  If we fail, if means the file doesn\u0027t\n+      // actually exist yet or the operation actually failed.\n+      try {\n+        currentFSOutStream \u003d fileSystem.append(targetFile);\n+        currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n+            StandardCharsets.UTF_8.name());\n+      } catch (IOException ex2) {\n+        // If the original create failed for a legit but transitory\n+        // reason, the append will fail because the file now doesn\u0027t exist,\n+        // resulting in a confusing stack trace.  To avoid that, we set\n+        // the cause of the second exception to be the first exception.\n+        // It\u0027s still a tiny bit confusing, but it\u0027s enough\n+        // information that someone should be able to figure it out.\n+        ex2.initCause(ex);\n+\n+        throw ex2;\n+      }\n+    }\n+\n+    currentFilePath \u003d targetFile;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createOrAppendLogFile(Path targetFile) throws IOException {\n    // First try blindly creating the file. If we fail, it either means\n    // the file exists, or the operation actually failed.  We do it this way\n    // because if we check whether the file exists, it might still be created\n    // by the time we try to create it. Creating first works like a\n    // test-and-set.\n    try {\n      currentFSOutStream \u003d fileSystem.create(targetFile, false);\n      currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n          StandardCharsets.UTF_8.name());\n    } catch (IOException ex) {\n      // Try appending instead.  If we fail, if means the file doesn\u0027t\n      // actually exist yet or the operation actually failed.\n      try {\n        currentFSOutStream \u003d fileSystem.append(targetFile);\n        currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n            StandardCharsets.UTF_8.name());\n      } catch (IOException ex2) {\n        // If the original create failed for a legit but transitory\n        // reason, the append will fail because the file now doesn\u0027t exist,\n        // resulting in a confusing stack trace.  To avoid that, we set\n        // the cause of the second exception to be the first exception.\n        // It\u0027s still a tiny bit confusing, but it\u0027s enough\n        // information that someone should be able to figure it out.\n        ex2.initCause(ex);\n\n        throw ex2;\n      }\n    }\n\n    currentFilePath \u003d targetFile;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java"
    }
  }
}