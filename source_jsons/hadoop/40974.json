{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSQueueConverter.java",
  "functionName": "emitMaxAMShare",
  "functionId": "emitMaxAMShare___queueName-String__queue-FSQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
  "functionStartLine": 121,
  "functionEndLine": 137,
  "numCommitsSeen": 9,
  "timeTaken": 1745,
  "changeHistory": [
    "9a297ff31d3e5d16ac648de584d430fc856afefe",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d"
  ],
  "changeHistoryShort": {
    "9a297ff31d3e5d16ac648de584d430fc856afefe": "Ybodychange",
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a297ff31d3e5d16ac648de584d430fc856afefe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10197. FS-CS converter: fix emitted ordering policy string and max-am-resource percent value. Contributed by Peter Bacsko\n",
      "commitDate": "26/03/20 4:35 AM",
      "commitName": "9a297ff31d3e5d16ac648de584d430fc856afefe",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "12/03/20 4:18 AM",
      "commitNameOld": "38d87883b6d4fe6a974e99b937b03cab55bc3820",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 14.01,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   private void emitMaxAMShare(String queueName, FSQueue queue) {\n     float queueMaxAmShare \u003d queue.getMaxAMShare();\n \n     // Direct floating point comparison is OK here\n     if (queueMaxAmShare !\u003d 0.0f\n         \u0026\u0026 queueMaxAmShare !\u003d queueMaxAMShareDefault\n-        \u0026\u0026 queueMaxAmShare !\u003d -1.0f) {\n-      capacitySchedulerConfig.set(PREFIX + queueName +\n-          \".maximum-am-resource-percent\", String.valueOf(queueMaxAmShare));\n+        \u0026\u0026 queueMaxAmShare !\u003d QUEUE_MAX_AM_SHARE_DISABLED) {\n+      capacitySchedulerConfig.setFloat(PREFIX + queueName +\n+          \".maximum-am-resource-percent\", queueMaxAmShare);\n     }\n \n-    if (queueMaxAmShare \u003d\u003d -1.0f) {\n-      capacitySchedulerConfig.set(PREFIX + queueName +\n-          \".maximum-am-resource-percent\", \"1.0\");\n+    if (queueMaxAmShare \u003d\u003d QUEUE_MAX_AM_SHARE_DISABLED\n+        \u0026\u0026 queueMaxAmShare !\u003d queueMaxAMShareDefault) {\n+      capacitySchedulerConfig.setFloat(PREFIX + queueName +\n+          \".maximum-am-resource-percent\", 1.0f);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitMaxAMShare(String queueName, FSQueue queue) {\n    float queueMaxAmShare \u003d queue.getMaxAMShare();\n\n    // Direct floating point comparison is OK here\n    if (queueMaxAmShare !\u003d 0.0f\n        \u0026\u0026 queueMaxAmShare !\u003d queueMaxAMShareDefault\n        \u0026\u0026 queueMaxAmShare !\u003d QUEUE_MAX_AM_SHARE_DISABLED) {\n      capacitySchedulerConfig.setFloat(PREFIX + queueName +\n          \".maximum-am-resource-percent\", queueMaxAmShare);\n    }\n\n    if (queueMaxAmShare \u003d\u003d QUEUE_MAX_AM_SHARE_DISABLED\n        \u0026\u0026 queueMaxAmShare !\u003d queueMaxAMShareDefault) {\n      capacitySchedulerConfig.setFloat(PREFIX + queueName +\n          \".maximum-am-resource-percent\", 1.0f);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java",
      "extendedDetails": {}
    },
    "5cc7873a4723a6c8e8e001d008fcd522eec0433d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9699. Migration tool that help to generate CS config based on FS config [Phase 1]. Contributed by Peter Bacsko\n",
      "commitDate": "14/10/19 8:19 AM",
      "commitName": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,16 @@\n+  private void emitMaxAMShare(String queueName, FSQueue queue) {\n+    float queueMaxAmShare \u003d queue.getMaxAMShare();\n+\n+    // Direct floating point comparison is OK here\n+    if (queueMaxAmShare !\u003d 0.0f\n+        \u0026\u0026 queueMaxAmShare !\u003d queueMaxAMShareDefault\n+        \u0026\u0026 queueMaxAmShare !\u003d -1.0f) {\n+      capacitySchedulerConfig.set(PREFIX + queueName +\n+          \".maximum-am-resource-percent\", String.valueOf(queueMaxAmShare));\n+    }\n+\n+    if (queueMaxAmShare \u003d\u003d -1.0f) {\n+      capacitySchedulerConfig.set(PREFIX + queueName +\n+          \".maximum-am-resource-percent\", \"1.0\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void emitMaxAMShare(String queueName, FSQueue queue) {\n    float queueMaxAmShare \u003d queue.getMaxAMShare();\n\n    // Direct floating point comparison is OK here\n    if (queueMaxAmShare !\u003d 0.0f\n        \u0026\u0026 queueMaxAmShare !\u003d queueMaxAMShareDefault\n        \u0026\u0026 queueMaxAmShare !\u003d -1.0f) {\n      capacitySchedulerConfig.set(PREFIX + queueName +\n          \".maximum-am-resource-percent\", String.valueOf(queueMaxAmShare));\n    }\n\n    if (queueMaxAmShare \u003d\u003d -1.0f) {\n      capacitySchedulerConfig.set(PREFIX + queueName +\n          \".maximum-am-resource-percent\", \"1.0\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSQueueConverter.java"
    }
  }
}