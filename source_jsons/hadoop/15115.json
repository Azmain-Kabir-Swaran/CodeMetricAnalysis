{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageReconstructor.java",
  "functionName": "processDirDiffEntry",
  "functionId": "processDirDiffEntry",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
  "functionStartLine": 1421,
  "functionEndLine": 1526,
  "numCommitsSeen": 15,
  "timeTaken": 1991,
  "changeHistory": [
    "05391c1845639d4f01da8e5df966e2dc2682f2ca",
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742"
  ],
  "changeHistoryShort": {
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": "Ybodychange",
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Yintroduced"
  },
  "changeHistoryDetails": {
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10506. OIV\u0027s ReverseXML processor cannot reconstruct some snapshot details. Contributed by Akira Ajisaka.\n",
      "commitDate": "25/02/17 2:38 PM",
      "commitName": "05391c1845639d4f01da8e5df966e2dc2682f2ca",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 38.05,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,106 @@\n     private void processDirDiffEntry() throws IOException {\n       LOG.debug(\"Processing dirDiffEntry\");\n       DiffEntry.Builder headerBld \u003d DiffEntry.newBuilder();\n       headerBld.setType(DiffEntry.Type.DIRECTORYDIFF);\n       Node dirDiffHeader \u003d new Node();\n       loadNodeChildren(dirDiffHeader, \"dirDiffEntry fields\", \"dirDiff\");\n       Long inodeId \u003d dirDiffHeader.removeChildLong(\n           SNAPSHOT_DIFF_SECTION_INODE_ID);\n       if (inodeId \u003d\u003d null) {\n         throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003cinodeId\u003e entry.\");\n       }\n       headerBld.setInodeId(inodeId);\n       Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\n           SNAPSHOT_DIFF_SECTION_COUNT);\n       if (expectedDiffs \u003d\u003d null) {\n         throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003ccount\u003e entry.\");\n       }\n       headerBld.setNumOfDiff(expectedDiffs);\n       dirDiffHeader.verifyNoRemainingKeys(\"dirDiffEntry\");\n       headerBld.build().writeDelimitedTo(out);\n       for (int actualDiffs \u003d 0; actualDiffs \u003c expectedDiffs; actualDiffs++) {\n         try {\n           expectTag(SNAPSHOT_DIFF_SECTION_DIR_DIFF, false);\n         } catch (IOException e) {\n           throw new IOException(\"Only read \" + (actualDiffs + 1) +\n               \" diffs out of \" + expectedDiffs, e);\n         }\n         Node dirDiff \u003d new Node();\n         loadNodeChildren(dirDiff, \"dirDiff fields\");\n         FsImageProto.SnapshotDiffSection.DirectoryDiff.Builder bld \u003d\n             FsImageProto.SnapshotDiffSection.DirectoryDiff.newBuilder();\n         Integer snapshotId \u003d dirDiff.removeChildInt(\n             SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID);\n         if (snapshotId !\u003d null) {\n           bld.setSnapshotId(snapshotId);\n         }\n         Integer childrenSize \u003d dirDiff.removeChildInt(\n             SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE);\n         if (childrenSize \u003d\u003d null) {\n           throw new IOException(\"Expected to find \u003cchildrenSize\u003e in \" +\n               \"\u003cdirDiff\u003e section.\");\n         }\n         bld.setIsSnapshotRoot(dirDiff.removeChildBool(\n             SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT));\n         bld.setChildrenSize(childrenSize);\n         String name \u003d dirDiff.removeChildStr(SECTION_NAME);\n         if (name !\u003d null) {\n           bld.setName(ByteString.copyFrom(name, \"UTF8\"));\n         }\n-        // TODO: add missing snapshotCopy field to XML\n+        Node snapshotCopy \u003d dirDiff.removeChild(\n+            SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY);\n+        if (snapshotCopy !\u003d null) {\n+          bld.setSnapshotCopy(createINodeDirectoryBuilder(snapshotCopy));\n+        }\n         Integer expectedCreatedListSize \u003d dirDiff.removeChildInt(\n             SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE);\n         if (expectedCreatedListSize \u003d\u003d null) {\n           throw new IOException(\"Expected to find \u003ccreatedListSize\u003e in \" +\n               \"\u003cdirDiff\u003e section.\");\n         }\n         bld.setCreatedListSize(expectedCreatedListSize);\n         while (true) {\n           Node deleted \u003d dirDiff.removeChild(\n               SNAPSHOT_DIFF_SECTION_DELETED_INODE);\n           if (deleted \u003d\u003d null){\n             break;\n           }\n           bld.addDeletedINode(Long.parseLong(deleted.getVal()));\n         }\n         while (true) {\n           Node deleted \u003d dirDiff.removeChild(\n               SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF);\n           if (deleted \u003d\u003d null){\n             break;\n           }\n           bld.addDeletedINodeRef(Integer.parseInt(deleted.getVal()));\n         }\n         bld.build().writeDelimitedTo(out);\n         // After the DirectoryDiff header comes a list of CreatedListEntry PBs.\n         int actualCreatedListSize \u003d 0;\n         while (true) {\n           Node created \u003d dirDiff.removeChild(\n               SNAPSHOT_DIFF_SECTION_CREATED);\n           if (created \u003d\u003d null){\n             break;\n           }\n           String cleName \u003d created.removeChildStr(SECTION_NAME);\n           if (cleName \u003d\u003d null) {\n             throw new IOException(\"Expected \u003ccreated\u003e entry to have \" +\n                 \"a \u003cname\u003e field\");\n           }\n           created.verifyNoRemainingKeys(\"created\");\n           FsImageProto.SnapshotDiffSection.CreatedListEntry.newBuilder().\n               setName(ByteString.copyFrom(cleName, \"UTF8\")).\n               build().writeDelimitedTo(out);\n           actualCreatedListSize++;\n         }\n         if (actualCreatedListSize !\u003d expectedCreatedListSize) {\n           throw new IOException(\"\u003ccreatedListSize\u003e was \" +\n               expectedCreatedListSize +\", but there were \" +\n               actualCreatedListSize + \" \u003ccreated\u003e entries.\");\n         }\n         dirDiff.verifyNoRemainingKeys(\"dirDiff\");\n       }\n       expectTagEnd(SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processDirDiffEntry() throws IOException {\n      LOG.debug(\"Processing dirDiffEntry\");\n      DiffEntry.Builder headerBld \u003d DiffEntry.newBuilder();\n      headerBld.setType(DiffEntry.Type.DIRECTORYDIFF);\n      Node dirDiffHeader \u003d new Node();\n      loadNodeChildren(dirDiffHeader, \"dirDiffEntry fields\", \"dirDiff\");\n      Long inodeId \u003d dirDiffHeader.removeChildLong(\n          SNAPSHOT_DIFF_SECTION_INODE_ID);\n      if (inodeId \u003d\u003d null) {\n        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003cinodeId\u003e entry.\");\n      }\n      headerBld.setInodeId(inodeId);\n      Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\n          SNAPSHOT_DIFF_SECTION_COUNT);\n      if (expectedDiffs \u003d\u003d null) {\n        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003ccount\u003e entry.\");\n      }\n      headerBld.setNumOfDiff(expectedDiffs);\n      dirDiffHeader.verifyNoRemainingKeys(\"dirDiffEntry\");\n      headerBld.build().writeDelimitedTo(out);\n      for (int actualDiffs \u003d 0; actualDiffs \u003c expectedDiffs; actualDiffs++) {\n        try {\n          expectTag(SNAPSHOT_DIFF_SECTION_DIR_DIFF, false);\n        } catch (IOException e) {\n          throw new IOException(\"Only read \" + (actualDiffs + 1) +\n              \" diffs out of \" + expectedDiffs, e);\n        }\n        Node dirDiff \u003d new Node();\n        loadNodeChildren(dirDiff, \"dirDiff fields\");\n        FsImageProto.SnapshotDiffSection.DirectoryDiff.Builder bld \u003d\n            FsImageProto.SnapshotDiffSection.DirectoryDiff.newBuilder();\n        Integer snapshotId \u003d dirDiff.removeChildInt(\n            SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID);\n        if (snapshotId !\u003d null) {\n          bld.setSnapshotId(snapshotId);\n        }\n        Integer childrenSize \u003d dirDiff.removeChildInt(\n            SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE);\n        if (childrenSize \u003d\u003d null) {\n          throw new IOException(\"Expected to find \u003cchildrenSize\u003e in \" +\n              \"\u003cdirDiff\u003e section.\");\n        }\n        bld.setIsSnapshotRoot(dirDiff.removeChildBool(\n            SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT));\n        bld.setChildrenSize(childrenSize);\n        String name \u003d dirDiff.removeChildStr(SECTION_NAME);\n        if (name !\u003d null) {\n          bld.setName(ByteString.copyFrom(name, \"UTF8\"));\n        }\n        Node snapshotCopy \u003d dirDiff.removeChild(\n            SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY);\n        if (snapshotCopy !\u003d null) {\n          bld.setSnapshotCopy(createINodeDirectoryBuilder(snapshotCopy));\n        }\n        Integer expectedCreatedListSize \u003d dirDiff.removeChildInt(\n            SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE);\n        if (expectedCreatedListSize \u003d\u003d null) {\n          throw new IOException(\"Expected to find \u003ccreatedListSize\u003e in \" +\n              \"\u003cdirDiff\u003e section.\");\n        }\n        bld.setCreatedListSize(expectedCreatedListSize);\n        while (true) {\n          Node deleted \u003d dirDiff.removeChild(\n              SNAPSHOT_DIFF_SECTION_DELETED_INODE);\n          if (deleted \u003d\u003d null){\n            break;\n          }\n          bld.addDeletedINode(Long.parseLong(deleted.getVal()));\n        }\n        while (true) {\n          Node deleted \u003d dirDiff.removeChild(\n              SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF);\n          if (deleted \u003d\u003d null){\n            break;\n          }\n          bld.addDeletedINodeRef(Integer.parseInt(deleted.getVal()));\n        }\n        bld.build().writeDelimitedTo(out);\n        // After the DirectoryDiff header comes a list of CreatedListEntry PBs.\n        int actualCreatedListSize \u003d 0;\n        while (true) {\n          Node created \u003d dirDiff.removeChild(\n              SNAPSHOT_DIFF_SECTION_CREATED);\n          if (created \u003d\u003d null){\n            break;\n          }\n          String cleName \u003d created.removeChildStr(SECTION_NAME);\n          if (cleName \u003d\u003d null) {\n            throw new IOException(\"Expected \u003ccreated\u003e entry to have \" +\n                \"a \u003cname\u003e field\");\n          }\n          created.verifyNoRemainingKeys(\"created\");\n          FsImageProto.SnapshotDiffSection.CreatedListEntry.newBuilder().\n              setName(ByteString.copyFrom(cleName, \"UTF8\")).\n              build().writeDelimitedTo(out);\n          actualCreatedListSize++;\n        }\n        if (actualCreatedListSize !\u003d expectedCreatedListSize) {\n          throw new IOException(\"\u003ccreatedListSize\u003e was \" +\n              expectedCreatedListSize +\", but there were \" +\n              actualCreatedListSize + \" \u003ccreated\u003e entries.\");\n        }\n        dirDiff.verifyNoRemainingKeys(\"dirDiff\");\n      }\n      expectTagEnd(SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "10/03/16 1:41 PM",
      "commitNameOld": "bd49354c6d6387620b0de2219eab1714ec2d64f8",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,102 @@\n     private void processDirDiffEntry() throws IOException {\n       LOG.debug(\"Processing dirDiffEntry\");\n       DiffEntry.Builder headerBld \u003d DiffEntry.newBuilder();\n       headerBld.setType(DiffEntry.Type.DIRECTORYDIFF);\n       Node dirDiffHeader \u003d new Node();\n       loadNodeChildren(dirDiffHeader, \"dirDiffEntry fields\", \"dirDiff\");\n-      Long inodeId \u003d dirDiffHeader.removeChildLong(\"inodeId\");\n+      Long inodeId \u003d dirDiffHeader.removeChildLong(\n+          SNAPSHOT_DIFF_SECTION_INODE_ID);\n       if (inodeId \u003d\u003d null) {\n         throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003cinodeId\u003e entry.\");\n       }\n       headerBld.setInodeId(inodeId);\n-      Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\"count\");\n+      Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\n+          SNAPSHOT_DIFF_SECTION_COUNT);\n       if (expectedDiffs \u003d\u003d null) {\n         throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003ccount\u003e entry.\");\n       }\n       headerBld.setNumOfDiff(expectedDiffs);\n       dirDiffHeader.verifyNoRemainingKeys(\"dirDiffEntry\");\n       headerBld.build().writeDelimitedTo(out);\n       for (int actualDiffs \u003d 0; actualDiffs \u003c expectedDiffs; actualDiffs++) {\n         try {\n-          expectTag(\"dirDiff\", false);\n+          expectTag(SNAPSHOT_DIFF_SECTION_DIR_DIFF, false);\n         } catch (IOException e) {\n           throw new IOException(\"Only read \" + (actualDiffs + 1) +\n               \" diffs out of \" + expectedDiffs, e);\n         }\n         Node dirDiff \u003d new Node();\n         loadNodeChildren(dirDiff, \"dirDiff fields\");\n         FsImageProto.SnapshotDiffSection.DirectoryDiff.Builder bld \u003d\n             FsImageProto.SnapshotDiffSection.DirectoryDiff.newBuilder();\n-        Integer snapshotId \u003d dirDiff.removeChildInt(\"snapshotId\");\n+        Integer snapshotId \u003d dirDiff.removeChildInt(\n+            SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID);\n         if (snapshotId !\u003d null) {\n           bld.setSnapshotId(snapshotId);\n         }\n-        Integer childrenSize \u003d dirDiff.removeChildInt(\"childrenSize\");\n+        Integer childrenSize \u003d dirDiff.removeChildInt(\n+            SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE);\n         if (childrenSize \u003d\u003d null) {\n           throw new IOException(\"Expected to find \u003cchildrenSize\u003e in \" +\n               \"\u003cdirDiff\u003e section.\");\n         }\n-        bld.setIsSnapshotRoot(dirDiff.removeChildBool(\"isSnapshotRoot\"));\n+        bld.setIsSnapshotRoot(dirDiff.removeChildBool(\n+            SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT));\n         bld.setChildrenSize(childrenSize);\n-        String name \u003d dirDiff.removeChildStr(\"name\");\n+        String name \u003d dirDiff.removeChildStr(SECTION_NAME);\n         if (name !\u003d null) {\n           bld.setName(ByteString.copyFrom(name, \"UTF8\"));\n         }\n         // TODO: add missing snapshotCopy field to XML\n-        Integer expectedCreatedListSize \u003d\n-            dirDiff.removeChildInt(\"createdListSize\");\n+        Integer expectedCreatedListSize \u003d dirDiff.removeChildInt(\n+            SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE);\n         if (expectedCreatedListSize \u003d\u003d null) {\n           throw new IOException(\"Expected to find \u003ccreatedListSize\u003e in \" +\n               \"\u003cdirDiff\u003e section.\");\n         }\n         bld.setCreatedListSize(expectedCreatedListSize);\n         while (true) {\n-          Node deleted \u003d dirDiff.removeChild(\"deletedInode\");\n+          Node deleted \u003d dirDiff.removeChild(\n+              SNAPSHOT_DIFF_SECTION_DELETED_INODE);\n           if (deleted \u003d\u003d null){\n             break;\n           }\n           bld.addDeletedINode(Long.parseLong(deleted.getVal()));\n         }\n         while (true) {\n-          Node deleted \u003d dirDiff.removeChild(\"deletedInoderef\");\n+          Node deleted \u003d dirDiff.removeChild(\n+              SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF);\n           if (deleted \u003d\u003d null){\n             break;\n           }\n           bld.addDeletedINodeRef(Integer.parseInt(deleted.getVal()));\n         }\n         bld.build().writeDelimitedTo(out);\n         // After the DirectoryDiff header comes a list of CreatedListEntry PBs.\n         int actualCreatedListSize \u003d 0;\n         while (true) {\n-          Node created \u003d dirDiff.removeChild(\"created\");\n+          Node created \u003d dirDiff.removeChild(\n+              SNAPSHOT_DIFF_SECTION_CREATED);\n           if (created \u003d\u003d null){\n             break;\n           }\n-          String cleName \u003d created.removeChildStr(\"name\");\n+          String cleName \u003d created.removeChildStr(SECTION_NAME);\n           if (cleName \u003d\u003d null) {\n             throw new IOException(\"Expected \u003ccreated\u003e entry to have \" +\n                 \"a \u003cname\u003e field\");\n           }\n           created.verifyNoRemainingKeys(\"created\");\n           FsImageProto.SnapshotDiffSection.CreatedListEntry.newBuilder().\n               setName(ByteString.copyFrom(cleName, \"UTF8\")).\n               build().writeDelimitedTo(out);\n           actualCreatedListSize++;\n         }\n         if (actualCreatedListSize !\u003d expectedCreatedListSize) {\n           throw new IOException(\"\u003ccreatedListSize\u003e was \" +\n               expectedCreatedListSize +\", but there were \" +\n               actualCreatedListSize + \" \u003ccreated\u003e entries.\");\n         }\n         dirDiff.verifyNoRemainingKeys(\"dirDiff\");\n       }\n-      expectTagEnd(\"dirDiffEntry\");\n+      expectTagEnd(SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void processDirDiffEntry() throws IOException {\n      LOG.debug(\"Processing dirDiffEntry\");\n      DiffEntry.Builder headerBld \u003d DiffEntry.newBuilder();\n      headerBld.setType(DiffEntry.Type.DIRECTORYDIFF);\n      Node dirDiffHeader \u003d new Node();\n      loadNodeChildren(dirDiffHeader, \"dirDiffEntry fields\", \"dirDiff\");\n      Long inodeId \u003d dirDiffHeader.removeChildLong(\n          SNAPSHOT_DIFF_SECTION_INODE_ID);\n      if (inodeId \u003d\u003d null) {\n        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003cinodeId\u003e entry.\");\n      }\n      headerBld.setInodeId(inodeId);\n      Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\n          SNAPSHOT_DIFF_SECTION_COUNT);\n      if (expectedDiffs \u003d\u003d null) {\n        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003ccount\u003e entry.\");\n      }\n      headerBld.setNumOfDiff(expectedDiffs);\n      dirDiffHeader.verifyNoRemainingKeys(\"dirDiffEntry\");\n      headerBld.build().writeDelimitedTo(out);\n      for (int actualDiffs \u003d 0; actualDiffs \u003c expectedDiffs; actualDiffs++) {\n        try {\n          expectTag(SNAPSHOT_DIFF_SECTION_DIR_DIFF, false);\n        } catch (IOException e) {\n          throw new IOException(\"Only read \" + (actualDiffs + 1) +\n              \" diffs out of \" + expectedDiffs, e);\n        }\n        Node dirDiff \u003d new Node();\n        loadNodeChildren(dirDiff, \"dirDiff fields\");\n        FsImageProto.SnapshotDiffSection.DirectoryDiff.Builder bld \u003d\n            FsImageProto.SnapshotDiffSection.DirectoryDiff.newBuilder();\n        Integer snapshotId \u003d dirDiff.removeChildInt(\n            SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID);\n        if (snapshotId !\u003d null) {\n          bld.setSnapshotId(snapshotId);\n        }\n        Integer childrenSize \u003d dirDiff.removeChildInt(\n            SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE);\n        if (childrenSize \u003d\u003d null) {\n          throw new IOException(\"Expected to find \u003cchildrenSize\u003e in \" +\n              \"\u003cdirDiff\u003e section.\");\n        }\n        bld.setIsSnapshotRoot(dirDiff.removeChildBool(\n            SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT));\n        bld.setChildrenSize(childrenSize);\n        String name \u003d dirDiff.removeChildStr(SECTION_NAME);\n        if (name !\u003d null) {\n          bld.setName(ByteString.copyFrom(name, \"UTF8\"));\n        }\n        // TODO: add missing snapshotCopy field to XML\n        Integer expectedCreatedListSize \u003d dirDiff.removeChildInt(\n            SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE);\n        if (expectedCreatedListSize \u003d\u003d null) {\n          throw new IOException(\"Expected to find \u003ccreatedListSize\u003e in \" +\n              \"\u003cdirDiff\u003e section.\");\n        }\n        bld.setCreatedListSize(expectedCreatedListSize);\n        while (true) {\n          Node deleted \u003d dirDiff.removeChild(\n              SNAPSHOT_DIFF_SECTION_DELETED_INODE);\n          if (deleted \u003d\u003d null){\n            break;\n          }\n          bld.addDeletedINode(Long.parseLong(deleted.getVal()));\n        }\n        while (true) {\n          Node deleted \u003d dirDiff.removeChild(\n              SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF);\n          if (deleted \u003d\u003d null){\n            break;\n          }\n          bld.addDeletedINodeRef(Integer.parseInt(deleted.getVal()));\n        }\n        bld.build().writeDelimitedTo(out);\n        // After the DirectoryDiff header comes a list of CreatedListEntry PBs.\n        int actualCreatedListSize \u003d 0;\n        while (true) {\n          Node created \u003d dirDiff.removeChild(\n              SNAPSHOT_DIFF_SECTION_CREATED);\n          if (created \u003d\u003d null){\n            break;\n          }\n          String cleName \u003d created.removeChildStr(SECTION_NAME);\n          if (cleName \u003d\u003d null) {\n            throw new IOException(\"Expected \u003ccreated\u003e entry to have \" +\n                \"a \u003cname\u003e field\");\n          }\n          created.verifyNoRemainingKeys(\"created\");\n          FsImageProto.SnapshotDiffSection.CreatedListEntry.newBuilder().\n              setName(ByteString.copyFrom(cleName, \"UTF8\")).\n              build().writeDelimitedTo(out);\n          actualCreatedListSize++;\n        }\n        if (actualCreatedListSize !\u003d expectedCreatedListSize) {\n          throw new IOException(\"\u003ccreatedListSize\u003e was \" +\n              expectedCreatedListSize +\", but there were \" +\n              actualCreatedListSize + \" \u003ccreated\u003e entries.\");\n        }\n        dirDiff.verifyNoRemainingKeys(\"dirDiff\");\n      }\n      expectTagEnd(SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,94 @@\n+    private void processDirDiffEntry() throws IOException {\n+      LOG.debug(\"Processing dirDiffEntry\");\n+      DiffEntry.Builder headerBld \u003d DiffEntry.newBuilder();\n+      headerBld.setType(DiffEntry.Type.DIRECTORYDIFF);\n+      Node dirDiffHeader \u003d new Node();\n+      loadNodeChildren(dirDiffHeader, \"dirDiffEntry fields\", \"dirDiff\");\n+      Long inodeId \u003d dirDiffHeader.removeChildLong(\"inodeId\");\n+      if (inodeId \u003d\u003d null) {\n+        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003cinodeId\u003e entry.\");\n+      }\n+      headerBld.setInodeId(inodeId);\n+      Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\"count\");\n+      if (expectedDiffs \u003d\u003d null) {\n+        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003ccount\u003e entry.\");\n+      }\n+      headerBld.setNumOfDiff(expectedDiffs);\n+      dirDiffHeader.verifyNoRemainingKeys(\"dirDiffEntry\");\n+      headerBld.build().writeDelimitedTo(out);\n+      for (int actualDiffs \u003d 0; actualDiffs \u003c expectedDiffs; actualDiffs++) {\n+        try {\n+          expectTag(\"dirDiff\", false);\n+        } catch (IOException e) {\n+          throw new IOException(\"Only read \" + (actualDiffs + 1) +\n+              \" diffs out of \" + expectedDiffs, e);\n+        }\n+        Node dirDiff \u003d new Node();\n+        loadNodeChildren(dirDiff, \"dirDiff fields\");\n+        FsImageProto.SnapshotDiffSection.DirectoryDiff.Builder bld \u003d\n+            FsImageProto.SnapshotDiffSection.DirectoryDiff.newBuilder();\n+        Integer snapshotId \u003d dirDiff.removeChildInt(\"snapshotId\");\n+        if (snapshotId !\u003d null) {\n+          bld.setSnapshotId(snapshotId);\n+        }\n+        Integer childrenSize \u003d dirDiff.removeChildInt(\"childrenSize\");\n+        if (childrenSize \u003d\u003d null) {\n+          throw new IOException(\"Expected to find \u003cchildrenSize\u003e in \" +\n+              \"\u003cdirDiff\u003e section.\");\n+        }\n+        bld.setIsSnapshotRoot(dirDiff.removeChildBool(\"isSnapshotRoot\"));\n+        bld.setChildrenSize(childrenSize);\n+        String name \u003d dirDiff.removeChildStr(\"name\");\n+        if (name !\u003d null) {\n+          bld.setName(ByteString.copyFrom(name, \"UTF8\"));\n+        }\n+        // TODO: add missing snapshotCopy field to XML\n+        Integer expectedCreatedListSize \u003d\n+            dirDiff.removeChildInt(\"createdListSize\");\n+        if (expectedCreatedListSize \u003d\u003d null) {\n+          throw new IOException(\"Expected to find \u003ccreatedListSize\u003e in \" +\n+              \"\u003cdirDiff\u003e section.\");\n+        }\n+        bld.setCreatedListSize(expectedCreatedListSize);\n+        while (true) {\n+          Node deleted \u003d dirDiff.removeChild(\"deletedInode\");\n+          if (deleted \u003d\u003d null){\n+            break;\n+          }\n+          bld.addDeletedINode(Long.parseLong(deleted.getVal()));\n+        }\n+        while (true) {\n+          Node deleted \u003d dirDiff.removeChild(\"deletedInoderef\");\n+          if (deleted \u003d\u003d null){\n+            break;\n+          }\n+          bld.addDeletedINodeRef(Integer.parseInt(deleted.getVal()));\n+        }\n+        bld.build().writeDelimitedTo(out);\n+        // After the DirectoryDiff header comes a list of CreatedListEntry PBs.\n+        int actualCreatedListSize \u003d 0;\n+        while (true) {\n+          Node created \u003d dirDiff.removeChild(\"created\");\n+          if (created \u003d\u003d null){\n+            break;\n+          }\n+          String cleName \u003d created.removeChildStr(\"name\");\n+          if (cleName \u003d\u003d null) {\n+            throw new IOException(\"Expected \u003ccreated\u003e entry to have \" +\n+                \"a \u003cname\u003e field\");\n+          }\n+          created.verifyNoRemainingKeys(\"created\");\n+          FsImageProto.SnapshotDiffSection.CreatedListEntry.newBuilder().\n+              setName(ByteString.copyFrom(cleName, \"UTF8\")).\n+              build().writeDelimitedTo(out);\n+          actualCreatedListSize++;\n+        }\n+        if (actualCreatedListSize !\u003d expectedCreatedListSize) {\n+          throw new IOException(\"\u003ccreatedListSize\u003e was \" +\n+              expectedCreatedListSize +\", but there were \" +\n+              actualCreatedListSize + \" \u003ccreated\u003e entries.\");\n+        }\n+        dirDiff.verifyNoRemainingKeys(\"dirDiff\");\n+      }\n+      expectTagEnd(\"dirDiffEntry\");\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processDirDiffEntry() throws IOException {\n      LOG.debug(\"Processing dirDiffEntry\");\n      DiffEntry.Builder headerBld \u003d DiffEntry.newBuilder();\n      headerBld.setType(DiffEntry.Type.DIRECTORYDIFF);\n      Node dirDiffHeader \u003d new Node();\n      loadNodeChildren(dirDiffHeader, \"dirDiffEntry fields\", \"dirDiff\");\n      Long inodeId \u003d dirDiffHeader.removeChildLong(\"inodeId\");\n      if (inodeId \u003d\u003d null) {\n        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003cinodeId\u003e entry.\");\n      }\n      headerBld.setInodeId(inodeId);\n      Integer expectedDiffs \u003d dirDiffHeader.removeChildInt(\"count\");\n      if (expectedDiffs \u003d\u003d null) {\n        throw new IOException(\"\u003cdirDiffEntry\u003e contained no \u003ccount\u003e entry.\");\n      }\n      headerBld.setNumOfDiff(expectedDiffs);\n      dirDiffHeader.verifyNoRemainingKeys(\"dirDiffEntry\");\n      headerBld.build().writeDelimitedTo(out);\n      for (int actualDiffs \u003d 0; actualDiffs \u003c expectedDiffs; actualDiffs++) {\n        try {\n          expectTag(\"dirDiff\", false);\n        } catch (IOException e) {\n          throw new IOException(\"Only read \" + (actualDiffs + 1) +\n              \" diffs out of \" + expectedDiffs, e);\n        }\n        Node dirDiff \u003d new Node();\n        loadNodeChildren(dirDiff, \"dirDiff fields\");\n        FsImageProto.SnapshotDiffSection.DirectoryDiff.Builder bld \u003d\n            FsImageProto.SnapshotDiffSection.DirectoryDiff.newBuilder();\n        Integer snapshotId \u003d dirDiff.removeChildInt(\"snapshotId\");\n        if (snapshotId !\u003d null) {\n          bld.setSnapshotId(snapshotId);\n        }\n        Integer childrenSize \u003d dirDiff.removeChildInt(\"childrenSize\");\n        if (childrenSize \u003d\u003d null) {\n          throw new IOException(\"Expected to find \u003cchildrenSize\u003e in \" +\n              \"\u003cdirDiff\u003e section.\");\n        }\n        bld.setIsSnapshotRoot(dirDiff.removeChildBool(\"isSnapshotRoot\"));\n        bld.setChildrenSize(childrenSize);\n        String name \u003d dirDiff.removeChildStr(\"name\");\n        if (name !\u003d null) {\n          bld.setName(ByteString.copyFrom(name, \"UTF8\"));\n        }\n        // TODO: add missing snapshotCopy field to XML\n        Integer expectedCreatedListSize \u003d\n            dirDiff.removeChildInt(\"createdListSize\");\n        if (expectedCreatedListSize \u003d\u003d null) {\n          throw new IOException(\"Expected to find \u003ccreatedListSize\u003e in \" +\n              \"\u003cdirDiff\u003e section.\");\n        }\n        bld.setCreatedListSize(expectedCreatedListSize);\n        while (true) {\n          Node deleted \u003d dirDiff.removeChild(\"deletedInode\");\n          if (deleted \u003d\u003d null){\n            break;\n          }\n          bld.addDeletedINode(Long.parseLong(deleted.getVal()));\n        }\n        while (true) {\n          Node deleted \u003d dirDiff.removeChild(\"deletedInoderef\");\n          if (deleted \u003d\u003d null){\n            break;\n          }\n          bld.addDeletedINodeRef(Integer.parseInt(deleted.getVal()));\n        }\n        bld.build().writeDelimitedTo(out);\n        // After the DirectoryDiff header comes a list of CreatedListEntry PBs.\n        int actualCreatedListSize \u003d 0;\n        while (true) {\n          Node created \u003d dirDiff.removeChild(\"created\");\n          if (created \u003d\u003d null){\n            break;\n          }\n          String cleName \u003d created.removeChildStr(\"name\");\n          if (cleName \u003d\u003d null) {\n            throw new IOException(\"Expected \u003ccreated\u003e entry to have \" +\n                \"a \u003cname\u003e field\");\n          }\n          created.verifyNoRemainingKeys(\"created\");\n          FsImageProto.SnapshotDiffSection.CreatedListEntry.newBuilder().\n              setName(ByteString.copyFrom(cleName, \"UTF8\")).\n              build().writeDelimitedTo(out);\n          actualCreatedListSize++;\n        }\n        if (actualCreatedListSize !\u003d expectedCreatedListSize) {\n          throw new IOException(\"\u003ccreatedListSize\u003e was \" +\n              expectedCreatedListSize +\", but there were \" +\n              actualCreatedListSize + \" \u003ccreated\u003e entries.\");\n        }\n        dirDiff.verifyNoRemainingKeys(\"dirDiff\");\n      }\n      expectTagEnd(\"dirDiffEntry\");\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java"
    }
  }
}