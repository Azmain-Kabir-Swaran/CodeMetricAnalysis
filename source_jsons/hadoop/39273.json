{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "reinitializeQueues",
  "functionId": "reinitializeQueues___newConf-CapacitySchedulerConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 765,
  "functionEndLine": 774,
  "numCommitsSeen": 389,
  "timeTaken": 15009,
  "changeHistory": [
    "5462d2176f7a64b236f06700cd247f946798cb26",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23",
    "14dd647c556016d351f425ee956ccf800ccb9ce2",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
    "519c4be95a091a072302e9ae52c2d221d80037a8",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "743a5b78e3bce26482c6bcd71208e422fa178cf9",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "5462d2176f7a64b236f06700cd247f946798cb26": "Ybodychange",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Yparameterchange,Ybodychange)",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": "Ybodychange",
    "14dd647c556016d351f425ee956ccf800ccb9ce2": "Ybodychange",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": "Ybodychange",
    "519c4be95a091a072302e9ae52c2d221d80037a8": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "743a5b78e3bce26482c6bcd71208e422fa178cf9": "Ybodychange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5462d2176f7a64b236f06700cd247f946798cb26": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9760. Support configuring application priorities on a workflow level. Contributed by Varun Saxena\n",
      "commitDate": "08/10/19 11:20 AM",
      "commitName": "5462d2176f7a64b236f06700cd247f946798cb26",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "31/08/19 9:24 PM",
      "commitNameOld": "d2d963f3d4819704351c04dbeb90fc8154488f91",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 37.58,
      "commitsBetweenForRepo": 317,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,10 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n   throws IOException {\n     this.queueManager.reinitializeQueues(newConf);\n     updatePlacementRules();\n \n+    this.workflowPriorityMappingsMgr.initialize(this);\n+\n     // Notify Preemption Manager\n     preemptionManager.refreshQueues(null, this.getRootQueue());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n  throws IOException {\n    this.queueManager.reinitializeQueues(newConf);\n    updatePlacementRules();\n\n    this.workflowPriorityMappingsMgr.initialize(this);\n\n    // Notify Preemption Manager\n    preemptionManager.refreshQueues(null, this.getRootQueue());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "commitDateOld": "29/11/16 9:40 AM",
      "commitNameOld": "25f9872be63423ada6a18481eaad2888e731fdac",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,8 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n   throws IOException {\n-    // Parse new queues\n-    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n-    CSQueue newRoot \u003d\n-        parseQueue(this, newConf, null, CapacitySchedulerConfiguration.ROOT,\n-            newQueues, queues, noop);\n-\n-    // Ensure all existing queues are still present\n-    validateExistingQueues(queues, newQueues);\n-\n-    // Add new queues\n-    addNewQueues(queues, newQueues);\n-\n-    // Re-configure queues\n-    root.reinitialize(newRoot, getClusterResource());\n+    this.queueManager.reinitializeQueues(newConf);\n     updatePlacementRules();\n \n-    // Re-calculate headroom for active applications\n-    Resource clusterResource \u003d getClusterResource();\n-    root.updateClusterResource(clusterResource, new ResourceLimits(\n-        clusterResource));\n-\n-    labelManager.reinitializeQueueLabels(getQueueToLabels());\n-    setQueueAcls(authorizer, queues);\n-\n     // Notify Preemption Manager\n-    preemptionManager.refreshQueues(null, root);\n+    preemptionManager.refreshQueues(null, this.getRootQueue());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n  throws IOException {\n    this.queueManager.reinitializeQueues(newConf);\n    updatePlacementRules();\n\n    // Notify Preemption Manager\n    preemptionManager.refreshQueues(null, this.getRootQueue());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n+  private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n-        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n+        parseQueue(this, newConf, null, CapacitySchedulerConfiguration.ROOT,\n             newQueues, queues, noop);\n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, getClusterResource());\n     updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n \n     // Notify Preemption Manager\n     preemptionManager.refreshQueues(null, root);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, newConf, null, CapacitySchedulerConfiguration.ROOT,\n            newQueues, queues, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, getClusterResource());\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n\n    // Notify Preemption Manager\n    preemptionManager.refreshQueues(null, root);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[conf-CapacitySchedulerConfiguration]",
            "newValue": "[newConf-CapacitySchedulerConfiguration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n-  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n+  private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n-        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n+        parseQueue(this, newConf, null, CapacitySchedulerConfiguration.ROOT,\n             newQueues, queues, noop);\n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, getClusterResource());\n     updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n \n     // Notify Preemption Manager\n     preemptionManager.refreshQueues(null, root);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, newConf, null, CapacitySchedulerConfiguration.ROOT,\n            newQueues, queues, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, getClusterResource());\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n\n    // Notify Preemption Manager\n    preemptionManager.refreshQueues(null, root);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, getClusterResource());\n     updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n+\n+    // Notify Preemption Manager\n+    preemptionManager.refreshQueues(null, root);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, getClusterResource());\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n\n    // Notify Preemption Manager\n    preemptionManager.refreshQueues(null, root);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, getClusterResource());\n     updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n-\n-    // Notify Preemption Manager\n-    preemptionManager.refreshQueues(null, root);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, getClusterResource());\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/03/16 2:19 PM",
      "commitNameOld": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, getClusterResource());\n     updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n+\n+    // Notify Preemption Manager\n+    preemptionManager.refreshQueues(null, root);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, getClusterResource());\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n\n    // Notify Preemption Manager\n    preemptionManager.refreshQueues(null, root);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/03/16 1:14 PM",
      "commitNameOld": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n-    root.reinitialize(newRoot, clusterResource);\n+    root.reinitialize(newRoot, getClusterResource());\n     updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n+    Resource clusterResource \u003d getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, getClusterResource());\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3635. Refactored current queue mapping implementation in CapacityScheduler to use a generic PlacementManager framework. Contributed by Wangda Tan\n",
      "commitDate": "15/09/15 12:39 AM",
      "commitName": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n-    initializeQueueMappings();\n+    updatePlacementRules();\n \n     // Re-calculate headroom for active applications\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n    updatePlacementRules();\n\n    // Re-calculate headroom for active applications\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "14dd647c556016d351f425ee956ccf800ccb9ce2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
      "commitDate": "02/03/15 5:52 PM",
      "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/02/15 8:34 PM",
      "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 20.89,
      "commitsBetweenForRepo": 211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n     initializeQueueMappings();\n \n     // Re-calculate headroom for active applications\n-    root.updateClusterResource(clusterResource);\n+    root.updateClusterResource(clusterResource, new ResourceLimits(\n+        clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     setQueueAcls(authorizer, queues);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n    initializeQueueMappings();\n\n    // Re-calculate headroom for active applications\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
      "commitDate": "09/02/15 8:34 PM",
      "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/02/15 11:28 AM",
      "commitNameOld": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.38,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n     initializeQueueMappings();\n \n     // Re-calculate headroom for active applications\n     root.updateClusterResource(clusterResource);\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n+    setQueueAcls(authorizer, queues);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n    initializeQueueMappings();\n\n    // Re-calculate headroom for active applications\n    root.updateClusterResource(clusterResource);\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    setQueueAcls(authorizer, queues);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/10/14 2:09 PM",
      "commitNameOld": "f9680d9a160ee527c8f2c1494584abf1a1f70f82",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n     initializeQueueMappings();\n-    \n+\n     // Re-calculate headroom for active applications\n     root.updateClusterResource(clusterResource);\n \n+    labelManager.reinitializeQueueLabels(getQueueToLabels());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n    initializeQueueMappings();\n\n    // Re-calculate headroom for active applications\n    root.updateClusterResource(clusterResource);\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2644. Fixed CapacityScheduler to return up-to-date headroom when AM allocates. Contributed by Craig Welch\n",
      "commitDate": "06/10/14 3:48 PM",
      "commitName": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/10/14 3:43 PM",
      "commitNameOld": "5e10a13bb4759984494c6a870c7f08fb6693c9c0",
      "commitAuthorOld": "subru",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,22 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n     initializeQueueMappings();\n+    \n+    // Re-calculate headroom for active applications\n+    root.updateClusterResource(clusterResource);\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n    initializeQueueMappings();\n    \n    // Re-calculate headroom for active applications\n    root.updateClusterResource(clusterResource);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "519c4be95a091a072302e9ae52c2d221d80037a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2411. Support simple user and group mappings to queues. Contributed by Ram Venkatesh\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/14 11:08 PM",
      "commitName": "519c4be95a091a072302e9ae52c2d221d80037a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/08/14 11:00 PM",
      "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n         parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n             newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n+    initializeQueueMappings();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n    initializeQueueMappings();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 41.13,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n-        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, newQueues, queues, \n-            queueComparator, applicationComparator, noop);\n+        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n+            newQueues, queues, noop); \n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, \n            newQueues, queues, noop); \n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, newQueues, queues, \n            queueComparator, applicationComparator, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "743a5b78e3bce26482c6bcd71208e422fa178cf9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3522. Ensure queues inherit ACLs from parent if they aren\u0027t explicitly specified. Contributed by Jonathan Eagles. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1225618 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/12/11 11:06 AM",
      "commitName": "743a5b78e3bce26482c6bcd71208e422fa178cf9",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "20/12/11 3:27 PM",
      "commitNameOld": "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.82,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n     CSQueue newRoot \u003d \n-        parseQueue(this, conf, null, ROOT, newQueues, queues, \n+        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, newQueues, queues, \n             queueComparator, applicationComparator, noop);\n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, CapacitySchedulerConfiguration.ROOT, newQueues, queues, \n            queueComparator, applicationComparator, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 10:54 PM",
      "commitNameOld": "0ecba04727b5c31182d29511646c8d3e6441300f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n   throws IOException {\n     // Parse new queues\n-    Map\u003cString, Queue\u003e newQueues \u003d new HashMap\u003cString, Queue\u003e();\n-    Queue newRoot \u003d \n+    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n+    CSQueue newRoot \u003d \n         parseQueue(this, conf, null, ROOT, newQueues, queues, \n             queueComparator, applicationComparator, noop);\n     \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n     \n     // Re-configure queues\n     root.reinitialize(newRoot, clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003cString, CSQueue\u003e();\n    CSQueue newRoot \u003d \n        parseQueue(this, conf, null, ROOT, newQueues, queues, \n            queueComparator, applicationComparator, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, Queue\u003e newQueues \u003d new HashMap\u003cString, Queue\u003e();\n    Queue newRoot \u003d \n        parseQueue(this, conf, null, ROOT, newQueues, queues, \n            queueComparator, applicationComparator, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,17 @@\n+  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n+  throws IOException {\n+    // Parse new queues\n+    Map\u003cString, Queue\u003e newQueues \u003d new HashMap\u003cString, Queue\u003e();\n+    Queue newRoot \u003d \n+        parseQueue(this, conf, null, ROOT, newQueues, queues, \n+            queueComparator, applicationComparator, noop);\n+    \n+    // Ensure all existing queues are still present\n+    validateExistingQueues(queues, newQueues);\n+\n+    // Add new queues\n+    addNewQueues(queues, newQueues);\n+    \n+    // Re-configure queues\n+    root.reinitialize(newRoot, clusterResource);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void reinitializeQueues(CapacitySchedulerConfiguration conf) \n  throws IOException {\n    // Parse new queues\n    Map\u003cString, Queue\u003e newQueues \u003d new HashMap\u003cString, Queue\u003e();\n    Queue newRoot \u003d \n        parseQueue(this, conf, null, ROOT, newQueues, queues, \n            queueComparator, applicationComparator, noop);\n    \n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n    \n    // Re-configure queues\n    root.reinitialize(newRoot, clusterResource);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}