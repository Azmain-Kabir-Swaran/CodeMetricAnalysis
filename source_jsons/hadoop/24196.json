{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobHistoryUtils.java",
  "functionName": "localGlobber",
  "functionId": "localGlobber___fc-FileContext__root-Path__tail-String__filter-PathFilter__hasFlatFiles-AtomicBoolean",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java",
  "functionStartLine": 475,
  "functionEndLine": 527,
  "numCommitsSeen": 25,
  "timeTaken": 7327,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static List\u003cFileStatus\u003e localGlobber(FileContext fc, Path root, String tail,\n      PathFilter filter, AtomicBoolean hasFlatFiles) throws IOException {\n    if (tail.equals(\"\")) {\n      return (listFilteredStatus(fc, root, filter));\n    }\n\n    if (tail.startsWith(\"/*\")) {\n      Path[] subdirs \u003d filteredStat2Paths(\n          remoteIterToList(fc.listStatus(root)), true, hasFlatFiles);\n\n      List\u003cList\u003cFileStatus\u003e\u003e subsubdirs \u003d new LinkedList\u003cList\u003cFileStatus\u003e\u003e();\n\n      int subsubdirCount \u003d 0;\n\n      if (subdirs.length \u003d\u003d 0) {\n        return new LinkedList\u003cFileStatus\u003e();\n      }\n\n      String newTail \u003d tail.substring(2);\n\n      for (int i \u003d 0; i \u003c subdirs.length; ++i) {\n        subsubdirs.add(localGlobber(fc, subdirs[i], newTail, filter, null));\n        // subsubdirs.set(i, localGlobber(fc, subdirs[i], newTail, filter,\n        // null));\n        subsubdirCount +\u003d subsubdirs.get(i).size();\n      }\n\n      List\u003cFileStatus\u003e result \u003d new LinkedList\u003cFileStatus\u003e();\n\n      for (int i \u003d 0; i \u003c subsubdirs.size(); ++i) {\n        result.addAll(subsubdirs.get(i));\n      }\n\n      return result;\n    }\n\n    if (tail.startsWith(\"/\")) {\n      int split \u003d tail.indexOf(\u0027/\u0027, 1);\n\n      if (split \u003c 0) {\n        return listFilteredStatus(fc, new Path(root, tail.substring(1)), filter);\n      } else {\n        String thisSegment \u003d tail.substring(1, split);\n        String newTail \u003d tail.substring(split);\n        return localGlobber(fc, new Path(root, thisSegment), newTail, filter,\n            hasFlatFiles);\n      }\n    }\n\n    IOException e \u003d new IOException(\"localGlobber: bad tail\");\n\n    throw e;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,53 @@\n+  public static List\u003cFileStatus\u003e localGlobber(FileContext fc, Path root, String tail,\n+      PathFilter filter, AtomicBoolean hasFlatFiles) throws IOException {\n+    if (tail.equals(\"\")) {\n+      return (listFilteredStatus(fc, root, filter));\n+    }\n+\n+    if (tail.startsWith(\"/*\")) {\n+      Path[] subdirs \u003d filteredStat2Paths(\n+          remoteIterToList(fc.listStatus(root)), true, hasFlatFiles);\n+\n+      List\u003cList\u003cFileStatus\u003e\u003e subsubdirs \u003d new LinkedList\u003cList\u003cFileStatus\u003e\u003e();\n+\n+      int subsubdirCount \u003d 0;\n+\n+      if (subdirs.length \u003d\u003d 0) {\n+        return new LinkedList\u003cFileStatus\u003e();\n+      }\n+\n+      String newTail \u003d tail.substring(2);\n+\n+      for (int i \u003d 0; i \u003c subdirs.length; ++i) {\n+        subsubdirs.add(localGlobber(fc, subdirs[i], newTail, filter, null));\n+        // subsubdirs.set(i, localGlobber(fc, subdirs[i], newTail, filter,\n+        // null));\n+        subsubdirCount +\u003d subsubdirs.get(i).size();\n+      }\n+\n+      List\u003cFileStatus\u003e result \u003d new LinkedList\u003cFileStatus\u003e();\n+\n+      for (int i \u003d 0; i \u003c subsubdirs.size(); ++i) {\n+        result.addAll(subsubdirs.get(i));\n+      }\n+\n+      return result;\n+    }\n+\n+    if (tail.startsWith(\"/\")) {\n+      int split \u003d tail.indexOf(\u0027/\u0027, 1);\n+\n+      if (split \u003c 0) {\n+        return listFilteredStatus(fc, new Path(root, tail.substring(1)), filter);\n+      } else {\n+        String thisSegment \u003d tail.substring(1, split);\n+        String newTail \u003d tail.substring(split);\n+        return localGlobber(fc, new Path(root, thisSegment), newTail, filter,\n+            hasFlatFiles);\n+      }\n+    }\n+\n+    IOException e \u003d new IOException(\"localGlobber: bad tail\");\n+\n+    throw e;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cFileStatus\u003e localGlobber(FileContext fc, Path root, String tail,\n      PathFilter filter, AtomicBoolean hasFlatFiles) throws IOException {\n    if (tail.equals(\"\")) {\n      return (listFilteredStatus(fc, root, filter));\n    }\n\n    if (tail.startsWith(\"/*\")) {\n      Path[] subdirs \u003d filteredStat2Paths(\n          remoteIterToList(fc.listStatus(root)), true, hasFlatFiles);\n\n      List\u003cList\u003cFileStatus\u003e\u003e subsubdirs \u003d new LinkedList\u003cList\u003cFileStatus\u003e\u003e();\n\n      int subsubdirCount \u003d 0;\n\n      if (subdirs.length \u003d\u003d 0) {\n        return new LinkedList\u003cFileStatus\u003e();\n      }\n\n      String newTail \u003d tail.substring(2);\n\n      for (int i \u003d 0; i \u003c subdirs.length; ++i) {\n        subsubdirs.add(localGlobber(fc, subdirs[i], newTail, filter, null));\n        // subsubdirs.set(i, localGlobber(fc, subdirs[i], newTail, filter,\n        // null));\n        subsubdirCount +\u003d subsubdirs.get(i).size();\n      }\n\n      List\u003cFileStatus\u003e result \u003d new LinkedList\u003cFileStatus\u003e();\n\n      for (int i \u003d 0; i \u003c subsubdirs.size(); ++i) {\n        result.addAll(subsubdirs.get(i));\n      }\n\n      return result;\n    }\n\n    if (tail.startsWith(\"/\")) {\n      int split \u003d tail.indexOf(\u0027/\u0027, 1);\n\n      if (split \u003c 0) {\n        return listFilteredStatus(fc, new Path(root, tail.substring(1)), filter);\n      } else {\n        String thisSegment \u003d tail.substring(1, split);\n        String newTail \u003d tail.substring(split);\n        return localGlobber(fc, new Path(root, thisSegment), newTail, filter,\n            hasFlatFiles);\n      }\n    }\n\n    IOException e \u003d new IOException(\"localGlobber: bad tail\");\n\n    throw e;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java"
    }
  }
}