{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStoreTableManager.java",
  "functionName": "getVersionMarkerItem",
  "functionId": "getVersionMarkerItem",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
  "functionStartLine": 613,
  "functionEndLine": 650,
  "numCommitsSeen": 38,
  "timeTaken": 4186,
  "changeHistory": [
    "4a700c20d553dc5336ee881719bcf189fc46bfbf",
    "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "d7c0a08a1c077752918a8cf1b4f1900ce2721899": "Ymultichange(Ymodifierchange,Ybodychange)",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
      "commitDate": "11/10/19 3:08 AM",
      "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  Item getVersionMarkerItem() throws IOException {\n+  protected Item getVersionMarkerItem() throws IOException {\n     final PrimaryKey versionMarkerKey \u003d\n-        createVersionMarkerPrimaryKey(VERSION_MARKER);\n+        createVersionMarkerPrimaryKey(VERSION_MARKER_ITEM_NAME);\n     int retryCount \u003d 0;\n     // look for a version marker, with usual throttling/failure retries.\n     Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     while (versionMarker \u003d\u003d null) {\n       // The marker was null.\n       // Two possibilities\n       // 1. This isn\u0027t a S3Guard table.\n       // 2. This is a S3Guard table in construction; another thread/process\n       //    is about to write/actively writing the version marker.\n       // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n       // retries.\n       // This will mean that if the cause is actually #1, failure will not\n       // be immediate. As this will ultimately result in a failure to\n       // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n       // bottleneck -simply a slightly slower failure report than would otherwise\n       // be seen.\n       // \"if your settings are broken, performance is not your main issue\"\n       try {\n         RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n             retryCount, 0, true);\n         if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n           break;\n         } else {\n-          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n+          LOG.warn(\"No version marker found in the DynamoDB table: {}. \" +\n+              \"Sleeping {} ms before next retry\", tableName, action.delayMillis);\n           Thread.sleep(action.delayMillis);\n         }\n       } catch (Exception e) {\n         throw new IOException(\"initTable: Unexpected exception \" + e, e);\n       }\n       retryCount++;\n       versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     }\n     return versionMarker;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Item getVersionMarkerItem() throws IOException {\n    final PrimaryKey versionMarkerKey \u003d\n        createVersionMarkerPrimaryKey(VERSION_MARKER_ITEM_NAME);\n    int retryCount \u003d 0;\n    // look for a version marker, with usual throttling/failure retries.\n    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    while (versionMarker \u003d\u003d null) {\n      // The marker was null.\n      // Two possibilities\n      // 1. This isn\u0027t a S3Guard table.\n      // 2. This is a S3Guard table in construction; another thread/process\n      //    is about to write/actively writing the version marker.\n      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n      // retries.\n      // This will mean that if the cause is actually #1, failure will not\n      // be immediate. As this will ultimately result in a failure to\n      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n      // bottleneck -simply a slightly slower failure report than would otherwise\n      // be seen.\n      // \"if your settings are broken, performance is not your main issue\"\n      try {\n        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n            retryCount, 0, true);\n        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n          break;\n        } else {\n          LOG.warn(\"No version marker found in the DynamoDB table: {}. \" +\n              \"Sleeping {} ms before next retry\", tableName, action.delayMillis);\n          Thread.sleep(action.delayMillis);\n        }\n      } catch (Exception e) {\n        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n      }\n      retryCount++;\n      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    }\n    return versionMarker;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
            "oldMethodName": "getVersionMarkerItem",
            "newMethodName": "getVersionMarkerItem"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  Item getVersionMarkerItem() throws IOException {\n+  protected Item getVersionMarkerItem() throws IOException {\n     final PrimaryKey versionMarkerKey \u003d\n-        createVersionMarkerPrimaryKey(VERSION_MARKER);\n+        createVersionMarkerPrimaryKey(VERSION_MARKER_ITEM_NAME);\n     int retryCount \u003d 0;\n     // look for a version marker, with usual throttling/failure retries.\n     Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     while (versionMarker \u003d\u003d null) {\n       // The marker was null.\n       // Two possibilities\n       // 1. This isn\u0027t a S3Guard table.\n       // 2. This is a S3Guard table in construction; another thread/process\n       //    is about to write/actively writing the version marker.\n       // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n       // retries.\n       // This will mean that if the cause is actually #1, failure will not\n       // be immediate. As this will ultimately result in a failure to\n       // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n       // bottleneck -simply a slightly slower failure report than would otherwise\n       // be seen.\n       // \"if your settings are broken, performance is not your main issue\"\n       try {\n         RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n             retryCount, 0, true);\n         if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n           break;\n         } else {\n-          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n+          LOG.warn(\"No version marker found in the DynamoDB table: {}. \" +\n+              \"Sleeping {} ms before next retry\", tableName, action.delayMillis);\n           Thread.sleep(action.delayMillis);\n         }\n       } catch (Exception e) {\n         throw new IOException(\"initTable: Unexpected exception \" + e, e);\n       }\n       retryCount++;\n       versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     }\n     return versionMarker;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Item getVersionMarkerItem() throws IOException {\n    final PrimaryKey versionMarkerKey \u003d\n        createVersionMarkerPrimaryKey(VERSION_MARKER_ITEM_NAME);\n    int retryCount \u003d 0;\n    // look for a version marker, with usual throttling/failure retries.\n    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    while (versionMarker \u003d\u003d null) {\n      // The marker was null.\n      // Two possibilities\n      // 1. This isn\u0027t a S3Guard table.\n      // 2. This is a S3Guard table in construction; another thread/process\n      //    is about to write/actively writing the version marker.\n      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n      // retries.\n      // This will mean that if the cause is actually #1, failure will not\n      // be immediate. As this will ultimately result in a failure to\n      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n      // bottleneck -simply a slightly slower failure report than would otherwise\n      // be seen.\n      // \"if your settings are broken, performance is not your main issue\"\n      try {\n        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n            retryCount, 0, true);\n        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n          break;\n        } else {\n          LOG.warn(\"No version marker found in the DynamoDB table: {}. \" +\n              \"Sleeping {} ms before next retry\", tableName, action.delayMillis);\n          Thread.sleep(action.delayMillis);\n        }\n      } catch (Exception e) {\n        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n      }\n      retryCount++;\n      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    }\n    return versionMarker;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,38 @@\n-  Item getVersionMarkerItem() throws IOException {\n+  protected Item getVersionMarkerItem() throws IOException {\n     final PrimaryKey versionMarkerKey \u003d\n-        createVersionMarkerPrimaryKey(VERSION_MARKER);\n+        createVersionMarkerPrimaryKey(VERSION_MARKER_ITEM_NAME);\n     int retryCount \u003d 0;\n     // look for a version marker, with usual throttling/failure retries.\n     Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     while (versionMarker \u003d\u003d null) {\n       // The marker was null.\n       // Two possibilities\n       // 1. This isn\u0027t a S3Guard table.\n       // 2. This is a S3Guard table in construction; another thread/process\n       //    is about to write/actively writing the version marker.\n       // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n       // retries.\n       // This will mean that if the cause is actually #1, failure will not\n       // be immediate. As this will ultimately result in a failure to\n       // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n       // bottleneck -simply a slightly slower failure report than would otherwise\n       // be seen.\n       // \"if your settings are broken, performance is not your main issue\"\n       try {\n         RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n             retryCount, 0, true);\n         if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n           break;\n         } else {\n-          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n+          LOG.warn(\"No version marker found in the DynamoDB table: {}. \" +\n+              \"Sleeping {} ms before next retry\", tableName, action.delayMillis);\n           Thread.sleep(action.delayMillis);\n         }\n       } catch (Exception e) {\n         throw new IOException(\"initTable: Unexpected exception \" + e, e);\n       }\n       retryCount++;\n       versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     }\n     return versionMarker;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Item getVersionMarkerItem() throws IOException {\n    final PrimaryKey versionMarkerKey \u003d\n        createVersionMarkerPrimaryKey(VERSION_MARKER_ITEM_NAME);\n    int retryCount \u003d 0;\n    // look for a version marker, with usual throttling/failure retries.\n    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    while (versionMarker \u003d\u003d null) {\n      // The marker was null.\n      // Two possibilities\n      // 1. This isn\u0027t a S3Guard table.\n      // 2. This is a S3Guard table in construction; another thread/process\n      //    is about to write/actively writing the version marker.\n      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n      // retries.\n      // This will mean that if the cause is actually #1, failure will not\n      // be immediate. As this will ultimately result in a failure to\n      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n      // bottleneck -simply a slightly slower failure report than would otherwise\n      // be seen.\n      // \"if your settings are broken, performance is not your main issue\"\n      try {\n        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n            retryCount, 0, true);\n        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n          break;\n        } else {\n          LOG.warn(\"No version marker found in the DynamoDB table: {}. \" +\n              \"Sleeping {} ms before next retry\", tableName, action.delayMillis);\n          Thread.sleep(action.delayMillis);\n        }\n      } catch (Exception e) {\n        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n      }\n      retryCount++;\n      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    }\n    return versionMarker;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d7c0a08a1c077752918a8cf1b4f1900ce2721899": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)\n",
      "commitDate": "12/09/18 9:04 PM",
      "commitName": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)\n",
          "commitDate": "12/09/18 9:04 PM",
          "commitName": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 4:36 PM",
          "commitNameOld": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,37 @@\n-  private Item getVersionMarkerItem() throws IOException {\n+  Item getVersionMarkerItem() throws IOException {\n     final PrimaryKey versionMarkerKey \u003d\n         createVersionMarkerPrimaryKey(VERSION_MARKER);\n     int retryCount \u003d 0;\n-    Item versionMarker \u003d table.getItem(versionMarkerKey);\n+    // look for a version marker, with usual throttling/failure retries.\n+    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     while (versionMarker \u003d\u003d null) {\n+      // The marker was null.\n+      // Two possibilities\n+      // 1. This isn\u0027t a S3Guard table.\n+      // 2. This is a S3Guard table in construction; another thread/process\n+      //    is about to write/actively writing the version marker.\n+      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n+      // retries.\n+      // This will mean that if the cause is actually #1, failure will not\n+      // be immediate. As this will ultimately result in a failure to\n+      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n+      // bottleneck -simply a slightly slower failure report than would otherwise\n+      // be seen.\n+      // \"if your settings are broken, performance is not your main issue\"\n       try {\n-        RetryPolicy.RetryAction action \u003d dataAccessRetryPolicy.shouldRetry(null,\n+        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n             retryCount, 0, true);\n         if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n           break;\n         } else {\n           LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n           Thread.sleep(action.delayMillis);\n         }\n       } catch (Exception e) {\n-        throw new IOException(\"initTable: Unexpected exception\", e);\n+        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n       }\n       retryCount++;\n-      versionMarker \u003d table.getItem(versionMarkerKey);\n+      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     }\n     return versionMarker;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Item getVersionMarkerItem() throws IOException {\n    final PrimaryKey versionMarkerKey \u003d\n        createVersionMarkerPrimaryKey(VERSION_MARKER);\n    int retryCount \u003d 0;\n    // look for a version marker, with usual throttling/failure retries.\n    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    while (versionMarker \u003d\u003d null) {\n      // The marker was null.\n      // Two possibilities\n      // 1. This isn\u0027t a S3Guard table.\n      // 2. This is a S3Guard table in construction; another thread/process\n      //    is about to write/actively writing the version marker.\n      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n      // retries.\n      // This will mean that if the cause is actually #1, failure will not\n      // be immediate. As this will ultimately result in a failure to\n      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n      // bottleneck -simply a slightly slower failure report than would otherwise\n      // be seen.\n      // \"if your settings are broken, performance is not your main issue\"\n      try {\n        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n            retryCount, 0, true);\n        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n          break;\n        } else {\n          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n          Thread.sleep(action.delayMillis);\n        }\n      } catch (Exception e) {\n        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n      }\n      retryCount++;\n      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    }\n    return versionMarker;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15426 Make S3guard client resilient to DDB throttle events and network failures (Contributed by Steve Loughran)\n",
          "commitDate": "12/09/18 9:04 PM",
          "commitName": "d7c0a08a1c077752918a8cf1b4f1900ce2721899",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "12/09/18 4:36 PM",
          "commitNameOld": "d32a8d5d582725eb724b78f27310ad1efd33ed2a",
          "commitAuthorOld": "Aaron Fabbri",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,37 @@\n-  private Item getVersionMarkerItem() throws IOException {\n+  Item getVersionMarkerItem() throws IOException {\n     final PrimaryKey versionMarkerKey \u003d\n         createVersionMarkerPrimaryKey(VERSION_MARKER);\n     int retryCount \u003d 0;\n-    Item versionMarker \u003d table.getItem(versionMarkerKey);\n+    // look for a version marker, with usual throttling/failure retries.\n+    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     while (versionMarker \u003d\u003d null) {\n+      // The marker was null.\n+      // Two possibilities\n+      // 1. This isn\u0027t a S3Guard table.\n+      // 2. This is a S3Guard table in construction; another thread/process\n+      //    is about to write/actively writing the version marker.\n+      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n+      // retries.\n+      // This will mean that if the cause is actually #1, failure will not\n+      // be immediate. As this will ultimately result in a failure to\n+      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n+      // bottleneck -simply a slightly slower failure report than would otherwise\n+      // be seen.\n+      // \"if your settings are broken, performance is not your main issue\"\n       try {\n-        RetryPolicy.RetryAction action \u003d dataAccessRetryPolicy.shouldRetry(null,\n+        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n             retryCount, 0, true);\n         if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n           break;\n         } else {\n           LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n           Thread.sleep(action.delayMillis);\n         }\n       } catch (Exception e) {\n-        throw new IOException(\"initTable: Unexpected exception\", e);\n+        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n       }\n       retryCount++;\n-      versionMarker \u003d table.getItem(versionMarkerKey);\n+      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n     }\n     return versionMarker;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Item getVersionMarkerItem() throws IOException {\n    final PrimaryKey versionMarkerKey \u003d\n        createVersionMarkerPrimaryKey(VERSION_MARKER);\n    int retryCount \u003d 0;\n    // look for a version marker, with usual throttling/failure retries.\n    Item versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    while (versionMarker \u003d\u003d null) {\n      // The marker was null.\n      // Two possibilities\n      // 1. This isn\u0027t a S3Guard table.\n      // 2. This is a S3Guard table in construction; another thread/process\n      //    is about to write/actively writing the version marker.\n      // So that state #2 is handled, batchWriteRetryPolicy is used to manage\n      // retries.\n      // This will mean that if the cause is actually #1, failure will not\n      // be immediate. As this will ultimately result in a failure to\n      // init S3Guard and the S3A FS, this isn\u0027t going to be a performance\n      // bottleneck -simply a slightly slower failure report than would otherwise\n      // be seen.\n      // \"if your settings are broken, performance is not your main issue\"\n      try {\n        RetryPolicy.RetryAction action \u003d batchWriteRetryPolicy.shouldRetry(null,\n            retryCount, 0, true);\n        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n          break;\n        } else {\n          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n          Thread.sleep(action.delayMillis);\n        }\n      } catch (Exception e) {\n        throw new IOException(\"initTable: Unexpected exception \" + e, e);\n      }\n      retryCount++;\n      versionMarker \u003d queryVersionMarker(versionMarkerKey);\n    }\n    return versionMarker;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,23 @@\n+  private Item getVersionMarkerItem() throws IOException {\n+    final PrimaryKey versionMarkerKey \u003d\n+        createVersionMarkerPrimaryKey(VERSION_MARKER);\n+    int retryCount \u003d 0;\n+    Item versionMarker \u003d table.getItem(versionMarkerKey);\n+    while (versionMarker \u003d\u003d null) {\n+      try {\n+        RetryPolicy.RetryAction action \u003d dataAccessRetryPolicy.shouldRetry(null,\n+            retryCount, 0, true);\n+        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n+          break;\n+        } else {\n+          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n+          Thread.sleep(action.delayMillis);\n+        }\n+      } catch (Exception e) {\n+        throw new IOException(\"initTable: Unexpected exception\", e);\n+      }\n+      retryCount++;\n+      versionMarker \u003d table.getItem(versionMarkerKey);\n+    }\n+    return versionMarker;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Item getVersionMarkerItem() throws IOException {\n    final PrimaryKey versionMarkerKey \u003d\n        createVersionMarkerPrimaryKey(VERSION_MARKER);\n    int retryCount \u003d 0;\n    Item versionMarker \u003d table.getItem(versionMarkerKey);\n    while (versionMarker \u003d\u003d null) {\n      try {\n        RetryPolicy.RetryAction action \u003d dataAccessRetryPolicy.shouldRetry(null,\n            retryCount, 0, true);\n        if (action.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAIL) {\n          break;\n        } else {\n          LOG.debug(\"Sleeping {} ms before next retry\", action.delayMillis);\n          Thread.sleep(action.delayMillis);\n        }\n      } catch (Exception e) {\n        throw new IOException(\"initTable: Unexpected exception\", e);\n      }\n      retryCount++;\n      versionMarker \u003d table.getItem(versionMarkerKey);\n    }\n    return versionMarker;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}