{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InputSampler.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
  "functionStartLine": 346,
  "functionEndLine": 408,
  "numCommitsSeen": 9,
  "timeTaken": 4521,
  "changeHistory": [
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5800. Use Job#getInstance instead of deprecated constructors. (aajisaka)\n",
      "commitDate": "03/02/15 2:30 PM",
      "commitName": "bd69fb2d44403e930d1fc0868ed1dd2a49dd9659",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/09/13 11:31 AM",
      "commitNameOld": "75c31df9dd1d9435aec4cc245e1e58ca326e6159",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 511.17,
      "commitsBetweenForRepo": 3818,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   public int run(String[] args) throws Exception {\n-    Job job \u003d new Job(getConf());\n+    Job job \u003d Job.getInstance(getConf());\n     ArrayList\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n     Sampler\u003cK,V\u003e sampler \u003d null;\n     for(int i\u003d0; i \u003c args.length; ++i) {\n       try {\n         if (\"-r\".equals(args[i])) {\n           job.setNumReduceTasks(Integer.parseInt(args[++i]));\n         } else if (\"-inFormat\".equals(args[i])) {\n           job.setInputFormatClass(\n               Class.forName(args[++i]).asSubclass(InputFormat.class));\n         } else if (\"-keyClass\".equals(args[i])) {\n           job.setMapOutputKeyClass(\n               Class.forName(args[++i]).asSubclass(WritableComparable.class));\n         } else if (\"-splitSample\".equals(args[i])) {\n           int numSamples \u003d Integer.parseInt(args[++i]);\n           int maxSplits \u003d Integer.parseInt(args[++i]);\n           if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n           sampler \u003d new SplitSampler\u003cK,V\u003e(numSamples, maxSplits);\n         } else if (\"-splitRandom\".equals(args[i])) {\n           double pcnt \u003d Double.parseDouble(args[++i]);\n           int numSamples \u003d Integer.parseInt(args[++i]);\n           int maxSplits \u003d Integer.parseInt(args[++i]);\n           if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n           sampler \u003d new RandomSampler\u003cK,V\u003e(pcnt, numSamples, maxSplits);\n         } else if (\"-splitInterval\".equals(args[i])) {\n           double pcnt \u003d Double.parseDouble(args[++i]);\n           int maxSplits \u003d Integer.parseInt(args[++i]);\n           if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n           sampler \u003d new IntervalSampler\u003cK,V\u003e(pcnt, maxSplits);\n         } else {\n           otherArgs.add(args[i]);\n         }\n       } catch (NumberFormatException except) {\n         System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n         return printUsage();\n       } catch (ArrayIndexOutOfBoundsException except) {\n         System.out.println(\"ERROR: Required parameter missing from \" +\n             args[i-1]);\n         return printUsage();\n       }\n     }\n     if (job.getNumReduceTasks() \u003c\u003d 1) {\n       System.err.println(\"Sampler requires more than one reducer\");\n       return printUsage();\n     }\n     if (otherArgs.size() \u003c 2) {\n       System.out.println(\"ERROR: Wrong number of parameters: \");\n       return printUsage();\n     }\n     if (null \u003d\u003d sampler) {\n       sampler \u003d new RandomSampler\u003cK,V\u003e(0.1, 10000, 10);\n     }\n \n     Path outf \u003d new Path(otherArgs.remove(otherArgs.size() - 1));\n     TotalOrderPartitioner.setPartitionFile(getConf(), outf);\n     for (String s : otherArgs) {\n       FileInputFormat.addInputPath(job, new Path(s));\n     }\n     InputSampler.\u003cK,V\u003ewritePartitionFile(job, sampler);\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Job job \u003d Job.getInstance(getConf());\n    ArrayList\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    Sampler\u003cK,V\u003e sampler \u003d null;\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          job.setNumReduceTasks(Integer.parseInt(args[++i]));\n        } else if (\"-inFormat\".equals(args[i])) {\n          job.setInputFormatClass(\n              Class.forName(args[++i]).asSubclass(InputFormat.class));\n        } else if (\"-keyClass\".equals(args[i])) {\n          job.setMapOutputKeyClass(\n              Class.forName(args[++i]).asSubclass(WritableComparable.class));\n        } else if (\"-splitSample\".equals(args[i])) {\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new SplitSampler\u003cK,V\u003e(numSamples, maxSplits);\n        } else if (\"-splitRandom\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new RandomSampler\u003cK,V\u003e(pcnt, numSamples, maxSplits);\n        } else if (\"-splitInterval\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new IntervalSampler\u003cK,V\u003e(pcnt, maxSplits);\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage();\n      }\n    }\n    if (job.getNumReduceTasks() \u003c\u003d 1) {\n      System.err.println(\"Sampler requires more than one reducer\");\n      return printUsage();\n    }\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n    if (null \u003d\u003d sampler) {\n      sampler \u003d new RandomSampler\u003cK,V\u003e(0.1, 10000, 10);\n    }\n\n    Path outf \u003d new Path(otherArgs.remove(otherArgs.size() - 1));\n    TotalOrderPartitioner.setPartitionFile(getConf(), outf);\n    for (String s : otherArgs) {\n      FileInputFormat.addInputPath(job, new Path(s));\n    }\n    InputSampler.\u003cK,V\u003ewritePartitionFile(job, sampler);\n\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Job job \u003d new Job(getConf());\n    ArrayList\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    Sampler\u003cK,V\u003e sampler \u003d null;\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          job.setNumReduceTasks(Integer.parseInt(args[++i]));\n        } else if (\"-inFormat\".equals(args[i])) {\n          job.setInputFormatClass(\n              Class.forName(args[++i]).asSubclass(InputFormat.class));\n        } else if (\"-keyClass\".equals(args[i])) {\n          job.setMapOutputKeyClass(\n              Class.forName(args[++i]).asSubclass(WritableComparable.class));\n        } else if (\"-splitSample\".equals(args[i])) {\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new SplitSampler\u003cK,V\u003e(numSamples, maxSplits);\n        } else if (\"-splitRandom\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new RandomSampler\u003cK,V\u003e(pcnt, numSamples, maxSplits);\n        } else if (\"-splitInterval\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new IntervalSampler\u003cK,V\u003e(pcnt, maxSplits);\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage();\n      }\n    }\n    if (job.getNumReduceTasks() \u003c\u003d 1) {\n      System.err.println(\"Sampler requires more than one reducer\");\n      return printUsage();\n    }\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n    if (null \u003d\u003d sampler) {\n      sampler \u003d new RandomSampler\u003cK,V\u003e(0.1, 10000, 10);\n    }\n\n    Path outf \u003d new Path(otherArgs.remove(otherArgs.size() - 1));\n    TotalOrderPartitioner.setPartitionFile(getConf(), outf);\n    for (String s : otherArgs) {\n      FileInputFormat.addInputPath(job, new Path(s));\n    }\n    InputSampler.\u003cK,V\u003ewritePartitionFile(job, sampler);\n\n    return 0;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Job job \u003d new Job(getConf());\n    ArrayList\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    Sampler\u003cK,V\u003e sampler \u003d null;\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          job.setNumReduceTasks(Integer.parseInt(args[++i]));\n        } else if (\"-inFormat\".equals(args[i])) {\n          job.setInputFormatClass(\n              Class.forName(args[++i]).asSubclass(InputFormat.class));\n        } else if (\"-keyClass\".equals(args[i])) {\n          job.setMapOutputKeyClass(\n              Class.forName(args[++i]).asSubclass(WritableComparable.class));\n        } else if (\"-splitSample\".equals(args[i])) {\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new SplitSampler\u003cK,V\u003e(numSamples, maxSplits);\n        } else if (\"-splitRandom\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new RandomSampler\u003cK,V\u003e(pcnt, numSamples, maxSplits);\n        } else if (\"-splitInterval\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new IntervalSampler\u003cK,V\u003e(pcnt, maxSplits);\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage();\n      }\n    }\n    if (job.getNumReduceTasks() \u003c\u003d 1) {\n      System.err.println(\"Sampler requires more than one reducer\");\n      return printUsage();\n    }\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n    if (null \u003d\u003d sampler) {\n      sampler \u003d new RandomSampler\u003cK,V\u003e(0.1, 10000, 10);\n    }\n\n    Path outf \u003d new Path(otherArgs.remove(otherArgs.size() - 1));\n    TotalOrderPartitioner.setPartitionFile(getConf(), outf);\n    for (String s : otherArgs) {\n      FileInputFormat.addInputPath(job, new Path(s));\n    }\n    InputSampler.\u003cK,V\u003ewritePartitionFile(job, sampler);\n\n    return 0;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,63 @@\n+  public int run(String[] args) throws Exception {\n+    Job job \u003d new Job(getConf());\n+    ArrayList\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n+    Sampler\u003cK,V\u003e sampler \u003d null;\n+    for(int i\u003d0; i \u003c args.length; ++i) {\n+      try {\n+        if (\"-r\".equals(args[i])) {\n+          job.setNumReduceTasks(Integer.parseInt(args[++i]));\n+        } else if (\"-inFormat\".equals(args[i])) {\n+          job.setInputFormatClass(\n+              Class.forName(args[++i]).asSubclass(InputFormat.class));\n+        } else if (\"-keyClass\".equals(args[i])) {\n+          job.setMapOutputKeyClass(\n+              Class.forName(args[++i]).asSubclass(WritableComparable.class));\n+        } else if (\"-splitSample\".equals(args[i])) {\n+          int numSamples \u003d Integer.parseInt(args[++i]);\n+          int maxSplits \u003d Integer.parseInt(args[++i]);\n+          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n+          sampler \u003d new SplitSampler\u003cK,V\u003e(numSamples, maxSplits);\n+        } else if (\"-splitRandom\".equals(args[i])) {\n+          double pcnt \u003d Double.parseDouble(args[++i]);\n+          int numSamples \u003d Integer.parseInt(args[++i]);\n+          int maxSplits \u003d Integer.parseInt(args[++i]);\n+          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n+          sampler \u003d new RandomSampler\u003cK,V\u003e(pcnt, numSamples, maxSplits);\n+        } else if (\"-splitInterval\".equals(args[i])) {\n+          double pcnt \u003d Double.parseDouble(args[++i]);\n+          int maxSplits \u003d Integer.parseInt(args[++i]);\n+          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n+          sampler \u003d new IntervalSampler\u003cK,V\u003e(pcnt, maxSplits);\n+        } else {\n+          otherArgs.add(args[i]);\n+        }\n+      } catch (NumberFormatException except) {\n+        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n+        return printUsage();\n+      } catch (ArrayIndexOutOfBoundsException except) {\n+        System.out.println(\"ERROR: Required parameter missing from \" +\n+            args[i-1]);\n+        return printUsage();\n+      }\n+    }\n+    if (job.getNumReduceTasks() \u003c\u003d 1) {\n+      System.err.println(\"Sampler requires more than one reducer\");\n+      return printUsage();\n+    }\n+    if (otherArgs.size() \u003c 2) {\n+      System.out.println(\"ERROR: Wrong number of parameters: \");\n+      return printUsage();\n+    }\n+    if (null \u003d\u003d sampler) {\n+      sampler \u003d new RandomSampler\u003cK,V\u003e(0.1, 10000, 10);\n+    }\n+\n+    Path outf \u003d new Path(otherArgs.remove(otherArgs.size() - 1));\n+    TotalOrderPartitioner.setPartitionFile(getConf(), outf);\n+    for (String s : otherArgs) {\n+      FileInputFormat.addInputPath(job, new Path(s));\n+    }\n+    InputSampler.\u003cK,V\u003ewritePartitionFile(job, sampler);\n+\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Job job \u003d new Job(getConf());\n    ArrayList\u003cString\u003e otherArgs \u003d new ArrayList\u003cString\u003e();\n    Sampler\u003cK,V\u003e sampler \u003d null;\n    for(int i\u003d0; i \u003c args.length; ++i) {\n      try {\n        if (\"-r\".equals(args[i])) {\n          job.setNumReduceTasks(Integer.parseInt(args[++i]));\n        } else if (\"-inFormat\".equals(args[i])) {\n          job.setInputFormatClass(\n              Class.forName(args[++i]).asSubclass(InputFormat.class));\n        } else if (\"-keyClass\".equals(args[i])) {\n          job.setMapOutputKeyClass(\n              Class.forName(args[++i]).asSubclass(WritableComparable.class));\n        } else if (\"-splitSample\".equals(args[i])) {\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new SplitSampler\u003cK,V\u003e(numSamples, maxSplits);\n        } else if (\"-splitRandom\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int numSamples \u003d Integer.parseInt(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new RandomSampler\u003cK,V\u003e(pcnt, numSamples, maxSplits);\n        } else if (\"-splitInterval\".equals(args[i])) {\n          double pcnt \u003d Double.parseDouble(args[++i]);\n          int maxSplits \u003d Integer.parseInt(args[++i]);\n          if (0 \u003e\u003d maxSplits) maxSplits \u003d Integer.MAX_VALUE;\n          sampler \u003d new IntervalSampler\u003cK,V\u003e(pcnt, maxSplits);\n        } else {\n          otherArgs.add(args[i]);\n        }\n      } catch (NumberFormatException except) {\n        System.out.println(\"ERROR: Integer expected instead of \" + args[i]);\n        return printUsage();\n      } catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" +\n            args[i-1]);\n        return printUsage();\n      }\n    }\n    if (job.getNumReduceTasks() \u003c\u003d 1) {\n      System.err.println(\"Sampler requires more than one reducer\");\n      return printUsage();\n    }\n    if (otherArgs.size() \u003c 2) {\n      System.out.println(\"ERROR: Wrong number of parameters: \");\n      return printUsage();\n    }\n    if (null \u003d\u003d sampler) {\n      sampler \u003d new RandomSampler\u003cK,V\u003e(0.1, 10000, 10);\n    }\n\n    Path outf \u003d new Path(otherArgs.remove(otherArgs.size() - 1));\n    TotalOrderPartitioner.setPartitionFile(getConf(), outf);\n    for (String s : otherArgs) {\n      FileInputFormat.addInputPath(job, new Path(s));\n    }\n    InputSampler.\u003cK,V\u003ewritePartitionFile(job, sampler);\n\n    return 0;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/partition/InputSampler.java"
    }
  }
}