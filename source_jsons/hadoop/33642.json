{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerCommandExecutor.java",
  "functionName": "getContainerStatus",
  "functionId": "getContainerStatus___containerId-String__privilegedOperationExecutor-PrivilegedOperationExecutor__nmContext-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
  "functionStartLine": 111,
  "functionEndLine": 129,
  "numCommitsSeen": 22,
  "timeTaken": 4371,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "fd5cb2c9468070abdea3305974ecfc3aa4b0be12"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": "Ybodychange",
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ymultichange(Yparameterchange,Ybodychange)",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ymultichange(Yparameterchange,Ybodychange)",
    "fd5cb2c9468070abdea3305974ecfc3aa4b0be12": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/09/18 5:18 PM",
      "commitNameOld": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 188.96,
      "commitsBetweenForRepo": 1544,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,19 @@\n   public static DockerContainerStatus getContainerStatus(String containerId,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       Context nmContext) {\n     try {\n       String currentContainerStatus \u003d\n           executeStatusCommand(containerId,\n           privilegedOperationExecutor, nmContext);\n       DockerContainerStatus dockerContainerStatus \u003d parseContainerStatus(\n           currentContainerStatus);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n-            + \" ContainerId: \" + containerId);\n-      }\n+      LOG.debug(\"Container Status: {} ContainerId: {}\",\n+          dockerContainerStatus.getName(), containerId);\n+\n       return dockerContainerStatus;\n     } catch (ContainerExecutionException e) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Container Status: \"\n-            + DockerContainerStatus.NONEXISTENT.getName()\n-            + \" ContainerId: \" + containerId);\n-      }\n+      LOG.debug(\"Container Status: {} ContainerId: {}\",\n+          DockerContainerStatus.NONEXISTENT.getName(), containerId);\n       return DockerContainerStatus.NONEXISTENT;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      Context nmContext) {\n    try {\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId,\n          privilegedOperationExecutor, nmContext);\n      DockerContainerStatus dockerContainerStatus \u003d parseContainerStatus(\n          currentContainerStatus);\n      LOG.debug(\"Container Status: {} ContainerId: {}\",\n          dockerContainerStatus.getName(), containerId);\n\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      LOG.debug(\"Container Status: {} ContainerId: {}\",\n          DockerContainerStatus.NONEXISTENT.getName(), containerId);\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
      "extendedDetails": {}
    },
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
      "commitDate": "07/09/18 5:18 PM",
      "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/08/18 8:43 AM",
      "commitNameOld": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 36.36,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,23 @@\n   public static DockerContainerStatus getContainerStatus(String containerId,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       Context nmContext) {\n     try {\n-      DockerContainerStatus dockerContainerStatus;\n       String currentContainerStatus \u003d\n           executeStatusCommand(containerId,\n           privilegedOperationExecutor, nmContext);\n-      if (currentContainerStatus \u003d\u003d null) {\n-        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.CREATED.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.RUNNING.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.STOPPED.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.RESTARTING.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.REMOVING.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.DEAD.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.EXITED.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n-      } else if (currentContainerStatus\n-          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n-        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n-      } else {\n-        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n-      }\n+      DockerContainerStatus dockerContainerStatus \u003d parseContainerStatus(\n+          currentContainerStatus);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return dockerContainerStatus;\n     } catch (ContainerExecutionException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \"\n             + DockerContainerStatus.NONEXISTENT.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return DockerContainerStatus.NONEXISTENT;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      Context nmContext) {\n    try {\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId,\n          privilegedOperationExecutor, nmContext);\n      DockerContainerStatus dockerContainerStatus \u003d parseContainerStatus(\n          currentContainerStatus);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \"\n            + DockerContainerStatus.NONEXISTENT.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
      "extendedDetails": {}
    },
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
          "commitDate": "02/08/18 8:43 AM",
          "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "02/05/18 11:33 AM",
          "commitNameOld": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 91.88,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   public static DockerContainerStatus getContainerStatus(String containerId,\n-      Configuration conf,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       Context nmContext) {\n     try {\n       DockerContainerStatus dockerContainerStatus;\n       String currentContainerStatus \u003d\n-          executeStatusCommand(containerId, conf,\n+          executeStatusCommand(containerId,\n           privilegedOperationExecutor, nmContext);\n       if (currentContainerStatus \u003d\u003d null) {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.CREATED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RUNNING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.STOPPED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RESTARTING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.REMOVING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.DEAD.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.EXITED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n       } else {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return dockerContainerStatus;\n     } catch (ContainerExecutionException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \"\n             + DockerContainerStatus.NONEXISTENT.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return DockerContainerStatus.NONEXISTENT;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      Context nmContext) {\n    try {\n      DockerContainerStatus dockerContainerStatus;\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId,\n          privilegedOperationExecutor, nmContext);\n      if (currentContainerStatus \u003d\u003d null) {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.CREATED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RUNNING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.STOPPED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RESTARTING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.REMOVING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.DEAD.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.EXITED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n      } else {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \"\n            + DockerContainerStatus.NONEXISTENT.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {
            "oldValue": "[containerId-String, conf-Configuration, privilegedOperationExecutor-PrivilegedOperationExecutor, nmContext-Context]",
            "newValue": "[containerId-String, privilegedOperationExecutor-PrivilegedOperationExecutor, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
          "commitDate": "02/08/18 8:43 AM",
          "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "02/05/18 11:33 AM",
          "commitNameOld": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 91.88,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n   public static DockerContainerStatus getContainerStatus(String containerId,\n-      Configuration conf,\n       PrivilegedOperationExecutor privilegedOperationExecutor,\n       Context nmContext) {\n     try {\n       DockerContainerStatus dockerContainerStatus;\n       String currentContainerStatus \u003d\n-          executeStatusCommand(containerId, conf,\n+          executeStatusCommand(containerId,\n           privilegedOperationExecutor, nmContext);\n       if (currentContainerStatus \u003d\u003d null) {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.CREATED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RUNNING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.STOPPED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RESTARTING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.REMOVING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.DEAD.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.EXITED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n       } else {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return dockerContainerStatus;\n     } catch (ContainerExecutionException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \"\n             + DockerContainerStatus.NONEXISTENT.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return DockerContainerStatus.NONEXISTENT;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      Context nmContext) {\n    try {\n      DockerContainerStatus dockerContainerStatus;\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId,\n          privilegedOperationExecutor, nmContext);\n      if (currentContainerStatus \u003d\u003d null) {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.CREATED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RUNNING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.STOPPED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RESTARTING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.REMOVING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.DEAD.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.EXITED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n      } else {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \"\n            + DockerContainerStatus.NONEXISTENT.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
          "commitDate": "20/04/18 10:49 AM",
          "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "10/04/18 4:25 PM",
          "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,52 @@\n   public static DockerContainerStatus getContainerStatus(String containerId,\n       Configuration conf,\n-      PrivilegedOperationExecutor privilegedOperationExecutor) {\n+      PrivilegedOperationExecutor privilegedOperationExecutor,\n+      Context nmContext) {\n     try {\n       DockerContainerStatus dockerContainerStatus;\n       String currentContainerStatus \u003d\n-          executeStatusCommand(containerId, conf, privilegedOperationExecutor);\n+          executeStatusCommand(containerId, conf,\n+          privilegedOperationExecutor, nmContext);\n       if (currentContainerStatus \u003d\u003d null) {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.CREATED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RUNNING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.STOPPED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RESTARTING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.REMOVING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.DEAD.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.EXITED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n       } else {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return dockerContainerStatus;\n     } catch (ContainerExecutionException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \"\n             + DockerContainerStatus.NONEXISTENT.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return DockerContainerStatus.NONEXISTENT;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      Context nmContext) {\n    try {\n      DockerContainerStatus dockerContainerStatus;\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId, conf,\n          privilegedOperationExecutor, nmContext);\n      if (currentContainerStatus \u003d\u003d null) {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.CREATED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RUNNING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.STOPPED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RESTARTING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.REMOVING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.DEAD.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.EXITED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n      } else {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \"\n            + DockerContainerStatus.NONEXISTENT.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {
            "oldValue": "[containerId-String, conf-Configuration, privilegedOperationExecutor-PrivilegedOperationExecutor]",
            "newValue": "[containerId-String, conf-Configuration, privilegedOperationExecutor-PrivilegedOperationExecutor, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
          "commitDate": "20/04/18 10:49 AM",
          "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "10/04/18 4:25 PM",
          "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,52 @@\n   public static DockerContainerStatus getContainerStatus(String containerId,\n       Configuration conf,\n-      PrivilegedOperationExecutor privilegedOperationExecutor) {\n+      PrivilegedOperationExecutor privilegedOperationExecutor,\n+      Context nmContext) {\n     try {\n       DockerContainerStatus dockerContainerStatus;\n       String currentContainerStatus \u003d\n-          executeStatusCommand(containerId, conf, privilegedOperationExecutor);\n+          executeStatusCommand(containerId, conf,\n+          privilegedOperationExecutor, nmContext);\n       if (currentContainerStatus \u003d\u003d null) {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.CREATED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RUNNING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.STOPPED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.RESTARTING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.REMOVING.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.DEAD.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.EXITED.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n       } else if (currentContainerStatus\n           .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n         dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n       } else {\n         dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n       }\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return dockerContainerStatus;\n     } catch (ContainerExecutionException e) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: \"\n             + DockerContainerStatus.NONEXISTENT.getName()\n             + \" ContainerId: \" + containerId);\n       }\n       return DockerContainerStatus.NONEXISTENT;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor,\n      Context nmContext) {\n    try {\n      DockerContainerStatus dockerContainerStatus;\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId, conf,\n          privilegedOperationExecutor, nmContext);\n      if (currentContainerStatus \u003d\u003d null) {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.CREATED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RUNNING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.STOPPED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RESTARTING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.REMOVING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.DEAD.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.EXITED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n      } else {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \"\n            + DockerContainerStatus.NONEXISTENT.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "fd5cb2c9468070abdea3305974ecfc3aa4b0be12": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6374. Improve test coverage and add utility classes for common Docker operations. Contributed by Shane Kumpf\n",
      "commitDate": "03/05/17 2:49 PM",
      "commitName": "fd5cb2c9468070abdea3305974ecfc3aa4b0be12",
      "commitAuthor": "Sidharta S",
      "diff": "@@ -0,0 +1,50 @@\n+  public static DockerContainerStatus getContainerStatus(String containerId,\n+      Configuration conf,\n+      PrivilegedOperationExecutor privilegedOperationExecutor) {\n+    try {\n+      DockerContainerStatus dockerContainerStatus;\n+      String currentContainerStatus \u003d\n+          executeStatusCommand(containerId, conf, privilegedOperationExecutor);\n+      if (currentContainerStatus \u003d\u003d null) {\n+        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.CREATED.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.RUNNING.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.STOPPED.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.RESTARTING.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.REMOVING.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.DEAD.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.EXITED.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n+      } else if (currentContainerStatus\n+          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n+        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n+      } else {\n+        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n+            + \" ContainerId: \" + containerId);\n+      }\n+      return dockerContainerStatus;\n+    } catch (ContainerExecutionException e) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Container Status: \"\n+            + DockerContainerStatus.NONEXISTENT.getName()\n+            + \" ContainerId: \" + containerId);\n+      }\n+      return DockerContainerStatus.NONEXISTENT;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static DockerContainerStatus getContainerStatus(String containerId,\n      Configuration conf,\n      PrivilegedOperationExecutor privilegedOperationExecutor) {\n    try {\n      DockerContainerStatus dockerContainerStatus;\n      String currentContainerStatus \u003d\n          executeStatusCommand(containerId, conf, privilegedOperationExecutor);\n      if (currentContainerStatus \u003d\u003d null) {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.CREATED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RUNNING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.STOPPED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.RESTARTING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.REMOVING.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.DEAD.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.EXITED.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n      } else if (currentContainerStatus\n          .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n        dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n      } else {\n        dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \" + dockerContainerStatus.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return dockerContainerStatus;\n    } catch (ContainerExecutionException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: \"\n            + DockerContainerStatus.NONEXISTENT.getName()\n            + \" ContainerId: \" + containerId);\n      }\n      return DockerContainerStatus.NONEXISTENT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java"
    }
  }
}