{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FadvisedFileRegion.java",
  "functionName": "customShuffleTransfer",
  "functionId": "customShuffleTransfer___target-WritableByteChannel__position-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java",
  "functionStartLine": 101,
  "functionEndLine": 146,
  "numCommitsSeen": 10,
  "timeTaken": 1413,
  "changeHistory": [
    "ac7d0604bc73c0925eff240ad9837e14719d57b7",
    "a90a5c24525bf6b92c49f7476b6de286338018c0"
  ],
  "changeHistoryShort": {
    "ac7d0604bc73c0925eff240ad9837e14719d57b7": "Ybodychange",
    "a90a5c24525bf6b92c49f7476b6de286338018c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ac7d0604bc73c0925eff240ad9837e14719d57b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6923. Optimize MapReduce Shuffle I/O for small partitions. Contributed by Robert Schmidtke.\n",
      "commitDate": "09/08/17 3:39 PM",
      "commitName": "ac7d0604bc73c0925eff240ad9837e14719d57b7",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "10/05/16 8:45 AM",
      "commitNameOld": "cd35b692de88e3afe7f41405da635c3fbd9b4650",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 456.29,
      "commitsBetweenForRepo": 2965,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,46 @@\n   long customShuffleTransfer(WritableByteChannel target, long position)\n       throws IOException {\n     long actualCount \u003d this.count - position;\n     if (actualCount \u003c 0 || position \u003c 0) {\n       throw new IllegalArgumentException(\n           \"position out of range: \" + position +\n           \" (expected: 0 - \" + (this.count - 1) + \u0027)\u0027);\n     }\n     if (actualCount \u003d\u003d 0) {\n       return 0L;\n     }\n     \n     long trans \u003d actualCount;\n     int readSize;\n-    ByteBuffer byteBuffer \u003d ByteBuffer.allocate(this.shuffleBufferSize);\n+    ByteBuffer byteBuffer \u003d ByteBuffer.allocate(\n+        Math.min(\n+            this.shuffleBufferSize,\n+            trans \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) trans));\n     \n     while(trans \u003e 0L \u0026\u0026\n         (readSize \u003d fileChannel.read(byteBuffer, this.position+position)) \u003e 0) {\n       //adjust counters and buffer limit\n       if(readSize \u003c trans) {\n         trans -\u003d readSize;\n         position +\u003d readSize;\n         byteBuffer.flip();\n       } else {\n         //We can read more than we need if the actualCount is not multiple \n         //of the byteBuffer size and file is big enough. In that case we cannot\n         //use flip method but we need to set buffer limit manually to trans.\n         byteBuffer.limit((int)trans);\n         byteBuffer.position(0);\n         position +\u003d trans; \n         trans \u003d 0;\n       }\n       \n       //write data to the target\n       while(byteBuffer.hasRemaining()) {\n         target.write(byteBuffer);\n       }\n       \n       byteBuffer.clear();\n     }\n     \n     return actualCount - trans;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  long customShuffleTransfer(WritableByteChannel target, long position)\n      throws IOException {\n    long actualCount \u003d this.count - position;\n    if (actualCount \u003c 0 || position \u003c 0) {\n      throw new IllegalArgumentException(\n          \"position out of range: \" + position +\n          \" (expected: 0 - \" + (this.count - 1) + \u0027)\u0027);\n    }\n    if (actualCount \u003d\u003d 0) {\n      return 0L;\n    }\n    \n    long trans \u003d actualCount;\n    int readSize;\n    ByteBuffer byteBuffer \u003d ByteBuffer.allocate(\n        Math.min(\n            this.shuffleBufferSize,\n            trans \u003e Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) trans));\n    \n    while(trans \u003e 0L \u0026\u0026\n        (readSize \u003d fileChannel.read(byteBuffer, this.position+position)) \u003e 0) {\n      //adjust counters and buffer limit\n      if(readSize \u003c trans) {\n        trans -\u003d readSize;\n        position +\u003d readSize;\n        byteBuffer.flip();\n      } else {\n        //We can read more than we need if the actualCount is not multiple \n        //of the byteBuffer size and file is big enough. In that case we cannot\n        //use flip method but we need to set buffer limit manually to trans.\n        byteBuffer.limit((int)trans);\n        byteBuffer.position(0);\n        position +\u003d trans; \n        trans \u003d 0;\n      }\n      \n      //write data to the target\n      while(byteBuffer.hasRemaining()) {\n        target.write(byteBuffer);\n      }\n      \n      byteBuffer.clear();\n    }\n    \n    return actualCount - trans;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java",
      "extendedDetails": {}
    },
    "a90a5c24525bf6b92c49f7476b6de286338018c0": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5791. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 11:57 AM",
      "commitName": "a90a5c24525bf6b92c49f7476b6de286338018c0",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,43 @@\n+  long customShuffleTransfer(WritableByteChannel target, long position)\n+      throws IOException {\n+    long actualCount \u003d this.count - position;\n+    if (actualCount \u003c 0 || position \u003c 0) {\n+      throw new IllegalArgumentException(\n+          \"position out of range: \" + position +\n+          \" (expected: 0 - \" + (this.count - 1) + \u0027)\u0027);\n+    }\n+    if (actualCount \u003d\u003d 0) {\n+      return 0L;\n+    }\n+    \n+    long trans \u003d actualCount;\n+    int readSize;\n+    ByteBuffer byteBuffer \u003d ByteBuffer.allocate(this.shuffleBufferSize);\n+    \n+    while(trans \u003e 0L \u0026\u0026\n+        (readSize \u003d fileChannel.read(byteBuffer, this.position+position)) \u003e 0) {\n+      //adjust counters and buffer limit\n+      if(readSize \u003c trans) {\n+        trans -\u003d readSize;\n+        position +\u003d readSize;\n+        byteBuffer.flip();\n+      } else {\n+        //We can read more than we need if the actualCount is not multiple \n+        //of the byteBuffer size and file is big enough. In that case we cannot\n+        //use flip method but we need to set buffer limit manually to trans.\n+        byteBuffer.limit((int)trans);\n+        byteBuffer.position(0);\n+        position +\u003d trans; \n+        trans \u003d 0;\n+      }\n+      \n+      //write data to the target\n+      while(byteBuffer.hasRemaining()) {\n+        target.write(byteBuffer);\n+      }\n+      \n+      byteBuffer.clear();\n+    }\n+    \n+    return actualCount - trans;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  long customShuffleTransfer(WritableByteChannel target, long position)\n      throws IOException {\n    long actualCount \u003d this.count - position;\n    if (actualCount \u003c 0 || position \u003c 0) {\n      throw new IllegalArgumentException(\n          \"position out of range: \" + position +\n          \" (expected: 0 - \" + (this.count - 1) + \u0027)\u0027);\n    }\n    if (actualCount \u003d\u003d 0) {\n      return 0L;\n    }\n    \n    long trans \u003d actualCount;\n    int readSize;\n    ByteBuffer byteBuffer \u003d ByteBuffer.allocate(this.shuffleBufferSize);\n    \n    while(trans \u003e 0L \u0026\u0026\n        (readSize \u003d fileChannel.read(byteBuffer, this.position+position)) \u003e 0) {\n      //adjust counters and buffer limit\n      if(readSize \u003c trans) {\n        trans -\u003d readSize;\n        position +\u003d readSize;\n        byteBuffer.flip();\n      } else {\n        //We can read more than we need if the actualCount is not multiple \n        //of the byteBuffer size and file is big enough. In that case we cannot\n        //use flip method but we need to set buffer limit manually to trans.\n        byteBuffer.limit((int)trans);\n        byteBuffer.position(0);\n        position +\u003d trans; \n        trans \u003d 0;\n      }\n      \n      //write data to the target\n      while(byteBuffer.hasRemaining()) {\n        target.write(byteBuffer);\n      }\n      \n      byteBuffer.clear();\n    }\n    \n    return actualCount - trans;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/FadvisedFileRegion.java"
    }
  }
}