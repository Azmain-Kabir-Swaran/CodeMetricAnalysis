{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RPC.java",
  "functionName": "registerProtocolAndImpl",
  "functionId": "registerProtocolAndImpl___rpcKind-RpcKind__protocolClass-Class__?____protocolImpl-Object",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
  "functionStartLine": 956,
  "functionEndLine": 979,
  "numCommitsSeen": 49,
  "timeTaken": 2671,
  "changeHistory": [
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
    "3eb61be352589491117ac2781bb18f55988a8084",
    "65200998c01b17e017d1814e8b1f4d82ac334a23",
    "229a3a23127e33f596d485dec580e31c48ba9057",
    "2d45bfdffdf36a7f9c524cf76f09d2cba64c1528",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d"
  ],
  "changeHistoryShort": {
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": "Ybodychange",
    "3eb61be352589491117ac2781bb18f55988a8084": "Yexceptionschange",
    "65200998c01b17e017d1814e8b1f4d82ac334a23": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "229a3a23127e33f596d485dec580e31c48ba9057": "Ybodychange",
    "2d45bfdffdf36a7f9c524cf76f09d2cba64c1528": "Ybodychange",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11741. Add LOG.isDebugEnabled() guard for some LOG.debug(). Contributed by Walter Su.\n",
      "commitDate": "25/03/15 12:36 AM",
      "commitName": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "26/01/15 2:04 PM",
      "commitNameOld": "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 57.4,
      "commitsBetweenForRepo": 557,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n    void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n        Object protocolImpl) {\n      String protocolName \u003d RPC.getProtocolName(protocolClass);\n      long version;\n      \n \n      try {\n        version \u003d RPC.getProtocolVersion(protocolClass);\n      } catch (Exception ex) {\n        LOG.warn(\"Protocol \"  + protocolClass + \n             \" NOT registered as cannot get protocol version \");\n        return;\n      }\n \n \n      getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n-         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n-         \" protocolClass\u003d\" + protocolClass.getName());\n+     if (LOG.isDebugEnabled()) {\n+       LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +\n+           \" version\u003d\" + version +\n+           \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() +\n+           \" protocolClass\u003d\" + protocolClass.getName());\n+     }\n    }\n\\ No newline at end of file\n",
      "actualSource": "   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n       Object protocolImpl) {\n     String protocolName \u003d RPC.getProtocolName(protocolClass);\n     long version;\n     \n\n     try {\n       version \u003d RPC.getProtocolVersion(protocolClass);\n     } catch (Exception ex) {\n       LOG.warn(\"Protocol \"  + protocolClass + \n            \" NOT registered as cannot get protocol version \");\n       return;\n     }\n\n\n     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +\n           \" version\u003d\" + version +\n           \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() +\n           \" protocolClass\u003d\" + protocolClass.getName());\n     }\n   }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
      "extendedDetails": {}
    },
    "3eb61be352589491117ac2781bb18f55988a8084": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-9754. Remove unnecessary \"throws IOException/InterruptedException\", and fix generic and other javac warnings.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505610 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/13 12:22 AM",
      "commitName": "3eb61be352589491117ac2781bb18f55988a8084",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/05/13 10:51 AM",
      "commitNameOld": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 78.56,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n    void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n-       Object protocolImpl) throws IOException {\n+       Object protocolImpl) {\n      String protocolName \u003d RPC.getProtocolName(protocolClass);\n      long version;\n      \n \n      try {\n        version \u003d RPC.getProtocolVersion(protocolClass);\n      } catch (Exception ex) {\n        LOG.warn(\"Protocol \"  + protocolClass + \n             \" NOT registered as cannot get protocol version \");\n        return;\n      }\n \n \n      getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n      LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n          \" protocolClass\u003d\" + protocolClass.getName());\n    }\n\\ No newline at end of file\n",
      "actualSource": "   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n       Object protocolImpl) {\n     String protocolName \u003d RPC.getProtocolName(protocolClass);\n     long version;\n     \n\n     try {\n       version \u003d RPC.getProtocolVersion(protocolClass);\n     } catch (Exception ex) {\n       LOG.warn(\"Protocol \"  + protocolClass + \n            \" NOT registered as cannot get protocol version \");\n       return;\n     }\n\n\n     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n         \" protocolClass\u003d\" + protocolClass.getName());\n   }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[]"
      }
    },
    "65200998c01b17e017d1814e8b1f4d82ac334a23": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/11 12:44 PM",
      "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n-        Object protocolImpl) throws IOException {\n-      String protocolName \u003d RPC.getProtocolName(protocolClass);\n-      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n-      long version;\n-      try {\n-        version \u003d vp.getProtocolVersion(protocolName, 0);\n-      } catch (Exception ex) {\n-        LOG.warn(\"Protocol \"  + protocolClass + \n-             \" NOT registered as getProtocolVersion throws exception \");\n-        return;\n-      }\n-      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n-          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-      LOG.debug(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n-          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n-          \" protocolClass\u003d\" + protocolClass.getName());\n-    }\n\\ No newline at end of file\n+   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n+       Object protocolImpl) throws IOException {\n+     String protocolName \u003d RPC.getProtocolName(protocolClass);\n+     long version;\n+     \n+\n+     try {\n+       version \u003d RPC.getProtocolVersion(protocolClass);\n+     } catch (Exception ex) {\n+       LOG.warn(\"Protocol \"  + protocolClass + \n+            \" NOT registered as cannot get protocol version \");\n+       return;\n+     }\n+\n+\n+     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n+         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n+     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n+         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n+         \" protocolClass\u003d\" + protocolClass.getName());\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n       Object protocolImpl) throws IOException {\n     String protocolName \u003d RPC.getProtocolName(protocolClass);\n     long version;\n     \n\n     try {\n       version \u003d RPC.getProtocolVersion(protocolClass);\n     } catch (Exception ex) {\n       LOG.warn(\"Protocol \"  + protocolClass + \n            \" NOT registered as cannot get protocol version \");\n       return;\n     }\n\n\n     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n         \" protocolClass\u003d\" + protocolClass.getName());\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
            "oldMethodName": "registerProtocolAndImpl",
            "newMethodName": "registerProtocolAndImpl"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n-        Object protocolImpl) throws IOException {\n-      String protocolName \u003d RPC.getProtocolName(protocolClass);\n-      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n-      long version;\n-      try {\n-        version \u003d vp.getProtocolVersion(protocolName, 0);\n-      } catch (Exception ex) {\n-        LOG.warn(\"Protocol \"  + protocolClass + \n-             \" NOT registered as getProtocolVersion throws exception \");\n-        return;\n-      }\n-      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n-          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-      LOG.debug(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n-          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n-          \" protocolClass\u003d\" + protocolClass.getName());\n-    }\n\\ No newline at end of file\n+   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n+       Object protocolImpl) throws IOException {\n+     String protocolName \u003d RPC.getProtocolName(protocolClass);\n+     long version;\n+     \n+\n+     try {\n+       version \u003d RPC.getProtocolVersion(protocolClass);\n+     } catch (Exception ex) {\n+       LOG.warn(\"Protocol \"  + protocolClass + \n+            \" NOT registered as cannot get protocol version \");\n+       return;\n+     }\n+\n+\n+     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n+         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n+     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n+         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n+         \" protocolClass\u003d\" + protocolClass.getName());\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n       Object protocolImpl) throws IOException {\n     String protocolName \u003d RPC.getProtocolName(protocolClass);\n     long version;\n     \n\n     try {\n       version \u003d RPC.getProtocolVersion(protocolClass);\n     } catch (Exception ex) {\n       LOG.warn(\"Protocol \"  + protocolClass + \n            \" NOT registered as cannot get protocol version \");\n       return;\n     }\n\n\n     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n         \" protocolClass\u003d\" + protocolClass.getName());\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n-        Object protocolImpl) throws IOException {\n-      String protocolName \u003d RPC.getProtocolName(protocolClass);\n-      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n-      long version;\n-      try {\n-        version \u003d vp.getProtocolVersion(protocolName, 0);\n-      } catch (Exception ex) {\n-        LOG.warn(\"Protocol \"  + protocolClass + \n-             \" NOT registered as getProtocolVersion throws exception \");\n-        return;\n-      }\n-      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n-          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-      LOG.debug(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n-          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n-          \" protocolClass\u003d\" + protocolClass.getName());\n-    }\n\\ No newline at end of file\n+   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n+       Object protocolImpl) throws IOException {\n+     String protocolName \u003d RPC.getProtocolName(protocolClass);\n+     long version;\n+     \n+\n+     try {\n+       version \u003d RPC.getProtocolVersion(protocolClass);\n+     } catch (Exception ex) {\n+       LOG.warn(\"Protocol \"  + protocolClass + \n+            \" NOT registered as cannot get protocol version \");\n+       return;\n+     }\n+\n+\n+     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n+         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n+     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n+         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n+         \" protocolClass\u003d\" + protocolClass.getName());\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n       Object protocolImpl) throws IOException {\n     String protocolName \u003d RPC.getProtocolName(protocolClass);\n     long version;\n     \n\n     try {\n       version \u003d RPC.getProtocolVersion(protocolClass);\n     } catch (Exception ex) {\n       LOG.warn(\"Protocol \"  + protocolClass + \n            \" NOT registered as cannot get protocol version \");\n       return;\n     }\n\n\n     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n         \" protocolClass\u003d\" + protocolClass.getName());\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n-        Object protocolImpl) throws IOException {\n-      String protocolName \u003d RPC.getProtocolName(protocolClass);\n-      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n-      long version;\n-      try {\n-        version \u003d vp.getProtocolVersion(protocolName, 0);\n-      } catch (Exception ex) {\n-        LOG.warn(\"Protocol \"  + protocolClass + \n-             \" NOT registered as getProtocolVersion throws exception \");\n-        return;\n-      }\n-      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n-          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-      LOG.debug(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n-          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n-          \" protocolClass\u003d\" + protocolClass.getName());\n-    }\n\\ No newline at end of file\n+   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n+       Object protocolImpl) throws IOException {\n+     String protocolName \u003d RPC.getProtocolName(protocolClass);\n+     long version;\n+     \n+\n+     try {\n+       version \u003d RPC.getProtocolVersion(protocolClass);\n+     } catch (Exception ex) {\n+       LOG.warn(\"Protocol \"  + protocolClass + \n+            \" NOT registered as cannot get protocol version \");\n+       return;\n+     }\n+\n+\n+     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n+         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n+     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n+         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n+         \" protocolClass\u003d\" + protocolClass.getName());\n+   }\n\\ No newline at end of file\n",
          "actualSource": "   void registerProtocolAndImpl(RpcKind rpcKind, Class\u003c?\u003e protocolClass, \n       Object protocolImpl) throws IOException {\n     String protocolName \u003d RPC.getProtocolName(protocolClass);\n     long version;\n     \n\n     try {\n       version \u003d RPC.getProtocolVersion(protocolClass);\n     } catch (Exception ex) {\n       LOG.warn(\"Protocol \"  + protocolClass + \n            \" NOT registered as cannot get protocol version \");\n       return;\n     }\n\n\n     getProtocolImplMap(rpcKind).put(new ProtoNameVer(protocolName, version),\n         new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n     LOG.debug(\"RpcKind \u003d \" + rpcKind + \" Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n         \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n         \" protocolClass\u003d\" + protocolClass.getName());\n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldValue": "[protocolClass-Class\u003c?\u003e, protocolImpl-Object]",
            "newValue": "[rpcKind-RpcKind, protocolClass-Class\u003c?\u003e, protocolImpl-Object]"
          }
        }
      ]
    },
    "229a3a23127e33f596d485dec580e31c48ba9057": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7858. Drop some info logging to DEBUG level in IPC, metrics, and HTTP. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1206830 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/11 12:27 PM",
      "commitName": "229a3a23127e33f596d485dec580e31c48ba9057",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "04/11/11 10:06 PM",
      "commitNameOld": "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 22.64,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n         Object protocolImpl) throws IOException {\n       String protocolName \u003d RPC.getProtocolName(protocolClass);\n       VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n       long version;\n       try {\n         version \u003d vp.getProtocolVersion(protocolName, 0);\n       } catch (Exception ex) {\n         LOG.warn(\"Protocol \"  + protocolClass + \n              \" NOT registered as getProtocolVersion throws exception \");\n         return;\n       }\n       protocolImplMap.put(new ProtoNameVer(protocolName, version),\n           new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-      LOG.info(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n+      LOG.debug(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n           \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n           \" protocolClass\u003d\" + protocolClass.getName());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n        Object protocolImpl) throws IOException {\n      String protocolName \u003d RPC.getProtocolName(protocolClass);\n      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n      long version;\n      try {\n        version \u003d vp.getProtocolVersion(protocolName, 0);\n      } catch (Exception ex) {\n        LOG.warn(\"Protocol \"  + protocolClass + \n             \" NOT registered as getProtocolVersion throws exception \");\n        return;\n      }\n      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n      LOG.debug(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n          \" protocolClass\u003d\" + protocolClass.getName());\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
      "extendedDetails": {}
    },
    "2d45bfdffdf36a7f9c524cf76f09d2cba64c1528": {
      "type": "Ybodychange",
      "commitMessage": "\n\tHADOOP-7716 RPC protocol registration on SS does not log the protocol name\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178639 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:39 PM",
      "commitName": "2d45bfdffdf36a7f9c524cf76f09d2cba64c1528",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "29/09/11 12:03 PM",
      "commitNameOld": "47c8528bfa9744d57033a7c5bb5f370b3ffe1211",
      "commitAuthorOld": "Doug Cutting",
      "daysBetweenCommits": 4.19,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n     private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n         Object protocolImpl) throws IOException {\n       String protocolName \u003d RPC.getProtocolName(protocolClass);\n       VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n       long version;\n       try {\n         version \u003d vp.getProtocolVersion(protocolName, 0);\n       } catch (Exception ex) {\n         LOG.warn(\"Protocol \"  + protocolClass + \n              \" NOT registered as getProtocolVersion throws exception \");\n         return;\n       }\n       protocolImplMap.put(new ProtoNameVer(protocolName, version),\n           new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n-      LOG.info(\"ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n-          \" protocolClass\u003d\" + protocolClass.getName() + \" version\u003d\" + version);\n+      LOG.info(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n+          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n+          \" protocolClass\u003d\" + protocolClass.getName());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n        Object protocolImpl) throws IOException {\n      String protocolName \u003d RPC.getProtocolName(protocolClass);\n      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n      long version;\n      try {\n        version \u003d vp.getProtocolVersion(protocolName, 0);\n      } catch (Exception ex) {\n        LOG.warn(\"Protocol \"  + protocolClass + \n             \" NOT registered as getProtocolVersion throws exception \");\n        return;\n      }\n      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n      LOG.info(\"Protocol Name \u003d \" + protocolName +  \" version\u003d\" + version +\n          \" ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n          \" protocolClass\u003d\" + protocolClass.getName());\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
      "extendedDetails": {}
    },
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": {
      "type": "Yintroduced",
      "commitMessage": "  HADOOP-7524 and MapReduce-2887 Change RPC to allow multiple protocols including multuple versions of the same protocol (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/09/11 5:31 PM",
      "commitName": "b97a4d40c8752451fc02168a7f6eb3e93e459c2d",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,17 @@\n+    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n+        Object protocolImpl) throws IOException {\n+      String protocolName \u003d RPC.getProtocolName(protocolClass);\n+      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n+      long version;\n+      try {\n+        version \u003d vp.getProtocolVersion(protocolName, 0);\n+      } catch (Exception ex) {\n+        LOG.warn(\"Protocol \"  + protocolClass + \n+             \" NOT registered as getProtocolVersion throws exception \");\n+        return;\n+      }\n+      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n+          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n+      LOG.info(\"ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n+          \" protocolClass\u003d\" + protocolClass.getName() + \" version\u003d\" + version);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void registerProtocolAndImpl(Class\u003c?\u003e protocolClass, \n        Object protocolImpl) throws IOException {\n      String protocolName \u003d RPC.getProtocolName(protocolClass);\n      VersionedProtocol vp \u003d (VersionedProtocol) protocolImpl;\n      long version;\n      try {\n        version \u003d vp.getProtocolVersion(protocolName, 0);\n      } catch (Exception ex) {\n        LOG.warn(\"Protocol \"  + protocolClass + \n             \" NOT registered as getProtocolVersion throws exception \");\n        return;\n      }\n      protocolImplMap.put(new ProtoNameVer(protocolName, version),\n          new ProtoClassProtoImpl(protocolClass, protocolImpl)); \n      LOG.info(\"ProtocolImpl\u003d\" + protocolImpl.getClass().getName() + \n          \" protocolClass\u003d\" + protocolClass.getName() + \" version\u003d\" + version);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java"
    }
  }
}