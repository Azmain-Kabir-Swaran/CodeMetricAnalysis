{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftRestClient.java",
  "functionName": "extractResult",
  "functionId": "extractResult___req-AuthPostRequest__resp-HttpResponse",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
  "functionStartLine": 1140,
  "functionEndLine": 1240,
  "numCommitsSeen": 10,
  "timeTaken": 2781,
  "changeHistory": [
    "62579b69a0a294ba1ea14cf76c650b640f89f331",
    "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "62579b69a0a294ba1ea14cf76c650b640f89f331": "Ymultichange(Yparameterchange,Ybodychange)",
    "ecbfd68974691cc9103ae477d10c15c7f21b6dea": "Ybodychange",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "62579b69a0a294ba1ea14cf76c650b640f89f331": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
      "commitDate": "27/04/17 12:57 AM",
      "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
          "commitDate": "27/04/17 12:57 AM",
          "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "01/10/15 9:25 AM",
          "commitNameOld": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 573.65,
          "commitsBetweenForRepo": 3812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,100 +1,101 @@\n-    public AccessToken extractResult(AuthPostMethod method) throws IOException {\n+    public AccessToken extractResult(AuthPostRequest req, HttpResponse resp)\n+        throws IOException {\n       //initial check for failure codes leading to authentication failures\n-      if (method.getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n+      if (resp.getStatusLine().getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n         throw new SwiftAuthenticationFailedException(\n-          authenticationRequest.toString(), \"POST\", authUri, method);\n+       authenticationRequest.toString(), \"POST\", authUri, resp);\n       }\n \n       final AuthenticationResponse access \u003d\n-        JSONUtil.toObject(method.getResponseBodyAsString(),\n-                          AuthenticationWrapper.class).getAccess();\n+          JSONUtil.toObject(HttpResponseUtils.getResponseBodyAsString(resp),\n+                            AuthenticationWrapper.class).getAccess();\n       final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n       //locate the specific service catalog that defines Swift; variations\n       //in the name of this add complexity to the search\n       StringBuilder catList \u003d new StringBuilder();\n       StringBuilder regionList \u003d new StringBuilder();\n \n       //these fields are all set together at the end of the operation\n       URI endpointURI \u003d null;\n       URI objectLocation;\n       Endpoint swiftEndpoint \u003d null;\n       AccessToken accessToken;\n \n       for (Catalog catalog : serviceCatalog) {\n         String name \u003d catalog.getName();\n         String type \u003d catalog.getType();\n         String descr \u003d String.format(\"[%s: %s]; \", name, type);\n         catList.append(descr);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Catalog entry \" + descr);\n         }\n         if (name.equals(SERVICE_CATALOG_SWIFT)\n             || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n             || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n           //swift is found\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n           }\n           //now go through the endpoints\n           for (Endpoint endpoint : catalog.getEndpoints()) {\n             String endpointRegion \u003d endpoint.getRegion();\n             URI publicURL \u003d endpoint.getPublicURL();\n             URI internalURL \u003d endpoint.getInternalURL();\n             descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                   endpointRegion,\n                                   publicURL,\n                                   internalURL);\n             regionList.append(descr);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Endpoint \" + descr);\n             }\n             if (region \u003d\u003d null || endpointRegion.equals(region)) {\n               endpointURI \u003d usePublicURL ? publicURL : internalURL;\n               swiftEndpoint \u003d endpoint;\n               break;\n             }\n           }\n         }\n       }\n       if (endpointURI \u003d\u003d null) {\n         String message \u003d \"Could not find swift service from auth URL \"\n                          + authUri\n                          + \" and region \u0027\" + region + \"\u0027. \"\n                          + \"Categories: \" + catList\n                          + ((regionList.length() \u003e 0) ?\n                             (\"regions: \" + regionList)\n                                                       : \"No regions\");\n         throw new SwiftInvalidResponseException(message,\n                                                 SC_OK,\n                                                 \"authenticating\",\n                                                 authUri);\n \n       }\n \n \n       accessToken \u003d access.getToken();\n       String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                     + swiftEndpoint.getTenantId();\n       String host \u003d endpointURI.getHost();\n       try {\n         objectLocation \u003d new URI(endpointURI.getScheme(),\n                                  null,\n                                  host,\n                                  endpointURI.getPort(),\n                                  path,\n                                  null,\n                                  null);\n       } catch (URISyntaxException e) {\n         throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                  + endpointURI\n                                  + \" + \" + path,\n                                  e);\n       }\n       setAuthDetails(endpointURI, objectLocation, accessToken);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"authenticated against \" + endpointURI);\n       }\n       createDefaultContainer();\n       return accessToken;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public AccessToken extractResult(AuthPostRequest req, HttpResponse resp)\n        throws IOException {\n      //initial check for failure codes leading to authentication failures\n      if (resp.getStatusLine().getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n        throw new SwiftAuthenticationFailedException(\n       authenticationRequest.toString(), \"POST\", authUri, resp);\n      }\n\n      final AuthenticationResponse access \u003d\n          JSONUtil.toObject(HttpResponseUtils.getResponseBodyAsString(resp),\n                            AuthenticationWrapper.class).getAccess();\n      final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n      //locate the specific service catalog that defines Swift; variations\n      //in the name of this add complexity to the search\n      StringBuilder catList \u003d new StringBuilder();\n      StringBuilder regionList \u003d new StringBuilder();\n\n      //these fields are all set together at the end of the operation\n      URI endpointURI \u003d null;\n      URI objectLocation;\n      Endpoint swiftEndpoint \u003d null;\n      AccessToken accessToken;\n\n      for (Catalog catalog : serviceCatalog) {\n        String name \u003d catalog.getName();\n        String type \u003d catalog.getType();\n        String descr \u003d String.format(\"[%s: %s]; \", name, type);\n        catList.append(descr);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Catalog entry \" + descr);\n        }\n        if (name.equals(SERVICE_CATALOG_SWIFT)\n            || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n            || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n          //swift is found\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n          }\n          //now go through the endpoints\n          for (Endpoint endpoint : catalog.getEndpoints()) {\n            String endpointRegion \u003d endpoint.getRegion();\n            URI publicURL \u003d endpoint.getPublicURL();\n            URI internalURL \u003d endpoint.getInternalURL();\n            descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                  endpointRegion,\n                                  publicURL,\n                                  internalURL);\n            regionList.append(descr);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Endpoint \" + descr);\n            }\n            if (region \u003d\u003d null || endpointRegion.equals(region)) {\n              endpointURI \u003d usePublicURL ? publicURL : internalURL;\n              swiftEndpoint \u003d endpoint;\n              break;\n            }\n          }\n        }\n      }\n      if (endpointURI \u003d\u003d null) {\n        String message \u003d \"Could not find swift service from auth URL \"\n                         + authUri\n                         + \" and region \u0027\" + region + \"\u0027. \"\n                         + \"Categories: \" + catList\n                         + ((regionList.length() \u003e 0) ?\n                            (\"regions: \" + regionList)\n                                                      : \"No regions\");\n        throw new SwiftInvalidResponseException(message,\n                                                SC_OK,\n                                                \"authenticating\",\n                                                authUri);\n\n      }\n\n\n      accessToken \u003d access.getToken();\n      String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                    + swiftEndpoint.getTenantId();\n      String host \u003d endpointURI.getHost();\n      try {\n        objectLocation \u003d new URI(endpointURI.getScheme(),\n                                 null,\n                                 host,\n                                 endpointURI.getPort(),\n                                 path,\n                                 null,\n                                 null);\n      } catch (URISyntaxException e) {\n        throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                 + endpointURI\n                                 + \" + \" + path,\n                                 e);\n      }\n      setAuthDetails(endpointURI, objectLocation, accessToken);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"authenticated against \" + endpointURI);\n      }\n      createDefaultContainer();\n      return accessToken;\n    }",
          "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
          "extendedDetails": {
            "oldValue": "[method-AuthPostMethod]",
            "newValue": "[req-AuthPostRequest, resp-HttpResponse]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
          "commitDate": "27/04/17 12:57 AM",
          "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "01/10/15 9:25 AM",
          "commitNameOld": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 573.65,
          "commitsBetweenForRepo": 3812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,100 +1,101 @@\n-    public AccessToken extractResult(AuthPostMethod method) throws IOException {\n+    public AccessToken extractResult(AuthPostRequest req, HttpResponse resp)\n+        throws IOException {\n       //initial check for failure codes leading to authentication failures\n-      if (method.getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n+      if (resp.getStatusLine().getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n         throw new SwiftAuthenticationFailedException(\n-          authenticationRequest.toString(), \"POST\", authUri, method);\n+       authenticationRequest.toString(), \"POST\", authUri, resp);\n       }\n \n       final AuthenticationResponse access \u003d\n-        JSONUtil.toObject(method.getResponseBodyAsString(),\n-                          AuthenticationWrapper.class).getAccess();\n+          JSONUtil.toObject(HttpResponseUtils.getResponseBodyAsString(resp),\n+                            AuthenticationWrapper.class).getAccess();\n       final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n       //locate the specific service catalog that defines Swift; variations\n       //in the name of this add complexity to the search\n       StringBuilder catList \u003d new StringBuilder();\n       StringBuilder regionList \u003d new StringBuilder();\n \n       //these fields are all set together at the end of the operation\n       URI endpointURI \u003d null;\n       URI objectLocation;\n       Endpoint swiftEndpoint \u003d null;\n       AccessToken accessToken;\n \n       for (Catalog catalog : serviceCatalog) {\n         String name \u003d catalog.getName();\n         String type \u003d catalog.getType();\n         String descr \u003d String.format(\"[%s: %s]; \", name, type);\n         catList.append(descr);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Catalog entry \" + descr);\n         }\n         if (name.equals(SERVICE_CATALOG_SWIFT)\n             || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n             || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n           //swift is found\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n           }\n           //now go through the endpoints\n           for (Endpoint endpoint : catalog.getEndpoints()) {\n             String endpointRegion \u003d endpoint.getRegion();\n             URI publicURL \u003d endpoint.getPublicURL();\n             URI internalURL \u003d endpoint.getInternalURL();\n             descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                   endpointRegion,\n                                   publicURL,\n                                   internalURL);\n             regionList.append(descr);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Endpoint \" + descr);\n             }\n             if (region \u003d\u003d null || endpointRegion.equals(region)) {\n               endpointURI \u003d usePublicURL ? publicURL : internalURL;\n               swiftEndpoint \u003d endpoint;\n               break;\n             }\n           }\n         }\n       }\n       if (endpointURI \u003d\u003d null) {\n         String message \u003d \"Could not find swift service from auth URL \"\n                          + authUri\n                          + \" and region \u0027\" + region + \"\u0027. \"\n                          + \"Categories: \" + catList\n                          + ((regionList.length() \u003e 0) ?\n                             (\"regions: \" + regionList)\n                                                       : \"No regions\");\n         throw new SwiftInvalidResponseException(message,\n                                                 SC_OK,\n                                                 \"authenticating\",\n                                                 authUri);\n \n       }\n \n \n       accessToken \u003d access.getToken();\n       String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                     + swiftEndpoint.getTenantId();\n       String host \u003d endpointURI.getHost();\n       try {\n         objectLocation \u003d new URI(endpointURI.getScheme(),\n                                  null,\n                                  host,\n                                  endpointURI.getPort(),\n                                  path,\n                                  null,\n                                  null);\n       } catch (URISyntaxException e) {\n         throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                  + endpointURI\n                                  + \" + \" + path,\n                                  e);\n       }\n       setAuthDetails(endpointURI, objectLocation, accessToken);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"authenticated against \" + endpointURI);\n       }\n       createDefaultContainer();\n       return accessToken;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public AccessToken extractResult(AuthPostRequest req, HttpResponse resp)\n        throws IOException {\n      //initial check for failure codes leading to authentication failures\n      if (resp.getStatusLine().getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n        throw new SwiftAuthenticationFailedException(\n       authenticationRequest.toString(), \"POST\", authUri, resp);\n      }\n\n      final AuthenticationResponse access \u003d\n          JSONUtil.toObject(HttpResponseUtils.getResponseBodyAsString(resp),\n                            AuthenticationWrapper.class).getAccess();\n      final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n      //locate the specific service catalog that defines Swift; variations\n      //in the name of this add complexity to the search\n      StringBuilder catList \u003d new StringBuilder();\n      StringBuilder regionList \u003d new StringBuilder();\n\n      //these fields are all set together at the end of the operation\n      URI endpointURI \u003d null;\n      URI objectLocation;\n      Endpoint swiftEndpoint \u003d null;\n      AccessToken accessToken;\n\n      for (Catalog catalog : serviceCatalog) {\n        String name \u003d catalog.getName();\n        String type \u003d catalog.getType();\n        String descr \u003d String.format(\"[%s: %s]; \", name, type);\n        catList.append(descr);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Catalog entry \" + descr);\n        }\n        if (name.equals(SERVICE_CATALOG_SWIFT)\n            || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n            || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n          //swift is found\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n          }\n          //now go through the endpoints\n          for (Endpoint endpoint : catalog.getEndpoints()) {\n            String endpointRegion \u003d endpoint.getRegion();\n            URI publicURL \u003d endpoint.getPublicURL();\n            URI internalURL \u003d endpoint.getInternalURL();\n            descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                  endpointRegion,\n                                  publicURL,\n                                  internalURL);\n            regionList.append(descr);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Endpoint \" + descr);\n            }\n            if (region \u003d\u003d null || endpointRegion.equals(region)) {\n              endpointURI \u003d usePublicURL ? publicURL : internalURL;\n              swiftEndpoint \u003d endpoint;\n              break;\n            }\n          }\n        }\n      }\n      if (endpointURI \u003d\u003d null) {\n        String message \u003d \"Could not find swift service from auth URL \"\n                         + authUri\n                         + \" and region \u0027\" + region + \"\u0027. \"\n                         + \"Categories: \" + catList\n                         + ((regionList.length() \u003e 0) ?\n                            (\"regions: \" + regionList)\n                                                      : \"No regions\");\n        throw new SwiftInvalidResponseException(message,\n                                                SC_OK,\n                                                \"authenticating\",\n                                                authUri);\n\n      }\n\n\n      accessToken \u003d access.getToken();\n      String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                    + swiftEndpoint.getTenantId();\n      String host \u003d endpointURI.getHost();\n      try {\n        objectLocation \u003d new URI(endpointURI.getScheme(),\n                                 null,\n                                 host,\n                                 endpointURI.getPort(),\n                                 path,\n                                 null,\n                                 null);\n      } catch (URISyntaxException e) {\n        throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                 + endpointURI\n                                 + \" + \" + path,\n                                 e);\n      }\n      setAuthDetails(endpointURI, objectLocation, accessToken);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"authenticated against \" + endpointURI);\n      }\n      createDefaultContainer();\n      return accessToken;\n    }",
          "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "ecbfd68974691cc9103ae477d10c15c7f21b6dea": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10296. Incorrect null check in SwiftRestClient#buildException(). Contributed by Rahul Palamuttam and Kanaka Kumar Avvaru.\n",
      "commitDate": "01/10/15 9:25 AM",
      "commitName": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/05/15 5:01 PM",
      "commitNameOld": "ed0f4db0dd8769d188e28750e5b78aa0d6f50677",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 145.68,
      "commitsBetweenForRepo": 1162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,100 @@\n     public AccessToken extractResult(AuthPostMethod method) throws IOException {\n       //initial check for failure codes leading to authentication failures\n       if (method.getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n         throw new SwiftAuthenticationFailedException(\n           authenticationRequest.toString(), \"POST\", authUri, method);\n       }\n \n       final AuthenticationResponse access \u003d\n         JSONUtil.toObject(method.getResponseBodyAsString(),\n                           AuthenticationWrapper.class).getAccess();\n       final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n       //locate the specific service catalog that defines Swift; variations\n       //in the name of this add complexity to the search\n-      boolean catalogMatch \u003d false;\n       StringBuilder catList \u003d new StringBuilder();\n       StringBuilder regionList \u003d new StringBuilder();\n \n       //these fields are all set together at the end of the operation\n       URI endpointURI \u003d null;\n       URI objectLocation;\n       Endpoint swiftEndpoint \u003d null;\n       AccessToken accessToken;\n \n       for (Catalog catalog : serviceCatalog) {\n         String name \u003d catalog.getName();\n         String type \u003d catalog.getType();\n         String descr \u003d String.format(\"[%s: %s]; \", name, type);\n         catList.append(descr);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Catalog entry \" + descr);\n         }\n         if (name.equals(SERVICE_CATALOG_SWIFT)\n             || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n             || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n           //swift is found\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n           }\n           //now go through the endpoints\n           for (Endpoint endpoint : catalog.getEndpoints()) {\n             String endpointRegion \u003d endpoint.getRegion();\n             URI publicURL \u003d endpoint.getPublicURL();\n             URI internalURL \u003d endpoint.getInternalURL();\n             descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                   endpointRegion,\n                                   publicURL,\n                                   internalURL);\n             regionList.append(descr);\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Endpoint \" + descr);\n             }\n             if (region \u003d\u003d null || endpointRegion.equals(region)) {\n               endpointURI \u003d usePublicURL ? publicURL : internalURL;\n               swiftEndpoint \u003d endpoint;\n               break;\n             }\n           }\n         }\n       }\n       if (endpointURI \u003d\u003d null) {\n         String message \u003d \"Could not find swift service from auth URL \"\n                          + authUri\n                          + \" and region \u0027\" + region + \"\u0027. \"\n                          + \"Categories: \" + catList\n                          + ((regionList.length() \u003e 0) ?\n                             (\"regions: \" + regionList)\n                                                       : \"No regions\");\n         throw new SwiftInvalidResponseException(message,\n                                                 SC_OK,\n                                                 \"authenticating\",\n                                                 authUri);\n \n       }\n \n \n       accessToken \u003d access.getToken();\n       String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                     + swiftEndpoint.getTenantId();\n       String host \u003d endpointURI.getHost();\n       try {\n         objectLocation \u003d new URI(endpointURI.getScheme(),\n                                  null,\n                                  host,\n                                  endpointURI.getPort(),\n                                  path,\n                                  null,\n                                  null);\n       } catch (URISyntaxException e) {\n         throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                  + endpointURI\n                                  + \" + \" + path,\n                                  e);\n       }\n       setAuthDetails(endpointURI, objectLocation, accessToken);\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"authenticated against \" + endpointURI);\n       }\n       createDefaultContainer();\n       return accessToken;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public AccessToken extractResult(AuthPostMethod method) throws IOException {\n      //initial check for failure codes leading to authentication failures\n      if (method.getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n        throw new SwiftAuthenticationFailedException(\n          authenticationRequest.toString(), \"POST\", authUri, method);\n      }\n\n      final AuthenticationResponse access \u003d\n        JSONUtil.toObject(method.getResponseBodyAsString(),\n                          AuthenticationWrapper.class).getAccess();\n      final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n      //locate the specific service catalog that defines Swift; variations\n      //in the name of this add complexity to the search\n      StringBuilder catList \u003d new StringBuilder();\n      StringBuilder regionList \u003d new StringBuilder();\n\n      //these fields are all set together at the end of the operation\n      URI endpointURI \u003d null;\n      URI objectLocation;\n      Endpoint swiftEndpoint \u003d null;\n      AccessToken accessToken;\n\n      for (Catalog catalog : serviceCatalog) {\n        String name \u003d catalog.getName();\n        String type \u003d catalog.getType();\n        String descr \u003d String.format(\"[%s: %s]; \", name, type);\n        catList.append(descr);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Catalog entry \" + descr);\n        }\n        if (name.equals(SERVICE_CATALOG_SWIFT)\n            || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n            || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n          //swift is found\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n          }\n          //now go through the endpoints\n          for (Endpoint endpoint : catalog.getEndpoints()) {\n            String endpointRegion \u003d endpoint.getRegion();\n            URI publicURL \u003d endpoint.getPublicURL();\n            URI internalURL \u003d endpoint.getInternalURL();\n            descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                  endpointRegion,\n                                  publicURL,\n                                  internalURL);\n            regionList.append(descr);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Endpoint \" + descr);\n            }\n            if (region \u003d\u003d null || endpointRegion.equals(region)) {\n              endpointURI \u003d usePublicURL ? publicURL : internalURL;\n              swiftEndpoint \u003d endpoint;\n              break;\n            }\n          }\n        }\n      }\n      if (endpointURI \u003d\u003d null) {\n        String message \u003d \"Could not find swift service from auth URL \"\n                         + authUri\n                         + \" and region \u0027\" + region + \"\u0027. \"\n                         + \"Categories: \" + catList\n                         + ((regionList.length() \u003e 0) ?\n                            (\"regions: \" + regionList)\n                                                      : \"No regions\");\n        throw new SwiftInvalidResponseException(message,\n                                                SC_OK,\n                                                \"authenticating\",\n                                                authUri);\n\n      }\n\n\n      accessToken \u003d access.getToken();\n      String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                    + swiftEndpoint.getTenantId();\n      String host \u003d endpointURI.getHost();\n      try {\n        objectLocation \u003d new URI(endpointURI.getScheme(),\n                                 null,\n                                 host,\n                                 endpointURI.getPort(),\n                                 path,\n                                 null,\n                                 null);\n      } catch (URISyntaxException e) {\n        throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                 + endpointURI\n                                 + \" + \" + path,\n                                 e);\n      }\n      setAuthDetails(endpointURI, objectLocation, accessToken);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"authenticated against \" + endpointURI);\n      }\n      createDefaultContainer();\n      return accessToken;\n    }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
      "extendedDetails": {}
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,101 @@\n+    public AccessToken extractResult(AuthPostMethod method) throws IOException {\n+      //initial check for failure codes leading to authentication failures\n+      if (method.getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n+        throw new SwiftAuthenticationFailedException(\n+          authenticationRequest.toString(), \"POST\", authUri, method);\n+      }\n+\n+      final AuthenticationResponse access \u003d\n+        JSONUtil.toObject(method.getResponseBodyAsString(),\n+                          AuthenticationWrapper.class).getAccess();\n+      final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n+      //locate the specific service catalog that defines Swift; variations\n+      //in the name of this add complexity to the search\n+      boolean catalogMatch \u003d false;\n+      StringBuilder catList \u003d new StringBuilder();\n+      StringBuilder regionList \u003d new StringBuilder();\n+\n+      //these fields are all set together at the end of the operation\n+      URI endpointURI \u003d null;\n+      URI objectLocation;\n+      Endpoint swiftEndpoint \u003d null;\n+      AccessToken accessToken;\n+\n+      for (Catalog catalog : serviceCatalog) {\n+        String name \u003d catalog.getName();\n+        String type \u003d catalog.getType();\n+        String descr \u003d String.format(\"[%s: %s]; \", name, type);\n+        catList.append(descr);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Catalog entry \" + descr);\n+        }\n+        if (name.equals(SERVICE_CATALOG_SWIFT)\n+            || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n+            || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n+          //swift is found\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n+          }\n+          //now go through the endpoints\n+          for (Endpoint endpoint : catalog.getEndpoints()) {\n+            String endpointRegion \u003d endpoint.getRegion();\n+            URI publicURL \u003d endpoint.getPublicURL();\n+            URI internalURL \u003d endpoint.getInternalURL();\n+            descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n+                                  endpointRegion,\n+                                  publicURL,\n+                                  internalURL);\n+            regionList.append(descr);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Endpoint \" + descr);\n+            }\n+            if (region \u003d\u003d null || endpointRegion.equals(region)) {\n+              endpointURI \u003d usePublicURL ? publicURL : internalURL;\n+              swiftEndpoint \u003d endpoint;\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      if (endpointURI \u003d\u003d null) {\n+        String message \u003d \"Could not find swift service from auth URL \"\n+                         + authUri\n+                         + \" and region \u0027\" + region + \"\u0027. \"\n+                         + \"Categories: \" + catList\n+                         + ((regionList.length() \u003e 0) ?\n+                            (\"regions: \" + regionList)\n+                                                      : \"No regions\");\n+        throw new SwiftInvalidResponseException(message,\n+                                                SC_OK,\n+                                                \"authenticating\",\n+                                                authUri);\n+\n+      }\n+\n+\n+      accessToken \u003d access.getToken();\n+      String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n+                    + swiftEndpoint.getTenantId();\n+      String host \u003d endpointURI.getHost();\n+      try {\n+        objectLocation \u003d new URI(endpointURI.getScheme(),\n+                                 null,\n+                                 host,\n+                                 endpointURI.getPort(),\n+                                 path,\n+                                 null,\n+                                 null);\n+      } catch (URISyntaxException e) {\n+        throw new SwiftException(\"object endpoint URI is incorrect: \"\n+                                 + endpointURI\n+                                 + \" + \" + path,\n+                                 e);\n+      }\n+      setAuthDetails(endpointURI, objectLocation, accessToken);\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"authenticated against \" + endpointURI);\n+      }\n+      createDefaultContainer();\n+      return accessToken;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public AccessToken extractResult(AuthPostMethod method) throws IOException {\n      //initial check for failure codes leading to authentication failures\n      if (method.getStatusCode() \u003d\u003d SC_BAD_REQUEST) {\n        throw new SwiftAuthenticationFailedException(\n          authenticationRequest.toString(), \"POST\", authUri, method);\n      }\n\n      final AuthenticationResponse access \u003d\n        JSONUtil.toObject(method.getResponseBodyAsString(),\n                          AuthenticationWrapper.class).getAccess();\n      final List\u003cCatalog\u003e serviceCatalog \u003d access.getServiceCatalog();\n      //locate the specific service catalog that defines Swift; variations\n      //in the name of this add complexity to the search\n      boolean catalogMatch \u003d false;\n      StringBuilder catList \u003d new StringBuilder();\n      StringBuilder regionList \u003d new StringBuilder();\n\n      //these fields are all set together at the end of the operation\n      URI endpointURI \u003d null;\n      URI objectLocation;\n      Endpoint swiftEndpoint \u003d null;\n      AccessToken accessToken;\n\n      for (Catalog catalog : serviceCatalog) {\n        String name \u003d catalog.getName();\n        String type \u003d catalog.getType();\n        String descr \u003d String.format(\"[%s: %s]; \", name, type);\n        catList.append(descr);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Catalog entry \" + descr);\n        }\n        if (name.equals(SERVICE_CATALOG_SWIFT)\n            || name.equals(SERVICE_CATALOG_CLOUD_FILES)\n            || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {\n          //swift is found\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found swift catalog as \" + name + \" \u003d\u003e \" + type);\n          }\n          //now go through the endpoints\n          for (Endpoint endpoint : catalog.getEndpoints()) {\n            String endpointRegion \u003d endpoint.getRegion();\n            URI publicURL \u003d endpoint.getPublicURL();\n            URI internalURL \u003d endpoint.getInternalURL();\n            descr \u003d String.format(\"[%s \u003d\u003e %s / %s]; \",\n                                  endpointRegion,\n                                  publicURL,\n                                  internalURL);\n            regionList.append(descr);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Endpoint \" + descr);\n            }\n            if (region \u003d\u003d null || endpointRegion.equals(region)) {\n              endpointURI \u003d usePublicURL ? publicURL : internalURL;\n              swiftEndpoint \u003d endpoint;\n              break;\n            }\n          }\n        }\n      }\n      if (endpointURI \u003d\u003d null) {\n        String message \u003d \"Could not find swift service from auth URL \"\n                         + authUri\n                         + \" and region \u0027\" + region + \"\u0027. \"\n                         + \"Categories: \" + catList\n                         + ((regionList.length() \u003e 0) ?\n                            (\"regions: \" + regionList)\n                                                      : \"No regions\");\n        throw new SwiftInvalidResponseException(message,\n                                                SC_OK,\n                                                \"authenticating\",\n                                                authUri);\n\n      }\n\n\n      accessToken \u003d access.getToken();\n      String path \u003d SWIFT_OBJECT_AUTH_ENDPOINT\n                    + swiftEndpoint.getTenantId();\n      String host \u003d endpointURI.getHost();\n      try {\n        objectLocation \u003d new URI(endpointURI.getScheme(),\n                                 null,\n                                 host,\n                                 endpointURI.getPort(),\n                                 path,\n                                 null,\n                                 null);\n      } catch (URISyntaxException e) {\n        throw new SwiftException(\"object endpoint URI is incorrect: \"\n                                 + endpointURI\n                                 + \" + \" + path,\n                                 e);\n      }\n      setAuthDetails(endpointURI, objectLocation, accessToken);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"authenticated against \" + endpointURI);\n      }\n      createDefaultContainer();\n      return accessToken;\n    }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java"
    }
  }
}