{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultAMSProcessor.java",
  "functionName": "generatePreemptionMessage",
  "functionId": "generatePreemptionMessage___allocation-Allocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
  "functionStartLine": 441,
  "functionEndLine": 491,
  "numCommitsSeen": 103,
  "timeTaken": 2647,
  "changeHistory": [
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
    "505fe2653941e4f36f61edd0fc2f8e750ceb5d8f"
  ],
  "changeHistoryShort": {
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": "Ymultichange(Ymovefromfile,Ybodychange)",
    "505fe2653941e4f36f61edd0fc2f8e750ceb5d8f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
      "commitDate": "10/07/17 2:34 PM",
      "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n   private PreemptionMessage generatePreemptionMessage(Allocation allocation){\n     PreemptionMessage pMsg \u003d null;\n     // assemble strict preemption request\n     if (allocation.getStrictContainerPreemptions() !\u003d null) {\n-       pMsg \u003d\n-        recordFactory.newRecordInstance(PreemptionMessage.class);\n+      pMsg \u003d\n+          recordFactory.newRecordInstance(PreemptionMessage.class);\n       StrictPreemptionContract pStrict \u003d\n           recordFactory.newRecordInstance(StrictPreemptionContract.class);\n-      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n+      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n       for (ContainerId cId : allocation.getStrictContainerPreemptions()) {\n         PreemptionContainer pc \u003d\n             recordFactory.newRecordInstance(PreemptionContainer.class);\n         pc.setId(cId);\n         pCont.add(pc);\n       }\n       pStrict.setContainers(pCont);\n       pMsg.setStrictContract(pStrict);\n     }\n \n     // assemble negotiable preemption request\n     if (allocation.getResourcePreemptions() !\u003d null \u0026\u0026\n         allocation.getResourcePreemptions().size() \u003e 0 \u0026\u0026\n         allocation.getContainerPreemptions() !\u003d null \u0026\u0026\n         allocation.getContainerPreemptions().size() \u003e 0) {\n       if (pMsg \u003d\u003d null) {\n         pMsg \u003d\n             recordFactory.newRecordInstance(PreemptionMessage.class);\n       }\n       PreemptionContract contract \u003d\n           recordFactory.newRecordInstance(PreemptionContract.class);\n-      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n+      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n       for (ContainerId cId : allocation.getContainerPreemptions()) {\n         PreemptionContainer pc \u003d\n             recordFactory.newRecordInstance(PreemptionContainer.class);\n         pc.setId(cId);\n         pCont.add(pc);\n       }\n-      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003cPreemptionResourceRequest\u003e();\n+      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003c\u003e();\n       for (ResourceRequest crr : allocation.getResourcePreemptions()) {\n         PreemptionResourceRequest prr \u003d\n             recordFactory.newRecordInstance(PreemptionResourceRequest.class);\n         prr.setResourceRequest(crr);\n         pRes.add(prr);\n       }\n       contract.setContainers(pCont);\n       contract.setResourceRequest(pRes);\n       pMsg.setContract(contract);\n     }\n-    \n+\n     return pMsg;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PreemptionMessage generatePreemptionMessage(Allocation allocation){\n    PreemptionMessage pMsg \u003d null;\n    // assemble strict preemption request\n    if (allocation.getStrictContainerPreemptions() !\u003d null) {\n      pMsg \u003d\n          recordFactory.newRecordInstance(PreemptionMessage.class);\n      StrictPreemptionContract pStrict \u003d\n          recordFactory.newRecordInstance(StrictPreemptionContract.class);\n      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n      for (ContainerId cId : allocation.getStrictContainerPreemptions()) {\n        PreemptionContainer pc \u003d\n            recordFactory.newRecordInstance(PreemptionContainer.class);\n        pc.setId(cId);\n        pCont.add(pc);\n      }\n      pStrict.setContainers(pCont);\n      pMsg.setStrictContract(pStrict);\n    }\n\n    // assemble negotiable preemption request\n    if (allocation.getResourcePreemptions() !\u003d null \u0026\u0026\n        allocation.getResourcePreemptions().size() \u003e 0 \u0026\u0026\n        allocation.getContainerPreemptions() !\u003d null \u0026\u0026\n        allocation.getContainerPreemptions().size() \u003e 0) {\n      if (pMsg \u003d\u003d null) {\n        pMsg \u003d\n            recordFactory.newRecordInstance(PreemptionMessage.class);\n      }\n      PreemptionContract contract \u003d\n          recordFactory.newRecordInstance(PreemptionContract.class);\n      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n      for (ContainerId cId : allocation.getContainerPreemptions()) {\n        PreemptionContainer pc \u003d\n            recordFactory.newRecordInstance(PreemptionContainer.class);\n        pc.setId(cId);\n        pCont.add(pc);\n      }\n      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003c\u003e();\n      for (ResourceRequest crr : allocation.getResourcePreemptions()) {\n        PreemptionResourceRequest prr \u003d\n            recordFactory.newRecordInstance(PreemptionResourceRequest.class);\n        prr.setResourceRequest(crr);\n        pRes.add(prr);\n      }\n      contract.setContainers(pCont);\n      contract.setResourceRequest(pRes);\n      pMsg.setContract(contract);\n    }\n\n    return pMsg;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
            "oldMethodName": "generatePreemptionMessage",
            "newMethodName": "generatePreemptionMessage"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,51 @@\n   private PreemptionMessage generatePreemptionMessage(Allocation allocation){\n     PreemptionMessage pMsg \u003d null;\n     // assemble strict preemption request\n     if (allocation.getStrictContainerPreemptions() !\u003d null) {\n-       pMsg \u003d\n-        recordFactory.newRecordInstance(PreemptionMessage.class);\n+      pMsg \u003d\n+          recordFactory.newRecordInstance(PreemptionMessage.class);\n       StrictPreemptionContract pStrict \u003d\n           recordFactory.newRecordInstance(StrictPreemptionContract.class);\n-      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n+      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n       for (ContainerId cId : allocation.getStrictContainerPreemptions()) {\n         PreemptionContainer pc \u003d\n             recordFactory.newRecordInstance(PreemptionContainer.class);\n         pc.setId(cId);\n         pCont.add(pc);\n       }\n       pStrict.setContainers(pCont);\n       pMsg.setStrictContract(pStrict);\n     }\n \n     // assemble negotiable preemption request\n     if (allocation.getResourcePreemptions() !\u003d null \u0026\u0026\n         allocation.getResourcePreemptions().size() \u003e 0 \u0026\u0026\n         allocation.getContainerPreemptions() !\u003d null \u0026\u0026\n         allocation.getContainerPreemptions().size() \u003e 0) {\n       if (pMsg \u003d\u003d null) {\n         pMsg \u003d\n             recordFactory.newRecordInstance(PreemptionMessage.class);\n       }\n       PreemptionContract contract \u003d\n           recordFactory.newRecordInstance(PreemptionContract.class);\n-      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n+      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n       for (ContainerId cId : allocation.getContainerPreemptions()) {\n         PreemptionContainer pc \u003d\n             recordFactory.newRecordInstance(PreemptionContainer.class);\n         pc.setId(cId);\n         pCont.add(pc);\n       }\n-      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003cPreemptionResourceRequest\u003e();\n+      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003c\u003e();\n       for (ResourceRequest crr : allocation.getResourcePreemptions()) {\n         PreemptionResourceRequest prr \u003d\n             recordFactory.newRecordInstance(PreemptionResourceRequest.class);\n         prr.setResourceRequest(crr);\n         pRes.add(prr);\n       }\n       contract.setContainers(pCont);\n       contract.setResourceRequest(pRes);\n       pMsg.setContract(contract);\n     }\n-    \n+\n     return pMsg;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PreemptionMessage generatePreemptionMessage(Allocation allocation){\n    PreemptionMessage pMsg \u003d null;\n    // assemble strict preemption request\n    if (allocation.getStrictContainerPreemptions() !\u003d null) {\n      pMsg \u003d\n          recordFactory.newRecordInstance(PreemptionMessage.class);\n      StrictPreemptionContract pStrict \u003d\n          recordFactory.newRecordInstance(StrictPreemptionContract.class);\n      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n      for (ContainerId cId : allocation.getStrictContainerPreemptions()) {\n        PreemptionContainer pc \u003d\n            recordFactory.newRecordInstance(PreemptionContainer.class);\n        pc.setId(cId);\n        pCont.add(pc);\n      }\n      pStrict.setContainers(pCont);\n      pMsg.setStrictContract(pStrict);\n    }\n\n    // assemble negotiable preemption request\n    if (allocation.getResourcePreemptions() !\u003d null \u0026\u0026\n        allocation.getResourcePreemptions().size() \u003e 0 \u0026\u0026\n        allocation.getContainerPreemptions() !\u003d null \u0026\u0026\n        allocation.getContainerPreemptions().size() \u003e 0) {\n      if (pMsg \u003d\u003d null) {\n        pMsg \u003d\n            recordFactory.newRecordInstance(PreemptionMessage.class);\n      }\n      PreemptionContract contract \u003d\n          recordFactory.newRecordInstance(PreemptionContract.class);\n      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003c\u003e();\n      for (ContainerId cId : allocation.getContainerPreemptions()) {\n        PreemptionContainer pc \u003d\n            recordFactory.newRecordInstance(PreemptionContainer.class);\n        pc.setId(cId);\n        pCont.add(pc);\n      }\n      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003c\u003e();\n      for (ResourceRequest crr : allocation.getResourcePreemptions()) {\n        PreemptionResourceRequest prr \u003d\n            recordFactory.newRecordInstance(PreemptionResourceRequest.class);\n        prr.setResourceRequest(crr);\n        pRes.add(prr);\n      }\n      contract.setContainers(pCont);\n      contract.setResourceRequest(pRes);\n      pMsg.setContract(contract);\n    }\n\n    return pMsg;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "505fe2653941e4f36f61edd0fc2f8e750ceb5d8f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-568. Add support for work preserving preemption to the FairScheduler.\nContributed by Carlo Curino and Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480778 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/13 2:21 PM",
      "commitName": "505fe2653941e4f36f61edd0fc2f8e750ceb5d8f",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,51 @@\n+  private PreemptionMessage generatePreemptionMessage(Allocation allocation){\n+    PreemptionMessage pMsg \u003d null;\n+    // assemble strict preemption request\n+    if (allocation.getStrictContainerPreemptions() !\u003d null) {\n+       pMsg \u003d\n+        recordFactory.newRecordInstance(PreemptionMessage.class);\n+      StrictPreemptionContract pStrict \u003d\n+          recordFactory.newRecordInstance(StrictPreemptionContract.class);\n+      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n+      for (ContainerId cId : allocation.getStrictContainerPreemptions()) {\n+        PreemptionContainer pc \u003d\n+            recordFactory.newRecordInstance(PreemptionContainer.class);\n+        pc.setId(cId);\n+        pCont.add(pc);\n+      }\n+      pStrict.setContainers(pCont);\n+      pMsg.setStrictContract(pStrict);\n+    }\n+\n+    // assemble negotiable preemption request\n+    if (allocation.getResourcePreemptions() !\u003d null \u0026\u0026\n+        allocation.getResourcePreemptions().size() \u003e 0 \u0026\u0026\n+        allocation.getContainerPreemptions() !\u003d null \u0026\u0026\n+        allocation.getContainerPreemptions().size() \u003e 0) {\n+      if (pMsg \u003d\u003d null) {\n+        pMsg \u003d\n+            recordFactory.newRecordInstance(PreemptionMessage.class);\n+      }\n+      PreemptionContract contract \u003d\n+          recordFactory.newRecordInstance(PreemptionContract.class);\n+      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n+      for (ContainerId cId : allocation.getContainerPreemptions()) {\n+        PreemptionContainer pc \u003d\n+            recordFactory.newRecordInstance(PreemptionContainer.class);\n+        pc.setId(cId);\n+        pCont.add(pc);\n+      }\n+      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003cPreemptionResourceRequest\u003e();\n+      for (ResourceRequest crr : allocation.getResourcePreemptions()) {\n+        PreemptionResourceRequest prr \u003d\n+            recordFactory.newRecordInstance(PreemptionResourceRequest.class);\n+        prr.setResourceRequest(crr);\n+        pRes.add(prr);\n+      }\n+      contract.setContainers(pCont);\n+      contract.setResourceRequest(pRes);\n+      pMsg.setContract(contract);\n+    }\n+    \n+    return pMsg;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PreemptionMessage generatePreemptionMessage(Allocation allocation){\n    PreemptionMessage pMsg \u003d null;\n    // assemble strict preemption request\n    if (allocation.getStrictContainerPreemptions() !\u003d null) {\n       pMsg \u003d\n        recordFactory.newRecordInstance(PreemptionMessage.class);\n      StrictPreemptionContract pStrict \u003d\n          recordFactory.newRecordInstance(StrictPreemptionContract.class);\n      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n      for (ContainerId cId : allocation.getStrictContainerPreemptions()) {\n        PreemptionContainer pc \u003d\n            recordFactory.newRecordInstance(PreemptionContainer.class);\n        pc.setId(cId);\n        pCont.add(pc);\n      }\n      pStrict.setContainers(pCont);\n      pMsg.setStrictContract(pStrict);\n    }\n\n    // assemble negotiable preemption request\n    if (allocation.getResourcePreemptions() !\u003d null \u0026\u0026\n        allocation.getResourcePreemptions().size() \u003e 0 \u0026\u0026\n        allocation.getContainerPreemptions() !\u003d null \u0026\u0026\n        allocation.getContainerPreemptions().size() \u003e 0) {\n      if (pMsg \u003d\u003d null) {\n        pMsg \u003d\n            recordFactory.newRecordInstance(PreemptionMessage.class);\n      }\n      PreemptionContract contract \u003d\n          recordFactory.newRecordInstance(PreemptionContract.class);\n      Set\u003cPreemptionContainer\u003e pCont \u003d new HashSet\u003cPreemptionContainer\u003e();\n      for (ContainerId cId : allocation.getContainerPreemptions()) {\n        PreemptionContainer pc \u003d\n            recordFactory.newRecordInstance(PreemptionContainer.class);\n        pc.setId(cId);\n        pCont.add(pc);\n      }\n      List\u003cPreemptionResourceRequest\u003e pRes \u003d new ArrayList\u003cPreemptionResourceRequest\u003e();\n      for (ResourceRequest crr : allocation.getResourcePreemptions()) {\n        PreemptionResourceRequest prr \u003d\n            recordFactory.newRecordInstance(PreemptionResourceRequest.class);\n        prr.setResourceRequest(crr);\n        pRes.add(prr);\n      }\n      contract.setContainers(pCont);\n      contract.setResourceRequest(pRes);\n      pMsg.setContract(contract);\n    }\n    \n    return pMsg;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ApplicationMasterService.java"
    }
  }
}