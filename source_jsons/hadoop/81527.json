{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TraceAdmin.java",
  "functionName": "run",
  "functionId": "run___argv-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java",
  "functionStartLine": 151,
  "functionEndLine": 205,
  "numCommitsSeen": 5,
  "timeTaken": 1497,
  "changeHistory": [
    "2e9daa2e27536484846d9c5f020c6afaf27932ce",
    "8ceb06e2392763726210f96bb1c176e6a9fe7b53",
    "55302ccfba199ddf070119be30df06afd2511e05"
  ],
  "changeHistoryShort": {
    "2e9daa2e27536484846d9c5f020c6afaf27932ce": "Ybodychange",
    "8ceb06e2392763726210f96bb1c176e6a9fe7b53": "Ybodychange",
    "55302ccfba199ddf070119be30df06afd2511e05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e9daa2e27536484846d9c5f020c6afaf27932ce": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14533. Size of args cannot be less than zero in TraceAdmin#run as its linkedlist. Contributed by Weisen Han.\n",
      "commitDate": "20/06/17 5:44 AM",
      "commitName": "2e9daa2e27536484846d9c5f020c6afaf27932ce",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "01/08/16 1:35 AM",
      "commitNameOld": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 323.17,
      "commitsBetweenForRepo": 1955,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public int run(String argv[]) throws Exception {\n     LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e();\n     for (String arg : argv) {\n       args.add(arg);\n     }\n     if (StringUtils.popOption(\"-h\", args) ||\n         StringUtils.popOption(\"-help\", args)) {\n       usage();\n       return 0;\n     } else if (args.size() \u003d\u003d 0) {\n       usage();\n       return 0;\n     }\n     String hostPort \u003d StringUtils.popOptionWithArgument(\"-host\", args);\n     if (hostPort \u003d\u003d null) {\n       System.err.println(\"You must specify a host with -host.\");\n       return 1;\n     }\n-    if (args.size() \u003c 0) {\n+    if (args.isEmpty()) {\n       System.err.println(\"You must specify an operation.\");\n       return 1;\n     }\n     String servicePrincipal \u003d StringUtils.popOptionWithArgument(\"-principal\",\n         args);\n     if (servicePrincipal !\u003d null) {\n       LOG.debug(\"Set service principal: {}\", servicePrincipal);\n       getConf().set(\n           CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,\n           servicePrincipal);\n     }\n     RPC.setProtocolEngine(getConf(), TraceAdminProtocolPB.class,\n         ProtobufRpcEngine.class);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(hostPort);\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     Class\u003c?\u003e xface \u003d TraceAdminProtocolPB.class;\n     proxy \u003d (TraceAdminProtocolPB)RPC.getProxy(xface,\n         RPC.getProtocolVersion(xface), address,\n         ugi, getConf(), NetUtils.getDefaultSocketFactory(getConf()), 0);\n     remote \u003d new TraceAdminProtocolTranslatorPB(proxy);\n     try {\n       if (args.get(0).equals(\"-list\")) {\n         return listSpanReceivers(args.subList(1, args.size()));\n       } else if (args.get(0).equals(\"-add\")) {\n         return addSpanReceiver(args.subList(1, args.size()));\n       } else if (args.get(0).equals(\"-remove\")) {\n         return removeSpanReceiver(args.subList(1, args.size()));\n       } else {\n         System.err.println(\"Unrecognized tracing command: \" + args.get(0));\n         System.err.println(\"Use -help for help.\");\n         return 1;\n       }\n     } finally {\n       remote.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e();\n    for (String arg : argv) {\n      args.add(arg);\n    }\n    if (StringUtils.popOption(\"-h\", args) ||\n        StringUtils.popOption(\"-help\", args)) {\n      usage();\n      return 0;\n    } else if (args.size() \u003d\u003d 0) {\n      usage();\n      return 0;\n    }\n    String hostPort \u003d StringUtils.popOptionWithArgument(\"-host\", args);\n    if (hostPort \u003d\u003d null) {\n      System.err.println(\"You must specify a host with -host.\");\n      return 1;\n    }\n    if (args.isEmpty()) {\n      System.err.println(\"You must specify an operation.\");\n      return 1;\n    }\n    String servicePrincipal \u003d StringUtils.popOptionWithArgument(\"-principal\",\n        args);\n    if (servicePrincipal !\u003d null) {\n      LOG.debug(\"Set service principal: {}\", servicePrincipal);\n      getConf().set(\n          CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,\n          servicePrincipal);\n    }\n    RPC.setProtocolEngine(getConf(), TraceAdminProtocolPB.class,\n        ProtobufRpcEngine.class);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(hostPort);\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    Class\u003c?\u003e xface \u003d TraceAdminProtocolPB.class;\n    proxy \u003d (TraceAdminProtocolPB)RPC.getProxy(xface,\n        RPC.getProtocolVersion(xface), address,\n        ugi, getConf(), NetUtils.getDefaultSocketFactory(getConf()), 0);\n    remote \u003d new TraceAdminProtocolTranslatorPB(proxy);\n    try {\n      if (args.get(0).equals(\"-list\")) {\n        return listSpanReceivers(args.subList(1, args.size()));\n      } else if (args.get(0).equals(\"-add\")) {\n        return addSpanReceiver(args.subList(1, args.size()));\n      } else if (args.get(0).equals(\"-remove\")) {\n        return removeSpanReceiver(args.subList(1, args.size()));\n      } else {\n        System.err.println(\"Unrecognized tracing command: \" + args.get(0));\n        System.err.println(\"Use -help for help.\");\n        return 1;\n      }\n    } finally {\n      remote.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java",
      "extendedDetails": {}
    },
    "8ceb06e2392763726210f96bb1c176e6a9fe7b53": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13137. TraceAdmin should support Kerberized cluster (Wei-Chiu Chuang via cmccabe)\n",
      "commitDate": "31/05/16 5:54 PM",
      "commitName": "8ceb06e2392763726210f96bb1c176e6a9fe7b53",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 537.01,
      "commitsBetweenForRepo": 4040,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,55 @@\n   public int run(String argv[]) throws Exception {\n     LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e();\n     for (String arg : argv) {\n       args.add(arg);\n     }\n     if (StringUtils.popOption(\"-h\", args) ||\n         StringUtils.popOption(\"-help\", args)) {\n       usage();\n       return 0;\n     } else if (args.size() \u003d\u003d 0) {\n       usage();\n       return 0;\n     }\n     String hostPort \u003d StringUtils.popOptionWithArgument(\"-host\", args);\n     if (hostPort \u003d\u003d null) {\n       System.err.println(\"You must specify a host with -host.\");\n       return 1;\n     }\n     if (args.size() \u003c 0) {\n       System.err.println(\"You must specify an operation.\");\n       return 1;\n     }\n+    String servicePrincipal \u003d StringUtils.popOptionWithArgument(\"-principal\",\n+        args);\n+    if (servicePrincipal !\u003d null) {\n+      LOG.debug(\"Set service principal: {}\", servicePrincipal);\n+      getConf().set(\n+          CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,\n+          servicePrincipal);\n+    }\n     RPC.setProtocolEngine(getConf(), TraceAdminProtocolPB.class,\n         ProtobufRpcEngine.class);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(hostPort);\n     UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     Class\u003c?\u003e xface \u003d TraceAdminProtocolPB.class;\n     proxy \u003d (TraceAdminProtocolPB)RPC.getProxy(xface,\n         RPC.getProtocolVersion(xface), address,\n         ugi, getConf(), NetUtils.getDefaultSocketFactory(getConf()), 0);\n     remote \u003d new TraceAdminProtocolTranslatorPB(proxy);\n     try {\n       if (args.get(0).equals(\"-list\")) {\n         return listSpanReceivers(args.subList(1, args.size()));\n       } else if (args.get(0).equals(\"-add\")) {\n         return addSpanReceiver(args.subList(1, args.size()));\n       } else if (args.get(0).equals(\"-remove\")) {\n         return removeSpanReceiver(args.subList(1, args.size()));\n       } else {\n         System.err.println(\"Unrecognized tracing command: \" + args.get(0));\n         System.err.println(\"Use -help for help.\");\n         return 1;\n       }\n     } finally {\n       remote.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e();\n    for (String arg : argv) {\n      args.add(arg);\n    }\n    if (StringUtils.popOption(\"-h\", args) ||\n        StringUtils.popOption(\"-help\", args)) {\n      usage();\n      return 0;\n    } else if (args.size() \u003d\u003d 0) {\n      usage();\n      return 0;\n    }\n    String hostPort \u003d StringUtils.popOptionWithArgument(\"-host\", args);\n    if (hostPort \u003d\u003d null) {\n      System.err.println(\"You must specify a host with -host.\");\n      return 1;\n    }\n    if (args.size() \u003c 0) {\n      System.err.println(\"You must specify an operation.\");\n      return 1;\n    }\n    String servicePrincipal \u003d StringUtils.popOptionWithArgument(\"-principal\",\n        args);\n    if (servicePrincipal !\u003d null) {\n      LOG.debug(\"Set service principal: {}\", servicePrincipal);\n      getConf().set(\n          CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,\n          servicePrincipal);\n    }\n    RPC.setProtocolEngine(getConf(), TraceAdminProtocolPB.class,\n        ProtobufRpcEngine.class);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(hostPort);\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    Class\u003c?\u003e xface \u003d TraceAdminProtocolPB.class;\n    proxy \u003d (TraceAdminProtocolPB)RPC.getProxy(xface,\n        RPC.getProtocolVersion(xface), address,\n        ugi, getConf(), NetUtils.getDefaultSocketFactory(getConf()), 0);\n    remote \u003d new TraceAdminProtocolTranslatorPB(proxy);\n    try {\n      if (args.get(0).equals(\"-list\")) {\n        return listSpanReceivers(args.subList(1, args.size()));\n      } else if (args.get(0).equals(\"-add\")) {\n        return addSpanReceiver(args.subList(1, args.size()));\n      } else if (args.get(0).equals(\"-remove\")) {\n        return removeSpanReceiver(args.subList(1, args.size()));\n      } else {\n        System.err.println(\"Unrecognized tracing command: \" + args.get(0));\n        System.err.println(\"Use -help for help.\");\n        return 1;\n      }\n    } finally {\n      remote.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java",
      "extendedDetails": {}
    },
    "55302ccfba199ddf070119be30df06afd2511e05": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6956. Allow dynamically changing the tracing level in Hadoop servers (cmccabe)\n",
      "commitDate": "26/09/14 10:30 AM",
      "commitName": "55302ccfba199ddf070119be30df06afd2511e05",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,47 @@\n+  public int run(String argv[]) throws Exception {\n+    LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e();\n+    for (String arg : argv) {\n+      args.add(arg);\n+    }\n+    if (StringUtils.popOption(\"-h\", args) ||\n+        StringUtils.popOption(\"-help\", args)) {\n+      usage();\n+      return 0;\n+    } else if (args.size() \u003d\u003d 0) {\n+      usage();\n+      return 0;\n+    }\n+    String hostPort \u003d StringUtils.popOptionWithArgument(\"-host\", args);\n+    if (hostPort \u003d\u003d null) {\n+      System.err.println(\"You must specify a host with -host.\");\n+      return 1;\n+    }\n+    if (args.size() \u003c 0) {\n+      System.err.println(\"You must specify an operation.\");\n+      return 1;\n+    }\n+    RPC.setProtocolEngine(getConf(), TraceAdminProtocolPB.class,\n+        ProtobufRpcEngine.class);\n+    InetSocketAddress address \u003d NetUtils.createSocketAddr(hostPort);\n+    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    Class\u003c?\u003e xface \u003d TraceAdminProtocolPB.class;\n+    proxy \u003d (TraceAdminProtocolPB)RPC.getProxy(xface,\n+        RPC.getProtocolVersion(xface), address,\n+        ugi, getConf(), NetUtils.getDefaultSocketFactory(getConf()), 0);\n+    remote \u003d new TraceAdminProtocolTranslatorPB(proxy);\n+    try {\n+      if (args.get(0).equals(\"-list\")) {\n+        return listSpanReceivers(args.subList(1, args.size()));\n+      } else if (args.get(0).equals(\"-add\")) {\n+        return addSpanReceiver(args.subList(1, args.size()));\n+      } else if (args.get(0).equals(\"-remove\")) {\n+        return removeSpanReceiver(args.subList(1, args.size()));\n+      } else {\n+        System.err.println(\"Unrecognized tracing command: \" + args.get(0));\n+        System.err.println(\"Use -help for help.\");\n+        return 1;\n+      }\n+    } finally {\n+      remote.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String argv[]) throws Exception {\n    LinkedList\u003cString\u003e args \u003d new LinkedList\u003cString\u003e();\n    for (String arg : argv) {\n      args.add(arg);\n    }\n    if (StringUtils.popOption(\"-h\", args) ||\n        StringUtils.popOption(\"-help\", args)) {\n      usage();\n      return 0;\n    } else if (args.size() \u003d\u003d 0) {\n      usage();\n      return 0;\n    }\n    String hostPort \u003d StringUtils.popOptionWithArgument(\"-host\", args);\n    if (hostPort \u003d\u003d null) {\n      System.err.println(\"You must specify a host with -host.\");\n      return 1;\n    }\n    if (args.size() \u003c 0) {\n      System.err.println(\"You must specify an operation.\");\n      return 1;\n    }\n    RPC.setProtocolEngine(getConf(), TraceAdminProtocolPB.class,\n        ProtobufRpcEngine.class);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(hostPort);\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    Class\u003c?\u003e xface \u003d TraceAdminProtocolPB.class;\n    proxy \u003d (TraceAdminProtocolPB)RPC.getProxy(xface,\n        RPC.getProtocolVersion(xface), address,\n        ugi, getConf(), NetUtils.getDefaultSocketFactory(getConf()), 0);\n    remote \u003d new TraceAdminProtocolTranslatorPB(proxy);\n    try {\n      if (args.get(0).equals(\"-list\")) {\n        return listSpanReceivers(args.subList(1, args.size()));\n      } else if (args.get(0).equals(\"-add\")) {\n        return addSpanReceiver(args.subList(1, args.size()));\n      } else if (args.get(0).equals(\"-remove\")) {\n        return removeSpanReceiver(args.subList(1, args.size()));\n      } else {\n        System.err.println(\"Unrecognized tracing command: \" + args.get(0));\n        System.err.println(\"Use -help for help.\");\n        return 1;\n      }\n    } finally {\n      remote.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java"
    }
  }
}