{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMWebAppFilter.java",
  "functionName": "containerLogPageRedirectPath",
  "functionId": "containerLogPageRedirectPath___request-HttpServletRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebAppFilter.java",
  "functionStartLine": 76,
  "functionEndLine": 144,
  "numCommitsSeen": 5,
  "timeTaken": 3008,
  "changeHistory": [
    "631b5c2db733b0733a779e843b8035f68d0fcdf3",
    "736f54b727c3f0ecc8fb9a594f2281c240c89cb8",
    "d0162f2040a4d98fbac51527dfc9447888cb32ab",
    "6329bd00fa1f17cc9555efa496ea7607ad93e0ce"
  ],
  "changeHistoryShort": {
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": "Ybodychange",
    "736f54b727c3f0ecc8fb9a594f2281c240c89cb8": "Ybodychange",
    "d0162f2040a4d98fbac51527dfc9447888cb32ab": "Ymultichange(Yparameterchange,Ybodychange)",
    "6329bd00fa1f17cc9555efa496ea7607ad93e0ce": "Yintroduced"
  },
  "changeHistoryDetails": {
    "631b5c2db733b0733a779e843b8035f68d0fcdf3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5418. When partial log aggregation is enabled, display the list of aggregated files on the container log page. (Xuan Gong via wangda)\n\nChange-Id: I1befb0bbaeb89fb315bafe3e2f3379663f8cf1ec\n",
      "commitDate": "15/12/17 3:38 PM",
      "commitName": "631b5c2db733b0733a779e843b8035f68d0fcdf3",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "21/12/16 2:14 PM",
      "commitNameOld": "736f54b727c3f0ecc8fb9a594f2281c240c89cb8",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 359.06,
      "commitsBetweenForRepo": 2309,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,69 @@\n   private String containerLogPageRedirectPath(HttpServletRequest request) {\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n     String redirectPath \u003d null;\n     if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n       String[] parts \u003d uri.split(\"/\");\n       String containerIdStr \u003d parts[3];\n       String appOwner \u003d parts[4];\n       String logType \u003d null;\n       if (parts.length \u003e 5) {\n         logType \u003d parts[5];\n       }\n       if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n         ContainerId containerId \u003d null;\n         try {\n           containerId \u003d ContainerId.fromString(containerIdStr);\n         } catch (IllegalArgumentException ex) {\n           return redirectPath;\n         }\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d nmContext.getApplications().get(appId);\n+\n+        boolean fetchAggregatedLog \u003d false;\n+        List\u003cNameValuePair\u003e params \u003d WebAppUtils.getURLEncodedQueryParam(\n+            request);\n+        if (params !\u003d null) {\n+          for (NameValuePair param : params) {\n+            if (param.getName().equals(ContainerLogsPage\n+                .LOG_AGGREGATION_TYPE)) {\n+              if (param.getValue().equals(ContainerLogsPage\n+                  .LOG_AGGREGATION_REMOTE_TYPE)) {\n+                fetchAggregatedLog \u003d true;\n+              }\n+            }\n+          }\n+        }\n+\n         Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n-        if (app \u003d\u003d null\n+        if ((app \u003d\u003d null || fetchAggregatedLog)\n             \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n               YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n           String logServerUrl \u003d\n               nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n           if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n             StringBuilder sb \u003d new StringBuilder();\n             sb.append(logServerUrl);\n             sb.append(\"/\");\n             sb.append(nmContext.getNodeId().toString());\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(appOwner);\n             if (logType !\u003d null \u0026\u0026 !logType.isEmpty()) {\n               sb.append(\"/\");\n               sb.append(logType);\n             }\n             redirectPath \u003d\n                 WebAppUtils.appendQueryParams(request, sb.toString());\n           } else {\n             injector.getInstance(RequestContext.class).set(\n               ContainerLogsPage.REDIRECT_URL, \"false\");\n           }\n         }\n       }\n     }\n     return redirectPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String containerLogPageRedirectPath(HttpServletRequest request) {\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n    String redirectPath \u003d null;\n    if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n      String[] parts \u003d uri.split(\"/\");\n      String containerIdStr \u003d parts[3];\n      String appOwner \u003d parts[4];\n      String logType \u003d null;\n      if (parts.length \u003e 5) {\n        logType \u003d parts[5];\n      }\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        ContainerId containerId \u003d null;\n        try {\n          containerId \u003d ContainerId.fromString(containerIdStr);\n        } catch (IllegalArgumentException ex) {\n          return redirectPath;\n        }\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d nmContext.getApplications().get(appId);\n\n        boolean fetchAggregatedLog \u003d false;\n        List\u003cNameValuePair\u003e params \u003d WebAppUtils.getURLEncodedQueryParam(\n            request);\n        if (params !\u003d null) {\n          for (NameValuePair param : params) {\n            if (param.getName().equals(ContainerLogsPage\n                .LOG_AGGREGATION_TYPE)) {\n              if (param.getValue().equals(ContainerLogsPage\n                  .LOG_AGGREGATION_REMOTE_TYPE)) {\n                fetchAggregatedLog \u003d true;\n              }\n            }\n          }\n        }\n\n        Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n        if ((app \u003d\u003d null || fetchAggregatedLog)\n            \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n              YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n          String logServerUrl \u003d\n              nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n          if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n            StringBuilder sb \u003d new StringBuilder();\n            sb.append(logServerUrl);\n            sb.append(\"/\");\n            sb.append(nmContext.getNodeId().toString());\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(appOwner);\n            if (logType !\u003d null \u0026\u0026 !logType.isEmpty()) {\n              sb.append(\"/\");\n              sb.append(logType);\n            }\n            redirectPath \u003d\n                WebAppUtils.appendQueryParams(request, sb.toString());\n          } else {\n            injector.getInstance(RequestContext.class).set(\n              ContainerLogsPage.REDIRECT_URL, \"false\");\n          }\n        }\n      }\n    }\n    return redirectPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebAppFilter.java",
      "extendedDetails": {}
    },
    "736f54b727c3f0ecc8fb9a594f2281c240c89cb8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4990. Re-direction of a particular log file within in a container in NM UI does not redirect properly. Contributed by Xuan Gong.\n",
      "commitDate": "21/12/16 2:14 PM",
      "commitName": "736f54b727c3f0ecc8fb9a594f2281c240c89cb8",
      "commitAuthor": "Junping Du",
      "commitDateOld": "19/06/16 5:44 PM",
      "commitNameOld": "d0162f2040a4d98fbac51527dfc9447888cb32ab",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 184.9,
      "commitsBetweenForRepo": 1420,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,53 @@\n   private String containerLogPageRedirectPath(HttpServletRequest request) {\n     String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n     String redirectPath \u003d null;\n     if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n       String[] parts \u003d uri.split(\"/\");\n       String containerIdStr \u003d parts[3];\n       String appOwner \u003d parts[4];\n+      String logType \u003d null;\n+      if (parts.length \u003e 5) {\n+        logType \u003d parts[5];\n+      }\n       if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n         ContainerId containerId \u003d null;\n         try {\n           containerId \u003d ContainerId.fromString(containerIdStr);\n         } catch (IllegalArgumentException ex) {\n           return redirectPath;\n         }\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d nmContext.getApplications().get(appId);\n         Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n         if (app \u003d\u003d null\n             \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n               YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n           String logServerUrl \u003d\n               nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n           if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n             StringBuilder sb \u003d new StringBuilder();\n             sb.append(logServerUrl);\n             sb.append(\"/\");\n             sb.append(nmContext.getNodeId().toString());\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(appOwner);\n+            if (logType !\u003d null \u0026\u0026 !logType.isEmpty()) {\n+              sb.append(\"/\");\n+              sb.append(logType);\n+            }\n             redirectPath \u003d\n                 WebAppUtils.appendQueryParams(request, sb.toString());\n           } else {\n             injector.getInstance(RequestContext.class).set(\n               ContainerLogsPage.REDIRECT_URL, \"false\");\n           }\n         }\n       }\n     }\n     return redirectPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String containerLogPageRedirectPath(HttpServletRequest request) {\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n    String redirectPath \u003d null;\n    if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n      String[] parts \u003d uri.split(\"/\");\n      String containerIdStr \u003d parts[3];\n      String appOwner \u003d parts[4];\n      String logType \u003d null;\n      if (parts.length \u003e 5) {\n        logType \u003d parts[5];\n      }\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        ContainerId containerId \u003d null;\n        try {\n          containerId \u003d ContainerId.fromString(containerIdStr);\n        } catch (IllegalArgumentException ex) {\n          return redirectPath;\n        }\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d nmContext.getApplications().get(appId);\n        Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n        if (app \u003d\u003d null\n            \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n              YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n          String logServerUrl \u003d\n              nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n          if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n            StringBuilder sb \u003d new StringBuilder();\n            sb.append(logServerUrl);\n            sb.append(\"/\");\n            sb.append(nmContext.getNodeId().toString());\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(appOwner);\n            if (logType !\u003d null \u0026\u0026 !logType.isEmpty()) {\n              sb.append(\"/\");\n              sb.append(logType);\n            }\n            redirectPath \u003d\n                WebAppUtils.appendQueryParams(request, sb.toString());\n          } else {\n            injector.getInstance(RequestContext.class).set(\n              ContainerLogsPage.REDIRECT_URL, \"false\");\n          }\n        }\n      }\n    }\n    return redirectPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebAppFilter.java",
      "extendedDetails": {}
    },
    "d0162f2040a4d98fbac51527dfc9447888cb32ab": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5246. NMWebAppFilter web redirects drop query parameters. Contributed by Varun Vasudev.\n",
      "commitDate": "19/06/16 5:44 PM",
      "commitName": "d0162f2040a4d98fbac51527dfc9447888cb32ab",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5246. NMWebAppFilter web redirects drop query parameters. Contributed by Varun Vasudev.\n",
          "commitDate": "19/06/16 5:44 PM",
          "commitName": "d0162f2040a4d98fbac51527dfc9447888cb32ab",
          "commitAuthor": "Junping Du",
          "commitDateOld": "20/05/15 5:20 PM",
          "commitNameOld": "6329bd00fa1f17cc9555efa496ea7607ad93e0ce",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 396.02,
          "commitsBetweenForRepo": 2778,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,45 @@\n-  private String containerLogPageRedirectPath(String uri) {\n+  private String containerLogPageRedirectPath(HttpServletRequest request) {\n+    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n     String redirectPath \u003d null;\n     if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n       String[] parts \u003d uri.split(\"/\");\n       String containerIdStr \u003d parts[3];\n       String appOwner \u003d parts[4];\n       if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n         ContainerId containerId \u003d null;\n         try {\n           containerId \u003d ContainerId.fromString(containerIdStr);\n         } catch (IllegalArgumentException ex) {\n           return redirectPath;\n         }\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d nmContext.getApplications().get(appId);\n         Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n         if (app \u003d\u003d null\n             \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n               YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n           String logServerUrl \u003d\n               nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n           if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n             StringBuilder sb \u003d new StringBuilder();\n             sb.append(logServerUrl);\n             sb.append(\"/\");\n             sb.append(nmContext.getNodeId().toString());\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(appOwner);\n-            redirectPath \u003d sb.toString();\n+            redirectPath \u003d\n+                WebAppUtils.appendQueryParams(request, sb.toString());\n           } else {\n             injector.getInstance(RequestContext.class).set(\n               ContainerLogsPage.REDIRECT_URL, \"false\");\n           }\n         }\n       }\n     }\n     return redirectPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String containerLogPageRedirectPath(HttpServletRequest request) {\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n    String redirectPath \u003d null;\n    if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n      String[] parts \u003d uri.split(\"/\");\n      String containerIdStr \u003d parts[3];\n      String appOwner \u003d parts[4];\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        ContainerId containerId \u003d null;\n        try {\n          containerId \u003d ContainerId.fromString(containerIdStr);\n        } catch (IllegalArgumentException ex) {\n          return redirectPath;\n        }\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d nmContext.getApplications().get(appId);\n        Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n        if (app \u003d\u003d null\n            \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n              YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n          String logServerUrl \u003d\n              nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n          if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n            StringBuilder sb \u003d new StringBuilder();\n            sb.append(logServerUrl);\n            sb.append(\"/\");\n            sb.append(nmContext.getNodeId().toString());\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(appOwner);\n            redirectPath \u003d\n                WebAppUtils.appendQueryParams(request, sb.toString());\n          } else {\n            injector.getInstance(RequestContext.class).set(\n              ContainerLogsPage.REDIRECT_URL, \"false\");\n          }\n        }\n      }\n    }\n    return redirectPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebAppFilter.java",
          "extendedDetails": {
            "oldValue": "[uri-String]",
            "newValue": "[request-HttpServletRequest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5246. NMWebAppFilter web redirects drop query parameters. Contributed by Varun Vasudev.\n",
          "commitDate": "19/06/16 5:44 PM",
          "commitName": "d0162f2040a4d98fbac51527dfc9447888cb32ab",
          "commitAuthor": "Junping Du",
          "commitDateOld": "20/05/15 5:20 PM",
          "commitNameOld": "6329bd00fa1f17cc9555efa496ea7607ad93e0ce",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 396.02,
          "commitsBetweenForRepo": 2778,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,45 @@\n-  private String containerLogPageRedirectPath(String uri) {\n+  private String containerLogPageRedirectPath(HttpServletRequest request) {\n+    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n     String redirectPath \u003d null;\n     if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n       String[] parts \u003d uri.split(\"/\");\n       String containerIdStr \u003d parts[3];\n       String appOwner \u003d parts[4];\n       if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n         ContainerId containerId \u003d null;\n         try {\n           containerId \u003d ContainerId.fromString(containerIdStr);\n         } catch (IllegalArgumentException ex) {\n           return redirectPath;\n         }\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d nmContext.getApplications().get(appId);\n         Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n         if (app \u003d\u003d null\n             \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n               YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n           String logServerUrl \u003d\n               nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n           if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n             StringBuilder sb \u003d new StringBuilder();\n             sb.append(logServerUrl);\n             sb.append(\"/\");\n             sb.append(nmContext.getNodeId().toString());\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(containerIdStr);\n             sb.append(\"/\");\n             sb.append(appOwner);\n-            redirectPath \u003d sb.toString();\n+            redirectPath \u003d\n+                WebAppUtils.appendQueryParams(request, sb.toString());\n           } else {\n             injector.getInstance(RequestContext.class).set(\n               ContainerLogsPage.REDIRECT_URL, \"false\");\n           }\n         }\n       }\n     }\n     return redirectPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String containerLogPageRedirectPath(HttpServletRequest request) {\n    String uri \u003d HtmlQuoting.quoteHtmlChars(request.getRequestURI());\n    String redirectPath \u003d null;\n    if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n      String[] parts \u003d uri.split(\"/\");\n      String containerIdStr \u003d parts[3];\n      String appOwner \u003d parts[4];\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        ContainerId containerId \u003d null;\n        try {\n          containerId \u003d ContainerId.fromString(containerIdStr);\n        } catch (IllegalArgumentException ex) {\n          return redirectPath;\n        }\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d nmContext.getApplications().get(appId);\n        Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n        if (app \u003d\u003d null\n            \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n              YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n          String logServerUrl \u003d\n              nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n          if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n            StringBuilder sb \u003d new StringBuilder();\n            sb.append(logServerUrl);\n            sb.append(\"/\");\n            sb.append(nmContext.getNodeId().toString());\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(appOwner);\n            redirectPath \u003d\n                WebAppUtils.appendQueryParams(request, sb.toString());\n          } else {\n            injector.getInstance(RequestContext.class).set(\n              ContainerLogsPage.REDIRECT_URL, \"false\");\n          }\n        }\n      }\n    }\n    return redirectPath;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebAppFilter.java",
          "extendedDetails": {}
        }
      ]
    },
    "6329bd00fa1f17cc9555efa496ea7607ad93e0ce": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3654. ContainerLogsPage web UI should not have meta-refresh. Contributed by Xuan Gong\n",
      "commitDate": "20/05/15 5:20 PM",
      "commitName": "6329bd00fa1f17cc9555efa496ea7607ad93e0ce",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,43 @@\n+  private String containerLogPageRedirectPath(String uri) {\n+    String redirectPath \u003d null;\n+    if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n+      String[] parts \u003d uri.split(\"/\");\n+      String containerIdStr \u003d parts[3];\n+      String appOwner \u003d parts[4];\n+      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n+        ContainerId containerId \u003d null;\n+        try {\n+          containerId \u003d ContainerId.fromString(containerIdStr);\n+        } catch (IllegalArgumentException ex) {\n+          return redirectPath;\n+        }\n+        ApplicationId appId \u003d\n+            containerId.getApplicationAttemptId().getApplicationId();\n+        Application app \u003d nmContext.getApplications().get(appId);\n+        Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n+        if (app \u003d\u003d null\n+            \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n+              YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n+          String logServerUrl \u003d\n+              nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n+          if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n+            StringBuilder sb \u003d new StringBuilder();\n+            sb.append(logServerUrl);\n+            sb.append(\"/\");\n+            sb.append(nmContext.getNodeId().toString());\n+            sb.append(\"/\");\n+            sb.append(containerIdStr);\n+            sb.append(\"/\");\n+            sb.append(containerIdStr);\n+            sb.append(\"/\");\n+            sb.append(appOwner);\n+            redirectPath \u003d sb.toString();\n+          } else {\n+            injector.getInstance(RequestContext.class).set(\n+              ContainerLogsPage.REDIRECT_URL, \"false\");\n+          }\n+        }\n+      }\n+    }\n+    return redirectPath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String containerLogPageRedirectPath(String uri) {\n    String redirectPath \u003d null;\n    if (!uri.contains(\"/ws/v1/node\") \u0026\u0026 uri.contains(\"/containerlogs\")) {\n      String[] parts \u003d uri.split(\"/\");\n      String containerIdStr \u003d parts[3];\n      String appOwner \u003d parts[4];\n      if (containerIdStr !\u003d null \u0026\u0026 !containerIdStr.isEmpty()) {\n        ContainerId containerId \u003d null;\n        try {\n          containerId \u003d ContainerId.fromString(containerIdStr);\n        } catch (IllegalArgumentException ex) {\n          return redirectPath;\n        }\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d nmContext.getApplications().get(appId);\n        Configuration nmConf \u003d nmContext.getLocalDirsHandler().getConfig();\n        if (app \u003d\u003d null\n            \u0026\u0026 nmConf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n              YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n          String logServerUrl \u003d\n              nmConf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\n          if (logServerUrl !\u003d null \u0026\u0026 !logServerUrl.isEmpty()) {\n            StringBuilder sb \u003d new StringBuilder();\n            sb.append(logServerUrl);\n            sb.append(\"/\");\n            sb.append(nmContext.getNodeId().toString());\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(containerIdStr);\n            sb.append(\"/\");\n            sb.append(appOwner);\n            redirectPath \u003d sb.toString();\n          } else {\n            injector.getInstance(RequestContext.class).set(\n              ContainerLogsPage.REDIRECT_URL, \"false\");\n          }\n        }\n      }\n    }\n    return redirectPath;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/NMWebAppFilter.java"
    }
  }
}