{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheManager.java",
  "functionName": "validateExpiryTime",
  "functionId": "validateExpiryTime___info-CacheDirectiveInfo__maxRelativeExpiryTime-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
  "functionStartLine": 382,
  "functionEndLine": 416,
  "numCommitsSeen": 85,
  "timeTaken": 2346,
  "changeHistory": [
    "93e23a99157c30b51752fc49748c3c210745a187",
    "b9ae3087c0f83bfeeea47ded8e19932b46fd2350",
    "9da451cac57f3cd64c2c047675e5b60ca88ecf83"
  ],
  "changeHistoryShort": {
    "93e23a99157c30b51752fc49748c3c210745a187": "Ybodychange",
    "b9ae3087c0f83bfeeea47ded8e19932b46fd2350": "Ymultichange(Yparameterchange,Ybodychange)",
    "9da451cac57f3cd64c2c047675e5b60ca88ecf83": "Yintroduced"
  },
  "changeHistoryDetails": {
    "93e23a99157c30b51752fc49748c3c210745a187": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6613. Improve logging in caching classes. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607697 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 10:13 AM",
      "commitName": "93e23a99157c30b51752fc49748c3c210745a187",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "15/05/14 6:18 PM",
      "commitNameOld": "8f48760663070529ff09927d1772010fffe5f438",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 48.66,
      "commitsBetweenForRepo": 297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,35 @@\n   private static long validateExpiryTime(CacheDirectiveInfo info,\n       long maxRelativeExpiryTime) throws InvalidRequestException {\n-    if (LOG.isTraceEnabled()) {\n-      LOG.trace(\"Validating directive \" + info\n-          + \" pool maxRelativeExpiryTime \" + maxRelativeExpiryTime);\n-    }\n+    LOG.trace(\"Validating directive {} pool maxRelativeExpiryTime {}\", info,\n+        maxRelativeExpiryTime);\n     final long now \u003d new Date().getTime();\n     final long maxAbsoluteExpiryTime \u003d now + maxRelativeExpiryTime;\n     if (info \u003d\u003d null || info.getExpiration() \u003d\u003d null) {\n       return maxAbsoluteExpiryTime;\n     }\n     Expiration expiry \u003d info.getExpiration();\n     if (expiry.getMillis() \u003c 0l) {\n       throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n           + expiry.getMillis());\n     }\n     long relExpiryTime, absExpiryTime;\n     if (expiry.isRelative()) {\n       relExpiryTime \u003d expiry.getMillis();\n       absExpiryTime \u003d now + relExpiryTime;\n     } else {\n       absExpiryTime \u003d expiry.getMillis();\n       relExpiryTime \u003d absExpiryTime - now;\n     }\n     // Need to cap the expiry so we don\u0027t overflow a long when doing math\n     if (relExpiryTime \u003e Expiration.MAX_RELATIVE_EXPIRY_MS) {\n       throw new InvalidRequestException(\"Expiration \"\n           + expiry.toString() + \" is too far in the future!\");\n     }\n     // Fail if the requested expiry is greater than the max\n     if (relExpiryTime \u003e maxRelativeExpiryTime) {\n       throw new InvalidRequestException(\"Expiration \" + expiry.toString()\n           + \" exceeds the max relative expiration time of \"\n           + maxRelativeExpiryTime + \" ms.\");\n     }\n     return absExpiryTime;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static long validateExpiryTime(CacheDirectiveInfo info,\n      long maxRelativeExpiryTime) throws InvalidRequestException {\n    LOG.trace(\"Validating directive {} pool maxRelativeExpiryTime {}\", info,\n        maxRelativeExpiryTime);\n    final long now \u003d new Date().getTime();\n    final long maxAbsoluteExpiryTime \u003d now + maxRelativeExpiryTime;\n    if (info \u003d\u003d null || info.getExpiration() \u003d\u003d null) {\n      return maxAbsoluteExpiryTime;\n    }\n    Expiration expiry \u003d info.getExpiration();\n    if (expiry.getMillis() \u003c 0l) {\n      throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n          + expiry.getMillis());\n    }\n    long relExpiryTime, absExpiryTime;\n    if (expiry.isRelative()) {\n      relExpiryTime \u003d expiry.getMillis();\n      absExpiryTime \u003d now + relExpiryTime;\n    } else {\n      absExpiryTime \u003d expiry.getMillis();\n      relExpiryTime \u003d absExpiryTime - now;\n    }\n    // Need to cap the expiry so we don\u0027t overflow a long when doing math\n    if (relExpiryTime \u003e Expiration.MAX_RELATIVE_EXPIRY_MS) {\n      throw new InvalidRequestException(\"Expiration \"\n          + expiry.toString() + \" is too far in the future!\");\n    }\n    // Fail if the requested expiry is greater than the max\n    if (relExpiryTime \u003e maxRelativeExpiryTime) {\n      throw new InvalidRequestException(\"Expiration \" + expiry.toString()\n          + \" exceeds the max relative expiration time of \"\n          + maxRelativeExpiryTime + \" ms.\");\n    }\n    return absExpiryTime;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
      "extendedDetails": {}
    },
    "b9ae3087c0f83bfeeea47ded8e19932b46fd2350": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5636. Enforce a max TTL per cache pool (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/13 3:27 PM",
      "commitName": "b9ae3087c0f83bfeeea47ded8e19932b46fd2350",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5636. Enforce a max TTL per cache pool (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552841 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/12/13 3:27 PM",
          "commitName": "b9ae3087c0f83bfeeea47ded8e19932b46fd2350",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "17/12/13 10:47 AM",
          "commitNameOld": "991c453ca3ac141a3f286f74af8401f83c38b230",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 3.19,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,37 @@\n-  private static long validateExpiryTime(CacheDirectiveInfo directive,\n-      long defaultValue) throws InvalidRequestException {\n-    long expiryTime;\n-    CacheDirectiveInfo.Expiration expiration \u003d directive.getExpiration();\n-    if (expiration !\u003d null) {\n-      if (expiration.getMillis() \u003c 0) {\n-        throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n-            + expiration.getMillis());\n-      }\n-      // Converts a relative duration into an absolute time based on the local\n-      // clock\n-      expiryTime \u003d expiration.getAbsoluteMillis();\n-    } else {\n-      expiryTime \u003d defaultValue;\n+  private static long validateExpiryTime(CacheDirectiveInfo info,\n+      long maxRelativeExpiryTime) throws InvalidRequestException {\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"Validating directive \" + info\n+          + \" pool maxRelativeExpiryTime \" + maxRelativeExpiryTime);\n     }\n-    return expiryTime;\n+    final long now \u003d new Date().getTime();\n+    final long maxAbsoluteExpiryTime \u003d now + maxRelativeExpiryTime;\n+    if (info \u003d\u003d null || info.getExpiration() \u003d\u003d null) {\n+      return maxAbsoluteExpiryTime;\n+    }\n+    Expiration expiry \u003d info.getExpiration();\n+    if (expiry.getMillis() \u003c 0l) {\n+      throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n+          + expiry.getMillis());\n+    }\n+    long relExpiryTime, absExpiryTime;\n+    if (expiry.isRelative()) {\n+      relExpiryTime \u003d expiry.getMillis();\n+      absExpiryTime \u003d now + relExpiryTime;\n+    } else {\n+      absExpiryTime \u003d expiry.getMillis();\n+      relExpiryTime \u003d absExpiryTime - now;\n+    }\n+    // Need to cap the expiry so we don\u0027t overflow a long when doing math\n+    if (relExpiryTime \u003e Expiration.MAX_RELATIVE_EXPIRY_MS) {\n+      throw new InvalidRequestException(\"Expiration \"\n+          + expiry.toString() + \" is too far in the future!\");\n+    }\n+    // Fail if the requested expiry is greater than the max\n+    if (relExpiryTime \u003e maxRelativeExpiryTime) {\n+      throw new InvalidRequestException(\"Expiration \" + expiry.toString()\n+          + \" exceeds the max relative expiration time of \"\n+          + maxRelativeExpiryTime + \" ms.\");\n+    }\n+    return absExpiryTime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static long validateExpiryTime(CacheDirectiveInfo info,\n      long maxRelativeExpiryTime) throws InvalidRequestException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"Validating directive \" + info\n          + \" pool maxRelativeExpiryTime \" + maxRelativeExpiryTime);\n    }\n    final long now \u003d new Date().getTime();\n    final long maxAbsoluteExpiryTime \u003d now + maxRelativeExpiryTime;\n    if (info \u003d\u003d null || info.getExpiration() \u003d\u003d null) {\n      return maxAbsoluteExpiryTime;\n    }\n    Expiration expiry \u003d info.getExpiration();\n    if (expiry.getMillis() \u003c 0l) {\n      throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n          + expiry.getMillis());\n    }\n    long relExpiryTime, absExpiryTime;\n    if (expiry.isRelative()) {\n      relExpiryTime \u003d expiry.getMillis();\n      absExpiryTime \u003d now + relExpiryTime;\n    } else {\n      absExpiryTime \u003d expiry.getMillis();\n      relExpiryTime \u003d absExpiryTime - now;\n    }\n    // Need to cap the expiry so we don\u0027t overflow a long when doing math\n    if (relExpiryTime \u003e Expiration.MAX_RELATIVE_EXPIRY_MS) {\n      throw new InvalidRequestException(\"Expiration \"\n          + expiry.toString() + \" is too far in the future!\");\n    }\n    // Fail if the requested expiry is greater than the max\n    if (relExpiryTime \u003e maxRelativeExpiryTime) {\n      throw new InvalidRequestException(\"Expiration \" + expiry.toString()\n          + \" exceeds the max relative expiration time of \"\n          + maxRelativeExpiryTime + \" ms.\");\n    }\n    return absExpiryTime;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {
            "oldValue": "[directive-CacheDirectiveInfo, defaultValue-long]",
            "newValue": "[info-CacheDirectiveInfo, maxRelativeExpiryTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5636. Enforce a max TTL per cache pool (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552841 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/12/13 3:27 PM",
          "commitName": "b9ae3087c0f83bfeeea47ded8e19932b46fd2350",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "17/12/13 10:47 AM",
          "commitNameOld": "991c453ca3ac141a3f286f74af8401f83c38b230",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 3.19,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,37 @@\n-  private static long validateExpiryTime(CacheDirectiveInfo directive,\n-      long defaultValue) throws InvalidRequestException {\n-    long expiryTime;\n-    CacheDirectiveInfo.Expiration expiration \u003d directive.getExpiration();\n-    if (expiration !\u003d null) {\n-      if (expiration.getMillis() \u003c 0) {\n-        throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n-            + expiration.getMillis());\n-      }\n-      // Converts a relative duration into an absolute time based on the local\n-      // clock\n-      expiryTime \u003d expiration.getAbsoluteMillis();\n-    } else {\n-      expiryTime \u003d defaultValue;\n+  private static long validateExpiryTime(CacheDirectiveInfo info,\n+      long maxRelativeExpiryTime) throws InvalidRequestException {\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"Validating directive \" + info\n+          + \" pool maxRelativeExpiryTime \" + maxRelativeExpiryTime);\n     }\n-    return expiryTime;\n+    final long now \u003d new Date().getTime();\n+    final long maxAbsoluteExpiryTime \u003d now + maxRelativeExpiryTime;\n+    if (info \u003d\u003d null || info.getExpiration() \u003d\u003d null) {\n+      return maxAbsoluteExpiryTime;\n+    }\n+    Expiration expiry \u003d info.getExpiration();\n+    if (expiry.getMillis() \u003c 0l) {\n+      throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n+          + expiry.getMillis());\n+    }\n+    long relExpiryTime, absExpiryTime;\n+    if (expiry.isRelative()) {\n+      relExpiryTime \u003d expiry.getMillis();\n+      absExpiryTime \u003d now + relExpiryTime;\n+    } else {\n+      absExpiryTime \u003d expiry.getMillis();\n+      relExpiryTime \u003d absExpiryTime - now;\n+    }\n+    // Need to cap the expiry so we don\u0027t overflow a long when doing math\n+    if (relExpiryTime \u003e Expiration.MAX_RELATIVE_EXPIRY_MS) {\n+      throw new InvalidRequestException(\"Expiration \"\n+          + expiry.toString() + \" is too far in the future!\");\n+    }\n+    // Fail if the requested expiry is greater than the max\n+    if (relExpiryTime \u003e maxRelativeExpiryTime) {\n+      throw new InvalidRequestException(\"Expiration \" + expiry.toString()\n+          + \" exceeds the max relative expiration time of \"\n+          + maxRelativeExpiryTime + \" ms.\");\n+    }\n+    return absExpiryTime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static long validateExpiryTime(CacheDirectiveInfo info,\n      long maxRelativeExpiryTime) throws InvalidRequestException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"Validating directive \" + info\n          + \" pool maxRelativeExpiryTime \" + maxRelativeExpiryTime);\n    }\n    final long now \u003d new Date().getTime();\n    final long maxAbsoluteExpiryTime \u003d now + maxRelativeExpiryTime;\n    if (info \u003d\u003d null || info.getExpiration() \u003d\u003d null) {\n      return maxAbsoluteExpiryTime;\n    }\n    Expiration expiry \u003d info.getExpiration();\n    if (expiry.getMillis() \u003c 0l) {\n      throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n          + expiry.getMillis());\n    }\n    long relExpiryTime, absExpiryTime;\n    if (expiry.isRelative()) {\n      relExpiryTime \u003d expiry.getMillis();\n      absExpiryTime \u003d now + relExpiryTime;\n    } else {\n      absExpiryTime \u003d expiry.getMillis();\n      relExpiryTime \u003d absExpiryTime - now;\n    }\n    // Need to cap the expiry so we don\u0027t overflow a long when doing math\n    if (relExpiryTime \u003e Expiration.MAX_RELATIVE_EXPIRY_MS) {\n      throw new InvalidRequestException(\"Expiration \"\n          + expiry.toString() + \" is too far in the future!\");\n    }\n    // Fail if the requested expiry is greater than the max\n    if (relExpiryTime \u003e maxRelativeExpiryTime) {\n      throw new InvalidRequestException(\"Expiration \" + expiry.toString()\n          + \" exceeds the max relative expiration time of \"\n          + maxRelativeExpiryTime + \" ms.\");\n    }\n    return absExpiryTime;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "9da451cac57f3cd64c2c047675e5b60ca88ecf83": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5430. Support TTL on CacheDirectives. Contributed by Andrew Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 11:20 PM",
      "commitName": "9da451cac57f3cd64c2c047675e5b60ca88ecf83",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,17 @@\n+  private static long validateExpiryTime(CacheDirectiveInfo directive,\n+      long defaultValue) throws InvalidRequestException {\n+    long expiryTime;\n+    CacheDirectiveInfo.Expiration expiration \u003d directive.getExpiration();\n+    if (expiration !\u003d null) {\n+      if (expiration.getMillis() \u003c 0) {\n+        throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n+            + expiration.getMillis());\n+      }\n+      // Converts a relative duration into an absolute time based on the local\n+      // clock\n+      expiryTime \u003d expiration.getAbsoluteMillis();\n+    } else {\n+      expiryTime \u003d defaultValue;\n+    }\n+    return expiryTime;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static long validateExpiryTime(CacheDirectiveInfo directive,\n      long defaultValue) throws InvalidRequestException {\n    long expiryTime;\n    CacheDirectiveInfo.Expiration expiration \u003d directive.getExpiration();\n    if (expiration !\u003d null) {\n      if (expiration.getMillis() \u003c 0) {\n        throw new InvalidRequestException(\"Cannot set a negative expiration: \"\n            + expiration.getMillis());\n      }\n      // Converts a relative duration into an absolute time based on the local\n      // clock\n      expiryTime \u003d expiration.getAbsoluteMillis();\n    } else {\n      expiryTime \u003d defaultValue;\n    }\n    return expiryTime;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CacheManager.java"
    }
  }
}