{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Ls.java",
  "functionName": "initialiseOrderComparator",
  "functionId": "initialiseOrderComparator",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Ls.java",
  "functionStartLine": 374,
  "functionEndLine": 402,
  "numCommitsSeen": 26,
  "timeTaken": 761,
  "changeHistory": [
    "30b797ee9df30260314eeadffc7d51492871b352"
  ],
  "changeHistoryShort": {
    "30b797ee9df30260314eeadffc7d51492871b352": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30b797ee9df30260314eeadffc7d51492871b352": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8934. Shell command ls should include sort options (Jonathan Allen via aw)\n",
      "commitDate": "09/02/15 12:50 PM",
      "commitName": "30b797ee9df30260314eeadffc7d51492871b352",
      "commitAuthor": "Allen Wittenauer",
      "diff": "@@ -0,0 +1,29 @@\n+  private void initialiseOrderComparator() {\n+    if (isOrderTime()) {\n+      // mtime is ordered latest date first in line with the unix ls -t command\n+      this.orderComparator \u003d new Comparator\u003cPathData\u003e() {\n+        public int compare(PathData o1, PathData o2) {\n+          Long o1Time \u003d (isUseAtime() ? o1.stat.getAccessTime()\n+              : o1.stat.getModificationTime());\n+          Long o2Time \u003d (isUseAtime() ? o2.stat.getAccessTime()\n+              : o2.stat.getModificationTime());\n+          return o2Time.compareTo(o1Time) * (isOrderReverse() ? -1 : 1);\n+        }\n+      };\n+    } else if (isOrderSize()) {\n+      // size is ordered largest first in line with the unix ls -S command\n+      this.orderComparator \u003d new Comparator\u003cPathData\u003e() {\n+        public int compare(PathData o1, PathData o2) {\n+          Long o1Length \u003d o1.stat.getLen();\n+          Long o2Length \u003d o2.stat.getLen();\n+          return o2Length.compareTo(o1Length) * (isOrderReverse() ? -1 : 1);\n+        }\n+      };\n+    } else {\n+      this.orderComparator \u003d new Comparator\u003cPathData\u003e() {\n+        public int compare(PathData o1, PathData o2) {\n+          return o1.compareTo(o2) * (isOrderReverse() ? -1 : 1);\n+        }\n+      };\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initialiseOrderComparator() {\n    if (isOrderTime()) {\n      // mtime is ordered latest date first in line with the unix ls -t command\n      this.orderComparator \u003d new Comparator\u003cPathData\u003e() {\n        public int compare(PathData o1, PathData o2) {\n          Long o1Time \u003d (isUseAtime() ? o1.stat.getAccessTime()\n              : o1.stat.getModificationTime());\n          Long o2Time \u003d (isUseAtime() ? o2.stat.getAccessTime()\n              : o2.stat.getModificationTime());\n          return o2Time.compareTo(o1Time) * (isOrderReverse() ? -1 : 1);\n        }\n      };\n    } else if (isOrderSize()) {\n      // size is ordered largest first in line with the unix ls -S command\n      this.orderComparator \u003d new Comparator\u003cPathData\u003e() {\n        public int compare(PathData o1, PathData o2) {\n          Long o1Length \u003d o1.stat.getLen();\n          Long o2Length \u003d o2.stat.getLen();\n          return o2Length.compareTo(o1Length) * (isOrderReverse() ? -1 : 1);\n        }\n      };\n    } else {\n      this.orderComparator \u003d new Comparator\u003cPathData\u003e() {\n        public int compare(PathData o1, PathData o2) {\n          return o1.compareTo(o2) * (isOrderReverse() ? -1 : 1);\n        }\n      };\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Ls.java"
    }
  }
}