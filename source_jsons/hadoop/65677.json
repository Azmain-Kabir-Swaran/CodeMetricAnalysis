{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PathOrderComparators.java",
  "functionName": "compare",
  "functionId": "compare___pathL-Path__pathR-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/PathOrderComparators.java",
  "functionStartLine": 74,
  "functionEndLine": 92,
  "numCommitsSeen": 2,
  "timeTaken": 1392,
  "changeHistory": [
    "e02eb24e0a9139418120027b694492e0738df20a"
  ],
  "changeHistoryShort": {
    "e02eb24e0a9139418120027b694492e0738df20a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e02eb24e0a9139418120027b694492e0738df20a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15183. S3Guard store becomes inconsistent after partial failure of rename.\n\nContributed by Steve Loughran.\n\nChange-Id: I825b0bc36be960475d2d259b1cdab45ae1bb78eb\n",
      "commitDate": "20/06/19 1:56 AM",
      "commitName": "e02eb24e0a9139418120027b694492e0738df20a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,19 @@\n+    public int compare(Path pathL, Path pathR) {\n+      // exit fast on equal values.\n+      if (pathL.equals(pathR)) {\n+        return 0;\n+      }\n+      int depthL \u003d pathL.depth();\n+      int depthR \u003d pathR.depth();\n+      if (depthL \u003c depthR) {\n+        // left is higher up than the right.\n+        return -1;\n+      }\n+      if (depthR \u003c depthL) {\n+        // right is higher up than the left\n+        return 1;\n+      }\n+      // and if they are of equal depth, use the \"classic\" comparator\n+      // of paths.\n+      return pathL.compareTo(pathR);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int compare(Path pathL, Path pathR) {\n      // exit fast on equal values.\n      if (pathL.equals(pathR)) {\n        return 0;\n      }\n      int depthL \u003d pathL.depth();\n      int depthR \u003d pathR.depth();\n      if (depthL \u003c depthR) {\n        // left is higher up than the right.\n        return -1;\n      }\n      if (depthR \u003c depthL) {\n        // right is higher up than the left\n        return 1;\n      }\n      // and if they are of equal depth, use the \"classic\" comparator\n      // of paths.\n      return pathL.compareTo(pathR);\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/PathOrderComparators.java"
    }
  }
}