{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPoolSliceStorage.java",
  "functionName": "doUpgrade",
  "functionId": "doUpgrade___name-String__bpSd-StorageDirectory(modifiers-final)__nsInfo-NamespaceInfo__bpPrevDir-File(modifiers-final)__bpTmpDir-File(modifiers-final)__bpCurDir-File(modifiers-final)__oldLV-int(modifiers-final)__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
  "functionStartLine": 504,
  "functionEndLine": 520,
  "numCommitsSeen": 107,
  "timeTaken": 9102,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
    "b5b862e3afd0797dc8f940204622e174c1382f5e",
    "dbf14320c093991d2ca97b3608efe1c3c0af9888",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": "Yrename",
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Yparametermetachange)",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": "Ymultichange(Yparameterchange,Ybodychange)",
    "b5b862e3afd0797dc8f940204622e174c1382f5e": "Ybodychange",
    "dbf14320c093991d2ca97b3608efe1c3c0af9888": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void doUpgrade(String name, final StorageDirectory bpSd,\n       NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n       final File bpCurDir, final int oldLV, Configuration conf)\n           throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n-    LOG.info(\"Upgrade of \" + name + \" is complete\");\n+    LOG.info(\"Upgrade of {} is complete\", name);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doUpgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of {} is complete\", name);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "66289a3bf403f307844ea0b6ceed35b603d12c0b": {
      "type": "Yrename",
      "commitMessage": "HDFS-8578. On upgrade, Datanode should process all storage/data dirs in parallel.  Contributed by vinayakumarb and szetszwo\n",
      "commitDate": "22/02/16 3:01 PM",
      "commitName": "66289a3bf403f307844ea0b6ceed35b603d12c0b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "27/01/16 6:58 PM",
      "commitNameOld": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 25.84,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-  private void doUgrade(String name, final StorageDirectory bpSd,\n+  private void doUpgrade(String name, final StorageDirectory bpSd,\n       NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n       final File bpCurDir, final int oldLV, Configuration conf)\n           throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of \" + name + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doUpgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of \" + name + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldValue": "doUgrade",
        "newValue": "doUpgrade"
      }
    },
    "662e17b46a0f41ade6a304e12925b70b5d09fc2f": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
      "commitDate": "27/01/16 6:58 PM",
      "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,17 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n-      throws IOException {\n-    // Upgrading is applicable only to release with federation or after\n-    if (!DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      return;\n-    }\n-    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n-        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-        + \"; new CTime \u003d \" + nsInfo.getCTime());\n-    // get \u003cSD\u003e/previous directory\n-    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n-    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n-    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n-    \n-    // If \u003cSD\u003e/previous directory exists delete it\n-    if (dnPrevDir.exists()) {\n-      deleteDir(dnPrevDir);\n-    }\n-    File bpCurDir \u003d bpSd.getCurrentDir();\n-    File bpPrevDir \u003d bpSd.getPreviousDir();\n-    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n-    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n-    \n-    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n-    if (bpPrevDir.exists()) {\n-      deleteDir(bpPrevDir);\n-    }\n-    File bpTmpDir \u003d bpSd.getPreviousTmp();\n-    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n-    \n-    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n-    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n-    rename(bpCurDir, bpTmpDir);\n-    \n+  private void doUgrade(String name, final StorageDirectory bpSd,\n+      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n+      final File bpCurDir, final int oldLV, Configuration conf)\n+          throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n+    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n-    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n-        + \" is complete\");\n+    LOG.info(\"Upgrade of \" + name + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doUgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of \" + name + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "doUpgrade",
            "newValue": "doUgrade"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,17 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n-      throws IOException {\n-    // Upgrading is applicable only to release with federation or after\n-    if (!DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      return;\n-    }\n-    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n-        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-        + \"; new CTime \u003d \" + nsInfo.getCTime());\n-    // get \u003cSD\u003e/previous directory\n-    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n-    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n-    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n-    \n-    // If \u003cSD\u003e/previous directory exists delete it\n-    if (dnPrevDir.exists()) {\n-      deleteDir(dnPrevDir);\n-    }\n-    File bpCurDir \u003d bpSd.getCurrentDir();\n-    File bpPrevDir \u003d bpSd.getPreviousDir();\n-    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n-    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n-    \n-    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n-    if (bpPrevDir.exists()) {\n-      deleteDir(bpPrevDir);\n-    }\n-    File bpTmpDir \u003d bpSd.getPreviousTmp();\n-    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n-    \n-    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n-    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n-    rename(bpCurDir, bpTmpDir);\n-    \n+  private void doUgrade(String name, final StorageDirectory bpSd,\n+      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n+      final File bpCurDir, final int oldLV, Configuration conf)\n+          throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n+    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n-    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n-        + \" is complete\");\n+    LOG.info(\"Upgrade of \" + name + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doUgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of \" + name + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, bpSd-StorageDirectory, nsInfo-NamespaceInfo]",
            "newValue": "[name-String, bpSd-StorageDirectory(modifiers-final), nsInfo-NamespaceInfo, bpPrevDir-File(modifiers-final), bpTmpDir-File(modifiers-final), bpCurDir-File(modifiers-final), oldLV-int(modifiers-final), conf-Configuration]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,17 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n-      throws IOException {\n-    // Upgrading is applicable only to release with federation or after\n-    if (!DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      return;\n-    }\n-    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n-        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-        + \"; new CTime \u003d \" + nsInfo.getCTime());\n-    // get \u003cSD\u003e/previous directory\n-    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n-    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n-    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n-    \n-    // If \u003cSD\u003e/previous directory exists delete it\n-    if (dnPrevDir.exists()) {\n-      deleteDir(dnPrevDir);\n-    }\n-    File bpCurDir \u003d bpSd.getCurrentDir();\n-    File bpPrevDir \u003d bpSd.getPreviousDir();\n-    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n-    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n-    \n-    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n-    if (bpPrevDir.exists()) {\n-      deleteDir(bpPrevDir);\n-    }\n-    File bpTmpDir \u003d bpSd.getPreviousTmp();\n-    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n-    \n-    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n-    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n-    rename(bpCurDir, bpTmpDir);\n-    \n+  private void doUgrade(String name, final StorageDirectory bpSd,\n+      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n+      final File bpCurDir, final int oldLV, Configuration conf)\n+          throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n+    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n-    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n-        + \" is complete\");\n+    LOG.info(\"Upgrade of \" + name + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doUgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of \" + name + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,17 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n-      throws IOException {\n-    // Upgrading is applicable only to release with federation or after\n-    if (!DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      return;\n-    }\n-    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n-        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-        + \"; new CTime \u003d \" + nsInfo.getCTime());\n-    // get \u003cSD\u003e/previous directory\n-    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n-    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n-    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n-    \n-    // If \u003cSD\u003e/previous directory exists delete it\n-    if (dnPrevDir.exists()) {\n-      deleteDir(dnPrevDir);\n-    }\n-    File bpCurDir \u003d bpSd.getCurrentDir();\n-    File bpPrevDir \u003d bpSd.getPreviousDir();\n-    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n-    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n-    \n-    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n-    if (bpPrevDir.exists()) {\n-      deleteDir(bpPrevDir);\n-    }\n-    File bpTmpDir \u003d bpSd.getPreviousTmp();\n-    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n-    \n-    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n-    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n-    rename(bpCurDir, bpTmpDir);\n-    \n+  private void doUgrade(String name, final StorageDirectory bpSd,\n+      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n+      final File bpCurDir, final int oldLV, Configuration conf)\n+          throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n+    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n-    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n-        + \" is complete\");\n+    LOG.info(\"Upgrade of \" + name + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doUgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of \" + name + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-9654. Code refactoring for HDFS-8578.\n",
          "commitDate": "27/01/16 6:58 PM",
          "commitName": "662e17b46a0f41ade6a304e12925b70b5d09fc2f",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 8:04 AM",
          "commitNameOld": "5b43db47a313decccdcca8f45c5708aab46396df",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 106.5,
          "commitsBetweenForRepo": 736,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,17 @@\n-  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n-      throws IOException {\n-    // Upgrading is applicable only to release with federation or after\n-    if (!DataNodeLayoutVersion.supports(\n-        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n-      return;\n-    }\n-    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n-        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n-        + \"; new CTime \u003d \" + nsInfo.getCTime());\n-    // get \u003cSD\u003e/previous directory\n-    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n-    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n-    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n-    \n-    // If \u003cSD\u003e/previous directory exists delete it\n-    if (dnPrevDir.exists()) {\n-      deleteDir(dnPrevDir);\n-    }\n-    File bpCurDir \u003d bpSd.getCurrentDir();\n-    File bpPrevDir \u003d bpSd.getPreviousDir();\n-    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n-    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n-    \n-    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n-    if (bpPrevDir.exists()) {\n-      deleteDir(bpPrevDir);\n-    }\n-    File bpTmpDir \u003d bpSd.getPreviousTmp();\n-    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n-    \n-    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n-    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n-    rename(bpCurDir, bpTmpDir);\n-    \n+  private void doUgrade(String name, final StorageDirectory bpSd,\n+      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n+      final File bpCurDir, final int oldLV, Configuration conf)\n+          throws IOException {\n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n+    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n     this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n-    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n-        + \" is complete\");\n+    LOG.info(\"Upgrade of \" + name + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doUgrade(String name, final StorageDirectory bpSd,\n      NamespaceInfo nsInfo, final File bpPrevDir, final File bpTmpDir,\n      final File bpCurDir, final int oldLV, Configuration conf)\n          throws IOException {\n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir, oldLV, conf);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of \" + name + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[datanode-DataNode, bpSd-StorageDirectory, nsInfo-NamespaceInfo]",
            "newValue": "[name-String, bpSd-StorageDirectory(modifiers-final), nsInfo-NamespaceInfo, bpPrevDir-File(modifiers-final), bpTmpDir-File(modifiers-final), bpCurDir-File(modifiers-final), oldLV-int(modifiers-final), conf-Configuration]"
          }
        }
      ]
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/03/15 3:25 PM",
      "commitNameOld": "1a495fbb489c9e9a23b341a52696d10e9e272b04",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 32.78,
      "commitsBetweenForRepo": 284,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n       throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n+        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n     //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n-    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n+    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsServerConstants.DATANODE_LAYOUT_VERSION\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsServerConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 1:41 PM",
      "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "31/07/14 6:13 PM",
          "commitNameOld": "b5b862e3afd0797dc8f940204622e174c1382f5e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n+  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n+      throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n     //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(bpTmpDir, bpCurDir);\n+    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n     this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {
            "oldValue": "[bpSd-StorageDirectory, nsInfo-NamespaceInfo]",
            "newValue": "[datanode-DataNode, bpSd-StorageDirectory, nsInfo-NamespaceInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "31/07/14 6:13 PM",
          "commitNameOld": "b5b862e3afd0797dc8f940204622e174c1382f5e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,50 @@\n-  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n+  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n+      throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n     //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n-    linkAllBlocks(bpTmpDir, bpCurDir);\n+    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n     this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void doUpgrade(DataNode datanode, StorageDirectory bpSd, NamespaceInfo nsInfo)\n      throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(datanode, bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "b5b862e3afd0797dc8f940204622e174c1382f5e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6797. DataNode logs wrong layoutversion during upgrade. (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 6:13 PM",
      "commitName": "b5b862e3afd0797dc8f940204622e174c1382f5e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "07/04/14 5:00 PM",
      "commitNameOld": "5bbf2717127b80c29ae16f54941aeaa69351b460",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 115.05,
      "commitsBetweenForRepo": 725,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n-        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n+        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n     //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir);\n     this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n     // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "dbf14320c093991d2ca97b3608efe1c3c0af9888": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6005. Simplify Datanode rollback and downgrade. (Contributed by Suresh Srinivas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1571431 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/14 12:46 PM",
      "commitName": "dbf14320c093991d2ca97b3608efe1c3c0af9888",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "21/02/14 2:40 PM",
      "commitNameOld": "3f7852bd27de4f87e242ad4eb73932b739922a5b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!DataNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n-    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n+    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n+    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir);\n     this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n-    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n+    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n+    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/current/\u003cbpid\u003e/current to\n    //    \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/current/\u003cbpid\u003e/previous.tmp to\n    // \u003cSD\u003e/current/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "25/01/14 12:01 PM",
      "commitNameOld": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.31,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n     // Upgrading is applicable only to release with federation or after\n-    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+    if (!DataNodeLayoutVersion.supports(\n+        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir);\n-    this.layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n+    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!DataNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.DATANODE_LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "21/08/12 2:18 PM",
      "commitNameOld": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 68.08,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir);\n     this.layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n-        + \" is complete.\");\n+        + \" is complete\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir);\n-    this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n+    this.layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n     writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d HdfsConstants.LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete.\");\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
      }
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 45.22,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n     // Upgrading is applicable only to release with federation or after\n     if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n       return;\n     }\n     LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n         + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n         + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n         + \"; new CTime \u003d \" + nsInfo.getCTime());\n     // get \u003cSD\u003e/previous directory\n     String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n     StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n     File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n     \n     // If \u003cSD\u003e/previous directory exists delete it\n     if (dnPrevDir.exists()) {\n       deleteDir(dnPrevDir);\n     }\n     File bpCurDir \u003d bpSd.getCurrentDir();\n     File bpPrevDir \u003d bpSd.getPreviousDir();\n     assert bpCurDir.exists() : \"BP level current directory must exist.\";\n     cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n     \n     // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n     if (bpPrevDir.exists()) {\n       deleteDir(bpPrevDir);\n     }\n     File bpTmpDir \u003d bpSd.getPreviousTmp();\n     assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n     \n     // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n     rename(bpCurDir, bpTmpDir);\n     \n     // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n     linkAllBlocks(bpTmpDir, bpCurDir);\n     this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n     assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n         : \"Data-node and name-node layout versions must be the same.\";\n     this.cTime \u003d nsInfo.getCTime();\n-    bpSd.write();\n+    writeProperties(bpSd);\n     \n     // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n     rename(bpTmpDir, bpPrevDir);\n     LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n         + \" is complete.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    writeProperties(bpSd);\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete.\");\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n+    // Upgrading is applicable only to release with federation or after\n+    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n+      return;\n+    }\n+    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n+        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n+        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n+        + \"; new CTime \u003d \" + nsInfo.getCTime());\n+    // get \u003cSD\u003e/previous directory\n+    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n+    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n+    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n+    \n+    // If \u003cSD\u003e/previous directory exists delete it\n+    if (dnPrevDir.exists()) {\n+      deleteDir(dnPrevDir);\n+    }\n+    File bpCurDir \u003d bpSd.getCurrentDir();\n+    File bpPrevDir \u003d bpSd.getPreviousDir();\n+    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n+    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n+    \n+    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n+    if (bpPrevDir.exists()) {\n+      deleteDir(bpPrevDir);\n+    }\n+    File bpTmpDir \u003d bpSd.getPreviousTmp();\n+    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n+    \n+    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n+    rename(bpCurDir, bpTmpDir);\n+    \n+    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n+    linkAllBlocks(bpTmpDir, bpCurDir);\n+    this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n+    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n+        : \"Data-node and name-node layout versions must be the same.\";\n+    this.cTime \u003d nsInfo.getCTime();\n+    bpSd.write();\n+    \n+    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n+    rename(bpTmpDir, bpPrevDir);\n+    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n+        + \" is complete.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void doUpgrade(StorageDirectory bpSd, NamespaceInfo nsInfo) throws IOException {\n    // Upgrading is applicable only to release with federation or after\n    if (!LayoutVersion.supports(Feature.FEDERATION, layoutVersion)) {\n      return;\n    }\n    LOG.info(\"Upgrading block pool storage directory \" + bpSd.getRoot()\n        + \".\\n   old LV \u003d \" + this.getLayoutVersion() + \"; old CTime \u003d \"\n        + this.getCTime() + \".\\n   new LV \u003d \" + nsInfo.getLayoutVersion()\n        + \"; new CTime \u003d \" + nsInfo.getCTime());\n    // get \u003cSD\u003e/previous directory\n    String dnRoot \u003d getDataNodeStorageRoot(bpSd.getRoot().getCanonicalPath());\n    StorageDirectory dnSdStorage \u003d new StorageDirectory(new File(dnRoot));\n    File dnPrevDir \u003d dnSdStorage.getPreviousDir();\n    \n    // If \u003cSD\u003e/previous directory exists delete it\n    if (dnPrevDir.exists()) {\n      deleteDir(dnPrevDir);\n    }\n    File bpCurDir \u003d bpSd.getCurrentDir();\n    File bpPrevDir \u003d bpSd.getPreviousDir();\n    assert bpCurDir.exists() : \"BP level current directory must exist.\";\n    cleanupDetachDir(new File(bpCurDir, DataStorage.STORAGE_DIR_DETACHED));\n    \n    // 1. Delete \u003cSD\u003e/current/\u003cbpid\u003e/previous dir before upgrading\n    if (bpPrevDir.exists()) {\n      deleteDir(bpPrevDir);\n    }\n    File bpTmpDir \u003d bpSd.getPreviousTmp();\n    assert !bpTmpDir.exists() : \"previous.tmp directory must not exist.\";\n    \n    // 2. Rename \u003cSD\u003e/curernt/\u003cbpid\u003e/current to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp\n    rename(bpCurDir, bpTmpDir);\n    \n    // 3. Create new \u003cSD\u003e/current with block files hardlinks and VERSION\n    linkAllBlocks(bpTmpDir, bpCurDir);\n    this.layoutVersion \u003d FSConstants.LAYOUT_VERSION;\n    assert this.namespaceID \u003d\u003d nsInfo.getNamespaceID() \n        : \"Data-node and name-node layout versions must be the same.\";\n    this.cTime \u003d nsInfo.getCTime();\n    bpSd.write();\n    \n    // 4.rename \u003cSD\u003e/curernt/\u003cbpid\u003e/previous.tmp to \u003cSD\u003e/curernt/\u003cbpid\u003e/previous\n    rename(bpTmpDir, bpPrevDir);\n    LOG.info(\"Upgrade of block pool \" + blockpoolID + \" at \" + bpSd.getRoot()\n        + \" is complete.\");\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceStorage.java"
    }
  }
}