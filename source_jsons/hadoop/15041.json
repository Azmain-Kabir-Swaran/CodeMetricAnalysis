{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBImageCorruptionDetector.java",
  "functionName": "afterOutput",
  "functionId": "afterOutput",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageCorruptionDetector.java",
  "functionStartLine": 316,
  "functionEndLine": 343,
  "numCommitsSeen": 1,
  "timeTaken": 785,
  "changeHistory": [
    "fb10803dfa67394650072bdea327296f8ad2a744"
  ],
  "changeHistoryShort": {
    "fb10803dfa67394650072bdea327296f8ad2a744": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb10803dfa67394650072bdea327296f8ad2a744": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13818. Extend OIV to detect FSImage corruption. Contributed by Adam Antal.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "03/12/18 10:34 AM",
      "commitName": "fb10803dfa67394650072bdea327296f8ad2a744",
      "commitAuthor": "Adam Antal",
      "diff": "@@ -0,0 +1,28 @@\n+  public void afterOutput() throws IOException {\n+    if (!corruptionsMap.isEmpty()) {\n+      // Also write out corruptions when the path could be not be decided\n+      LOG.info(\"Outputting {} more corrupted nodes.\", corruptionsMap.size());\n+      for (PBImageCorruption c : corruptionsMap.values()) {\n+        long id \u003d c.getId();\n+        String name \u003d \"\";\n+        long parentId \u003d -1;\n+        try {\n+          name \u003d getNodeName(id);\n+        } catch (IgnoreSnapshotException ignored) {\n+        }\n+        try {\n+          parentId \u003d getParentId(id);\n+        } catch (IgnoreSnapshotException ignored) {\n+        }\n+        OutputEntryBuilder entryBuilder \u003d\n+            new OutputEntryBuilder(this, true);\n+        entryBuilder.setCorruption(corruptionsMap.get(id))\n+            .setName(name)\n+            .setNodeType(corrChecker.getTypeOfId(id));\n+        if (parentId !\u003d -1) {\n+          entryBuilder.setParentId(parentId);\n+        }\n+        printIfNotEmpty(entryBuilder.build());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void afterOutput() throws IOException {\n    if (!corruptionsMap.isEmpty()) {\n      // Also write out corruptions when the path could be not be decided\n      LOG.info(\"Outputting {} more corrupted nodes.\", corruptionsMap.size());\n      for (PBImageCorruption c : corruptionsMap.values()) {\n        long id \u003d c.getId();\n        String name \u003d \"\";\n        long parentId \u003d -1;\n        try {\n          name \u003d getNodeName(id);\n        } catch (IgnoreSnapshotException ignored) {\n        }\n        try {\n          parentId \u003d getParentId(id);\n        } catch (IgnoreSnapshotException ignored) {\n        }\n        OutputEntryBuilder entryBuilder \u003d\n            new OutputEntryBuilder(this, true);\n        entryBuilder.setCorruption(corruptionsMap.get(id))\n            .setName(name)\n            .setNodeType(corrChecker.getTypeOfId(id));\n        if (parentId !\u003d -1) {\n          entryBuilder.setParentId(parentId);\n        }\n        printIfNotEmpty(entryBuilder.build());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageCorruptionDetector.java"
    }
  }
}