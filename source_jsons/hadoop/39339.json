{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "createResourceCommitRequest",
  "functionId": "createResourceCommitRequest___appAttempt-SchedulerApplicationAttempt__schedulingRequest-SchedulingRequest__schedulerNode-SchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2894,
  "functionEndLine": 2935,
  "numCommitsSeen": 239,
  "timeTaken": 4252,
  "changeHistory": [
    "951c98f89059d64fda8456366f680eff4a7a6785",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
    "88d8d3f40b2923fab23a933bce1cd2e9c320ae84"
  ],
  "changeHistoryShort": {
    "951c98f89059d64fda8456366f680eff4a7a6785": "Ybodychange",
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": "Ybodychange",
    "88d8d3f40b2923fab23a933bce1cd2e9c320ae84": "Yintroduced"
  },
  "changeHistoryDetails": {
    "951c98f89059d64fda8456366f680eff4a7a6785": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8233. NPE in CapacityScheduler#tryCommit when handling allocate/reserve proposal whose allocatedOrReservedContainer is null. Contributed by Tao Yang.\n",
      "commitDate": "06/11/18 6:17 PM",
      "commitName": "951c98f89059d64fda8456366f680eff4a7a6785",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/11/18 10:50 PM",
      "commitNameOld": "5d6554c722f08f79bce904e021243605ee75bae3",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n       createResourceCommitRequest(SchedulerApplicationAttempt appAttempt,\n       SchedulingRequest schedulingRequest, SchedulerNode schedulerNode) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n         null;\n     Resource resource \u003d schedulingRequest.getResourceSizing().getResources();\n     if (Resources.greaterThan(calculator, getClusterResource(),\n         resource, Resources.none())) {\n       ContainerId cId \u003d\n           ContainerId.newContainerId(appAttempt.getApplicationAttemptId(),\n               appAttempt.getAppSchedulingInfo().getNewContainerId());\n       Container container \u003d BuilderUtils.newContainer(\n           cId, schedulerNode.getNodeID(), schedulerNode.getHttpAddress(),\n           resource, schedulingRequest.getPriority(), null,\n           ExecutionType.GUARANTEED,\n           schedulingRequest.getAllocationRequestId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           SchedulerRequestKey.extractFrom(container),\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, false);\n       ((RMContainerImpl)rmContainer).setAllocationTags(\n           new HashSet\u003c\u003e(schedulingRequest.getAllocationTags()));\n \n-      allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n-          getSchedulerContainer(rmContainer, true),\n-          null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n-          SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n-          resource);\n+      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+          schedulerContainer \u003d getSchedulerContainer(rmContainer, true);\n+      if (schedulerContainer \u003d\u003d null) {\n+        allocated \u003d null;\n+      } else {\n+        allocated \u003d new ContainerAllocationProposal\u003c\u003e(schedulerContainer,\n+            null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n+            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, resource);\n+      }\n     }\n \n     if (null !\u003d allocated) {\n       List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n           allocationsList \u003d new ArrayList\u003c\u003e();\n       allocationsList.add(allocated);\n \n       return new ResourceCommitRequest\u003c\u003e(allocationsList, null, null);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createResourceCommitRequest(SchedulerApplicationAttempt appAttempt,\n      SchedulingRequest schedulingRequest, SchedulerNode schedulerNode) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n        null;\n    Resource resource \u003d schedulingRequest.getResourceSizing().getResources();\n    if (Resources.greaterThan(calculator, getClusterResource(),\n        resource, Resources.none())) {\n      ContainerId cId \u003d\n          ContainerId.newContainerId(appAttempt.getApplicationAttemptId(),\n              appAttempt.getAppSchedulingInfo().getNewContainerId());\n      Container container \u003d BuilderUtils.newContainer(\n          cId, schedulerNode.getNodeID(), schedulerNode.getHttpAddress(),\n          resource, schedulingRequest.getPriority(), null,\n          ExecutionType.GUARANTEED,\n          schedulingRequest.getAllocationRequestId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          SchedulerRequestKey.extractFrom(container),\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, false);\n      ((RMContainerImpl)rmContainer).setAllocationTags(\n          new HashSet\u003c\u003e(schedulingRequest.getAllocationTags()));\n\n      SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n          schedulerContainer \u003d getSchedulerContainer(rmContainer, true);\n      if (schedulerContainer \u003d\u003d null) {\n        allocated \u003d null;\n      } else {\n        allocated \u003d new ContainerAllocationProposal\u003c\u003e(schedulerContainer,\n            null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n            SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY, resource);\n      }\n    }\n\n    if (null !\u003d allocated) {\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          allocationsList \u003d new ArrayList\u003c\u003e();\n      allocationsList.add(allocated);\n\n      return new ResourceCommitRequest\u003c\u003e(allocationsList, null, null);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7612. Add Processor Framework for Rich Placement Constraints. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "f9af15d659f59fd0cf564fe1ecc8e06c6429ba68",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n       createResourceCommitRequest(SchedulerApplicationAttempt appAttempt,\n       SchedulingRequest schedulingRequest, SchedulerNode schedulerNode) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n         null;\n     Resource resource \u003d schedulingRequest.getResourceSizing().getResources();\n     if (Resources.greaterThan(calculator, getClusterResource(),\n         resource, Resources.none())) {\n       ContainerId cId \u003d\n           ContainerId.newContainerId(appAttempt.getApplicationAttemptId(),\n               appAttempt.getAppSchedulingInfo().getNewContainerId());\n       Container container \u003d BuilderUtils.newContainer(\n           cId, schedulerNode.getNodeID(), schedulerNode.getHttpAddress(),\n           resource, schedulingRequest.getPriority(), null,\n           ExecutionType.GUARANTEED,\n           schedulingRequest.getAllocationRequestId());\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           SchedulerRequestKey.extractFrom(container),\n           appAttempt.getApplicationAttemptId(), container.getNodeId(),\n           appAttempt.getUser(), rmContext, false);\n+      ((RMContainerImpl)rmContainer).setAllocationTags(\n+          new HashSet\u003c\u003e(schedulingRequest.getAllocationTags()));\n \n       allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n           getSchedulerContainer(rmContainer, true),\n           null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n           SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n           resource);\n     }\n \n     if (null !\u003d allocated) {\n       List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n           allocationsList \u003d new ArrayList\u003c\u003e();\n       allocationsList.add(allocated);\n \n       return new ResourceCommitRequest\u003c\u003e(allocationsList, null, null);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createResourceCommitRequest(SchedulerApplicationAttempt appAttempt,\n      SchedulingRequest schedulingRequest, SchedulerNode schedulerNode) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n        null;\n    Resource resource \u003d schedulingRequest.getResourceSizing().getResources();\n    if (Resources.greaterThan(calculator, getClusterResource(),\n        resource, Resources.none())) {\n      ContainerId cId \u003d\n          ContainerId.newContainerId(appAttempt.getApplicationAttemptId(),\n              appAttempt.getAppSchedulingInfo().getNewContainerId());\n      Container container \u003d BuilderUtils.newContainer(\n          cId, schedulerNode.getNodeID(), schedulerNode.getHttpAddress(),\n          resource, schedulingRequest.getPriority(), null,\n          ExecutionType.GUARANTEED,\n          schedulingRequest.getAllocationRequestId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          SchedulerRequestKey.extractFrom(container),\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, false);\n      ((RMContainerImpl)rmContainer).setAllocationTags(\n          new HashSet\u003c\u003e(schedulingRequest.getAllocationTags()));\n\n      allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n          getSchedulerContainer(rmContainer, true),\n          null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n          SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n          resource);\n    }\n\n    if (null !\u003d allocated) {\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          allocationsList \u003d new ArrayList\u003c\u003e();\n      allocationsList.add(allocated);\n\n      return new ResourceCommitRequest\u003c\u003e(allocationsList, null, null);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "88d8d3f40b2923fab23a933bce1cd2e9c320ae84": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7670. Modifications to the ResourceScheduler API to support SchedulingRequests. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,36 @@\n+      createResourceCommitRequest(SchedulerApplicationAttempt appAttempt,\n+      SchedulingRequest schedulingRequest, SchedulerNode schedulerNode) {\n+    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n+        null;\n+    Resource resource \u003d schedulingRequest.getResourceSizing().getResources();\n+    if (Resources.greaterThan(calculator, getClusterResource(),\n+        resource, Resources.none())) {\n+      ContainerId cId \u003d\n+          ContainerId.newContainerId(appAttempt.getApplicationAttemptId(),\n+              appAttempt.getAppSchedulingInfo().getNewContainerId());\n+      Container container \u003d BuilderUtils.newContainer(\n+          cId, schedulerNode.getNodeID(), schedulerNode.getHttpAddress(),\n+          resource, schedulingRequest.getPriority(), null,\n+          ExecutionType.GUARANTEED,\n+          schedulingRequest.getAllocationRequestId());\n+      RMContainer rmContainer \u003d new RMContainerImpl(container,\n+          SchedulerRequestKey.extractFrom(container),\n+          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n+          appAttempt.getUser(), rmContext, false);\n+\n+      allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n+          getSchedulerContainer(rmContainer, true),\n+          null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n+          SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n+          resource);\n+    }\n+\n+    if (null !\u003d allocated) {\n+      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n+          allocationsList \u003d new ArrayList\u003c\u003e();\n+      allocationsList.add(allocated);\n+\n+      return new ResourceCommitRequest\u003c\u003e(allocationsList, null, null);\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      createResourceCommitRequest(SchedulerApplicationAttempt appAttempt,\n      SchedulingRequest schedulingRequest, SchedulerNode schedulerNode) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n        null;\n    Resource resource \u003d schedulingRequest.getResourceSizing().getResources();\n    if (Resources.greaterThan(calculator, getClusterResource(),\n        resource, Resources.none())) {\n      ContainerId cId \u003d\n          ContainerId.newContainerId(appAttempt.getApplicationAttemptId(),\n              appAttempt.getAppSchedulingInfo().getNewContainerId());\n      Container container \u003d BuilderUtils.newContainer(\n          cId, schedulerNode.getNodeID(), schedulerNode.getHttpAddress(),\n          resource, schedulingRequest.getPriority(), null,\n          ExecutionType.GUARANTEED,\n          schedulingRequest.getAllocationRequestId());\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          SchedulerRequestKey.extractFrom(container),\n          appAttempt.getApplicationAttemptId(), container.getNodeId(),\n          appAttempt.getUser(), rmContext, false);\n\n      allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n          getSchedulerContainer(rmContainer, true),\n          null, null, NodeType.NODE_LOCAL, NodeType.NODE_LOCAL,\n          SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n          resource);\n    }\n\n    if (null !\u003d allocated) {\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          allocationsList \u003d new ArrayList\u003c\u003e();\n      allocationsList.add(allocated);\n\n      return new ResourceCommitRequest\u003c\u003e(allocationsList, null, null);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}