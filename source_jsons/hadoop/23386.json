{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OracleDBRecordReader.java",
  "functionName": "setSessionTimeZone",
  "functionId": "setSessionTimeZone___conf-Configuration__conn-Connection",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java",
  "functionStartLine": 107,
  "functionEndLine": 144,
  "numCommitsSeen": 5,
  "timeTaken": 4334,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void setSessionTimeZone(Configuration conf,\n      Connection conn) throws SQLException {\n    // need to use reflection to call the method setSessionTimeZone on\n    // the OracleConnection class because oracle specific java libraries are\n    // not accessible in this context.\n    Method method;\n    try {\n      method \u003d conn.getClass().getMethod(\n              \"setSessionTimeZone\", new Class [] {String.class});\n    } catch (Exception ex) {\n      LOG.error(\"Could not find method setSessionTimeZone in \" + conn.getClass().getName(), ex);\n      // rethrow SQLException\n      throw new SQLException(ex);\n    }\n\n    // Need to set the time zone in order for Java\n    // to correctly access the column \"TIMESTAMP WITH LOCAL TIME ZONE\".\n    // We can\u0027t easily get the correct Oracle-specific timezone string\n    // from Java; just let the user set the timezone in a property.\n    String clientTimeZone \u003d conf.get(SESSION_TIMEZONE_KEY, \"GMT\");\n    try {\n      method.setAccessible(true);\n      method.invoke(conn, clientTimeZone);\n      LOG.info(\"Time zone has been set to \" + clientTimeZone);\n    } catch (Exception ex) {\n      LOG.warn(\"Time zone \" + clientTimeZone +\n               \" could not be set on Oracle database.\");\n      LOG.warn(\"Setting default time zone: GMT\");\n      try {\n        // \"GMT\" timezone is guaranteed to exist.\n        method.invoke(conn, \"GMT\");\n      } catch (Exception ex2) {\n        LOG.error(\"Could not set time zone for oracle connection\", ex2);\n        // rethrow SQLException\n        throw new SQLException(ex);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void setSessionTimeZone(Configuration conf,\n      Connection conn) throws SQLException {\n    // need to use reflection to call the method setSessionTimeZone on\n    // the OracleConnection class because oracle specific java libraries are\n    // not accessible in this context.\n    Method method;\n    try {\n      method \u003d conn.getClass().getMethod(\n              \"setSessionTimeZone\", new Class [] {String.class});\n    } catch (Exception ex) {\n      LOG.error(\"Could not find method setSessionTimeZone in \" + conn.getClass().getName(), ex);\n      // rethrow SQLException\n      throw new SQLException(ex);\n    }\n\n    // Need to set the time zone in order for Java\n    // to correctly access the column \"TIMESTAMP WITH LOCAL TIME ZONE\".\n    // We can\u0027t easily get the correct Oracle-specific timezone string\n    // from Java; just let the user set the timezone in a property.\n    String clientTimeZone \u003d conf.get(SESSION_TIMEZONE_KEY, \"GMT\");\n    try {\n      method.setAccessible(true);\n      method.invoke(conn, clientTimeZone);\n      LOG.info(\"Time zone has been set to \" + clientTimeZone);\n    } catch (Exception ex) {\n      LOG.warn(\"Time zone \" + clientTimeZone +\n               \" could not be set on Oracle database.\");\n      LOG.warn(\"Setting default time zone: GMT\");\n      try {\n        // \"GMT\" timezone is guaranteed to exist.\n        method.invoke(conn, \"GMT\");\n      } catch (Exception ex2) {\n        LOG.error(\"Could not set time zone for oracle connection\", ex2);\n        // rethrow SQLException\n        throw new SQLException(ex);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public static void setSessionTimeZone(Configuration conf,\n+      Connection conn) throws SQLException {\n+    // need to use reflection to call the method setSessionTimeZone on\n+    // the OracleConnection class because oracle specific java libraries are\n+    // not accessible in this context.\n+    Method method;\n+    try {\n+      method \u003d conn.getClass().getMethod(\n+              \"setSessionTimeZone\", new Class [] {String.class});\n+    } catch (Exception ex) {\n+      LOG.error(\"Could not find method setSessionTimeZone in \" + conn.getClass().getName(), ex);\n+      // rethrow SQLException\n+      throw new SQLException(ex);\n+    }\n+\n+    // Need to set the time zone in order for Java\n+    // to correctly access the column \"TIMESTAMP WITH LOCAL TIME ZONE\".\n+    // We can\u0027t easily get the correct Oracle-specific timezone string\n+    // from Java; just let the user set the timezone in a property.\n+    String clientTimeZone \u003d conf.get(SESSION_TIMEZONE_KEY, \"GMT\");\n+    try {\n+      method.setAccessible(true);\n+      method.invoke(conn, clientTimeZone);\n+      LOG.info(\"Time zone has been set to \" + clientTimeZone);\n+    } catch (Exception ex) {\n+      LOG.warn(\"Time zone \" + clientTimeZone +\n+               \" could not be set on Oracle database.\");\n+      LOG.warn(\"Setting default time zone: GMT\");\n+      try {\n+        // \"GMT\" timezone is guaranteed to exist.\n+        method.invoke(conn, \"GMT\");\n+      } catch (Exception ex2) {\n+        LOG.error(\"Could not set time zone for oracle connection\", ex2);\n+        // rethrow SQLException\n+        throw new SQLException(ex);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setSessionTimeZone(Configuration conf,\n      Connection conn) throws SQLException {\n    // need to use reflection to call the method setSessionTimeZone on\n    // the OracleConnection class because oracle specific java libraries are\n    // not accessible in this context.\n    Method method;\n    try {\n      method \u003d conn.getClass().getMethod(\n              \"setSessionTimeZone\", new Class [] {String.class});\n    } catch (Exception ex) {\n      LOG.error(\"Could not find method setSessionTimeZone in \" + conn.getClass().getName(), ex);\n      // rethrow SQLException\n      throw new SQLException(ex);\n    }\n\n    // Need to set the time zone in order for Java\n    // to correctly access the column \"TIMESTAMP WITH LOCAL TIME ZONE\".\n    // We can\u0027t easily get the correct Oracle-specific timezone string\n    // from Java; just let the user set the timezone in a property.\n    String clientTimeZone \u003d conf.get(SESSION_TIMEZONE_KEY, \"GMT\");\n    try {\n      method.setAccessible(true);\n      method.invoke(conn, clientTimeZone);\n      LOG.info(\"Time zone has been set to \" + clientTimeZone);\n    } catch (Exception ex) {\n      LOG.warn(\"Time zone \" + clientTimeZone +\n               \" could not be set on Oracle database.\");\n      LOG.warn(\"Setting default time zone: GMT\");\n      try {\n        // \"GMT\" timezone is guaranteed to exist.\n        method.invoke(conn, \"GMT\");\n      } catch (Exception ex2) {\n        LOG.error(\"Could not set time zone for oracle connection\", ex2);\n        // rethrow SQLException\n        throw new SQLException(ex);\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/OracleDBRecordReader.java"
    }
  }
}