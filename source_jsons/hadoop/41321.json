{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "hasContainerForNode",
  "functionId": "hasContainerForNode___key-SchedulerRequestKey__node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 1070,
  "functionEndLine": 1106,
  "numCommitsSeen": 106,
  "timeTaken": 5308,
  "changeHistory": [
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
    "f48fec83d0f2d1a781a141ad7216463c5526321f",
    "4db9cc70d0178703fb28f451eb84d97f2bf63af8",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": "Ybodychange",
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Ybodychange",
    "4db9cc70d0178703fb28f451eb84d97f2bf63af8": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "59ee8b7a88603e94b5661a8d5d088f7aa99fe049": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": "Ymultichange(Ymodifierchange,Ybodychange)",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "20/07/18 10:46 AM",
      "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "21/05/18 8:10 AM",
      "commitNameOld": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 60.11,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   private boolean hasContainerForNode(SchedulerRequestKey key,\n       FSSchedulerNode node) {\n     PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n     Resource resource \u003d offswitchAsk.getPerAllocationResource();\n     boolean hasRequestForOffswitch \u003d\n         offswitchAsk.getCount() \u003e 0;\n     boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n         node.getRackName()) \u003e 0;\n     boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n         node.getNodeName()) \u003e 0;\n \n     boolean ret \u003d true;\n     if (!(// There must be outstanding requests at the given priority:\n         hasRequestForOffswitch \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                 (hasRequestForRack)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level,\n             // there must be a non-zero request at the node:\n             (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                 node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n-            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n-                resource,\n+            Resources.fitsIn(resource,\n                 node.getRMNode().getTotalCapability()))) {\n       ret \u003d false;\n     } else if (!getQueue().fitsInMaxShare(resource)) {\n       // The requested container must fit in queue maximum share\n       updateAMDiagnosticMsg(resource,\n           \" exceeds current queue or its parents maximum resource allowed). \" +\n                   \"Max share of queue: \" + getQueue().getMaxShare());\n \n       ret \u003d false;\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n    Resource resource \u003d offswitchAsk.getPerAllocationResource();\n    boolean hasRequestForOffswitch \u003d\n        offswitchAsk.getCount() \u003e 0;\n    boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n        node.getRackName()) \u003e 0;\n    boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n        node.getNodeName()) \u003e 0;\n\n    boolean ret \u003d true;\n    if (!(// There must be outstanding requests at the given priority:\n        hasRequestForOffswitch \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                (hasRequestForRack)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level,\n            // there must be a non-zero request at the node:\n            (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.fitsIn(resource,\n                node.getRMNode().getTotalCapability()))) {\n      ret \u003d false;\n    } else if (!getQueue().fitsInMaxShare(resource)) {\n      // The requested container must fit in queue maximum share\n      updateAMDiagnosticMsg(resource,\n          \" exceeds current queue or its parents maximum resource allowed). \" +\n                  \"Max share of queue: \" + getQueue().getMaxShare());\n\n      ret \u003d false;\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "16/01/18 2:46 PM",
      "commitNameOld": "370f1c6283813dc1c7d001f44930e3c79c140c54",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 124.68,
      "commitsBetweenForRepo": 1482,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   private boolean hasContainerForNode(SchedulerRequestKey key,\n       FSSchedulerNode node) {\n     PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n     Resource resource \u003d offswitchAsk.getPerAllocationResource();\n     boolean hasRequestForOffswitch \u003d\n         offswitchAsk.getCount() \u003e 0;\n     boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n         node.getRackName()) \u003e 0;\n     boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n         node.getNodeName()) \u003e 0;\n \n     boolean ret \u003d true;\n     if (!(// There must be outstanding requests at the given priority:\n         hasRequestForOffswitch \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                 (hasRequestForRack)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level,\n             // there must be a non-zero request at the node:\n             (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                 node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n             Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                 resource,\n                 node.getRMNode().getTotalCapability()))) {\n       ret \u003d false;\n     } else if (!getQueue().fitsInMaxShare(resource)) {\n       // The requested container must fit in queue maximum share\n       updateAMDiagnosticMsg(resource,\n-          \" exceeds current queue or its parents maximum resource allowed).\");\n+          \" exceeds current queue or its parents maximum resource allowed). \" +\n+                  \"Max share of queue: \" + getQueue().getMaxShare());\n \n       ret \u003d false;\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n    Resource resource \u003d offswitchAsk.getPerAllocationResource();\n    boolean hasRequestForOffswitch \u003d\n        offswitchAsk.getCount() \u003e 0;\n    boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n        node.getRackName()) \u003e 0;\n    boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n        node.getNodeName()) \u003e 0;\n\n    boolean ret \u003d true;\n    if (!(// There must be outstanding requests at the given priority:\n        hasRequestForOffswitch \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                (hasRequestForRack)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level,\n            // there must be a non-zero request at the node:\n            (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                resource,\n                node.getRMNode().getTotalCapability()))) {\n      ret \u003d false;\n    } else if (!getQueue().fitsInMaxShare(resource)) {\n      // The requested container must fit in queue maximum share\n      updateAMDiagnosticMsg(resource,\n          \" exceeds current queue or its parents maximum resource allowed). \" +\n                  \"Max share of queue: \" + getQueue().getMaxShare());\n\n      ret \u003d false;\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "4db9cc70d0178703fb28f451eb84d97f2bf63af8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6042. Dump scheduler and queue state information into FairScheduler DEBUG log. (Yufei Gu via rchiang)\n",
      "commitDate": "10/03/17 4:13 PM",
      "commitName": "4db9cc70d0178703fb28f451eb84d97f2bf63af8",
      "commitAuthor": "Ray Chiang",
      "commitDateOld": "09/03/17 5:51 PM",
      "commitNameOld": "846a0cd678fba743220f28cef844ac9011a3f934",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,37 @@\n   private boolean hasContainerForNode(SchedulerRequestKey key,\n       FSSchedulerNode node) {\n     PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n     Resource resource \u003d offswitchAsk.getPerAllocationResource();\n     boolean hasRequestForOffswitch \u003d\n         offswitchAsk.getCount() \u003e 0;\n     boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n         node.getRackName()) \u003e 0;\n     boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n         node.getNodeName()) \u003e 0;\n \n     boolean ret \u003d true;\n     if (!(// There must be outstanding requests at the given priority:\n         hasRequestForOffswitch \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                 (hasRequestForRack)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level,\n             // there must be a non-zero request at the node:\n             (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                 node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n             Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                 resource,\n                 node.getRMNode().getTotalCapability()))) {\n       ret \u003d false;\n     } else if (!getQueue().fitsInMaxShare(resource)) {\n       // The requested container must fit in queue maximum share\n-      if (isWaitingForAMContainer()) {\n-        updateAMDiagnosticMsg(resource,\n-            \" exceeds current queue or its parents maximum resource allowed).\");\n-      }\n+      updateAMDiagnosticMsg(resource,\n+          \" exceeds current queue or its parents maximum resource allowed).\");\n+\n       ret \u003d false;\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n    Resource resource \u003d offswitchAsk.getPerAllocationResource();\n    boolean hasRequestForOffswitch \u003d\n        offswitchAsk.getCount() \u003e 0;\n    boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n        node.getRackName()) \u003e 0;\n    boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n        node.getNodeName()) \u003e 0;\n\n    boolean ret \u003d true;\n    if (!(// There must be outstanding requests at the given priority:\n        hasRequestForOffswitch \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                (hasRequestForRack)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level,\n            // there must be a non-zero request at the node:\n            (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                resource,\n                node.getRMNode().getTotalCapability()))) {\n      ret \u003d false;\n    } else if (!getQueue().fitsInMaxShare(resource)) {\n      // The requested container must fit in queue maximum share\n      updateAMDiagnosticMsg(resource,\n          \" exceeds current queue or its parents maximum resource allowed).\");\n\n      ret \u003d false;\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,38 @@\n   private boolean hasContainerForNode(SchedulerRequestKey key,\n       FSSchedulerNode node) {\n-    ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n-    ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n-    ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n+    PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n+    Resource resource \u003d offswitchAsk.getPerAllocationResource();\n+    boolean hasRequestForOffswitch \u003d\n+        offswitchAsk.getCount() \u003e 0;\n+    boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n+        node.getRackName()) \u003e 0;\n+    boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n+        node.getNodeName()) \u003e 0;\n \n     boolean ret \u003d true;\n     if (!(// There must be outstanding requests at the given priority:\n-        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n-        // If locality relaxation is turned off at *-level, there must be a\n-        // non-zero request for the node\u0027s rack:\n-        (anyRequest.getRelaxLocality() ||\n-        (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n-        // If locality relaxation is turned off at rack-level, there must be a\n-        // non-zero request at the node:\n-        (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n-        (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n-        // The requested container must be able to fit on the node:\n-        Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n-        anyRequest.getCapability(), node.getRMNode().getTotalCapability()))) {\n+        hasRequestForOffswitch \u0026\u0026\n+            // If locality relaxation is turned off at *-level, there must be a\n+            // non-zero request for the node\u0027s rack:\n+            (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n+                (hasRequestForRack)) \u0026\u0026\n+            // If locality relaxation is turned off at rack-level,\n+            // there must be a non-zero request at the node:\n+            (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n+                node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n+            // The requested container must be able to fit on the node:\n+            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n+                resource,\n+                node.getRMNode().getTotalCapability()))) {\n       ret \u003d false;\n-    } else if (!getQueue().fitsInMaxShare(anyRequest.getCapability())) {\n+    } else if (!getQueue().fitsInMaxShare(resource)) {\n       // The requested container must fit in queue maximum share\n       if (isWaitingForAMContainer()) {\n-        updateAMDiagnosticMsg(anyRequest.getCapability(),\n+        updateAMDiagnosticMsg(resource,\n             \" exceeds current queue or its parents maximum resource allowed).\");\n       }\n       ret \u003d false;\n     }\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    PendingAsk offswitchAsk \u003d getPendingAsk(key, ResourceRequest.ANY);\n    Resource resource \u003d offswitchAsk.getPerAllocationResource();\n    boolean hasRequestForOffswitch \u003d\n        offswitchAsk.getCount() \u003e 0;\n    boolean hasRequestForRack \u003d getOutstandingAsksCount(key,\n        node.getRackName()) \u003e 0;\n    boolean hasRequestForNode \u003d getOutstandingAsksCount(key,\n        node.getNodeName()) \u003e 0;\n\n    boolean ret \u003d true;\n    if (!(// There must be outstanding requests at the given priority:\n        hasRequestForOffswitch \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (appSchedulingInfo.canDelayTo(key, ResourceRequest.ANY) ||\n                (hasRequestForRack)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level,\n            // there must be a non-zero request at the node:\n            (!hasRequestForRack || appSchedulingInfo.canDelayTo(key,\n                node.getRackName()) || (hasRequestForNode)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                resource,\n                node.getRMNode().getTotalCapability()))) {\n      ret \u003d false;\n    } else if (!getQueue().fitsInMaxShare(resource)) {\n      // The requested container must fit in queue maximum share\n      if (isWaitingForAMContainer()) {\n        updateAMDiagnosticMsg(resource,\n            \" exceeds current queue or its parents maximum resource allowed).\");\n      }\n      ret \u003d false;\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "59ee8b7a88603e94b5661a8d5d088f7aa99fe049": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4329. [YARN-5437] Allow fetching exact reason as to why a submitted app\nis in ACCEPTED state in Fair Scheduler (Contributed by Yufei Gu)\n",
      "commitDate": "09/11/16 1:11 PM",
      "commitName": "59ee8b7a88603e94b5661a8d5d088f7aa99fe049",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "31/10/16 1:34 PM",
      "commitNameOld": "2528bea67ff80fae597f10e26c5f70d601af9fb1",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 9.03,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,32 @@\n   private boolean hasContainerForNode(SchedulerRequestKey key,\n       FSSchedulerNode node) {\n     ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n     ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n     ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n \n-    return\n-        // There must be outstanding requests at the given priority:\n+    boolean ret \u003d true;\n+    if (!(// There must be outstanding requests at the given priority:\n         anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n-            // If locality relaxation is turned off at *-level, there must be a\n-            // non-zero request for the node\u0027s rack:\n-            (anyRequest.getRelaxLocality() ||\n-                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n-            // If locality relaxation is turned off at rack-level, there must be a\n-            // non-zero request at the node:\n-            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n-                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n-            // The requested container must be able to fit on the node:\n-            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n-                anyRequest.getCapability(),\n-                node.getRMNode().getTotalCapability()) \u0026\u0026\n-            // The requested container must fit in queue maximum share:\n-            getQueue().fitsInMaxShare(anyRequest.getCapability());\n+        // If locality relaxation is turned off at *-level, there must be a\n+        // non-zero request for the node\u0027s rack:\n+        (anyRequest.getRelaxLocality() ||\n+        (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n+        // If locality relaxation is turned off at rack-level, there must be a\n+        // non-zero request at the node:\n+        (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n+        (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n+        // The requested container must be able to fit on the node:\n+        Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n+        anyRequest.getCapability(), node.getRMNode().getTotalCapability()))) {\n+      ret \u003d false;\n+    } else if (!getQueue().fitsInMaxShare(anyRequest.getCapability())) {\n+      // The requested container must fit in queue maximum share\n+      if (isWaitingForAMContainer()) {\n+        updateAMDiagnosticMsg(anyRequest.getCapability(),\n+            \" exceeds current queue or its parents maximum resource allowed).\");\n+      }\n+      ret \u003d false;\n+    }\n+\n+    return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n    ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n    ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n\n    boolean ret \u003d true;\n    if (!(// There must be outstanding requests at the given priority:\n        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n        // If locality relaxation is turned off at *-level, there must be a\n        // non-zero request for the node\u0027s rack:\n        (anyRequest.getRelaxLocality() ||\n        (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n        // If locality relaxation is turned off at rack-level, there must be a\n        // non-zero request at the node:\n        (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n        (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n        // The requested container must be able to fit on the node:\n        Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n        anyRequest.getCapability(), node.getRMNode().getTotalCapability()))) {\n      ret \u003d false;\n    } else if (!getQueue().fitsInMaxShare(anyRequest.getCapability())) {\n      // The requested container must fit in queue maximum share\n      if (isWaitingForAMContainer()) {\n        updateAMDiagnosticMsg(anyRequest.getCapability(),\n            \" exceeds current queue or its parents maximum resource allowed).\");\n      }\n      ret \u003d false;\n    }\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  private boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n-    ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n-    ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n-    ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n+  private boolean hasContainerForNode(SchedulerRequestKey key,\n+      FSSchedulerNode node) {\n+    ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n+    ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n+    ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n \n     return\n         // There must be outstanding requests at the given priority:\n         anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (anyRequest.getRelaxLocality() ||\n                 (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level, there must be a\n             // non-zero request at the node:\n             (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                 (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n             Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                 anyRequest.getCapability(),\n                 node.getRMNode().getTotalCapability()) \u0026\u0026\n             // The requested container must fit in queue maximum share:\n             getQueue().fitsInMaxShare(anyRequest.getCapability());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n    ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n    ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n\n    return\n        // There must be outstanding requests at the given priority:\n        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (anyRequest.getRelaxLocality() ||\n                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level, there must be a\n            // non-zero request at the node:\n            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                anyRequest.getCapability(),\n                node.getRMNode().getTotalCapability()) \u0026\u0026\n            // The requested container must fit in queue maximum share:\n            getQueue().fitsInMaxShare(anyRequest.getCapability());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[prio-Priority, node-FSSchedulerNode]",
            "newValue": "[key-SchedulerRequestKey, node-FSSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n-  private boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n-    ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n-    ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n-    ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n+  private boolean hasContainerForNode(SchedulerRequestKey key,\n+      FSSchedulerNode node) {\n+    ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n+    ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n+    ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n \n     return\n         // There must be outstanding requests at the given priority:\n         anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (anyRequest.getRelaxLocality() ||\n                 (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level, there must be a\n             // non-zero request at the node:\n             (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                 (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n             Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                 anyRequest.getCapability(),\n                 node.getRMNode().getTotalCapability()) \u0026\u0026\n             // The requested container must fit in queue maximum share:\n             getQueue().fitsInMaxShare(anyRequest.getCapability());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasContainerForNode(SchedulerRequestKey key,\n      FSSchedulerNode node) {\n    ResourceRequest anyRequest \u003d getResourceRequest(key, ResourceRequest.ANY);\n    ResourceRequest rackRequest \u003d getResourceRequest(key, node.getRackName());\n    ResourceRequest nodeRequest \u003d getResourceRequest(key, node.getNodeName());\n\n    return\n        // There must be outstanding requests at the given priority:\n        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (anyRequest.getRelaxLocality() ||\n                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level, there must be a\n            // non-zero request at the node:\n            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                anyRequest.getCapability(),\n                node.getRMNode().getTotalCapability()) \u0026\u0026\n            // The requested container must fit in queue maximum share:\n            getQueue().fitsInMaxShare(anyRequest.getCapability());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
      "commitDate": "07/06/15 11:37 AM",
      "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
          "commitDate": "07/06/15 11:37 AM",
          "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "28/04/15 9:00 PM",
          "commitNameOld": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 39.61,
          "commitsBetweenForRepo": 397,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,23 @@\n-  public boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n+  private boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n     ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n     ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n     ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n \n     return\n         // There must be outstanding requests at the given priority:\n         anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (anyRequest.getRelaxLocality() ||\n                 (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level, there must be a\n             // non-zero request at the node:\n             (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                 (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n             Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n-                anyRequest.getCapability(), node.getRMNode().getTotalCapability());\n+                anyRequest.getCapability(),\n+                node.getRMNode().getTotalCapability()) \u0026\u0026\n+            // The requested container must fit in queue maximum share:\n+            getQueue().fitsInMaxShare(anyRequest.getCapability());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n    ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n    ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n    ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n\n    return\n        // There must be outstanding requests at the given priority:\n        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (anyRequest.getRelaxLocality() ||\n                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level, there must be a\n            // non-zero request at the node:\n            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                anyRequest.getCapability(),\n                node.getRMNode().getTotalCapability()) \u0026\u0026\n            // The requested container must fit in queue maximum share:\n            getQueue().fitsInMaxShare(anyRequest.getCapability());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
          "commitDate": "07/06/15 11:37 AM",
          "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "28/04/15 9:00 PM",
          "commitNameOld": "8f82970e0c247b37b2bf33aa21f6a39afa07efde",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 39.61,
          "commitsBetweenForRepo": 397,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,23 @@\n-  public boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n+  private boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n     ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n     ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n     ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n \n     return\n         // There must be outstanding requests at the given priority:\n         anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n             // If locality relaxation is turned off at *-level, there must be a\n             // non-zero request for the node\u0027s rack:\n             (anyRequest.getRelaxLocality() ||\n                 (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // If locality relaxation is turned off at rack-level, there must be a\n             // non-zero request at the node:\n             (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                 (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n             // The requested container must be able to fit on the node:\n             Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n-                anyRequest.getCapability(), node.getRMNode().getTotalCapability());\n+                anyRequest.getCapability(),\n+                node.getRMNode().getTotalCapability()) \u0026\u0026\n+            // The requested container must fit in queue maximum share:\n+            getQueue().fitsInMaxShare(anyRequest.getCapability());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n    ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n    ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n    ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n\n    return\n        // There must be outstanding requests at the given priority:\n        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (anyRequest.getRelaxLocality() ||\n                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level, there must be a\n            // non-zero request at the node:\n            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                anyRequest.getCapability(),\n                node.getRMNode().getTotalCapability()) \u0026\u0026\n            // The requested container must fit in queue maximum share:\n            getQueue().fitsInMaxShare(anyRequest.getCapability());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,20 @@\n+  public boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n+    ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n+    ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n+    ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n+\n+    return\n+        // There must be outstanding requests at the given priority:\n+        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n+            // If locality relaxation is turned off at *-level, there must be a\n+            // non-zero request for the node\u0027s rack:\n+            (anyRequest.getRelaxLocality() ||\n+                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n+            // If locality relaxation is turned off at rack-level, there must be a\n+            // non-zero request at the node:\n+            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n+                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n+            // The requested container must be able to fit on the node:\n+            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n+                anyRequest.getCapability(), node.getRMNode().getTotalCapability());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean hasContainerForNode(Priority prio, FSSchedulerNode node) {\n    ResourceRequest anyRequest \u003d getResourceRequest(prio, ResourceRequest.ANY);\n    ResourceRequest rackRequest \u003d getResourceRequest(prio, node.getRackName());\n    ResourceRequest nodeRequest \u003d getResourceRequest(prio, node.getNodeName());\n\n    return\n        // There must be outstanding requests at the given priority:\n        anyRequest !\u003d null \u0026\u0026 anyRequest.getNumContainers() \u003e 0 \u0026\u0026\n            // If locality relaxation is turned off at *-level, there must be a\n            // non-zero request for the node\u0027s rack:\n            (anyRequest.getRelaxLocality() ||\n                (rackRequest !\u003d null \u0026\u0026 rackRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // If locality relaxation is turned off at rack-level, there must be a\n            // non-zero request at the node:\n            (rackRequest \u003d\u003d null || rackRequest.getRelaxLocality() ||\n                (nodeRequest !\u003d null \u0026\u0026 nodeRequest.getNumContainers() \u003e 0)) \u0026\u0026\n            // The requested container must be able to fit on the node:\n            Resources.lessThanOrEqual(RESOURCE_CALCULATOR, null,\n                anyRequest.getCapability(), node.getRMNode().getTotalCapability());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}