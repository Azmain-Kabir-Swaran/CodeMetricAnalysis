{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Chain.java",
  "functionName": "setReducerConf",
  "functionId": "setReducerConf___jobConf-Configuration__inputKeyClass-Class__?____inputValueClass-Class__?____outputKeyClass-Class__?____outputValueClass-Class__?____reducerConf-Configuration__prefix-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
  "functionStartLine": 778,
  "functionEndLine": 809,
  "numCommitsSeen": 6,
  "timeTaken": 4432,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected static void setReducerConf(Configuration jobConf,\n      Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass,\n      Configuration reducerConf, String prefix) {\n    // if the Reducer does not have a Configuration, create an empty one\n    if (reducerConf \u003d\u003d null) {\n      // using a Configuration without defaults to make it lightweight.\n      // still the chain\u0027s conf may have all defaults and this conf is\n      // overlapped to the chain\u0027s Configuration one.\n      reducerConf \u003d new Configuration(false);\n    }\n\n    // store the input/output classes of the reducer in\n    // the reducer configuration\n    reducerConf.setClass(REDUCER_INPUT_KEY_CLASS, inputKeyClass, Object.class);\n    reducerConf.setClass(REDUCER_INPUT_VALUE_CLASS, inputValueClass,\n        Object.class);\n    reducerConf\n        .setClass(REDUCER_OUTPUT_KEY_CLASS, outputKeyClass, Object.class);\n    reducerConf.setClass(REDUCER_OUTPUT_VALUE_CLASS, outputValueClass,\n        Object.class);\n\n    // serialize the reducer configuration in the chain\u0027s configuration.\n    Stringifier\u003cConfiguration\u003e stringifier \u003d \n      new DefaultStringifier\u003cConfiguration\u003e(jobConf, Configuration.class);\n    try {\n      jobConf.set(prefix + CHAIN_REDUCER_CONFIG, stringifier\n          .toString(new Configuration(reducerConf)));\n    } catch (IOException ioEx) {\n      throw new RuntimeException(ioEx);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected static void setReducerConf(Configuration jobConf,\n      Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass,\n      Configuration reducerConf, String prefix) {\n    // if the Reducer does not have a Configuration, create an empty one\n    if (reducerConf \u003d\u003d null) {\n      // using a Configuration without defaults to make it lightweight.\n      // still the chain\u0027s conf may have all defaults and this conf is\n      // overlapped to the chain\u0027s Configuration one.\n      reducerConf \u003d new Configuration(false);\n    }\n\n    // store the input/output classes of the reducer in\n    // the reducer configuration\n    reducerConf.setClass(REDUCER_INPUT_KEY_CLASS, inputKeyClass, Object.class);\n    reducerConf.setClass(REDUCER_INPUT_VALUE_CLASS, inputValueClass,\n        Object.class);\n    reducerConf\n        .setClass(REDUCER_OUTPUT_KEY_CLASS, outputKeyClass, Object.class);\n    reducerConf.setClass(REDUCER_OUTPUT_VALUE_CLASS, outputValueClass,\n        Object.class);\n\n    // serialize the reducer configuration in the chain\u0027s configuration.\n    Stringifier\u003cConfiguration\u003e stringifier \u003d \n      new DefaultStringifier\u003cConfiguration\u003e(jobConf, Configuration.class);\n    try {\n      jobConf.set(prefix + CHAIN_REDUCER_CONFIG, stringifier\n          .toString(new Configuration(reducerConf)));\n    } catch (IOException ioEx) {\n      throw new RuntimeException(ioEx);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  protected static void setReducerConf(Configuration jobConf,\n+      Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n+      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass,\n+      Configuration reducerConf, String prefix) {\n+    // if the Reducer does not have a Configuration, create an empty one\n+    if (reducerConf \u003d\u003d null) {\n+      // using a Configuration without defaults to make it lightweight.\n+      // still the chain\u0027s conf may have all defaults and this conf is\n+      // overlapped to the chain\u0027s Configuration one.\n+      reducerConf \u003d new Configuration(false);\n+    }\n+\n+    // store the input/output classes of the reducer in\n+    // the reducer configuration\n+    reducerConf.setClass(REDUCER_INPUT_KEY_CLASS, inputKeyClass, Object.class);\n+    reducerConf.setClass(REDUCER_INPUT_VALUE_CLASS, inputValueClass,\n+        Object.class);\n+    reducerConf\n+        .setClass(REDUCER_OUTPUT_KEY_CLASS, outputKeyClass, Object.class);\n+    reducerConf.setClass(REDUCER_OUTPUT_VALUE_CLASS, outputValueClass,\n+        Object.class);\n+\n+    // serialize the reducer configuration in the chain\u0027s configuration.\n+    Stringifier\u003cConfiguration\u003e stringifier \u003d \n+      new DefaultStringifier\u003cConfiguration\u003e(jobConf, Configuration.class);\n+    try {\n+      jobConf.set(prefix + CHAIN_REDUCER_CONFIG, stringifier\n+          .toString(new Configuration(reducerConf)));\n+    } catch (IOException ioEx) {\n+      throw new RuntimeException(ioEx);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void setReducerConf(Configuration jobConf,\n      Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass,\n      Configuration reducerConf, String prefix) {\n    // if the Reducer does not have a Configuration, create an empty one\n    if (reducerConf \u003d\u003d null) {\n      // using a Configuration without defaults to make it lightweight.\n      // still the chain\u0027s conf may have all defaults and this conf is\n      // overlapped to the chain\u0027s Configuration one.\n      reducerConf \u003d new Configuration(false);\n    }\n\n    // store the input/output classes of the reducer in\n    // the reducer configuration\n    reducerConf.setClass(REDUCER_INPUT_KEY_CLASS, inputKeyClass, Object.class);\n    reducerConf.setClass(REDUCER_INPUT_VALUE_CLASS, inputValueClass,\n        Object.class);\n    reducerConf\n        .setClass(REDUCER_OUTPUT_KEY_CLASS, outputKeyClass, Object.class);\n    reducerConf.setClass(REDUCER_OUTPUT_VALUE_CLASS, outputValueClass,\n        Object.class);\n\n    // serialize the reducer configuration in the chain\u0027s configuration.\n    Stringifier\u003cConfiguration\u003e stringifier \u003d \n      new DefaultStringifier\u003cConfiguration\u003e(jobConf, Configuration.class);\n    try {\n      jobConf.set(prefix + CHAIN_REDUCER_CONFIG, stringifier\n          .toString(new Configuration(reducerConf)));\n    } catch (IOException ioEx) {\n      throw new RuntimeException(ioEx);\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java"
    }
  }
}