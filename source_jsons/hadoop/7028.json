{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Checkpointer.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
  "functionStartLine": 129,
  "functionEndLine": 170,
  "numCommitsSeen": 37,
  "timeTaken": 5534,
  "changeHistory": [
    "9aa3dc872ca9a528cb98ef56d9a33ab9d4531aa1",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "9aa3dc872ca9a528cb98ef56d9a33ab9d4531aa1": "Ybodychange",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ybodychange",
    "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9aa3dc872ca9a528cb98ef56d9a33ab9d4531aa1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14158. Checkpointer ignores configured time period \u003e 5 minutes\n\nThis closes #449\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "03/02/19 8:51 PM",
      "commitName": "9aa3dc872ca9a528cb98ef56d9a33ab9d4531aa1",
      "commitAuthor": "tiwalter",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 150.29,
      "commitsBetweenForRepo": 1198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public void run() {\n-    // Check the size of the edit log once every 5 minutes.\n-    long periodMSec \u003d 5 * 60;   // 5 minutes\n-    if(checkpointConf.getPeriod() \u003c periodMSec) {\n-      periodMSec \u003d checkpointConf.getPeriod();\n-    }\n-    periodMSec *\u003d 1000;\n+    // How often to check the size of the edit log (min of checkpointCheckPeriod and checkpointPeriod)\n+    long periodMSec \u003d checkpointConf.getCheckPeriod() * 1000;\n+    // How often to checkpoint regardless of number of txns\n+    long checkpointPeriodMSec \u003d checkpointConf.getPeriod() * 1000;\n \n     long lastCheckpointTime \u003d 0;\n+    long lastEditLogCheckTime \u003d0;\n     if (!backupNode.shouldCheckpointAtStartup()) {\n       lastCheckpointTime \u003d monotonicNow();\n     }\n     while(shouldRun) {\n       try {\n         long now \u003d monotonicNow();\n         boolean shouldCheckpoint \u003d false;\n-        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n+        if(now \u003e\u003d lastCheckpointTime + checkpointPeriodMSec) {\n           shouldCheckpoint \u003d true;\n-        } else {\n+        } else if(now \u003e\u003d lastEditLogCheckTime + periodMSec) {\n           long txns \u003d countUncheckpointedTxns();\n+          lastEditLogCheckTime \u003d now;\n           if(txns \u003e\u003d checkpointConf.getTxnCount())\n             shouldCheckpoint \u003d true;\n         }\n         if(shouldCheckpoint) {\n           doCheckpoint();\n           lastCheckpointTime \u003d now;\n+          lastEditLogCheckTime \u003d now;\n         }\n       } catch(IOException e) {\n         LOG.error(\"Exception in doCheckpoint: \", e);\n       } catch(Throwable e) {\n         LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n         shutdown();\n         break;\n       }\n       try {\n-        Thread.sleep(periodMSec);\n+        Thread.sleep(LongMath.gcd(periodMSec, checkpointPeriodMSec));\n       } catch(InterruptedException ie) {\n         // do nothing\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // How often to check the size of the edit log (min of checkpointCheckPeriod and checkpointPeriod)\n    long periodMSec \u003d checkpointConf.getCheckPeriod() * 1000;\n    // How often to checkpoint regardless of number of txns\n    long checkpointPeriodMSec \u003d checkpointConf.getPeriod() * 1000;\n\n    long lastCheckpointTime \u003d 0;\n    long lastEditLogCheckTime \u003d0;\n    if (!backupNode.shouldCheckpointAtStartup()) {\n      lastCheckpointTime \u003d monotonicNow();\n    }\n    while(shouldRun) {\n      try {\n        long now \u003d monotonicNow();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + checkpointPeriodMSec) {\n          shouldCheckpoint \u003d true;\n        } else if(now \u003e\u003d lastEditLogCheckTime + periodMSec) {\n          long txns \u003d countUncheckpointedTxns();\n          lastEditLogCheckTime \u003d now;\n          if(txns \u003e\u003d checkpointConf.getTxnCount())\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n          lastEditLogCheckTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(LongMath.gcd(periodMSec, checkpointPeriodMSec));\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
      "extendedDetails": {}
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "18/06/14 9:13 PM",
      "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 274.62,
      "commitsBetweenForRepo": 2359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void run() {\n     // Check the size of the edit log once every 5 minutes.\n     long periodMSec \u003d 5 * 60;   // 5 minutes\n     if(checkpointConf.getPeriod() \u003c periodMSec) {\n       periodMSec \u003d checkpointConf.getPeriod();\n     }\n     periodMSec *\u003d 1000;\n \n     long lastCheckpointTime \u003d 0;\n     if (!backupNode.shouldCheckpointAtStartup()) {\n-      lastCheckpointTime \u003d now();\n+      lastCheckpointTime \u003d monotonicNow();\n     }\n     while(shouldRun) {\n       try {\n-        long now \u003d now();\n+        long now \u003d monotonicNow();\n         boolean shouldCheckpoint \u003d false;\n         if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n           shouldCheckpoint \u003d true;\n         } else {\n           long txns \u003d countUncheckpointedTxns();\n           if(txns \u003e\u003d checkpointConf.getTxnCount())\n             shouldCheckpoint \u003d true;\n         }\n         if(shouldCheckpoint) {\n           doCheckpoint();\n           lastCheckpointTime \u003d now;\n         }\n       } catch(IOException e) {\n         LOG.error(\"Exception in doCheckpoint: \", e);\n       } catch(Throwable e) {\n         LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n         shutdown();\n         break;\n       }\n       try {\n         Thread.sleep(periodMSec);\n       } catch(InterruptedException ie) {\n         // do nothing\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Check the size of the edit log once every 5 minutes.\n    long periodMSec \u003d 5 * 60;   // 5 minutes\n    if(checkpointConf.getPeriod() \u003c periodMSec) {\n      periodMSec \u003d checkpointConf.getPeriod();\n    }\n    periodMSec *\u003d 1000;\n\n    long lastCheckpointTime \u003d 0;\n    if (!backupNode.shouldCheckpointAtStartup()) {\n      lastCheckpointTime \u003d monotonicNow();\n    }\n    while(shouldRun) {\n      try {\n        long now \u003d monotonicNow();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n          shouldCheckpoint \u003d true;\n        } else {\n          long txns \u003d countUncheckpointedTxns();\n          if(txns \u003e\u003d checkpointConf.getTxnCount())\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(periodMSec);\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
      "extendedDetails": {}
    },
    "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2291. Allow the StandbyNode to make checkpoints in an HA setup. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1227411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/12 4:22 PM",
      "commitName": "5b8dcb20a2fad2e7e9dee56c451f68f9d865b5ae",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/12/11 4:30 PM",
      "commitNameOld": "20a6560bdfd8c4e3b6c3ac9b0f0f62d32e3a2191",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.99,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void run() {\n     // Check the size of the edit log once every 5 minutes.\n     long periodMSec \u003d 5 * 60;   // 5 minutes\n-    if(checkpointPeriod \u003c periodMSec) {\n-      periodMSec \u003d checkpointPeriod;\n+    if(checkpointConf.getPeriod() \u003c periodMSec) {\n+      periodMSec \u003d checkpointConf.getPeriod();\n     }\n     periodMSec *\u003d 1000;\n \n     long lastCheckpointTime \u003d 0;\n     if (!backupNode.shouldCheckpointAtStartup()) {\n       lastCheckpointTime \u003d now();\n     }\n     while(shouldRun) {\n       try {\n         long now \u003d now();\n         boolean shouldCheckpoint \u003d false;\n         if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n           shouldCheckpoint \u003d true;\n         } else {\n           long txns \u003d countUncheckpointedTxns();\n-          if(txns \u003e\u003d checkpointTxnCount)\n+          if(txns \u003e\u003d checkpointConf.getTxnCount())\n             shouldCheckpoint \u003d true;\n         }\n         if(shouldCheckpoint) {\n           doCheckpoint();\n           lastCheckpointTime \u003d now;\n         }\n       } catch(IOException e) {\n         LOG.error(\"Exception in doCheckpoint: \", e);\n       } catch(Throwable e) {\n         LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n         shutdown();\n         break;\n       }\n       try {\n         Thread.sleep(periodMSec);\n       } catch(InterruptedException ie) {\n         // do nothing\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Check the size of the edit log once every 5 minutes.\n    long periodMSec \u003d 5 * 60;   // 5 minutes\n    if(checkpointConf.getPeriod() \u003c periodMSec) {\n      periodMSec \u003d checkpointConf.getPeriod();\n    }\n    periodMSec *\u003d 1000;\n\n    long lastCheckpointTime \u003d 0;\n    if (!backupNode.shouldCheckpointAtStartup()) {\n      lastCheckpointTime \u003d now();\n    }\n    while(shouldRun) {\n      try {\n        long now \u003d now();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n          shouldCheckpoint \u003d true;\n        } else {\n          long txns \u003d countUncheckpointedTxns();\n          if(txns \u003e\u003d checkpointConf.getTxnCount())\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(periodMSec);\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run() {\n    // Check the size of the edit log once every 5 minutes.\n    long periodMSec \u003d 5 * 60;   // 5 minutes\n    if(checkpointPeriod \u003c periodMSec) {\n      periodMSec \u003d checkpointPeriod;\n    }\n    periodMSec *\u003d 1000;\n\n    long lastCheckpointTime \u003d 0;\n    if (!backupNode.shouldCheckpointAtStartup()) {\n      lastCheckpointTime \u003d now();\n    }\n    while(shouldRun) {\n      try {\n        long now \u003d now();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n          shouldCheckpoint \u003d true;\n        } else {\n          long txns \u003d countUncheckpointedTxns();\n          if(txns \u003e\u003d checkpointTxnCount)\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(periodMSec);\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run() {\n    // Check the size of the edit log once every 5 minutes.\n    long periodMSec \u003d 5 * 60;   // 5 minutes\n    if(checkpointPeriod \u003c periodMSec) {\n      periodMSec \u003d checkpointPeriod;\n    }\n    periodMSec *\u003d 1000;\n\n    long lastCheckpointTime \u003d 0;\n    if (!backupNode.shouldCheckpointAtStartup()) {\n      lastCheckpointTime \u003d now();\n    }\n    while(shouldRun) {\n      try {\n        long now \u003d now();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n          shouldCheckpoint \u003d true;\n        } else {\n          long txns \u003d countUncheckpointedTxns();\n          if(txns \u003e\u003d checkpointTxnCount)\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(periodMSec);\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/07/11 5:04 PM",
      "commitNameOld": "01cd616d170d5d26a539e51e731e8e73b789b360",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public void run() {\n     // Check the size of the edit log once every 5 minutes.\n     long periodMSec \u003d 5 * 60;   // 5 minutes\n     if(checkpointPeriod \u003c periodMSec) {\n       periodMSec \u003d checkpointPeriod;\n     }\n     periodMSec *\u003d 1000;\n \n     long lastCheckpointTime \u003d 0;\n-    if(!backupNode.shouldCheckpointAtStartup())\n+    if (!backupNode.shouldCheckpointAtStartup()) {\n       lastCheckpointTime \u003d now();\n+    }\n     while(shouldRun) {\n       try {\n         long now \u003d now();\n         boolean shouldCheckpoint \u003d false;\n         if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n           shouldCheckpoint \u003d true;\n         } else {\n-          long size \u003d getJournalSize();\n-          if(size \u003e\u003d checkpointSize)\n+          long txns \u003d countUncheckpointedTxns();\n+          if(txns \u003e\u003d checkpointTxnCount)\n             shouldCheckpoint \u003d true;\n         }\n         if(shouldCheckpoint) {\n           doCheckpoint();\n           lastCheckpointTime \u003d now;\n         }\n       } catch(IOException e) {\n         LOG.error(\"Exception in doCheckpoint: \", e);\n       } catch(Throwable e) {\n         LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n         shutdown();\n         break;\n       }\n       try {\n         Thread.sleep(periodMSec);\n       } catch(InterruptedException ie) {\n         // do nothing\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Check the size of the edit log once every 5 minutes.\n    long periodMSec \u003d 5 * 60;   // 5 minutes\n    if(checkpointPeriod \u003c periodMSec) {\n      periodMSec \u003d checkpointPeriod;\n    }\n    periodMSec *\u003d 1000;\n\n    long lastCheckpointTime \u003d 0;\n    if (!backupNode.shouldCheckpointAtStartup()) {\n      lastCheckpointTime \u003d now();\n    }\n    while(shouldRun) {\n      try {\n        long now \u003d now();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n          shouldCheckpoint \u003d true;\n        } else {\n          long txns \u003d countUncheckpointedTxns();\n          if(txns \u003e\u003d checkpointTxnCount)\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(periodMSec);\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  public void run() {\n+    // Check the size of the edit log once every 5 minutes.\n+    long periodMSec \u003d 5 * 60;   // 5 minutes\n+    if(checkpointPeriod \u003c periodMSec) {\n+      periodMSec \u003d checkpointPeriod;\n+    }\n+    periodMSec *\u003d 1000;\n+\n+    long lastCheckpointTime \u003d 0;\n+    if(!backupNode.shouldCheckpointAtStartup())\n+      lastCheckpointTime \u003d now();\n+    while(shouldRun) {\n+      try {\n+        long now \u003d now();\n+        boolean shouldCheckpoint \u003d false;\n+        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n+          shouldCheckpoint \u003d true;\n+        } else {\n+          long size \u003d getJournalSize();\n+          if(size \u003e\u003d checkpointSize)\n+            shouldCheckpoint \u003d true;\n+        }\n+        if(shouldCheckpoint) {\n+          doCheckpoint();\n+          lastCheckpointTime \u003d now;\n+        }\n+      } catch(IOException e) {\n+        LOG.error(\"Exception in doCheckpoint: \", e);\n+      } catch(Throwable e) {\n+        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n+        shutdown();\n+        break;\n+      }\n+      try {\n+        Thread.sleep(periodMSec);\n+      } catch(InterruptedException ie) {\n+        // do nothing\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    // Check the size of the edit log once every 5 minutes.\n    long periodMSec \u003d 5 * 60;   // 5 minutes\n    if(checkpointPeriod \u003c periodMSec) {\n      periodMSec \u003d checkpointPeriod;\n    }\n    periodMSec *\u003d 1000;\n\n    long lastCheckpointTime \u003d 0;\n    if(!backupNode.shouldCheckpointAtStartup())\n      lastCheckpointTime \u003d now();\n    while(shouldRun) {\n      try {\n        long now \u003d now();\n        boolean shouldCheckpoint \u003d false;\n        if(now \u003e\u003d lastCheckpointTime + periodMSec) {\n          shouldCheckpoint \u003d true;\n        } else {\n          long size \u003d getJournalSize();\n          if(size \u003e\u003d checkpointSize)\n            shouldCheckpoint \u003d true;\n        }\n        if(shouldCheckpoint) {\n          doCheckpoint();\n          lastCheckpointTime \u003d now;\n        }\n      } catch(IOException e) {\n        LOG.error(\"Exception in doCheckpoint: \", e);\n      } catch(Throwable e) {\n        LOG.error(\"Throwable Exception in doCheckpoint: \", e);\n        shutdown();\n        break;\n      }\n      try {\n        Thread.sleep(periodMSec);\n      } catch(InterruptedException ie) {\n        // do nothing\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/Checkpointer.java"
    }
  }
}