{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CacheReplicationMonitor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
  "functionStartLine": 156,
  "functionEndLine": 210,
  "numCommitsSeen": 28,
  "timeTaken": 2991,
  "changeHistory": [
    "f0252ad2525c90b2b89ae2ff1de12482da2c8ddd",
    "0942c99eba12f6baf5609c9621cd07b09618a97e",
    "44864c68b59a72f27279212c1316adec37e5209a",
    "93e23a99157c30b51752fc49748c3c210745a187",
    "d85c017d0488930d806f267141057fc73e68c728",
    "991c453ca3ac141a3f286f74af8401f83c38b230",
    "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
    "40eb94ade3161d93e7a762a839004748f6d0ae89"
  ],
  "changeHistoryShort": {
    "f0252ad2525c90b2b89ae2ff1de12482da2c8ddd": "Ybodychange",
    "0942c99eba12f6baf5609c9621cd07b09618a97e": "Ybodychange",
    "44864c68b59a72f27279212c1316adec37e5209a": "Ybodychange",
    "93e23a99157c30b51752fc49748c3c210745a187": "Ybodychange",
    "d85c017d0488930d806f267141057fc73e68c728": "Ybodychange",
    "991c453ca3ac141a3f286f74af8401f83c38b230": "Ybodychange",
    "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a": "Ybodychange",
    "40eb94ade3161d93e7a762a839004748f6d0ae89": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0252ad2525c90b2b89ae2ff1de12482da2c8ddd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10377. CacheReplicationMonitor shutdown log message should use INFO level (Yiqun Lin via cmccabe)\n",
      "commitDate": "10/05/16 11:15 AM",
      "commitName": "f0252ad2525c90b2b89ae2ff1de12482da2c8ddd",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "23/02/16 12:01 PM",
      "commitNameOld": "211c78c09073e5b34db309b49d8de939a7a812f5",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 76.93,
      "commitsBetweenForRepo": 460,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public void run() {\n     long startTimeMs \u003d 0;\n     Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n         System.identityHashCode(this) + \")\");\n     LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n              intervalMs + \" milliseconds\");\n     try {\n       long curTimeMs \u003d Time.monotonicNow();\n       while (true) {\n         lock.lock();\n         try {\n           while (true) {\n             if (shutdown) {\n-              LOG.debug(\"Shutting down CacheReplicationMonitor\");\n+              LOG.info(\"Shutting down CacheReplicationMonitor\");\n               return;\n             }\n             if (completedScanCount \u003c neededScanCount) {\n               LOG.debug(\"Rescanning because of pending operations\");\n               break;\n             }\n             long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n             if (delta \u003c\u003d 0) {\n               LOG.debug(\"Rescanning after {} milliseconds\", (curTimeMs - startTimeMs));\n               break;\n             }\n             doRescan.await(delta, TimeUnit.MILLISECONDS);\n             curTimeMs \u003d Time.monotonicNow();\n           }\n         } finally {\n           lock.unlock();\n         }\n         startTimeMs \u003d curTimeMs;\n         mark \u003d !mark;\n         rescan();\n         curTimeMs \u003d Time.monotonicNow();\n         // Update synchronization-related variables.\n         lock.lock();\n         try {\n           completedScanCount \u003d curScanCount;\n           curScanCount \u003d -1;\n           scanFinished.signalAll();\n         } finally {\n           lock.unlock();\n         }\n         LOG.debug(\"Scanned {} directive(s) and {} block(s) in {} millisecond(s).\",\n             scannedDirectives, scannedBlocks, (curTimeMs - startTimeMs));\n       }\n     } catch (InterruptedException e) {\n       LOG.info(\"Shutting down CacheReplicationMonitor.\");\n       return;\n     } catch (Throwable t) {\n       LOG.error(\"Thread exiting\", t);\n       terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    long startTimeMs \u003d 0;\n    Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n        System.identityHashCode(this) + \")\");\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        lock.lock();\n        try {\n          while (true) {\n            if (shutdown) {\n              LOG.info(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (completedScanCount \u003c neededScanCount) {\n              LOG.debug(\"Rescanning because of pending operations\");\n              break;\n            }\n            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.debug(\"Rescanning after {} milliseconds\", (curTimeMs - startTimeMs));\n              break;\n            }\n            doRescan.await(delta, TimeUnit.MILLISECONDS);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n        } finally {\n          lock.unlock();\n        }\n        startTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        // Update synchronization-related variables.\n        lock.lock();\n        try {\n          completedScanCount \u003d curScanCount;\n          curScanCount \u003d -1;\n          scanFinished.signalAll();\n        } finally {\n          lock.unlock();\n        }\n        LOG.debug(\"Scanned {} directive(s) and {} block(s) in {} millisecond(s).\",\n            scannedDirectives, scannedBlocks, (curTimeMs - startTimeMs));\n      }\n    } catch (InterruptedException e) {\n      LOG.info(\"Shutting down CacheReplicationMonitor.\");\n      return;\n    } catch (Throwable t) {\n      LOG.error(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "0942c99eba12f6baf5609c9621cd07b09618a97e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7258. CacheReplicationMonitor rescan schedule log should use DEBUG level instead of INFO level. Contributed by Xiaoyu Yao.\n",
      "commitDate": "23/10/14 11:58 PM",
      "commitName": "0942c99eba12f6baf5609c9621cd07b09618a97e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "18/08/14 8:34 AM",
      "commitNameOld": "1c77c8041009196b03b2e27106bc6497e865e2a8",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 66.64,
      "commitsBetweenForRepo": 663,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,55 @@\n   public void run() {\n     long startTimeMs \u003d 0;\n     Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n         System.identityHashCode(this) + \")\");\n     LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n              intervalMs + \" milliseconds\");\n     try {\n       long curTimeMs \u003d Time.monotonicNow();\n       while (true) {\n         lock.lock();\n         try {\n           while (true) {\n             if (shutdown) {\n-              LOG.info(\"Shutting down CacheReplicationMonitor\");\n+              LOG.debug(\"Shutting down CacheReplicationMonitor\");\n               return;\n             }\n             if (completedScanCount \u003c neededScanCount) {\n-              LOG.info(\"Rescanning because of pending operations\");\n+              LOG.debug(\"Rescanning because of pending operations\");\n               break;\n             }\n             long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n             if (delta \u003c\u003d 0) {\n-              LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n-                  \" milliseconds\");\n+              LOG.debug(\"Rescanning after {} milliseconds\", (curTimeMs - startTimeMs));\n               break;\n             }\n             doRescan.await(delta, TimeUnit.MILLISECONDS);\n             curTimeMs \u003d Time.monotonicNow();\n           }\n         } finally {\n           lock.unlock();\n         }\n         startTimeMs \u003d curTimeMs;\n         mark \u003d !mark;\n         rescan();\n         curTimeMs \u003d Time.monotonicNow();\n         // Update synchronization-related variables.\n         lock.lock();\n         try {\n           completedScanCount \u003d curScanCount;\n           curScanCount \u003d -1;\n           scanFinished.signalAll();\n         } finally {\n           lock.unlock();\n         }\n-        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n-            scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n-            \"millisecond(s).\");\n+        LOG.debug(\"Scanned {} directive(s) and {} block(s) in {} millisecond(s).\",\n+            scannedDirectives, scannedBlocks, (curTimeMs - startTimeMs));\n       }\n     } catch (InterruptedException e) {\n       LOG.info(\"Shutting down CacheReplicationMonitor.\");\n       return;\n     } catch (Throwable t) {\n       LOG.error(\"Thread exiting\", t);\n       terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    long startTimeMs \u003d 0;\n    Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n        System.identityHashCode(this) + \")\");\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        lock.lock();\n        try {\n          while (true) {\n            if (shutdown) {\n              LOG.debug(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (completedScanCount \u003c neededScanCount) {\n              LOG.debug(\"Rescanning because of pending operations\");\n              break;\n            }\n            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.debug(\"Rescanning after {} milliseconds\", (curTimeMs - startTimeMs));\n              break;\n            }\n            doRescan.await(delta, TimeUnit.MILLISECONDS);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n        } finally {\n          lock.unlock();\n        }\n        startTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        // Update synchronization-related variables.\n        lock.lock();\n        try {\n          completedScanCount \u003d curScanCount;\n          curScanCount \u003d -1;\n          scanFinished.signalAll();\n        } finally {\n          lock.unlock();\n        }\n        LOG.debug(\"Scanned {} directive(s) and {} block(s) in {} millisecond(s).\",\n            scannedDirectives, scannedBlocks, (curTimeMs - startTimeMs));\n      }\n    } catch (InterruptedException e) {\n      LOG.info(\"Shutting down CacheReplicationMonitor.\");\n      return;\n    } catch (Throwable t) {\n      LOG.error(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "44864c68b59a72f27279212c1316adec37e5209a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6783. Fix HDFS CacheReplicationMonitor rescan logic. Contributed by Yi Liu and Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617872 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/14 9:20 PM",
      "commitName": "44864c68b59a72f27279212c1316adec37e5209a",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "03/07/14 10:13 AM",
      "commitNameOld": "93e23a99157c30b51752fc49748c3c210745a187",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 41.46,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,57 @@\n   public void run() {\n     long startTimeMs \u003d 0;\n     Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n         System.identityHashCode(this) + \")\");\n     LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n              intervalMs + \" milliseconds\");\n     try {\n       long curTimeMs \u003d Time.monotonicNow();\n       while (true) {\n         lock.lock();\n         try {\n           while (true) {\n             if (shutdown) {\n               LOG.info(\"Shutting down CacheReplicationMonitor\");\n               return;\n             }\n-            if (needsRescan) {\n+            if (completedScanCount \u003c neededScanCount) {\n               LOG.info(\"Rescanning because of pending operations\");\n               break;\n             }\n             long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n             if (delta \u003c\u003d 0) {\n               LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                   \" milliseconds\");\n               break;\n             }\n             doRescan.await(delta, TimeUnit.MILLISECONDS);\n             curTimeMs \u003d Time.monotonicNow();\n           }\n-          isScanning \u003d true;\n-          needsRescan \u003d false;\n         } finally {\n           lock.unlock();\n         }\n         startTimeMs \u003d curTimeMs;\n         mark \u003d !mark;\n         rescan();\n         curTimeMs \u003d Time.monotonicNow();\n         // Update synchronization-related variables.\n         lock.lock();\n         try {\n-          isScanning \u003d false;\n-          scanCount++;\n+          completedScanCount \u003d curScanCount;\n+          curScanCount \u003d -1;\n           scanFinished.signalAll();\n         } finally {\n           lock.unlock();\n         }\n         LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n             scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n             \"millisecond(s).\");\n       }\n     } catch (InterruptedException e) {\n       LOG.info(\"Shutting down CacheReplicationMonitor.\");\n       return;\n     } catch (Throwable t) {\n       LOG.error(\"Thread exiting\", t);\n       terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    long startTimeMs \u003d 0;\n    Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n        System.identityHashCode(this) + \")\");\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        lock.lock();\n        try {\n          while (true) {\n            if (shutdown) {\n              LOG.info(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (completedScanCount \u003c neededScanCount) {\n              LOG.info(\"Rescanning because of pending operations\");\n              break;\n            }\n            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                  \" milliseconds\");\n              break;\n            }\n            doRescan.await(delta, TimeUnit.MILLISECONDS);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n        } finally {\n          lock.unlock();\n        }\n        startTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        // Update synchronization-related variables.\n        lock.lock();\n        try {\n          completedScanCount \u003d curScanCount;\n          curScanCount \u003d -1;\n          scanFinished.signalAll();\n        } finally {\n          lock.unlock();\n        }\n        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n            scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n            \"millisecond(s).\");\n      }\n    } catch (InterruptedException e) {\n      LOG.info(\"Shutting down CacheReplicationMonitor.\");\n      return;\n    } catch (Throwable t) {\n      LOG.error(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "93e23a99157c30b51752fc49748c3c210745a187": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6613. Improve logging in caching classes. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607697 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 10:13 AM",
      "commitName": "93e23a99157c30b51752fc49748c3c210745a187",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "10/03/14 11:24 PM",
      "commitNameOld": "bab90b2222abb41d0e3382a92c2f9a8dc568f0e0",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 114.45,
      "commitsBetweenForRepo": 724,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public void run() {\n     long startTimeMs \u003d 0;\n     Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n         System.identityHashCode(this) + \")\");\n     LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n              intervalMs + \" milliseconds\");\n     try {\n       long curTimeMs \u003d Time.monotonicNow();\n       while (true) {\n         lock.lock();\n         try {\n           while (true) {\n             if (shutdown) {\n               LOG.info(\"Shutting down CacheReplicationMonitor\");\n               return;\n             }\n             if (needsRescan) {\n               LOG.info(\"Rescanning because of pending operations\");\n               break;\n             }\n             long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n             if (delta \u003c\u003d 0) {\n               LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                   \" milliseconds\");\n               break;\n             }\n             doRescan.await(delta, TimeUnit.MILLISECONDS);\n             curTimeMs \u003d Time.monotonicNow();\n           }\n           isScanning \u003d true;\n           needsRescan \u003d false;\n         } finally {\n           lock.unlock();\n         }\n         startTimeMs \u003d curTimeMs;\n         mark \u003d !mark;\n         rescan();\n         curTimeMs \u003d Time.monotonicNow();\n         // Update synchronization-related variables.\n         lock.lock();\n         try {\n           isScanning \u003d false;\n           scanCount++;\n           scanFinished.signalAll();\n         } finally {\n           lock.unlock();\n         }\n         LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n             scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n             \"millisecond(s).\");\n       }\n     } catch (InterruptedException e) {\n       LOG.info(\"Shutting down CacheReplicationMonitor.\");\n       return;\n     } catch (Throwable t) {\n-      LOG.fatal(\"Thread exiting\", t);\n+      LOG.error(\"Thread exiting\", t);\n       terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    long startTimeMs \u003d 0;\n    Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n        System.identityHashCode(this) + \")\");\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        lock.lock();\n        try {\n          while (true) {\n            if (shutdown) {\n              LOG.info(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (needsRescan) {\n              LOG.info(\"Rescanning because of pending operations\");\n              break;\n            }\n            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                  \" milliseconds\");\n              break;\n            }\n            doRescan.await(delta, TimeUnit.MILLISECONDS);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n          isScanning \u003d true;\n          needsRescan \u003d false;\n        } finally {\n          lock.unlock();\n        }\n        startTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        // Update synchronization-related variables.\n        lock.lock();\n        try {\n          isScanning \u003d false;\n          scanCount++;\n          scanFinished.signalAll();\n        } finally {\n          lock.unlock();\n        }\n        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n            scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n            \"millisecond(s).\");\n      }\n    } catch (InterruptedException e) {\n      LOG.info(\"Shutting down CacheReplicationMonitor.\");\n      return;\n    } catch (Throwable t) {\n      LOG.error(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "d85c017d0488930d806f267141057fc73e68c728": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5651. Remove dfs.namenode.caching.enabled and improve CRM locking. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1555002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 6:45 PM",
      "commitName": "d85c017d0488930d806f267141057fc73e68c728",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "31/12/13 4:01 PM",
      "commitNameOld": "07e4fb1455abc33584fc666ef745abe256ebd7d1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,59 @@\n   public void run() {\n-    startTimeMs \u003d 0;\n+    long startTimeMs \u003d 0;\n+    Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n+        System.identityHashCode(this) + \")\");\n     LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n              intervalMs + \" milliseconds\");\n     try {\n       long curTimeMs \u003d Time.monotonicNow();\n       while (true) {\n-        // Not all of the variables accessed here need the CRM lock, but take\n-        // it anyway for simplicity\n         lock.lock();\n         try {\n           while (true) {\n             if (shutdown) {\n               LOG.info(\"Shutting down CacheReplicationMonitor\");\n               return;\n             }\n             if (needsRescan) {\n               LOG.info(\"Rescanning because of pending operations\");\n               break;\n             }\n             long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n             if (delta \u003c\u003d 0) {\n               LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                   \" milliseconds\");\n               break;\n             }\n             doRescan.await(delta, TimeUnit.MILLISECONDS);\n             curTimeMs \u003d Time.monotonicNow();\n           }\n-        } finally {\n-          lock.unlock();\n-        }\n-        // Mark scan as started, clear needsRescan\n-        lock.lock();\n-        try {\n           isScanning \u003d true;\n           needsRescan \u003d false;\n         } finally {\n           lock.unlock();\n         }\n         startTimeMs \u003d curTimeMs;\n         mark \u003d !mark;\n         rescan();\n         curTimeMs \u003d Time.monotonicNow();\n-        // Retake the CRM lock to update synchronization-related variables\n+        // Update synchronization-related variables.\n         lock.lock();\n         try {\n           isScanning \u003d false;\n           scanCount++;\n           scanFinished.signalAll();\n         } finally {\n           lock.unlock();\n         }\n         LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n             scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n             \"millisecond(s).\");\n       }\n+    } catch (InterruptedException e) {\n+      LOG.info(\"Shutting down CacheReplicationMonitor.\");\n+      return;\n     } catch (Throwable t) {\n       LOG.fatal(\"Thread exiting\", t);\n       terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    long startTimeMs \u003d 0;\n    Thread.currentThread().setName(\"CacheReplicationMonitor(\" +\n        System.identityHashCode(this) + \")\");\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        lock.lock();\n        try {\n          while (true) {\n            if (shutdown) {\n              LOG.info(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (needsRescan) {\n              LOG.info(\"Rescanning because of pending operations\");\n              break;\n            }\n            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                  \" milliseconds\");\n              break;\n            }\n            doRescan.await(delta, TimeUnit.MILLISECONDS);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n          isScanning \u003d true;\n          needsRescan \u003d false;\n        } finally {\n          lock.unlock();\n        }\n        startTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        // Update synchronization-related variables.\n        lock.lock();\n        try {\n          isScanning \u003d false;\n          scanCount++;\n          scanFinished.signalAll();\n        } finally {\n          lock.unlock();\n        }\n        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n            scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n            \"millisecond(s).\");\n      }\n    } catch (InterruptedException e) {\n      LOG.info(\"Shutting down CacheReplicationMonitor.\");\n      return;\n    } catch (Throwable t) {\n      LOG.fatal(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "991c453ca3ac141a3f286f74af8401f83c38b230": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5431. Support cachepool-based limit management in path-based caching. (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551651 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 10:47 AM",
      "commitName": "991c453ca3ac141a3f286f74af8401f83c38b230",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "05/12/13 1:09 PM",
      "commitNameOld": "55e5b0653c34a5f4146ce5a97a5b4a88a976d88a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 11.9,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,62 @@\n   public void run() {\n-    shutdown \u003d false;\n-    rescanImmediately \u003d true;\n-    scanTimeMs \u003d 0;\n+    startTimeMs \u003d 0;\n     LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n              intervalMs + \" milliseconds\");\n     try {\n       long curTimeMs \u003d Time.monotonicNow();\n       while (true) {\n-        synchronized(this) {\n+        // Not all of the variables accessed here need the CRM lock, but take\n+        // it anyway for simplicity\n+        lock.lock();\n+        try {\n           while (true) {\n             if (shutdown) {\n               LOG.info(\"Shutting down CacheReplicationMonitor\");\n               return;\n             }\n-            if (rescanImmediately) {\n-              LOG.info(\"Rescanning on request\");\n-              rescanImmediately \u003d false;\n+            if (needsRescan) {\n+              LOG.info(\"Rescanning because of pending operations\");\n               break;\n             }\n-            long delta \u003d (scanTimeMs + intervalMs) - curTimeMs;\n+            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n             if (delta \u003c\u003d 0) {\n-              LOG.info(\"Rescanning after \" + (curTimeMs - scanTimeMs) +\n+              LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                   \" milliseconds\");\n               break;\n             }\n-            this.wait(delta);\n+            doRescan.await(delta, TimeUnit.MILLISECONDS);\n             curTimeMs \u003d Time.monotonicNow();\n           }\n+        } finally {\n+          lock.unlock();\n         }\n-        scanTimeMs \u003d curTimeMs;\n+        // Mark scan as started, clear needsRescan\n+        lock.lock();\n+        try {\n+          isScanning \u003d true;\n+          needsRescan \u003d false;\n+        } finally {\n+          lock.unlock();\n+        }\n+        startTimeMs \u003d curTimeMs;\n         mark \u003d !mark;\n         rescan();\n         curTimeMs \u003d Time.monotonicNow();\n+        // Retake the CRM lock to update synchronization-related variables\n+        lock.lock();\n+        try {\n+          isScanning \u003d false;\n+          scanCount++;\n+          scanFinished.signalAll();\n+        } finally {\n+          lock.unlock();\n+        }\n         LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n-            scannedBlocks + \" block(s) in \" + (curTimeMs - scanTimeMs) + \" \" +\n+            scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n             \"millisecond(s).\");\n       }\n     } catch (Throwable t) {\n       LOG.fatal(\"Thread exiting\", t);\n       terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    startTimeMs \u003d 0;\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        // Not all of the variables accessed here need the CRM lock, but take\n        // it anyway for simplicity\n        lock.lock();\n        try {\n          while (true) {\n            if (shutdown) {\n              LOG.info(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (needsRescan) {\n              LOG.info(\"Rescanning because of pending operations\");\n              break;\n            }\n            long delta \u003d (startTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.info(\"Rescanning after \" + (curTimeMs - startTimeMs) +\n                  \" milliseconds\");\n              break;\n            }\n            doRescan.await(delta, TimeUnit.MILLISECONDS);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n        } finally {\n          lock.unlock();\n        }\n        // Mark scan as started, clear needsRescan\n        lock.lock();\n        try {\n          isScanning \u003d true;\n          needsRescan \u003d false;\n        } finally {\n          lock.unlock();\n        }\n        startTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        // Retake the CRM lock to update synchronization-related variables\n        lock.lock();\n        try {\n          isScanning \u003d false;\n          scanCount++;\n          scanFinished.signalAll();\n        } finally {\n          lock.unlock();\n        }\n        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n            scannedBlocks + \" block(s) in \" + (curTimeMs - startTimeMs) + \" \" +\n            \"millisecond(s).\");\n      }\n    } catch (Throwable t) {\n      LOG.fatal(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5096. Automatically cache new data added to a cached path (contributed by Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532924 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 3:15 PM",
      "commitName": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "16/09/13 11:41 AM",
      "commitNameOld": "85c203602993a946fb5f41eadf1cf1484a0ce686",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 30.15,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,43 @@\n   public void run() {\n-    LOG.info(\"CacheReplicationMonitor is starting\");\n-    while (namesystem.isRunning()) {\n-      try {\n-        computeCachingWork();\n-        processPendingCachingWork();\n-        Thread.sleep(cacheReplicationRecheckInterval);\n-      } catch (Throwable t) {\n-        if (!namesystem.isRunning()) {\n-          LOG.info(\"Stopping CacheReplicationMonitor.\");\n-          if (!(t instanceof InterruptedException)) {\n-            LOG.info(\"CacheReplicationMonitor received an exception\"\n-                + \" while shutting down.\", t);\n+    shutdown \u003d false;\n+    rescanImmediately \u003d true;\n+    scanTimeMs \u003d 0;\n+    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n+             intervalMs + \" milliseconds\");\n+    try {\n+      long curTimeMs \u003d Time.monotonicNow();\n+      while (true) {\n+        synchronized(this) {\n+          while (true) {\n+            if (shutdown) {\n+              LOG.info(\"Shutting down CacheReplicationMonitor\");\n+              return;\n+            }\n+            if (rescanImmediately) {\n+              LOG.info(\"Rescanning on request\");\n+              rescanImmediately \u003d false;\n+              break;\n+            }\n+            long delta \u003d (scanTimeMs + intervalMs) - curTimeMs;\n+            if (delta \u003c\u003d 0) {\n+              LOG.info(\"Rescanning after \" + (curTimeMs - scanTimeMs) +\n+                  \" milliseconds\");\n+              break;\n+            }\n+            this.wait(delta);\n+            curTimeMs \u003d Time.monotonicNow();\n           }\n-          break;\n         }\n-        LOG.fatal(\"ReplicationMonitor thread received Runtime exception. \", t);\n-        terminate(1, t);\n+        scanTimeMs \u003d curTimeMs;\n+        mark \u003d !mark;\n+        rescan();\n+        curTimeMs \u003d Time.monotonicNow();\n+        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n+            scannedBlocks + \" block(s) in \" + (curTimeMs - scanTimeMs) + \" \" +\n+            \"millisecond(s).\");\n       }\n+    } catch (Throwable t) {\n+      LOG.fatal(\"Thread exiting\", t);\n+      terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    shutdown \u003d false;\n    rescanImmediately \u003d true;\n    scanTimeMs \u003d 0;\n    LOG.info(\"Starting CacheReplicationMonitor with interval \" +\n             intervalMs + \" milliseconds\");\n    try {\n      long curTimeMs \u003d Time.monotonicNow();\n      while (true) {\n        synchronized(this) {\n          while (true) {\n            if (shutdown) {\n              LOG.info(\"Shutting down CacheReplicationMonitor\");\n              return;\n            }\n            if (rescanImmediately) {\n              LOG.info(\"Rescanning on request\");\n              rescanImmediately \u003d false;\n              break;\n            }\n            long delta \u003d (scanTimeMs + intervalMs) - curTimeMs;\n            if (delta \u003c\u003d 0) {\n              LOG.info(\"Rescanning after \" + (curTimeMs - scanTimeMs) +\n                  \" milliseconds\");\n              break;\n            }\n            this.wait(delta);\n            curTimeMs \u003d Time.monotonicNow();\n          }\n        }\n        scanTimeMs \u003d curTimeMs;\n        mark \u003d !mark;\n        rescan();\n        curTimeMs \u003d Time.monotonicNow();\n        LOG.info(\"Scanned \" + scannedDirectives + \" directive(s) and \" +\n            scannedBlocks + \" block(s) in \" + (curTimeMs - scanTimeMs) + \" \" +\n            \"millisecond(s).\");\n      }\n    } catch (Throwable t) {\n      LOG.fatal(\"Thread exiting\", t);\n      terminate(1, t);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java",
      "extendedDetails": {}
    },
    "40eb94ade3161d93e7a762a839004748f6d0ae89": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5053. NameNode should invoke DataNode APIs to coordinate caching. (Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1523145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:27 PM",
      "commitName": "40eb94ade3161d93e7a762a839004748f6d0ae89",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,21 @@\n+  public void run() {\n+    LOG.info(\"CacheReplicationMonitor is starting\");\n+    while (namesystem.isRunning()) {\n+      try {\n+        computeCachingWork();\n+        processPendingCachingWork();\n+        Thread.sleep(cacheReplicationRecheckInterval);\n+      } catch (Throwable t) {\n+        if (!namesystem.isRunning()) {\n+          LOG.info(\"Stopping CacheReplicationMonitor.\");\n+          if (!(t instanceof InterruptedException)) {\n+            LOG.info(\"CacheReplicationMonitor received an exception\"\n+                + \" while shutting down.\", t);\n+          }\n+          break;\n+        }\n+        LOG.fatal(\"ReplicationMonitor thread received Runtime exception. \", t);\n+        terminate(1, t);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(\"CacheReplicationMonitor is starting\");\n    while (namesystem.isRunning()) {\n      try {\n        computeCachingWork();\n        processPendingCachingWork();\n        Thread.sleep(cacheReplicationRecheckInterval);\n      } catch (Throwable t) {\n        if (!namesystem.isRunning()) {\n          LOG.info(\"Stopping CacheReplicationMonitor.\");\n          if (!(t instanceof InterruptedException)) {\n            LOG.info(\"CacheReplicationMonitor received an exception\"\n                + \" while shutting down.\", t);\n          }\n          break;\n        }\n        LOG.fatal(\"ReplicationMonitor thread received Runtime exception. \", t);\n        terminate(1, t);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/CacheReplicationMonitor.java"
    }
  }
}