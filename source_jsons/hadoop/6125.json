{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLog.java",
  "functionName": "selectInputStreams",
  "functionId": "selectInputStreams___fromTxId-long__toAtLeastTxId-long__recovery-MetaRecoveryContext__inProgressOk-boolean__onlyDurableTxns-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
  "functionStartLine": 1732,
  "functionEndLine": 1756,
  "numCommitsSeen": 292,
  "timeTaken": 5851,
  "changeHistory": [
    "60fc2a138827c2c29fa7e9d6844e3b8d43809726",
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
    "faa4455be512e070fa420084be8d1be5c72f3b08",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
    "8172215e5601c3bb03fb5c0a0d88768142ea5087",
    "8c62c46046656c01b327c378e89d57b4bf37e16e",
    "557ffe2101325438f15dbb218128d327984ecb11",
    "9947d8054c035c93c775908a37489efc1ed36dbd",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e"
  ],
  "changeHistoryShort": {
    "60fc2a138827c2c29fa7e9d6844e3b8d43809726": "Ybodychange",
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": "Ymultichange(Yparameterchange,Ybodychange)",
    "faa4455be512e070fa420084be8d1be5c72f3b08": "Ymultichange(Ymodifierchange,Ybodychange)",
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": "Ymultichange(Ymodifierchange,Ybodychange)",
    "8172215e5601c3bb03fb5c0a0d88768142ea5087": "Ymultichange(Ymodifierchange,Ybodychange)",
    "8c62c46046656c01b327c378e89d57b4bf37e16e": "Ybodychange",
    "557ffe2101325438f15dbb218128d327984ecb11": "Ybodychange",
    "9947d8054c035c93c775908a37489efc1ed36dbd": "Ybodychange",
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": "Ymultichange(Yparameterchange,Ybodychange)",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": "Ymodifierchange"
  },
  "changeHistoryDetails": {
    "60fc2a138827c2c29fa7e9d6844e3b8d43809726": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12804. Use slf4j instead of log4j in FSEditLog. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "20/11/17 12:49 PM",
      "commitName": "60fc2a138827c2c29fa7e9d6844e3b8d43809726",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "16/10/17 9:51 AM",
      "commitNameOld": "035c6ee587e444550af6420676e4cee049e09869",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 35.17,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n       long toAtLeastTxId, MetaRecoveryContext recovery, boolean inProgressOk,\n       boolean onlyDurableTxns) throws IOException {\n \n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     synchronized(journalSetLock) {\n       Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n           \"selectInputStreams() on closed FSEditLog\");\n       selectInputStreams(streams, fromTxId, inProgressOk, onlyDurableTxns);\n     }\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n-        LOG.error(e);\n+        LOG.error(\"Exception while selecting input streams\", e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n      long toAtLeastTxId, MetaRecoveryContext recovery, boolean inProgressOk,\n      boolean onlyDurableTxns) throws IOException {\n\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    synchronized(journalSetLock) {\n      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n          \"selectInputStreams() on closed FSEditLog\");\n      selectInputStreams(streams, fromTxId, inProgressOk, onlyDurableTxns);\n    }\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(\"Exception while selecting input streams\", e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "098ec2b11ff3f677eb823f75b147a1ac8dbf959e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
      "commitDate": "27/07/16 5:55 PM",
      "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
          "commitDate": "27/07/16 5:55 PM",
          "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/06/16 1:52 AM",
          "commitNameOld": "e620530301fd3e62537d4b7bc3d8ed296bda1ffc",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 50.67,
          "commitsBetweenForRepo": 454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n-      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n-      boolean inProgressOk) throws IOException {\n+  public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n+      long toAtLeastTxId, MetaRecoveryContext recovery, boolean inProgressOk,\n+      boolean onlyDurableTxns) throws IOException {\n \n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     synchronized(journalSetLock) {\n       Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n           \"selectInputStreams() on closed FSEditLog\");\n-      selectInputStreams(streams, fromTxId, inProgressOk);\n+      selectInputStreams(streams, fromTxId, inProgressOk, onlyDurableTxns);\n     }\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n      long toAtLeastTxId, MetaRecoveryContext recovery, boolean inProgressOk,\n      boolean onlyDurableTxns) throws IOException {\n\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    synchronized(journalSetLock) {\n      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n          \"selectInputStreams() on closed FSEditLog\");\n      selectInputStreams(streams, fromTxId, inProgressOk, onlyDurableTxns);\n    }\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[fromTxId-long, toAtLeastTxId-long, recovery-MetaRecoveryContext, inProgressOk-boolean]",
            "newValue": "[fromTxId-long, toAtLeastTxId-long, recovery-MetaRecoveryContext, inProgressOk-boolean, onlyDurableTxns-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10519. Add a configuration option to enable in-progress edit log tailing. Contributed by Jiayi Zhou.\n",
          "commitDate": "27/07/16 5:55 PM",
          "commitName": "098ec2b11ff3f677eb823f75b147a1ac8dbf959e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/06/16 1:52 AM",
          "commitNameOld": "e620530301fd3e62537d4b7bc3d8ed296bda1ffc",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 50.67,
          "commitsBetweenForRepo": 454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n-      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n-      boolean inProgressOk) throws IOException {\n+  public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n+      long toAtLeastTxId, MetaRecoveryContext recovery, boolean inProgressOk,\n+      boolean onlyDurableTxns) throws IOException {\n \n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     synchronized(journalSetLock) {\n       Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n           \"selectInputStreams() on closed FSEditLog\");\n-      selectInputStreams(streams, fromTxId, inProgressOk);\n+      selectInputStreams(streams, fromTxId, inProgressOk, onlyDurableTxns);\n     }\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n      long toAtLeastTxId, MetaRecoveryContext recovery, boolean inProgressOk,\n      boolean onlyDurableTxns) throws IOException {\n\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    synchronized(journalSetLock) {\n      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n          \"selectInputStreams() on closed FSEditLog\");\n      selectInputStreams(streams, fromTxId, inProgressOk, onlyDurableTxns);\n    }\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "faa4455be512e070fa420084be8d1be5c72f3b08": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6634. inotify in HDFS. Contributed by James Thomas.\n",
      "commitDate": "02/09/14 2:02 PM",
      "commitName": "faa4455be512e070fa420084be8d1be5c72f3b08",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6634. inotify in HDFS. Contributed by James Thomas.\n",
          "commitDate": "02/09/14 2:02 PM",
          "commitName": "faa4455be512e070fa420084be8d1be5c72f3b08",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "23/07/14 12:05 PM",
          "commitNameOld": "5343b43fd989ec596afed807ddce29ad96c23e2d",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 41.08,
          "commitsBetweenForRepo": 314,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n+\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    selectInputStreams(streams, fromTxId, inProgressOk);\n+    synchronized(journalSetLock) {\n+      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n+          \"selectInputStreams() on closed FSEditLog\");\n+      selectInputStreams(streams, fromTxId, inProgressOk);\n+    }\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    synchronized(journalSetLock) {\n      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n          \"selectInputStreams() on closed FSEditLog\");\n      selectInputStreams(streams, fromTxId, inProgressOk);\n    }\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6634. inotify in HDFS. Contributed by James Thomas.\n",
          "commitDate": "02/09/14 2:02 PM",
          "commitName": "faa4455be512e070fa420084be8d1be5c72f3b08",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "23/07/14 12:05 PM",
          "commitNameOld": "5343b43fd989ec596afed807ddce29ad96c23e2d",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 41.08,
          "commitsBetweenForRepo": 314,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n+\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    selectInputStreams(streams, fromTxId, inProgressOk);\n+    synchronized(journalSetLock) {\n+      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n+          \"selectInputStreams() on closed FSEditLog\");\n+      selectInputStreams(streams, fromTxId, inProgressOk);\n+    }\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    synchronized(journalSetLock) {\n      Preconditions.checkState(journalSet.isOpen(), \"Cannot call \" +\n          \"selectInputStreams() on closed FSEditLog\");\n      selectInputStreams(streams, fromTxId, inProgressOk);\n    }\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "512a18a8d92305a34f3037064ceabdc5aff1f8bf": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/13 5:32 PM",
      "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/13 5:32 PM",
          "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "27/11/13 11:20 PM",
          "commitNameOld": "9da451cac57f3cd64c2c047675e5b60ca88ecf83",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.76,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,20 @@\n-  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n-    return selectInputStreams(fromTxId, toAtLeastTxId, recovery, inProgressOk,\n-        true);\n+    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n+    selectInputStreams(streams, fromTxId, inProgressOk);\n+\n+    try {\n+      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n+    } catch (IOException e) {\n+      if (recovery !\u003d null) {\n+        // If recovery mode is enabled, continue loading even if we know we\n+        // can\u0027t load up to toAtLeastTxId.\n+        LOG.error(e);\n+      } else {\n+        closeAllStreams(streams);\n+        throw e;\n+      }\n+    }\n+    return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    selectInputStreams(streams, fromTxId, inProgressOk);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5074. Allow starting up from an fsimage checkpoint in the middle of a segment. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/12/13 5:32 PM",
          "commitName": "512a18a8d92305a34f3037064ceabdc5aff1f8bf",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "27/11/13 11:20 PM",
          "commitNameOld": "9da451cac57f3cd64c2c047675e5b60ca88ecf83",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.76,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,20 @@\n-  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n-    return selectInputStreams(fromTxId, toAtLeastTxId, recovery, inProgressOk,\n-        true);\n+    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n+    selectInputStreams(streams, fromTxId, inProgressOk);\n+\n+    try {\n+      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n+    } catch (IOException e) {\n+      if (recovery !\u003d null) {\n+        // If recovery mode is enabled, continue loading even if we know we\n+        // can\u0027t load up to toAtLeastTxId.\n+        LOG.error(e);\n+      } else {\n+        closeAllStreams(streams);\n+        throw e;\n+      }\n+    }\n+    return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    selectInputStreams(streams, fromTxId, inProgressOk);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "8172215e5601c3bb03fb5c0a0d88768142ea5087": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5080. BootstrapStandby not working with QJM when the existing NN is active. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514386 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/13 10:19 AM",
      "commitName": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5080. BootstrapStandby not working with QJM when the existing NN is active. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514386 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/08/13 10:19 AM",
          "commitName": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "30/07/13 12:51 AM",
          "commitNameOld": "8c7a7e619699386f9e6991842558d78aa0c8053d",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 16.39,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,6 @@\n-  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n-    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    selectInputStreams(streams, fromTxId, inProgressOk, true);\n-\n-    try {\n-      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n-    } catch (IOException e) {\n-      if (recovery !\u003d null) {\n-        // If recovery mode is enabled, continue loading even if we know we\n-        // can\u0027t load up to toAtLeastTxId.\n-        LOG.error(e);\n-      } else {\n-        closeAllStreams(streams);\n-        throw e;\n-      }\n-    }\n-    return streams;\n+    return selectInputStreams(fromTxId, toAtLeastTxId, recovery, inProgressOk,\n+        true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    return selectInputStreams(fromTxId, toAtLeastTxId, recovery, inProgressOk,\n        true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5080. BootstrapStandby not working with QJM when the existing NN is active. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514386 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/08/13 10:19 AM",
          "commitName": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "30/07/13 12:51 AM",
          "commitNameOld": "8c7a7e619699386f9e6991842558d78aa0c8053d",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 16.39,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,6 @@\n-  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n-    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    selectInputStreams(streams, fromTxId, inProgressOk, true);\n-\n-    try {\n-      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n-    } catch (IOException e) {\n-      if (recovery !\u003d null) {\n-        // If recovery mode is enabled, continue loading even if we know we\n-        // can\u0027t load up to toAtLeastTxId.\n-        LOG.error(e);\n-      } else {\n-        closeAllStreams(streams);\n-        throw e;\n-      }\n-    }\n-    return streams;\n+    return selectInputStreams(fromTxId, toAtLeastTxId, recovery, inProgressOk,\n+        true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    return selectInputStreams(fromTxId, toAtLeastTxId, recovery, inProgressOk,\n        true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "8c62c46046656c01b327c378e89d57b4bf37e16e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4298. StorageRetentionManager spews warnings when used with QJM. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485371 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/13 12:37 PM",
      "commitName": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "23/04/13 7:21 PM",
      "commitNameOld": "5f1e3b561a24c05537561a058a44eaa2d3408d67",
      "commitAuthorOld": "",
      "daysBetweenCommits": 28.72,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    selectInputStreams(streams, fromTxId, inProgressOk);\n+    selectInputStreams(streams, fromTxId, inProgressOk, true);\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    selectInputStreams(streams, fromTxId, inProgressOk, true);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "557ffe2101325438f15dbb218128d327984ecb11": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2946. HA: Put a cap on the number of completed edits files retained by the NN. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398609 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/10/12 6:59 PM",
      "commitName": "557ffe2101325438f15dbb218128d327984ecb11",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "15/10/12 6:48 AM",
      "commitNameOld": "ad06a087131d69d173d8e03dce5c97650a530f2e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n+    selectInputStreams(streams, fromTxId, inProgressOk);\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    selectInputStreams(streams, fromTxId, inProgressOk);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "9947d8054c035c93c775908a37489efc1ed36dbd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3049. During the normal NN startup process, fall back on a different edit log if we see one that is corrupt. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349114 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/12 9:15 PM",
      "commitName": "9947d8054c035c93c775908a37489efc1ed36dbd",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/05/12 1:56 AM",
      "commitNameOld": "e767845c36080dd936f711664dc42ecc570c3561",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 17.8,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,20 @@\n   public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n       long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n       boolean inProgressOk) throws IOException {\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n \n     try {\n       checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n     } catch (IOException e) {\n       if (recovery !\u003d null) {\n         // If recovery mode is enabled, continue loading even if we know we\n         // can\u0027t load up to toAtLeastTxId.\n         LOG.error(e);\n       } else {\n         closeAllStreams(streams);\n         throw e;\n       }\n     }\n-    // This code will go away as soon as RedundantEditLogInputStream is\n-    // introduced. (HDFS-3049)\n-    try {\n-      if (!streams.isEmpty()) {\n-        streams.get(0).skipUntil(fromTxId);\n-      }\n-    } catch (IOException e) {\n-      // We don\u0027t want to throw an exception from here, because that would make\n-      // recovery impossible even if the user requested it.  An exception will\n-      // be thrown later, when we don\u0027t read the starting txid we expect.\n-      LOG.error(\"error skipping until transaction \" + fromTxId, e);\n-    }\n     return streams;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    return streams;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "74dfa8f1f22d58df64a78c660af111e17ab7053e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/12 1:42 PM",
      "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "16/04/12 12:31 PM",
          "commitNameOld": "f1667dee146fe5e3edbb50e409ae96fa0777473a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 37.05,
          "commitsBetweenForRepo": 235,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,32 @@\n-  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n-      long toAtLeastTxId, boolean inProgressOk) throws IOException {\n+  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n+      boolean inProgressOk) throws IOException {\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    EditLogInputStream stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n-    while (stream !\u003d null) {\n-      streams.add(stream);\n-      // We\u0027re now looking for a higher range, so reset the fromTxId\n-      fromTxId \u003d stream.getLastTxId() + 1;\n-      stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n+    journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n+\n+    try {\n+      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n+    } catch (IOException e) {\n+      if (recovery !\u003d null) {\n+        // If recovery mode is enabled, continue loading even if we know we\n+        // can\u0027t load up to toAtLeastTxId.\n+        LOG.error(e);\n+      } else {\n+        closeAllStreams(streams);\n+        throw e;\n+      }\n     }\n-    \n-    if (fromTxId \u003c\u003d toAtLeastTxId) {\n-      closeAllStreams(streams);\n-      throw new IOException(String.format(\"Gap in transactions. Expected to \"\n-          + \"be able to read up until at least txid %d but unable to find any \"\n-          + \"edit logs containing txid %d\", toAtLeastTxId, fromTxId));\n+    // This code will go away as soon as RedundantEditLogInputStream is\n+    // introduced. (HDFS-3049)\n+    try {\n+      if (!streams.isEmpty()) {\n+        streams.get(0).skipUntil(fromTxId);\n+      }\n+    } catch (IOException e) {\n+      // We don\u0027t want to throw an exception from here, because that would make\n+      // recovery impossible even if the user requested it.  An exception will\n+      // be thrown later, when we don\u0027t read the starting txid we expect.\n+      LOG.error(\"error skipping until transaction \" + fromTxId, e);\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    // This code will go away as soon as RedundantEditLogInputStream is\n    // introduced. (HDFS-3049)\n    try {\n      if (!streams.isEmpty()) {\n        streams.get(0).skipUntil(fromTxId);\n      }\n    } catch (IOException e) {\n      // We don\u0027t want to throw an exception from here, because that would make\n      // recovery impossible even if the user requested it.  An exception will\n      // be thrown later, when we don\u0027t read the starting txid we expect.\n      LOG.error(\"error skipping until transaction \" + fromTxId, e);\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[fromTxId-long, toAtLeastTxId-long, inProgressOk-boolean]",
            "newValue": "[fromTxId-long, toAtLeastTxId-long, recovery-MetaRecoveryContext, inProgressOk-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2982. Startup performance suffers when there are many edit log segments. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342042 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/05/12 1:42 PM",
          "commitName": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "16/04/12 12:31 PM",
          "commitNameOld": "f1667dee146fe5e3edbb50e409ae96fa0777473a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 37.05,
          "commitsBetweenForRepo": 235,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,32 @@\n-  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n-      long toAtLeastTxId, boolean inProgressOk) throws IOException {\n+  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n+      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n+      boolean inProgressOk) throws IOException {\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n-    EditLogInputStream stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n-    while (stream !\u003d null) {\n-      streams.add(stream);\n-      // We\u0027re now looking for a higher range, so reset the fromTxId\n-      fromTxId \u003d stream.getLastTxId() + 1;\n-      stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n+    journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n+\n+    try {\n+      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n+    } catch (IOException e) {\n+      if (recovery !\u003d null) {\n+        // If recovery mode is enabled, continue loading even if we know we\n+        // can\u0027t load up to toAtLeastTxId.\n+        LOG.error(e);\n+      } else {\n+        closeAllStreams(streams);\n+        throw e;\n+      }\n     }\n-    \n-    if (fromTxId \u003c\u003d toAtLeastTxId) {\n-      closeAllStreams(streams);\n-      throw new IOException(String.format(\"Gap in transactions. Expected to \"\n-          + \"be able to read up until at least txid %d but unable to find any \"\n-          + \"edit logs containing txid %d\", toAtLeastTxId, fromTxId));\n+    // This code will go away as soon as RedundantEditLogInputStream is\n+    // introduced. (HDFS-3049)\n+    try {\n+      if (!streams.isEmpty()) {\n+        streams.get(0).skipUntil(fromTxId);\n+      }\n+    } catch (IOException e) {\n+      // We don\u0027t want to throw an exception from here, because that would make\n+      // recovery impossible even if the user requested it.  An exception will\n+      // be thrown later, when we don\u0027t read the starting txid we expect.\n+      LOG.error(\"error skipping until transaction \" + fromTxId, e);\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(\n      long fromTxId, long toAtLeastTxId, MetaRecoveryContext recovery,\n      boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    journalSet.selectInputStreams(streams, fromTxId, inProgressOk);\n\n    try {\n      checkForGaps(streams, fromTxId, toAtLeastTxId, inProgressOk);\n    } catch (IOException e) {\n      if (recovery !\u003d null) {\n        // If recovery mode is enabled, continue loading even if we know we\n        // can\u0027t load up to toAtLeastTxId.\n        LOG.error(e);\n      } else {\n        closeAllStreams(streams);\n        throw e;\n      }\n    }\n    // This code will go away as soon as RedundantEditLogInputStream is\n    // introduced. (HDFS-3049)\n    try {\n      if (!streams.isEmpty()) {\n        streams.get(0).skipUntil(fromTxId);\n      }\n    } catch (IOException e) {\n      // We don\u0027t want to throw an exception from here, because that would make\n      // recovery impossible even if the user requested it.  An exception will\n      // be thrown later, when we don\u0027t read the starting txid we expect.\n      LOG.error(\"error skipping until transaction \" + fromTxId, e);\n    }\n    return streams;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-3039. Address findbugs and javadoc warnings on branch. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1296017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/12 5:32 PM",
      "commitName": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "29/02/12 4:37 PM",
      "commitNameOld": "30cffeb388f9065f0c5ce5fa53e127940a8917b6",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n-  public Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n+  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n       long toAtLeastTxId, boolean inProgressOk) throws IOException {\n     List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n     EditLogInputStream stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n     while (stream !\u003d null) {\n       streams.add(stream);\n       // We\u0027re now looking for a higher range, so reset the fromTxId\n       fromTxId \u003d stream.getLastTxId() + 1;\n       stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n     }\n     \n     if (fromTxId \u003c\u003d toAtLeastTxId) {\n       closeAllStreams(streams);\n       throw new IOException(String.format(\"Gap in transactions. Expected to \"\n           + \"be able to read up until at least txid %d but unable to find any \"\n           + \"edit logs containing txid %d\", toAtLeastTxId, fromTxId));\n     }\n     return streams;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Collection\u003cEditLogInputStream\u003e selectInputStreams(long fromTxId,\n      long toAtLeastTxId, boolean inProgressOk) throws IOException {\n    List\u003cEditLogInputStream\u003e streams \u003d new ArrayList\u003cEditLogInputStream\u003e();\n    EditLogInputStream stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n    while (stream !\u003d null) {\n      streams.add(stream);\n      // We\u0027re now looking for a higher range, so reset the fromTxId\n      fromTxId \u003d stream.getLastTxId() + 1;\n      stream \u003d journalSet.getInputStream(fromTxId, inProgressOk);\n    }\n    \n    if (fromTxId \u003c\u003d toAtLeastTxId) {\n      closeAllStreams(streams);\n      throw new IOException(String.format(\"Gap in transactions. Expected to \"\n          + \"be able to read up until at least txid %d but unable to find any \"\n          + \"edit logs containing txid %d\", toAtLeastTxId, fromTxId));\n    }\n    return streams;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    }
  }
}