{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "createReservationUpdateRequest",
  "functionId": "createReservationUpdateRequest___resContext-ReservationUpdateRequestInfo",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2218,
  "functionEndLine": 2269,
  "numCommitsSeen": 106,
  "timeTaken": 3762,
  "changeHistory": [
    "25932da6d1ee56299c8f9911576a42792c435407",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "c25a6354598ec855bec7f695a7c3eed8794cd381"
  ],
  "changeHistoryShort": {
    "25932da6d1ee56299c8f9911576a42792c435407": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "c25a6354598ec855bec7f695a7c3eed8794cd381": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25932da6d1ee56299c8f9911576a42792c435407": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5516. Add REST API for supporting recurring reservations. (Sean Po via Subru).\n",
      "commitDate": "26/10/17 12:10 PM",
      "commitName": "25932da6d1ee56299c8f9911576a42792c435407",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "09c5dfe937f0570cd9494b34d210df2d5f0737a7",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 17.04,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   private ReservationUpdateRequest createReservationUpdateRequest(\n       ReservationUpdateRequestInfo resContext) throws IOException {\n \n     // defending against a couple of common submission format problems\n     if (resContext \u003d\u003d null) {\n       throw new BadRequestException(\n           \"Input ReservationSubmissionContext should not be null\");\n     }\n     ReservationDefinitionInfo resInfo \u003d resContext.getReservationDefinition();\n     if (resInfo \u003d\u003d null) {\n       throw new BadRequestException(\n           \"Input ReservationDefinition should not be null\");\n     }\n     ReservationRequestsInfo resReqsInfo \u003d resInfo.getReservationRequests();\n     if (resReqsInfo \u003d\u003d null || resReqsInfo.getReservationRequest() \u003d\u003d null\n         || resReqsInfo.getReservationRequest().size() \u003d\u003d 0) {\n       throw new BadRequestException(\"The ReservationDefinition should\"\n           + \" contain at least one ReservationRequest\");\n     }\n     if (resContext.getReservationId() \u003d\u003d null) {\n       throw new BadRequestException(\n           \"Update operations must specify an existing ReservaitonId\");\n     }\n \n     ReservationRequestInterpreter[] values \u003d\n         ReservationRequestInterpreter.values();\n     ReservationRequestInterpreter resInt \u003d\n         values[resReqsInfo.getReservationRequestsInterpreter()];\n     List\u003cReservationRequest\u003e list \u003d new ArrayList\u003cReservationRequest\u003e();\n \n     for (ReservationRequestInfo resReqInfo : resReqsInfo\n         .getReservationRequest()) {\n       ResourceInfo rInfo \u003d resReqInfo.getCapability();\n       Resource capability \u003d\n           Resource.newInstance(rInfo.getMemorySize(), rInfo.getvCores());\n       int numContainers \u003d resReqInfo.getNumContainers();\n       int minConcurrency \u003d resReqInfo.getMinConcurrency();\n       long duration \u003d resReqInfo.getDuration();\n       ReservationRequest rr \u003d ReservationRequest.newInstance(capability,\n           numContainers, minConcurrency, duration);\n       list.add(rr);\n     }\n     ReservationRequests reqs \u003d ReservationRequests.newInstance(list, resInt);\n-    ReservationDefinition rDef \u003d\n-        ReservationDefinition.newInstance(resInfo.getArrival(),\n-            resInfo.getDeadline(), reqs, resInfo.getReservationName());\n+    ReservationDefinition rDef \u003d ReservationDefinition.newInstance(\n+        resInfo.getArrival(), resInfo.getDeadline(), reqs,\n+        resInfo.getReservationName(), resInfo.getRecurrenceExpression(),\n+        Priority.newInstance(resInfo.getPriority()));\n     ReservationUpdateRequest request \u003d ReservationUpdateRequest.newInstance(\n         rDef, ReservationId.parseReservationId(resContext.getReservationId()));\n \n     return request;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReservationUpdateRequest createReservationUpdateRequest(\n      ReservationUpdateRequestInfo resContext) throws IOException {\n\n    // defending against a couple of common submission format problems\n    if (resContext \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Input ReservationSubmissionContext should not be null\");\n    }\n    ReservationDefinitionInfo resInfo \u003d resContext.getReservationDefinition();\n    if (resInfo \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Input ReservationDefinition should not be null\");\n    }\n    ReservationRequestsInfo resReqsInfo \u003d resInfo.getReservationRequests();\n    if (resReqsInfo \u003d\u003d null || resReqsInfo.getReservationRequest() \u003d\u003d null\n        || resReqsInfo.getReservationRequest().size() \u003d\u003d 0) {\n      throw new BadRequestException(\"The ReservationDefinition should\"\n          + \" contain at least one ReservationRequest\");\n    }\n    if (resContext.getReservationId() \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Update operations must specify an existing ReservaitonId\");\n    }\n\n    ReservationRequestInterpreter[] values \u003d\n        ReservationRequestInterpreter.values();\n    ReservationRequestInterpreter resInt \u003d\n        values[resReqsInfo.getReservationRequestsInterpreter()];\n    List\u003cReservationRequest\u003e list \u003d new ArrayList\u003cReservationRequest\u003e();\n\n    for (ReservationRequestInfo resReqInfo : resReqsInfo\n        .getReservationRequest()) {\n      ResourceInfo rInfo \u003d resReqInfo.getCapability();\n      Resource capability \u003d\n          Resource.newInstance(rInfo.getMemorySize(), rInfo.getvCores());\n      int numContainers \u003d resReqInfo.getNumContainers();\n      int minConcurrency \u003d resReqInfo.getMinConcurrency();\n      long duration \u003d resReqInfo.getDuration();\n      ReservationRequest rr \u003d ReservationRequest.newInstance(capability,\n          numContainers, minConcurrency, duration);\n      list.add(rr);\n    }\n    ReservationRequests reqs \u003d ReservationRequests.newInstance(list, resInt);\n    ReservationDefinition rDef \u003d ReservationDefinition.newInstance(\n        resInfo.getArrival(), resInfo.getDeadline(), reqs,\n        resInfo.getReservationName(), resInfo.getRecurrenceExpression(),\n        Priority.newInstance(resInfo.getPriority()));\n    ReservationUpdateRequest request \u003d ReservationUpdateRequest.newInstance(\n        rDef, ReservationId.parseReservationId(resContext.getReservationId()));\n\n    return request;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "25/05/16 4:55 PM",
      "commitNameOld": "013532a95e63d7c53e601be530021d6d5a15ab7f",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 3.67,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private ReservationUpdateRequest createReservationUpdateRequest(\n       ReservationUpdateRequestInfo resContext) throws IOException {\n \n     // defending against a couple of common submission format problems\n     if (resContext \u003d\u003d null) {\n       throw new BadRequestException(\n           \"Input ReservationSubmissionContext should not be null\");\n     }\n     ReservationDefinitionInfo resInfo \u003d resContext.getReservationDefinition();\n     if (resInfo \u003d\u003d null) {\n       throw new BadRequestException(\n           \"Input ReservationDefinition should not be null\");\n     }\n     ReservationRequestsInfo resReqsInfo \u003d resInfo.getReservationRequests();\n     if (resReqsInfo \u003d\u003d null || resReqsInfo.getReservationRequest() \u003d\u003d null\n         || resReqsInfo.getReservationRequest().size() \u003d\u003d 0) {\n       throw new BadRequestException(\"The ReservationDefinition should\"\n           + \" contain at least one ReservationRequest\");\n     }\n     if (resContext.getReservationId() \u003d\u003d null) {\n       throw new BadRequestException(\n           \"Update operations must specify an existing ReservaitonId\");\n     }\n \n     ReservationRequestInterpreter[] values \u003d\n         ReservationRequestInterpreter.values();\n     ReservationRequestInterpreter resInt \u003d\n         values[resReqsInfo.getReservationRequestsInterpreter()];\n     List\u003cReservationRequest\u003e list \u003d new ArrayList\u003cReservationRequest\u003e();\n \n     for (ReservationRequestInfo resReqInfo : resReqsInfo\n         .getReservationRequest()) {\n       ResourceInfo rInfo \u003d resReqInfo.getCapability();\n       Resource capability \u003d\n-          Resource.newInstance(rInfo.getMemory(), rInfo.getvCores());\n+          Resource.newInstance(rInfo.getMemorySize(), rInfo.getvCores());\n       int numContainers \u003d resReqInfo.getNumContainers();\n       int minConcurrency \u003d resReqInfo.getMinConcurrency();\n       long duration \u003d resReqInfo.getDuration();\n       ReservationRequest rr \u003d\n           ReservationRequest.newInstance(capability, numContainers,\n               minConcurrency, duration);\n       list.add(rr);\n     }\n     ReservationRequests reqs \u003d ReservationRequests.newInstance(list, resInt);\n     ReservationDefinition rDef \u003d\n         ReservationDefinition.newInstance(resInfo.getArrival(),\n             resInfo.getDeadline(), reqs, resInfo.getReservationName());\n     ReservationUpdateRequest request \u003d\n         ReservationUpdateRequest.newInstance(rDef, ReservationId\n             .parseReservationId(resContext.getReservationId()));\n \n     return request;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ReservationUpdateRequest createReservationUpdateRequest(\n      ReservationUpdateRequestInfo resContext) throws IOException {\n\n    // defending against a couple of common submission format problems\n    if (resContext \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Input ReservationSubmissionContext should not be null\");\n    }\n    ReservationDefinitionInfo resInfo \u003d resContext.getReservationDefinition();\n    if (resInfo \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Input ReservationDefinition should not be null\");\n    }\n    ReservationRequestsInfo resReqsInfo \u003d resInfo.getReservationRequests();\n    if (resReqsInfo \u003d\u003d null || resReqsInfo.getReservationRequest() \u003d\u003d null\n        || resReqsInfo.getReservationRequest().size() \u003d\u003d 0) {\n      throw new BadRequestException(\"The ReservationDefinition should\"\n          + \" contain at least one ReservationRequest\");\n    }\n    if (resContext.getReservationId() \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Update operations must specify an existing ReservaitonId\");\n    }\n\n    ReservationRequestInterpreter[] values \u003d\n        ReservationRequestInterpreter.values();\n    ReservationRequestInterpreter resInt \u003d\n        values[resReqsInfo.getReservationRequestsInterpreter()];\n    List\u003cReservationRequest\u003e list \u003d new ArrayList\u003cReservationRequest\u003e();\n\n    for (ReservationRequestInfo resReqInfo : resReqsInfo\n        .getReservationRequest()) {\n      ResourceInfo rInfo \u003d resReqInfo.getCapability();\n      Resource capability \u003d\n          Resource.newInstance(rInfo.getMemorySize(), rInfo.getvCores());\n      int numContainers \u003d resReqInfo.getNumContainers();\n      int minConcurrency \u003d resReqInfo.getMinConcurrency();\n      long duration \u003d resReqInfo.getDuration();\n      ReservationRequest rr \u003d\n          ReservationRequest.newInstance(capability, numContainers,\n              minConcurrency, duration);\n      list.add(rr);\n    }\n    ReservationRequests reqs \u003d ReservationRequests.newInstance(list, resInt);\n    ReservationDefinition rDef \u003d\n        ReservationDefinition.newInstance(resInfo.getArrival(),\n            resInfo.getDeadline(), reqs, resInfo.getReservationName());\n    ReservationUpdateRequest request \u003d\n        ReservationUpdateRequest.newInstance(rDef, ReservationId\n            .parseReservationId(resContext.getReservationId()));\n\n    return request;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "c25a6354598ec855bec7f695a7c3eed8794cd381": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4248. REST API for submit/update/delete Reservations. (curino)\n",
      "commitDate": "07/12/15 1:33 PM",
      "commitName": "c25a6354598ec855bec7f695a7c3eed8794cd381",
      "commitAuthor": "\u003d",
      "diff": "@@ -0,0 +1,53 @@\n+  private ReservationUpdateRequest createReservationUpdateRequest(\n+      ReservationUpdateRequestInfo resContext) throws IOException {\n+\n+    // defending against a couple of common submission format problems\n+    if (resContext \u003d\u003d null) {\n+      throw new BadRequestException(\n+          \"Input ReservationSubmissionContext should not be null\");\n+    }\n+    ReservationDefinitionInfo resInfo \u003d resContext.getReservationDefinition();\n+    if (resInfo \u003d\u003d null) {\n+      throw new BadRequestException(\n+          \"Input ReservationDefinition should not be null\");\n+    }\n+    ReservationRequestsInfo resReqsInfo \u003d resInfo.getReservationRequests();\n+    if (resReqsInfo \u003d\u003d null || resReqsInfo.getReservationRequest() \u003d\u003d null\n+        || resReqsInfo.getReservationRequest().size() \u003d\u003d 0) {\n+      throw new BadRequestException(\"The ReservationDefinition should\"\n+          + \" contain at least one ReservationRequest\");\n+    }\n+    if (resContext.getReservationId() \u003d\u003d null) {\n+      throw new BadRequestException(\n+          \"Update operations must specify an existing ReservaitonId\");\n+    }\n+\n+    ReservationRequestInterpreter[] values \u003d\n+        ReservationRequestInterpreter.values();\n+    ReservationRequestInterpreter resInt \u003d\n+        values[resReqsInfo.getReservationRequestsInterpreter()];\n+    List\u003cReservationRequest\u003e list \u003d new ArrayList\u003cReservationRequest\u003e();\n+\n+    for (ReservationRequestInfo resReqInfo : resReqsInfo\n+        .getReservationRequest()) {\n+      ResourceInfo rInfo \u003d resReqInfo.getCapability();\n+      Resource capability \u003d\n+          Resource.newInstance(rInfo.getMemory(), rInfo.getvCores());\n+      int numContainers \u003d resReqInfo.getNumContainers();\n+      int minConcurrency \u003d resReqInfo.getMinConcurrency();\n+      long duration \u003d resReqInfo.getDuration();\n+      ReservationRequest rr \u003d\n+          ReservationRequest.newInstance(capability, numContainers,\n+              minConcurrency, duration);\n+      list.add(rr);\n+    }\n+    ReservationRequests reqs \u003d ReservationRequests.newInstance(list, resInt);\n+    ReservationDefinition rDef \u003d\n+        ReservationDefinition.newInstance(resInfo.getArrival(),\n+            resInfo.getDeadline(), reqs, resInfo.getReservationName());\n+    ReservationUpdateRequest request \u003d\n+        ReservationUpdateRequest.newInstance(rDef, ReservationId\n+            .parseReservationId(resContext.getReservationId()));\n+\n+    return request;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ReservationUpdateRequest createReservationUpdateRequest(\n      ReservationUpdateRequestInfo resContext) throws IOException {\n\n    // defending against a couple of common submission format problems\n    if (resContext \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Input ReservationSubmissionContext should not be null\");\n    }\n    ReservationDefinitionInfo resInfo \u003d resContext.getReservationDefinition();\n    if (resInfo \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Input ReservationDefinition should not be null\");\n    }\n    ReservationRequestsInfo resReqsInfo \u003d resInfo.getReservationRequests();\n    if (resReqsInfo \u003d\u003d null || resReqsInfo.getReservationRequest() \u003d\u003d null\n        || resReqsInfo.getReservationRequest().size() \u003d\u003d 0) {\n      throw new BadRequestException(\"The ReservationDefinition should\"\n          + \" contain at least one ReservationRequest\");\n    }\n    if (resContext.getReservationId() \u003d\u003d null) {\n      throw new BadRequestException(\n          \"Update operations must specify an existing ReservaitonId\");\n    }\n\n    ReservationRequestInterpreter[] values \u003d\n        ReservationRequestInterpreter.values();\n    ReservationRequestInterpreter resInt \u003d\n        values[resReqsInfo.getReservationRequestsInterpreter()];\n    List\u003cReservationRequest\u003e list \u003d new ArrayList\u003cReservationRequest\u003e();\n\n    for (ReservationRequestInfo resReqInfo : resReqsInfo\n        .getReservationRequest()) {\n      ResourceInfo rInfo \u003d resReqInfo.getCapability();\n      Resource capability \u003d\n          Resource.newInstance(rInfo.getMemory(), rInfo.getvCores());\n      int numContainers \u003d resReqInfo.getNumContainers();\n      int minConcurrency \u003d resReqInfo.getMinConcurrency();\n      long duration \u003d resReqInfo.getDuration();\n      ReservationRequest rr \u003d\n          ReservationRequest.newInstance(capability, numContainers,\n              minConcurrency, duration);\n      list.add(rr);\n    }\n    ReservationRequests reqs \u003d ReservationRequests.newInstance(list, resInt);\n    ReservationDefinition rDef \u003d\n        ReservationDefinition.newInstance(resInfo.getArrival(),\n            resInfo.getDeadline(), reqs, resInfo.getReservationName());\n    ReservationUpdateRequest request \u003d\n        ReservationUpdateRequest.newInstance(rDef, ReservationId\n            .parseReservationId(resContext.getReservationId()));\n\n    return request;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}