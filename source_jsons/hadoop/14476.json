{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNodeSyncer.java",
  "functionName": "startSyncJournalsDaemon",
  "functionId": "startSyncJournalsDaemon",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
  "functionStartLine": 164,
  "functionEndLine": 224,
  "numCommitsSeen": 14,
  "timeTaken": 1860,
  "changeHistory": [
    "11615631360ba49c1e9d256ed4f65119d99fd67d",
    "07761af357ef4da791df2972d7d3f049d6011c8d",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4"
  ],
  "changeHistoryShort": {
    "11615631360ba49c1e9d256ed4f65119d99fd67d": "Ybodychange",
    "07761af357ef4da791df2972d7d3f049d6011c8d": "Ybodychange",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11615631360ba49c1e9d256ed4f65119d99fd67d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11879. Fix JN sync interval in case of exception. Contributed by Hanisha Koneru.\n",
      "commitDate": "25/05/17 2:01 PM",
      "commitName": "11615631360ba49c1e9d256ed4f65119d99fd67d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "25/05/17 10:42 AM",
      "commitNameOld": "4fb41b31dbc109f11898ea6d8fc0bb3e6c20d89b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,61 @@\n   private void startSyncJournalsDaemon() {\n     syncJournalDaemon \u003d new Daemon(() -\u003e {\n       // Wait for journal to be formatted to create edits.sync directory\n       while(!journal.isFormatted()) {\n         try {\n           Thread.sleep(journalSyncInterval);\n         } catch (InterruptedException e) {\n           LOG.error(\"JournalNodeSyncer daemon received Runtime exception.\", e);\n           Thread.currentThread().interrupt();\n           return;\n         }\n       }\n       if (!createEditsSyncDir()) {\n         LOG.error(\"Failed to create directory for downloading log \" +\n                 \"segments: %s. Stopping Journal Node Sync.\",\n             journal.getStorage().getEditsSyncDir());\n         return;\n       }\n       while(shouldSync) {\n         try {\n           if (!journal.isFormatted()) {\n             LOG.warn(\"Journal cannot sync. Not formatted.\");\n           } else {\n             syncJournals();\n           }\n-          Thread.sleep(journalSyncInterval);\n         } catch (Throwable t) {\n           if (!shouldSync) {\n             if (t instanceof InterruptedException) {\n               LOG.info(\"Stopping JournalNode Sync.\");\n               Thread.currentThread().interrupt();\n               return;\n             } else {\n               LOG.warn(\"JournalNodeSyncer received an exception while \" +\n                   \"shutting down.\", t);\n             }\n             break;\n           } else {\n             if (t instanceof InterruptedException) {\n               LOG.warn(\"JournalNodeSyncer interrupted\", t);\n               Thread.currentThread().interrupt();\n               return;\n             }\n           }\n           LOG.error(\n               \"JournalNodeSyncer daemon received Runtime exception. \", t);\n         }\n+        try {\n+          Thread.sleep(journalSyncInterval);\n+        } catch (InterruptedException e) {\n+          if (!shouldSync) {\n+            LOG.info(\"Stopping JournalNode Sync.\");\n+          } else {\n+            LOG.warn(\"JournalNodeSyncer interrupted\", e);\n+          }\n+          Thread.currentThread().interrupt();\n+          return;\n+        }\n       }\n     });\n     syncJournalDaemon.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startSyncJournalsDaemon() {\n    syncJournalDaemon \u003d new Daemon(() -\u003e {\n      // Wait for journal to be formatted to create edits.sync directory\n      while(!journal.isFormatted()) {\n        try {\n          Thread.sleep(journalSyncInterval);\n        } catch (InterruptedException e) {\n          LOG.error(\"JournalNodeSyncer daemon received Runtime exception.\", e);\n          Thread.currentThread().interrupt();\n          return;\n        }\n      }\n      if (!createEditsSyncDir()) {\n        LOG.error(\"Failed to create directory for downloading log \" +\n                \"segments: %s. Stopping Journal Node Sync.\",\n            journal.getStorage().getEditsSyncDir());\n        return;\n      }\n      while(shouldSync) {\n        try {\n          if (!journal.isFormatted()) {\n            LOG.warn(\"Journal cannot sync. Not formatted.\");\n          } else {\n            syncJournals();\n          }\n        } catch (Throwable t) {\n          if (!shouldSync) {\n            if (t instanceof InterruptedException) {\n              LOG.info(\"Stopping JournalNode Sync.\");\n              Thread.currentThread().interrupt();\n              return;\n            } else {\n              LOG.warn(\"JournalNodeSyncer received an exception while \" +\n                  \"shutting down.\", t);\n            }\n            break;\n          } else {\n            if (t instanceof InterruptedException) {\n              LOG.warn(\"JournalNodeSyncer interrupted\", t);\n              Thread.currentThread().interrupt();\n              return;\n            }\n          }\n          LOG.error(\n              \"JournalNodeSyncer daemon received Runtime exception. \", t);\n        }\n        try {\n          Thread.sleep(journalSyncInterval);\n        } catch (InterruptedException e) {\n          if (!shouldSync) {\n            LOG.info(\"Stopping JournalNode Sync.\");\n          } else {\n            LOG.warn(\"JournalNodeSyncer interrupted\", e);\n          }\n          Thread.currentThread().interrupt();\n          return;\n        }\n      }\n    });\n    syncJournalDaemon.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "07761af357ef4da791df2972d7d3f049d6011c8d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11448. JN log segment syncing should support HA upgrade. Contributed by Hanisha Koneru.\n",
      "commitDate": "04/05/17 3:57 PM",
      "commitName": "07761af357ef4da791df2972d7d3f049d6011c8d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/02/17 4:33 PM",
      "commitNameOld": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 70.93,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,51 @@\n   private void startSyncJournalsDaemon() {\n-    syncJournalDaemon \u003d new Daemon(new Runnable() {\n-      @Override\n-      public void run() {\n-        while(shouldSync) {\n-          try {\n-            if (!journal.isFormatted()) {\n-              LOG.warn(\"Journal not formatted. Cannot sync.\");\n-            } else {\n-              syncJournals();\n-            }\n-            Thread.sleep(journalSyncInterval);\n-          } catch (Throwable t) {\n-            if (!shouldSync) {\n-              if (t instanceof InterruptedException) {\n-                LOG.info(\"Stopping JournalNode Sync.\");\n-              } else {\n-                LOG.warn(\"JournalNodeSyncer received an exception while \" +\n-                    \"shutting down.\", t);\n-              }\n-              break;\n-            } else {\n-              if (t instanceof InterruptedException) {\n-                LOG.warn(\"JournalNodeSyncer interrupted\", t);\n-                break;\n-              }\n-            }\n-            LOG.error(\n-                \"JournalNodeSyncer daemon received Runtime exception. \", t);\n+    syncJournalDaemon \u003d new Daemon(() -\u003e {\n+      // Wait for journal to be formatted to create edits.sync directory\n+      while(!journal.isFormatted()) {\n+        try {\n+          Thread.sleep(journalSyncInterval);\n+        } catch (InterruptedException e) {\n+          LOG.error(\"JournalNodeSyncer daemon received Runtime exception.\", e);\n+          Thread.currentThread().interrupt();\n+          return;\n+        }\n+      }\n+      if (!createEditsSyncDir()) {\n+        LOG.error(\"Failed to create directory for downloading log \" +\n+                \"segments: %s. Stopping Journal Node Sync.\",\n+            journal.getStorage().getEditsSyncDir());\n+        return;\n+      }\n+      while(shouldSync) {\n+        try {\n+          if (!journal.isFormatted()) {\n+            LOG.warn(\"Journal cannot sync. Not formatted.\");\n+          } else {\n+            syncJournals();\n           }\n+          Thread.sleep(journalSyncInterval);\n+        } catch (Throwable t) {\n+          if (!shouldSync) {\n+            if (t instanceof InterruptedException) {\n+              LOG.info(\"Stopping JournalNode Sync.\");\n+              Thread.currentThread().interrupt();\n+              return;\n+            } else {\n+              LOG.warn(\"JournalNodeSyncer received an exception while \" +\n+                  \"shutting down.\", t);\n+            }\n+            break;\n+          } else {\n+            if (t instanceof InterruptedException) {\n+              LOG.warn(\"JournalNodeSyncer interrupted\", t);\n+              Thread.currentThread().interrupt();\n+              return;\n+            }\n+          }\n+          LOG.error(\n+              \"JournalNodeSyncer daemon received Runtime exception. \", t);\n         }\n       }\n     });\n     syncJournalDaemon.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startSyncJournalsDaemon() {\n    syncJournalDaemon \u003d new Daemon(() -\u003e {\n      // Wait for journal to be formatted to create edits.sync directory\n      while(!journal.isFormatted()) {\n        try {\n          Thread.sleep(journalSyncInterval);\n        } catch (InterruptedException e) {\n          LOG.error(\"JournalNodeSyncer daemon received Runtime exception.\", e);\n          Thread.currentThread().interrupt();\n          return;\n        }\n      }\n      if (!createEditsSyncDir()) {\n        LOG.error(\"Failed to create directory for downloading log \" +\n                \"segments: %s. Stopping Journal Node Sync.\",\n            journal.getStorage().getEditsSyncDir());\n        return;\n      }\n      while(shouldSync) {\n        try {\n          if (!journal.isFormatted()) {\n            LOG.warn(\"Journal cannot sync. Not formatted.\");\n          } else {\n            syncJournals();\n          }\n          Thread.sleep(journalSyncInterval);\n        } catch (Throwable t) {\n          if (!shouldSync) {\n            if (t instanceof InterruptedException) {\n              LOG.info(\"Stopping JournalNode Sync.\");\n              Thread.currentThread().interrupt();\n              return;\n            } else {\n              LOG.warn(\"JournalNodeSyncer received an exception while \" +\n                  \"shutting down.\", t);\n            }\n            break;\n          } else {\n            if (t instanceof InterruptedException) {\n              LOG.warn(\"JournalNodeSyncer interrupted\", t);\n              Thread.currentThread().interrupt();\n              return;\n            }\n          }\n          LOG.error(\n              \"JournalNodeSyncer daemon received Runtime exception. \", t);\n        }\n      }\n    });\n    syncJournalDaemon.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/02/17 4:33 PM",
      "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,35 @@\n+  private void startSyncJournalsDaemon() {\n+    syncJournalDaemon \u003d new Daemon(new Runnable() {\n+      @Override\n+      public void run() {\n+        while(shouldSync) {\n+          try {\n+            if (!journal.isFormatted()) {\n+              LOG.warn(\"Journal not formatted. Cannot sync.\");\n+            } else {\n+              syncJournals();\n+            }\n+            Thread.sleep(journalSyncInterval);\n+          } catch (Throwable t) {\n+            if (!shouldSync) {\n+              if (t instanceof InterruptedException) {\n+                LOG.info(\"Stopping JournalNode Sync.\");\n+              } else {\n+                LOG.warn(\"JournalNodeSyncer received an exception while \" +\n+                    \"shutting down.\", t);\n+              }\n+              break;\n+            } else {\n+              if (t instanceof InterruptedException) {\n+                LOG.warn(\"JournalNodeSyncer interrupted\", t);\n+                break;\n+              }\n+            }\n+            LOG.error(\n+                \"JournalNodeSyncer daemon received Runtime exception. \", t);\n+          }\n+        }\n+      }\n+    });\n+    syncJournalDaemon.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startSyncJournalsDaemon() {\n    syncJournalDaemon \u003d new Daemon(new Runnable() {\n      @Override\n      public void run() {\n        while(shouldSync) {\n          try {\n            if (!journal.isFormatted()) {\n              LOG.warn(\"Journal not formatted. Cannot sync.\");\n            } else {\n              syncJournals();\n            }\n            Thread.sleep(journalSyncInterval);\n          } catch (Throwable t) {\n            if (!shouldSync) {\n              if (t instanceof InterruptedException) {\n                LOG.info(\"Stopping JournalNode Sync.\");\n              } else {\n                LOG.warn(\"JournalNodeSyncer received an exception while \" +\n                    \"shutting down.\", t);\n              }\n              break;\n            } else {\n              if (t instanceof InterruptedException) {\n                LOG.warn(\"JournalNodeSyncer interrupted\", t);\n                break;\n              }\n            }\n            LOG.error(\n                \"JournalNodeSyncer daemon received Runtime exception. \", t);\n          }\n        }\n      }\n    });\n    syncJournalDaemon.start();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java"
    }
  }
}