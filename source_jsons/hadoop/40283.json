{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "allocate",
  "functionId": "allocate___clusterResource-Resource__candidates-CandidateNodeSet__FiCaSchedulerNode____schedulingMode-SchedulingMode__resourceLimits-ResourceLimits__schedulerKey-SchedulerRequestKey__reservedContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 833,
  "functionEndLine": 903,
  "numCommitsSeen": 90,
  "timeTaken": 11327,
  "changeHistory": [
    "6ce295b78737aca8103912121d54f318cb5d36ef",
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "09763925025a3709e6098186348e1afd80cb9f71",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
    "cbf20264838f536382a9d8c4cd2144faf6875c3a",
    "2a0fa50f9d718d51036ccdf30c7d998362fe423b",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "e5003be907acef87c2770e3f2914953f62017b0e",
    "ba2313d6145a1234777938a747187373f4cd58d9"
  ],
  "changeHistoryShort": {
    "6ce295b78737aca8103912121d54f318cb5d36ef": "Ybodychange",
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "09763925025a3709e6098186348e1afd80cb9f71": "Ybodychange",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": "Ybodychange",
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Ybodychange",
    "cbf20264838f536382a9d8c4cd2144faf6875c3a": "Ybodychange",
    "2a0fa50f9d718d51036ccdf30c7d998362fe423b": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ymultichange(Yparameterchange,Ybodychange)",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "e5003be907acef87c2770e3f2914953f62017b0e": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ce295b78737aca8103912121d54f318cb5d36ef": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10259. Fix reservation logic in Multi Node Placement.\n\nReviewed by Wangda Tan.\n",
      "commitDate": "14/05/20 4:22 AM",
      "commitName": "6ce295b78737aca8103912121d54f318cb5d36ef",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 259.05,
      "commitsBetweenForRepo": 1106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,71 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n+    ContainerAllocation lastReservation \u003d null;\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     // This could be null when #pending request decreased by another thread.\n     if (schedulingPS \u003d\u003d null) {\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, null, application, schedulerKey,\n           ActivityDiagnosticConstant.REQUEST_SKIPPED_BECAUSE_NULL_ANY_REQUEST,\n           ActivityLevel.REQUEST);\n       return new ContainerAllocation(reservedContainer, null,\n           AllocationState.PRIORITY_SKIPPED);\n     }\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       if (reservedContainer \u003d\u003d null) {\n         result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n             schedulingMode, resourceLimits, schedulerKey);\n         if (null !\u003d result) {\n           continue;\n         }\n       } else {\n         // pre-check when allocating reserved container\n         if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n           // Release\n           result \u003d new ContainerAllocation(reservedContainer, null,\n               AllocationState.QUEUE_SKIPPED);\n           continue;\n         }\n       }\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n-      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n-          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n+      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n+\n+      // In MultiNodePlacement, Try Allocate on other Available nodes\n+      // from Iterator as well before Reserving. Else there won\u0027t be any\n+      // Allocate of new containers when the first node in the\n+      // iterator could not fit and returns RESERVED allocation.\n+      if (AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n+        lastReservation \u003d result;\n+        if (iter.hasNext()) {\n+          continue;\n+        } else {\n+          result \u003d doAllocation(lastReservation, node, schedulerKey,\n+              reservedContainer);\n+        }\n+      }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    ContainerAllocation lastReservation \u003d null;\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, null, application, schedulerKey,\n          ActivityDiagnosticConstant.REQUEST_SKIPPED_BECAUSE_NULL_ANY_REQUEST,\n          ActivityLevel.REQUEST);\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.PRIORITY_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      if (reservedContainer \u003d\u003d null) {\n        result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n            schedulingMode, resourceLimits, schedulerKey);\n        if (null !\u003d result) {\n          continue;\n        }\n      } else {\n        // pre-check when allocating reserved container\n        if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n          // Release\n          result \u003d new ContainerAllocation(reservedContainer, null,\n              AllocationState.QUEUE_SKIPPED);\n          continue;\n        }\n      }\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n\n      // In MultiNodePlacement, Try Allocate on other Available nodes\n      // from Iterator as well before Reserving. Else there won\u0027t be any\n      // Allocate of new containers when the first node in the\n      // iterator could not fit and returns RESERVED allocation.\n      if (AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n        lastReservation \u003d result;\n        if (iter.hasNext()) {\n          continue;\n        } else {\n          result \u003d doAllocation(lastReservation, node, schedulerKey,\n              reservedContainer);\n        }\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/06/19 6:59 AM",
      "commitNameOld": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 83.84,
      "commitsBetweenForRepo": 744,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     // This could be null when #pending request decreased by another thread.\n     if (schedulingPS \u003d\u003d null) {\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, null, application, schedulerKey,\n-          ActivityDiagnosticConstant.\n-              APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE);\n+          ActivityDiagnosticConstant.REQUEST_SKIPPED_BECAUSE_NULL_ANY_REQUEST,\n+          ActivityLevel.REQUEST);\n       return new ContainerAllocation(reservedContainer, null,\n           AllocationState.PRIORITY_SKIPPED);\n     }\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       if (reservedContainer \u003d\u003d null) {\n         result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n             schedulingMode, resourceLimits, schedulerKey);\n         if (null !\u003d result) {\n           continue;\n         }\n       } else {\n         // pre-check when allocating reserved container\n         if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n           // Release\n           result \u003d new ContainerAllocation(reservedContainer, null,\n               AllocationState.QUEUE_SKIPPED);\n           continue;\n         }\n       }\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n           || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, null, application, schedulerKey,\n          ActivityDiagnosticConstant.REQUEST_SKIPPED_BECAUSE_NULL_ANY_REQUEST,\n          ActivityLevel.REQUEST);\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.PRIORITY_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      if (reservedContainer \u003d\u003d null) {\n        result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n            schedulingMode, resourceLimits, schedulerKey);\n        if (null !\u003d result) {\n          continue;\n        }\n      } else {\n        // pre-check when allocating reserved container\n        if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n          // Release\n          result \u003d new ContainerAllocation(reservedContainer, null,\n              AllocationState.QUEUE_SKIPPED);\n          continue;\n        }\n      }\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "09763925025a3709e6098186348e1afd80cb9f71": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9590. Correct incompatible, incomplete and redundant activities. Contributed by Tao Yang.\n",
      "commitDate": "06/06/19 6:59 AM",
      "commitName": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/05/19 5:00 AM",
      "commitNameOld": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 31.08,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     // This could be null when #pending request decreased by another thread.\n     if (schedulingPS \u003d\u003d null) {\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, null, application, schedulerKey,\n           ActivityDiagnosticConstant.\n               APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE);\n       return new ContainerAllocation(reservedContainer, null,\n-          AllocationState.QUEUE_SKIPPED);\n+          AllocationState.PRIORITY_SKIPPED);\n     }\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       if (reservedContainer \u003d\u003d null) {\n         result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n             schedulingMode, resourceLimits, schedulerKey);\n         if (null !\u003d result) {\n           continue;\n         }\n       } else {\n         // pre-check when allocating reserved container\n         if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n           // Release\n           result \u003d new ContainerAllocation(reservedContainer, null,\n               AllocationState.QUEUE_SKIPPED);\n           continue;\n         }\n       }\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n           || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, null, application, schedulerKey,\n          ActivityDiagnosticConstant.\n              APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE);\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.PRIORITY_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      if (reservedContainer \u003d\u003d null) {\n        result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n            schedulingMode, resourceLimits, schedulerKey);\n        if (null !\u003d result) {\n          continue;\n        }\n      } else {\n        // pre-check when allocating reserved container\n        if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n          // Release\n          result \u003d new ContainerAllocation(reservedContainer, null,\n              AllocationState.QUEUE_SKIPPED);\n          continue;\n        }\n      }\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "06/05/19 5:00 AM",
      "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     // This could be null when #pending request decreased by another thread.\n     if (schedulingPS \u003d\u003d null) {\n+      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n+          activitiesManager, null, application, schedulerKey,\n+          ActivityDiagnosticConstant.\n+              APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE);\n       return new ContainerAllocation(reservedContainer, null,\n           AllocationState.QUEUE_SKIPPED);\n     }\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       if (reservedContainer \u003d\u003d null) {\n         result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n             schedulingMode, resourceLimits, schedulerKey);\n         if (null !\u003d result) {\n           continue;\n         }\n       } else {\n         // pre-check when allocating reserved container\n         if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n           // Release\n           result \u003d new ContainerAllocation(reservedContainer, null,\n               AllocationState.QUEUE_SKIPPED);\n           continue;\n         }\n       }\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n           || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, null, application, schedulerKey,\n          ActivityDiagnosticConstant.\n              APPLICATION_PRIORITY_DO_NOT_NEED_RESOURCE);\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.QUEUE_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      if (reservedContainer \u003d\u003d null) {\n        result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n            schedulingMode, resourceLimits, schedulerKey);\n        if (null !\u003d result) {\n          continue;\n        }\n      } else {\n        // pre-check when allocating reserved container\n        if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n          // Release\n          result \u003d new ContainerAllocation(reservedContainer, null,\n              AllocationState.QUEUE_SKIPPED);\n          continue;\n        }\n      }\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "20/07/18 10:46 AM",
      "commitNameOld": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 31.87,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n-    if (reservedContainer \u003d\u003d null) {\n-      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n-          schedulingMode, resourceLimits, schedulerKey);\n-      if (null !\u003d result) {\n-        return result;\n-      }\n-    } else {\n-      // pre-check when allocating reserved container\n-      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n-        // Release\n-        return new ContainerAllocation(reservedContainer, null,\n-            AllocationState.QUEUE_SKIPPED);\n-      }\n-    }\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     // This could be null when #pending request decreased by another thread.\n     if (schedulingPS \u003d\u003d null) {\n       return new ContainerAllocation(reservedContainer, null,\n           AllocationState.QUEUE_SKIPPED);\n     }\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n+      if (reservedContainer \u003d\u003d null) {\n+        result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n+            schedulingMode, resourceLimits, schedulerKey);\n+        if (null !\u003d result) {\n+          continue;\n+        }\n+      } else {\n+        // pre-check when allocating reserved container\n+        if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n+          // Release\n+          result \u003d new ContainerAllocation(reservedContainer, null,\n+              AllocationState.QUEUE_SKIPPED);\n+          continue;\n+        }\n+      }\n+\n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n           || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.QUEUE_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      if (reservedContainer \u003d\u003d null) {\n        result \u003d preCheckForNodeCandidateSet(clusterResource, node,\n            schedulingMode, resourceLimits, schedulerKey);\n        if (null !\u003d result) {\n          continue;\n        }\n      } else {\n        // pre-check when allocating reserved container\n        if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n          // Release\n          result \u003d new ContainerAllocation(reservedContainer, null,\n              AllocationState.QUEUE_SKIPPED);\n          continue;\n        }\n      }\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "cbf20264838f536382a9d8c4cd2144faf6875c3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8528. Final states in ContainerAllocation might be modified externally causing unexpected allocation results. Contributed by Xintong Song.\n",
      "commitDate": "20/07/18 7:34 AM",
      "commitName": "cbf20264838f536382a9d8c4cd2144faf6875c3a",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 37.96,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n     if (reservedContainer \u003d\u003d null) {\n       result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n           schedulingMode, resourceLimits, schedulerKey);\n       if (null !\u003d result) {\n         return result;\n       }\n     } else {\n       // pre-check when allocating reserved container\n       if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n         // Release\n         return new ContainerAllocation(reservedContainer, null,\n             AllocationState.QUEUE_SKIPPED);\n       }\n     }\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     // This could be null when #pending request decreased by another thread.\n     if (schedulingPS \u003d\u003d null) {\n       return new ContainerAllocation(reservedContainer, null,\n           AllocationState.QUEUE_SKIPPED);\n     }\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n-      if (AllocationState.ALLOCATED \u003d\u003d result.state\n-          || AllocationState.RESERVED \u003d\u003d result.state) {\n+      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n+          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n          schedulingMode, resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.QUEUE_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.getAllocationState()\n          || AllocationState.RESERVED \u003d\u003d result.getAllocationState()) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "2a0fa50f9d718d51036ccdf30c7d998362fe423b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8193. YARN RM hangs abruptly (stops allocating resources) when running successive applications. (Zian Chen via wangda)\n\nChange-Id: Ia83dd2499ee9000b9e09ae5a932f21a13c0ddee6\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "2a0fa50f9d718d51036ccdf30c7d998362fe423b",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 85.48,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,51 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n     if (reservedContainer \u003d\u003d null) {\n       result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n           schedulingMode, resourceLimits, schedulerKey);\n       if (null !\u003d result) {\n         return result;\n       }\n     } else {\n       // pre-check when allocating reserved container\n       if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n         // Release\n         return new ContainerAllocation(reservedContainer, null,\n             AllocationState.QUEUE_SKIPPED);\n       }\n     }\n \n     AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n+    // This could be null when #pending request decreased by another thread.\n+    if (schedulingPS \u003d\u003d null) {\n+      return new ContainerAllocation(reservedContainer, null,\n+          AllocationState.QUEUE_SKIPPED);\n+    }\n+\n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.state\n           || AllocationState.RESERVED \u003d\u003d result.state) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n          schedulingMode, resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    // This could be null when #pending request decreased by another thread.\n    if (schedulingPS \u003d\u003d null) {\n      return new ContainerAllocation(reservedContainer, null,\n          AllocationState.QUEUE_SKIPPED);\n    }\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.state\n          || AllocationState.RESERVED \u003d\u003d result.state) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
          "commitDate": "09/11/17 1:01 PM",
          "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "17/09/17 9:20 PM",
          "commitNameOld": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 52.69,
          "commitsBetweenForRepo": 485,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n-      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n-      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n-      RMContainer reservedContainer) {\n+      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n+      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n+      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n     if (reservedContainer \u003d\u003d null) {\n-      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n-          resourceLimits, schedulerKey);\n+      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n+          schedulingMode, resourceLimits, schedulerKey);\n       if (null !\u003d result) {\n         return result;\n       }\n     } else {\n       // pre-check when allocating reserved container\n       if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n         // Release\n         return new ContainerAllocation(reservedContainer, null,\n             AllocationState.QUEUE_SKIPPED);\n       }\n     }\n \n-    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n-        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n+    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n+        application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n-        ps);\n+        candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.state\n           || AllocationState.RESERVED \u003d\u003d result.state) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n          schedulingMode, resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.state\n          || AllocationState.RESERVED \u003d\u003d result.state) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, ps-PlacementSet\u003cFiCaSchedulerNode\u003e, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, candidates-CandidateNodeSet\u003cFiCaSchedulerNode\u003e, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
          "commitDate": "09/11/17 1:01 PM",
          "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "17/09/17 9:20 PM",
          "commitNameOld": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 52.69,
          "commitsBetweenForRepo": 485,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n-      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n-      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n-      RMContainer reservedContainer) {\n+      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n+      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n+      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n     if (reservedContainer \u003d\u003d null) {\n-      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n-          resourceLimits, schedulerKey);\n+      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n+          schedulingMode, resourceLimits, schedulerKey);\n       if (null !\u003d result) {\n         return result;\n       }\n     } else {\n       // pre-check when allocating reserved container\n       if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n         // Release\n         return new ContainerAllocation(reservedContainer, null,\n             AllocationState.QUEUE_SKIPPED);\n       }\n     }\n \n-    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n-        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n+    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n+        application.getAppSchedulingInfo().getAppPlacementAllocator(\n             schedulerKey);\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n-        ps);\n+        candidates);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.state\n           || AllocationState.RESERVED \u003d\u003d result.state) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      SchedulerRequestKey schedulerKey, RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForNodeCandidateSet(clusterResource, candidates,\n          schedulingMode, resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    AppPlacementAllocator\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getAppPlacementAllocator(\n            schedulerKey);\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        candidates);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.state\n          || AllocationState.RESERVED \u003d\u003d result.state) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer) {\n     // Do checks before determining which node to allocate\n     // Directly return if this check fails.\n     ContainerAllocation result;\n     if (reservedContainer \u003d\u003d null) {\n       result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n           resourceLimits, schedulerKey);\n       if (null !\u003d result) {\n         return result;\n       }\n     } else {\n       // pre-check when allocating reserved container\n-      if (application.getTotalRequiredResources(schedulerKey) \u003d\u003d 0) {\n+      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n         // Release\n         return new ContainerAllocation(reservedContainer, null,\n             AllocationState.QUEUE_SKIPPED);\n       }\n     }\n \n     SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n         application.getAppSchedulingInfo().getSchedulingPlacementSet(\n             schedulerKey);\n \n     result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n \n     Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n         ps);\n     while (iter.hasNext()) {\n       FiCaSchedulerNode node \u003d iter.next();\n \n       result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n           resourceLimits, schedulerKey, reservedContainer);\n \n       if (AllocationState.ALLOCATED \u003d\u003d result.state\n           || AllocationState.RESERVED \u003d\u003d result.state) {\n         result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n         break;\n       }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n          resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getOutstandingAsksCount(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n            schedulerKey);\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        ps);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.state\n          || AllocationState.RESERVED \u003d\u003d result.state) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,45 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n-      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n+      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer) {\n-    ContainerAllocation result \u003d\n-        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n-            schedulerKey, reservedContainer);\n+    // Do checks before determining which node to allocate\n+    // Directly return if this check fails.\n+    ContainerAllocation result;\n+    if (reservedContainer \u003d\u003d null) {\n+      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n+          resourceLimits, schedulerKey);\n+      if (null !\u003d result) {\n+        return result;\n+      }\n+    } else {\n+      // pre-check when allocating reserved container\n+      if (application.getTotalRequiredResources(schedulerKey) \u003d\u003d 0) {\n+        // Release\n+        return new ContainerAllocation(reservedContainer, null,\n+            AllocationState.QUEUE_SKIPPED);\n+      }\n+    }\n \n-    if (AllocationState.ALLOCATED \u003d\u003d result.state\n-        || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n+    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n+        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n+            schedulerKey);\n+\n+    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n+\n+    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n+        ps);\n+    while (iter.hasNext()) {\n+      FiCaSchedulerNode node \u003d iter.next();\n+\n+      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n+          resourceLimits, schedulerKey, reservedContainer);\n+\n+      if (AllocationState.ALLOCATED \u003d\u003d result.state\n+          || AllocationState.RESERVED \u003d\u003d result.state) {\n+        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n+        break;\n+      }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n          resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getTotalRequiredResources(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n            schedulerKey);\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        ps);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.state\n          || AllocationState.RESERVED \u003d\u003d result.state) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, ps-PlacementSet\u003cFiCaSchedulerNode\u003e, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,45 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n-      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n+      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer) {\n-    ContainerAllocation result \u003d\n-        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n-            schedulerKey, reservedContainer);\n+    // Do checks before determining which node to allocate\n+    // Directly return if this check fails.\n+    ContainerAllocation result;\n+    if (reservedContainer \u003d\u003d null) {\n+      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n+          resourceLimits, schedulerKey);\n+      if (null !\u003d result) {\n+        return result;\n+      }\n+    } else {\n+      // pre-check when allocating reserved container\n+      if (application.getTotalRequiredResources(schedulerKey) \u003d\u003d 0) {\n+        // Release\n+        return new ContainerAllocation(reservedContainer, null,\n+            AllocationState.QUEUE_SKIPPED);\n+      }\n+    }\n \n-    if (AllocationState.ALLOCATED \u003d\u003d result.state\n-        || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n+    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n+        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n+            schedulerKey);\n+\n+    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n+\n+    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n+        ps);\n+    while (iter.hasNext()) {\n+      FiCaSchedulerNode node \u003d iter.next();\n+\n+      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n+          resourceLimits, schedulerKey, reservedContainer);\n+\n+      if (AllocationState.ALLOCATED \u003d\u003d result.state\n+          || AllocationState.RESERVED \u003d\u003d result.state) {\n+        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n+        break;\n+      }\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer) {\n    // Do checks before determining which node to allocate\n    // Directly return if this check fails.\n    ContainerAllocation result;\n    if (reservedContainer \u003d\u003d null) {\n      result \u003d preCheckForPlacementSet(clusterResource, ps, schedulingMode,\n          resourceLimits, schedulerKey);\n      if (null !\u003d result) {\n        return result;\n      }\n    } else {\n      // pre-check when allocating reserved container\n      if (application.getTotalRequiredResources(schedulerKey) \u003d\u003d 0) {\n        // Release\n        return new ContainerAllocation(reservedContainer, null,\n            AllocationState.QUEUE_SKIPPED);\n      }\n    }\n\n    SchedulingPlacementSet\u003cFiCaSchedulerNode\u003e schedulingPS \u003d\n        application.getAppSchedulingInfo().getSchedulingPlacementSet(\n            schedulerKey);\n\n    result \u003d ContainerAllocation.PRIORITY_SKIPPED;\n\n    Iterator\u003cFiCaSchedulerNode\u003e iter \u003d schedulingPS.getPreferredNodeIterator(\n        ps);\n    while (iter.hasNext()) {\n      FiCaSchedulerNode node \u003d iter.next();\n\n      result \u003d tryAllocateOnNode(clusterResource, node, schedulingMode,\n          resourceLimits, schedulerKey, reservedContainer);\n\n      if (AllocationState.ALLOCATED \u003d\u003d result.state\n          || AllocationState.RESERVED \u003d\u003d result.state) {\n        result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n        break;\n      }\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n-      ResourceLimits resourceLimits, Priority priority,\n+      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n         preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n-            priority, reservedContainer);\n+            schedulerKey, reservedContainer);\n \n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, node, priority, reservedContainer);\n+      result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            schedulerKey, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, priority-Priority, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, schedulerKey-SchedulerRequestKey, reservedContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n-      ResourceLimits resourceLimits, Priority priority,\n+      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n         preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n-            priority, reservedContainer);\n+            schedulerKey, reservedContainer);\n \n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, node, priority, reservedContainer);\n+      result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, SchedulerRequestKey schedulerKey,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            schedulerKey, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d doAllocation(result, node, schedulerKey, reservedContainer);\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, Priority priority,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n         preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n             priority, reservedContainer);\n \n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d\n-          doAllocation(result, clusterResource, node, schedulingMode, priority,\n-              reservedContainer);\n+      result \u003d doAllocation(result, node, priority, reservedContainer);\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, Priority priority,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            priority, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d doAllocation(result, node, priority, reservedContainer);\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, Priority priority,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n         preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n             priority, reservedContainer);\n \n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, node, priority, reservedContainer);\n+      result \u003d\n+          doAllocation(result, clusterResource, node, schedulingMode, priority,\n+              reservedContainer);\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, Priority priority,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            priority, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d\n          doAllocation(result, clusterResource, node, schedulingMode, priority,\n              reservedContainer);\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.27,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,15 @@\n   private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, Priority priority,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n         preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n             priority, reservedContainer);\n \n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d\n-          doAllocation(result, clusterResource, node, schedulingMode, priority,\n-              reservedContainer);\n+      result \u003d doAllocation(result, node, priority, reservedContainer);\n     }\n \n     return result;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, Priority priority,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            priority, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d doAllocation(result, node, priority, reservedContainer);\n    }\n\n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "e5003be907acef87c2770e3f2914953f62017b0e": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
      "commitDate": "12/08/15 3:07 PM",
      "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
          "commitDate": "12/08/15 3:07 PM",
          "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/15 2:15 AM",
          "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
          "commitAuthorOld": "rohithsharmaks",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  public ContainerAllocation allocate(Resource clusterResource,\n+  private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, Priority priority,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n-        preAllocation(clusterResource, node, schedulingMode,\n-            resourceLimits, priority, reservedContainer);\n-    \n+        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n+            priority, reservedContainer);\n+\n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, clusterResource, node,\n-          schedulingMode, priority, reservedContainer);\n+      result \u003d\n+          doAllocation(result, clusterResource, node, schedulingMode, priority,\n+              reservedContainer);\n     }\n-    \n+\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, Priority priority,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            priority, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d\n          doAllocation(result, clusterResource, node, schedulingMode, priority,\n              reservedContainer);\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
            "oldMethodName": "allocate",
            "newMethodName": "allocate"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
          "commitDate": "12/08/15 3:07 PM",
          "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/08/15 2:15 AM",
          "commitNameOld": "1c12adb71f32f24ec525313ff8dfcd2b738fc8e2",
          "commitAuthorOld": "rohithsharmaks",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  public ContainerAllocation allocate(Resource clusterResource,\n+  private ContainerAllocation allocate(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits, Priority priority,\n       RMContainer reservedContainer) {\n     ContainerAllocation result \u003d\n-        preAllocation(clusterResource, node, schedulingMode,\n-            resourceLimits, priority, reservedContainer);\n-    \n+        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n+            priority, reservedContainer);\n+\n     if (AllocationState.ALLOCATED \u003d\u003d result.state\n         || AllocationState.RESERVED \u003d\u003d result.state) {\n-      result \u003d doAllocation(result, clusterResource, node,\n-          schedulingMode, priority, reservedContainer);\n+      result \u003d\n+          doAllocation(result, clusterResource, node, schedulingMode, priority,\n+              reservedContainer);\n     }\n-    \n+\n     return result;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, Priority priority,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode, resourceLimits,\n            priority, reservedContainer);\n\n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d\n          doAllocation(result, clusterResource, node, schedulingMode, priority,\n              reservedContainer);\n    }\n\n    return result;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,16 @@\n+  public ContainerAllocation allocate(Resource clusterResource,\n+      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n+      ResourceLimits resourceLimits, Priority priority,\n+      RMContainer reservedContainer) {\n+    ContainerAllocation result \u003d\n+        preAllocation(clusterResource, node, schedulingMode,\n+            resourceLimits, priority, reservedContainer);\n+    \n+    if (AllocationState.ALLOCATED \u003d\u003d result.state\n+        || AllocationState.RESERVED \u003d\u003d result.state) {\n+      result \u003d doAllocation(result, clusterResource, node,\n+          schedulingMode, priority, reservedContainer);\n+    }\n+    \n+    return result;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerAllocation allocate(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits, Priority priority,\n      RMContainer reservedContainer) {\n    ContainerAllocation result \u003d\n        preAllocation(clusterResource, node, schedulingMode,\n            resourceLimits, priority, reservedContainer);\n    \n    if (AllocationState.ALLOCATED \u003d\u003d result.state\n        || AllocationState.RESERVED \u003d\u003d result.state) {\n      result \u003d doAllocation(result, clusterResource, node,\n          schedulingMode, priority, reservedContainer);\n    }\n    \n    return result;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java"
    }
  }
}