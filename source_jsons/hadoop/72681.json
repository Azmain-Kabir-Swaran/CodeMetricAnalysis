{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "createProviders",
  "functionId": "createProviders___conf-Configuration__origUrl-URL__port-int__hostsPart-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 310,
  "functionEndLine": 325,
  "numCommitsSeen": 456,
  "timeTaken": 8813,
  "changeHistory": [
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
    "25f31d9fc47d21ac2f3afd7042e2ced1b849da39",
    "fa6cc43edd3f6e886a40b90b062c9f16189c50d1",
    "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
    "71385f9b70e22618db3f3d2b2c6dca3b1e82c317",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": "Ymultichange(Yparameterchange,Ybodychange)",
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": "Ymultichange(Yparameterchange,Ybodychange)",
    "25f31d9fc47d21ac2f3afd7042e2ced1b849da39": "Ymultichange(Yparameterchange,Ybodychange)",
    "fa6cc43edd3f6e886a40b90b062c9f16189c50d1": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c": "Ymultichange(Yparameterchange,Ybodychange)",
    "71385f9b70e22618db3f3d2b2c6dca3b1e82c317": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf,\n+    private KMSClientProvider[] createProviders(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                       origUrl.getPath(), null, null), conf);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n-      return new LoadBalancingKMSClientProvider(providers, conf);\n+      return providers;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KMSClientProvider[] createProviders(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return providers;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "createProvider",
            "newValue": "createProviders"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf,\n+    private KMSClientProvider[] createProviders(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                       origUrl.getPath(), null, null), conf);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n-      return new LoadBalancingKMSClientProvider(providers, conf);\n+      return providers;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KMSClientProvider[] createProviders(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return providers;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "KeyProvider",
            "newValue": "KMSClientProvider[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
          "commitDate": "12/10/18 9:35 AM",
          "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "10/10/18 9:51 PM",
          "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
          "commitAuthorOld": "Takanobu Asanuma",
          "daysBetweenCommits": 1.49,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf,\n+    private KMSClientProvider[] createProviders(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                       origUrl.getPath(), null, null), conf);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n-      return new LoadBalancingKMSClientProvider(providers, conf);\n+      return providers;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KMSClientProvider[] createProviders(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return providers;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
      "commitDate": "07/05/18 1:32 PM",
      "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
          "commitDate": "07/05/18 1:32 PM",
          "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "04/05/18 1:36 PM",
          "commitNameOld": "4cdbdce752e192b45c2b9756c2d4bd24ceffdabd",
          "commitAuthorOld": "Rushabh Shah",
          "daysBetweenCommits": 3.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf, URL origUrl,\n-        int port, String hostsPart, URI providerUri) throws IOException {\n+    private KeyProvider createProvider(Configuration conf,\n+        URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                      origUrl.getPath(), null, null), conf, providerUri);\n+                      origUrl.getPath(), null, null), conf);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n       return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String, providerUri-URI]",
            "newValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\"\n\nThis reverts commit 583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81.\n\n Conflicts:\n\thadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSTokenRenewer.java\n\thadoop-common-project/hadoop-kms/src/test/java/org/apache/hadoop/crypto/key/kms/server/TestKMS.java\n",
          "commitDate": "07/05/18 1:32 PM",
          "commitName": "a3a1552c33d5650fbd0a702369fccd21b8c9d3e2",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "04/05/18 1:36 PM",
          "commitNameOld": "4cdbdce752e192b45c2b9756c2d4bd24ceffdabd",
          "commitAuthorOld": "Rushabh Shah",
          "daysBetweenCommits": 3.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf, URL origUrl,\n-        int port, String hostsPart, URI providerUri) throws IOException {\n+    private KeyProvider createProvider(Configuration conf,\n+        URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                      origUrl.getPath(), null, null), conf, providerUri);\n+                      origUrl.getPath(), null, null), conf);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n       return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
      "commitDate": "10/04/18 3:38 PM",
      "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
          "commitDate": "10/04/18 3:38 PM",
          "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "03/11/17 4:10 PM",
          "commitNameOld": "59d78a5088700350a5122c3a3ba5e76cd26d6a80",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 157.98,
          "commitsBetweenForRepo": 1162,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf,\n-        URL origUrl, int port, String hostsPart) throws IOException {\n+    private KeyProvider createProvider(Configuration conf, URL origUrl,\n+        int port, String hostsPart, URI providerUri) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                      origUrl.getPath(), null, null), conf);\n+                      origUrl.getPath(), null, null), conf, providerUri);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n       return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf, URL origUrl,\n        int port, String hostsPart, URI providerUri) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf, providerUri);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String]",
            "newValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String, providerUri-URI]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14445. Delegation tokens are not shared between KMS instances. Contributed by Xiao Chen and Rushabh S Shah.\n",
          "commitDate": "10/04/18 3:38 PM",
          "commitName": "583fa6ed48ad3df40bcaa9c591d5ccd07ce3ea81",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "03/11/17 4:10 PM",
          "commitNameOld": "59d78a5088700350a5122c3a3ba5e76cd26d6a80",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 157.98,
          "commitsBetweenForRepo": 1162,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private KeyProvider createProvider(Configuration conf,\n-        URL origUrl, int port, String hostsPart) throws IOException {\n+    private KeyProvider createProvider(Configuration conf, URL origUrl,\n+        int port, String hostsPart, URI providerUri) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n       KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n       for (int i \u003d 0; i \u003c hosts.length; i++) {\n         try {\n           providers[i] \u003d\n               new KMSClientProvider(\n                   new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                      origUrl.getPath(), null, null), conf);\n+                      origUrl.getPath(), null, null), conf, providerUri);\n         } catch (URISyntaxException e) {\n           throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n       }\n       return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf, URL origUrl,\n        int port, String hostsPart, URI providerUri) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf, providerUri);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "25f31d9fc47d21ac2f3afd7042e2ced1b849da39": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
      "commitDate": "05/10/17 7:46 PM",
      "commitName": "25f31d9fc47d21ac2f3afd7042e2ced1b849da39",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
          "commitDate": "05/10/17 7:46 PM",
          "commitName": "25f31d9fc47d21ac2f3afd7042e2ced1b849da39",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "22/09/17 3:45 PM",
          "commitNameOld": "e1b32e0959dea5f5a40055157476f9320519a618",
          "commitAuthorOld": "Anu Engineer",
          "daysBetweenCommits": 13.17,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,16 @@\n-    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+    private KeyProvider createProvider(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n-      if (hosts.length \u003d\u003d 1) {\n-        return new KMSClientProvider(providerUri, conf);\n-      } else {\n-        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n-        for (int i \u003d 0; i \u003c hosts.length; i++) {\n-          try {\n-            providers[i] \u003d\n-                new KMSClientProvider(\n-                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                        origUrl.getPath(), null, null), conf);\n-          } catch (URISyntaxException e) {\n-            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n-          }\n+      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+      for (int i \u003d 0; i \u003c hosts.length; i++) {\n+        try {\n+          providers[i] \u003d\n+              new KMSClientProvider(\n+                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                      origUrl.getPath(), null, null), conf);\n+        } catch (URISyntaxException e) {\n+          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n-        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n+      return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[providerUri-URI, conf-Configuration, origUrl-URL, port-int, hostsPart-String]",
            "newValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
          "commitDate": "05/10/17 7:46 PM",
          "commitName": "25f31d9fc47d21ac2f3afd7042e2ced1b849da39",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "22/09/17 3:45 PM",
          "commitNameOld": "e1b32e0959dea5f5a40055157476f9320519a618",
          "commitAuthorOld": "Anu Engineer",
          "daysBetweenCommits": 13.17,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,16 @@\n-    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+    private KeyProvider createProvider(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n-      if (hosts.length \u003d\u003d 1) {\n-        return new KMSClientProvider(providerUri, conf);\n-      } else {\n-        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n-        for (int i \u003d 0; i \u003c hosts.length; i++) {\n-          try {\n-            providers[i] \u003d\n-                new KMSClientProvider(\n-                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                        origUrl.getPath(), null, null), conf);\n-          } catch (URISyntaxException e) {\n-            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n-          }\n+      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+      for (int i \u003d 0; i \u003c hosts.length; i++) {\n+        try {\n+          providers[i] \u003d\n+              new KMSClientProvider(\n+                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                      origUrl.getPath(), null, null), conf);\n+        } catch (URISyntaxException e) {\n+          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n-        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n+      return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "fa6cc43edd3f6e886a40b90b062c9f16189c50d1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\"\n\nThis reverts commit 0a6d5c0cf1d963da9131aa12326fc576f0e92d2c.\n",
      "commitDate": "12/09/17 7:53 PM",
      "commitName": "fa6cc43edd3f6e886a40b90b062c9f16189c50d1",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\"\n\nThis reverts commit 0a6d5c0cf1d963da9131aa12326fc576f0e92d2c.\n",
          "commitDate": "12/09/17 7:53 PM",
          "commitName": "fa6cc43edd3f6e886a40b90b062c9f16189c50d1",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "22/08/17 2:50 PM",
          "commitNameOld": "c3793102121767c46091805eae65ef3919a5f368",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 21.21,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n-    private KeyProvider createProvider(Configuration conf,\n+    private KeyProvider createProvider(URI providerUri, Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n-      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n-      for (int i \u003d 0; i \u003c hosts.length; i++) {\n-        try {\n-          providers[i] \u003d\n-              new KMSClientProvider(\n-                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                      origUrl.getPath(), null, null), conf);\n-        } catch (URISyntaxException e) {\n-          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n+      if (hosts.length \u003d\u003d 1) {\n+        return new KMSClientProvider(providerUri, conf);\n+      } else {\n+        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+        for (int i \u003d 0; i \u003c hosts.length; i++) {\n+          try {\n+            providers[i] \u003d\n+                new KMSClientProvider(\n+                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                        origUrl.getPath(), null, null), conf);\n+          } catch (URISyntaxException e) {\n+            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n+          }\n         }\n+        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n-      return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(URI providerUri, Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      if (hosts.length \u003d\u003d 1) {\n        return new KMSClientProvider(providerUri, conf);\n      } else {\n        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n        for (int i \u003d 0; i \u003c hosts.length; i++) {\n          try {\n            providers[i] \u003d\n                new KMSClientProvider(\n                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                        origUrl.getPath(), null, null), conf);\n          } catch (URISyntaxException e) {\n            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n          }\n        }\n        return new LoadBalancingKMSClientProvider(providers, conf);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String]",
            "newValue": "[providerUri-URI, conf-Configuration, origUrl-URL, port-int, hostsPart-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\"\n\nThis reverts commit 0a6d5c0cf1d963da9131aa12326fc576f0e92d2c.\n",
          "commitDate": "12/09/17 7:53 PM",
          "commitName": "fa6cc43edd3f6e886a40b90b062c9f16189c50d1",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "22/08/17 2:50 PM",
          "commitNameOld": "c3793102121767c46091805eae65ef3919a5f368",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 21.21,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,20 @@\n-    private KeyProvider createProvider(Configuration conf,\n+    private KeyProvider createProvider(URI providerUri, Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n-      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n-      for (int i \u003d 0; i \u003c hosts.length; i++) {\n-        try {\n-          providers[i] \u003d\n-              new KMSClientProvider(\n-                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                      origUrl.getPath(), null, null), conf);\n-        } catch (URISyntaxException e) {\n-          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n+      if (hosts.length \u003d\u003d 1) {\n+        return new KMSClientProvider(providerUri, conf);\n+      } else {\n+        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+        for (int i \u003d 0; i \u003c hosts.length; i++) {\n+          try {\n+            providers[i] \u003d\n+                new KMSClientProvider(\n+                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                        origUrl.getPath(), null, null), conf);\n+          } catch (URISyntaxException e) {\n+            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n+          }\n         }\n+        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n-      return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(URI providerUri, Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      if (hosts.length \u003d\u003d 1) {\n        return new KMSClientProvider(providerUri, conf);\n      } else {\n        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n        for (int i \u003d 0; i \u003c hosts.length; i++) {\n          try {\n            providers[i] \u003d\n                new KMSClientProvider(\n                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                        origUrl.getPath(), null, null), conf);\n          } catch (URISyntaxException e) {\n            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n          }\n        }\n        return new LoadBalancingKMSClientProvider(providers, conf);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
      "commitDate": "14/07/17 10:22 PM",
      "commitName": "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
          "commitDate": "14/07/17 10:22 PM",
          "commitName": "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/06/17 9:34 PM",
          "commitNameOld": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 36.03,
          "commitsBetweenForRepo": 169,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,16 @@\n-    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+    private KeyProvider createProvider(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n-      if (hosts.length \u003d\u003d 1) {\n-        return new KMSClientProvider(providerUri, conf);\n-      } else {\n-        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n-        for (int i \u003d 0; i \u003c hosts.length; i++) {\n-          try {\n-            providers[i] \u003d\n-                new KMSClientProvider(\n-                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                        origUrl.getPath(), null, null), conf);\n-          } catch (URISyntaxException e) {\n-            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n-          }\n+      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+      for (int i \u003d 0; i \u003c hosts.length; i++) {\n+        try {\n+          providers[i] \u003d\n+              new KMSClientProvider(\n+                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                      origUrl.getPath(), null, null), conf);\n+        } catch (URISyntaxException e) {\n+          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n-        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n+      return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[providerUri-URI, conf-Configuration, origUrl-URL, port-int, hostsPart-String]",
            "newValue": "[conf-Configuration, origUrl-URL, port-int, hostsPart-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14521. KMS client needs retry logic. Contributed by Rushabh S Shah.\n",
          "commitDate": "14/07/17 10:22 PM",
          "commitName": "0a6d5c0cf1d963da9131aa12326fc576f0e92d2c",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/06/17 9:34 PM",
          "commitNameOld": "0202480742b8539aa7aa1e94dc9cab75d863cc4e",
          "commitAuthorOld": "Xiao Chen",
          "daysBetweenCommits": 36.03,
          "commitsBetweenForRepo": 169,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,16 @@\n-    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+    private KeyProvider createProvider(Configuration conf,\n         URL origUrl, int port, String hostsPart) throws IOException {\n       String[] hosts \u003d hostsPart.split(\";\");\n-      if (hosts.length \u003d\u003d 1) {\n-        return new KMSClientProvider(providerUri, conf);\n-      } else {\n-        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n-        for (int i \u003d 0; i \u003c hosts.length; i++) {\n-          try {\n-            providers[i] \u003d\n-                new KMSClientProvider(\n-                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n-                        origUrl.getPath(), null, null), conf);\n-          } catch (URISyntaxException e) {\n-            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n-          }\n+      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+      for (int i \u003d 0; i \u003c hosts.length; i++) {\n+        try {\n+          providers[i] \u003d\n+              new KMSClientProvider(\n+                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                      origUrl.getPath(), null, null), conf);\n+        } catch (URISyntaxException e) {\n+          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n         }\n-        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n+      return new LoadBalancingKMSClientProvider(providers, conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n      for (int i \u003d 0; i \u003c hosts.length; i++) {\n        try {\n          providers[i] \u003d\n              new KMSClientProvider(\n                  new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                      origUrl.getPath(), null, null), conf);\n        } catch (URISyntaxException e) {\n          throw new IOException(\"Could not instantiate KMSProvider.\", e);\n        }\n      }\n      return new LoadBalancingKMSClientProvider(providers, conf);\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "71385f9b70e22618db3f3d2b2c6dca3b1e82c317": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-11620. Add support for load balancing across a group of KMS for HA. Contributed by Arun Suresh.\n",
      "commitDate": "25/02/15 9:16 PM",
      "commitName": "71385f9b70e22618db3f3d2b2c6dca3b1e82c317",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11620. Add support for load balancing across a group of KMS for HA. Contributed by Arun Suresh.\n",
          "commitDate": "25/02/15 9:16 PM",
          "commitName": "71385f9b70e22618db3f3d2b2c6dca3b1e82c317",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "23/01/15 12:11 PM",
          "commitNameOld": "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 33.38,
          "commitsBetweenForRepo": 334,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,20 @@\n-    public KeyProvider createProvider(URI providerName, Configuration conf)\n-        throws IOException {\n-      if (SCHEME_NAME.equals(providerName.getScheme())) {\n-        return new KMSClientProvider(providerName, conf);\n+    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+        URL origUrl, int port, String hostsPart) throws IOException {\n+      String[] hosts \u003d hostsPart.split(\";\");\n+      if (hosts.length \u003d\u003d 1) {\n+        return new KMSClientProvider(providerUri, conf);\n+      } else {\n+        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+        for (int i \u003d 0; i \u003c hosts.length; i++) {\n+          try {\n+            providers[i] \u003d\n+                new KMSClientProvider(\n+                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                        origUrl.getPath(), null, null), conf);\n+          } catch (URISyntaxException e) {\n+            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n+          }\n+        }\n+        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n-      return null;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(URI providerUri, Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      if (hosts.length \u003d\u003d 1) {\n        return new KMSClientProvider(providerUri, conf);\n      } else {\n        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n        for (int i \u003d 0; i \u003c hosts.length; i++) {\n          try {\n            providers[i] \u003d\n                new KMSClientProvider(\n                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                        origUrl.getPath(), null, null), conf);\n          } catch (URISyntaxException e) {\n            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n          }\n        }\n        return new LoadBalancingKMSClientProvider(providers, conf);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[providerName-URI, conf-Configuration]",
            "newValue": "[providerUri-URI, conf-Configuration, origUrl-URL, port-int, hostsPart-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-11620. Add support for load balancing across a group of KMS for HA. Contributed by Arun Suresh.\n",
          "commitDate": "25/02/15 9:16 PM",
          "commitName": "71385f9b70e22618db3f3d2b2c6dca3b1e82c317",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "23/01/15 12:11 PM",
          "commitNameOld": "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 33.38,
          "commitsBetweenForRepo": 334,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,20 @@\n-    public KeyProvider createProvider(URI providerName, Configuration conf)\n-        throws IOException {\n-      if (SCHEME_NAME.equals(providerName.getScheme())) {\n-        return new KMSClientProvider(providerName, conf);\n+    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+        URL origUrl, int port, String hostsPart) throws IOException {\n+      String[] hosts \u003d hostsPart.split(\";\");\n+      if (hosts.length \u003d\u003d 1) {\n+        return new KMSClientProvider(providerUri, conf);\n+      } else {\n+        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+        for (int i \u003d 0; i \u003c hosts.length; i++) {\n+          try {\n+            providers[i] \u003d\n+                new KMSClientProvider(\n+                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                        origUrl.getPath(), null, null), conf);\n+          } catch (URISyntaxException e) {\n+            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n+          }\n+        }\n+        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n-      return null;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(URI providerUri, Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      if (hosts.length \u003d\u003d 1) {\n        return new KMSClientProvider(providerUri, conf);\n      } else {\n        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n        for (int i \u003d 0; i \u003c hosts.length; i++) {\n          try {\n            providers[i] \u003d\n                new KMSClientProvider(\n                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                        origUrl.getPath(), null, null), conf);\n          } catch (URISyntaxException e) {\n            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n          }\n        }\n        return new LoadBalancingKMSClientProvider(providers, conf);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11620. Add support for load balancing across a group of KMS for HA. Contributed by Arun Suresh.\n",
          "commitDate": "25/02/15 9:16 PM",
          "commitName": "71385f9b70e22618db3f3d2b2c6dca3b1e82c317",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "23/01/15 12:11 PM",
          "commitNameOld": "4b00935643f6c3656ccbd7eeb54884738bc12c2e",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 33.38,
          "commitsBetweenForRepo": 334,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,20 @@\n-    public KeyProvider createProvider(URI providerName, Configuration conf)\n-        throws IOException {\n-      if (SCHEME_NAME.equals(providerName.getScheme())) {\n-        return new KMSClientProvider(providerName, conf);\n+    private KeyProvider createProvider(URI providerUri, Configuration conf,\n+        URL origUrl, int port, String hostsPart) throws IOException {\n+      String[] hosts \u003d hostsPart.split(\";\");\n+      if (hosts.length \u003d\u003d 1) {\n+        return new KMSClientProvider(providerUri, conf);\n+      } else {\n+        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n+        for (int i \u003d 0; i \u003c hosts.length; i++) {\n+          try {\n+            providers[i] \u003d\n+                new KMSClientProvider(\n+                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n+                        origUrl.getPath(), null, null), conf);\n+          } catch (URISyntaxException e) {\n+            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n+          }\n+        }\n+        return new LoadBalancingKMSClientProvider(providers, conf);\n       }\n-      return null;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private KeyProvider createProvider(URI providerUri, Configuration conf,\n        URL origUrl, int port, String hostsPart) throws IOException {\n      String[] hosts \u003d hostsPart.split(\";\");\n      if (hosts.length \u003d\u003d 1) {\n        return new KMSClientProvider(providerUri, conf);\n      } else {\n        KMSClientProvider[] providers \u003d new KMSClientProvider[hosts.length];\n        for (int i \u003d 0; i \u003c hosts.length; i++) {\n          try {\n            providers[i] \u003d\n                new KMSClientProvider(\n                    new URI(\"kms\", origUrl.getProtocol(), hosts[i], port,\n                        origUrl.getPath(), null, null), conf);\n          } catch (URISyntaxException e) {\n            throw new IOException(\"Could not instantiate KMSProvider..\", e);\n          }\n        }\n        return new LoadBalancingKMSClientProvider(providers, conf);\n      }\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,7 @@\n+    public KeyProvider createProvider(URI providerName, Configuration conf)\n+        throws IOException {\n+      if (SCHEME_NAME.equals(providerName.getScheme())) {\n+        return new KMSClientProvider(providerName, conf);\n+      }\n+      return null;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public KeyProvider createProvider(URI providerName, Configuration conf)\n        throws IOException {\n      if (SCHEME_NAME.equals(providerName.getScheme())) {\n        return new KMSClientProvider(providerName, conf);\n      }\n      return null;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}