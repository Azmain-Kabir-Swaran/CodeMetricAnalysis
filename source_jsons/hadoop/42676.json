{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppAttemptImpl.java",
  "functionName": "pullJustFinishedContainers",
  "functionId": "pullJustFinishedContainers",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
  "functionStartLine": 848,
  "functionEndLine": 891,
  "numCommitsSeen": 176,
  "timeTaken": 10061,
  "changeHistory": [
    "e0b570dffb47ede298e0378a63350b699128d96e",
    "26b5e6116f392b6be91dca57968259f87554ce33",
    "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "e0b570dffb47ede298e0378a63350b699128d96e": "Ybodychange",
    "26b5e6116f392b6be91dca57968259f87554ce33": "Ybodychange",
    "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76": "Ybodychange",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e0b570dffb47ede298e0378a63350b699128d96e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5483. Optimize RMAppAttempt#pullJustFinishedContainers. Contributed by sandflee\n",
      "commitDate": "10/08/16 11:04 AM",
      "commitName": "e0b570dffb47ede298e0378a63350b699128d96e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "28/06/16 9:38 PM",
      "commitNameOld": "26b5e6116f392b6be91dca57968259f87554ce33",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 42.56,
      "commitsBetweenForRepo": 385,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n     this.writeLock.lock();\n \n     try {\n-      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n+      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003c\u003e();\n \n       // A new allocate means the AM received the previously sent\n       // finishedContainers. We can ack this to NM now\n       sendFinishedContainersToNM();\n \n       // Mark every containerStatus as being sent to AM though we may return\n       // only the ones that belong to the current attempt\n-      boolean keepContainersAcressAttempts \u003d this.submissionContext\n+      boolean keepContainersAcrossAppAttempts \u003d this.submissionContext\n           .getKeepContainersAcrossApplicationAttempts();\n-      for (NodeId nodeId:justFinishedContainers.keySet()) {\n+      for (Map.Entry\u003cNodeId, List\u003cContainerStatus\u003e\u003e entry :\n+          justFinishedContainers.entrySet()) {\n+        NodeId nodeId \u003d entry.getKey();\n+        List\u003cContainerStatus\u003e finishedContainers \u003d entry.getValue();\n+        if (finishedContainers.isEmpty()) {\n+          continue;\n+        }\n \n-        // Clear and get current values\n-        List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n-            (nodeId, new ArrayList\u003cContainerStatus\u003e());\n-\n-        if (keepContainersAcressAttempts) {\n+        if (keepContainersAcrossAppAttempts) {\n           returnList.addAll(finishedContainers);\n         } else {\n           // Filter out containers from previous attempt\n           for (ContainerStatus containerStatus: finishedContainers) {\n             if (containerStatus.getContainerId().getApplicationAttemptId()\n                 .equals(this.getAppAttemptId())) {\n               returnList.add(containerStatus);\n             }\n           }\n         }\n \n-        if (!finishedContainers.isEmpty()) {\n-          finishedContainersSentToAM.putIfAbsent(nodeId,\n-              new ArrayList\u003cContainerStatus\u003e());\n-          finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n-        }\n+        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\u003c\u003e());\n+        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n       }\n+      justFinishedContainers.clear();\n \n       return returnList;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003c\u003e();\n\n      // A new allocate means the AM received the previously sent\n      // finishedContainers. We can ack this to NM now\n      sendFinishedContainersToNM();\n\n      // Mark every containerStatus as being sent to AM though we may return\n      // only the ones that belong to the current attempt\n      boolean keepContainersAcrossAppAttempts \u003d this.submissionContext\n          .getKeepContainersAcrossApplicationAttempts();\n      for (Map.Entry\u003cNodeId, List\u003cContainerStatus\u003e\u003e entry :\n          justFinishedContainers.entrySet()) {\n        NodeId nodeId \u003d entry.getKey();\n        List\u003cContainerStatus\u003e finishedContainers \u003d entry.getValue();\n        if (finishedContainers.isEmpty()) {\n          continue;\n        }\n\n        if (keepContainersAcrossAppAttempts) {\n          returnList.addAll(finishedContainers);\n        } else {\n          // Filter out containers from previous attempt\n          for (ContainerStatus containerStatus: finishedContainers) {\n            if (containerStatus.getContainerId().getApplicationAttemptId()\n                .equals(this.getAppAttemptId())) {\n              returnList.add(containerStatus);\n            }\n          }\n        }\n\n        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\u003c\u003e());\n        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n      }\n      justFinishedContainers.clear();\n\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "26b5e6116f392b6be91dca57968259f87554ce33": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5262. Optimize sending RMNodeFinishedContainersPulledByAMEvent for every AM heartbeat.\n",
      "commitDate": "28/06/16 9:38 PM",
      "commitName": "26b5e6116f392b6be91dca57968259f87554ce33",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 21.27,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n     this.writeLock.lock();\n \n     try {\n       List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n \n       // A new allocate means the AM received the previously sent\n       // finishedContainers. We can ack this to NM now\n       sendFinishedContainersToNM();\n \n       // Mark every containerStatus as being sent to AM though we may return\n       // only the ones that belong to the current attempt\n       boolean keepContainersAcressAttempts \u003d this.submissionContext\n           .getKeepContainersAcrossApplicationAttempts();\n       for (NodeId nodeId:justFinishedContainers.keySet()) {\n \n         // Clear and get current values\n         List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n             (nodeId, new ArrayList\u003cContainerStatus\u003e());\n \n         if (keepContainersAcressAttempts) {\n           returnList.addAll(finishedContainers);\n         } else {\n           // Filter out containers from previous attempt\n           for (ContainerStatus containerStatus: finishedContainers) {\n             if (containerStatus.getContainerId().getApplicationAttemptId()\n                 .equals(this.getAppAttemptId())) {\n               returnList.add(containerStatus);\n             }\n           }\n         }\n \n-        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\n-              \u003cContainerStatus\u003e());\n-        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n+        if (!finishedContainers.isEmpty()) {\n+          finishedContainersSentToAM.putIfAbsent(nodeId,\n+              new ArrayList\u003cContainerStatus\u003e());\n+          finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n+        }\n       }\n \n       return returnList;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n\n      // A new allocate means the AM received the previously sent\n      // finishedContainers. We can ack this to NM now\n      sendFinishedContainersToNM();\n\n      // Mark every containerStatus as being sent to AM though we may return\n      // only the ones that belong to the current attempt\n      boolean keepContainersAcressAttempts \u003d this.submissionContext\n          .getKeepContainersAcrossApplicationAttempts();\n      for (NodeId nodeId:justFinishedContainers.keySet()) {\n\n        // Clear and get current values\n        List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n            (nodeId, new ArrayList\u003cContainerStatus\u003e());\n\n        if (keepContainersAcressAttempts) {\n          returnList.addAll(finishedContainers);\n        } else {\n          // Filter out containers from previous attempt\n          for (ContainerStatus containerStatus: finishedContainers) {\n            if (containerStatus.getContainerId().getApplicationAttemptId()\n                .equals(this.getAppAttemptId())) {\n              returnList.add(containerStatus);\n            }\n          }\n        }\n\n        if (!finishedContainers.isEmpty()) {\n          finishedContainersSentToAM.putIfAbsent(nodeId,\n              new ArrayList\u003cContainerStatus\u003e());\n          finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n        }\n      }\n\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2630. Prevented previous AM container status from being acquired by the current restarted AM. Contributed by Jian He.\n",
      "commitDate": "01/10/14 3:38 PM",
      "commitName": "52bbe0f11bc8e97df78a1ab9b63f4eff65fd7a76",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "22/09/14 10:30 AM",
      "commitNameOld": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 9.21,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,42 @@\n   public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n     this.writeLock.lock();\n \n     try {\n       List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n \n       // A new allocate means the AM received the previously sent\n       // finishedContainers. We can ack this to NM now\n-      for (NodeId nodeId:finishedContainersSentToAM.keySet()) {\n-\n-        // Clear and get current values\n-        List\u003cContainerStatus\u003e currentSentContainers \u003d\n-            finishedContainersSentToAM\n-            .put(nodeId, new ArrayList\u003cContainerStatus\u003e());\n-        List\u003cContainerId\u003e containerIdList \u003d new ArrayList\u003cContainerId\u003e\n-            (currentSentContainers.size());\n-        for (ContainerStatus containerStatus:currentSentContainers) {\n-          containerIdList.add(containerStatus.getContainerId());\n-        }\n-        eventHandler.handle(new RMNodeFinishedContainersPulledByAMEvent(\n-            nodeId, containerIdList));\n-      }\n+      sendFinishedContainersToNM();\n \n       // Mark every containerStatus as being sent to AM though we may return\n       // only the ones that belong to the current attempt\n       boolean keepContainersAcressAttempts \u003d this.submissionContext\n           .getKeepContainersAcrossApplicationAttempts();\n       for (NodeId nodeId:justFinishedContainers.keySet()) {\n \n         // Clear and get current values\n         List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n             (nodeId, new ArrayList\u003cContainerStatus\u003e());\n \n         if (keepContainersAcressAttempts) {\n           returnList.addAll(finishedContainers);\n         } else {\n           // Filter out containers from previous attempt\n           for (ContainerStatus containerStatus: finishedContainers) {\n             if (containerStatus.getContainerId().getApplicationAttemptId()\n                 .equals(this.getAppAttemptId())) {\n               returnList.add(containerStatus);\n             }\n           }\n         }\n \n         finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\n               \u003cContainerStatus\u003e());\n         finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n       }\n \n       return returnList;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n\n      // A new allocate means the AM received the previously sent\n      // finishedContainers. We can ack this to NM now\n      sendFinishedContainersToNM();\n\n      // Mark every containerStatus as being sent to AM though we may return\n      // only the ones that belong to the current attempt\n      boolean keepContainersAcressAttempts \u003d this.submissionContext\n          .getKeepContainersAcrossApplicationAttempts();\n      for (NodeId nodeId:justFinishedContainers.keySet()) {\n\n        // Clear and get current values\n        List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n            (nodeId, new ArrayList\u003cContainerStatus\u003e());\n\n        if (keepContainersAcressAttempts) {\n          returnList.addAll(finishedContainers);\n        } else {\n          // Filter out containers from previous attempt\n          for (ContainerStatus containerStatus: finishedContainers) {\n            if (containerStatus.getContainerId().getApplicationAttemptId()\n                .equals(this.getAppAttemptId())) {\n              returnList.add(containerStatus);\n            }\n          }\n        }\n\n        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\n              \u003cContainerStatus\u003e());\n        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n      }\n\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
      "commitDate": "22/09/14 10:30 AM",
      "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/09/14 9:44 PM",
      "commitNameOld": "ee21b13cbd4654d7181306404174329f12193613",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.53,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,55 @@\n   public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n     this.writeLock.lock();\n \n     try {\n-      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e(\n-          this.justFinishedContainers.size());\n-      returnList.addAll(this.justFinishedContainers);\n-      this.justFinishedContainers.clear();\n+      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n+\n+      // A new allocate means the AM received the previously sent\n+      // finishedContainers. We can ack this to NM now\n+      for (NodeId nodeId:finishedContainersSentToAM.keySet()) {\n+\n+        // Clear and get current values\n+        List\u003cContainerStatus\u003e currentSentContainers \u003d\n+            finishedContainersSentToAM\n+            .put(nodeId, new ArrayList\u003cContainerStatus\u003e());\n+        List\u003cContainerId\u003e containerIdList \u003d new ArrayList\u003cContainerId\u003e\n+            (currentSentContainers.size());\n+        for (ContainerStatus containerStatus:currentSentContainers) {\n+          containerIdList.add(containerStatus.getContainerId());\n+        }\n+        eventHandler.handle(new RMNodeFinishedContainersPulledByAMEvent(\n+            nodeId, containerIdList));\n+      }\n+\n+      // Mark every containerStatus as being sent to AM though we may return\n+      // only the ones that belong to the current attempt\n+      boolean keepContainersAcressAttempts \u003d this.submissionContext\n+          .getKeepContainersAcrossApplicationAttempts();\n+      for (NodeId nodeId:justFinishedContainers.keySet()) {\n+\n+        // Clear and get current values\n+        List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n+            (nodeId, new ArrayList\u003cContainerStatus\u003e());\n+\n+        if (keepContainersAcressAttempts) {\n+          returnList.addAll(finishedContainers);\n+        } else {\n+          // Filter out containers from previous attempt\n+          for (ContainerStatus containerStatus: finishedContainers) {\n+            if (containerStatus.getContainerId().getApplicationAttemptId()\n+                .equals(this.getAppAttemptId())) {\n+              returnList.add(containerStatus);\n+            }\n+          }\n+        }\n+\n+        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\n+              \u003cContainerStatus\u003e());\n+        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n+      }\n+\n       return returnList;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e();\n\n      // A new allocate means the AM received the previously sent\n      // finishedContainers. We can ack this to NM now\n      for (NodeId nodeId:finishedContainersSentToAM.keySet()) {\n\n        // Clear and get current values\n        List\u003cContainerStatus\u003e currentSentContainers \u003d\n            finishedContainersSentToAM\n            .put(nodeId, new ArrayList\u003cContainerStatus\u003e());\n        List\u003cContainerId\u003e containerIdList \u003d new ArrayList\u003cContainerId\u003e\n            (currentSentContainers.size());\n        for (ContainerStatus containerStatus:currentSentContainers) {\n          containerIdList.add(containerStatus.getContainerId());\n        }\n        eventHandler.handle(new RMNodeFinishedContainersPulledByAMEvent(\n            nodeId, containerIdList));\n      }\n\n      // Mark every containerStatus as being sent to AM though we may return\n      // only the ones that belong to the current attempt\n      boolean keepContainersAcressAttempts \u003d this.submissionContext\n          .getKeepContainersAcrossApplicationAttempts();\n      for (NodeId nodeId:justFinishedContainers.keySet()) {\n\n        // Clear and get current values\n        List\u003cContainerStatus\u003e finishedContainers \u003d justFinishedContainers.put\n            (nodeId, new ArrayList\u003cContainerStatus\u003e());\n\n        if (keepContainersAcressAttempts) {\n          returnList.addAll(finishedContainers);\n        } else {\n          // Filter out containers from previous attempt\n          for (ContainerStatus containerStatus: finishedContainers) {\n            if (containerStatus.getContainerId().getApplicationAttemptId()\n                .equals(this.getAppAttemptId())) {\n              returnList.add(containerStatus);\n            }\n          }\n        }\n\n        finishedContainersSentToAM.putIfAbsent(nodeId, new ArrayList\n              \u003cContainerStatus\u003e());\n        finishedContainersSentToAM.get(nodeId).addAll(finishedContainers);\n      }\n\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e(\n          this.justFinishedContainers.size());\n      returnList.addAll(this.justFinishedContainers);\n      this.justFinishedContainers.clear();\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
      }
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "25/08/11 10:16 AM",
          "commitNameOld": "7c85f33ce1b209e1e5bb17b9dd2ad270ca451d60",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 17.01,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  public List\u003cContainer\u003e pullJustFinishedContainers() {\n+  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n     this.writeLock.lock();\n \n     try {\n-      List\u003cContainer\u003e returnList \u003d new ArrayList\u003cContainer\u003e(\n+      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e(\n           this.justFinishedContainers.size());\n       returnList.addAll(this.justFinishedContainers);\n       this.justFinishedContainers.clear();\n       return returnList;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e(\n          this.justFinishedContainers.size());\n      returnList.addAll(this.justFinishedContainers);\n      this.justFinishedContainers.clear();\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {
            "oldValue": "List\u003cContainer\u003e",
            "newValue": "List\u003cContainerStatus\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "25/08/11 10:16 AM",
          "commitNameOld": "7c85f33ce1b209e1e5bb17b9dd2ad270ca451d60",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 17.01,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  public List\u003cContainer\u003e pullJustFinishedContainers() {\n+  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n     this.writeLock.lock();\n \n     try {\n-      List\u003cContainer\u003e returnList \u003d new ArrayList\u003cContainer\u003e(\n+      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e(\n           this.justFinishedContainers.size());\n       returnList.addAll(this.justFinishedContainers);\n       this.justFinishedContainers.clear();\n       return returnList;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cContainerStatus\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainerStatus\u003e returnList \u003d new ArrayList\u003cContainerStatus\u003e(\n          this.justFinishedContainers.size());\n      returnList.addAll(this.justFinishedContainers);\n      this.justFinishedContainers.clear();\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cContainer\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainer\u003e returnList \u003d new ArrayList\u003cContainer\u003e(\n          this.justFinishedContainers.size());\n      returnList.addAll(this.justFinishedContainers);\n      this.justFinishedContainers.clear();\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,13 @@\n+  public List\u003cContainer\u003e pullJustFinishedContainers() {\n+    this.writeLock.lock();\n+\n+    try {\n+      List\u003cContainer\u003e returnList \u003d new ArrayList\u003cContainer\u003e(\n+          this.justFinishedContainers.size());\n+      returnList.addAll(this.justFinishedContainers);\n+      this.justFinishedContainers.clear();\n+      return returnList;\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cContainer\u003e pullJustFinishedContainers() {\n    this.writeLock.lock();\n\n    try {\n      List\u003cContainer\u003e returnList \u003d new ArrayList\u003cContainer\u003e(\n          this.justFinishedContainers.size());\n      returnList.addAll(this.justFinishedContainers);\n      this.justFinishedContainers.clear();\n      return returnList;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
    }
  }
}