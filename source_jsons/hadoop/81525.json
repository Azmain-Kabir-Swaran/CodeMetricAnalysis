{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TraceAdmin.java",
  "functionName": "addSpanReceiver",
  "functionId": "addSpanReceiver___args-List__String__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java",
  "functionStartLine": 92,
  "functionEndLine": 133,
  "numCommitsSeen": 5,
  "timeTaken": 1135,
  "changeHistory": [
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "55302ccfba199ddf070119be30df06afd2511e05"
  ],
  "changeHistoryShort": {
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "55302ccfba199ddf070119be30df06afd2511e05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/14 10:30 AM",
      "commitNameOld": "55302ccfba199ddf070119be30df06afd2511e05",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 76.3,
      "commitsBetweenForRepo": 661,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n   private int addSpanReceiver(List\u003cString\u003e args) throws IOException {\n     String className \u003d StringUtils.popOptionWithArgument(\"-class\", args);\n     if (className \u003d\u003d null) {\n       System.err.println(\"You must specify the classname with -class.\");\n       return 1;\n     }\n     ByteArrayOutputStream configStream \u003d new ByteArrayOutputStream();\n-    PrintStream configsOut \u003d new PrintStream(configStream);\n+    PrintStream configsOut \u003d new PrintStream(configStream, false, \"UTF-8\");\n     SpanReceiverInfoBuilder factory \u003d new SpanReceiverInfoBuilder(className);\n     String prefix \u003d \"\";\n     for (int i \u003d 0; i \u003c args.size(); ++i) {\n       String str \u003d args.get(i);\n       if (!str.startsWith(CONFIG_PREFIX)) {\n         System.err.println(\"Can\u0027t understand argument: \" + str);\n         return 1;\n       }\n       str \u003d str.substring(CONFIG_PREFIX.length());\n       int equalsIndex \u003d str.indexOf(\"\u003d\");\n       if (equalsIndex \u003c 0) {\n         System.err.println(\"Can\u0027t parse configuration argument \" + str);\n         System.err.println(\"Arguments must be in the form key\u003dvalue\");\n         return 1;\n       }\n       String key \u003d str.substring(0, equalsIndex);\n       String value \u003d str.substring(equalsIndex + 1);\n       factory.addConfigurationPair(key, value);\n       configsOut.print(prefix + key + \" \u003d \" + value);\n       prefix \u003d \", \";\n     }\n+\n+    String configStreamStr \u003d configStream.toString(\"UTF-8\");\n     try {\n       long id \u003d remote.addSpanReceiver(factory.build());\n       System.out.println(\"Added trace span receiver \" + id +\n-          \" with configuration \" + configStream.toString());\n+          \" with configuration \" + configStreamStr);\n     } catch (IOException e) {\n       System.out.println(\"addSpanReceiver error with configuration \" +\n-          configStream.toString());\n+                             configStreamStr);\n       throw e;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int addSpanReceiver(List\u003cString\u003e args) throws IOException {\n    String className \u003d StringUtils.popOptionWithArgument(\"-class\", args);\n    if (className \u003d\u003d null) {\n      System.err.println(\"You must specify the classname with -class.\");\n      return 1;\n    }\n    ByteArrayOutputStream configStream \u003d new ByteArrayOutputStream();\n    PrintStream configsOut \u003d new PrintStream(configStream, false, \"UTF-8\");\n    SpanReceiverInfoBuilder factory \u003d new SpanReceiverInfoBuilder(className);\n    String prefix \u003d \"\";\n    for (int i \u003d 0; i \u003c args.size(); ++i) {\n      String str \u003d args.get(i);\n      if (!str.startsWith(CONFIG_PREFIX)) {\n        System.err.println(\"Can\u0027t understand argument: \" + str);\n        return 1;\n      }\n      str \u003d str.substring(CONFIG_PREFIX.length());\n      int equalsIndex \u003d str.indexOf(\"\u003d\");\n      if (equalsIndex \u003c 0) {\n        System.err.println(\"Can\u0027t parse configuration argument \" + str);\n        System.err.println(\"Arguments must be in the form key\u003dvalue\");\n        return 1;\n      }\n      String key \u003d str.substring(0, equalsIndex);\n      String value \u003d str.substring(equalsIndex + 1);\n      factory.addConfigurationPair(key, value);\n      configsOut.print(prefix + key + \" \u003d \" + value);\n      prefix \u003d \", \";\n    }\n\n    String configStreamStr \u003d configStream.toString(\"UTF-8\");\n    try {\n      long id \u003d remote.addSpanReceiver(factory.build());\n      System.out.println(\"Added trace span receiver \" + id +\n          \" with configuration \" + configStreamStr);\n    } catch (IOException e) {\n      System.out.println(\"addSpanReceiver error with configuration \" +\n                             configStreamStr);\n      throw e;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java",
      "extendedDetails": {}
    },
    "55302ccfba199ddf070119be30df06afd2511e05": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6956. Allow dynamically changing the tracing level in Hadoop servers (cmccabe)\n",
      "commitDate": "26/09/14 10:30 AM",
      "commitName": "55302ccfba199ddf070119be30df06afd2511e05",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,40 @@\n+  private int addSpanReceiver(List\u003cString\u003e args) throws IOException {\n+    String className \u003d StringUtils.popOptionWithArgument(\"-class\", args);\n+    if (className \u003d\u003d null) {\n+      System.err.println(\"You must specify the classname with -class.\");\n+      return 1;\n+    }\n+    ByteArrayOutputStream configStream \u003d new ByteArrayOutputStream();\n+    PrintStream configsOut \u003d new PrintStream(configStream);\n+    SpanReceiverInfoBuilder factory \u003d new SpanReceiverInfoBuilder(className);\n+    String prefix \u003d \"\";\n+    for (int i \u003d 0; i \u003c args.size(); ++i) {\n+      String str \u003d args.get(i);\n+      if (!str.startsWith(CONFIG_PREFIX)) {\n+        System.err.println(\"Can\u0027t understand argument: \" + str);\n+        return 1;\n+      }\n+      str \u003d str.substring(CONFIG_PREFIX.length());\n+      int equalsIndex \u003d str.indexOf(\"\u003d\");\n+      if (equalsIndex \u003c 0) {\n+        System.err.println(\"Can\u0027t parse configuration argument \" + str);\n+        System.err.println(\"Arguments must be in the form key\u003dvalue\");\n+        return 1;\n+      }\n+      String key \u003d str.substring(0, equalsIndex);\n+      String value \u003d str.substring(equalsIndex + 1);\n+      factory.addConfigurationPair(key, value);\n+      configsOut.print(prefix + key + \" \u003d \" + value);\n+      prefix \u003d \", \";\n+    }\n+    try {\n+      long id \u003d remote.addSpanReceiver(factory.build());\n+      System.out.println(\"Added trace span receiver \" + id +\n+          \" with configuration \" + configStream.toString());\n+    } catch (IOException e) {\n+      System.out.println(\"addSpanReceiver error with configuration \" +\n+          configStream.toString());\n+      throw e;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int addSpanReceiver(List\u003cString\u003e args) throws IOException {\n    String className \u003d StringUtils.popOptionWithArgument(\"-class\", args);\n    if (className \u003d\u003d null) {\n      System.err.println(\"You must specify the classname with -class.\");\n      return 1;\n    }\n    ByteArrayOutputStream configStream \u003d new ByteArrayOutputStream();\n    PrintStream configsOut \u003d new PrintStream(configStream);\n    SpanReceiverInfoBuilder factory \u003d new SpanReceiverInfoBuilder(className);\n    String prefix \u003d \"\";\n    for (int i \u003d 0; i \u003c args.size(); ++i) {\n      String str \u003d args.get(i);\n      if (!str.startsWith(CONFIG_PREFIX)) {\n        System.err.println(\"Can\u0027t understand argument: \" + str);\n        return 1;\n      }\n      str \u003d str.substring(CONFIG_PREFIX.length());\n      int equalsIndex \u003d str.indexOf(\"\u003d\");\n      if (equalsIndex \u003c 0) {\n        System.err.println(\"Can\u0027t parse configuration argument \" + str);\n        System.err.println(\"Arguments must be in the form key\u003dvalue\");\n        return 1;\n      }\n      String key \u003d str.substring(0, equalsIndex);\n      String value \u003d str.substring(equalsIndex + 1);\n      factory.addConfigurationPair(key, value);\n      configsOut.print(prefix + key + \" \u003d \" + value);\n      prefix \u003d \", \";\n    }\n    try {\n      long id \u003d remote.addSpanReceiver(factory.build());\n      System.out.println(\"Added trace span receiver \" + id +\n          \" with configuration \" + configStream.toString());\n    } catch (IOException e) {\n      System.out.println(\"addSpanReceiver error with configuration \" +\n          configStream.toString());\n      throw e;\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/tracing/TraceAdmin.java"
    }
  }
}