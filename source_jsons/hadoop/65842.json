{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStore.java",
  "functionName": "updateParameters",
  "functionId": "updateParameters___parameters-Map__String,String__",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
  "functionStartLine": 1918,
  "functionEndLine": 1949,
  "numCommitsSeen": 42,
  "timeTaken": 3066,
  "changeHistory": [
    "4a700c20d553dc5336ee881719bcf189fc46bfbf",
    "cf4efcab3b66271745b7be5db30fdc5ae656d06c",
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f"
  ],
  "changeHistoryShort": {
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": "Ybodychange",
    "cf4efcab3b66271745b7be5db30fdc5ae656d06c": "Ybodychange",
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35": "Ybodychange",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
      "commitDate": "11/10/19 3:08 AM",
      "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "05/09/19 6:25 AM",
      "commitNameOld": "511df1e837b19ccb9271520589452d82d50ac69d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 35.86,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void updateParameters(Map\u003cString, String\u003e parameters)\n       throws IOException {\n     Preconditions.checkNotNull(table, \"Not initialized\");\n     TableDescription desc \u003d getTableDescription(true);\n     ProvisionedThroughputDescription current\n         \u003d desc.getProvisionedThroughput();\n \n     long currentRead \u003d current.getReadCapacityUnits();\n     long newRead \u003d getLongParam(parameters,\n         S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n         currentRead);\n     long currentWrite \u003d current.getWriteCapacityUnits();\n     long newWrite \u003d getLongParam(parameters,\n             S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n             currentWrite);\n \n     if (currentRead \u003d\u003d 0 || currentWrite \u003d\u003d 0) {\n       // table is pay on demand\n       throw new IOException(E_ON_DEMAND_NO_SET_CAPACITY);\n     }\n \n     if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n       LOG.info(\"Current table capacity is read: {}, write: {}\",\n           currentRead, currentWrite);\n       LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n           newRead, newWrite);\n-      provisionTableBlocking(newRead, newWrite);\n+      tableHandler.provisionTableBlocking(newRead, newWrite);\n     } else {\n       LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n           newRead, newWrite);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateParameters(Map\u003cString, String\u003e parameters)\n      throws IOException {\n    Preconditions.checkNotNull(table, \"Not initialized\");\n    TableDescription desc \u003d getTableDescription(true);\n    ProvisionedThroughputDescription current\n        \u003d desc.getProvisionedThroughput();\n\n    long currentRead \u003d current.getReadCapacityUnits();\n    long newRead \u003d getLongParam(parameters,\n        S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n        currentRead);\n    long currentWrite \u003d current.getWriteCapacityUnits();\n    long newWrite \u003d getLongParam(parameters,\n            S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n            currentWrite);\n\n    if (currentRead \u003d\u003d 0 || currentWrite \u003d\u003d 0) {\n      // table is pay on demand\n      throw new IOException(E_ON_DEMAND_NO_SET_CAPACITY);\n    }\n\n    if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n      LOG.info(\"Current table capacity is read: {}, write: {}\",\n          currentRead, currentWrite);\n      LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n          newRead, newWrite);\n      tableHandler.provisionTableBlocking(newRead, newWrite);\n    } else {\n      LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n          newRead, newWrite);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "cf4efcab3b66271745b7be5db30fdc5ae656d06c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16118. S3Guard to support on-demand DDB tables.\n\nThis is the first step for on-demand operations: things recognize when they are using on-demand tables,\nas do the tests.\n\nContributed by Steve Loughran.\n",
      "commitDate": "11/04/19 5:12 PM",
      "commitName": "cf4efcab3b66271745b7be5db30fdc5ae656d06c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "28/03/19 8:49 AM",
      "commitNameOld": "cfb01869038065defe50ab53d4d1eda4e6cdee33",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 14.35,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,32 @@\n   public void updateParameters(Map\u003cString, String\u003e parameters)\n       throws IOException {\n     Preconditions.checkNotNull(table, \"Not initialized\");\n     TableDescription desc \u003d getTableDescription(true);\n     ProvisionedThroughputDescription current\n         \u003d desc.getProvisionedThroughput();\n \n     long currentRead \u003d current.getReadCapacityUnits();\n     long newRead \u003d getLongParam(parameters,\n         S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n         currentRead);\n     long currentWrite \u003d current.getWriteCapacityUnits();\n     long newWrite \u003d getLongParam(parameters,\n             S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n             currentWrite);\n \n+    if (currentRead \u003d\u003d 0 || currentWrite \u003d\u003d 0) {\n+      // table is pay on demand\n+      throw new IOException(E_ON_DEMAND_NO_SET_CAPACITY);\n+    }\n+\n     if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n       LOG.info(\"Current table capacity is read: {}, write: {}\",\n           currentRead, currentWrite);\n       LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n           newRead, newWrite);\n       provisionTableBlocking(newRead, newWrite);\n     } else {\n       LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n           newRead, newWrite);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateParameters(Map\u003cString, String\u003e parameters)\n      throws IOException {\n    Preconditions.checkNotNull(table, \"Not initialized\");\n    TableDescription desc \u003d getTableDescription(true);\n    ProvisionedThroughputDescription current\n        \u003d desc.getProvisionedThroughput();\n\n    long currentRead \u003d current.getReadCapacityUnits();\n    long newRead \u003d getLongParam(parameters,\n        S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n        currentRead);\n    long currentWrite \u003d current.getWriteCapacityUnits();\n    long newWrite \u003d getLongParam(parameters,\n            S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n            currentWrite);\n\n    if (currentRead \u003d\u003d 0 || currentWrite \u003d\u003d 0) {\n      // table is pay on demand\n      throw new IOException(E_ON_DEMAND_NO_SET_CAPACITY);\n    }\n\n    if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n      LOG.info(\"Current table capacity is read: {}, write: {}\",\n          currentRead, currentWrite);\n      LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n          newRead, newWrite);\n      provisionTableBlocking(newRead, newWrite);\n    } else {\n      LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n          newRead, newWrite);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13761. S3Guard: implement retries for DDB failures and throttling; translate exceptions.\nContributed by Aaron Fabbri.\n",
      "commitDate": "05/03/18 6:06 AM",
      "commitName": "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/11/17 8:31 AM",
      "commitNameOld": "3cd75845da1aced3d88e0ce68c68e8d95f48fb79",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 97.9,
      "commitsBetweenForRepo": 590,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,27 @@\n   public void updateParameters(Map\u003cString, String\u003e parameters)\n       throws IOException {\n     Preconditions.checkNotNull(table, \"Not initialized\");\n     TableDescription desc \u003d getTableDescription(true);\n     ProvisionedThroughputDescription current\n         \u003d desc.getProvisionedThroughput();\n \n     long currentRead \u003d current.getReadCapacityUnits();\n     long newRead \u003d getLongParam(parameters,\n         S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n         currentRead);\n     long currentWrite \u003d current.getWriteCapacityUnits();\n     long newWrite \u003d getLongParam(parameters,\n             S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n             currentWrite);\n \n-    ProvisionedThroughput throughput \u003d new ProvisionedThroughput()\n-        .withReadCapacityUnits(newRead)\n-        .withWriteCapacityUnits(newWrite);\n     if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n       LOG.info(\"Current table capacity is read: {}, write: {}\",\n           currentRead, currentWrite);\n       LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n           newRead, newWrite);\n-      table.updateTable(throughput);\n+      provisionTableBlocking(newRead, newWrite);\n     } else {\n       LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n           newRead, newWrite);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateParameters(Map\u003cString, String\u003e parameters)\n      throws IOException {\n    Preconditions.checkNotNull(table, \"Not initialized\");\n    TableDescription desc \u003d getTableDescription(true);\n    ProvisionedThroughputDescription current\n        \u003d desc.getProvisionedThroughput();\n\n    long currentRead \u003d current.getReadCapacityUnits();\n    long newRead \u003d getLongParam(parameters,\n        S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n        currentRead);\n    long currentWrite \u003d current.getWriteCapacityUnits();\n    long newWrite \u003d getLongParam(parameters,\n            S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n            currentWrite);\n\n    if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n      LOG.info(\"Current table capacity is read: {}, write: {}\",\n          currentRead, currentWrite);\n      LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n          newRead, newWrite);\n      provisionTableBlocking(newRead, newWrite);\n    } else {\n      LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n          newRead, newWrite);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
      "commitDate": "25/09/17 3:59 PM",
      "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthor": "Aaron Fabbri",
      "diff": "@@ -0,0 +1,30 @@\n+  public void updateParameters(Map\u003cString, String\u003e parameters)\n+      throws IOException {\n+    Preconditions.checkNotNull(table, \"Not initialized\");\n+    TableDescription desc \u003d getTableDescription(true);\n+    ProvisionedThroughputDescription current\n+        \u003d desc.getProvisionedThroughput();\n+\n+    long currentRead \u003d current.getReadCapacityUnits();\n+    long newRead \u003d getLongParam(parameters,\n+        S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n+        currentRead);\n+    long currentWrite \u003d current.getWriteCapacityUnits();\n+    long newWrite \u003d getLongParam(parameters,\n+            S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n+            currentWrite);\n+\n+    ProvisionedThroughput throughput \u003d new ProvisionedThroughput()\n+        .withReadCapacityUnits(newRead)\n+        .withWriteCapacityUnits(newWrite);\n+    if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n+      LOG.info(\"Current table capacity is read: {}, write: {}\",\n+          currentRead, currentWrite);\n+      LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n+          newRead, newWrite);\n+      table.updateTable(throughput);\n+    } else {\n+      LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n+          newRead, newWrite);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateParameters(Map\u003cString, String\u003e parameters)\n      throws IOException {\n    Preconditions.checkNotNull(table, \"Not initialized\");\n    TableDescription desc \u003d getTableDescription(true);\n    ProvisionedThroughputDescription current\n        \u003d desc.getProvisionedThroughput();\n\n    long currentRead \u003d current.getReadCapacityUnits();\n    long newRead \u003d getLongParam(parameters,\n        S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n        currentRead);\n    long currentWrite \u003d current.getWriteCapacityUnits();\n    long newWrite \u003d getLongParam(parameters,\n            S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n            currentWrite);\n\n    ProvisionedThroughput throughput \u003d new ProvisionedThroughput()\n        .withReadCapacityUnits(newRead)\n        .withWriteCapacityUnits(newWrite);\n    if (newRead !\u003d currentRead || newWrite !\u003d currentWrite) {\n      LOG.info(\"Current table capacity is read: {}, write: {}\",\n          currentRead, currentWrite);\n      LOG.info(\"Changing capacity of table to read: {}, write: {}\",\n          newRead, newWrite);\n      table.updateTable(throughput);\n    } else {\n      LOG.info(\"Table capacity unchanged at read: {}, write: {}\",\n          newRead, newWrite);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}