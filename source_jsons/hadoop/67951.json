{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistCpUtils.java",
  "functionName": "toCopyListingFileStatus",
  "functionId": "toCopyListingFileStatus___fileSystem-FileSystem__fileStatus-FileStatus__preserveAcls-boolean__preserveXAttrs-boolean__preserveRawXAttrs-boolean__blocksPerChunk-int",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
  "functionStartLine": 327,
  "functionEndLine": 386,
  "numCommitsSeen": 90,
  "timeTaken": 6059,
  "changeHistory": [
    "bf3fb585aaf2b179836e139c041fc87920a3c886",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "041b8326a1511b721958792a6b94ecfe27d7a1fb",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05"
  ],
  "changeHistoryShort": {
    "bf3fb585aaf2b179836e139c041fc87920a3c886": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": "Ymultichange(Yparameterchange,Ybodychange)",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": "Ymultichange(Yparameterchange,Ybodychange)",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf3fb585aaf2b179836e139c041fc87920a3c886": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
          "commitDate": "30/03/17 5:38 PM",
          "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,60 @@\n-  public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n-    CopyListingFileStatus copyListingFileStatus \u003d\n-      new CopyListingFileStatus(fileStatus);\n-    if (preserveAcls) {\n-      FsPermission perm \u003d fileStatus.getPermission();\n-      if (perm.getAclBit()) {\n-        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n-          fileStatus.getPath()).getEntries();\n-        copyListingFileStatus.setAclEntries(aclEntries);\n-      }\n+  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n+          throws IOException {\n+    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n+        new LinkedList\u003cCopyListingFileStatus\u003e();\n+\n+    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n+        fileSystem, fileStatus, preserveAcls,\n+        preserveXAttrs, preserveRawXAttrs,\n+        0, fileStatus.getLen());\n+    final long blockSize \u003d fileStatus.getBlockSize();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n+          + blocksPerChunk + \" isDFS: \" +\n+          (fileSystem instanceof DistributedFileSystem));\n     }\n-    if (preserveXAttrs || preserveRawXAttrs) {\n-      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n-         copyListingFileStatus.setXAttrs(srcXAttrs);\n+    if ((blocksPerChunk \u003e 0) \u0026\u0026\n+        !fileStatus.isDirectory() \u0026\u0026\n+        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n+      // split only when the file size is larger than the intended chunk size\n+      final BlockLocation[] blockLocations;\n+      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n+            fileStatus.getLen());\n+\n+      int numBlocks \u003d blockLocations.length;\n+      long curPos \u003d 0;\n+      if (numBlocks \u003c\u003d blocksPerChunk) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"  add file \" + clfs);\n+        }\n+        copyListingFileStatus.add(clfs);\n       } else {\n-        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n-        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n-          final String xattrName \u003d ent.getKey();\n-          if (xattrName.startsWith(rawNS)) {\n-            if (preserveRawXAttrs) {\n-              trgXAttrs.put(xattrName, ent.getValue());\n+        int i \u003d 0;\n+        while (i \u003c numBlocks) {\n+          long curLength \u003d 0;\n+          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n+            curLength +\u003d blockLocations[i].getLength();\n+          }\n+          if (curLength \u003e 0) {\n+            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n+            clfs1.setChunkOffset(curPos);\n+            clfs1.setChunkLength(curLength);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"  add file chunk \" + clfs1);\n             }\n-          } else if (preserveXAttrs) {\n-            trgXAttrs.put(xattrName, ent.getValue());\n+            copyListingFileStatus.add(clfs1);\n+            curPos +\u003d curLength;\n           }\n         }\n-        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"  add file/dir \" + clfs);\n+      }\n+      copyListingFileStatus.add(clfs);\n     }\n+\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n          throws IOException {\n    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n        new LinkedList\u003cCopyListingFileStatus\u003e();\n\n    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n        fileSystem, fileStatus, preserveAcls,\n        preserveXAttrs, preserveRawXAttrs,\n        0, fileStatus.getLen());\n    final long blockSize \u003d fileStatus.getBlockSize();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n          + blocksPerChunk + \" isDFS: \" +\n          (fileSystem instanceof DistributedFileSystem));\n    }\n    if ((blocksPerChunk \u003e 0) \u0026\u0026\n        !fileStatus.isDirectory() \u0026\u0026\n        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n      // split only when the file size is larger than the intended chunk size\n      final BlockLocation[] blockLocations;\n      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n            fileStatus.getLen());\n\n      int numBlocks \u003d blockLocations.length;\n      long curPos \u003d 0;\n      if (numBlocks \u003c\u003d blocksPerChunk) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"  add file \" + clfs);\n        }\n        copyListingFileStatus.add(clfs);\n      } else {\n        int i \u003d 0;\n        while (i \u003c numBlocks) {\n          long curLength \u003d 0;\n          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n            curLength +\u003d blockLocations[i].getLength();\n          }\n          if (curLength \u003e 0) {\n            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n            clfs1.setChunkOffset(curPos);\n            clfs1.setChunkLength(curLength);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"  add file chunk \" + clfs1);\n            }\n            copyListingFileStatus.add(clfs1);\n            curPos +\u003d curLength;\n          }\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"  add file/dir \" + clfs);\n      }\n      copyListingFileStatus.add(clfs);\n    }\n\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean]",
            "newValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean, blocksPerChunk-int]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
          "commitDate": "30/03/17 5:38 PM",
          "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,60 @@\n-  public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n-    CopyListingFileStatus copyListingFileStatus \u003d\n-      new CopyListingFileStatus(fileStatus);\n-    if (preserveAcls) {\n-      FsPermission perm \u003d fileStatus.getPermission();\n-      if (perm.getAclBit()) {\n-        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n-          fileStatus.getPath()).getEntries();\n-        copyListingFileStatus.setAclEntries(aclEntries);\n-      }\n+  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n+          throws IOException {\n+    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n+        new LinkedList\u003cCopyListingFileStatus\u003e();\n+\n+    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n+        fileSystem, fileStatus, preserveAcls,\n+        preserveXAttrs, preserveRawXAttrs,\n+        0, fileStatus.getLen());\n+    final long blockSize \u003d fileStatus.getBlockSize();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n+          + blocksPerChunk + \" isDFS: \" +\n+          (fileSystem instanceof DistributedFileSystem));\n     }\n-    if (preserveXAttrs || preserveRawXAttrs) {\n-      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n-         copyListingFileStatus.setXAttrs(srcXAttrs);\n+    if ((blocksPerChunk \u003e 0) \u0026\u0026\n+        !fileStatus.isDirectory() \u0026\u0026\n+        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n+      // split only when the file size is larger than the intended chunk size\n+      final BlockLocation[] blockLocations;\n+      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n+            fileStatus.getLen());\n+\n+      int numBlocks \u003d blockLocations.length;\n+      long curPos \u003d 0;\n+      if (numBlocks \u003c\u003d blocksPerChunk) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"  add file \" + clfs);\n+        }\n+        copyListingFileStatus.add(clfs);\n       } else {\n-        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n-        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n-          final String xattrName \u003d ent.getKey();\n-          if (xattrName.startsWith(rawNS)) {\n-            if (preserveRawXAttrs) {\n-              trgXAttrs.put(xattrName, ent.getValue());\n+        int i \u003d 0;\n+        while (i \u003c numBlocks) {\n+          long curLength \u003d 0;\n+          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n+            curLength +\u003d blockLocations[i].getLength();\n+          }\n+          if (curLength \u003e 0) {\n+            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n+            clfs1.setChunkOffset(curPos);\n+            clfs1.setChunkLength(curLength);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"  add file chunk \" + clfs1);\n             }\n-          } else if (preserveXAttrs) {\n-            trgXAttrs.put(xattrName, ent.getValue());\n+            copyListingFileStatus.add(clfs1);\n+            curPos +\u003d curLength;\n           }\n         }\n-        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"  add file/dir \" + clfs);\n+      }\n+      copyListingFileStatus.add(clfs);\n     }\n+\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n          throws IOException {\n    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n        new LinkedList\u003cCopyListingFileStatus\u003e();\n\n    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n        fileSystem, fileStatus, preserveAcls,\n        preserveXAttrs, preserveRawXAttrs,\n        0, fileStatus.getLen());\n    final long blockSize \u003d fileStatus.getBlockSize();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n          + blocksPerChunk + \" isDFS: \" +\n          (fileSystem instanceof DistributedFileSystem));\n    }\n    if ((blocksPerChunk \u003e 0) \u0026\u0026\n        !fileStatus.isDirectory() \u0026\u0026\n        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n      // split only when the file size is larger than the intended chunk size\n      final BlockLocation[] blockLocations;\n      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n            fileStatus.getLen());\n\n      int numBlocks \u003d blockLocations.length;\n      long curPos \u003d 0;\n      if (numBlocks \u003c\u003d blocksPerChunk) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"  add file \" + clfs);\n        }\n        copyListingFileStatus.add(clfs);\n      } else {\n        int i \u003d 0;\n        while (i \u003c numBlocks) {\n          long curLength \u003d 0;\n          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n            curLength +\u003d blockLocations[i].getLength();\n          }\n          if (curLength \u003e 0) {\n            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n            clfs1.setChunkOffset(curPos);\n            clfs1.setChunkLength(curLength);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"  add file chunk \" + clfs1);\n            }\n            copyListingFileStatus.add(clfs1);\n            curPos +\u003d curLength;\n          }\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"  add file/dir \" + clfs);\n      }\n      copyListingFileStatus.add(clfs);\n    }\n\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "CopyListingFileStatus",
            "newValue": "LinkedList\u003cCopyListingFileStatus\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
          "commitDate": "30/03/17 5:38 PM",
          "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,60 @@\n-  public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n-    CopyListingFileStatus copyListingFileStatus \u003d\n-      new CopyListingFileStatus(fileStatus);\n-    if (preserveAcls) {\n-      FsPermission perm \u003d fileStatus.getPermission();\n-      if (perm.getAclBit()) {\n-        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n-          fileStatus.getPath()).getEntries();\n-        copyListingFileStatus.setAclEntries(aclEntries);\n-      }\n+  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n+          throws IOException {\n+    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n+        new LinkedList\u003cCopyListingFileStatus\u003e();\n+\n+    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n+        fileSystem, fileStatus, preserveAcls,\n+        preserveXAttrs, preserveRawXAttrs,\n+        0, fileStatus.getLen());\n+    final long blockSize \u003d fileStatus.getBlockSize();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n+          + blocksPerChunk + \" isDFS: \" +\n+          (fileSystem instanceof DistributedFileSystem));\n     }\n-    if (preserveXAttrs || preserveRawXAttrs) {\n-      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n-         copyListingFileStatus.setXAttrs(srcXAttrs);\n+    if ((blocksPerChunk \u003e 0) \u0026\u0026\n+        !fileStatus.isDirectory() \u0026\u0026\n+        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n+      // split only when the file size is larger than the intended chunk size\n+      final BlockLocation[] blockLocations;\n+      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n+            fileStatus.getLen());\n+\n+      int numBlocks \u003d blockLocations.length;\n+      long curPos \u003d 0;\n+      if (numBlocks \u003c\u003d blocksPerChunk) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"  add file \" + clfs);\n+        }\n+        copyListingFileStatus.add(clfs);\n       } else {\n-        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n-        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n-          final String xattrName \u003d ent.getKey();\n-          if (xattrName.startsWith(rawNS)) {\n-            if (preserveRawXAttrs) {\n-              trgXAttrs.put(xattrName, ent.getValue());\n+        int i \u003d 0;\n+        while (i \u003c numBlocks) {\n+          long curLength \u003d 0;\n+          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n+            curLength +\u003d blockLocations[i].getLength();\n+          }\n+          if (curLength \u003e 0) {\n+            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n+            clfs1.setChunkOffset(curPos);\n+            clfs1.setChunkLength(curLength);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"  add file chunk \" + clfs1);\n             }\n-          } else if (preserveXAttrs) {\n-            trgXAttrs.put(xattrName, ent.getValue());\n+            copyListingFileStatus.add(clfs1);\n+            curPos +\u003d curLength;\n           }\n         }\n-        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"  add file/dir \" + clfs);\n+      }\n+      copyListingFileStatus.add(clfs);\n     }\n+\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n          throws IOException {\n    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n        new LinkedList\u003cCopyListingFileStatus\u003e();\n\n    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n        fileSystem, fileStatus, preserveAcls,\n        preserveXAttrs, preserveRawXAttrs,\n        0, fileStatus.getLen());\n    final long blockSize \u003d fileStatus.getBlockSize();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n          + blocksPerChunk + \" isDFS: \" +\n          (fileSystem instanceof DistributedFileSystem));\n    }\n    if ((blocksPerChunk \u003e 0) \u0026\u0026\n        !fileStatus.isDirectory() \u0026\u0026\n        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n      // split only when the file size is larger than the intended chunk size\n      final BlockLocation[] blockLocations;\n      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n            fileStatus.getLen());\n\n      int numBlocks \u003d blockLocations.length;\n      long curPos \u003d 0;\n      if (numBlocks \u003c\u003d blocksPerChunk) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"  add file \" + clfs);\n        }\n        copyListingFileStatus.add(clfs);\n      } else {\n        int i \u003d 0;\n        while (i \u003c numBlocks) {\n          long curLength \u003d 0;\n          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n            curLength +\u003d blockLocations[i].getLength();\n          }\n          if (curLength \u003e 0) {\n            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n            clfs1.setChunkOffset(curPos);\n            clfs1.setChunkLength(curLength);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"  add file chunk \" + clfs1);\n            }\n            copyListingFileStatus.add(clfs1);\n            curPos +\u003d curLength;\n          }\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"  add file/dir \" + clfs);\n      }\n      copyListingFileStatus.add(clfs);\n    }\n\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
          "commitDate": "30/03/17 5:38 PM",
          "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "30/03/17 5:01 PM",
          "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,36 @@\n-  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n-      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n-          throws IOException {\n-    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n-        new LinkedList\u003cCopyListingFileStatus\u003e();\n-\n-    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n-        fileSystem, fileStatus, preserveAcls,\n-        preserveXAttrs, preserveRawXAttrs,\n-        0, fileStatus.getLen());\n-    final long blockSize \u003d fileStatus.getBlockSize();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n-          + blocksPerChunk + \" isDFS: \" +\n-          (fileSystem instanceof DistributedFileSystem));\n+  public static CopyListingFileStatus toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n+      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n+    CopyListingFileStatus copyListingFileStatus \u003d\n+      new CopyListingFileStatus(fileStatus);\n+    if (preserveAcls) {\n+      FsPermission perm \u003d fileStatus.getPermission();\n+      if (perm.getAclBit()) {\n+        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n+          fileStatus.getPath()).getEntries();\n+        copyListingFileStatus.setAclEntries(aclEntries);\n+      }\n     }\n-    if ((blocksPerChunk \u003e 0) \u0026\u0026\n-        !fileStatus.isDirectory() \u0026\u0026\n-        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n-      // split only when the file size is larger than the intended chunk size\n-      final BlockLocation[] blockLocations;\n-      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n-            fileStatus.getLen());\n-\n-      int numBlocks \u003d blockLocations.length;\n-      long curPos \u003d 0;\n-      if (numBlocks \u003c\u003d blocksPerChunk) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"  add file \" + clfs);\n-        }\n-        copyListingFileStatus.add(clfs);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n+      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n+         copyListingFileStatus.setXAttrs(srcXAttrs);\n       } else {\n-        int i \u003d 0;\n-        while (i \u003c numBlocks) {\n-          long curLength \u003d 0;\n-          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n-            curLength +\u003d blockLocations[i].getLength();\n-          }\n-          if (curLength \u003e 0) {\n-            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n-            clfs1.setChunkOffset(curPos);\n-            clfs1.setChunkLength(curLength);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"  add file chunk \" + clfs1);\n+        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n+        final String rawNS \u003d\n+            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n+        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n+          final String xattrName \u003d ent.getKey();\n+          if (xattrName.startsWith(rawNS)) {\n+            if (preserveRawXAttrs) {\n+              trgXAttrs.put(xattrName, ent.getValue());\n             }\n-            copyListingFileStatus.add(clfs1);\n-            curPos +\u003d curLength;\n+          } else if (preserveXAttrs) {\n+            trgXAttrs.put(xattrName, ent.getValue());\n           }\n         }\n+        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"  add file/dir \" + clfs);\n-      }\n-      copyListingFileStatus.add(clfs);\n     }\n-\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d\n            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean, blocksPerChunk-int]",
            "newValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
          "commitDate": "30/03/17 5:38 PM",
          "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "30/03/17 5:01 PM",
          "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,36 @@\n-  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n-      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n-          throws IOException {\n-    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n-        new LinkedList\u003cCopyListingFileStatus\u003e();\n-\n-    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n-        fileSystem, fileStatus, preserveAcls,\n-        preserveXAttrs, preserveRawXAttrs,\n-        0, fileStatus.getLen());\n-    final long blockSize \u003d fileStatus.getBlockSize();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n-          + blocksPerChunk + \" isDFS: \" +\n-          (fileSystem instanceof DistributedFileSystem));\n+  public static CopyListingFileStatus toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n+      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n+    CopyListingFileStatus copyListingFileStatus \u003d\n+      new CopyListingFileStatus(fileStatus);\n+    if (preserveAcls) {\n+      FsPermission perm \u003d fileStatus.getPermission();\n+      if (perm.getAclBit()) {\n+        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n+          fileStatus.getPath()).getEntries();\n+        copyListingFileStatus.setAclEntries(aclEntries);\n+      }\n     }\n-    if ((blocksPerChunk \u003e 0) \u0026\u0026\n-        !fileStatus.isDirectory() \u0026\u0026\n-        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n-      // split only when the file size is larger than the intended chunk size\n-      final BlockLocation[] blockLocations;\n-      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n-            fileStatus.getLen());\n-\n-      int numBlocks \u003d blockLocations.length;\n-      long curPos \u003d 0;\n-      if (numBlocks \u003c\u003d blocksPerChunk) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"  add file \" + clfs);\n-        }\n-        copyListingFileStatus.add(clfs);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n+      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n+         copyListingFileStatus.setXAttrs(srcXAttrs);\n       } else {\n-        int i \u003d 0;\n-        while (i \u003c numBlocks) {\n-          long curLength \u003d 0;\n-          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n-            curLength +\u003d blockLocations[i].getLength();\n-          }\n-          if (curLength \u003e 0) {\n-            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n-            clfs1.setChunkOffset(curPos);\n-            clfs1.setChunkLength(curLength);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"  add file chunk \" + clfs1);\n+        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n+        final String rawNS \u003d\n+            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n+        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n+          final String xattrName \u003d ent.getKey();\n+          if (xattrName.startsWith(rawNS)) {\n+            if (preserveRawXAttrs) {\n+              trgXAttrs.put(xattrName, ent.getValue());\n             }\n-            copyListingFileStatus.add(clfs1);\n-            curPos +\u003d curLength;\n+          } else if (preserveXAttrs) {\n+            trgXAttrs.put(xattrName, ent.getValue());\n           }\n         }\n+        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"  add file/dir \" + clfs);\n-      }\n-      copyListingFileStatus.add(clfs);\n     }\n-\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d\n            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "LinkedList\u003cCopyListingFileStatus\u003e",
            "newValue": "CopyListingFileStatus"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
          "commitDate": "30/03/17 5:38 PM",
          "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "30/03/17 5:01 PM",
          "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,36 @@\n-  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n-      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n-          throws IOException {\n-    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n-        new LinkedList\u003cCopyListingFileStatus\u003e();\n-\n-    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n-        fileSystem, fileStatus, preserveAcls,\n-        preserveXAttrs, preserveRawXAttrs,\n-        0, fileStatus.getLen());\n-    final long blockSize \u003d fileStatus.getBlockSize();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n-          + blocksPerChunk + \" isDFS: \" +\n-          (fileSystem instanceof DistributedFileSystem));\n+  public static CopyListingFileStatus toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n+      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n+    CopyListingFileStatus copyListingFileStatus \u003d\n+      new CopyListingFileStatus(fileStatus);\n+    if (preserveAcls) {\n+      FsPermission perm \u003d fileStatus.getPermission();\n+      if (perm.getAclBit()) {\n+        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n+          fileStatus.getPath()).getEntries();\n+        copyListingFileStatus.setAclEntries(aclEntries);\n+      }\n     }\n-    if ((blocksPerChunk \u003e 0) \u0026\u0026\n-        !fileStatus.isDirectory() \u0026\u0026\n-        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n-      // split only when the file size is larger than the intended chunk size\n-      final BlockLocation[] blockLocations;\n-      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n-            fileStatus.getLen());\n-\n-      int numBlocks \u003d blockLocations.length;\n-      long curPos \u003d 0;\n-      if (numBlocks \u003c\u003d blocksPerChunk) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"  add file \" + clfs);\n-        }\n-        copyListingFileStatus.add(clfs);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n+      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n+         copyListingFileStatus.setXAttrs(srcXAttrs);\n       } else {\n-        int i \u003d 0;\n-        while (i \u003c numBlocks) {\n-          long curLength \u003d 0;\n-          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n-            curLength +\u003d blockLocations[i].getLength();\n-          }\n-          if (curLength \u003e 0) {\n-            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n-            clfs1.setChunkOffset(curPos);\n-            clfs1.setChunkLength(curLength);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"  add file chunk \" + clfs1);\n+        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n+        final String rawNS \u003d\n+            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n+        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n+          final String xattrName \u003d ent.getKey();\n+          if (xattrName.startsWith(rawNS)) {\n+            if (preserveRawXAttrs) {\n+              trgXAttrs.put(xattrName, ent.getValue());\n             }\n-            copyListingFileStatus.add(clfs1);\n-            curPos +\u003d curLength;\n+          } else if (preserveXAttrs) {\n+            trgXAttrs.put(xattrName, ent.getValue());\n           }\n         }\n+        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"  add file/dir \" + clfs);\n-      }\n-      copyListingFileStatus.add(clfs);\n     }\n-\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d\n            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
      "commitDate": "30/03/17 5:01 PM",
      "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
          "commitDate": "30/03/17 5:01 PM",
          "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "28/03/17 10:14 PM",
          "commitNameOld": "0e6f8e4bc6642f90dc7b33848bfb1129ec20ee49",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,60 @@\n-  public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n-    CopyListingFileStatus copyListingFileStatus \u003d\n-      new CopyListingFileStatus(fileStatus);\n-    if (preserveAcls) {\n-      FsPermission perm \u003d fileStatus.getPermission();\n-      if (perm.getAclBit()) {\n-        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n-          fileStatus.getPath()).getEntries();\n-        copyListingFileStatus.setAclEntries(aclEntries);\n-      }\n+  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n+          throws IOException {\n+    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n+        new LinkedList\u003cCopyListingFileStatus\u003e();\n+\n+    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n+        fileSystem, fileStatus, preserveAcls,\n+        preserveXAttrs, preserveRawXAttrs,\n+        0, fileStatus.getLen());\n+    final long blockSize \u003d fileStatus.getBlockSize();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n+          + blocksPerChunk + \" isDFS: \" +\n+          (fileSystem instanceof DistributedFileSystem));\n     }\n-    if (preserveXAttrs || preserveRawXAttrs) {\n-      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n-         copyListingFileStatus.setXAttrs(srcXAttrs);\n+    if ((blocksPerChunk \u003e 0) \u0026\u0026\n+        !fileStatus.isDirectory() \u0026\u0026\n+        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n+      // split only when the file size is larger than the intended chunk size\n+      final BlockLocation[] blockLocations;\n+      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n+            fileStatus.getLen());\n+\n+      int numBlocks \u003d blockLocations.length;\n+      long curPos \u003d 0;\n+      if (numBlocks \u003c\u003d blocksPerChunk) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"  add file \" + clfs);\n+        }\n+        copyListingFileStatus.add(clfs);\n       } else {\n-        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n-        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n-          final String xattrName \u003d ent.getKey();\n-          if (xattrName.startsWith(rawNS)) {\n-            if (preserveRawXAttrs) {\n-              trgXAttrs.put(xattrName, ent.getValue());\n+        int i \u003d 0;\n+        while (i \u003c numBlocks) {\n+          long curLength \u003d 0;\n+          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n+            curLength +\u003d blockLocations[i].getLength();\n+          }\n+          if (curLength \u003e 0) {\n+            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n+            clfs1.setChunkOffset(curPos);\n+            clfs1.setChunkLength(curLength);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"  add file chunk \" + clfs1);\n             }\n-          } else if (preserveXAttrs) {\n-            trgXAttrs.put(xattrName, ent.getValue());\n+            copyListingFileStatus.add(clfs1);\n+            curPos +\u003d curLength;\n           }\n         }\n-        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"  add file/dir \" + clfs);\n+      }\n+      copyListingFileStatus.add(clfs);\n     }\n+\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n          throws IOException {\n    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n        new LinkedList\u003cCopyListingFileStatus\u003e();\n\n    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n        fileSystem, fileStatus, preserveAcls,\n        preserveXAttrs, preserveRawXAttrs,\n        0, fileStatus.getLen());\n    final long blockSize \u003d fileStatus.getBlockSize();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n          + blocksPerChunk + \" isDFS: \" +\n          (fileSystem instanceof DistributedFileSystem));\n    }\n    if ((blocksPerChunk \u003e 0) \u0026\u0026\n        !fileStatus.isDirectory() \u0026\u0026\n        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n      // split only when the file size is larger than the intended chunk size\n      final BlockLocation[] blockLocations;\n      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n            fileStatus.getLen());\n\n      int numBlocks \u003d blockLocations.length;\n      long curPos \u003d 0;\n      if (numBlocks \u003c\u003d blocksPerChunk) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"  add file \" + clfs);\n        }\n        copyListingFileStatus.add(clfs);\n      } else {\n        int i \u003d 0;\n        while (i \u003c numBlocks) {\n          long curLength \u003d 0;\n          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n            curLength +\u003d blockLocations[i].getLength();\n          }\n          if (curLength \u003e 0) {\n            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n            clfs1.setChunkOffset(curPos);\n            clfs1.setChunkLength(curLength);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"  add file chunk \" + clfs1);\n            }\n            copyListingFileStatus.add(clfs1);\n            curPos +\u003d curLength;\n          }\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"  add file/dir \" + clfs);\n      }\n      copyListingFileStatus.add(clfs);\n    }\n\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean]",
            "newValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean, blocksPerChunk-int]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
          "commitDate": "30/03/17 5:01 PM",
          "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "28/03/17 10:14 PM",
          "commitNameOld": "0e6f8e4bc6642f90dc7b33848bfb1129ec20ee49",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,60 @@\n-  public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n-    CopyListingFileStatus copyListingFileStatus \u003d\n-      new CopyListingFileStatus(fileStatus);\n-    if (preserveAcls) {\n-      FsPermission perm \u003d fileStatus.getPermission();\n-      if (perm.getAclBit()) {\n-        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n-          fileStatus.getPath()).getEntries();\n-        copyListingFileStatus.setAclEntries(aclEntries);\n-      }\n+  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n+          throws IOException {\n+    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n+        new LinkedList\u003cCopyListingFileStatus\u003e();\n+\n+    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n+        fileSystem, fileStatus, preserveAcls,\n+        preserveXAttrs, preserveRawXAttrs,\n+        0, fileStatus.getLen());\n+    final long blockSize \u003d fileStatus.getBlockSize();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n+          + blocksPerChunk + \" isDFS: \" +\n+          (fileSystem instanceof DistributedFileSystem));\n     }\n-    if (preserveXAttrs || preserveRawXAttrs) {\n-      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n-         copyListingFileStatus.setXAttrs(srcXAttrs);\n+    if ((blocksPerChunk \u003e 0) \u0026\u0026\n+        !fileStatus.isDirectory() \u0026\u0026\n+        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n+      // split only when the file size is larger than the intended chunk size\n+      final BlockLocation[] blockLocations;\n+      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n+            fileStatus.getLen());\n+\n+      int numBlocks \u003d blockLocations.length;\n+      long curPos \u003d 0;\n+      if (numBlocks \u003c\u003d blocksPerChunk) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"  add file \" + clfs);\n+        }\n+        copyListingFileStatus.add(clfs);\n       } else {\n-        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n-        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n-          final String xattrName \u003d ent.getKey();\n-          if (xattrName.startsWith(rawNS)) {\n-            if (preserveRawXAttrs) {\n-              trgXAttrs.put(xattrName, ent.getValue());\n+        int i \u003d 0;\n+        while (i \u003c numBlocks) {\n+          long curLength \u003d 0;\n+          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n+            curLength +\u003d blockLocations[i].getLength();\n+          }\n+          if (curLength \u003e 0) {\n+            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n+            clfs1.setChunkOffset(curPos);\n+            clfs1.setChunkLength(curLength);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"  add file chunk \" + clfs1);\n             }\n-          } else if (preserveXAttrs) {\n-            trgXAttrs.put(xattrName, ent.getValue());\n+            copyListingFileStatus.add(clfs1);\n+            curPos +\u003d curLength;\n           }\n         }\n-        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"  add file/dir \" + clfs);\n+      }\n+      copyListingFileStatus.add(clfs);\n     }\n+\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n          throws IOException {\n    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n        new LinkedList\u003cCopyListingFileStatus\u003e();\n\n    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n        fileSystem, fileStatus, preserveAcls,\n        preserveXAttrs, preserveRawXAttrs,\n        0, fileStatus.getLen());\n    final long blockSize \u003d fileStatus.getBlockSize();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n          + blocksPerChunk + \" isDFS: \" +\n          (fileSystem instanceof DistributedFileSystem));\n    }\n    if ((blocksPerChunk \u003e 0) \u0026\u0026\n        !fileStatus.isDirectory() \u0026\u0026\n        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n      // split only when the file size is larger than the intended chunk size\n      final BlockLocation[] blockLocations;\n      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n            fileStatus.getLen());\n\n      int numBlocks \u003d blockLocations.length;\n      long curPos \u003d 0;\n      if (numBlocks \u003c\u003d blocksPerChunk) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"  add file \" + clfs);\n        }\n        copyListingFileStatus.add(clfs);\n      } else {\n        int i \u003d 0;\n        while (i \u003c numBlocks) {\n          long curLength \u003d 0;\n          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n            curLength +\u003d blockLocations[i].getLength();\n          }\n          if (curLength \u003e 0) {\n            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n            clfs1.setChunkOffset(curPos);\n            clfs1.setChunkLength(curLength);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"  add file chunk \" + clfs1);\n            }\n            copyListingFileStatus.add(clfs1);\n            curPos +\u003d curLength;\n          }\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"  add file/dir \" + clfs);\n      }\n      copyListingFileStatus.add(clfs);\n    }\n\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "CopyListingFileStatus",
            "newValue": "LinkedList\u003cCopyListingFileStatus\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
          "commitDate": "30/03/17 5:01 PM",
          "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "28/03/17 10:14 PM",
          "commitNameOld": "0e6f8e4bc6642f90dc7b33848bfb1129ec20ee49",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,60 @@\n-  public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n-    CopyListingFileStatus copyListingFileStatus \u003d\n-      new CopyListingFileStatus(fileStatus);\n-    if (preserveAcls) {\n-      FsPermission perm \u003d fileStatus.getPermission();\n-      if (perm.getAclBit()) {\n-        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n-          fileStatus.getPath()).getEntries();\n-        copyListingFileStatus.setAclEntries(aclEntries);\n-      }\n+  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n+      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n+          throws IOException {\n+    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n+        new LinkedList\u003cCopyListingFileStatus\u003e();\n+\n+    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n+        fileSystem, fileStatus, preserveAcls,\n+        preserveXAttrs, preserveRawXAttrs,\n+        0, fileStatus.getLen());\n+    final long blockSize \u003d fileStatus.getBlockSize();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n+          + blocksPerChunk + \" isDFS: \" +\n+          (fileSystem instanceof DistributedFileSystem));\n     }\n-    if (preserveXAttrs || preserveRawXAttrs) {\n-      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n-         copyListingFileStatus.setXAttrs(srcXAttrs);\n+    if ((blocksPerChunk \u003e 0) \u0026\u0026\n+        !fileStatus.isDirectory() \u0026\u0026\n+        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n+      // split only when the file size is larger than the intended chunk size\n+      final BlockLocation[] blockLocations;\n+      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n+            fileStatus.getLen());\n+\n+      int numBlocks \u003d blockLocations.length;\n+      long curPos \u003d 0;\n+      if (numBlocks \u003c\u003d blocksPerChunk) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"  add file \" + clfs);\n+        }\n+        copyListingFileStatus.add(clfs);\n       } else {\n-        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n-        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n-          final String xattrName \u003d ent.getKey();\n-          if (xattrName.startsWith(rawNS)) {\n-            if (preserveRawXAttrs) {\n-              trgXAttrs.put(xattrName, ent.getValue());\n+        int i \u003d 0;\n+        while (i \u003c numBlocks) {\n+          long curLength \u003d 0;\n+          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n+            curLength +\u003d blockLocations[i].getLength();\n+          }\n+          if (curLength \u003e 0) {\n+            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n+            clfs1.setChunkOffset(curPos);\n+            clfs1.setChunkLength(curLength);\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"  add file chunk \" + clfs1);\n             }\n-          } else if (preserveXAttrs) {\n-            trgXAttrs.put(xattrName, ent.getValue());\n+            copyListingFileStatus.add(clfs1);\n+            curPos +\u003d curLength;\n           }\n         }\n-        copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"  add file/dir \" + clfs);\n+      }\n+      copyListingFileStatus.add(clfs);\n     }\n+\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static LinkedList\u003cCopyListingFileStatus\u003e toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls,\n      boolean preserveXAttrs, boolean preserveRawXAttrs, int blocksPerChunk)\n          throws IOException {\n    LinkedList\u003cCopyListingFileStatus\u003e copyListingFileStatus \u003d\n        new LinkedList\u003cCopyListingFileStatus\u003e();\n\n    final CopyListingFileStatus clfs \u003d toCopyListingFileStatusHelper(\n        fileSystem, fileStatus, preserveAcls,\n        preserveXAttrs, preserveRawXAttrs,\n        0, fileStatus.getLen());\n    final long blockSize \u003d fileStatus.getBlockSize();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"toCopyListing: \" + fileStatus + \" chunkSize: \"\n          + blocksPerChunk + \" isDFS: \" +\n          (fileSystem instanceof DistributedFileSystem));\n    }\n    if ((blocksPerChunk \u003e 0) \u0026\u0026\n        !fileStatus.isDirectory() \u0026\u0026\n        (fileStatus.getLen() \u003e blockSize * blocksPerChunk)) {\n      // split only when the file size is larger than the intended chunk size\n      final BlockLocation[] blockLocations;\n      blockLocations \u003d fileSystem.getFileBlockLocations(fileStatus, 0,\n            fileStatus.getLen());\n\n      int numBlocks \u003d blockLocations.length;\n      long curPos \u003d 0;\n      if (numBlocks \u003c\u003d blocksPerChunk) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"  add file \" + clfs);\n        }\n        copyListingFileStatus.add(clfs);\n      } else {\n        int i \u003d 0;\n        while (i \u003c numBlocks) {\n          long curLength \u003d 0;\n          for (int j \u003d 0; j \u003c blocksPerChunk \u0026\u0026 i \u003c numBlocks; ++j, ++i) {\n            curLength +\u003d blockLocations[i].getLength();\n          }\n          if (curLength \u003e 0) {\n            CopyListingFileStatus clfs1 \u003d new CopyListingFileStatus(clfs);\n            clfs1.setChunkOffset(curPos);\n            clfs1.setChunkLength(curLength);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"  add file chunk \" + clfs1);\n            }\n            copyListingFileStatus.add(clfs1);\n            curPos +\u003d curLength;\n          }\n        }\n      }\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"  add file/dir \" + clfs);\n      }\n      copyListingFileStatus.add(clfs);\n    }\n\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n       FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n       boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n     if (preserveXAttrs || preserveRawXAttrs) {\n       Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n       if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n          copyListingFileStatus.setXAttrs(srcXAttrs);\n       } else {\n         Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n+        final String rawNS \u003d\n+            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n         for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n           final String xattrName \u003d ent.getKey();\n           if (xattrName.startsWith(rawNS)) {\n             if (preserveRawXAttrs) {\n               trgXAttrs.put(xattrName, ent.getValue());\n             }\n           } else if (preserveXAttrs) {\n             trgXAttrs.put(xattrName, ent.getValue());\n           }\n         }\n         copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n     }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d\n            StringUtils.toLowerCase(XAttr.NameSpace.RAW.name());\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n       FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n       boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n     if (preserveXAttrs || preserveRawXAttrs) {\n       Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n       if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n          copyListingFileStatus.setXAttrs(srcXAttrs);\n       } else {\n         Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d\n-            XAttr.NameSpace.RAW.name().toLowerCase(Locale.ENGLISH);\n+        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n         for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n           final String xattrName \u003d ent.getKey();\n           if (xattrName.startsWith(rawNS)) {\n             if (preserveRawXAttrs) {\n               trgXAttrs.put(xattrName, ent.getValue());\n             }\n           } else if (preserveXAttrs) {\n             trgXAttrs.put(xattrName, ent.getValue());\n           }\n         }\n         copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n     }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/09/14 3:38 PM",
      "commitNameOld": "3cde37c991b18370cc1b383f920a9d5bd2d91adb",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 147.23,
      "commitsBetweenForRepo": 1208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n       FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n       boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n     if (preserveXAttrs || preserveRawXAttrs) {\n       Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n       if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n          copyListingFileStatus.setXAttrs(srcXAttrs);\n       } else {\n         Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n-        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n+        final String rawNS \u003d\n+            XAttr.NameSpace.RAW.name().toLowerCase(Locale.ENGLISH);\n         for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n           final String xattrName \u003d ent.getKey();\n           if (xattrName.startsWith(rawNS)) {\n             if (preserveRawXAttrs) {\n               trgXAttrs.put(xattrName, ent.getValue());\n             }\n           } else if (preserveXAttrs) {\n             trgXAttrs.put(xattrName, ent.getValue());\n           }\n         }\n         copyListingFileStatus.setXAttrs(trgXAttrs);\n       }\n     }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d\n            XAttr.NameSpace.RAW.name().toLowerCase(Locale.ENGLISH);\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
      "extendedDetails": {}
    },
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6007. Add support to distcp to preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 6:32 PM",
      "commitName": "041b8326a1511b721958792a6b94ecfe27d7a1fb",
      "commitAuthor": "Charles Lamb",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6007. Add support to distcp to preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616657 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/08/14 6:32 PM",
          "commitName": "041b8326a1511b721958792a6b94ecfe27d7a1fb",
          "commitAuthor": "Charles Lamb",
          "commitDateOld": "06/06/14 7:45 AM",
          "commitNameOld": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 62.45,
          "commitsBetweenForRepo": 482,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,35 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n       FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs) throws IOException {\n+      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n-    if (preserveXAttrs) {\n-      Map\u003cString, byte[]\u003e xAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      copyListingFileStatus.setXAttrs(xAttrs);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n+      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n+         copyListingFileStatus.setXAttrs(srcXAttrs);\n+      } else {\n+        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n+        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n+        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n+          final String xattrName \u003d ent.getKey();\n+          if (xattrName.startsWith(rawNS)) {\n+            if (preserveRawXAttrs) {\n+              trgXAttrs.put(xattrName, ent.getValue());\n+            }\n+          } else if (preserveXAttrs) {\n+            trgXAttrs.put(xattrName, ent.getValue());\n+          }\n+        }\n+        copyListingFileStatus.setXAttrs(trgXAttrs);\n+      }\n     }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean]",
            "newValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean, preserveRawXAttrs-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6007. Add support to distcp to preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616657 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/08/14 6:32 PM",
          "commitName": "041b8326a1511b721958792a6b94ecfe27d7a1fb",
          "commitAuthor": "Charles Lamb",
          "commitDateOld": "06/06/14 7:45 AM",
          "commitNameOld": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 62.45,
          "commitsBetweenForRepo": 482,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,35 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n       FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n-      boolean preserveXAttrs) throws IOException {\n+      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n-    if (preserveXAttrs) {\n-      Map\u003cString, byte[]\u003e xAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n-      copyListingFileStatus.setXAttrs(xAttrs);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n+      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n+         copyListingFileStatus.setXAttrs(srcXAttrs);\n+      } else {\n+        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n+        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n+        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n+          final String xattrName \u003d ent.getKey();\n+          if (xattrName.startsWith(rawNS)) {\n+            if (preserveRawXAttrs) {\n+              trgXAttrs.put(xattrName, ent.getValue());\n+            }\n+          } else if (preserveXAttrs) {\n+            trgXAttrs.put(xattrName, ent.getValue());\n+          }\n+        }\n+        copyListingFileStatus.setXAttrs(trgXAttrs);\n+      }\n     }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs, boolean preserveRawXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      if (preserveXAttrs \u0026\u0026 preserveRawXAttrs) {\n         copyListingFileStatus.setXAttrs(srcXAttrs);\n      } else {\n        Map\u003cString, byte[]\u003e trgXAttrs \u003d Maps.newHashMap();\n        final String rawNS \u003d XAttr.NameSpace.RAW.name().toLowerCase();\n        for (Map.Entry\u003cString, byte[]\u003e ent : srcXAttrs.entrySet()) {\n          final String xattrName \u003d ent.getKey();\n          if (xattrName.startsWith(rawNS)) {\n            if (preserveRawXAttrs) {\n              trgXAttrs.put(xattrName, ent.getValue());\n            }\n          } else if (preserveXAttrs) {\n            trgXAttrs.put(xattrName, ent.getValue());\n          }\n        }\n        copyListingFileStatus.setXAttrs(trgXAttrs);\n      }\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 7:45 AM",
      "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/14 7:45 AM",
          "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "16/05/14 11:25 AM",
          "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 20.85,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,19 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls)\n-      throws IOException {\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n+      boolean preserveXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n+    if (preserveXAttrs) {\n+      Map\u003cString, byte[]\u003e xAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      copyListingFileStatus.setXAttrs(xAttrs);\n+    }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs) {\n      Map\u003cString, byte[]\u003e xAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      copyListingFileStatus.setXAttrs(xAttrs);\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean]",
            "newValue": "[fileSystem-FileSystem, fileStatus-FileStatus, preserveAcls-boolean, preserveXAttrs-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/06/14 7:45 AM",
          "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "16/05/14 11:25 AM",
          "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 20.85,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,19 @@\n   public static CopyListingFileStatus toCopyListingFileStatus(\n-      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls)\n-      throws IOException {\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n+      boolean preserveXAttrs) throws IOException {\n     CopyListingFileStatus copyListingFileStatus \u003d\n       new CopyListingFileStatus(fileStatus);\n     if (preserveAcls) {\n       FsPermission perm \u003d fileStatus.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n           fileStatus.getPath()).getEntries();\n         copyListingFileStatus.setAclEntries(aclEntries);\n       }\n     }\n+    if (preserveXAttrs) {\n+      Map\u003cString, byte[]\u003e xAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n+      copyListingFileStatus.setXAttrs(xAttrs);\n+    }\n     return copyListingFileStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls, \n      boolean preserveXAttrs) throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    if (preserveXAttrs) {\n      Map\u003cString, byte[]\u003e xAttrs \u003d fileSystem.getXAttrs(fileStatus.getPath());\n      copyListingFileStatus.setXAttrs(xAttrs);\n    }\n    return copyListingFileStatus;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,15 @@\n+  public static CopyListingFileStatus toCopyListingFileStatus(\n+      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls)\n+      throws IOException {\n+    CopyListingFileStatus copyListingFileStatus \u003d\n+      new CopyListingFileStatus(fileStatus);\n+    if (preserveAcls) {\n+      FsPermission perm \u003d fileStatus.getPermission();\n+      if (perm.getAclBit()) {\n+        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n+          fileStatus.getPath()).getEntries();\n+        copyListingFileStatus.setAclEntries(aclEntries);\n+      }\n+    }\n+    return copyListingFileStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static CopyListingFileStatus toCopyListingFileStatus(\n      FileSystem fileSystem, FileStatus fileStatus, boolean preserveAcls)\n      throws IOException {\n    CopyListingFileStatus copyListingFileStatus \u003d\n      new CopyListingFileStatus(fileStatus);\n    if (preserveAcls) {\n      FsPermission perm \u003d fileStatus.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e aclEntries \u003d fileSystem.getAclStatus(\n          fileStatus.getPath()).getEntries();\n        copyListingFileStatus.setAclEntries(aclEntries);\n      }\n    }\n    return copyListingFileStatus;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java"
    }
  }
}