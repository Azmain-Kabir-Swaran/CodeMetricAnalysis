{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "removeApp",
  "functionId": "removeApp___app-FSAppAttempt",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 111,
  "functionEndLine": 138,
  "numCommitsSeen": 101,
  "timeTaken": 4893,
  "changeHistory": [
    "1f4cdf10681b6903207a63fb5c306c9665ed9464",
    "3b9d3acd203cef4d861c5182fc4dccc55128d347",
    "10468529a9b858bd945e7ecb063c9c1438efa474",
    "6a6a59db7f1bfda47c3c14fb49676a7b22d2eb06",
    "24ee9e3431d27811530ffa01d8d241133fd643fe",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718",
    "486e718fc1f5befd231494e2ec06bb360484f191",
    "85d4c787e0f8ed913aaa61a6874ccf0408577b8d",
    "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4",
    "7545d8bf996e5d060d5d613bf769ec52a62d428b",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "1f4cdf10681b6903207a63fb5c306c9665ed9464": "Ybodychange",
    "3b9d3acd203cef4d861c5182fc4dccc55128d347": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Ymodifierchange",
    "6a6a59db7f1bfda47c3c14fb49676a7b22d2eb06": "Ybodychange",
    "24ee9e3431d27811530ffa01d8d241133fd643fe": "Ybodychange",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Ymultichange(Yparameterchange,Ybodychange)",
    "85d4c787e0f8ed913aaa61a6874ccf0408577b8d": "Ybodychange",
    "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4": "Ybodychange",
    "7545d8bf996e5d060d5d613bf769ec52a62d428b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Yfilerename",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f4cdf10681b6903207a63fb5c306c9665ed9464": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4090. Make Collections.sort() more efficient by caching resource usage. (Contributed by Yufei Gu, Shilong Zhang and Xianyin Xin)\n",
      "commitDate": "20/10/17 1:32 AM",
      "commitName": "1f4cdf10681b6903207a63fb5c306c9665ed9464",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "05/10/17 11:51 PM",
      "commitNameOld": "99292adcefdc6b8f280b8e100605fb39f755c38a",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 14.07,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   boolean removeApp(FSAppAttempt app) {\n     boolean runnable \u003d false;\n \n     // Remove app from runnable/nonRunnable list while holding the write lock\n     writeLock.lock();\n     try {\n       runnable \u003d runnableApps.remove(app);\n       if (!runnable) {\n         // removeNonRunnableApp acquires the write lock again, which is fine\n         if (!removeNonRunnableApp(app)) {\n           throw new IllegalStateException(\"Given app to remove \" + app +\n               \" does not exist in queue \" + this);\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n \n     // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n     // running an unmanaged AM.\n     if (runnable \u0026\u0026 app.isAmRunning()) {\n       Resources.subtractFrom(amResourceUsage, app.getAMResource());\n       getMetrics().setAMResourceUsage(amResourceUsage);\n     }\n \n+    decUsedResource(app.getResourceUsage());\n     return runnable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean removeApp(FSAppAttempt app) {\n    boolean runnable \u003d false;\n\n    // Remove app from runnable/nonRunnable list while holding the write lock\n    writeLock.lock();\n    try {\n      runnable \u003d runnableApps.remove(app);\n      if (!runnable) {\n        // removeNonRunnableApp acquires the write lock again, which is fine\n        if (!removeNonRunnableApp(app)) {\n          throw new IllegalStateException(\"Given app to remove \" + app +\n              \" does not exist in queue \" + this);\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n    // running an unmanaged AM.\n    if (runnable \u0026\u0026 app.isAmRunning()) {\n      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n      getMetrics().setAMResourceUsage(amResourceUsage);\n    }\n\n    decUsedResource(app.getResourceUsage());\n    return runnable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "3b9d3acd203cef4d861c5182fc4dccc55128d347": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5890. FairScheduler should log information about AM-resource-usage and max-AM-share for queues\n(Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "29/11/16 12:46 PM",
      "commitName": "3b9d3acd203cef4d861c5182fc4dccc55128d347",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "23/11/16 9:48 PM",
      "commitNameOld": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 5.62,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   boolean removeApp(FSAppAttempt app) {\n     boolean runnable \u003d false;\n \n     // Remove app from runnable/nonRunnable list while holding the write lock\n     writeLock.lock();\n     try {\n       runnable \u003d runnableApps.remove(app);\n       if (!runnable) {\n         // removeNonRunnableApp acquires the write lock again, which is fine\n         if (!removeNonRunnableApp(app)) {\n           throw new IllegalStateException(\"Given app to remove \" + app +\n               \" does not exist in queue \" + this);\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n \n     // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n     // running an unmanaged AM.\n     if (runnable \u0026\u0026 app.isAmRunning()) {\n       Resources.subtractFrom(amResourceUsage, app.getAMResource());\n+      getMetrics().setAMResourceUsage(amResourceUsage);\n     }\n \n     return runnable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean removeApp(FSAppAttempt app) {\n    boolean runnable \u003d false;\n\n    // Remove app from runnable/nonRunnable list while holding the write lock\n    writeLock.lock();\n    try {\n      runnable \u003d runnableApps.remove(app);\n      if (!runnable) {\n        // removeNonRunnableApp acquires the write lock again, which is fine\n        if (!removeNonRunnableApp(app)) {\n          throw new IllegalStateException(\"Given app to remove \" + app +\n              \" does not exist in queue \" + this);\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n    // running an unmanaged AM.\n    if (runnable \u0026\u0026 app.isAmRunning()) {\n      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n      getMetrics().setAMResourceUsage(amResourceUsage);\n    }\n\n    return runnable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/11/16 11:44 PM",
      "commitNameOld": "86ac1ad9fd65c7dd12278372b369de38dc4616db",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  public boolean removeApp(FSAppAttempt app) {\n+  boolean removeApp(FSAppAttempt app) {\n     boolean runnable \u003d false;\n \n     // Remove app from runnable/nonRunnable list while holding the write lock\n     writeLock.lock();\n     try {\n       runnable \u003d runnableApps.remove(app);\n       if (!runnable) {\n         // removeNonRunnableApp acquires the write lock again, which is fine\n         if (!removeNonRunnableApp(app)) {\n           throw new IllegalStateException(\"Given app to remove \" + app +\n               \" does not exist in queue \" + this);\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n \n     // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n     // running an unmanaged AM.\n     if (runnable \u0026\u0026 app.isAmRunning()) {\n       Resources.subtractFrom(amResourceUsage, app.getAMResource());\n     }\n \n     return runnable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean removeApp(FSAppAttempt app) {\n    boolean runnable \u003d false;\n\n    // Remove app from runnable/nonRunnable list while holding the write lock\n    writeLock.lock();\n    try {\n      runnable \u003d runnableApps.remove(app);\n      if (!runnable) {\n        // removeNonRunnableApp acquires the write lock again, which is fine\n        if (!removeNonRunnableApp(app)) {\n          throw new IllegalStateException(\"Given app to remove \" + app +\n              \" does not exist in queue \" + this);\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n    // running an unmanaged AM.\n    if (runnable \u0026\u0026 app.isAmRunning()) {\n      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n    }\n\n    return runnable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "6a6a59db7f1bfda47c3c14fb49676a7b22d2eb06": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3415. Non-AM containers can be counted towards amResourceUsage of a fairscheduler queue (Zhihai Xu via Sandy Ryza)\n",
      "commitDate": "02/04/15 1:56 PM",
      "commitName": "6a6a59db7f1bfda47c3c14fb49676a7b22d2eb06",
      "commitAuthor": "Sandy Ryza",
      "commitDateOld": "31/03/15 1:42 AM",
      "commitNameOld": "b5a22e983832d4843b5df1d07858988e8bbf37e3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 2.51,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public boolean removeApp(FSAppAttempt app) {\n     boolean runnable \u003d false;\n \n     // Remove app from runnable/nonRunnable list while holding the write lock\n     writeLock.lock();\n     try {\n       runnable \u003d runnableApps.remove(app);\n       if (!runnable) {\n         // removeNonRunnableApp acquires the write lock again, which is fine\n         if (!removeNonRunnableApp(app)) {\n           throw new IllegalStateException(\"Given app to remove \" + app +\n               \" does not exist in queue \" + this);\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n \n-    // Update AM resource usage if needed\n-    if (runnable \u0026\u0026 app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n+    // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n+    // running an unmanaged AM.\n+    if (runnable \u0026\u0026 app.isAmRunning()) {\n       Resources.subtractFrom(amResourceUsage, app.getAMResource());\n     }\n \n     return runnable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeApp(FSAppAttempt app) {\n    boolean runnable \u003d false;\n\n    // Remove app from runnable/nonRunnable list while holding the write lock\n    writeLock.lock();\n    try {\n      runnable \u003d runnableApps.remove(app);\n      if (!runnable) {\n        // removeNonRunnableApp acquires the write lock again, which is fine\n        if (!removeNonRunnableApp(app)) {\n          throw new IllegalStateException(\"Given app to remove \" + app +\n              \" does not exist in queue \" + this);\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    // Update AM resource usage if needed. If isAMRunning is true, we\u0027re not\n    // running an unmanaged AM.\n    if (runnable \u0026\u0026 app.isAmRunning()) {\n      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n    }\n\n    return runnable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "24ee9e3431d27811530ffa01d8d241133fd643fe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2975. FSLeafQueue app lists are accessed without required locks. (kasha)\n",
      "commitDate": "20/12/14 12:17 PM",
      "commitName": "24ee9e3431d27811530ffa01d8d241133fd643fe",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/12/14 12:03 PM",
      "commitNameOld": "f2d150ea1205b77a75c347ace667b4cd060aaf40",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   public boolean removeApp(FSAppAttempt app) {\n     boolean runnable \u003d false;\n+\n+    // Remove app from runnable/nonRunnable list while holding the write lock\n     writeLock.lock();\n     try {\n-      if (runnableApps.remove(app)) {\n-        runnable \u003d true;\n-      } else if (nonRunnableApps.remove(app)) {\n-        runnable \u003d false; //nop, runnable is initialised to false already\n-      } else {\n-        throw new IllegalStateException(\"Given app to remove \" + app +\n-            \" does not exist in queue \" + this);\n+      runnable \u003d runnableApps.remove(app);\n+      if (!runnable) {\n+        // removeNonRunnableApp acquires the write lock again, which is fine\n+        if (!removeNonRunnableApp(app)) {\n+          throw new IllegalStateException(\"Given app to remove \" + app +\n+              \" does not exist in queue \" + this);\n+        }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n+\n     // Update AM resource usage if needed\n     if (runnable \u0026\u0026 app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n       Resources.subtractFrom(amResourceUsage, app.getAMResource());\n     }\n+\n     return runnable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeApp(FSAppAttempt app) {\n    boolean runnable \u003d false;\n\n    // Remove app from runnable/nonRunnable list while holding the write lock\n    writeLock.lock();\n    try {\n      runnable \u003d runnableApps.remove(app);\n      if (!runnable) {\n        // removeNonRunnableApp acquires the write lock again, which is fine\n        if (!removeNonRunnableApp(app)) {\n          throw new IllegalStateException(\"Given app to remove \" + app +\n              \" does not exist in queue \" + this);\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    // Update AM resource usage if needed\n    if (runnable \u0026\u0026 app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n    }\n\n    return runnable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2910. FSLeafQueue can throw ConcurrentModificationException. (Wilfred Spiegelenburg via kasha)\n",
      "commitDate": "09/12/14 2:00 PM",
      "commitName": "a2e07a54561a57a83b943628ebbc53ed5ba52718",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/09/14 10:27 AM",
      "commitNameOld": "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 97.19,
      "commitsBetweenForRepo": 917,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,21 @@\n   public boolean removeApp(FSAppAttempt app) {\n-    if (runnableApps.remove(app)) {\n-      // Update AM resource usage\n-      if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n-        Resources.subtractFrom(amResourceUsage, app.getAMResource());\n+    boolean runnable \u003d false;\n+    writeLock.lock();\n+    try {\n+      if (runnableApps.remove(app)) {\n+        runnable \u003d true;\n+      } else if (nonRunnableApps.remove(app)) {\n+        runnable \u003d false; //nop, runnable is initialised to false already\n+      } else {\n+        throw new IllegalStateException(\"Given app to remove \" + app +\n+            \" does not exist in queue \" + this);\n       }\n-      return true;\n-    } else if (nonRunnableApps.remove(app)) {\n-      return false;\n-    } else {\n-      throw new IllegalStateException(\"Given app to remove \" + app +\n-          \" does not exist in queue \" + this);\n+    } finally {\n+      writeLock.unlock();\n     }\n+    // Update AM resource usage if needed\n+    if (runnable \u0026\u0026 app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n+      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n+    }\n+    return runnable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeApp(FSAppAttempt app) {\n    boolean runnable \u003d false;\n    writeLock.lock();\n    try {\n      if (runnableApps.remove(app)) {\n        runnable \u003d true;\n      } else if (nonRunnableApps.remove(app)) {\n        runnable \u003d false; //nop, runnable is initialised to false already\n      } else {\n        throw new IllegalStateException(\"Given app to remove \" + app +\n            \" does not exist in queue \" + this);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n    // Update AM resource usage if needed\n    if (runnable \u0026\u0026 app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n      Resources.subtractFrom(amResourceUsage, app.getAMResource());\n    }\n    return runnable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/08/14 2:43 PM",
          "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/07/14 9:13 AM",
          "commitNameOld": "1e553858f930e43fac62986549a178cdcf39384c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 18.23,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  public boolean removeApp(FSSchedulerApp app) {\n-    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n+  public boolean removeApp(FSAppAttempt app) {\n+    if (runnableApps.remove(app)) {\n       // Update AM resource usage\n       if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n         Resources.subtractFrom(amResourceUsage, app.getAMResource());\n       }\n       return true;\n-    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n+    } else if (nonRunnableApps.remove(app)) {\n       return false;\n     } else {\n       throw new IllegalStateException(\"Given app to remove \" + app +\n           \" does not exist in queue \" + this);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean removeApp(FSAppAttempt app) {\n    if (runnableApps.remove(app)) {\n      // Update AM resource usage\n      if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n        Resources.subtractFrom(amResourceUsage, app.getAMResource());\n      }\n      return true;\n    } else if (nonRunnableApps.remove(app)) {\n      return false;\n    } else {\n      throw new IllegalStateException(\"Given app to remove \" + app +\n          \" does not exist in queue \" + this);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {
            "oldValue": "[app-FSSchedulerApp]",
            "newValue": "[app-FSAppAttempt]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/08/14 2:43 PM",
          "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/07/14 9:13 AM",
          "commitNameOld": "1e553858f930e43fac62986549a178cdcf39384c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 18.23,
          "commitsBetweenForRepo": 122,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  public boolean removeApp(FSSchedulerApp app) {\n-    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n+  public boolean removeApp(FSAppAttempt app) {\n+    if (runnableApps.remove(app)) {\n       // Update AM resource usage\n       if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n         Resources.subtractFrom(amResourceUsage, app.getAMResource());\n       }\n       return true;\n-    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n+    } else if (nonRunnableApps.remove(app)) {\n       return false;\n     } else {\n       throw new IllegalStateException(\"Given app to remove \" + app +\n           \" does not exist in queue \" + this);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean removeApp(FSAppAttempt app) {\n    if (runnableApps.remove(app)) {\n      // Update AM resource usage\n      if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n        Resources.subtractFrom(amResourceUsage, app.getAMResource());\n      }\n      return true;\n    } else if (nonRunnableApps.remove(app)) {\n      return false;\n    } else {\n      throw new IllegalStateException(\"Given app to remove \" + app +\n          \" does not exist in queue \" + this);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "85d4c787e0f8ed913aaa61a6874ccf0408577b8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2128. FairScheduler: Incorrect calculation of amResource usage. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601050 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 6:21 PM",
      "commitName": "85d4c787e0f8ed913aaa61a6874ccf0408577b8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/06/14 5:56 PM",
      "commitNameOld": "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public boolean removeApp(FSSchedulerApp app) {\n     if (runnableAppScheds.remove(app.getAppSchedulable())) {\n       // Update AM resource usage\n-      if (app.getAMResource() !\u003d null) {\n+      if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n         Resources.subtractFrom(amResourceUsage, app.getAMResource());\n       }\n       return true;\n     } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n       return false;\n     } else {\n       throw new IllegalStateException(\"Given app to remove \" + app +\n           \" does not exist in queue \" + this);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeApp(FSSchedulerApp app) {\n    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n      // Update AM resource usage\n      if (app.isAmRunning() \u0026\u0026 app.getAMResource() !\u003d null) {\n        Resources.subtractFrom(amResourceUsage, app.getAMResource());\n      }\n      return true;\n    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n      return false;\n    } else {\n      throw new IllegalStateException(\"Given app to remove \" + app +\n          \" does not exist in queue \" + this);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1913. With Fair Scheduler, cluster can logjam when all resources are consumed by AMs (Wei Yan via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1599400 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/06/14 5:56 PM",
      "commitName": "16caa3fd18424a67fc01b1ae3a8fcdbc99c8cbc4",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "28/05/14 9:01 PM",
      "commitNameOld": "342da5b4d3d6f8ae4c9e6c7ece642f7378a6e87c",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,14 @@\n   public boolean removeApp(FSSchedulerApp app) {\n     if (runnableAppScheds.remove(app.getAppSchedulable())) {\n+      // Update AM resource usage\n+      if (app.getAMResource() !\u003d null) {\n+        Resources.subtractFrom(amResourceUsage, app.getAMResource());\n+      }\n       return true;\n     } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n       return false;\n     } else {\n       throw new IllegalStateException(\"Given app to remove \" + app +\n           \" does not exist in queue \" + this);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean removeApp(FSSchedulerApp app) {\n    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n      // Update AM resource usage\n      if (app.getAMResource() !\u003d null) {\n        Resources.subtractFrom(amResourceUsage, app.getAMResource());\n      }\n      return true;\n    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n      return false;\n    } else {\n      throw new IllegalStateException(\"Given app to remove \" + app +\n          \" does not exist in queue \" + this);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "7545d8bf996e5d060d5d613bf769ec52a62d428b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1241. In Fair Scheduler, maxRunningApps does not work for non-leaf queues. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/13 11:02 AM",
      "commitName": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1241. In Fair Scheduler, maxRunningApps does not work for non-leaf queues. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/11/13 11:02 AM",
          "commitName": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "25/10/13 5:27 PM",
          "commitNameOld": "025f1719472282a30aa26ae3e235e404f04ba932",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 34.77,
          "commitsBetweenForRepo": 181,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,10 @@\n-  public void removeApp(FSSchedulerApp app) {\n-    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n-      AppSchedulable appSched \u003d it.next();\n-      if (appSched.getApp() \u003d\u003d app) {\n-        it.remove();\n-        break;\n-      }\n+  public boolean removeApp(FSSchedulerApp app) {\n+    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n+      return true;\n+    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n+      return false;\n+    } else {\n+      throw new IllegalStateException(\"Given app to remove \" + app +\n+          \" does not exist in queue \" + this);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean removeApp(FSSchedulerApp app) {\n    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n      return true;\n    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n      return false;\n    } else {\n      throw new IllegalStateException(\"Given app to remove \" + app +\n          \" does not exist in queue \" + this);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1241. In Fair Scheduler, maxRunningApps does not work for non-leaf queues. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/11/13 11:02 AM",
          "commitName": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "25/10/13 5:27 PM",
          "commitNameOld": "025f1719472282a30aa26ae3e235e404f04ba932",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 34.77,
          "commitsBetweenForRepo": 181,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,10 @@\n-  public void removeApp(FSSchedulerApp app) {\n-    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n-      AppSchedulable appSched \u003d it.next();\n-      if (appSched.getApp() \u003d\u003d app) {\n-        it.remove();\n-        break;\n-      }\n+  public boolean removeApp(FSSchedulerApp app) {\n+    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n+      return true;\n+    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n+      return false;\n+    } else {\n+      throw new IllegalStateException(\"Given app to remove \" + app +\n+          \" does not exist in queue \" + this);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean removeApp(FSSchedulerApp app) {\n    if (runnableAppScheds.remove(app.getAppSchedulable())) {\n      return true;\n    } else if (nonRunnableAppScheds.remove(app.getAppSchedulable())) {\n      return false;\n    } else {\n      throw new IllegalStateException(\"Given app to remove \" + app +\n          \" does not exist in queue \" + this);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Yfilerename",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "commitDateOld": "29/11/12 6:51 PM",
      "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.38,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void removeApp(FSSchedulerApp app) {\n    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n      AppSchedulable appSched \u003d it.next();\n      if (appSched.getApp() \u003d\u003d app) {\n        it.remove();\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void removeApp(FSSchedulerApp app) {\n    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n      AppSchedulable appSched \u003d it.next();\n      if (appSched.getApp() \u003d\u003d app) {\n        it.remove();\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/07/12 5:43 PM",
      "commitNameOld": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 4.04,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,9 @@\n-  public void removeApp(SchedulerApp app) {\n+  public void removeApp(FSSchedulerApp app) {\n     for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n       AppSchedulable appSched \u003d it.next();\n       if (appSched.getApp() \u003d\u003d app) {\n         it.remove();\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeApp(FSSchedulerApp app) {\n    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n      AppSchedulable appSched \u003d it.next();\n      if (appSched.getApp() \u003d\u003d app) {\n        it.remove();\n        break;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {
        "oldValue": "[app-SchedulerApp]",
        "newValue": "[app-FSSchedulerApp]"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,9 @@\n+  public void removeApp(SchedulerApp app) {\n+    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n+      AppSchedulable appSched \u003d it.next();\n+      if (appSched.getApp() \u003d\u003d app) {\n+        it.remove();\n+        break;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void removeApp(SchedulerApp app) {\n    for (Iterator\u003cAppSchedulable\u003e it \u003d appScheds.iterator(); it.hasNext();) {\n      AppSchedulable appSched \u003d it.next();\n      if (appSched.getApp() \u003d\u003d app) {\n        it.remove();\n        break;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
    }
  }
}