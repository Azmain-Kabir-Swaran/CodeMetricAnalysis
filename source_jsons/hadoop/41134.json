{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairSharePolicy.java",
  "functionName": "compareFairShareUsage",
  "functionId": "compareFairShareUsage___s1-Schedulable__s2-Schedulable__resourceUsage1-Resource__resourceUsage2-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java",
  "functionStartLine": 171,
  "functionEndLine": 194,
  "numCommitsSeen": 25,
  "timeTaken": 1712,
  "changeHistory": [
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
    "f81a4efb8c40f99a9a6b7b42d3b6eeedf43eb27a"
  ],
  "changeHistoryShort": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": "Ybodychange",
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750": "Ybodychange",
    "f81a4efb8c40f99a9a6b7b42d3b6eeedf43eb27a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "20/07/18 10:46 AM",
      "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "14/09/17 11:23 AM",
      "commitNameOld": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 308.97,
      "commitsBetweenForRepo": 2762,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n     private int compareFairShareUsage(Schedulable s1, Schedulable s2,\n         Resource resourceUsage1, Resource resourceUsage2) {\n       double weight1 \u003d s1.getWeight();\n       double weight2 \u003d s2.getWeight();\n       double useToWeightRatio1;\n       double useToWeightRatio2;\n \n       if (weight1 \u003e 0.0 \u0026\u0026 weight2 \u003e 0.0) {\n         useToWeightRatio1 \u003d resourceUsage1.getMemorySize() / weight1;\n         useToWeightRatio2 \u003d resourceUsage2.getMemorySize() / weight2;\n-      } else { // Either weight1 or weight2 equals to 0\n-        if (weight1 \u003d\u003d weight2) {\n-          // If they have same weight, just compare usage\n-          useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n-          useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n-        } else {\n-          // By setting useToWeightRatios to negative weights, we give the\n-          // zero-weight one less priority, so the non-zero weight one will\n-          // be given slots.\n-          useToWeightRatio1 \u003d -weight1;\n-          useToWeightRatio2 \u003d -weight2;\n-        }\n+      } else if (weight1 \u003d\u003d weight2) { // Either weight1 or weight2 equals to 0\n+        // If they have same weight, just compare usage\n+        useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n+        useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n+      } else {\n+        // By setting useToWeightRatios to negative weights, we give the\n+        // zero-weight one less priority, so the non-zero weight one will\n+        // be given slots.\n+        useToWeightRatio1 \u003d -weight1;\n+        useToWeightRatio2 \u003d -weight2;\n       }\n \n       return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private int compareFairShareUsage(Schedulable s1, Schedulable s2,\n        Resource resourceUsage1, Resource resourceUsage2) {\n      double weight1 \u003d s1.getWeight();\n      double weight2 \u003d s2.getWeight();\n      double useToWeightRatio1;\n      double useToWeightRatio2;\n\n      if (weight1 \u003e 0.0 \u0026\u0026 weight2 \u003e 0.0) {\n        useToWeightRatio1 \u003d resourceUsage1.getMemorySize() / weight1;\n        useToWeightRatio2 \u003d resourceUsage2.getMemorySize() / weight2;\n      } else if (weight1 \u003d\u003d weight2) { // Either weight1 or weight2 equals to 0\n        // If they have same weight, just compare usage\n        useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n        useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n      } else {\n        // By setting useToWeightRatios to negative weights, we give the\n        // zero-weight one less priority, so the non-zero weight one will\n        // be given slots.\n        useToWeightRatio1 \u003d -weight1;\n        useToWeightRatio2 \u003d -weight2;\n      }\n\n      return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java",
      "extendedDetails": {}
    },
    "09b476e6dabe8039a41dde7930c8a9c0d14bb750": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6612. Update fair scheduler policies to be aware of resource types. (Contributed by Daniel Templeton via Yufei Gu)\n",
      "commitDate": "14/09/17 11:23 AM",
      "commitName": "09b476e6dabe8039a41dde7930c8a9c0d14bb750",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "25/07/17 1:00 PM",
      "commitNameOld": "f81a4efb8c40f99a9a6b7b42d3b6eeedf43eb27a",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 50.93,
      "commitsBetweenForRepo": 489,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n     private int compareFairShareUsage(Schedulable s1, Schedulable s2,\n         Resource resourceUsage1, Resource resourceUsage2) {\n-      double weight1 \u003d s1.getWeights().getWeight(ResourceType.MEMORY);\n-      double weight2 \u003d s2.getWeights().getWeight(ResourceType.MEMORY);\n+      double weight1 \u003d s1.getWeight();\n+      double weight2 \u003d s2.getWeight();\n       double useToWeightRatio1;\n       double useToWeightRatio2;\n+\n       if (weight1 \u003e 0.0 \u0026\u0026 weight2 \u003e 0.0) {\n         useToWeightRatio1 \u003d resourceUsage1.getMemorySize() / weight1;\n         useToWeightRatio2 \u003d resourceUsage2.getMemorySize() / weight2;\n       } else { // Either weight1 or weight2 equals to 0\n         if (weight1 \u003d\u003d weight2) {\n           // If they have same weight, just compare usage\n           useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n           useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n         } else {\n           // By setting useToWeightRatios to negative weights, we give the\n           // zero-weight one less priority, so the non-zero weight one will\n           // be given slots.\n           useToWeightRatio1 \u003d -weight1;\n           useToWeightRatio2 \u003d -weight2;\n         }\n       }\n \n       return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private int compareFairShareUsage(Schedulable s1, Schedulable s2,\n        Resource resourceUsage1, Resource resourceUsage2) {\n      double weight1 \u003d s1.getWeight();\n      double weight2 \u003d s2.getWeight();\n      double useToWeightRatio1;\n      double useToWeightRatio2;\n\n      if (weight1 \u003e 0.0 \u0026\u0026 weight2 \u003e 0.0) {\n        useToWeightRatio1 \u003d resourceUsage1.getMemorySize() / weight1;\n        useToWeightRatio2 \u003d resourceUsage2.getMemorySize() / weight2;\n      } else { // Either weight1 or weight2 equals to 0\n        if (weight1 \u003d\u003d weight2) {\n          // If they have same weight, just compare usage\n          useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n          useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n        } else {\n          // By setting useToWeightRatios to negative weights, we give the\n          // zero-weight one less priority, so the non-zero weight one will\n          // be given slots.\n          useToWeightRatio1 \u003d -weight1;\n          useToWeightRatio2 \u003d -weight2;\n        }\n      }\n\n      return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java",
      "extendedDetails": {}
    },
    "f81a4efb8c40f99a9a6b7b42d3b6eeedf43eb27a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6307. Refactor FairShareComparator#compare (Contributed by Yufei Gu via Daniel Templeton)\n",
      "commitDate": "25/07/17 1:00 PM",
      "commitName": "f81a4efb8c40f99a9a6b7b42d3b6eeedf43eb27a",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,25 @@\n+    private int compareFairShareUsage(Schedulable s1, Schedulable s2,\n+        Resource resourceUsage1, Resource resourceUsage2) {\n+      double weight1 \u003d s1.getWeights().getWeight(ResourceType.MEMORY);\n+      double weight2 \u003d s2.getWeights().getWeight(ResourceType.MEMORY);\n+      double useToWeightRatio1;\n+      double useToWeightRatio2;\n+      if (weight1 \u003e 0.0 \u0026\u0026 weight2 \u003e 0.0) {\n+        useToWeightRatio1 \u003d resourceUsage1.getMemorySize() / weight1;\n+        useToWeightRatio2 \u003d resourceUsage2.getMemorySize() / weight2;\n+      } else { // Either weight1 or weight2 equals to 0\n+        if (weight1 \u003d\u003d weight2) {\n+          // If they have same weight, just compare usage\n+          useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n+          useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n+        } else {\n+          // By setting useToWeightRatios to negative weights, we give the\n+          // zero-weight one less priority, so the non-zero weight one will\n+          // be given slots.\n+          useToWeightRatio1 \u003d -weight1;\n+          useToWeightRatio2 \u003d -weight2;\n+        }\n+      }\n+\n+      return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int compareFairShareUsage(Schedulable s1, Schedulable s2,\n        Resource resourceUsage1, Resource resourceUsage2) {\n      double weight1 \u003d s1.getWeights().getWeight(ResourceType.MEMORY);\n      double weight2 \u003d s2.getWeights().getWeight(ResourceType.MEMORY);\n      double useToWeightRatio1;\n      double useToWeightRatio2;\n      if (weight1 \u003e 0.0 \u0026\u0026 weight2 \u003e 0.0) {\n        useToWeightRatio1 \u003d resourceUsage1.getMemorySize() / weight1;\n        useToWeightRatio2 \u003d resourceUsage2.getMemorySize() / weight2;\n      } else { // Either weight1 or weight2 equals to 0\n        if (weight1 \u003d\u003d weight2) {\n          // If they have same weight, just compare usage\n          useToWeightRatio1 \u003d resourceUsage1.getMemorySize();\n          useToWeightRatio2 \u003d resourceUsage2.getMemorySize();\n        } else {\n          // By setting useToWeightRatios to negative weights, we give the\n          // zero-weight one less priority, so the non-zero weight one will\n          // be given slots.\n          useToWeightRatio1 \u003d -weight1;\n          useToWeightRatio2 \u003d -weight2;\n        }\n      }\n\n      return (int) Math.signum(useToWeightRatio1 - useToWeightRatio2);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/FairSharePolicy.java"
    }
  }
}