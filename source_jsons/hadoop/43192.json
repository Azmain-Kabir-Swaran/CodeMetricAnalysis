{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "submitApp",
  "functionId": "submitApp___app-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 982,
  "functionEndLine": 1053,
  "numCommitsSeen": 56,
  "timeTaken": 6346,
  "changeHistory": [
    "181e6d033ea764012b5d52757bafcf19713fd20a",
    "d07e873b7db6cb317eccb4768607c1afb505c99b",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
    "2d0662cfd57bd438421f912dc172e79a15835442",
    "27d60a16342fd39973d43b61008f54a8815a6237",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "6bf2c301924a3acae5a7510b8473f6292a5a471b",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "79bf5c084d4a063f1a933cae498af23edfd46792",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "181e6d033ea764012b5d52757bafcf19713fd20a": "Ybodychange",
    "d07e873b7db6cb317eccb4768607c1afb505c99b": "Ybodychange",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": "Ybodychange",
    "2d0662cfd57bd438421f912dc172e79a15835442": "Ybodychange",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Ymodifierchange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "6bf2c301924a3acae5a7510b8473f6292a5a471b": "Ybodychange",
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "79bf5c084d4a063f1a933cae498af23edfd46792": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "181e6d033ea764012b5d52757bafcf19713fd20a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10119. Option to reset AM failure count for YARN Service\n\nContributed by kyungwan nam.\n",
      "commitDate": "20/02/20 7:04 AM",
      "commitName": "181e6d033ea764012b5d52757bafcf19713fd20a",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "10/10/19 4:02 PM",
      "commitNameOld": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 132.67,
      "commitsBetweenForRepo": 454,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,72 @@\n   ApplicationId submitApp(Service app) throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n         .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n             .getConfiguration(), conf));\n+    submissionContext.setAttemptFailuresValidityInterval(YarnServiceConf\n+        .getLong(YarnServiceConf.AM_FAILURES_VALIDITY_INTERVAL,\n+            DEFAULT_AM_FAILURES_VALIDITY_INTERVAL, app.getConfiguration(),\n+            conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, app);\n     // add yarn sysfs to localResources\n     addYarnSysFs(appRootDir, localResources, app);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n     String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n             YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n             app.getConfiguration(), conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     addCredentials(amLaunchContext, app);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ApplicationId submitApp(Service app) throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n            .getConfiguration(), conf));\n    submissionContext.setAttemptFailuresValidityInterval(YarnServiceConf\n        .getLong(YarnServiceConf.AM_FAILURES_VALIDITY_INTERVAL,\n            DEFAULT_AM_FAILURES_VALIDITY_INTERVAL, app.getConfiguration(),\n            conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, app);\n    // add yarn sysfs to localResources\n    addYarnSysFs(appRootDir, localResources, app);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    addCredentials(amLaunchContext, app);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d07e873b7db6cb317eccb4768607c1afb505c99b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8569. Create an interface to provide cluster information to application. Contributed by Eric Yang\n",
      "commitDate": "26/10/18 5:57 PM",
      "commitName": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "22/10/18 12:59 PM",
      "commitNameOld": "292c9e017fb3fdf972f2b7a11de5223bfe07603b",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 4.21,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,68 @@\n   ApplicationId submitApp(Service app) throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n         .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n             .getConfiguration(), conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, app);\n+    // add yarn sysfs to localResources\n+    addYarnSysFs(appRootDir, localResources, app);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n     String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n-            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n-            conf), 1));\n+            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n+            app.getConfiguration(), conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     addCredentials(amLaunchContext, app);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ApplicationId submitApp(Service app) throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n            .getConfiguration(), conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, app);\n    // add yarn sysfs to localResources\n    addYarnSysFs(appRootDir, localResources, app);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    addCredentials(amLaunchContext, app);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
      "commitDate": "17/04/18 6:57 AM",
      "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "16/04/18 11:24 AM",
      "commitNameOld": "2d0662cfd57bd438421f912dc172e79a15835442",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   ApplicationId submitApp(Service app) throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n         .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n             .getConfiguration(), conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, app);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n     String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n             YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n             conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n-    addHdfsDelegationTokenIfSecure(amLaunchContext);\n+    addCredentials(amLaunchContext, app);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ApplicationId submitApp(Service app) throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n            .getConfiguration(), conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, app);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n            conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    addCredentials(amLaunchContext, app);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "2d0662cfd57bd438421f912dc172e79a15835442": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8060.  Added default readiness check for service components.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "16/04/18 11:24 AM",
      "commitName": "2d0662cfd57bd438421f912dc172e79a15835442",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/04/18 12:38 PM",
      "commitNameOld": "53b3e594732e7a567dda4e08b9a8af5f87a4472a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 3.95,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   ApplicationId submitApp(Service app) throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n-        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n-            conf));\n+        .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n+            .getConfiguration(), conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, app);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n     String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n             YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n             conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n-      queue \u003d conf.get(YARN_QUEUE, \"default\");\n+      queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     addHdfsDelegationTokenIfSecure(amLaunchContext);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ApplicationId submitApp(Service app) throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app\n            .getConfiguration(), conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, app);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n            conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    addHdfsDelegationTokenIfSecure(amLaunchContext);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/02/18 5:48 PM",
      "commitNameOld": "17f387e3c2123010a4b2ea5f3db631d15bacab35",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 25.87,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,66 @@\n-  private ApplicationId submitApp(Service app)\n-      throws IOException, YarnException {\n+  ApplicationId submitApp(Service app) throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n         .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n             conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, app);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n     String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n             YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n             conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     addHdfsDelegationTokenIfSecure(amLaunchContext);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ApplicationId submitApp(Service app) throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n            conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, app);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n            conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    addHdfsDelegationTokenIfSecure(amLaunchContext);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   private ApplicationId submitApp(Service app)\n       throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n         .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n             conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n-    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n+    addKeytabResourceIfSecure(fs, localResources, app);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n     String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n             YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n             conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n+    addHdfsDelegationTokenIfSecure(amLaunchContext);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationId submitApp(Service app)\n      throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n            conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, app);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n            conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    addHdfsDelegationTokenIfSecure(amLaunchContext);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "6bf2c301924a3acae5a7510b8473f6292a5a471b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7503. Configurable heap size / JVM opts in service AM. Contributed by Jonathan Hung\n",
      "commitDate": "16/11/17 10:53 AM",
      "commitName": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/11/17 6:57 PM",
      "commitNameOld": "4f40cd314ab14f735a465fb9dff2dc1bf118e703",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.66,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   private ApplicationId submitApp(Service app)\n       throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(YarnServiceConf\n         .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n             conf));\n \n     setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n-    String cmdStr \u003d buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n+    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n             YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n             conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationId submitApp(Service app)\n      throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n            conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(app, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n            conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6394. Support specifying YARN related params in the service REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,66 @@\n   private ApplicationId submitApp(Service app)\n       throws IOException, YarnException {\n     String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n-    submissionContext.setMaxAppAttempts(conf.getInt(\n-        YarnServiceConf.AM_RESTART_MAX, 2));\n+    submissionContext.setMaxAppAttempts(YarnServiceConf\n+        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n+            conf));\n+\n+    setLogAggregationContext(app, conf, submissionContext);\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n         addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n-    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n+    Map\u003cString, String\u003e env \u003d addAMEnv();\n \n     // create AM CLI\n-    String cmdStr \u003d\n-        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n+    String cmdStr \u003d buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n-        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n-            app.getConfiguration(), conf), 1));\n+        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n+            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n+            conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationId submitApp(Service app)\n      throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(YarnServiceConf\n        .getInt(YarnServiceConf.AM_RESTART_MAX, 20, app.getConfiguration(),\n            conf));\n\n    setLogAggregationContext(app, conf, submissionContext);\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv();\n\n    // create AM CLI\n    String cmdStr \u003d buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM,\n            YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(),\n            conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  private ApplicationId submitApp(Application app)\n+  private ApplicationId submitApp(Service app)\n       throws IOException, YarnException {\n-    String appName \u003d app.getName();\n+    String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(conf.getInt(\n         YarnServiceConf.AM_RESTART_MAX, 2));\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n-        addAMLog4jResource(appName, conf, localResources);\n+        addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n-    addJarResource(appName, localResources);\n+    addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n-    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n+    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n \n     // create AM CLI\n     String cmdStr \u003d\n-        buildCommandLine(appName, conf, appRootDir, hasAMLog4j);\n+        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n             app.getConfiguration(), conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n-    submissionContext.setApplicationName(appName);\n+    submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n-        AbstractClientProvider.createApplicationTags(appName, null, null);\n+        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationId submitApp(Service app)\n      throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(conf.getInt(\n        YarnServiceConf.AM_RESTART_MAX, 2));\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n\n    // create AM CLI\n    String cmdStr \u003d\n        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  private ApplicationId submitApp(Application app)\n+  private ApplicationId submitApp(Service app)\n       throws IOException, YarnException {\n-    String appName \u003d app.getName();\n+    String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(conf.getInt(\n         YarnServiceConf.AM_RESTART_MAX, 2));\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n-        addAMLog4jResource(appName, conf, localResources);\n+        addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n-    addJarResource(appName, localResources);\n+    addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n-    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n+    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n \n     // create AM CLI\n     String cmdStr \u003d\n-        buildCommandLine(appName, conf, appRootDir, hasAMLog4j);\n+        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n             app.getConfiguration(), conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n-    submissionContext.setApplicationName(appName);\n+    submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n-        AbstractClientProvider.createApplicationTags(appName, null, null);\n+        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationId submitApp(Service app)\n      throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(conf.getInt(\n        YarnServiceConf.AM_RESTART_MAX, 2));\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n\n    // create AM CLI\n    String cmdStr \u003d\n        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,63 +1,63 @@\n-  private ApplicationId submitApp(Application app)\n+  private ApplicationId submitApp(Service app)\n       throws IOException, YarnException {\n-    String appName \u003d app.getName();\n+    String serviceName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(conf.getInt(\n         YarnServiceConf.AM_RESTART_MAX, 2));\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasAMLog4j \u003d\n-        addAMLog4jResource(appName, conf, localResources);\n+        addAMLog4jResource(serviceName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n-    addJarResource(appName, localResources);\n+    addJarResource(serviceName, localResources);\n     // add keytab if in secure env\n-    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n+    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n \n     // create AM CLI\n     String cmdStr \u003d\n-        buildCommandLine(appName, conf, appRootDir, hasAMLog4j);\n+        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n         .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n             app.getConfiguration(), conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n       queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n-    submissionContext.setApplicationName(appName);\n+    submissionContext.setApplicationName(serviceName);\n     submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n-        AbstractClientProvider.createApplicationTags(appName, null, null);\n+        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ApplicationId submitApp(Service app)\n      throws IOException, YarnException {\n    String serviceName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(conf.getInt(\n        YarnServiceConf.AM_RESTART_MAX, 2));\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(serviceName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(serviceName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, serviceName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n\n    // create AM CLI\n    String cmdStr \u003d\n        buildCommandLine(serviceName, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(serviceName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(serviceName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[app-Application]",
            "newValue": "[app-Service]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,63 @@\n   private ApplicationId submitApp(Application app)\n       throws IOException, YarnException {\n     String appName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n-    submissionContext.setMaxAppAttempts(conf.getInt(KEY_AM_RESTART_LIMIT, 2));\n+    submissionContext.setMaxAppAttempts(conf.getInt(\n+        YarnServiceConf.AM_RESTART_MAX, 2));\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n-    boolean hasSliderAMLog4j \u003d\n+    boolean hasAMLog4j \u003d\n         addAMLog4jResource(appName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(appName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, conf, appName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n \n     // create AM CLI\n     String cmdStr \u003d\n-        buildCommandLine(appName, conf, appRootDir, hasSliderAMLog4j);\n+        buildCommandLine(appName, conf, appRootDir, hasAMLog4j);\n     submissionContext.setResource(Resource.newInstance(YarnServiceConf\n-        .getLong(KEY_AM_RESOURCE_MEM, DEFAULT_KEY_AM_RESOURCE_MEM,\n+        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n             app.getConfiguration(), conf), 1));\n     String queue \u003d app.getQueue();\n     if (StringUtils.isEmpty(queue)) {\n-      queue \u003d conf.get(KEY_YARN_QUEUE, \"default\");\n+      queue \u003d conf.get(YARN_QUEUE, \"default\");\n     }\n     submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(appName);\n-    submissionContext.setApplicationType(SliderKeys.APP_TYPE);\n+    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(appName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationId submitApp(Application app)\n      throws IOException, YarnException {\n    String appName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(conf.getInt(\n        YarnServiceConf.AM_RESTART_MAX, 2));\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasAMLog4j \u003d\n        addAMLog4jResource(appName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(appName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n\n    // create AM CLI\n    String cmdStr \u003d\n        buildCommandLine(appName, conf, appRootDir, hasAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(appName);\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(appName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "79bf5c084d4a063f1a933cae498af23edfd46792": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7029. Add more UTs in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,62 @@\n   private ApplicationId submitApp(Application app)\n       throws IOException, YarnException {\n     String appName \u003d app.getName();\n     Configuration conf \u003d getConfig();\n     Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n \n     YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n     ApplicationSubmissionContext submissionContext \u003d\n         yarnApp.getApplicationSubmissionContext();\n     ServiceApiUtil.validateCompResourceSize(\n         yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n         app);\n \n     submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n     if (app.getLifetime() \u003e 0) {\n       Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n       appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n       submissionContext.setApplicationTimeouts(appTimeout);\n     }\n     submissionContext.setMaxAppAttempts(conf.getInt(KEY_AM_RESTART_LIMIT, 2));\n \n     Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n \n     // copy local slideram-log4j.properties to hdfs and add to localResources\n     boolean hasSliderAMLog4j \u003d\n         addAMLog4jResource(appName, conf, localResources);\n     // copy jars to hdfs and add to localResources\n     addJarResource(appName, localResources);\n     // add keytab if in secure env\n     addKeytabResourceIfSecure(fs, localResources, conf, appName);\n     if (LOG.isDebugEnabled()) {\n       printLocalResources(localResources);\n     }\n     Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n \n     // create AM CLI\n     String cmdStr \u003d\n         buildCommandLine(appName, conf, appRootDir, hasSliderAMLog4j);\n-\n-    submissionContext.setResource(Resource.newInstance(\n-        conf.getLong(KEY_AM_RESOURCE_MEM, DEFAULT_KEY_AM_RESOURCE_MEM), 1));\n-    submissionContext.setQueue(conf.get(KEY_YARN_QUEUE, app.getQueue()));\n+    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n+        .getLong(KEY_AM_RESOURCE_MEM, DEFAULT_KEY_AM_RESOURCE_MEM,\n+            app.getConfiguration(), conf), 1));\n+    String queue \u003d app.getQueue();\n+    if (StringUtils.isEmpty(queue)) {\n+      queue \u003d conf.get(KEY_YARN_QUEUE, \"default\");\n+    }\n+    submissionContext.setQueue(queue);\n     submissionContext.setApplicationName(appName);\n     submissionContext.setApplicationType(SliderKeys.APP_TYPE);\n     Set\u003cString\u003e appTags \u003d\n         AbstractClientProvider.createApplicationTags(appName, null, null);\n     if (!appTags.isEmpty()) {\n       submissionContext.setApplicationTags(appTags);\n     }\n     ContainerLaunchContext amLaunchContext \u003d\n         Records.newRecord(ContainerLaunchContext.class);\n     amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n     amLaunchContext.setEnvironment(env);\n     amLaunchContext.setLocalResources(localResources);\n     submissionContext.setAMContainerSpec(amLaunchContext);\n     yarnClient.submitApplication(submissionContext);\n     return submissionContext.getApplicationId();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationId submitApp(Application app)\n      throws IOException, YarnException {\n    String appName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(conf.getInt(KEY_AM_RESTART_LIMIT, 2));\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasSliderAMLog4j \u003d\n        addAMLog4jResource(appName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(appName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n\n    // create AM CLI\n    String cmdStr \u003d\n        buildCommandLine(appName, conf, appRootDir, hasSliderAMLog4j);\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf\n        .getLong(KEY_AM_RESOURCE_MEM, DEFAULT_KEY_AM_RESOURCE_MEM,\n            app.getConfiguration(), conf), 1));\n    String queue \u003d app.getQueue();\n    if (StringUtils.isEmpty(queue)) {\n      queue \u003d conf.get(KEY_YARN_QUEUE, \"default\");\n    }\n    submissionContext.setQueue(queue);\n    submissionContext.setApplicationName(appName);\n    submissionContext.setApplicationType(SliderKeys.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(appName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,58 @@\n+  private ApplicationId submitApp(Application app)\n+      throws IOException, YarnException {\n+    String appName \u003d app.getName();\n+    Configuration conf \u003d getConfig();\n+    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n+\n+    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n+    ApplicationSubmissionContext submissionContext \u003d\n+        yarnApp.getApplicationSubmissionContext();\n+    ServiceApiUtil.validateCompResourceSize(\n+        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n+        app);\n+\n+    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n+    if (app.getLifetime() \u003e 0) {\n+      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n+      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n+      submissionContext.setApplicationTimeouts(appTimeout);\n+    }\n+    submissionContext.setMaxAppAttempts(conf.getInt(KEY_AM_RESTART_LIMIT, 2));\n+\n+    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n+\n+    // copy local slideram-log4j.properties to hdfs and add to localResources\n+    boolean hasSliderAMLog4j \u003d\n+        addAMLog4jResource(appName, conf, localResources);\n+    // copy jars to hdfs and add to localResources\n+    addJarResource(appName, localResources);\n+    // add keytab if in secure env\n+    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n+    if (LOG.isDebugEnabled()) {\n+      printLocalResources(localResources);\n+    }\n+    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n+\n+    // create AM CLI\n+    String cmdStr \u003d\n+        buildCommandLine(appName, conf, appRootDir, hasSliderAMLog4j);\n+\n+    submissionContext.setResource(Resource.newInstance(\n+        conf.getLong(KEY_AM_RESOURCE_MEM, DEFAULT_KEY_AM_RESOURCE_MEM), 1));\n+    submissionContext.setQueue(conf.get(KEY_YARN_QUEUE, app.getQueue()));\n+    submissionContext.setApplicationName(appName);\n+    submissionContext.setApplicationType(SliderKeys.APP_TYPE);\n+    Set\u003cString\u003e appTags \u003d\n+        AbstractClientProvider.createApplicationTags(appName, null, null);\n+    if (!appTags.isEmpty()) {\n+      submissionContext.setApplicationTags(appTags);\n+    }\n+    ContainerLaunchContext amLaunchContext \u003d\n+        Records.newRecord(ContainerLaunchContext.class);\n+    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n+    amLaunchContext.setEnvironment(env);\n+    amLaunchContext.setLocalResources(localResources);\n+    submissionContext.setAMContainerSpec(amLaunchContext);\n+    yarnClient.submitApplication(submissionContext);\n+    return submissionContext.getApplicationId();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationId submitApp(Application app)\n      throws IOException, YarnException {\n    String appName \u003d app.getName();\n    Configuration conf \u003d getConfig();\n    Path appRootDir \u003d fs.buildClusterDirPath(app.getName());\n\n    YarnClientApplication yarnApp \u003d yarnClient.createApplication();\n    ApplicationSubmissionContext submissionContext \u003d\n        yarnApp.getApplicationSubmissionContext();\n    ServiceApiUtil.validateCompResourceSize(\n        yarnApp.getNewApplicationResponse().getMaximumResourceCapability(),\n        app);\n\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\n    if (app.getLifetime() \u003e 0) {\n      Map\u003cApplicationTimeoutType, Long\u003e appTimeout \u003d new HashMap\u003c\u003e();\n      appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\n      submissionContext.setApplicationTimeouts(appTimeout);\n    }\n    submissionContext.setMaxAppAttempts(conf.getInt(KEY_AM_RESTART_LIMIT, 2));\n\n    Map\u003cString, LocalResource\u003e localResources \u003d new HashMap\u003c\u003e();\n\n    // copy local slideram-log4j.properties to hdfs and add to localResources\n    boolean hasSliderAMLog4j \u003d\n        addAMLog4jResource(appName, conf, localResources);\n    // copy jars to hdfs and add to localResources\n    addJarResource(appName, localResources);\n    // add keytab if in secure env\n    addKeytabResourceIfSecure(fs, localResources, conf, appName);\n    if (LOG.isDebugEnabled()) {\n      printLocalResources(localResources);\n    }\n    Map\u003cString, String\u003e env \u003d addAMEnv(conf);\n\n    // create AM CLI\n    String cmdStr \u003d\n        buildCommandLine(appName, conf, appRootDir, hasSliderAMLog4j);\n\n    submissionContext.setResource(Resource.newInstance(\n        conf.getLong(KEY_AM_RESOURCE_MEM, DEFAULT_KEY_AM_RESOURCE_MEM), 1));\n    submissionContext.setQueue(conf.get(KEY_YARN_QUEUE, app.getQueue()));\n    submissionContext.setApplicationName(appName);\n    submissionContext.setApplicationType(SliderKeys.APP_TYPE);\n    Set\u003cString\u003e appTags \u003d\n        AbstractClientProvider.createApplicationTags(appName, null, null);\n    if (!appTags.isEmpty()) {\n      submissionContext.setApplicationTags(appTags);\n    }\n    ContainerLaunchContext amLaunchContext \u003d\n        Records.newRecord(ContainerLaunchContext.class);\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\n    amLaunchContext.setEnvironment(env);\n    amLaunchContext.setLocalResources(localResources);\n    submissionContext.setAMContainerSpec(amLaunchContext);\n    yarnClient.submitApplication(submissionContext);\n    return submissionContext.getApplicationId();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}