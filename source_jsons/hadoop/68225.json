{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftNativeOutputStream.java",
  "functionName": "partUpload",
  "functionId": "partUpload___closingUpload-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeOutputStream.java",
  "functionStartLine": 282,
  "functionEndLine": 320,
  "numCommitsSeen": 4,
  "timeTaken": 609,
  "changeHistory": [
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,39 @@\n+  private void partUpload(boolean closingUpload) throws IOException {\n+    if (backupStream !\u003d null) {\n+      backupStream.close();\n+    }\n+\n+    if (closingUpload \u0026\u0026 partUpload \u0026\u0026 backupFile.length() \u003d\u003d 0) {\n+      //skipping the upload if\n+      // - it is close time\n+      // - the final partition is 0 bytes long\n+      // - one part has already been written\n+      SwiftUtils.debug(LOG, \"skipping upload of 0 byte final partition\");\n+      delete(backupFile);\n+    } else {\n+      partUpload \u003d true;\n+      boolean uploadSuccess \u003d false;\n+      int attempt \u003d 0;\n+      while(!uploadSuccess) {\n+        try {\n+          ++attempt;\n+          bytesUploaded +\u003d uploadFilePartAttempt(attempt);\n+          uploadSuccess \u003d true;\n+        } catch (IOException e) {\n+          LOG.info(\"Upload failed \" + e, e);\n+          if (attempt \u003e ATTEMPT_LIMIT) {\n+            throw e;\n+          }\n+        }\n+      }\n+      delete(backupFile);\n+      partNumber++;\n+      blockOffset \u003d 0;\n+      if (!closingUpload) {\n+        //if not the final upload, create a new output stream\n+        backupFile \u003d newBackupFile();\n+        backupStream \u003d\n+          new BufferedOutputStream(new FileOutputStream(backupFile));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void partUpload(boolean closingUpload) throws IOException {\n    if (backupStream !\u003d null) {\n      backupStream.close();\n    }\n\n    if (closingUpload \u0026\u0026 partUpload \u0026\u0026 backupFile.length() \u003d\u003d 0) {\n      //skipping the upload if\n      // - it is close time\n      // - the final partition is 0 bytes long\n      // - one part has already been written\n      SwiftUtils.debug(LOG, \"skipping upload of 0 byte final partition\");\n      delete(backupFile);\n    } else {\n      partUpload \u003d true;\n      boolean uploadSuccess \u003d false;\n      int attempt \u003d 0;\n      while(!uploadSuccess) {\n        try {\n          ++attempt;\n          bytesUploaded +\u003d uploadFilePartAttempt(attempt);\n          uploadSuccess \u003d true;\n        } catch (IOException e) {\n          LOG.info(\"Upload failed \" + e, e);\n          if (attempt \u003e ATTEMPT_LIMIT) {\n            throw e;\n          }\n        }\n      }\n      delete(backupFile);\n      partNumber++;\n      blockOffset \u003d 0;\n      if (!closingUpload) {\n        //if not the final upload, create a new output stream\n        backupFile \u003d newBackupFile();\n        backupStream \u003d\n          new BufferedOutputStream(new FileOutputStream(backupFile));\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeOutputStream.java"
    }
  }
}