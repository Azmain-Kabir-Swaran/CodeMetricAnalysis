{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogFormat.java",
  "functionName": "getFileCandidates",
  "functionId": "getFileCandidates___candidates-Set__File____useRegularPattern-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
  "functionStartLine": 346,
  "functionEndLine": 367,
  "numCommitsSeen": 47,
  "timeTaken": 1025,
  "changeHistory": [
    "5dfc38ff57669cba9078146e91ed990a1d25a3f0"
  ],
  "changeHistoryShort": {
    "5dfc38ff57669cba9078146e91ed990a1d25a3f0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5dfc38ff57669cba9078146e91ed990a1d25a3f0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5237. Fix missing log files issue in rolling log aggregation. Contributed by Xuan Gong.\n",
      "commitDate": "15/06/16 4:17 PM",
      "commitName": "5dfc38ff57669cba9078146e91ed990a1d25a3f0",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,22 @@\n+    private Set\u003cFile\u003e getFileCandidates(Set\u003cFile\u003e candidates,\n+        boolean useRegularPattern) {\n+      filterFiles(\n+          useRegularPattern ? this.logAggregationContext.getIncludePattern()\n+              : this.logAggregationContext.getRolledLogsIncludePattern(),\n+          candidates, false);\n+\n+      filterFiles(\n+          useRegularPattern ? this.logAggregationContext.getExcludePattern()\n+              : this.logAggregationContext.getRolledLogsExcludePattern(),\n+          candidates, true);\n+\n+      Iterable\u003cFile\u003e mask \u003d\n+          Iterables.filter(candidates, new Predicate\u003cFile\u003e() {\n+            @Override\n+            public boolean apply(File next) {\n+              return !alreadyUploadedLogFiles\n+                  .contains(getLogFileMetaData(next));\n+            }\n+          });\n+      return Sets.newHashSet(mask);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Set\u003cFile\u003e getFileCandidates(Set\u003cFile\u003e candidates,\n        boolean useRegularPattern) {\n      filterFiles(\n          useRegularPattern ? this.logAggregationContext.getIncludePattern()\n              : this.logAggregationContext.getRolledLogsIncludePattern(),\n          candidates, false);\n\n      filterFiles(\n          useRegularPattern ? this.logAggregationContext.getExcludePattern()\n              : this.logAggregationContext.getRolledLogsExcludePattern(),\n          candidates, true);\n\n      Iterable\u003cFile\u003e mask \u003d\n          Iterables.filter(candidates, new Predicate\u003cFile\u003e() {\n            @Override\n            public boolean apply(File next) {\n              return !alreadyUploadedLogFiles\n                  .contains(getLogFileMetaData(next));\n            }\n          });\n      return Sets.newHashSet(mask);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java"
    }
  }
}