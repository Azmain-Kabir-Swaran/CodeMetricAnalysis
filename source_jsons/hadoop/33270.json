{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NvidiaDockerV1CommandPlugin.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java",
  "functionStartLine": 90,
  "functionEndLine": 148,
  "numCommitsSeen": 3,
  "timeTaken": 1736,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/12/17 12:06 AM",
      "commitNameOld": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 472.41,
      "commitsBetweenForRepo": 4098,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,59 @@\n   private void init() throws ContainerExecutionException {\n     String endpoint \u003d conf.get(\n         YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT,\n         YarnConfiguration.DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT);\n     if (null \u003d\u003d endpoint || endpoint.isEmpty()) {\n       LOG.info(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT\n           + \" set to empty, skip init ..\");\n       return;\n     }\n     String cliOptions;\n     try {\n       // Talk to plugin server and get options\n       URL url \u003d new URL(endpoint);\n       URLConnection uc \u003d url.openConnection();\n       uc.setRequestProperty(\"X-Requested-With\", \"Curl\");\n \n       StringWriter writer \u003d new StringWriter();\n       IOUtils.copy(uc.getInputStream(), writer, \"utf-8\");\n       cliOptions \u003d writer.toString();\n \n       LOG.info(\"Additional docker CLI options from plugin to run GPU \"\n           + \"containers:\" + cliOptions);\n \n       // Parse cli options\n       // Examples like:\n       // --device\u003d/dev/nvidiactl --device\u003d/dev/nvidia-uvm --device\u003d/dev/nvidia0\n       // --volume-driver\u003dnvidia-docker\n       // --volume\u003dnvidia_driver_352.68:/usr/local/nvidia:ro\n \n       for (String str : cliOptions.split(\" \")) {\n         str \u003d str.trim();\n         if (str.startsWith(DEVICE_OPTION)) {\n           addToCommand(DEVICE_OPTION, getValue(str));\n         } else if (str.startsWith(VOLUME_DRIVER_OPTION)) {\n           volumeDriver \u003d getValue(str);\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found volume-driver:\" + volumeDriver);\n-          }\n+          LOG.debug(\"Found volume-driver:{}\", volumeDriver);\n         } else if (str.startsWith(MOUNT_RO_OPTION)) {\n           String mount \u003d getValue(str);\n           if (!mount.endsWith(\":ro\")) {\n             throw new IllegalArgumentException(\n                 \"Should not have mount other than ro, command\u003d\" + str);\n           }\n           addToCommand(MOUNT_RO_OPTION,\n               mount.substring(0, mount.lastIndexOf(\u0027:\u0027)));\n         } else{\n           throw new IllegalArgumentException(\"Unsupported option:\" + str);\n         }\n       }\n     } catch (RuntimeException e) {\n       LOG.warn(\n           \"RuntimeException of \" + this.getClass().getSimpleName() + \" init:\",\n           e);\n       throw new ContainerExecutionException(e);\n     } catch (IOException e) {\n       LOG.warn(\"IOException of \" + this.getClass().getSimpleName() + \" init:\",\n           e);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws ContainerExecutionException {\n    String endpoint \u003d conf.get(\n        YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT,\n        YarnConfiguration.DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT);\n    if (null \u003d\u003d endpoint || endpoint.isEmpty()) {\n      LOG.info(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT\n          + \" set to empty, skip init ..\");\n      return;\n    }\n    String cliOptions;\n    try {\n      // Talk to plugin server and get options\n      URL url \u003d new URL(endpoint);\n      URLConnection uc \u003d url.openConnection();\n      uc.setRequestProperty(\"X-Requested-With\", \"Curl\");\n\n      StringWriter writer \u003d new StringWriter();\n      IOUtils.copy(uc.getInputStream(), writer, \"utf-8\");\n      cliOptions \u003d writer.toString();\n\n      LOG.info(\"Additional docker CLI options from plugin to run GPU \"\n          + \"containers:\" + cliOptions);\n\n      // Parse cli options\n      // Examples like:\n      // --device\u003d/dev/nvidiactl --device\u003d/dev/nvidia-uvm --device\u003d/dev/nvidia0\n      // --volume-driver\u003dnvidia-docker\n      // --volume\u003dnvidia_driver_352.68:/usr/local/nvidia:ro\n\n      for (String str : cliOptions.split(\" \")) {\n        str \u003d str.trim();\n        if (str.startsWith(DEVICE_OPTION)) {\n          addToCommand(DEVICE_OPTION, getValue(str));\n        } else if (str.startsWith(VOLUME_DRIVER_OPTION)) {\n          volumeDriver \u003d getValue(str);\n          LOG.debug(\"Found volume-driver:{}\", volumeDriver);\n        } else if (str.startsWith(MOUNT_RO_OPTION)) {\n          String mount \u003d getValue(str);\n          if (!mount.endsWith(\":ro\")) {\n            throw new IllegalArgumentException(\n                \"Should not have mount other than ro, command\u003d\" + str);\n          }\n          addToCommand(MOUNT_RO_OPTION,\n              mount.substring(0, mount.lastIndexOf(\u0027:\u0027)));\n        } else{\n          throw new IllegalArgumentException(\"Unsupported option:\" + str);\n        }\n      }\n    } catch (RuntimeException e) {\n      LOG.warn(\n          \"RuntimeException of \" + this.getClass().getSimpleName() + \" init:\",\n          e);\n      throw new ContainerExecutionException(e);\n    } catch (IOException e) {\n      LOG.warn(\"IOException of \" + this.getClass().getSimpleName() + \" init:\",\n          e);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java",
      "extendedDetails": {}
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,61 @@\n+  private void init() throws ContainerExecutionException {\n+    String endpoint \u003d conf.get(\n+        YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT,\n+        YarnConfiguration.DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT);\n+    if (null \u003d\u003d endpoint || endpoint.isEmpty()) {\n+      LOG.info(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT\n+          + \" set to empty, skip init ..\");\n+      return;\n+    }\n+    String cliOptions;\n+    try {\n+      // Talk to plugin server and get options\n+      URL url \u003d new URL(endpoint);\n+      URLConnection uc \u003d url.openConnection();\n+      uc.setRequestProperty(\"X-Requested-With\", \"Curl\");\n+\n+      StringWriter writer \u003d new StringWriter();\n+      IOUtils.copy(uc.getInputStream(), writer, \"utf-8\");\n+      cliOptions \u003d writer.toString();\n+\n+      LOG.info(\"Additional docker CLI options from plugin to run GPU \"\n+          + \"containers:\" + cliOptions);\n+\n+      // Parse cli options\n+      // Examples like:\n+      // --device\u003d/dev/nvidiactl --device\u003d/dev/nvidia-uvm --device\u003d/dev/nvidia0\n+      // --volume-driver\u003dnvidia-docker\n+      // --volume\u003dnvidia_driver_352.68:/usr/local/nvidia:ro\n+\n+      for (String str : cliOptions.split(\" \")) {\n+        str \u003d str.trim();\n+        if (str.startsWith(DEVICE_OPTION)) {\n+          addToCommand(DEVICE_OPTION, getValue(str));\n+        } else if (str.startsWith(VOLUME_DRIVER_OPTION)) {\n+          volumeDriver \u003d getValue(str);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found volume-driver:\" + volumeDriver);\n+          }\n+        } else if (str.startsWith(MOUNT_RO_OPTION)) {\n+          String mount \u003d getValue(str);\n+          if (!mount.endsWith(\":ro\")) {\n+            throw new IllegalArgumentException(\n+                \"Should not have mount other than ro, command\u003d\" + str);\n+          }\n+          addToCommand(MOUNT_RO_OPTION,\n+              mount.substring(0, mount.lastIndexOf(\u0027:\u0027)));\n+        } else{\n+          throw new IllegalArgumentException(\"Unsupported option:\" + str);\n+        }\n+      }\n+    } catch (RuntimeException e) {\n+      LOG.warn(\n+          \"RuntimeException of \" + this.getClass().getSimpleName() + \" init:\",\n+          e);\n+      throw new ContainerExecutionException(e);\n+    } catch (IOException e) {\n+      LOG.warn(\"IOException of \" + this.getClass().getSimpleName() + \" init:\",\n+          e);\n+      throw new ContainerExecutionException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void init() throws ContainerExecutionException {\n    String endpoint \u003d conf.get(\n        YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT,\n        YarnConfiguration.DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT);\n    if (null \u003d\u003d endpoint || endpoint.isEmpty()) {\n      LOG.info(YarnConfiguration.NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT\n          + \" set to empty, skip init ..\");\n      return;\n    }\n    String cliOptions;\n    try {\n      // Talk to plugin server and get options\n      URL url \u003d new URL(endpoint);\n      URLConnection uc \u003d url.openConnection();\n      uc.setRequestProperty(\"X-Requested-With\", \"Curl\");\n\n      StringWriter writer \u003d new StringWriter();\n      IOUtils.copy(uc.getInputStream(), writer, \"utf-8\");\n      cliOptions \u003d writer.toString();\n\n      LOG.info(\"Additional docker CLI options from plugin to run GPU \"\n          + \"containers:\" + cliOptions);\n\n      // Parse cli options\n      // Examples like:\n      // --device\u003d/dev/nvidiactl --device\u003d/dev/nvidia-uvm --device\u003d/dev/nvidia0\n      // --volume-driver\u003dnvidia-docker\n      // --volume\u003dnvidia_driver_352.68:/usr/local/nvidia:ro\n\n      for (String str : cliOptions.split(\" \")) {\n        str \u003d str.trim();\n        if (str.startsWith(DEVICE_OPTION)) {\n          addToCommand(DEVICE_OPTION, getValue(str));\n        } else if (str.startsWith(VOLUME_DRIVER_OPTION)) {\n          volumeDriver \u003d getValue(str);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found volume-driver:\" + volumeDriver);\n          }\n        } else if (str.startsWith(MOUNT_RO_OPTION)) {\n          String mount \u003d getValue(str);\n          if (!mount.endsWith(\":ro\")) {\n            throw new IllegalArgumentException(\n                \"Should not have mount other than ro, command\u003d\" + str);\n          }\n          addToCommand(MOUNT_RO_OPTION,\n              mount.substring(0, mount.lastIndexOf(\u0027:\u0027)));\n        } else{\n          throw new IllegalArgumentException(\"Unsupported option:\" + str);\n        }\n      }\n    } catch (RuntimeException e) {\n      LOG.warn(\n          \"RuntimeException of \" + this.getClass().getSimpleName() + \" init:\",\n          e);\n      throw new ContainerExecutionException(e);\n    } catch (IOException e) {\n      LOG.warn(\"IOException of \" + this.getClass().getSimpleName() + \" init:\",\n          e);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java"
    }
  }
}