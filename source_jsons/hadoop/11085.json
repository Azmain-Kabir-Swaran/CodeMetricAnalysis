{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DiskBalancer.java",
  "functionName": "executePlan",
  "functionId": "executePlan",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
  "functionStartLine": 527,
  "functionEndLine": 547,
  "numCommitsSeen": 32,
  "timeTaken": 1561,
  "changeHistory": [
    "bee9f57f5ca9f037ade932c6fd01b0dad47a1296",
    "9c6a4383cac29b2893ce14e6c9a75705fabfd522",
    "d84ab8a5786c9320e4708b2f0d54f978fee5ba95",
    "2b1b2faf76a7ff148650a7836935a85439f60c49"
  ],
  "changeHistoryShort": {
    "bee9f57f5ca9f037ade932c6fd01b0dad47a1296": "Ybodychange",
    "9c6a4383cac29b2893ce14e6c9a75705fabfd522": "Ybodychange",
    "d84ab8a5786c9320e4708b2f0d54f978fee5ba95": "Ybodychange",
    "2b1b2faf76a7ff148650a7836935a85439f60c49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bee9f57f5ca9f037ade932c6fd01b0dad47a1296": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10808. DiskBalancer does not execute multi-steps plan-redux. Contributed by Anu Engineer.\n",
      "commitDate": "09/09/16 3:00 PM",
      "commitName": "bee9f57f5ca9f037ade932c6fd01b0dad47a1296",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "08/09/16 8:00 PM",
      "commitNameOld": "baab48922a301d639ea84ecf00d8a7616acd950d",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n   private void executePlan() {\n     Preconditions.checkState(lock.isHeldByCurrentThread());\n     this.blockMover.setRunnable();\n     if (this.scheduler.isShutdown()) {\n       this.scheduler \u003d Executors.newSingleThreadExecutor();\n     }\n \n     this.future \u003d scheduler.submit(new Runnable() {\n       @Override\n       public void run() {\n         Thread.currentThread().setName(\"DiskBalancerThread\");\n         LOG.info(\"Executing Disk balancer plan. Plan File: {}, Plan ID: {}\",\n-                planFile, planID);\n-        try {\n-          for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n-              workMap.entrySet()) {\n-            blockMover.copyBlocks(entry.getKey(), entry.getValue());\n-          }\n-        } finally {\n-          blockMover.setExitFlag();\n+            planFile, planID);\n+        for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n+            workMap.entrySet()) {\n+          blockMover.setRunnable();\n+          blockMover.copyBlocks(entry.getKey(), entry.getValue());\n         }\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void executePlan() {\n    Preconditions.checkState(lock.isHeldByCurrentThread());\n    this.blockMover.setRunnable();\n    if (this.scheduler.isShutdown()) {\n      this.scheduler \u003d Executors.newSingleThreadExecutor();\n    }\n\n    this.future \u003d scheduler.submit(new Runnable() {\n      @Override\n      public void run() {\n        Thread.currentThread().setName(\"DiskBalancerThread\");\n        LOG.info(\"Executing Disk balancer plan. Plan File: {}, Plan ID: {}\",\n            planFile, planID);\n        for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n            workMap.entrySet()) {\n          blockMover.setRunnable();\n          blockMover.copyBlocks(entry.getKey(), entry.getValue());\n        }\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "9c6a4383cac29b2893ce14e6c9a75705fabfd522": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10681. DiskBalancer: query command should report Plan file path apart from PlanID. (Manoj Govindassamy via lei)\n",
      "commitDate": "09/08/16 3:59 PM",
      "commitName": "9c6a4383cac29b2893ce14e6c9a75705fabfd522",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "08/08/16 12:02 PM",
      "commitNameOld": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   private void executePlan() {\n     Preconditions.checkState(lock.isHeldByCurrentThread());\n     this.blockMover.setRunnable();\n     if (this.scheduler.isShutdown()) {\n       this.scheduler \u003d Executors.newSingleThreadExecutor();\n     }\n \n     this.future \u003d scheduler.submit(new Runnable() {\n       @Override\n       public void run() {\n         Thread.currentThread().setName(\"DiskBalancerThread\");\n-        LOG.info(\"Executing Disk balancer plan. Plan ID -  \" + planID);\n+        LOG.info(\"Executing Disk balancer plan. Plan File: {}, Plan ID: {}\",\n+                planFile, planID);\n         try {\n           for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n               workMap.entrySet()) {\n             blockMover.copyBlocks(entry.getKey(), entry.getValue());\n           }\n         } finally {\n           blockMover.setExitFlag();\n         }\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void executePlan() {\n    Preconditions.checkState(lock.isHeldByCurrentThread());\n    this.blockMover.setRunnable();\n    if (this.scheduler.isShutdown()) {\n      this.scheduler \u003d Executors.newSingleThreadExecutor();\n    }\n\n    this.future \u003d scheduler.submit(new Runnable() {\n      @Override\n      public void run() {\n        Thread.currentThread().setName(\"DiskBalancerThread\");\n        LOG.info(\"Executing Disk balancer plan. Plan File: {}, Plan ID: {}\",\n                planFile, planID);\n        try {\n          for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n              workMap.entrySet()) {\n            blockMover.copyBlocks(entry.getKey(), entry.getValue());\n          }\n        } finally {\n          blockMover.setExitFlag();\n        }\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "d84ab8a5786c9320e4708b2f0d54f978fee5ba95": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10598. DiskBalancer does not execute multi-steps plan. Contributed by Lei (Eddy) Xu.\n",
      "commitDate": "26/07/16 4:01 PM",
      "commitName": "d84ab8a5786c9320e4708b2f0d54f978fee5ba95",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "14/07/16 10:40 AM",
      "commitNameOld": "382dff74751b745de28a212df4897f525111d228",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 12.22,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   private void executePlan() {\n     Preconditions.checkState(lock.isHeldByCurrentThread());\n     this.blockMover.setRunnable();\n     if (this.scheduler.isShutdown()) {\n       this.scheduler \u003d Executors.newSingleThreadExecutor();\n     }\n \n     this.future \u003d scheduler.submit(new Runnable() {\n       @Override\n       public void run() {\n         Thread.currentThread().setName(\"DiskBalancerThread\");\n         LOG.info(\"Executing Disk balancer plan. Plan ID -  \" + planID);\n-\n-        for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n-            workMap.entrySet()) {\n-          blockMover.copyBlocks(entry.getKey(), entry.getValue());\n+        try {\n+          for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n+              workMap.entrySet()) {\n+            blockMover.copyBlocks(entry.getKey(), entry.getValue());\n+          }\n+        } finally {\n+          blockMover.setExitFlag();\n         }\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void executePlan() {\n    Preconditions.checkState(lock.isHeldByCurrentThread());\n    this.blockMover.setRunnable();\n    if (this.scheduler.isShutdown()) {\n      this.scheduler \u003d Executors.newSingleThreadExecutor();\n    }\n\n    this.future \u003d scheduler.submit(new Runnable() {\n      @Override\n      public void run() {\n        Thread.currentThread().setName(\"DiskBalancerThread\");\n        LOG.info(\"Executing Disk balancer plan. Plan ID -  \" + planID);\n        try {\n          for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n              workMap.entrySet()) {\n            blockMover.copyBlocks(entry.getKey(), entry.getValue());\n          }\n        } finally {\n          blockMover.setExitFlag();\n        }\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java",
      "extendedDetails": {}
    },
    "2b1b2faf76a7ff148650a7836935a85439f60c49": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9671. DiskBalancer: SubmitPlan implementation. (Contributed by Anu Engineer)\n",
      "commitDate": "23/06/16 6:18 PM",
      "commitName": "2b1b2faf76a7ff148650a7836935a85439f60c49",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,20 @@\n+  private void executePlan() {\n+    Preconditions.checkState(lock.isHeldByCurrentThread());\n+    this.blockMover.setRunnable();\n+    if (this.scheduler.isShutdown()) {\n+      this.scheduler \u003d Executors.newSingleThreadExecutor();\n+    }\n+\n+    this.future \u003d scheduler.submit(new Runnable() {\n+      @Override\n+      public void run() {\n+        Thread.currentThread().setName(\"DiskBalancerThread\");\n+        LOG.info(\"Executing Disk balancer plan. Plan ID -  \" + planID);\n+\n+        for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n+            workMap.entrySet()) {\n+          blockMover.copyBlocks(entry.getKey(), entry.getValue());\n+        }\n+      }\n+    });\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void executePlan() {\n    Preconditions.checkState(lock.isHeldByCurrentThread());\n    this.blockMover.setRunnable();\n    if (this.scheduler.isShutdown()) {\n      this.scheduler \u003d Executors.newSingleThreadExecutor();\n    }\n\n    this.future \u003d scheduler.submit(new Runnable() {\n      @Override\n      public void run() {\n        Thread.currentThread().setName(\"DiskBalancerThread\");\n        LOG.info(\"Executing Disk balancer plan. Plan ID -  \" + planID);\n\n        for (Map.Entry\u003cVolumePair, DiskBalancerWorkItem\u003e entry :\n            workMap.entrySet()) {\n          blockMover.copyBlocks(entry.getKey(), entry.getValue());\n        }\n      }\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DiskBalancer.java"
    }
  }
}