{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "setupResponseOldVersionFatal",
  "functionId": "setupResponseOldVersionFatal___response-ByteArrayOutputStream__call-RpcCall__rv-Writable__errorClass-String__error-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 3327,
  "functionEndLine": 3339,
  "numCommitsSeen": 577,
  "timeTaken": 7799,
  "changeHistory": [
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "476a251e5efe5e5850671f924e622b587c262653",
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2",
    "4b9c956bc56cec2c5b669102340d0912e0db3517",
    "940389afce6a1b9b9e1519aed528cbc444786756",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Yparameterchange",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Yparameterchange",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Yparameterchange",
    "476a251e5efe5e5850671f924e622b587c262653": "Ybodychange",
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2": "Ybodychange",
    "4b9c956bc56cec2c5b669102340d0912e0db3517": "Ybodychange",
    "940389afce6a1b9b9e1519aed528cbc444786756": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 2:04 PM",
      "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n-                             Call call,\n+                             RpcCall call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n     out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n     WritableUtils.writeString(out, errorClass);\n     WritableUtils.writeString(out, error);\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             RpcCall call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[response-ByteArrayOutputStream, call-Call, rv-Writable, errorClass-String, error-String]",
        "newValue": "[response-ByteArrayOutputStream, call-RpcCall, rv-Writable, errorClass-String, error-String]"
      }
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Yparameterchange",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 9:44 AM",
      "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n-                             RpcCall call,\n+                             Call call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n     out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n     WritableUtils.writeString(out, errorClass);\n     WritableUtils.writeString(out, error);\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             Call call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[response-ByteArrayOutputStream, call-RpcCall, rv-Writable, errorClass-String, error-String]",
        "newValue": "[response-ByteArrayOutputStream, call-Call, rv-Writable, errorClass-String, error-String]"
      }
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 11:22 AM",
      "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 21.93,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n-                             Call call,\n+                             RpcCall call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n     out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n     WritableUtils.writeString(out, errorClass);\n     WritableUtils.writeString(out, error);\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             RpcCall call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[response-ByteArrayOutputStream, call-Call, rv-Writable, errorClass-String, error-String]",
        "newValue": "[response-ByteArrayOutputStream, call-RpcCall, rv-Writable, errorClass-String, error-String]"
      }
    },
    "476a251e5efe5e5850671f924e622b587c262653": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12483. Maintain wrapped SASL ordering for postponed IPC responses. (Daryn Sharp via yliu)\n",
      "commitDate": "18/10/15 6:54 PM",
      "commitName": "476a251e5efe5e5850671f924e622b587c262653",
      "commitAuthor": "yliu",
      "commitDateOld": "12/10/15 1:09 AM",
      "commitNameOld": "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,13 @@\n   private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                              Call call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n     out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n     WritableUtils.writeString(out, errorClass);\n     WritableUtils.writeString(out, error);\n-\n-    if (call.connection.useWrap) {\n-      wrapWithSasl(response, call);\n-    }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             Call call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/12 9:56 AM",
      "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/05/12 9:56 AM",
          "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "02/05/12 11:35 PM",
          "commitNameOld": "d94899877709836153244c2f0c5f14c37c9d4795",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 8.43,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,17 @@\n-  private void setupResponse(ByteArrayOutputStream response, \n-                             Call call, Status status, \n+  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n+                             Call call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n+    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n-    out.writeInt(status.state);           // write status\n+    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n+    WritableUtils.writeString(out, errorClass);\n+    WritableUtils.writeString(out, error);\n \n-    if (status \u003d\u003d Status.SUCCESS) {\n-      try {\n-        rv.write(out);\n-      } catch (Throwable t) {\n-        LOG.warn(\"Error serializing call response for call \" + call, t);\n-        // Call back to same function - this is OK since the\n-        // buffer is reset at the top, and since status is changed\n-        // to ERROR it won\u0027t infinite loop.\n-        setupResponse(response, call, Status.ERROR,\n-            null, t.getClass().getName(),\n-            StringUtils.stringifyException(t));\n-        return;\n-      }\n-    } else {\n-      WritableUtils.writeString(out, errorClass);\n-      WritableUtils.writeString(out, error);\n-    }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             Call call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "setupResponse",
            "newValue": "setupResponseOldVersionFatal"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/05/12 9:56 AM",
          "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "02/05/12 11:35 PM",
          "commitNameOld": "d94899877709836153244c2f0c5f14c37c9d4795",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 8.43,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,17 @@\n-  private void setupResponse(ByteArrayOutputStream response, \n-                             Call call, Status status, \n+  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n+                             Call call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n+    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n-    out.writeInt(status.state);           // write status\n+    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n+    WritableUtils.writeString(out, errorClass);\n+    WritableUtils.writeString(out, error);\n \n-    if (status \u003d\u003d Status.SUCCESS) {\n-      try {\n-        rv.write(out);\n-      } catch (Throwable t) {\n-        LOG.warn(\"Error serializing call response for call \" + call, t);\n-        // Call back to same function - this is OK since the\n-        // buffer is reset at the top, and since status is changed\n-        // to ERROR it won\u0027t infinite loop.\n-        setupResponse(response, call, Status.ERROR,\n-            null, t.getClass().getName(),\n-            StringUtils.stringifyException(t));\n-        return;\n-      }\n-    } else {\n-      WritableUtils.writeString(out, errorClass);\n-      WritableUtils.writeString(out, error);\n-    }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             Call call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[response-ByteArrayOutputStream, call-Call, status-Status, rv-Writable, errorClass-String, error-String]",
            "newValue": "[response-ByteArrayOutputStream, call-Call, rv-Writable, errorClass-String, error-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/05/12 9:56 AM",
          "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "02/05/12 11:35 PM",
          "commitNameOld": "d94899877709836153244c2f0c5f14c37c9d4795",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 8.43,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,17 @@\n-  private void setupResponse(ByteArrayOutputStream response, \n-                             Call call, Status status, \n+  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n+                             Call call,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n+    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.callId);                // write call id\n-    out.writeInt(status.state);           // write status\n+    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n+    WritableUtils.writeString(out, errorClass);\n+    WritableUtils.writeString(out, error);\n \n-    if (status \u003d\u003d Status.SUCCESS) {\n-      try {\n-        rv.write(out);\n-      } catch (Throwable t) {\n-        LOG.warn(\"Error serializing call response for call \" + call, t);\n-        // Call back to same function - this is OK since the\n-        // buffer is reset at the top, and since status is changed\n-        // to ERROR it won\u0027t infinite loop.\n-        setupResponse(response, call, Status.ERROR,\n-            null, t.getClass().getName(),\n-            StringUtils.stringifyException(t));\n-        return;\n-      }\n-    } else {\n-      WritableUtils.writeString(out, errorClass);\n-      WritableUtils.writeString(out, error);\n-    }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponseOldVersionFatal(ByteArrayOutputStream response, \n                             Call call,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    final int OLD_VERSION_FATAL_STATUS \u003d -1;\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(OLD_VERSION_FATAL_STATUS);   // write FATAL_STATUS\n    WritableUtils.writeString(out, errorClass);\n    WritableUtils.writeString(out, error);\n\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": {
      "type": "Ybodychange",
      "commitMessage": "\t\tHADOOP-7776 Make the Ipc-Header in a RPC-Payload an explicit header (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1197885 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/11/11 10:06 PM",
      "commitName": "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "24/10/11 11:07 PM",
      "commitNameOld": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 10.96,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n-    out.writeInt(call.id);                // write call id\n+    out.writeInt(call.callId);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n       try {\n         rv.write(out);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(response, call, Status.ERROR,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "common/src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7121. Exceptions while serializing IPC call responses are not handled well. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1129982 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/11 7:00 PM",
      "commitName": "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "26/05/11 12:48 AM",
      "commitNameOld": "2f6c03ad54725e59e3d18866cfaaea734bb37c82",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,31 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.id);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n-      rv.write(out);\n+      try {\n+        rv.write(out);\n+      } catch (Throwable t) {\n+        LOG.warn(\"Error serializing call response for call \" + call, t);\n+        // Call back to same function - this is OK since the\n+        // buffer is reset at the top, and since status is changed\n+        // to ERROR it won\u0027t infinite loop.\n+        setupResponse(response, call, Status.ERROR,\n+            null, t.getClass().getName(),\n+            StringUtils.stringifyException(t));\n+        return;\n+      }\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "4b9c956bc56cec2c5b669102340d0912e0db3517": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6674. Makes use of the SASL authentication options in the SASL RPC. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951624 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/10 5:34 PM",
      "commitName": "4b9c956bc56cec2c5b669102340d0912e0db3517",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "26/05/10 1:31 PM",
      "commitNameOld": "24a2f1fafe2e13963c510cc04b3177c300af8aae",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 9.17,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.id);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n       rv.write(out);\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n-    wrapWithSasl(response, call);\n+    if (call.connection.useWrap) {\n+      wrapWithSasl(response, call);\n+    }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      rv.write(out);\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "940389afce6a1b9b9e1519aed528cbc444786756": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/10 5:30 PM",
      "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "27/01/10 12:08 AM",
      "commitNameOld": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 6.72,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.id);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n       rv.write(out);\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n+    wrapWithSasl(response, call);\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      rv.write(out);\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    wrapWithSasl(response, call);\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,17 @@\n+  private void setupResponse(ByteArrayOutputStream response, \n+                             Call call, Status status, \n+                             Writable rv, String errorClass, String error) \n+  throws IOException {\n+    response.reset();\n+    DataOutputStream out \u003d new DataOutputStream(response);\n+    out.writeInt(call.id);                // write call id\n+    out.writeInt(status.state);           // write status\n+\n+    if (status \u003d\u003d Status.SUCCESS) {\n+      rv.write(out);\n+    } else {\n+      WritableUtils.writeString(out, errorClass);\n+      WritableUtils.writeString(out, error);\n+    }\n+    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      rv.write(out);\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}