{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "invalidateBlock",
  "functionId": "invalidateBlock___b-BlockToMarkCorrupt__dn-DatanodeInfo__nr-NumberReplicas",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1872,
  "functionEndLine": 1898,
  "numCommitsSeen": 477,
  "timeTaken": 9071,
  "changeHistory": [
    "f9bb2a8cc580f7bebbd890ad38e772f23bcb65f7"
  ],
  "changeHistoryShort": {
    "f9bb2a8cc580f7bebbd890ad38e772f23bcb65f7": "Ybodychange"
  },
  "changeHistoryDetails": {
    "f9bb2a8cc580f7bebbd890ad38e772f23bcb65f7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15200. Delete Corrupt Replica Immediately Irrespective of Replicas On Stale Storage. Contributed by Ayush Saxena.\n",
      "commitDate": "19/03/20 9:56 AM",
      "commitName": "f9bb2a8cc580f7bebbd890ad38e772f23bcb65f7",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "15/03/20 3:46 AM",
      "commitNameOld": "8a7c54995a86fe8f63e5eff09d4be240518c8434",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 4.26,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private boolean invalidateBlock(BlockToMarkCorrupt b, DatanodeInfo dn,\n       NumberReplicas nr) throws IOException {\n     blockLog.debug(\"BLOCK* invalidateBlock: {} on {}\", b, dn);\n     DatanodeDescriptor node \u003d getDatanodeManager().getDatanode(dn);\n     if (node \u003d\u003d null) {\n       throw new IOException(\"Cannot invalidate \" + b\n           + \" because datanode \" + dn + \" does not exist.\");\n     }\n \n     // Check how many copies we have of the block\n-    if (nr.replicasOnStaleNodes() \u003e 0) {\n+    if (nr.replicasOnStaleNodes() \u003e 0 \u0026\u0026 !deleteCorruptReplicaImmediately) {\n       blockLog.debug(\"BLOCK* invalidateBlocks: postponing \" +\n           \"invalidation of {} on {} because {} replica(s) are located on \" +\n           \"nodes with potentially out-of-date block reports\", b, dn,\n           nr.replicasOnStaleNodes());\n       postponeBlock(b.getCorrupted());\n       return false;\n     } else {\n       // we already checked the number of replicas in the caller of this\n       // function and know there are enough live replicas, so we can delete it.\n       addToInvalidates(b.getCorrupted(), dn);\n       removeStoredBlock(b.getStored(), node);\n       blockLog.debug(\"BLOCK* invalidateBlocks: {} on {} listed for deletion.\",\n           b, dn);\n       return true;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean invalidateBlock(BlockToMarkCorrupt b, DatanodeInfo dn,\n      NumberReplicas nr) throws IOException {\n    blockLog.debug(\"BLOCK* invalidateBlock: {} on {}\", b, dn);\n    DatanodeDescriptor node \u003d getDatanodeManager().getDatanode(dn);\n    if (node \u003d\u003d null) {\n      throw new IOException(\"Cannot invalidate \" + b\n          + \" because datanode \" + dn + \" does not exist.\");\n    }\n\n    // Check how many copies we have of the block\n    if (nr.replicasOnStaleNodes() \u003e 0 \u0026\u0026 !deleteCorruptReplicaImmediately) {\n      blockLog.debug(\"BLOCK* invalidateBlocks: postponing \" +\n          \"invalidation of {} on {} because {} replica(s) are located on \" +\n          \"nodes with potentially out-of-date block reports\", b, dn,\n          nr.replicasOnStaleNodes());\n      postponeBlock(b.getCorrupted());\n      return false;\n    } else {\n      // we already checked the number of replicas in the caller of this\n      // function and know there are enough live replicas, so we can delete it.\n      addToInvalidates(b.getCorrupted(), dn);\n      removeStoredBlock(b.getStored(), node);\n      blockLog.debug(\"BLOCK* invalidateBlocks: {} on {} listed for deletion.\",\n          b, dn);\n      return true;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    }
  }
}