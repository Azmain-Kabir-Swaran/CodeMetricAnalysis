{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___name-URI__conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
  "functionStartLine": 336,
  "functionEndLine": 385,
  "numCommitsSeen": 22,
  "timeTaken": 2494,
  "changeHistory": [
    "5ff0cf86a940fd83f1425794921cc075b19f1108",
    "6542d17ea460ec222137c4b275b13daf15d3fca3",
    "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
    "9195a6e302028ed3921d1016ac2fa5754f06ebf0",
    "c31b5e61b1f09949548116309218a2b3e9c0beda",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "5ff0cf86a940fd83f1425794921cc075b19f1108": "Ybodychange",
    "6542d17ea460ec222137c4b275b13daf15d3fca3": "Ybodychange",
    "d67a5e2dec5c60d96b0c216182891cdfd7832ac5": "Ybodychange",
    "9195a6e302028ed3921d1016ac2fa5754f06ebf0": "Ybodychange",
    "c31b5e61b1f09949548116309218a2b3e9c0beda": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ybodychange",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ff0cf86a940fd83f1425794921cc075b19f1108": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
      "commitDate": "22/11/18 9:56 PM",
      "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "18/11/18 10:00 PM",
      "commitNameOld": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n     super.initialize(name, conf);\n \n     bucket \u003d name.getHost();\n     uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n-    workingDir \u003d new Path(\"/user\",\n-        System.getProperty(\"user.name\")).makeQualified(uri, null);\n+    // Username is the current user at the time the FS was instantiated.\n+    username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+    workingDir \u003d new Path(\"/user\", username).makeQualified(uri, null);\n     long keepAliveTime \u003d longOption(conf,\n         KEEPALIVE_TIME_KEY, KEEPALIVE_TIME_DEFAULT, 0);\n     blockOutputActiveBlocks \u003d intOption(conf,\n         UPLOAD_ACTIVE_BLOCKS_KEY, UPLOAD_ACTIVE_BLOCKS_DEFAULT, 1);\n \n     store \u003d new AliyunOSSFileSystemStore();\n-    store.initialize(name, conf, statistics);\n+    store.initialize(name, conf, username, statistics);\n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n \n     int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n         Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n \n     int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n \n     maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n         Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n \n     this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n         threadNum, totalTasks, keepAliveTime, TimeUnit.SECONDS,\n         \"oss-transfer-shared\");\n \n     maxConcurrentCopyTasksPerDir \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,\n         Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);\n \n     int maxCopyThreads \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_COPY_THREADS_NUM_KEY,\n         Constants.MAX_COPY_THREADS_DEFAULT);\n \n     int maxCopyTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_COPY_TASKS_KEY,\n         Constants.MAX_COPY_TASKS_DEFAULT);\n \n     this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n         maxCopyThreads, maxCopyTasks, 60L,\n         TimeUnit.SECONDS, \"oss-copy-unbounded\");\n \n     setConf(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    bucket \u003d name.getHost();\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    // Username is the current user at the time the FS was instantiated.\n    username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    workingDir \u003d new Path(\"/user\", username).makeQualified(uri, null);\n    long keepAliveTime \u003d longOption(conf,\n        KEEPALIVE_TIME_KEY, KEEPALIVE_TIME_DEFAULT, 0);\n    blockOutputActiveBlocks \u003d intOption(conf,\n        UPLOAD_ACTIVE_BLOCKS_KEY, UPLOAD_ACTIVE_BLOCKS_DEFAULT, 1);\n\n    store \u003d new AliyunOSSFileSystemStore();\n    store.initialize(name, conf, username, statistics);\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n\n    int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n\n    int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n\n    maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n\n    this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        threadNum, totalTasks, keepAliveTime, TimeUnit.SECONDS,\n        \"oss-transfer-shared\");\n\n    maxConcurrentCopyTasksPerDir \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,\n        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);\n\n    int maxCopyThreads \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_COPY_THREADS_NUM_KEY,\n        Constants.MAX_COPY_THREADS_DEFAULT);\n\n    int maxCopyTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_COPY_TASKS_KEY,\n        Constants.MAX_COPY_TASKS_DEFAULT);\n\n    this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        maxCopyThreads, maxCopyTasks, 60L,\n        TimeUnit.SECONDS, \"oss-copy-unbounded\");\n\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "6542d17ea460ec222137c4b275b13daf15d3fca3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14999. AliyunOSS: provide one asynchronous multi-part based uploading mechanism. Contributed by Genmao Yu.\n",
      "commitDate": "30/03/18 5:23 AM",
      "commitName": "6542d17ea460ec222137c4b275b13daf15d3fca3",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "19/03/18 12:02 AM",
      "commitNameOld": "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 11.22,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n     super.initialize(name, conf);\n \n     bucket \u003d name.getHost();\n     uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n     workingDir \u003d new Path(\"/user\",\n         System.getProperty(\"user.name\")).makeQualified(uri, null);\n+    long keepAliveTime \u003d longOption(conf,\n+        KEEPALIVE_TIME_KEY, KEEPALIVE_TIME_DEFAULT, 0);\n+    blockOutputActiveBlocks \u003d intOption(conf,\n+        UPLOAD_ACTIVE_BLOCKS_KEY, UPLOAD_ACTIVE_BLOCKS_DEFAULT, 1);\n \n     store \u003d new AliyunOSSFileSystemStore();\n     store.initialize(name, conf, statistics);\n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n \n     int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n         Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n \n     int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n \n     maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n         Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n \n     this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n-        threadNum, totalTasks, 60L, TimeUnit.SECONDS, \"oss-read-shared\");\n+        threadNum, totalTasks, keepAliveTime, TimeUnit.SECONDS,\n+        \"oss-transfer-shared\");\n \n     maxConcurrentCopyTasksPerDir \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,\n         Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);\n \n     int maxCopyThreads \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_COPY_THREADS_NUM_KEY,\n         Constants.MAX_COPY_THREADS_DEFAULT);\n \n     int maxCopyTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_COPY_TASKS_KEY,\n         Constants.MAX_COPY_TASKS_DEFAULT);\n \n     this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n         maxCopyThreads, maxCopyTasks, 60L,\n         TimeUnit.SECONDS, \"oss-copy-unbounded\");\n \n     setConf(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    bucket \u003d name.getHost();\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    workingDir \u003d new Path(\"/user\",\n        System.getProperty(\"user.name\")).makeQualified(uri, null);\n    long keepAliveTime \u003d longOption(conf,\n        KEEPALIVE_TIME_KEY, KEEPALIVE_TIME_DEFAULT, 0);\n    blockOutputActiveBlocks \u003d intOption(conf,\n        UPLOAD_ACTIVE_BLOCKS_KEY, UPLOAD_ACTIVE_BLOCKS_DEFAULT, 1);\n\n    store \u003d new AliyunOSSFileSystemStore();\n    store.initialize(name, conf, statistics);\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n\n    int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n\n    int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n\n    maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n\n    this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        threadNum, totalTasks, keepAliveTime, TimeUnit.SECONDS,\n        \"oss-transfer-shared\");\n\n    maxConcurrentCopyTasksPerDir \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,\n        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);\n\n    int maxCopyThreads \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_COPY_THREADS_NUM_KEY,\n        Constants.MAX_COPY_THREADS_DEFAULT);\n\n    int maxCopyTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_COPY_TASKS_KEY,\n        Constants.MAX_COPY_TASKS_DEFAULT);\n\n    this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        maxCopyThreads, maxCopyTasks, 60L,\n        TimeUnit.SECONDS, \"oss-copy-unbounded\");\n\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "d67a5e2dec5c60d96b0c216182891cdfd7832ac5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15262. AliyunOSS: move files under a directory in parallel when rename a directory. Contributed by Jinhu Wu.\n",
      "commitDate": "19/03/18 12:02 AM",
      "commitName": "d67a5e2dec5c60d96b0c216182891cdfd7832ac5",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "16/01/18 11:55 PM",
      "commitNameOld": "9195a6e302028ed3921d1016ac2fa5754f06ebf0",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 60.96,
      "commitsBetweenForRepo": 411,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,44 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n     super.initialize(name, conf);\n \n     bucket \u003d name.getHost();\n     uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n     workingDir \u003d new Path(\"/user\",\n         System.getProperty(\"user.name\")).makeQualified(uri, null);\n \n     store \u003d new AliyunOSSFileSystemStore();\n     store.initialize(name, conf, statistics);\n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n \n     int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n         Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n \n     int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n \n     maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n         Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n         Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n \n     this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n         threadNum, totalTasks, 60L, TimeUnit.SECONDS, \"oss-read-shared\");\n+\n+    maxConcurrentCopyTasksPerDir \u003d AliyunOSSUtils.intPositiveOption(conf,\n+        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,\n+        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);\n+\n+    int maxCopyThreads \u003d AliyunOSSUtils.intPositiveOption(conf,\n+        Constants.MAX_COPY_THREADS_NUM_KEY,\n+        Constants.MAX_COPY_THREADS_DEFAULT);\n+\n+    int maxCopyTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n+        Constants.MAX_COPY_TASKS_KEY,\n+        Constants.MAX_COPY_TASKS_DEFAULT);\n+\n+    this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n+        maxCopyThreads, maxCopyTasks, 60L,\n+        TimeUnit.SECONDS, \"oss-copy-unbounded\");\n+\n     setConf(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    bucket \u003d name.getHost();\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    workingDir \u003d new Path(\"/user\",\n        System.getProperty(\"user.name\")).makeQualified(uri, null);\n\n    store \u003d new AliyunOSSFileSystemStore();\n    store.initialize(name, conf, statistics);\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n\n    int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n\n    int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n\n    maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n\n    this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        threadNum, totalTasks, 60L, TimeUnit.SECONDS, \"oss-read-shared\");\n\n    maxConcurrentCopyTasksPerDir \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY,\n        Constants.MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT);\n\n    int maxCopyThreads \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_COPY_THREADS_NUM_KEY,\n        Constants.MAX_COPY_THREADS_DEFAULT);\n\n    int maxCopyTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_COPY_TASKS_KEY,\n        Constants.MAX_COPY_TASKS_DEFAULT);\n\n    this.boundedCopyThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        maxCopyThreads, maxCopyTasks, 60L,\n        TimeUnit.SECONDS, \"oss-copy-unbounded\");\n\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "9195a6e302028ed3921d1016ac2fa5754f06ebf0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15027. AliyunOSS: Support multi-thread pre-read to improve sequential read from Hadoop to Aliyun OSS performance. (Contributed by Jinhu Wu)\n",
      "commitDate": "16/01/18 11:55 PM",
      "commitName": "9195a6e302028ed3921d1016ac2fa5754f06ebf0",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "14/11/17 1:58 AM",
      "commitNameOld": "18621af7ae8f8ed703245744f8f2a770d07bbfb9",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 63.91,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,27 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n     super.initialize(name, conf);\n \n     bucket \u003d name.getHost();\n     uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n     workingDir \u003d new Path(\"/user\",\n         System.getProperty(\"user.name\")).makeQualified(uri, null);\n \n     store \u003d new AliyunOSSFileSystemStore();\n     store.initialize(name, conf, statistics);\n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n+\n+    int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n+        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n+        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n+\n+    int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n+        Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n+\n+    maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n+        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n+        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n+\n+    this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n+        threadNum, totalTasks, 60L, TimeUnit.SECONDS, \"oss-read-shared\");\n     setConf(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    bucket \u003d name.getHost();\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    workingDir \u003d new Path(\"/user\",\n        System.getProperty(\"user.name\")).makeQualified(uri, null);\n\n    store \u003d new AliyunOSSFileSystemStore();\n    store.initialize(name, conf, statistics);\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n\n    int threadNum \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY,\n        Constants.MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT);\n\n    int totalTasks \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MAX_TOTAL_TASKS_KEY, Constants.MAX_TOTAL_TASKS_DEFAULT);\n\n    maxReadAheadPartNumber \u003d AliyunOSSUtils.intPositiveOption(conf,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY,\n        Constants.MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT);\n\n    this.boundedThreadPool \u003d BlockingThreadPoolExecutorService.newInstance(\n        threadNum, totalTasks, 60L, TimeUnit.SECONDS, \"oss-read-shared\");\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "c31b5e61b1f09949548116309218a2b3e9c0beda": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13701. AbstractContractRootDirectoryTest can fail when handling delete \"/\". Contributed by Genmao Yu\n",
      "commitDate": "08/10/16 4:35 AM",
      "commitName": "c31b5e61b1f09949548116309218a2b3e9c0beda",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "20/09/16 12:12 AM",
      "commitNameOld": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,13 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n     super.initialize(name, conf);\n \n+    bucket \u003d name.getHost();\n     uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n     workingDir \u003d new Path(\"/user\",\n         System.getProperty(\"user.name\")).makeQualified(uri, null);\n \n     store \u003d new AliyunOSSFileSystemStore();\n     store.initialize(name, conf, statistics);\n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n     setConf(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    bucket \u003d name.getHost();\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    workingDir \u003d new Path(\"/user\",\n        System.getProperty(\"user.name\")).makeQualified(uri, null);\n\n    store \u003d new AliyunOSSFileSystemStore();\n    store.initialize(name, conf, statistics);\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,12 @@\n   public void initialize(URI name, Configuration conf) throws IOException {\n     super.initialize(name, conf);\n \n     uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n-    workingDir \u003d\n-        new Path(\"/user\",\n-            System.getProperty(\"user.name\")).makeQualified(uri, null);\n+    workingDir \u003d new Path(\"/user\",\n+        System.getProperty(\"user.name\")).makeQualified(uri, null);\n \n-    bucketName \u003d name.getHost();\n-\n-    ClientConfiguration clientConf \u003d new ClientConfiguration();\n-    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n-        MAXIMUM_CONNECTIONS_DEFAULT));\n-    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n-        SECURE_CONNECTIONS_DEFAULT);\n-    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n-    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n-        MAX_ERROR_RETRIES_DEFAULT));\n-    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n-        ESTABLISH_TIMEOUT_DEFAULT));\n-    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n-        SOCKET_TIMEOUT_DEFAULT));\n-\n-    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n-    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n-    if (!proxyHost.isEmpty()) {\n-      clientConf.setProxyHost(proxyHost);\n-      if (proxyPort \u003e\u003d 0) {\n-        clientConf.setProxyPort(proxyPort);\n-      } else {\n-        if (secureConnections) {\n-          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n-          clientConf.setProxyPort(443);\n-        } else {\n-          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n-          clientConf.setProxyPort(80);\n-        }\n-      }\n-      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n-      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n-      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n-        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n-            PROXY_PASSWORD_KEY + \" set without the other.\";\n-        LOG.error(msg);\n-        throw new IllegalArgumentException(msg);\n-      }\n-      clientConf.setProxyUsername(proxyUsername);\n-      clientConf.setProxyPassword(proxyPassword);\n-      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n-      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n-    } else if (proxyPort \u003e\u003d 0) {\n-      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n-          PROXY_HOST_KEY;\n-      LOG.error(msg);\n-      throw new IllegalArgumentException(msg);\n-    }\n-\n-    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n-    ossClient \u003d\n-        new OSSClient(endPoint, getCredentialsProvider(name, conf), clientConf);\n-\n+    store \u003d new AliyunOSSFileSystemStore();\n+    store.initialize(name, conf, statistics);\n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n-    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n-        MULTIPART_UPLOAD_SIZE_DEFAULT);\n-    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n-        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n-\n-    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n-      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n-      uploadPartSize \u003d 5 * 1024 * 1024;\n-    }\n-\n-    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n-      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n-      multipartThreshold \u003d 5 * 1024 * 1024;\n-    }\n-\n-    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n-      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n-      multipartThreshold \u003d 1024 * 1024 * 1024;\n-    }\n-\n-    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n-    if (!cannedACLName.isEmpty()) {\n-      CannedAccessControlList cannedACL \u003d\n-          CannedAccessControlList.valueOf(cannedACLName);\n-      ossClient.setBucketAcl(bucketName, cannedACL);\n-    }\n-\n-    serverSideEncryptionAlgorithm \u003d\n-        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n-\n     setConf(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    workingDir \u003d new Path(\"/user\",\n        System.getProperty(\"user.name\")).makeQualified(uri, null);\n\n    store \u003d new AliyunOSSFileSystemStore();\n    store.initialize(name, conf, statistics);\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
      "extendedDetails": {}
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,94 @@\n+  public void initialize(URI name, Configuration conf) throws IOException {\n+    super.initialize(name, conf);\n+\n+    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n+    workingDir \u003d\n+        new Path(\"/user\",\n+            System.getProperty(\"user.name\")).makeQualified(uri, null);\n+\n+    bucketName \u003d name.getHost();\n+\n+    ClientConfiguration clientConf \u003d new ClientConfiguration();\n+    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n+        MAXIMUM_CONNECTIONS_DEFAULT));\n+    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n+        SECURE_CONNECTIONS_DEFAULT);\n+    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n+    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n+        MAX_ERROR_RETRIES_DEFAULT));\n+    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n+        ESTABLISH_TIMEOUT_DEFAULT));\n+    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n+        SOCKET_TIMEOUT_DEFAULT));\n+\n+    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n+    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n+    if (!proxyHost.isEmpty()) {\n+      clientConf.setProxyHost(proxyHost);\n+      if (proxyPort \u003e\u003d 0) {\n+        clientConf.setProxyPort(proxyPort);\n+      } else {\n+        if (secureConnections) {\n+          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+          clientConf.setProxyPort(443);\n+        } else {\n+          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+          clientConf.setProxyPort(80);\n+        }\n+      }\n+      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n+      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n+      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n+            PROXY_PASSWORD_KEY + \" set without the other.\";\n+        LOG.error(msg);\n+        throw new IllegalArgumentException(msg);\n+      }\n+      clientConf.setProxyUsername(proxyUsername);\n+      clientConf.setProxyPassword(proxyPassword);\n+      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n+      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n+    } else if (proxyPort \u003e\u003d 0) {\n+      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n+          PROXY_HOST_KEY;\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+\n+    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n+    ossClient \u003d\n+        new OSSClient(endPoint, getCredentialsProvider(name, conf), clientConf);\n+\n+    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n+    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n+        MULTIPART_UPLOAD_SIZE_DEFAULT);\n+    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n+        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n+\n+    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n+      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n+      uploadPartSize \u003d 5 * 1024 * 1024;\n+    }\n+\n+    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n+      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n+      multipartThreshold \u003d 5 * 1024 * 1024;\n+    }\n+\n+    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n+      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n+      multipartThreshold \u003d 1024 * 1024 * 1024;\n+    }\n+\n+    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n+    if (!cannedACLName.isEmpty()) {\n+      CannedAccessControlList cannedACL \u003d\n+          CannedAccessControlList.valueOf(cannedACLName);\n+      ossClient.setBucketAcl(bucketName, cannedACL);\n+    }\n+\n+    serverSideEncryptionAlgorithm \u003d\n+        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n+\n+    setConf(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI name, Configuration conf) throws IOException {\n    super.initialize(name, conf);\n\n    uri \u003d java.net.URI.create(name.getScheme() + \"://\" + name.getAuthority());\n    workingDir \u003d\n        new Path(\"/user\",\n            System.getProperty(\"user.name\")).makeQualified(uri, null);\n\n    bucketName \u003d name.getHost();\n\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (!proxyHost.isEmpty()) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    ossClient \u003d\n        new OSSClient(endPoint, getCredentialsProvider(name, conf), clientConf);\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n\n    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n      uploadPartSize \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (!cannedACLName.isEmpty()) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    setConf(conf);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}