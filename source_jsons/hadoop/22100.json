{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MergeManagerImpl.java",
  "functionName": "createInMemorySegments",
  "functionId": "createInMemorySegments___inMemoryMapOutputs-List__InMemoryMapOutput__K,V______inMemorySegments-List__Segment__K,V______leaveBytes-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
  "functionStartLine": 616,
  "functionEndLine": 641,
  "numCommitsSeen": 28,
  "timeTaken": 10339,
  "changeHistory": [
    "a00a7297291ec2a14b3ddfc0deae94d7b6529828",
    "73fd247c7649919350ecfd16806af57ffe554649",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "a00a7297291ec2a14b3ddfc0deae94d7b6529828": "Ybodychange",
    "73fd247c7649919350ecfd16806af57ffe554649": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a00a7297291ec2a14b3ddfc0deae94d7b6529828": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5399. Unnecessary Configuration instantiation in IFileInputStream slows down merge. (Stanislav Barton via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1510811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/13 4:32 PM",
      "commitName": "a00a7297291ec2a14b3ddfc0deae94d7b6529828",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "06/03/13 7:02 AM",
      "commitNameOld": "df68c56267ca7dfbfee4b241bc84325d1760d12d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 152.35,
      "commitsBetweenForRepo": 958,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                       List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                       long leaveBytes\n                                       ) throws IOException {\n     long totalSize \u003d 0L;\n     // We could use fullSize could come from the RamManager, but files can be\n     // closed but not yet present in inMemoryMapOutputs\n     long fullSize \u003d 0L;\n     for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n       fullSize +\u003d mo.getMemory().length;\n     }\n     while(fullSize \u003e leaveBytes) {\n       InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n       byte[] data \u003d mo.getMemory();\n       long size \u003d data.length;\n       totalSize +\u003d size;\n       fullSize -\u003d size;\n       Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                    mo.getMapId(),\n-                                                   data, 0, (int)size);\n+                                                   data, 0, (int)size, jobConf);\n       inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                             (mo.isPrimaryMapOutput() ? \n                                             mergedMapOutputsCounter : null)));\n     }\n     return totalSize;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size, jobConf);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
      "extendedDetails": {}
    },
    "73fd247c7649919350ecfd16806af57ffe554649": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:10 AM",
      "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n+  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                       List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                       long leaveBytes\n                                       ) throws IOException {\n     long totalSize \u003d 0L;\n     // We could use fullSize could come from the RamManager, but files can be\n     // closed but not yet present in inMemoryMapOutputs\n     long fullSize \u003d 0L;\n-    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n+    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n       fullSize +\u003d mo.getMemory().length;\n     }\n     while(fullSize \u003e leaveBytes) {\n-      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n+      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n       byte[] data \u003d mo.getMemory();\n       long size \u003d data.length;\n       totalSize +\u003d size;\n       fullSize -\u003d size;\n-      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n+      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                    mo.getMapId(),\n                                                    data, 0, (int)size);\n       inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                             (mo.isPrimaryMapOutput() ? \n                                             mergedMapOutputsCounter : null)));\n     }\n     return totalSize;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
            "oldMethodName": "createInMemorySegments",
            "newMethodName": "createInMemorySegments"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n+  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                       List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                       long leaveBytes\n                                       ) throws IOException {\n     long totalSize \u003d 0L;\n     // We could use fullSize could come from the RamManager, but files can be\n     // closed but not yet present in inMemoryMapOutputs\n     long fullSize \u003d 0L;\n-    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n+    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n       fullSize +\u003d mo.getMemory().length;\n     }\n     while(fullSize \u003e leaveBytes) {\n-      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n+      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n       byte[] data \u003d mo.getMemory();\n       long size \u003d data.length;\n       totalSize +\u003d size;\n       fullSize -\u003d size;\n-      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n+      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                    mo.getMapId(),\n                                                    data, 0, (int)size);\n       inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                             (mo.isPrimaryMapOutput() ? \n                                             mergedMapOutputsCounter : null)));\n     }\n     return totalSize;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n+  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                       List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                       long leaveBytes\n                                       ) throws IOException {\n     long totalSize \u003d 0L;\n     // We could use fullSize could come from the RamManager, but files can be\n     // closed but not yet present in inMemoryMapOutputs\n     long fullSize \u003d 0L;\n-    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n+    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n       fullSize +\u003d mo.getMemory().length;\n     }\n     while(fullSize \u003e leaveBytes) {\n-      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n+      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n       byte[] data \u003d mo.getMemory();\n       long size \u003d data.length;\n       totalSize +\u003d size;\n       fullSize -\u003d size;\n-      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n+      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                    mo.getMapId(),\n                                                    data, 0, (int)size);\n       inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                             (mo.isPrimaryMapOutput() ? \n                                             mergedMapOutputsCounter : null)));\n     }\n     return totalSize;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long createInMemorySegments(List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (InMemoryMapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      InMemoryMapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManagerImpl.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[inMemoryMapOutputs-List\u003cMapOutput\u003cK,V\u003e\u003e, inMemorySegments-List\u003cSegment\u003cK,V\u003e\u003e, leaveBytes-long]",
            "newValue": "[inMemoryMapOutputs-List\u003cInMemoryMapOutput\u003cK,V\u003e\u003e, inMemorySegments-List\u003cSegment\u003cK,V\u003e\u003e, leaveBytes-long]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "oldMethodName": "createInMemorySegments",
        "newMethodName": "createInMemorySegments"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n+                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n+                                      long leaveBytes\n+                                      ) throws IOException {\n+    long totalSize \u003d 0L;\n+    // We could use fullSize could come from the RamManager, but files can be\n+    // closed but not yet present in inMemoryMapOutputs\n+    long fullSize \u003d 0L;\n+    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n+      fullSize +\u003d mo.getMemory().length;\n+    }\n+    while(fullSize \u003e leaveBytes) {\n+      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n+      byte[] data \u003d mo.getMemory();\n+      long size \u003d data.length;\n+      totalSize +\u003d size;\n+      fullSize -\u003d size;\n+      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n+                                                   mo.getMapId(),\n+                                                   data, 0, (int)size);\n+      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n+                                            (mo.isPrimaryMapOutput() ? \n+                                            mergedMapOutputsCounter : null)));\n+    }\n+    return totalSize;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long createInMemorySegments(List\u003cMapOutput\u003cK,V\u003e\u003e inMemoryMapOutputs,\n                                      List\u003cSegment\u003cK, V\u003e\u003e inMemorySegments, \n                                      long leaveBytes\n                                      ) throws IOException {\n    long totalSize \u003d 0L;\n    // We could use fullSize could come from the RamManager, but files can be\n    // closed but not yet present in inMemoryMapOutputs\n    long fullSize \u003d 0L;\n    for (MapOutput\u003cK,V\u003e mo : inMemoryMapOutputs) {\n      fullSize +\u003d mo.getMemory().length;\n    }\n    while(fullSize \u003e leaveBytes) {\n      MapOutput\u003cK,V\u003e mo \u003d inMemoryMapOutputs.remove(0);\n      byte[] data \u003d mo.getMemory();\n      long size \u003d data.length;\n      totalSize +\u003d size;\n      fullSize -\u003d size;\n      Reader\u003cK,V\u003e reader \u003d new InMemoryReader\u003cK,V\u003e(MergeManager.this, \n                                                   mo.getMapId(),\n                                                   data, 0, (int)size);\n      inMemorySegments.add(new Segment\u003cK,V\u003e(reader, true, \n                                            (mo.isPrimaryMapOutput() ? \n                                            mergedMapOutputsCounter : null)));\n    }\n    return totalSize;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java"
    }
  }
}