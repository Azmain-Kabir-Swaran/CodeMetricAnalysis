{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetworkTopologyWithNodeGroup.java",
  "functionName": "add",
  "functionId": "add___node-Node",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopologyWithNodeGroup.java",
  "functionStartLine": 177,
  "functionEndLine": 222,
  "numCommitsSeen": 16,
  "timeTaken": 1031,
  "changeHistory": [
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
    "ab850368e897b9634f95a6fb6341fcceb22c18bf",
    "ed7040f07b75a8eb15df90cc8b57e534c7ebf114"
  ],
  "changeHistoryShort": {
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": "Ybodychange",
    "ab850368e897b9634f95a6fb6341fcceb22c18bf": "Ybodychange",
    "ed7040f07b75a8eb15df90cc8b57e534c7ebf114": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e27c2ae8bafc94f18eb38f5d839dcef5652d424e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8647. Abstract BlockManager\u0027s rack policy into BlockPlacementPolicy. (Brahma Reddy Battula via mingma)\n",
      "commitDate": "21/10/15 8:06 AM",
      "commitName": "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "09/02/15 12:17 PM",
      "commitNameOld": "ab934e85947dcf2092050023909dd81ae274ff45",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 253.78,
      "commitsBetweenForRepo": 2181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n     netlock.writeLock().lock();\n     try {\n       Node rack \u003d null;\n \n       // if node only with default rack info, here we need to add default \n       // nodegroup info\n       if (NetworkTopology.DEFAULT_RACK.equals(node.getNetworkLocation())) {\n         node.setNetworkLocation(node.getNetworkLocation() + \n             NetworkTopologyWithNodeGroup.DEFAULT_NODEGROUP);\n       }\n       Node nodeGroup \u003d getNode(node.getNetworkLocation());\n       if (nodeGroup \u003d\u003d null) {\n         nodeGroup \u003d new InnerNodeWithNodeGroup(node.getNetworkLocation());\n       }\n       rack \u003d getNode(nodeGroup.getNetworkLocation());\n \n       // rack should be an innerNode and with parent.\n       // note: rack\u0027s null parent case is: node\u0027s topology only has one layer, \n       //       so rack is recognized as \"/\" and no parent. \n       // This will be recognized as a node with fault topology.\n       if (rack !\u003d null \u0026\u0026 \n           (!(rack instanceof InnerNode) || rack.getParent() \u003d\u003d null)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n             + node.toString() \n             + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \" + NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           // We only track rack number here\n-          numOfRacks++;\n+          incrementRacks();\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d null;\n\n      // if node only with default rack info, here we need to add default \n      // nodegroup info\n      if (NetworkTopology.DEFAULT_RACK.equals(node.getNetworkLocation())) {\n        node.setNetworkLocation(node.getNetworkLocation() + \n            NetworkTopologyWithNodeGroup.DEFAULT_NODEGROUP);\n      }\n      Node nodeGroup \u003d getNode(node.getNetworkLocation());\n      if (nodeGroup \u003d\u003d null) {\n        nodeGroup \u003d new InnerNodeWithNodeGroup(node.getNetworkLocation());\n      }\n      rack \u003d getNode(nodeGroup.getNetworkLocation());\n\n      // rack should be an innerNode and with parent.\n      // note: rack\u0027s null parent case is: node\u0027s topology only has one layer, \n      //       so rack is recognized as \"/\" and no parent. \n      // This will be recognized as a node with fault topology.\n      if (rack !\u003d null \u0026\u0026 \n          (!(rack instanceof InnerNode) || rack.getParent() \u003d\u003d null)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n            + node.toString() \n            + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \" + NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          // We only track rack number here\n          incrementRacks();\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopologyWithNodeGroup.java",
      "extendedDetails": {}
    },
    "ab850368e897b9634f95a6fb6341fcceb22c18bf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9451. Fault single-layer config if node group topology is enabled. (Junping Du via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1464301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/13 12:07 AM",
      "commitName": "ab850368e897b9634f95a6fb6341fcceb22c18bf",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "04/07/12 6:31 PM",
      "commitNameOld": "4d0cab2729e2bdb1742b62dba69bd30ab69c868e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 273.23,
      "commitsBetweenForRepo": 1430,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,46 @@\n   public void add(Node node) {\n     if (node\u003d\u003dnull) return;\n     if( node instanceof InnerNode ) {\n       throw new IllegalArgumentException(\n         \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n     }\n     netlock.writeLock().lock();\n     try {\n       Node rack \u003d null;\n \n       // if node only with default rack info, here we need to add default \n       // nodegroup info\n       if (NetworkTopology.DEFAULT_RACK.equals(node.getNetworkLocation())) {\n         node.setNetworkLocation(node.getNetworkLocation() + \n             NetworkTopologyWithNodeGroup.DEFAULT_NODEGROUP);\n       }\n       Node nodeGroup \u003d getNode(node.getNetworkLocation());\n       if (nodeGroup \u003d\u003d null) {\n         nodeGroup \u003d new InnerNodeWithNodeGroup(node.getNetworkLocation());\n       }\n       rack \u003d getNode(nodeGroup.getNetworkLocation());\n \n-      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n+      // rack should be an innerNode and with parent.\n+      // note: rack\u0027s null parent case is: node\u0027s topology only has one layer, \n+      //       so rack is recognized as \"/\" and no parent. \n+      // This will be recognized as a node with fault topology.\n+      if (rack !\u003d null \u0026\u0026 \n+          (!(rack instanceof InnerNode) || rack.getParent() \u003d\u003d null)) {\n         throw new IllegalArgumentException(\"Unexpected data node \" \n             + node.toString() \n             + \" at an illegal network location\");\n       }\n       if (clusterMap.add(node)) {\n         LOG.info(\"Adding a new node: \" + NodeBase.getPath(node));\n         if (rack \u003d\u003d null) {\n           // We only track rack number here\n           numOfRacks++;\n         }\n       }\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n       }\n     } finally {\n       netlock.writeLock().unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d null;\n\n      // if node only with default rack info, here we need to add default \n      // nodegroup info\n      if (NetworkTopology.DEFAULT_RACK.equals(node.getNetworkLocation())) {\n        node.setNetworkLocation(node.getNetworkLocation() + \n            NetworkTopologyWithNodeGroup.DEFAULT_NODEGROUP);\n      }\n      Node nodeGroup \u003d getNode(node.getNetworkLocation());\n      if (nodeGroup \u003d\u003d null) {\n        nodeGroup \u003d new InnerNodeWithNodeGroup(node.getNetworkLocation());\n      }\n      rack \u003d getNode(nodeGroup.getNetworkLocation());\n\n      // rack should be an innerNode and with parent.\n      // note: rack\u0027s null parent case is: node\u0027s topology only has one layer, \n      //       so rack is recognized as \"/\" and no parent. \n      // This will be recognized as a node with fault topology.\n      if (rack !\u003d null \u0026\u0026 \n          (!(rack instanceof InnerNode) || rack.getParent() \u003d\u003d null)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n            + node.toString() \n            + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \" + NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          // We only track rack number here\n          numOfRacks++;\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopologyWithNodeGroup.java",
      "extendedDetails": {}
    },
    "ed7040f07b75a8eb15df90cc8b57e534c7ebf114": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8470. Add NetworkTopologyWithNodeGroup, a 4-layer implementation of NetworkTopology.  Contributed by Junping Du\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1351445 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/12 11:23 AM",
      "commitName": "ed7040f07b75a8eb15df90cc8b57e534c7ebf114",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,41 @@\n+  public void add(Node node) {\n+    if (node\u003d\u003dnull) return;\n+    if( node instanceof InnerNode ) {\n+      throw new IllegalArgumentException(\n+        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n+    }\n+    netlock.writeLock().lock();\n+    try {\n+      Node rack \u003d null;\n+\n+      // if node only with default rack info, here we need to add default \n+      // nodegroup info\n+      if (NetworkTopology.DEFAULT_RACK.equals(node.getNetworkLocation())) {\n+        node.setNetworkLocation(node.getNetworkLocation() + \n+            NetworkTopologyWithNodeGroup.DEFAULT_NODEGROUP);\n+      }\n+      Node nodeGroup \u003d getNode(node.getNetworkLocation());\n+      if (nodeGroup \u003d\u003d null) {\n+        nodeGroup \u003d new InnerNodeWithNodeGroup(node.getNetworkLocation());\n+      }\n+      rack \u003d getNode(nodeGroup.getNetworkLocation());\n+\n+      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n+        throw new IllegalArgumentException(\"Unexpected data node \" \n+            + node.toString() \n+            + \" at an illegal network location\");\n+      }\n+      if (clusterMap.add(node)) {\n+        LOG.info(\"Adding a new node: \" + NodeBase.getPath(node));\n+        if (rack \u003d\u003d null) {\n+          // We only track rack number here\n+          numOfRacks++;\n+        }\n+      }\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n+      }\n+    } finally {\n+      netlock.writeLock().unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void add(Node node) {\n    if (node\u003d\u003dnull) return;\n    if( node instanceof InnerNode ) {\n      throw new IllegalArgumentException(\n        \"Not allow to add an inner node: \"+NodeBase.getPath(node));\n    }\n    netlock.writeLock().lock();\n    try {\n      Node rack \u003d null;\n\n      // if node only with default rack info, here we need to add default \n      // nodegroup info\n      if (NetworkTopology.DEFAULT_RACK.equals(node.getNetworkLocation())) {\n        node.setNetworkLocation(node.getNetworkLocation() + \n            NetworkTopologyWithNodeGroup.DEFAULT_NODEGROUP);\n      }\n      Node nodeGroup \u003d getNode(node.getNetworkLocation());\n      if (nodeGroup \u003d\u003d null) {\n        nodeGroup \u003d new InnerNodeWithNodeGroup(node.getNetworkLocation());\n      }\n      rack \u003d getNode(nodeGroup.getNetworkLocation());\n\n      if (rack !\u003d null \u0026\u0026 !(rack instanceof InnerNode)) {\n        throw new IllegalArgumentException(\"Unexpected data node \" \n            + node.toString() \n            + \" at an illegal network location\");\n      }\n      if (clusterMap.add(node)) {\n        LOG.info(\"Adding a new node: \" + NodeBase.getPath(node));\n        if (rack \u003d\u003d null) {\n          // We only track rack number here\n          numOfRacks++;\n        }\n      }\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"NetworkTopology became:\\n\" + this.toString());\n      }\n    } finally {\n      netlock.writeLock().unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetworkTopologyWithNodeGroup.java"
    }
  }
}