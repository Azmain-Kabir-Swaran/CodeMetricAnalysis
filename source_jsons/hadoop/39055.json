{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerUpdateContext.java",
  "functionName": "cancelPreviousRequest",
  "functionId": "cancelPreviousRequest___schedulerNode-SchedulerNode__schedulerKey-SchedulerRequestKey",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
  "functionStartLine": 154,
  "functionEndLine": 177,
  "numCommitsSeen": 7,
  "timeTaken": 3395,
  "changeHistory": [
    "c30c23cb665761e997bcfc1dc00908f70b069fa2",
    "a957f1c60e1308d1d70a1803381994f59949c5f8",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4"
  ],
  "changeHistoryShort": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": "Ybodychange",
    "a957f1c60e1308d1d70a1803381994f59949c5f8": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6492. Generate queue metrics for each partition. Contributed by Manikandan R\n",
      "commitDate": "26/05/20 4:29 PM",
      "commitName": "c30c23cb665761e997bcfc1dc00908f70b069fa2",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 521.95,
      "commitsBetweenForRepo": 3052,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,24 @@\n   private void cancelPreviousRequest(SchedulerNode schedulerNode,\n       SchedulerRequestKey schedulerKey) {\n     AppPlacementAllocator\u003cSchedulerNode\u003e appPlacementAllocator \u003d\n         appSchedulingInfo.getAppPlacementAllocator(schedulerKey);\n     if (appPlacementAllocator !\u003d null) {\n       PendingAsk pendingAsk \u003d appPlacementAllocator.getPendingAsk(\n           ResourceRequest.ANY);\n       // Decrement the pending using a dummy RR with\n       // resource \u003d prev update req capability\n       if (pendingAsk !\u003d null \u0026\u0026 pendingAsk.getCount() \u003e 0) {\n+        Container container \u003d Container.newInstance(UNDEFINED,\n+            schedulerNode.getNodeID(), \"host:port\",\n+            pendingAsk.getPerAllocationResource(),\n+            schedulerKey.getPriority(), null);\n         appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n-            schedulerKey, Container.newInstance(UNDEFINED,\n-                schedulerNode.getNodeID(), \"host:port\",\n-                pendingAsk.getPerAllocationResource(),\n-                schedulerKey.getPriority(), null));\n+            schedulerKey,\n+            new RMContainerImpl(container, schedulerKey,\n+                appSchedulingInfo.getApplicationAttemptId(),\n+                schedulerNode.getNodeID(), appSchedulingInfo.getUser(),\n+                appSchedulingInfo.getRMContext(),\n+                appPlacementAllocator.getPrimaryRequestedNodePartition()));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void cancelPreviousRequest(SchedulerNode schedulerNode,\n      SchedulerRequestKey schedulerKey) {\n    AppPlacementAllocator\u003cSchedulerNode\u003e appPlacementAllocator \u003d\n        appSchedulingInfo.getAppPlacementAllocator(schedulerKey);\n    if (appPlacementAllocator !\u003d null) {\n      PendingAsk pendingAsk \u003d appPlacementAllocator.getPendingAsk(\n          ResourceRequest.ANY);\n      // Decrement the pending using a dummy RR with\n      // resource \u003d prev update req capability\n      if (pendingAsk !\u003d null \u0026\u0026 pendingAsk.getCount() \u003e 0) {\n        Container container \u003d Container.newInstance(UNDEFINED,\n            schedulerNode.getNodeID(), \"host:port\",\n            pendingAsk.getPerAllocationResource(),\n            schedulerKey.getPriority(), null);\n        appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n            schedulerKey,\n            new RMContainerImpl(container, schedulerKey,\n                appSchedulingInfo.getApplicationAttemptId(),\n                schedulerNode.getNodeID(), appSchedulingInfo.getUser(),\n                appSchedulingInfo.getRMContext(),\n                appPlacementAllocator.getPrimaryRequestedNodePartition()));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "a957f1c60e1308d1d70a1803381994f59949c5f8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
      "commitDate": "05/12/17 9:20 AM",
      "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/11/17 1:01 PM",
      "commitNameOld": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 25.85,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void cancelPreviousRequest(SchedulerNode schedulerNode,\n       SchedulerRequestKey schedulerKey) {\n     AppPlacementAllocator\u003cSchedulerNode\u003e appPlacementAllocator \u003d\n         appSchedulingInfo.getAppPlacementAllocator(schedulerKey);\n     if (appPlacementAllocator !\u003d null) {\n-      Map\u003cString, ResourceRequest\u003e resourceRequests \u003d appPlacementAllocator\n-          .getResourceRequests();\n-      ResourceRequest prevReq \u003d resourceRequests.get(ResourceRequest.ANY);\n+      PendingAsk pendingAsk \u003d appPlacementAllocator.getPendingAsk(\n+          ResourceRequest.ANY);\n       // Decrement the pending using a dummy RR with\n       // resource \u003d prev update req capability\n-      if (prevReq !\u003d null) {\n+      if (pendingAsk !\u003d null \u0026\u0026 pendingAsk.getCount() \u003e 0) {\n         appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n             schedulerKey, Container.newInstance(UNDEFINED,\n                 schedulerNode.getNodeID(), \"host:port\",\n-                prevReq.getCapability(), schedulerKey.getPriority(), null));\n+                pendingAsk.getPerAllocationResource(),\n+                schedulerKey.getPriority(), null));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void cancelPreviousRequest(SchedulerNode schedulerNode,\n      SchedulerRequestKey schedulerKey) {\n    AppPlacementAllocator\u003cSchedulerNode\u003e appPlacementAllocator \u003d\n        appSchedulingInfo.getAppPlacementAllocator(schedulerKey);\n    if (appPlacementAllocator !\u003d null) {\n      PendingAsk pendingAsk \u003d appPlacementAllocator.getPendingAsk(\n          ResourceRequest.ANY);\n      // Decrement the pending using a dummy RR with\n      // resource \u003d prev update req capability\n      if (pendingAsk !\u003d null \u0026\u0026 pendingAsk.getCount() \u003e 0) {\n        appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n            schedulerKey, Container.newInstance(UNDEFINED,\n                schedulerNode.getNodeID(), \"host:port\",\n                pendingAsk.getPerAllocationResource(),\n                schedulerKey.getPriority(), null));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "28/02/17 10:35 AM",
      "commitNameOld": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 254.1,
      "commitsBetweenForRepo": 1781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void cancelPreviousRequest(SchedulerNode schedulerNode,\n       SchedulerRequestKey schedulerKey) {\n-    SchedulingPlacementSet\u003cSchedulerNode\u003e schedulingPlacementSet \u003d\n-        appSchedulingInfo.getSchedulingPlacementSet(schedulerKey);\n-    if (schedulingPlacementSet !\u003d null) {\n-      Map\u003cString, ResourceRequest\u003e resourceRequests \u003d schedulingPlacementSet\n+    AppPlacementAllocator\u003cSchedulerNode\u003e appPlacementAllocator \u003d\n+        appSchedulingInfo.getAppPlacementAllocator(schedulerKey);\n+    if (appPlacementAllocator !\u003d null) {\n+      Map\u003cString, ResourceRequest\u003e resourceRequests \u003d appPlacementAllocator\n           .getResourceRequests();\n       ResourceRequest prevReq \u003d resourceRequests.get(ResourceRequest.ANY);\n       // Decrement the pending using a dummy RR with\n       // resource \u003d prev update req capability\n       if (prevReq !\u003d null) {\n         appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n             schedulerKey, Container.newInstance(UNDEFINED,\n                 schedulerNode.getNodeID(), \"host:port\",\n                 prevReq.getCapability(), schedulerKey.getPriority(), null));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void cancelPreviousRequest(SchedulerNode schedulerNode,\n      SchedulerRequestKey schedulerKey) {\n    AppPlacementAllocator\u003cSchedulerNode\u003e appPlacementAllocator \u003d\n        appSchedulingInfo.getAppPlacementAllocator(schedulerKey);\n    if (appPlacementAllocator !\u003d null) {\n      Map\u003cString, ResourceRequest\u003e resourceRequests \u003d appPlacementAllocator\n          .getResourceRequests();\n      ResourceRequest prevReq \u003d resourceRequests.get(ResourceRequest.ANY);\n      // Decrement the pending using a dummy RR with\n      // resource \u003d prev update req capability\n      if (prevReq !\u003d null) {\n        appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n            schedulerKey, Container.newInstance(UNDEFINED,\n                schedulerNode.getNodeID(), \"host:port\",\n                prevReq.getCapability(), schedulerKey.getPriority(), null));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,18 @@\n+  private void cancelPreviousRequest(SchedulerNode schedulerNode,\n+      SchedulerRequestKey schedulerKey) {\n+    SchedulingPlacementSet\u003cSchedulerNode\u003e schedulingPlacementSet \u003d\n+        appSchedulingInfo.getSchedulingPlacementSet(schedulerKey);\n+    if (schedulingPlacementSet !\u003d null) {\n+      Map\u003cString, ResourceRequest\u003e resourceRequests \u003d schedulingPlacementSet\n+          .getResourceRequests();\n+      ResourceRequest prevReq \u003d resourceRequests.get(ResourceRequest.ANY);\n+      // Decrement the pending using a dummy RR with\n+      // resource \u003d prev update req capability\n+      if (prevReq !\u003d null) {\n+        appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n+            schedulerKey, Container.newInstance(UNDEFINED,\n+                schedulerNode.getNodeID(), \"host:port\",\n+                prevReq.getCapability(), schedulerKey.getPriority(), null));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void cancelPreviousRequest(SchedulerNode schedulerNode,\n      SchedulerRequestKey schedulerKey) {\n    SchedulingPlacementSet\u003cSchedulerNode\u003e schedulingPlacementSet \u003d\n        appSchedulingInfo.getSchedulingPlacementSet(schedulerKey);\n    if (schedulingPlacementSet !\u003d null) {\n      Map\u003cString, ResourceRequest\u003e resourceRequests \u003d schedulingPlacementSet\n          .getResourceRequests();\n      ResourceRequest prevReq \u003d resourceRequests.get(ResourceRequest.ANY);\n      // Decrement the pending using a dummy RR with\n      // resource \u003d prev update req capability\n      if (prevReq !\u003d null) {\n        appSchedulingInfo.allocate(NodeType.OFF_SWITCH, schedulerNode,\n            schedulerKey, Container.newInstance(UNDEFINED,\n                schedulerNode.getNodeID(), \"host:port\",\n                prevReq.getCapability(), schedulerKey.getPriority(), null));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java"
    }
  }
}