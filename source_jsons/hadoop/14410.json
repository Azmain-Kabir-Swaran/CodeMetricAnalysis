{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Journal.java",
  "functionName": "checkRequest",
  "functionId": "checkRequest___reqInfo-RequestInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
  "functionStartLine": 484,
  "functionEndLine": 512,
  "numCommitsSeen": 64,
  "timeTaken": 2238,
  "changeHistory": [
    "6beb25ab7e4f5454dba0315a296081e61753f301",
    "663e7484c04c197eed53f10a7808140f1c955277",
    "8021d9199f278345aca6211f318145342ad036f4",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "6beb25ab7e4f5454dba0315a296081e61753f301": "Ybodychange",
    "663e7484c04c197eed53f10a7808140f1c955277": "Ybodychange",
    "8021d9199f278345aca6211f318145342ad036f4": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6beb25ab7e4f5454dba0315a296081e61753f301": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13544. Improve logging for JournalNode in federated cluster.\n",
      "commitDate": "14/05/18 10:12 AM",
      "commitName": "6beb25ab7e4f5454dba0315a296081e61753f301",
      "commitAuthor": "Hanisha Koneru",
      "commitDateOld": "13/10/17 2:22 PM",
      "commitNameOld": "8dd1eeb94fef59feaf19182dd8f1fcf1389c7f34",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 212.83,
      "commitsBetweenForRepo": 2051,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n     // Invariant 25 from ZAB paper\n     if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n       throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n           \" is less than the last promised epoch \" +\n-          lastPromisedEpoch.get());\n+          lastPromisedEpoch.get() + \" ; journal id: \" + journalId);\n     } else if (reqInfo.getEpoch() \u003e lastPromisedEpoch.get()) {\n       // A newer client has arrived. Fence any previous writers by updating\n       // the promise.\n       updateLastPromisedEpoch(reqInfo.getEpoch());\n     }\n     \n     // Ensure that the IPCs are arriving in-order as expected.\n     checkSync(reqInfo.getIpcSerialNumber() \u003e currentEpochIpcSerial,\n         \"IPC serial %s from client %s was not higher than prior highest \" +\n-        \"IPC serial %s\", reqInfo.getIpcSerialNumber(),\n-        Server.getRemoteIp(),\n-        currentEpochIpcSerial);\n+        \"IPC serial %s ; journal id: %s\", reqInfo.getIpcSerialNumber(),\n+        Server.getRemoteIp(), currentEpochIpcSerial, journalId);\n     currentEpochIpcSerial \u003d reqInfo.getIpcSerialNumber();\n \n     if (reqInfo.hasCommittedTxId()) {\n       Preconditions.checkArgument(\n           reqInfo.getCommittedTxId() \u003e\u003d committedTxnId.get(),\n           \"Client trying to move committed txid backward from \" +\n-          committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId());\n+          committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId() +\n+              \" ; journal id: \" + journalId);\n       \n       committedTxnId.set(reqInfo.getCommittedTxId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n    // Invariant 25 from ZAB paper\n    if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n      throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n          \" is less than the last promised epoch \" +\n          lastPromisedEpoch.get() + \" ; journal id: \" + journalId);\n    } else if (reqInfo.getEpoch() \u003e lastPromisedEpoch.get()) {\n      // A newer client has arrived. Fence any previous writers by updating\n      // the promise.\n      updateLastPromisedEpoch(reqInfo.getEpoch());\n    }\n    \n    // Ensure that the IPCs are arriving in-order as expected.\n    checkSync(reqInfo.getIpcSerialNumber() \u003e currentEpochIpcSerial,\n        \"IPC serial %s from client %s was not higher than prior highest \" +\n        \"IPC serial %s ; journal id: %s\", reqInfo.getIpcSerialNumber(),\n        Server.getRemoteIp(), currentEpochIpcSerial, journalId);\n    currentEpochIpcSerial \u003d reqInfo.getIpcSerialNumber();\n\n    if (reqInfo.hasCommittedTxId()) {\n      Preconditions.checkArgument(\n          reqInfo.getCommittedTxId() \u003e\u003d committedTxnId.get(),\n          \"Client trying to move committed txid backward from \" +\n          committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId() +\n              \" ; journal id: \" + journalId);\n      \n      committedTxnId.set(reqInfo.getCommittedTxId());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "663e7484c04c197eed53f10a7808140f1c955277": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3950. QJM: misc TODO cleanup, improved log messages, etc. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1387704 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/12 11:52 AM",
      "commitName": "663e7484c04c197eed53f10a7808140f1c955277",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "17/09/12 2:51 PM",
      "commitNameOld": "83c14fbd24353b5e882f065faec81e58449afed3",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.88,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,29 @@\n   private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n     // Invariant 25 from ZAB paper\n     if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n       throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n           \" is less than the last promised epoch \" +\n           lastPromisedEpoch.get());\n+    } else if (reqInfo.getEpoch() \u003e lastPromisedEpoch.get()) {\n+      // A newer client has arrived. Fence any previous writers by updating\n+      // the promise.\n+      updateLastPromisedEpoch(reqInfo.getEpoch());\n     }\n     \n-    // TODO: should other requests check the _exact_ epoch instead of\n-    // the \u003c\u003d check? \u003c\u003d should probably only be necessary for the\n-    // first calls\n-    \n-    // TODO: some check on serial number that they only increase from a given\n-    // client\n+    // Ensure that the IPCs are arriving in-order as expected.\n+    checkSync(reqInfo.getIpcSerialNumber() \u003e currentEpochIpcSerial,\n+        \"IPC serial %s from client %s was not higher than prior highest \" +\n+        \"IPC serial %s\", reqInfo.getIpcSerialNumber(),\n+        Server.getRemoteIp(),\n+        currentEpochIpcSerial);\n+    currentEpochIpcSerial \u003d reqInfo.getIpcSerialNumber();\n \n     if (reqInfo.hasCommittedTxId()) {\n       Preconditions.checkArgument(\n           reqInfo.getCommittedTxId() \u003e\u003d committedTxnId.get(),\n           \"Client trying to move committed txid backward from \" +\n           committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId());\n       \n       committedTxnId.set(reqInfo.getCommittedTxId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n    // Invariant 25 from ZAB paper\n    if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n      throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n          \" is less than the last promised epoch \" +\n          lastPromisedEpoch.get());\n    } else if (reqInfo.getEpoch() \u003e lastPromisedEpoch.get()) {\n      // A newer client has arrived. Fence any previous writers by updating\n      // the promise.\n      updateLastPromisedEpoch(reqInfo.getEpoch());\n    }\n    \n    // Ensure that the IPCs are arriving in-order as expected.\n    checkSync(reqInfo.getIpcSerialNumber() \u003e currentEpochIpcSerial,\n        \"IPC serial %s from client %s was not higher than prior highest \" +\n        \"IPC serial %s\", reqInfo.getIpcSerialNumber(),\n        Server.getRemoteIp(),\n        currentEpochIpcSerial);\n    currentEpochIpcSerial \u003d reqInfo.getIpcSerialNumber();\n\n    if (reqInfo.hasCommittedTxId()) {\n      Preconditions.checkArgument(\n          reqInfo.getCommittedTxId() \u003e\u003d committedTxnId.get(),\n          \"Client trying to move committed txid backward from \" +\n          committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId());\n      \n      committedTxnId.set(reqInfo.getCommittedTxId());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "8021d9199f278345aca6211f318145342ad036f4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3863. Track last \"committed\" txid in QJM. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1380976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/12 9:13 PM",
      "commitName": "8021d9199f278345aca6211f318145342ad036f4",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "27/08/12 12:55 PM",
      "commitNameOld": "1e68d4726b225fb4a62eb8d79a3160dd03059ccb",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.35,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,24 @@\n   private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n     // Invariant 25 from ZAB paper\n     if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n       throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n           \" is less than the last promised epoch \" +\n           lastPromisedEpoch.get());\n     }\n     \n     // TODO: should other requests check the _exact_ epoch instead of\n     // the \u003c\u003d check? \u003c\u003d should probably only be necessary for the\n     // first calls\n     \n     // TODO: some check on serial number that they only increase from a given\n     // client\n+\n+    if (reqInfo.hasCommittedTxId()) {\n+      Preconditions.checkArgument(\n+          reqInfo.getCommittedTxId() \u003e\u003d committedTxnId.get(),\n+          \"Client trying to move committed txid backward from \" +\n+          committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId());\n+      \n+      committedTxnId.set(reqInfo.getCommittedTxId());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n    // Invariant 25 from ZAB paper\n    if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n      throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n          \" is less than the last promised epoch \" +\n          lastPromisedEpoch.get());\n    }\n    \n    // TODO: should other requests check the _exact_ epoch instead of\n    // the \u003c\u003d check? \u003c\u003d should probably only be necessary for the\n    // first calls\n    \n    // TODO: some check on serial number that they only increase from a given\n    // client\n\n    if (reqInfo.hasCommittedTxId()) {\n      Preconditions.checkArgument(\n          reqInfo.getCommittedTxId() \u003e\u003d committedTxnId.get(),\n          \"Client trying to move committed txid backward from \" +\n          committedTxnId.get() + \" to \" + reqInfo.getCommittedTxId());\n      \n      committedTxnId.set(reqInfo.getCommittedTxId());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,15 @@\n+  private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n+    // Invariant 25 from ZAB paper\n+    if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n+      throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n+          \" is less than the last promised epoch \" +\n+          lastPromisedEpoch.get());\n+    }\n+    \n+    // TODO: should other requests check the _exact_ epoch instead of\n+    // the \u003c\u003d check? \u003c\u003d should probably only be necessary for the\n+    // first calls\n+    \n+    // TODO: some check on serial number that they only increase from a given\n+    // client\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void checkRequest(RequestInfo reqInfo) throws IOException {\n    // Invariant 25 from ZAB paper\n    if (reqInfo.getEpoch() \u003c lastPromisedEpoch.get()) {\n      throw new IOException(\"IPC\u0027s epoch \" + reqInfo.getEpoch() +\n          \" is less than the last promised epoch \" +\n          lastPromisedEpoch.get());\n    }\n    \n    // TODO: should other requests check the _exact_ epoch instead of\n    // the \u003c\u003d check? \u003c\u003d should probably only be necessary for the\n    // first calls\n    \n    // TODO: some check on serial number that they only increase from a given\n    // client\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java"
    }
  }
}