{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Storage.java",
  "functionName": "nativeCopyFileUnbuffered",
  "functionId": "nativeCopyFileUnbuffered___srcFile-File__destFile-File__preserveFileDate-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
  "functionStartLine": 1308,
  "functionEndLine": 1362,
  "numCommitsSeen": 53,
  "timeTaken": 1699,
  "changeHistory": [
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
    "1770bb942f9ebea38b6811ba0bc3cc249ef3ccbb"
  ],
  "changeHistoryShort": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": "Ybodychange",
    "1770bb942f9ebea38b6811ba0bc3cc249ef3ccbb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b3ae11d59790bb08b81848e9f944db7d3afbbd8a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12997. Move logging to slf4j in BlockPoolSliceStorage and Storage. Contributed by Ajay Kumar.\n",
      "commitDate": "01/02/18 10:45 AM",
      "commitName": "b3ae11d59790bb08b81848e9f944db7d3afbbd8a",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 47.7,
      "commitsBetweenForRepo": 240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,55 @@\n   public static void nativeCopyFileUnbuffered(File srcFile, File destFile,\n       boolean preserveFileDate) throws IOException {\n     if (srcFile \u003d\u003d null) {\n       throw new NullPointerException(\"Source must not be null\");\n     }\n     if (destFile \u003d\u003d null) {\n       throw new NullPointerException(\"Destination must not be null\");\n     }\n     if (srcFile.exists() \u003d\u003d false) {\n       throw new FileNotFoundException(\"Source \u0027\" + srcFile + \"\u0027 does not exist\");\n     }\n     if (srcFile.isDirectory()) {\n       throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 exists but is a directory\");\n     }\n     if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {\n       throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 and destination \u0027\" +\n           destFile + \"\u0027 are the same\");\n     }\n     File parentFile \u003d destFile.getParentFile();\n     if (parentFile !\u003d null) {\n       if (!parentFile.mkdirs() \u0026\u0026 !parentFile.isDirectory()) {\n         throw new IOException(\"Destination \u0027\" + parentFile\n             + \"\u0027 directory cannot be created\");\n       }\n     }\n     if (destFile.exists()) {\n       if (FileUtil.canWrite(destFile) \u003d\u003d false) {\n         throw new IOException(\"Destination \u0027\" + destFile\n             + \"\u0027 exists but is read-only\");\n       } else {\n         if (destFile.delete() \u003d\u003d false) {\n           throw new IOException(\"Destination \u0027\" + destFile\n               + \"\u0027 exists but cannot be deleted\");\n         }\n       }\n     }\n     try {\n       NativeIO.copyFileUnbuffered(srcFile, destFile);\n     } catch (NativeIOException e) {\n       throw new IOException(\"Failed to copy \" + srcFile.getCanonicalPath()\n           + \" to \" + destFile.getCanonicalPath()\n           + \" due to failure in NativeIO#copyFileUnbuffered(). \"\n           + e.toString());\n     }\n     if (srcFile.length() !\u003d destFile.length()) {\n       throw new IOException(\"Failed to copy full contents from \u0027\" + srcFile\n           + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n     }\n     if (preserveFileDate) {\n       if (destFile.setLastModified(srcFile.lastModified()) \u003d\u003d false) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Failed to preserve last modified date from\u0027\" + srcFile\n-            + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n-        }\n+        LOG.debug(\"Failed to preserve last modified date from\u0027{}\u0027 to \u0027{}\u0027\",\n+            srcFile, destFile);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void nativeCopyFileUnbuffered(File srcFile, File destFile,\n      boolean preserveFileDate) throws IOException {\n    if (srcFile \u003d\u003d null) {\n      throw new NullPointerException(\"Source must not be null\");\n    }\n    if (destFile \u003d\u003d null) {\n      throw new NullPointerException(\"Destination must not be null\");\n    }\n    if (srcFile.exists() \u003d\u003d false) {\n      throw new FileNotFoundException(\"Source \u0027\" + srcFile + \"\u0027 does not exist\");\n    }\n    if (srcFile.isDirectory()) {\n      throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 exists but is a directory\");\n    }\n    if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {\n      throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 and destination \u0027\" +\n          destFile + \"\u0027 are the same\");\n    }\n    File parentFile \u003d destFile.getParentFile();\n    if (parentFile !\u003d null) {\n      if (!parentFile.mkdirs() \u0026\u0026 !parentFile.isDirectory()) {\n        throw new IOException(\"Destination \u0027\" + parentFile\n            + \"\u0027 directory cannot be created\");\n      }\n    }\n    if (destFile.exists()) {\n      if (FileUtil.canWrite(destFile) \u003d\u003d false) {\n        throw new IOException(\"Destination \u0027\" + destFile\n            + \"\u0027 exists but is read-only\");\n      } else {\n        if (destFile.delete() \u003d\u003d false) {\n          throw new IOException(\"Destination \u0027\" + destFile\n              + \"\u0027 exists but cannot be deleted\");\n        }\n      }\n    }\n    try {\n      NativeIO.copyFileUnbuffered(srcFile, destFile);\n    } catch (NativeIOException e) {\n      throw new IOException(\"Failed to copy \" + srcFile.getCanonicalPath()\n          + \" to \" + destFile.getCanonicalPath()\n          + \" due to failure in NativeIO#copyFileUnbuffered(). \"\n          + e.toString());\n    }\n    if (srcFile.length() !\u003d destFile.length()) {\n      throw new IOException(\"Failed to copy full contents from \u0027\" + srcFile\n          + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n    }\n    if (preserveFileDate) {\n      if (destFile.setLastModified(srcFile.lastModified()) \u003d\u003d false) {\n        LOG.debug(\"Failed to preserve last modified date from\u0027{}\u0027 to \u0027{}\u0027\",\n            srcFile, destFile);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java",
      "extendedDetails": {}
    },
    "1770bb942f9ebea38b6811ba0bc3cc249ef3ccbb": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7090. Use unbuffered writes when persisting in-memory replicas. Contributed by Xiaoyu Yao.\n",
      "commitDate": "13/10/14 10:56 AM",
      "commitName": "1770bb942f9ebea38b6811ba0bc3cc249ef3ccbb",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,57 @@\n+  public static void nativeCopyFileUnbuffered(File srcFile, File destFile,\n+      boolean preserveFileDate) throws IOException {\n+    if (srcFile \u003d\u003d null) {\n+      throw new NullPointerException(\"Source must not be null\");\n+    }\n+    if (destFile \u003d\u003d null) {\n+      throw new NullPointerException(\"Destination must not be null\");\n+    }\n+    if (srcFile.exists() \u003d\u003d false) {\n+      throw new FileNotFoundException(\"Source \u0027\" + srcFile + \"\u0027 does not exist\");\n+    }\n+    if (srcFile.isDirectory()) {\n+      throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 exists but is a directory\");\n+    }\n+    if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {\n+      throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 and destination \u0027\" +\n+          destFile + \"\u0027 are the same\");\n+    }\n+    File parentFile \u003d destFile.getParentFile();\n+    if (parentFile !\u003d null) {\n+      if (!parentFile.mkdirs() \u0026\u0026 !parentFile.isDirectory()) {\n+        throw new IOException(\"Destination \u0027\" + parentFile\n+            + \"\u0027 directory cannot be created\");\n+      }\n+    }\n+    if (destFile.exists()) {\n+      if (FileUtil.canWrite(destFile) \u003d\u003d false) {\n+        throw new IOException(\"Destination \u0027\" + destFile\n+            + \"\u0027 exists but is read-only\");\n+      } else {\n+        if (destFile.delete() \u003d\u003d false) {\n+          throw new IOException(\"Destination \u0027\" + destFile\n+              + \"\u0027 exists but cannot be deleted\");\n+        }\n+      }\n+    }\n+    try {\n+      NativeIO.copyFileUnbuffered(srcFile, destFile);\n+    } catch (NativeIOException e) {\n+      throw new IOException(\"Failed to copy \" + srcFile.getCanonicalPath()\n+          + \" to \" + destFile.getCanonicalPath()\n+          + \" due to failure in NativeIO#copyFileUnbuffered(). \"\n+          + e.toString());\n+    }\n+    if (srcFile.length() !\u003d destFile.length()) {\n+      throw new IOException(\"Failed to copy full contents from \u0027\" + srcFile\n+          + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n+    }\n+    if (preserveFileDate) {\n+      if (destFile.setLastModified(srcFile.lastModified()) \u003d\u003d false) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Failed to preserve last modified date from\u0027\" + srcFile\n+            + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void nativeCopyFileUnbuffered(File srcFile, File destFile,\n      boolean preserveFileDate) throws IOException {\n    if (srcFile \u003d\u003d null) {\n      throw new NullPointerException(\"Source must not be null\");\n    }\n    if (destFile \u003d\u003d null) {\n      throw new NullPointerException(\"Destination must not be null\");\n    }\n    if (srcFile.exists() \u003d\u003d false) {\n      throw new FileNotFoundException(\"Source \u0027\" + srcFile + \"\u0027 does not exist\");\n    }\n    if (srcFile.isDirectory()) {\n      throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 exists but is a directory\");\n    }\n    if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {\n      throw new IOException(\"Source \u0027\" + srcFile + \"\u0027 and destination \u0027\" +\n          destFile + \"\u0027 are the same\");\n    }\n    File parentFile \u003d destFile.getParentFile();\n    if (parentFile !\u003d null) {\n      if (!parentFile.mkdirs() \u0026\u0026 !parentFile.isDirectory()) {\n        throw new IOException(\"Destination \u0027\" + parentFile\n            + \"\u0027 directory cannot be created\");\n      }\n    }\n    if (destFile.exists()) {\n      if (FileUtil.canWrite(destFile) \u003d\u003d false) {\n        throw new IOException(\"Destination \u0027\" + destFile\n            + \"\u0027 exists but is read-only\");\n      } else {\n        if (destFile.delete() \u003d\u003d false) {\n          throw new IOException(\"Destination \u0027\" + destFile\n              + \"\u0027 exists but cannot be deleted\");\n        }\n      }\n    }\n    try {\n      NativeIO.copyFileUnbuffered(srcFile, destFile);\n    } catch (NativeIOException e) {\n      throw new IOException(\"Failed to copy \" + srcFile.getCanonicalPath()\n          + \" to \" + destFile.getCanonicalPath()\n          + \" due to failure in NativeIO#copyFileUnbuffered(). \"\n          + e.toString());\n    }\n    if (srcFile.length() !\u003d destFile.length()) {\n      throw new IOException(\"Failed to copy full contents from \u0027\" + srcFile\n          + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n    }\n    if (preserveFileDate) {\n      if (destFile.setLastModified(srcFile.lastModified()) \u003d\u003d false) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Failed to preserve last modified date from\u0027\" + srcFile\n            + \"\u0027 to \u0027\" + destFile + \"\u0027\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/Storage.java"
    }
  }
}