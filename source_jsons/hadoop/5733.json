{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirMkdirOp.java",
  "functionName": "createAncestorDirectories",
  "functionId": "createAncestorDirectories___fsd-FSDirectory__iip-INodesInPath__permission-PermissionStatus",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java",
  "functionStartLine": 104,
  "functionEndLine": 108,
  "numCommitsSeen": 18,
  "timeTaken": 2858,
  "changeHistory": [
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
    "6ae39199dac6ac7be6802b31452552c76da16e24",
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0"
  ],
  "changeHistoryShort": {
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6ae39199dac6ac7be6802b31452552c76da16e24": "Ybodychange",
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7": "Ybodychange",
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-10768. Optimize mkdir ops. Contributed by Daryn Sharp.\n",
      "commitDate": "26/08/16 1:39 PM",
      "commitName": "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-10768. Optimize mkdir ops. Contributed by Daryn Sharp.\n",
          "commitDate": "26/08/16 1:39 PM",
          "commitName": "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "17/08/16 1:53 PM",
          "commitNameOld": "869393643de23dcb010cc33091c8eb398de0fd6c",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.99,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,5 @@\n-  static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n+  static INodesInPath createAncestorDirectories(\n       FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n       throws IOException {\n-    final String last \u003d DFSUtil.bytes2String(iip.getLastLocalName());\n-    INodesInPath existing \u003d iip.getExistingINodes();\n-    List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n-        iip.length() - existing.length());\n-    int size \u003d children.size();\n-    if (size \u003e 1) { // otherwise all ancestors have been created\n-      List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n-      INode parentINode \u003d existing.getLastINode();\n-      // Ensure that the user can traversal the path by adding implicit\n-      // u+wx permission to all ancestor directories\n-      existing \u003d createChildrenDirectories(fsd, existing, directories,\n-          addImplicitUwx(parentINode.getPermissionStatus(), permission));\n-      if (existing \u003d\u003d null) {\n-        return null;\n-      }\n-    }\n-    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n+    return createParentDirectories(fsd, iip, permission, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodesInPath createAncestorDirectories(\n      FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n      throws IOException {\n    return createParentDirectories(fsd, iip, permission, true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java",
          "extendedDetails": {
            "oldValue": "Map.Entry\u003cINodesInPath,String\u003e",
            "newValue": "INodesInPath"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10768. Optimize mkdir ops. Contributed by Daryn Sharp.\n",
          "commitDate": "26/08/16 1:39 PM",
          "commitName": "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "17/08/16 1:53 PM",
          "commitNameOld": "869393643de23dcb010cc33091c8eb398de0fd6c",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 8.99,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,5 @@\n-  static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n+  static INodesInPath createAncestorDirectories(\n       FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n       throws IOException {\n-    final String last \u003d DFSUtil.bytes2String(iip.getLastLocalName());\n-    INodesInPath existing \u003d iip.getExistingINodes();\n-    List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n-        iip.length() - existing.length());\n-    int size \u003d children.size();\n-    if (size \u003e 1) { // otherwise all ancestors have been created\n-      List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n-      INode parentINode \u003d existing.getLastINode();\n-      // Ensure that the user can traversal the path by adding implicit\n-      // u+wx permission to all ancestor directories\n-      existing \u003d createChildrenDirectories(fsd, existing, directories,\n-          addImplicitUwx(parentINode.getPermissionStatus(), permission));\n-      if (existing \u003d\u003d null) {\n-        return null;\n-      }\n-    }\n-    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n+    return createParentDirectories(fsd, iip, permission, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodesInPath createAncestorDirectories(\n      FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n      throws IOException {\n    return createParentDirectories(fsd, iip, permission, true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ae39199dac6ac7be6802b31452552c76da16e24": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10662. Optimize UTF8 string/byte conversions. Contributed by Daryn Sharp.\n",
      "commitDate": "04/08/16 7:07 AM",
      "commitName": "6ae39199dac6ac7be6802b31452552c76da16e24",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/08/16 1:07 AM",
      "commitNameOld": "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 2.25,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n   static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n       FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n       throws IOException {\n-    final String last \u003d\n-        new String(iip.getLastLocalName(), StandardCharsets.UTF_8);\n+    final String last \u003d DFSUtil.bytes2String(iip.getLastLocalName());\n     INodesInPath existing \u003d iip.getExistingINodes();\n     List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n         iip.length() - existing.length());\n     int size \u003d children.size();\n     if (size \u003e 1) { // otherwise all ancestors have been created\n       List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n       INode parentINode \u003d existing.getLastINode();\n       // Ensure that the user can traversal the path by adding implicit\n       // u+wx permission to all ancestor directories\n       existing \u003d createChildrenDirectories(fsd, existing, directories,\n           addImplicitUwx(parentINode.getPermissionStatus(), permission));\n       if (existing \u003d\u003d null) {\n         return null;\n       }\n     }\n     return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n      FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n      throws IOException {\n    final String last \u003d DFSUtil.bytes2String(iip.getLastLocalName());\n    INodesInPath existing \u003d iip.getExistingINodes();\n    List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n        iip.length() - existing.length());\n    int size \u003d children.size();\n    if (size \u003e 1) { // otherwise all ancestors have been created\n      List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n      INode parentINode \u003d existing.getLastINode();\n      // Ensure that the user can traversal the path by adding implicit\n      // u+wx permission to all ancestor directories\n      existing \u003d createChildrenDirectories(fsd, existing, directories,\n          addImplicitUwx(parentINode.getPermissionStatus(), permission));\n      if (existing \u003d\u003d null) {\n        return null;\n      }\n    }\n    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java",
      "extendedDetails": {}
    },
    "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10707. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "02/08/16 1:07 AM",
      "commitName": "a5fb298e56220a35d61b8d2bda716d8fb8ef8bb7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "22/12/14 11:19 PM",
      "commitNameOld": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 588.03,
      "commitsBetweenForRepo": 4488,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n       FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n       throws IOException {\n-    final String last \u003d new String(iip.getLastLocalName(), Charsets.UTF_8);\n+    final String last \u003d\n+        new String(iip.getLastLocalName(), StandardCharsets.UTF_8);\n     INodesInPath existing \u003d iip.getExistingINodes();\n     List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n         iip.length() - existing.length());\n     int size \u003d children.size();\n     if (size \u003e 1) { // otherwise all ancestors have been created\n       List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n       INode parentINode \u003d existing.getLastINode();\n       // Ensure that the user can traversal the path by adding implicit\n       // u+wx permission to all ancestor directories\n       existing \u003d createChildrenDirectories(fsd, existing, directories,\n           addImplicitUwx(parentINode.getPermissionStatus(), permission));\n       if (existing \u003d\u003d null) {\n         return null;\n       }\n     }\n     return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n      FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n      throws IOException {\n    final String last \u003d\n        new String(iip.getLastLocalName(), StandardCharsets.UTF_8);\n    INodesInPath existing \u003d iip.getExistingINodes();\n    List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n        iip.length() - existing.length());\n    int size \u003d children.size();\n    if (size \u003e 1) { // otherwise all ancestors have been created\n      List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n      INode parentINode \u003d existing.getLastINode();\n      // Ensure that the user can traversal the path by adding implicit\n      // u+wx permission to all ancestor directories\n      existing \u003d createChildrenDirectories(fsd, existing, directories,\n          addImplicitUwx(parentINode.getPermissionStatus(), permission));\n      if (existing \u003d\u003d null) {\n        return null;\n      }\n    }\n    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java",
      "extendedDetails": {}
    },
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.\n",
      "commitDate": "22/12/14 11:19 PM",
      "commitName": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,21 @@\n+  static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n+      FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n+      throws IOException {\n+    final String last \u003d new String(iip.getLastLocalName(), Charsets.UTF_8);\n+    INodesInPath existing \u003d iip.getExistingINodes();\n+    List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n+        iip.length() - existing.length());\n+    int size \u003d children.size();\n+    if (size \u003e 1) { // otherwise all ancestors have been created\n+      List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n+      INode parentINode \u003d existing.getLastINode();\n+      // Ensure that the user can traversal the path by adding implicit\n+      // u+wx permission to all ancestor directories\n+      existing \u003d createChildrenDirectories(fsd, existing, directories,\n+          addImplicitUwx(parentINode.getPermissionStatus(), permission));\n+      if (existing \u003d\u003d null) {\n+        return null;\n+      }\n+    }\n+    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static Map.Entry\u003cINodesInPath, String\u003e createAncestorDirectories(\n      FSDirectory fsd, INodesInPath iip, PermissionStatus permission)\n      throws IOException {\n    final String last \u003d new String(iip.getLastLocalName(), Charsets.UTF_8);\n    INodesInPath existing \u003d iip.getExistingINodes();\n    List\u003cString\u003e children \u003d iip.getPath(existing.length(),\n        iip.length() - existing.length());\n    int size \u003d children.size();\n    if (size \u003e 1) { // otherwise all ancestors have been created\n      List\u003cString\u003e directories \u003d children.subList(0, size - 1);\n      INode parentINode \u003d existing.getLastINode();\n      // Ensure that the user can traversal the path by adding implicit\n      // u+wx permission to all ancestor directories\n      existing \u003d createChildrenDirectories(fsd, existing, directories,\n          addImplicitUwx(parentINode.getPermissionStatus(), permission));\n      if (existing \u003d\u003d null) {\n        return null;\n      }\n    }\n    return new AbstractMap.SimpleImmutableEntry\u003c\u003e(existing, last);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirMkdirOp.java"
    }
  }
}