{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSUtils.java",
  "functionName": "getCredentialsProvider",
  "functionId": "getCredentialsProvider___uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
  "functionStartLine": 105,
  "functionEndLine": 142,
  "numCommitsSeen": 55,
  "timeTaken": 6806,
  "changeHistory": [
    "f87b3b11c46704dcdb63089dd971e2a5ba1deaac",
    "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
    "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
    "6542d17ea460ec222137c4b275b13daf15d3fca3",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
    "9cd47602576cd01a905e27642b685905a88eee72",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
    "a5d5342228050a778b20e95adf7885bdba39985d"
  ],
  "changeHistoryShort": {
    "f87b3b11c46704dcdb63089dd971e2a5ba1deaac": "Ymultichange(Yparameterchange,Ybodychange)",
    "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574": "Ymultichange(Yparameterchange,Ybodychange)",
    "2b635125fb059fc204ed35bc0e264c42dd3a9fe9": "Ymultichange(Yparameterchange,Ybodychange)",
    "6542d17ea460ec222137c4b275b13daf15d3fca3": "Ybodychange",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": "Ymultichange(Yparameterchange,Ybodychange)",
    "9cd47602576cd01a905e27642b685905a88eee72": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "a5d5342228050a778b20e95adf7885bdba39985d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f87b3b11c46704dcdb63089dd971e2a5ba1deaac": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16030. AliyunOSS: bring fixes back from HADOOP-15671. Contributed by wujinhu.\n",
      "commitDate": "06/01/19 11:56 PM",
      "commitName": "f87b3b11c46704dcdb63089dd971e2a5ba1deaac",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16030. AliyunOSS: bring fixes back from HADOOP-15671. Contributed by wujinhu.\n",
          "commitDate": "06/01/19 11:56 PM",
          "commitName": "f87b3b11c46704dcdb63089dd971e2a5ba1deaac",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "05/01/19 12:35 AM",
          "commitNameOld": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 1.97,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n-      throws IOException {\n+  public static CredentialsProvider getCredentialsProvider(\n+      URI uri, Configuration conf) throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  Configuration.class).newInstance(conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(\n      URI uri, Configuration conf) throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[uri-URI, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16030. AliyunOSS: bring fixes back from HADOOP-15671. Contributed by wujinhu.\n",
          "commitDate": "06/01/19 11:56 PM",
          "commitName": "f87b3b11c46704dcdb63089dd971e2a5ba1deaac",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "05/01/19 12:35 AM",
          "commitNameOld": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 1.97,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n-      throws IOException {\n+  public static CredentialsProvider getCredentialsProvider(\n+      URI uri, Configuration conf) throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  Configuration.class).newInstance(conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(\n      URI uri, Configuration conf) throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-15759. AliyunOSS: Update oss-sdk version to 3.0.0. Contributed by Jinhu Wu.\"\n\nThis reverts commit e4fca6aae46a3c04fc56897986a4ab4e5aa98503.\n\nRevert \"HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\"\n\nThis reverts commit 2b635125fb059fc204ed35bc0e264c42dd3a9fe9.\n",
      "commitDate": "05/01/19 12:35 AM",
      "commitName": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-15759. AliyunOSS: Update oss-sdk version to 3.0.0. Contributed by Jinhu Wu.\"\n\nThis reverts commit e4fca6aae46a3c04fc56897986a4ab4e5aa98503.\n\nRevert \"HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\"\n\nThis reverts commit 2b635125fb059fc204ed35bc0e264c42dd3a9fe9.\n",
          "commitDate": "05/01/19 12:35 AM",
          "commitName": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
          "commitAuthor": "Sunil G",
          "commitDateOld": "25/09/18 4:48 AM",
          "commitNameOld": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 101.87,
          "commitsBetweenForRepo": 768,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(\n-      URI uri, Configuration conf) throws IOException {\n+  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n+      throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  URI.class, Configuration.class).newInstance(uri, conf);\n+                  Configuration.class).newInstance(conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n      throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  Configuration.class).newInstance(conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {
            "oldValue": "[uri-URI, conf-Configuration]",
            "newValue": "[conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-15759. AliyunOSS: Update oss-sdk version to 3.0.0. Contributed by Jinhu Wu.\"\n\nThis reverts commit e4fca6aae46a3c04fc56897986a4ab4e5aa98503.\n\nRevert \"HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\"\n\nThis reverts commit 2b635125fb059fc204ed35bc0e264c42dd3a9fe9.\n",
          "commitDate": "05/01/19 12:35 AM",
          "commitName": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
          "commitAuthor": "Sunil G",
          "commitDateOld": "25/09/18 4:48 AM",
          "commitNameOld": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 101.87,
          "commitsBetweenForRepo": 768,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(\n-      URI uri, Configuration conf) throws IOException {\n+  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n+      throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  URI.class, Configuration.class).newInstance(uri, conf);\n+                  Configuration.class).newInstance(conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n      throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  Configuration.class).newInstance(conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "2b635125fb059fc204ed35bc0e264c42dd3a9fe9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\n",
      "commitDate": "25/09/18 4:48 AM",
      "commitName": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
      "commitAuthor": "Sammi Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\n",
          "commitDate": "25/09/18 4:48 AM",
          "commitName": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/06/18 10:37 PM",
          "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 89.26,
          "commitsBetweenForRepo": 730,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n-      throws IOException {\n+  public static CredentialsProvider getCredentialsProvider(\n+      URI uri, Configuration conf) throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  Configuration.class).newInstance(conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(\n      URI uri, Configuration conf) throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[uri-URI, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\n",
          "commitDate": "25/09/18 4:48 AM",
          "commitName": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/06/18 10:37 PM",
          "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 89.26,
          "commitsBetweenForRepo": 730,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n-      throws IOException {\n+  public static CredentialsProvider getCredentialsProvider(\n+      URI uri, Configuration conf) throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  Configuration.class).newInstance(conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(\n      URI uri, Configuration conf) throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "6542d17ea460ec222137c4b275b13daf15d3fca3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14999. AliyunOSS: provide one asynchronous multi-part based uploading mechanism. Contributed by Genmao Yu.\n",
      "commitDate": "30/03/18 5:23 AM",
      "commitName": "6542d17ea460ec222137c4b275b13daf15d3fca3",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "16/01/18 11:55 PM",
      "commitNameOld": "9195a6e302028ed3921d1016ac2fa5754f06ebf0",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 72.19,
      "commitsBetweenForRepo": 620,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public static CredentialsProvider getCredentialsProvider(Configuration conf)\n       throws IOException {\n     CredentialsProvider credentials;\n \n-    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n+    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n                   Configuration.class).newInstance(conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n-            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n+            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n      throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  Configuration.class).newInstance(conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
      "extendedDetails": {}
    },
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
      "commitDate": "20/09/16 12:12 AM",
      "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
          "commitDate": "20/09/16 12:12 AM",
          "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "19/09/16 8:39 PM",
          "commitNameOld": "9cd47602576cd01a905e27642b685905a88eee72",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(URI name,\n-      Configuration conf) throws IOException {\n-    URI uri \u003d java.net.URI.create(\n-        name.getScheme() + \"://\" + name.getAuthority());\n+  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n+      throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n                   Configuration.class).newInstance(conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n      throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  Configuration.class).newInstance(conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {
            "oldValue": "[name-URI, conf-Configuration]",
            "newValue": "[conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
          "commitDate": "20/09/16 12:12 AM",
          "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "19/09/16 8:39 PM",
          "commitNameOld": "9cd47602576cd01a905e27642b685905a88eee72",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,38 @@\n-  public static CredentialsProvider getCredentialsProvider(URI name,\n-      Configuration conf) throws IOException {\n-    URI uri \u003d java.net.URI.create(\n-        name.getScheme() + \"://\" + name.getAuthority());\n+  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n+      throws IOException {\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n                   Configuration.class).newInstance(conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(Configuration conf)\n      throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  Configuration.class).newInstance(conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "9cd47602576cd01a905e27642b685905a88eee72": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13609. Refine credential provider related codes for AliyunOss integration. Contributed by Genmao Yu\n",
      "commitDate": "19/09/16 8:39 PM",
      "commitName": "9cd47602576cd01a905e27642b685905a88eee72",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "06/09/16 8:15 PM",
      "commitNameOld": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthorOld": "Mingfei",
      "daysBetweenCommits": 13.02,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,40 @@\n   public static CredentialsProvider getCredentialsProvider(URI name,\n       Configuration conf) throws IOException {\n     URI uri \u003d java.net.URI.create(\n         name.getScheme() + \"://\" + name.getAuthority());\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n-      String accessKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n-      String secretKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n-      credentials \u003d new DefaultCredentialProvider(\n-          new DefaultCredentials(accessKey, secretKey));\n+      credentials \u003d new AliyunCredentialsProvider(newConf);\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  URI.class, Configuration.class).newInstance(uri, conf);\n+                  Configuration.class).newInstance(conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n             \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n             e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static CredentialsProvider getCredentialsProvider(URI name,\n      Configuration conf) throws IOException {\n    URI uri \u003d java.net.URI.create(\n        name.getScheme() + \"://\" + name.getAuthority());\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      credentials \u003d new AliyunCredentialsProvider(newConf);\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  Configuration.class).newInstance(conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
          "commitDate": "06/09/16 8:15 PM",
          "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
          "commitAuthor": "Mingfei",
          "commitDateOld": "06/09/16 8:15 PM",
          "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
          "commitAuthorOld": "Mingfei",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  private CredentialsProvider getCredentialsProvider(URI name,\n+  public static CredentialsProvider getCredentialsProvider(URI name,\n       Configuration conf) throws IOException {\n+    URI uri \u003d java.net.URI.create(\n+        name.getScheme() + \"://\" + name.getAuthority());\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       String accessKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY,\n-              UserInfo.EMPTY.getUser());\n+          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n       String secretKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, SECRET_KEY,\n-              UserInfo.EMPTY.getPassword());\n-      credentials \u003d\n-          new DefaultCredentialProvider(\n-              new DefaultCredentials(accessKey, secretKey));\n-\n+          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n+      credentials \u003d new DefaultCredentialProvider(\n+          new DefaultCredentials(accessKey, secretKey));\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  URI.class, Configuration.class).newInstance(this.uri, conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n-            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY), e);\n+            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n+            e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(URI name,\n      Configuration conf) throws IOException {\n    URI uri \u003d java.net.URI.create(\n        name.getScheme() + \"://\" + name.getAuthority());\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      String accessKey \u003d\n          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n      String secretKey \u003d\n          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n      credentials \u003d new DefaultCredentialProvider(\n          new DefaultCredentials(accessKey, secretKey));\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java",
            "newPath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
            "oldMethodName": "getCredentialsProvider",
            "newMethodName": "getCredentialsProvider"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
          "commitDate": "06/09/16 8:15 PM",
          "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
          "commitAuthor": "Mingfei",
          "commitDateOld": "06/09/16 8:15 PM",
          "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
          "commitAuthorOld": "Mingfei",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  private CredentialsProvider getCredentialsProvider(URI name,\n+  public static CredentialsProvider getCredentialsProvider(URI name,\n       Configuration conf) throws IOException {\n+    URI uri \u003d java.net.URI.create(\n+        name.getScheme() + \"://\" + name.getAuthority());\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       String accessKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY,\n-              UserInfo.EMPTY.getUser());\n+          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n       String secretKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, SECRET_KEY,\n-              UserInfo.EMPTY.getPassword());\n-      credentials \u003d\n-          new DefaultCredentialProvider(\n-              new DefaultCredentials(accessKey, secretKey));\n-\n+          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n+      credentials \u003d new DefaultCredentialProvider(\n+          new DefaultCredentials(accessKey, secretKey));\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  URI.class, Configuration.class).newInstance(this.uri, conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n-            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY), e);\n+            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n+            e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(URI name,\n      Configuration conf) throws IOException {\n    URI uri \u003d java.net.URI.create(\n        name.getScheme() + \"://\" + name.getAuthority());\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      String accessKey \u003d\n          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n      String secretKey \u003d\n          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n      credentials \u003d new DefaultCredentialProvider(\n          new DefaultCredentials(accessKey, secretKey));\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
          "commitDate": "06/09/16 8:15 PM",
          "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
          "commitAuthor": "Mingfei",
          "commitDateOld": "06/09/16 8:15 PM",
          "commitNameOld": "cdb77110e77b70ed0c1125b2a6a422a8c7c28ec7",
          "commitAuthorOld": "Mingfei",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  private CredentialsProvider getCredentialsProvider(URI name,\n+  public static CredentialsProvider getCredentialsProvider(URI name,\n       Configuration conf) throws IOException {\n+    URI uri \u003d java.net.URI.create(\n+        name.getScheme() + \"://\" + name.getAuthority());\n     CredentialsProvider credentials;\n \n     String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n     if (StringUtils.isEmpty(className)) {\n       Configuration newConf \u003d\n           ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n               AliyunOSSFileSystem.class);\n       String accessKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY,\n-              UserInfo.EMPTY.getUser());\n+          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n       String secretKey \u003d\n-          AliyunOSSUtils.getPassword(newConf, SECRET_KEY,\n-              UserInfo.EMPTY.getPassword());\n-      credentials \u003d\n-          new DefaultCredentialProvider(\n-              new DefaultCredentials(accessKey, secretKey));\n-\n+          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n+      credentials \u003d new DefaultCredentialProvider(\n+          new DefaultCredentials(accessKey, secretKey));\n     } else {\n       try {\n         LOG.debug(\"Credential provider class is:\" + className);\n         Class\u003c?\u003e credClass \u003d Class.forName(className);\n         try {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor(\n-                  URI.class, Configuration.class).newInstance(this.uri, conf);\n+                  URI.class, Configuration.class).newInstance(uri, conf);\n         } catch (NoSuchMethodException | SecurityException e) {\n           credentials \u003d\n               (CredentialsProvider)credClass.getDeclaredConstructor()\n               .newInstance();\n         }\n       } catch (ClassNotFoundException e) {\n         throw new IOException(className + \" not found.\", e);\n       } catch (NoSuchMethodException | SecurityException e) {\n         throw new IOException(String.format(\"%s constructor exception.  A \" +\n             \"class specified in %s must provide an accessible constructor \" +\n             \"accepting URI and Configuration, or an accessible default \" +\n-            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY), e);\n+            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n+            e);\n       } catch (ReflectiveOperationException | IllegalArgumentException e) {\n         throw new IOException(className + \" instantiation exception.\", e);\n       }\n     }\n \n     return credentials;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static CredentialsProvider getCredentialsProvider(URI name,\n      Configuration conf) throws IOException {\n    URI uri \u003d java.net.URI.create(\n        name.getScheme() + \"://\" + name.getAuthority());\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      String accessKey \u003d\n          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY);\n      String secretKey \u003d\n          AliyunOSSUtils.getPassword(newConf, SECRET_KEY);\n      credentials \u003d new DefaultCredentialProvider(\n          new DefaultCredentials(accessKey, secretKey));\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),\n            e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "a5d5342228050a778b20e95adf7885bdba39985d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12756. Incorporate Aliyun OSS file system implementation. Contributed by Mingfei Shi and Lin Zhou\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "a5d5342228050a778b20e95adf7885bdba39985d",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,46 @@\n+  private CredentialsProvider getCredentialsProvider(URI name,\n+      Configuration conf) throws IOException {\n+    CredentialsProvider credentials;\n+\n+    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n+    if (StringUtils.isEmpty(className)) {\n+      Configuration newConf \u003d\n+          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n+              AliyunOSSFileSystem.class);\n+      String accessKey \u003d\n+          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY,\n+              UserInfo.EMPTY.getUser());\n+      String secretKey \u003d\n+          AliyunOSSUtils.getPassword(newConf, SECRET_KEY,\n+              UserInfo.EMPTY.getPassword());\n+      credentials \u003d\n+          new DefaultCredentialProvider(\n+              new DefaultCredentials(accessKey, secretKey));\n+\n+    } else {\n+      try {\n+        LOG.debug(\"Credential provider class is:\" + className);\n+        Class\u003c?\u003e credClass \u003d Class.forName(className);\n+        try {\n+          credentials \u003d\n+              (CredentialsProvider)credClass.getDeclaredConstructor(\n+                  URI.class, Configuration.class).newInstance(this.uri, conf);\n+        } catch (NoSuchMethodException | SecurityException e) {\n+          credentials \u003d\n+              (CredentialsProvider)credClass.getDeclaredConstructor()\n+              .newInstance();\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new IOException(className + \" not found.\", e);\n+      } catch (NoSuchMethodException | SecurityException e) {\n+        throw new IOException(String.format(\"%s constructor exception.  A \" +\n+            \"class specified in %s must provide an accessible constructor \" +\n+            \"accepting URI and Configuration, or an accessible default \" +\n+            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY), e);\n+      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n+        throw new IOException(className + \" instantiation exception.\", e);\n+      }\n+    }\n+\n+    return credentials;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CredentialsProvider getCredentialsProvider(URI name,\n      Configuration conf) throws IOException {\n    CredentialsProvider credentials;\n\n    String className \u003d conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);\n    if (StringUtils.isEmpty(className)) {\n      Configuration newConf \u003d\n          ProviderUtils.excludeIncompatibleCredentialProviders(conf,\n              AliyunOSSFileSystem.class);\n      String accessKey \u003d\n          AliyunOSSUtils.getPassword(newConf, ACCESS_KEY,\n              UserInfo.EMPTY.getUser());\n      String secretKey \u003d\n          AliyunOSSUtils.getPassword(newConf, SECRET_KEY,\n              UserInfo.EMPTY.getPassword());\n      credentials \u003d\n          new DefaultCredentialProvider(\n              new DefaultCredentials(accessKey, secretKey));\n\n    } else {\n      try {\n        LOG.debug(\"Credential provider class is:\" + className);\n        Class\u003c?\u003e credClass \u003d Class.forName(className);\n        try {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor(\n                  URI.class, Configuration.class).newInstance(this.uri, conf);\n        } catch (NoSuchMethodException | SecurityException e) {\n          credentials \u003d\n              (CredentialsProvider)credClass.getDeclaredConstructor()\n              .newInstance();\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IOException(className + \" not found.\", e);\n      } catch (NoSuchMethodException | SecurityException e) {\n        throw new IOException(String.format(\"%s constructor exception.  A \" +\n            \"class specified in %s must provide an accessible constructor \" +\n            \"accepting URI and Configuration, or an accessible default \" +\n            \"constructor.\", className, ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY), e);\n      } catch (ReflectiveOperationException | IllegalArgumentException e) {\n        throw new IOException(className + \" instantiation exception.\", e);\n      }\n    }\n\n    return credentials;\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystem.java"
    }
  }
}