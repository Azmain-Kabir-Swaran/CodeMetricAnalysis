{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecayRpcScheduler.java",
  "functionName": "updateAverageResponseTime",
  "functionId": "updateAverageResponseTime___enableDecay-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
  "functionStartLine": 654,
  "functionEndLine": 682,
  "numCommitsSeen": 19,
  "timeTaken": 1975,
  "changeHistory": [
    "dcf4559ebdb5bb11d03b264a9875bff316b89eef",
    "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc"
  ],
  "changeHistoryShort": {
    "dcf4559ebdb5bb11d03b264a9875bff316b89eef": "Ybodychange",
    "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5": "Ybodychange",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf4559ebdb5bb11d03b264a9875bff316b89eef": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14166. Reset the DecayRpcScheduler AvgResponseTime metric to zero when queue is not used. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "24/05/17 10:27 AM",
      "commitName": "dcf4559ebdb5bb11d03b264a9875bff316b89eef",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "25/04/17 6:45 PM",
      "commitNameOld": "4ea2778acb78f31b470e318d2b65ea43db76909b",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 28.65,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   void updateAverageResponseTime(boolean enableDecay) {\n     for (int i \u003d 0; i \u003c numLevels; i++) {\n       double averageResponseTime \u003d 0;\n       long totalResponseTime \u003d responseTimeTotalInCurrWindow.get(i);\n       long responseTimeCount \u003d responseTimeCountInCurrWindow.get(i);\n       if (responseTimeCount \u003e 0) {\n         averageResponseTime \u003d (double) totalResponseTime / responseTimeCount;\n       }\n       final double lastAvg \u003d responseTimeAvgInLastWindow.get(i);\n       if (lastAvg \u003e PRECISION || averageResponseTime \u003e PRECISION) {\n         if (enableDecay) {\n           final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n           responseTimeAvgInLastWindow.set(i, decayed);\n         } else {\n           responseTimeAvgInLastWindow.set(i, averageResponseTime);\n         }\n+      } else {\n+        responseTimeAvgInLastWindow.set(i, 0);\n       }\n       responseTimeCountInLastWindow.set(i, responseTimeCount);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"updateAverageResponseTime queue: {} Average: {} Count: {}\",\n             i, averageResponseTime, responseTimeCount);\n       }\n       // Reset for next decay window\n       responseTimeTotalInCurrWindow.set(i, 0);\n       responseTimeCountInCurrWindow.set(i, 0);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateAverageResponseTime(boolean enableDecay) {\n    for (int i \u003d 0; i \u003c numLevels; i++) {\n      double averageResponseTime \u003d 0;\n      long totalResponseTime \u003d responseTimeTotalInCurrWindow.get(i);\n      long responseTimeCount \u003d responseTimeCountInCurrWindow.get(i);\n      if (responseTimeCount \u003e 0) {\n        averageResponseTime \u003d (double) totalResponseTime / responseTimeCount;\n      }\n      final double lastAvg \u003d responseTimeAvgInLastWindow.get(i);\n      if (lastAvg \u003e PRECISION || averageResponseTime \u003e PRECISION) {\n        if (enableDecay) {\n          final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n          responseTimeAvgInLastWindow.set(i, decayed);\n        } else {\n          responseTimeAvgInLastWindow.set(i, averageResponseTime);\n        }\n      } else {\n        responseTimeAvgInLastWindow.set(i, 0);\n      }\n      responseTimeCountInLastWindow.set(i, responseTimeCount);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"updateAverageResponseTime queue: {} Average: {} Count: {}\",\n            i, averageResponseTime, responseTimeCount);\n      }\n      // Reset for next decay window\n      responseTimeTotalInCurrWindow.set(i, 0);\n      responseTimeCountInCurrWindow.set(i, 0);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
      "extendedDetails": {}
    },
    "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13197. Add non-decayed call metrics for DecayRpcScheduler. Contributed by Xiaoyu Yao.\n",
      "commitDate": "27/05/16 6:07 PM",
      "commitName": "4ca8859583839761663fc1fc1de1b3ce2e3fc5b5",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "17/05/16 2:58 PM",
      "commitNameOld": "94784848456a92a6502f3a3c0074e44fba4b19c9",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 10.13,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,27 @@\n   void updateAverageResponseTime(boolean enableDecay) {\n     for (int i \u003d 0; i \u003c numLevels; i++) {\n       double averageResponseTime \u003d 0;\n       long totalResponseTime \u003d responseTimeTotalInCurrWindow.get(i);\n       long responseTimeCount \u003d responseTimeCountInCurrWindow.get(i);\n       if (responseTimeCount \u003e 0) {\n         averageResponseTime \u003d (double) totalResponseTime / responseTimeCount;\n       }\n       final double lastAvg \u003d responseTimeAvgInLastWindow.get(i);\n-      if (enableDecay \u0026\u0026 lastAvg \u003e 0.0) {\n-        final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n-        responseTimeAvgInLastWindow.set(i, decayed);\n-      } else {\n-        responseTimeAvgInLastWindow.set(i, averageResponseTime);\n+      if (lastAvg \u003e PRECISION || averageResponseTime \u003e PRECISION) {\n+        if (enableDecay) {\n+          final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n+          responseTimeAvgInLastWindow.set(i, decayed);\n+        } else {\n+          responseTimeAvgInLastWindow.set(i, averageResponseTime);\n+        }\n       }\n       responseTimeCountInLastWindow.set(i, responseTimeCount);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"updateAverageResponseTime queue: {} Average: {} Count: {}\",\n             i, averageResponseTime, responseTimeCount);\n       }\n       // Reset for next decay window\n       responseTimeTotalInCurrWindow.set(i, 0);\n       responseTimeCountInCurrWindow.set(i, 0);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateAverageResponseTime(boolean enableDecay) {\n    for (int i \u003d 0; i \u003c numLevels; i++) {\n      double averageResponseTime \u003d 0;\n      long totalResponseTime \u003d responseTimeTotalInCurrWindow.get(i);\n      long responseTimeCount \u003d responseTimeCountInCurrWindow.get(i);\n      if (responseTimeCount \u003e 0) {\n        averageResponseTime \u003d (double) totalResponseTime / responseTimeCount;\n      }\n      final double lastAvg \u003d responseTimeAvgInLastWindow.get(i);\n      if (lastAvg \u003e PRECISION || averageResponseTime \u003e PRECISION) {\n        if (enableDecay) {\n          final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n          responseTimeAvgInLastWindow.set(i, decayed);\n        } else {\n          responseTimeAvgInLastWindow.set(i, averageResponseTime);\n        }\n      }\n      responseTimeCountInLastWindow.set(i, responseTimeCount);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"updateAverageResponseTime queue: {} Average: {} Count: {}\",\n            i, averageResponseTime, responseTimeCount);\n      }\n      // Reset for next decay window\n      responseTimeTotalInCurrWindow.set(i, 0);\n      responseTimeCountInCurrWindow.set(i, 0);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
      "extendedDetails": {}
    },
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 8:42 AM",
      "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,25 @@\n+  void updateAverageResponseTime(boolean enableDecay) {\n+    for (int i \u003d 0; i \u003c numLevels; i++) {\n+      double averageResponseTime \u003d 0;\n+      long totalResponseTime \u003d responseTimeTotalInCurrWindow.get(i);\n+      long responseTimeCount \u003d responseTimeCountInCurrWindow.get(i);\n+      if (responseTimeCount \u003e 0) {\n+        averageResponseTime \u003d (double) totalResponseTime / responseTimeCount;\n+      }\n+      final double lastAvg \u003d responseTimeAvgInLastWindow.get(i);\n+      if (enableDecay \u0026\u0026 lastAvg \u003e 0.0) {\n+        final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n+        responseTimeAvgInLastWindow.set(i, decayed);\n+      } else {\n+        responseTimeAvgInLastWindow.set(i, averageResponseTime);\n+      }\n+      responseTimeCountInLastWindow.set(i, responseTimeCount);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"updateAverageResponseTime queue: {} Average: {} Count: {}\",\n+            i, averageResponseTime, responseTimeCount);\n+      }\n+      // Reset for next decay window\n+      responseTimeTotalInCurrWindow.set(i, 0);\n+      responseTimeCountInCurrWindow.set(i, 0);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void updateAverageResponseTime(boolean enableDecay) {\n    for (int i \u003d 0; i \u003c numLevels; i++) {\n      double averageResponseTime \u003d 0;\n      long totalResponseTime \u003d responseTimeTotalInCurrWindow.get(i);\n      long responseTimeCount \u003d responseTimeCountInCurrWindow.get(i);\n      if (responseTimeCount \u003e 0) {\n        averageResponseTime \u003d (double) totalResponseTime / responseTimeCount;\n      }\n      final double lastAvg \u003d responseTimeAvgInLastWindow.get(i);\n      if (enableDecay \u0026\u0026 lastAvg \u003e 0.0) {\n        final double decayed \u003d decayFactor * lastAvg + averageResponseTime;\n        responseTimeAvgInLastWindow.set(i, decayed);\n      } else {\n        responseTimeAvgInLastWindow.set(i, averageResponseTime);\n      }\n      responseTimeCountInLastWindow.set(i, responseTimeCount);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"updateAverageResponseTime queue: {} Average: {} Count: {}\",\n            i, averageResponseTime, responseTimeCount);\n      }\n      // Reset for next decay window\n      responseTimeTotalInCurrWindow.set(i, 0);\n      responseTimeCountInCurrWindow.set(i, 0);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java"
    }
  }
}