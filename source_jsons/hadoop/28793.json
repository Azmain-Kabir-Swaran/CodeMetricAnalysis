{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocator.java",
  "functionName": "buildContainer",
  "functionId": "buildContainer___rmIdentifier-long__appParams-AllocationParams__idCounter-ContainerIdGenerator__rr-ResourceRequest__id-ApplicationAttemptId__userName-String__node-RemoteNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
  "functionStartLine": 403,
  "functionEndLine": 417,
  "numCommitsSeen": 29,
  "timeTaken": 5934,
  "changeHistory": [
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "aa3cab1eb29c56368d15882d7260a994e615e8d8",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "aa975bc7811fc7c52b814ad9635bff8c2d34655b",
    "1597630681c784a3d59f5605b87e96197b8139d7",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "aa3cab1eb29c56368d15882d7260a994e615e8d8": "Ymultichange(Yparameterchange,Ybodychange)",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": "Ybodychange",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Yparameterchange",
    "aa975bc7811fc7c52b814ad9635bff8c2d34655b": "Ybodychange",
    "1597630681c784a3d59f5605b87e96197b8139d7": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,15 @@\n   private Container buildContainer(long rmIdentifier,\n       AllocationParams appParams, ContainerIdGenerator idCounter,\n       ResourceRequest rr, ApplicationAttemptId id, String userName,\n       RemoteNode node) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n-    long currTime \u003d System.currentTimeMillis();\n-    ContainerTokenIdentifier containerTokenIdentifier \u003d\n-        new ContainerTokenIdentifier(\n-            cId, 0, node.getNodeId().toString(), userName,\n-            capability, currTime + appParams.containerTokenExpiryInterval,\n-            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n-            rr.getPriority(), currTime,\n-            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n-            ExecutionType.OPPORTUNISTIC);\n-    byte[] pwd \u003d\n-        tokenSecretManager.createPassword(containerTokenIdentifier);\n-    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n-        containerTokenIdentifier);\n-    Container container \u003d BuilderUtils.newContainer(\n-        cId, node.getNodeId(), node.getHttpAddress(),\n-        capability, rr.getPriority(), containerToken,\n-        containerTokenIdentifier.getExecutionType(),\n-        rr.getAllocationRequestId());\n-    return container;\n+    return createContainer(\n+        rmIdentifier, appParams.getContainerTokenExpiryInterval(),\n+        SchedulerRequestKey.create(rr), userName, node, cId, capability);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      RemoteNode node) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    return createContainer(\n        rmIdentifier, appParams.getContainerTokenExpiryInterval(),\n        SchedulerRequestKey.create(rr), userName, node, cId, capability);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "aa3cab1eb29c56368d15882d7260a994e615e8d8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5799. Fix Opportunistic Allocation to set the correct value of Node Http Address. (asuresh)\n",
      "commitDate": "29/10/16 2:03 AM",
      "commitName": "aa3cab1eb29c56368d15882d7260a994e615e8d8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5799. Fix Opportunistic Allocation to set the correct value of Node Http Address. (asuresh)\n",
          "commitDate": "29/10/16 2:03 AM",
          "commitName": "aa3cab1eb29c56368d15882d7260a994e615e8d8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/09/16 3:11 PM",
          "commitNameOld": "10be45986cdf86a89055065b752959bd6369d54f",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 29.45,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n   private Container buildContainer(long rmIdentifier,\n       AllocationParams appParams, ContainerIdGenerator idCounter,\n       ResourceRequest rr, ApplicationAttemptId id, String userName,\n-      NodeId nodeId) throws YarnException {\n+      RemoteNode node) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n-            cId, 0, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n+            cId, 0, node.getNodeId().toString(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n             tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n             rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         tokenSecretManager.createPassword(containerTokenIdentifier);\n-    Token containerToken \u003d newContainerToken(nodeId, pwd,\n+    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n-        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n+        cId, node.getNodeId(), node.getHttpAddress(),\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      RemoteNode node) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, 0, node.getNodeId().toString(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, node.getNodeId(), node.getHttpAddress(),\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[rmIdentifier-long, appParams-AllocationParams, idCounter-ContainerIdGenerator, rr-ResourceRequest, id-ApplicationAttemptId, userName-String, nodeId-NodeId]",
            "newValue": "[rmIdentifier-long, appParams-AllocationParams, idCounter-ContainerIdGenerator, rr-ResourceRequest, id-ApplicationAttemptId, userName-String, node-RemoteNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5799. Fix Opportunistic Allocation to set the correct value of Node Http Address. (asuresh)\n",
          "commitDate": "29/10/16 2:03 AM",
          "commitName": "aa3cab1eb29c56368d15882d7260a994e615e8d8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/09/16 3:11 PM",
          "commitNameOld": "10be45986cdf86a89055065b752959bd6369d54f",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 29.45,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n   private Container buildContainer(long rmIdentifier,\n       AllocationParams appParams, ContainerIdGenerator idCounter,\n       ResourceRequest rr, ApplicationAttemptId id, String userName,\n-      NodeId nodeId) throws YarnException {\n+      RemoteNode node) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n-            cId, 0, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n+            cId, 0, node.getNodeId().toString(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n             tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n             rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         tokenSecretManager.createPassword(containerTokenIdentifier);\n-    Token containerToken \u003d newContainerToken(nodeId, pwd,\n+    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n-        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n+        cId, node.getNodeId(), node.getHttpAddress(),\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      RemoteNode node) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, 0, node.getNodeId().toString(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, node.getNodeId(), node.getHttpAddress(),\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private Container buildContainer(long rmIdentifier,\n       AllocationParams appParams, ContainerIdGenerator idCounter,\n       ResourceRequest rr, ApplicationAttemptId id, String userName,\n       NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n-            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n+            cId, 0, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n             tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n             rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         tokenSecretManager.createPassword(containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, 0, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Container buildContainer(DistributedSchedulerParams appParams,\n-      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n-      String userName, NodeId nodeId) throws YarnException {\n+  private Container buildContainer(long rmIdentifier,\n+      AllocationParams appParams, ContainerIdGenerator idCounter,\n+      ResourceRequest rr, ApplicationAttemptId id, String userName,\n+      NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n-            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n-            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n+            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n+            rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n-        context.getContainerTokenSecretManager().createPassword(\n-            containerTokenIdentifier);\n+        tokenSecretManager.createPassword(containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
            "oldMethodName": "buildContainer",
            "newMethodName": "buildContainer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Container buildContainer(DistributedSchedulerParams appParams,\n-      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n-      String userName, NodeId nodeId) throws YarnException {\n+  private Container buildContainer(long rmIdentifier,\n+      AllocationParams appParams, ContainerIdGenerator idCounter,\n+      ResourceRequest rr, ApplicationAttemptId id, String userName,\n+      NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n-            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n-            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n+            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n+            rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n-        context.getContainerTokenSecretManager().createPassword(\n-            containerTokenIdentifier);\n+        tokenSecretManager.createPassword(containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private Container buildContainer(DistributedSchedulerParams appParams,\n-      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n-      String userName, NodeId nodeId) throws YarnException {\n+  private Container buildContainer(long rmIdentifier,\n+      AllocationParams appParams, ContainerIdGenerator idCounter,\n+      ResourceRequest rr, ApplicationAttemptId id, String userName,\n+      NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n-            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n-            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n+            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n+            rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n-        context.getContainerTokenSecretManager().createPassword(\n-            containerTokenIdentifier);\n+        tokenSecretManager.createPassword(containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Container buildContainer(long rmIdentifier,\n      AllocationParams appParams, ContainerIdGenerator idCounter,\n      ResourceRequest rr, ApplicationAttemptId id, String userName,\n      NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[appParams-DistributedSchedulerParams, idCounter-ContainerIdCounter, rr-ResourceRequest, id-ApplicationAttemptId, userName-String, nodeId-NodeId]",
            "newValue": "[rmIdentifier-long, appParams-AllocationParams, idCounter-ContainerIdGenerator, rr-ResourceRequest, id-ApplicationAttemptId, userName-String, nodeId-NodeId]"
          }
        }
      ]
    },
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4888. Changes in scheduler to identify resource-requests explicitly by allocation-id. (Subru Krishnan via wangda)\n",
      "commitDate": "05/08/16 10:43 AM",
      "commitName": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/07/16 11:48 AM",
      "commitNameOld": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 4.95,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private Container buildContainer(DistributedSchedulerParams appParams,\n       ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n       String userName, NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n             context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n             nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         context.getContainerTokenSecretManager().createPassword(\n             containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken,\n-        containerTokenIdentifier.getExecutionType());\n+        containerTokenIdentifier.getExecutionType(),\n+        rr.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(DistributedSchedulerParams appParams,\n      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n      String userName, NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        context.getContainerTokenSecretManager().createPassword(\n            containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        rr.getAllocationRequestId());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "27/05/16 2:06 PM",
      "commitNameOld": "aa975bc7811fc7c52b814ad9635bff8c2d34655b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 64.9,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-  private Container buildContainer(DistSchedulerParams appParams,\n+  private Container buildContainer(DistributedSchedulerParams appParams,\n       ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n       String userName, NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n             context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n             nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         context.getContainerTokenSecretManager().createPassword(\n             containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType());\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(DistributedSchedulerParams appParams,\n      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n      String userName, NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        context.getContainerTokenSecretManager().createPassword(\n            containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {
        "oldValue": "[appParams-DistSchedulerParams, idCounter-ContainerIdCounter, rr-ResourceRequest, id-ApplicationAttemptId, userName-String, nodeId-NodeId]",
        "newValue": "[appParams-DistributedSchedulerParams, idCounter-ContainerIdCounter, rr-ResourceRequest, id-ApplicationAttemptId, userName-String, nodeId-NodeId]"
      }
    },
    "aa975bc7811fc7c52b814ad9635bff8c2d34655b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5127. Expose ExecutionType in Container api record. (Hitesh Sharma via asuresh)\n",
      "commitDate": "27/05/16 2:06 PM",
      "commitName": "aa975bc7811fc7c52b814ad9635bff8c2d34655b",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "18/05/16 6:46 PM",
      "commitNameOld": "1597630681c784a3d59f5605b87e96197b8139d7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.81,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private Container buildContainer(DistSchedulerParams appParams,\n       ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n       String userName, NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n             capability, currTime + appParams.containerTokenExpiryInterval,\n             context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n             nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         context.getContainerTokenSecretManager().createPassword(\n             containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n-        capability, rr.getPriority(), containerToken);\n+        capability, rr.getPriority(), containerToken,\n+        containerTokenIdentifier.getExecutionType());\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(DistSchedulerParams appParams,\n      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n      String userName, NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        context.getContainerTokenSecretManager().createPassword(\n            containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "1597630681c784a3d59f5605b87e96197b8139d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5110. Fix OpportunisticContainerAllocator to insert complete HostAddress in issued ContainerTokenIds. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "18/05/16 6:46 PM",
      "commitName": "1597630681c784a3d59f5605b87e96197b8139d7",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 23.84,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private Container buildContainer(DistSchedulerParams appParams,\n       ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n       String userName, NodeId nodeId) throws YarnException {\n     ContainerId cId \u003d\n         ContainerId.newContainerId(id, idCounter.generateContainerId());\n \n     // Normalize the resource asks (Similar to what the the RM scheduler does\n     // before accepting an ask)\n     Resource capability \u003d normalizeCapability(appParams, rr);\n \n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n-            cId, nodeId.getHost(), userName, capability,\n-            currTime + appParams.containerTokenExpiryInterval,\n+            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n+            capability, currTime + appParams.containerTokenExpiryInterval,\n             context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n             nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC);\n     byte[] pwd \u003d\n         context.getContainerTokenSecretManager().createPassword(\n             containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(nodeId, pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n         capability, rr.getPriority(), containerToken);\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(DistSchedulerParams appParams,\n      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n      String userName, NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost() + \":\" + nodeId.getPort(), userName,\n            capability, currTime + appParams.containerTokenExpiryInterval,\n            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        context.getContainerTokenSecretManager().createPassword(\n            containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken);\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,29 @@\n+  private Container buildContainer(DistSchedulerParams appParams,\n+      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n+      String userName, NodeId nodeId) throws YarnException {\n+    ContainerId cId \u003d\n+        ContainerId.newContainerId(id, idCounter.generateContainerId());\n+\n+    // Normalize the resource asks (Similar to what the the RM scheduler does\n+    // before accepting an ask)\n+    Resource capability \u003d normalizeCapability(appParams, rr);\n+\n+    long currTime \u003d System.currentTimeMillis();\n+    ContainerTokenIdentifier containerTokenIdentifier \u003d\n+        new ContainerTokenIdentifier(\n+            cId, nodeId.getHost(), userName, capability,\n+            currTime + appParams.containerTokenExpiryInterval,\n+            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n+            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n+            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n+            ExecutionType.OPPORTUNISTIC);\n+    byte[] pwd \u003d\n+        context.getContainerTokenSecretManager().createPassword(\n+            containerTokenIdentifier);\n+    Token containerToken \u003d newContainerToken(nodeId, pwd,\n+        containerTokenIdentifier);\n+    Container container \u003d BuilderUtils.newContainer(\n+        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n+        capability, rr.getPriority(), containerToken);\n+    return container;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Container buildContainer(DistSchedulerParams appParams,\n      ContainerIdCounter idCounter, ResourceRequest rr, ApplicationAttemptId id,\n      String userName, NodeId nodeId) throws YarnException {\n    ContainerId cId \u003d\n        ContainerId.newContainerId(id, idCounter.generateContainerId());\n\n    // Normalize the resource asks (Similar to what the the RM scheduler does\n    // before accepting an ask)\n    Resource capability \u003d normalizeCapability(appParams, rr);\n\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, nodeId.getHost(), userName, capability,\n            currTime + appParams.containerTokenExpiryInterval,\n            context.getContainerTokenSecretManager().getCurrentKey().getKeyId(),\n            nodeStatusUpdater.getRMIdentifier(), rr.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        context.getContainerTokenSecretManager().createPassword(\n            containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(nodeId, pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, nodeId, nodeId.getHost() + \":\" + webpagePort,\n        capability, rr.getPriority(), containerToken);\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/OpportunisticContainerAllocator.java"
    }
  }
}