{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DfsClientShmManager.java",
  "functionName": "requestNewShm",
  "functionId": "requestNewShm___clientName-String__peer-DomainPeer",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
  "functionStartLine": 156,
  "functionEndLine": 206,
  "numCommitsSeen": 15,
  "timeTaken": 3038,
  "changeHistory": [
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f"
  ],
  "changeHistoryShort": {
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42": "Ymultichange(Yfilerename,Ybodychange)",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n     private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n         throws IOException {\n       final DataOutputStream out \u003d \n           new DataOutputStream(\n               new BufferedOutputStream(peer.getOutputStream()));\n       new Sender(out).requestShortCircuitShm(clientName);\n       ShortCircuitShmResponseProto resp \u003d \n           ShortCircuitShmResponseProto.parseFrom(\n             PBHelperClient.vintPrefixed(peer.getInputStream()));\n       String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n       switch (resp.getStatus()) {\n       case SUCCESS:\n         DomainSocket sock \u003d peer.getDomainSocket();\n         byte buf[] \u003d new byte[1];\n         FileInputStream fis[] \u003d new FileInputStream[1];\n         if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n           throw new EOFException(\"got EOF while trying to transfer the \" +\n               \"file descriptor for the shared memory segment.\");\n         }\n         if (fis[0] \u003d\u003d null) {\n           throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n               \"pass a file descriptor for the shared memory segment.\");\n         }\n         try {\n           DfsClientShm shm \u003d \n               new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                   fis[0], this, peer);\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": createNewShm: created \" + shm);\n-          }\n+          LOG.trace(\"{}: createNewShm: created {}\", this, shm);\n           return shm;\n         } finally {\n           try {\n             fis[0].close();\n           } catch (Throwable e) {\n             LOG.debug(\"Exception in closing \" + fis[0], e);\n           }\n         }\n       case ERROR_UNSUPPORTED:\n         // The DataNode just does not support short-circuit shared memory\n         // access, and we should stop asking.\n         LOG.info(this + \": datanode does not support short-circuit \" +\n             \"shared memory access: \" + error);\n         disabled \u003d true;\n         return null;\n       default:\n         // The datanode experienced some kind of unexpected error when trying to\n         // create the short-circuit shared memory segment.\n         LOG.warn(this + \": error requesting short-circuit shared memory \" +\n             \"access: \" + error);\n         return null;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                  fis[0], this, peer);\n          LOG.trace(\"{}: createNewShm: created {}\", this, shm);\n          return shm;\n        } finally {\n          try {\n            fis[0].close();\n          } catch (Throwable e) {\n            LOG.debug(\"Exception in closing \" + fis[0], e);\n          }\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n     private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n         throws IOException {\n       final DataOutputStream out \u003d \n           new DataOutputStream(\n               new BufferedOutputStream(peer.getOutputStream()));\n       new Sender(out).requestShortCircuitShm(clientName);\n       ShortCircuitShmResponseProto resp \u003d \n           ShortCircuitShmResponseProto.parseFrom(\n             PBHelperClient.vintPrefixed(peer.getInputStream()));\n       String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n       switch (resp.getStatus()) {\n       case SUCCESS:\n         DomainSocket sock \u003d peer.getDomainSocket();\n         byte buf[] \u003d new byte[1];\n         FileInputStream fis[] \u003d new FileInputStream[1];\n         if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n           throw new EOFException(\"got EOF while trying to transfer the \" +\n               \"file descriptor for the shared memory segment.\");\n         }\n         if (fis[0] \u003d\u003d null) {\n           throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n               \"pass a file descriptor for the shared memory segment.\");\n         }\n         try {\n           DfsClientShm shm \u003d \n               new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                   fis[0], this, peer);\n-          LOG.trace(\"{}: createNewShm: created {}\", this, shm);\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": createNewShm: created \" + shm);\n+          }\n           return shm;\n         } finally {\n           try {\n             fis[0].close();\n           } catch (Throwable e) {\n             LOG.debug(\"Exception in closing \" + fis[0], e);\n           }\n         }\n       case ERROR_UNSUPPORTED:\n         // The DataNode just does not support short-circuit shared memory\n         // access, and we should stop asking.\n         LOG.info(this + \": datanode does not support short-circuit \" +\n             \"shared memory access: \" + error);\n         disabled \u003d true;\n         return null;\n       default:\n         // The datanode experienced some kind of unexpected error when trying to\n         // create the short-circuit shared memory segment.\n         LOG.warn(this + \": error requesting short-circuit shared memory \" +\n             \"access: \" + error);\n         return null;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                  fis[0], this, peer);\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": createNewShm: created \" + shm);\n          }\n          return shm;\n        } finally {\n          try {\n            fis[0].close();\n          } catch (Throwable e) {\n            LOG.debug(\"Exception in closing \" + fis[0], e);\n          }\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/08/15 1:31 PM",
      "commitNameOld": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 38.18,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,51 @@\n     private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n         throws IOException {\n       final DataOutputStream out \u003d \n           new DataOutputStream(\n               new BufferedOutputStream(peer.getOutputStream()));\n       new Sender(out).requestShortCircuitShm(clientName);\n       ShortCircuitShmResponseProto resp \u003d \n           ShortCircuitShmResponseProto.parseFrom(\n             PBHelperClient.vintPrefixed(peer.getInputStream()));\n       String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n       switch (resp.getStatus()) {\n       case SUCCESS:\n         DomainSocket sock \u003d peer.getDomainSocket();\n         byte buf[] \u003d new byte[1];\n         FileInputStream fis[] \u003d new FileInputStream[1];\n         if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n           throw new EOFException(\"got EOF while trying to transfer the \" +\n               \"file descriptor for the shared memory segment.\");\n         }\n         if (fis[0] \u003d\u003d null) {\n           throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n               \"pass a file descriptor for the shared memory segment.\");\n         }\n         try {\n           DfsClientShm shm \u003d \n               new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                   fis[0], this, peer);\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": createNewShm: created \" + shm);\n-          }\n+          LOG.trace(\"{}: createNewShm: created {}\", this, shm);\n           return shm;\n         } finally {\n           try {\n             fis[0].close();\n           } catch (Throwable e) {\n             LOG.debug(\"Exception in closing \" + fis[0], e);\n           }\n         }\n       case ERROR_UNSUPPORTED:\n         // The DataNode just does not support short-circuit shared memory\n         // access, and we should stop asking.\n         LOG.info(this + \": datanode does not support short-circuit \" +\n             \"shared memory access: \" + error);\n         disabled \u003d true;\n         return null;\n       default:\n         // The datanode experienced some kind of unexpected error when trying to\n         // create the short-circuit shared memory segment.\n         LOG.warn(this + \": error requesting short-circuit shared memory \" +\n             \"access: \" + error);\n         return null;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                  fis[0], this, peer);\n          LOG.trace(\"{}: createNewShm: created {}\", this, shm);\n          return shm;\n        } finally {\n          try {\n            fis[0].close();\n          } catch (Throwable e) {\n            LOG.debug(\"Exception in closing \" + fis[0], e);\n          }\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
      "extendedDetails": {}
    },
    "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8934. Move ShortCircuitShm to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "22/08/15 1:31 PM",
      "commitName": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8934. Move ShortCircuitShm to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "22/08/15 1:31 PM",
          "commitName": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/08/15 12:39 AM",
          "commitNameOld": "61bf9cae6f3882c6e9a9222f59457b9be91e3018",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n     private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n         throws IOException {\n       final DataOutputStream out \u003d \n           new DataOutputStream(\n               new BufferedOutputStream(peer.getOutputStream()));\n       new Sender(out).requestShortCircuitShm(clientName);\n       ShortCircuitShmResponseProto resp \u003d \n           ShortCircuitShmResponseProto.parseFrom(\n-              PBHelper.vintPrefixed(peer.getInputStream()));\n+            PBHelperClient.vintPrefixed(peer.getInputStream()));\n       String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n       switch (resp.getStatus()) {\n       case SUCCESS:\n         DomainSocket sock \u003d peer.getDomainSocket();\n         byte buf[] \u003d new byte[1];\n         FileInputStream fis[] \u003d new FileInputStream[1];\n         if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n           throw new EOFException(\"got EOF while trying to transfer the \" +\n               \"file descriptor for the shared memory segment.\");\n         }\n         if (fis[0] \u003d\u003d null) {\n           throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n               \"pass a file descriptor for the shared memory segment.\");\n         }\n         try {\n           DfsClientShm shm \u003d \n-              new DfsClientShm(PBHelper.convert(resp.getId()),\n+              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                   fis[0], this, peer);\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": createNewShm: created \" + shm);\n           }\n           return shm;\n         } finally {\n-          IOUtils.cleanup(LOG,  fis[0]);\n+          try {\n+            fis[0].close();\n+          } catch (Throwable e) {\n+            LOG.debug(\"Exception in closing \" + fis[0], e);\n+          }\n         }\n       case ERROR_UNSUPPORTED:\n         // The DataNode just does not support short-circuit shared memory\n         // access, and we should stop asking.\n         LOG.info(this + \": datanode does not support short-circuit \" +\n             \"shared memory access: \" + error);\n         disabled \u003d true;\n         return null;\n       default:\n         // The datanode experienced some kind of unexpected error when trying to\n         // create the short-circuit shared memory segment.\n         LOG.warn(this + \": error requesting short-circuit shared memory \" +\n             \"access: \" + error);\n         return null;\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                  fis[0], this, peer);\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": createNewShm: created \" + shm);\n          }\n          return shm;\n        } finally {\n          try {\n            fis[0].close();\n          } catch (Throwable e) {\n            LOG.debug(\"Exception in closing \" + fis[0], e);\n          }\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8934. Move ShortCircuitShm to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "22/08/15 1:31 PM",
          "commitName": "490bb5ebd6c6d6f9c08fcad167f976687fc3aa42",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "22/08/15 12:39 AM",
          "commitNameOld": "61bf9cae6f3882c6e9a9222f59457b9be91e3018",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,53 @@\n     private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n         throws IOException {\n       final DataOutputStream out \u003d \n           new DataOutputStream(\n               new BufferedOutputStream(peer.getOutputStream()));\n       new Sender(out).requestShortCircuitShm(clientName);\n       ShortCircuitShmResponseProto resp \u003d \n           ShortCircuitShmResponseProto.parseFrom(\n-              PBHelper.vintPrefixed(peer.getInputStream()));\n+            PBHelperClient.vintPrefixed(peer.getInputStream()));\n       String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n       switch (resp.getStatus()) {\n       case SUCCESS:\n         DomainSocket sock \u003d peer.getDomainSocket();\n         byte buf[] \u003d new byte[1];\n         FileInputStream fis[] \u003d new FileInputStream[1];\n         if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n           throw new EOFException(\"got EOF while trying to transfer the \" +\n               \"file descriptor for the shared memory segment.\");\n         }\n         if (fis[0] \u003d\u003d null) {\n           throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n               \"pass a file descriptor for the shared memory segment.\");\n         }\n         try {\n           DfsClientShm shm \u003d \n-              new DfsClientShm(PBHelper.convert(resp.getId()),\n+              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                   fis[0], this, peer);\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": createNewShm: created \" + shm);\n           }\n           return shm;\n         } finally {\n-          IOUtils.cleanup(LOG,  fis[0]);\n+          try {\n+            fis[0].close();\n+          } catch (Throwable e) {\n+            LOG.debug(\"Exception in closing \" + fis[0], e);\n+          }\n         }\n       case ERROR_UNSUPPORTED:\n         // The DataNode just does not support short-circuit shared memory\n         // access, and we should stop asking.\n         LOG.info(this + \": datanode does not support short-circuit \" +\n             \"shared memory access: \" + error);\n         disabled \u003d true;\n         return null;\n       default:\n         // The datanode experienced some kind of unexpected error when trying to\n         // create the short-circuit shared memory segment.\n         LOG.warn(this + \": error requesting short-circuit shared memory \" +\n             \"access: \" + error);\n         return null;\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelperClient.convert(resp.getId()),\n                  fis[0], this, peer);\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": createNewShm: created \" + shm);\n          }\n          return shm;\n        } finally {\n          try {\n            fis[0].close();\n          } catch (Throwable e) {\n            LOG.debug(\"Exception in closing \" + fis[0], e);\n          }\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n              PBHelper.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelper.convert(resp.getId()),\n                  fis[0], this, peer);\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": createNewShm: created \" + shm);\n          }\n          return shm;\n        } finally {\n          IOUtils.cleanup(LOG,  fis[0]);\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/DfsClientShmManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/DfsClientShmManager.java"
      }
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,49 @@\n+    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n+        throws IOException {\n+      final DataOutputStream out \u003d \n+          new DataOutputStream(\n+              new BufferedOutputStream(peer.getOutputStream()));\n+      new Sender(out).requestShortCircuitShm(clientName);\n+      ShortCircuitShmResponseProto resp \u003d \n+          ShortCircuitShmResponseProto.parseFrom(\n+              PBHelper.vintPrefixed(peer.getInputStream()));\n+      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n+      switch (resp.getStatus()) {\n+      case SUCCESS:\n+        DomainSocket sock \u003d peer.getDomainSocket();\n+        byte buf[] \u003d new byte[1];\n+        FileInputStream fis[] \u003d new FileInputStream[1];\n+        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n+          throw new EOFException(\"got EOF while trying to transfer the \" +\n+              \"file descriptor for the shared memory segment.\");\n+        }\n+        if (fis[0] \u003d\u003d null) {\n+          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n+              \"pass a file descriptor for the shared memory segment.\");\n+        }\n+        try {\n+          DfsClientShm shm \u003d \n+              new DfsClientShm(PBHelper.convert(resp.getId()),\n+                  fis[0], this, peer);\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": createNewShm: created \" + shm);\n+          }\n+          return shm;\n+        } finally {\n+          IOUtils.cleanup(LOG,  fis[0]);\n+        }\n+      case ERROR_UNSUPPORTED:\n+        // The DataNode just does not support short-circuit shared memory\n+        // access, and we should stop asking.\n+        LOG.info(this + \": datanode does not support short-circuit \" +\n+            \"shared memory access: \" + error);\n+        disabled \u003d true;\n+        return null;\n+      default:\n+        // The datanode experienced some kind of unexpected error when trying to\n+        // create the short-circuit shared memory segment.\n+        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n+            \"access: \" + error);\n+        return null;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private DfsClientShm requestNewShm(String clientName, DomainPeer peer)\n        throws IOException {\n      final DataOutputStream out \u003d \n          new DataOutputStream(\n              new BufferedOutputStream(peer.getOutputStream()));\n      new Sender(out).requestShortCircuitShm(clientName);\n      ShortCircuitShmResponseProto resp \u003d \n          ShortCircuitShmResponseProto.parseFrom(\n              PBHelper.vintPrefixed(peer.getInputStream()));\n      String error \u003d resp.hasError() ? resp.getError() : \"(unknown)\";\n      switch (resp.getStatus()) {\n      case SUCCESS:\n        DomainSocket sock \u003d peer.getDomainSocket();\n        byte buf[] \u003d new byte[1];\n        FileInputStream fis[] \u003d new FileInputStream[1];\n        if (sock.recvFileInputStreams(fis, buf, 0, buf.length) \u003c 0) {\n          throw new EOFException(\"got EOF while trying to transfer the \" +\n              \"file descriptor for the shared memory segment.\");\n        }\n        if (fis[0] \u003d\u003d null) {\n          throw new IOException(\"the datanode \" + datanode + \" failed to \" +\n              \"pass a file descriptor for the shared memory segment.\");\n        }\n        try {\n          DfsClientShm shm \u003d \n              new DfsClientShm(PBHelper.convert(resp.getId()),\n                  fis[0], this, peer);\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": createNewShm: created \" + shm);\n          }\n          return shm;\n        } finally {\n          IOUtils.cleanup(LOG,  fis[0]);\n        }\n      case ERROR_UNSUPPORTED:\n        // The DataNode just does not support short-circuit shared memory\n        // access, and we should stop asking.\n        LOG.info(this + \": datanode does not support short-circuit \" +\n            \"shared memory access: \" + error);\n        disabled \u003d true;\n        return null;\n      default:\n        // The datanode experienced some kind of unexpected error when trying to\n        // create the short-circuit shared memory segment.\n        LOG.warn(this + \": error requesting short-circuit shared memory \" +\n            \"access: \" + error);\n        return null;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/DfsClientShmManager.java"
    }
  }
}