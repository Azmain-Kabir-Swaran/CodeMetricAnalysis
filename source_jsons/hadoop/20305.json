{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Task.java",
  "functionName": "runJobCleanupTask",
  "functionId": "runJobCleanupTask___umbilical-TaskUmbilicalProtocol__reporter-TaskReporter",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
  "functionStartLine": 1461,
  "functionEndLine": 1500,
  "numCommitsSeen": 47,
  "timeTaken": 9564,
  "changeHistory": [
    "51a667bef8300d6499c9867b50eee352311a4185",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "ad7cf36d5fd99ecaf29e33d8de437e21f81a32d3",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "51a667bef8300d6499c9867b50eee352311a4185": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "ad7cf36d5fd99ecaf29e33d8de437e21f81a32d3": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "51a667bef8300d6499c9867b50eee352311a4185": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2762. Cleanup MR staging directory on completion. Contributed by Mahadev Konar.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185880 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 2:37 PM",
      "commitName": "51a667bef8300d6499c9867b50eee352311a4185",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 54.89,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                                TaskReporter reporter\n                               ) throws IOException, InterruptedException {\n     // set phase for this task\n     setPhase(TaskStatus.Phase.CLEANUP);\n     getProgress().setStatus(\"cleanup\");\n     statusUpdate(umbilical);\n     // do the cleanup\n     LOG.info(\"Cleaning up job\");\n     if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n         || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n       LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n       if (conf.getUseNewMapper()) {\n         committer.abortJob(jobContext, jobRunStateForCleanup);\n       } else {\n         org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n           (org.apache.hadoop.mapred.OutputCommitter)committer;\n         oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n       }\n     } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n       LOG.info(\"Committing job\");\n       committer.commitJob(jobContext);\n     } else {\n       throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                             + jobRunStateForCleanup + \" expecting \"\n                             + JobStatus.State.SUCCEEDED + \", \" \n                             + JobStatus.State.FAILED + \" or \"\n                             + JobStatus.State.KILLED);\n     }\n     \n     // delete the staging area for the job\n     JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n     if (!keepTaskFiles(conf)) {\n-      String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n+      String jobTempDir \u003d conf.get(MRJobConfig.MAPREDUCE_JOB_DIR);\n       Path jobTempDirPath \u003d new Path(jobTempDir);\n       FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n       fs.delete(jobTempDirPath, true);\n     }\n     done(umbilical, reporter);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                               TaskReporter reporter\n                              ) throws IOException, InterruptedException {\n    // set phase for this task\n    setPhase(TaskStatus.Phase.CLEANUP);\n    getProgress().setStatus(\"cleanup\");\n    statusUpdate(umbilical);\n    // do the cleanup\n    LOG.info(\"Cleaning up job\");\n    if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n        || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n      LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n      if (conf.getUseNewMapper()) {\n        committer.abortJob(jobContext, jobRunStateForCleanup);\n      } else {\n        org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n          (org.apache.hadoop.mapred.OutputCommitter)committer;\n        oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n      }\n    } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n      LOG.info(\"Committing job\");\n      committer.commitJob(jobContext);\n    } else {\n      throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                            + jobRunStateForCleanup + \" expecting \"\n                            + JobStatus.State.SUCCEEDED + \", \" \n                            + JobStatus.State.FAILED + \" or \"\n                            + JobStatus.State.KILLED);\n    }\n    \n    // delete the staging area for the job\n    JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n    if (!keepTaskFiles(conf)) {\n      String jobTempDir \u003d conf.get(MRJobConfig.MAPREDUCE_JOB_DIR);\n      Path jobTempDirPath \u003d new Path(jobTempDir);\n      FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n      fs.delete(jobTempDirPath, true);\n    }\n    done(umbilical, reporter);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                               TaskReporter reporter\n                              ) throws IOException, InterruptedException {\n    // set phase for this task\n    setPhase(TaskStatus.Phase.CLEANUP);\n    getProgress().setStatus(\"cleanup\");\n    statusUpdate(umbilical);\n    // do the cleanup\n    LOG.info(\"Cleaning up job\");\n    if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n        || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n      LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n      if (conf.getUseNewMapper()) {\n        committer.abortJob(jobContext, jobRunStateForCleanup);\n      } else {\n        org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n          (org.apache.hadoop.mapred.OutputCommitter)committer;\n        oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n      }\n    } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n      LOG.info(\"Committing job\");\n      committer.commitJob(jobContext);\n    } else {\n      throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                            + jobRunStateForCleanup + \" expecting \"\n                            + JobStatus.State.SUCCEEDED + \", \" \n                            + JobStatus.State.FAILED + \" or \"\n                            + JobStatus.State.KILLED);\n    }\n    \n    // delete the staging area for the job\n    JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n    if (!keepTaskFiles(conf)) {\n      String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n      Path jobTempDirPath \u003d new Path(jobTempDir);\n      FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n      fs.delete(jobTempDirPath, true);\n    }\n    done(umbilical, reporter);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                               TaskReporter reporter\n                              ) throws IOException, InterruptedException {\n    // set phase for this task\n    setPhase(TaskStatus.Phase.CLEANUP);\n    getProgress().setStatus(\"cleanup\");\n    statusUpdate(umbilical);\n    // do the cleanup\n    LOG.info(\"Cleaning up job\");\n    if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n        || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n      LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n      if (conf.getUseNewMapper()) {\n        committer.abortJob(jobContext, jobRunStateForCleanup);\n      } else {\n        org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n          (org.apache.hadoop.mapred.OutputCommitter)committer;\n        oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n      }\n    } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n      LOG.info(\"Committing job\");\n      committer.commitJob(jobContext);\n    } else {\n      throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                            + jobRunStateForCleanup + \" expecting \"\n                            + JobStatus.State.SUCCEEDED + \", \" \n                            + JobStatus.State.FAILED + \" or \"\n                            + JobStatus.State.KILLED);\n    }\n    \n    // delete the staging area for the job\n    JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n    if (!keepTaskFiles(conf)) {\n      String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n      Path jobTempDirPath \u003d new Path(jobTempDir);\n      FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n      fs.delete(jobTempDirPath, true);\n    }\n    done(umbilical, reporter);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Task.java",
        "oldMethodName": "runJobCleanupTask",
        "newMethodName": "runJobCleanupTask"
      }
    },
    "ad7cf36d5fd99ecaf29e33d8de437e21f81a32d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2606. Remove IsolationRunner. Contributed by Alejandro Abdelnur\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1145413 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/11 5:54 PM",
      "commitName": "ad7cf36d5fd99ecaf29e33d8de437e21f81a32d3",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 29.12,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                                TaskReporter reporter\n                               ) throws IOException, InterruptedException {\n     // set phase for this task\n     setPhase(TaskStatus.Phase.CLEANUP);\n     getProgress().setStatus(\"cleanup\");\n     statusUpdate(umbilical);\n     // do the cleanup\n     LOG.info(\"Cleaning up job\");\n     if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n         || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n       LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n       if (conf.getUseNewMapper()) {\n         committer.abortJob(jobContext, jobRunStateForCleanup);\n       } else {\n         org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n           (org.apache.hadoop.mapred.OutputCommitter)committer;\n         oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n       }\n     } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n       LOG.info(\"Committing job\");\n       committer.commitJob(jobContext);\n     } else {\n       throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                             + jobRunStateForCleanup + \" expecting \"\n                             + JobStatus.State.SUCCEEDED + \", \" \n                             + JobStatus.State.FAILED + \" or \"\n                             + JobStatus.State.KILLED);\n     }\n     \n     // delete the staging area for the job\n     JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n-    if (!supportIsolationRunner(conf)) {\n+    if (!keepTaskFiles(conf)) {\n       String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n       Path jobTempDirPath \u003d new Path(jobTempDir);\n       FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n       fs.delete(jobTempDirPath, true);\n     }\n     done(umbilical, reporter);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                               TaskReporter reporter\n                              ) throws IOException, InterruptedException {\n    // set phase for this task\n    setPhase(TaskStatus.Phase.CLEANUP);\n    getProgress().setStatus(\"cleanup\");\n    statusUpdate(umbilical);\n    // do the cleanup\n    LOG.info(\"Cleaning up job\");\n    if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n        || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n      LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n      if (conf.getUseNewMapper()) {\n        committer.abortJob(jobContext, jobRunStateForCleanup);\n      } else {\n        org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n          (org.apache.hadoop.mapred.OutputCommitter)committer;\n        oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n      }\n    } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n      LOG.info(\"Committing job\");\n      committer.commitJob(jobContext);\n    } else {\n      throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                            + jobRunStateForCleanup + \" expecting \"\n                            + JobStatus.State.SUCCEEDED + \", \" \n                            + JobStatus.State.FAILED + \" or \"\n                            + JobStatus.State.KILLED);\n    }\n    \n    // delete the staging area for the job\n    JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n    if (!keepTaskFiles(conf)) {\n      String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n      Path jobTempDirPath \u003d new Path(jobTempDir);\n      FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n      fs.delete(jobTempDirPath, true);\n    }\n    done(umbilical, reporter);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n+                               TaskReporter reporter\n+                              ) throws IOException, InterruptedException {\n+    // set phase for this task\n+    setPhase(TaskStatus.Phase.CLEANUP);\n+    getProgress().setStatus(\"cleanup\");\n+    statusUpdate(umbilical);\n+    // do the cleanup\n+    LOG.info(\"Cleaning up job\");\n+    if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n+        || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n+      LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n+      if (conf.getUseNewMapper()) {\n+        committer.abortJob(jobContext, jobRunStateForCleanup);\n+      } else {\n+        org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n+          (org.apache.hadoop.mapred.OutputCommitter)committer;\n+        oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n+      }\n+    } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n+      LOG.info(\"Committing job\");\n+      committer.commitJob(jobContext);\n+    } else {\n+      throw new IOException(\"Invalid state of the job for cleanup. State found \"\n+                            + jobRunStateForCleanup + \" expecting \"\n+                            + JobStatus.State.SUCCEEDED + \", \" \n+                            + JobStatus.State.FAILED + \" or \"\n+                            + JobStatus.State.KILLED);\n+    }\n+    \n+    // delete the staging area for the job\n+    JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n+    if (!supportIsolationRunner(conf)) {\n+      String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n+      Path jobTempDirPath \u003d new Path(jobTempDir);\n+      FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n+      fs.delete(jobTempDirPath, true);\n+    }\n+    done(umbilical, reporter);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void runJobCleanupTask(TaskUmbilicalProtocol umbilical,\n                               TaskReporter reporter\n                              ) throws IOException, InterruptedException {\n    // set phase for this task\n    setPhase(TaskStatus.Phase.CLEANUP);\n    getProgress().setStatus(\"cleanup\");\n    statusUpdate(umbilical);\n    // do the cleanup\n    LOG.info(\"Cleaning up job\");\n    if (jobRunStateForCleanup \u003d\u003d JobStatus.State.FAILED \n        || jobRunStateForCleanup \u003d\u003d JobStatus.State.KILLED) {\n      LOG.info(\"Aborting job with runstate : \" + jobRunStateForCleanup.name());\n      if (conf.getUseNewMapper()) {\n        committer.abortJob(jobContext, jobRunStateForCleanup);\n      } else {\n        org.apache.hadoop.mapred.OutputCommitter oldCommitter \u003d \n          (org.apache.hadoop.mapred.OutputCommitter)committer;\n        oldCommitter.abortJob(jobContext, jobRunStateForCleanup);\n      }\n    } else if (jobRunStateForCleanup \u003d\u003d JobStatus.State.SUCCEEDED){\n      LOG.info(\"Committing job\");\n      committer.commitJob(jobContext);\n    } else {\n      throw new IOException(\"Invalid state of the job for cleanup. State found \"\n                            + jobRunStateForCleanup + \" expecting \"\n                            + JobStatus.State.SUCCEEDED + \", \" \n                            + JobStatus.State.FAILED + \" or \"\n                            + JobStatus.State.KILLED);\n    }\n    \n    // delete the staging area for the job\n    JobConf conf \u003d new JobConf(jobContext.getConfiguration());\n    if (!supportIsolationRunner(conf)) {\n      String jobTempDir \u003d conf.get(\"mapreduce.job.dir\");\n      Path jobTempDirPath \u003d new Path(jobTempDir);\n      FileSystem fs \u003d jobTempDirPath.getFileSystem(conf);\n      fs.delete(jobTempDirPath, true);\n    }\n    done(umbilical, reporter);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Task.java"
    }
  }
}