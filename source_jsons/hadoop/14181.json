{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QuorumJournalManager.java",
  "functionName": "getJournalCTime",
  "functionId": "getJournalCTime",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
  "functionStartLine": 794,
  "functionEndLine": 824,
  "numCommitsSeen": 42,
  "timeTaken": 2842,
  "changeHistory": [
    "b9e423fa8d30ea89244f6ec018a8064cc87d94a9",
    "56205ca7d7f3b2a7e55f48b9cf444326e1d2b1a7",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de"
  ],
  "changeHistoryShort": {
    "b9e423fa8d30ea89244f6ec018a8064cc87d94a9": "Ybodychange",
    "56205ca7d7f3b2a7e55f48b9cf444326e1d2b1a7": "Ybodychange",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b9e423fa8d30ea89244f6ec018a8064cc87d94a9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12496. Make QuorumJournalManager timeout properties configurable. Contributed by Ajay Kumar.\n",
      "commitDate": "21/09/17 8:44 AM",
      "commitName": "b9e423fa8d30ea89244f6ec018a8064cc87d94a9",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/02/17 4:33 PM",
      "commitNameOld": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 210.63,
      "commitsBetweenForRepo": 1366,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public long getJournalCTime() throws IOException {\n     QuorumCall\u003cAsyncLogger, Long\u003e call \u003d loggers.getJournalCTime();\n     try {\n       call.waitFor(loggers.size(), loggers.size(), 0,\n-          GET_JOURNAL_CTIME_TIMEOUT_MS, \"getJournalCTime\");\n+          timeoutMs, \"getJournalCTime\");\n       \n       if (call.countExceptions() \u003e 0) {\n         call.rethrowException(\"Could not journal CTime for one \"\n             + \"more JournalNodes\");\n       }\n       \n       // Either they all return the same thing or this call fails, so we can\n       // just return the first result.\n       try {\n         DFSUtil.assertAllResultsEqual(call.getResults().values());\n       } catch (AssertionError ae) {\n         throw new IOException(\"Results differed for getJournalCTime\", ae);\n       }\n       for (Long result : call.getResults().values()) {\n         return result;\n       }\n     } catch (InterruptedException e) {\n       throw new IOException(\"Interrupted waiting for getJournalCTime() \" +\n           \"response\");\n     } catch (TimeoutException e) {\n       throw new IOException(\"Timed out waiting for getJournalCTime() \" +\n           \"response\");\n     }\n     \n     throw new AssertionError(\"Unreachable code.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getJournalCTime() throws IOException {\n    QuorumCall\u003cAsyncLogger, Long\u003e call \u003d loggers.getJournalCTime();\n    try {\n      call.waitFor(loggers.size(), loggers.size(), 0,\n          timeoutMs, \"getJournalCTime\");\n      \n      if (call.countExceptions() \u003e 0) {\n        call.rethrowException(\"Could not journal CTime for one \"\n            + \"more JournalNodes\");\n      }\n      \n      // Either they all return the same thing or this call fails, so we can\n      // just return the first result.\n      try {\n        DFSUtil.assertAllResultsEqual(call.getResults().values());\n      } catch (AssertionError ae) {\n        throw new IOException(\"Results differed for getJournalCTime\", ae);\n      }\n      for (Long result : call.getResults().values()) {\n        return result;\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted waiting for getJournalCTime() \" +\n          \"response\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting for getJournalCTime() \" +\n          \"response\");\n    }\n    \n    throw new AssertionError(\"Unreachable code.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "56205ca7d7f3b2a7e55f48b9cf444326e1d2b1a7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5840. Follow-up to HDFS-5138 to improve error handling during partial upgrade failures. Contributed by Aaron T. Myers, Suresh Srinivas, and Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581260 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 11:48 PM",
      "commitName": "56205ca7d7f3b2a7e55f48b9cf444326e1d2b1a7",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "20/03/14 4:06 PM",
      "commitNameOld": "9dab514b22f49322738935cfd915c2b4eba50b88",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 4.32,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   public long getJournalCTime() throws IOException {\n     QuorumCall\u003cAsyncLogger, Long\u003e call \u003d loggers.getJournalCTime();\n     try {\n       call.waitFor(loggers.size(), loggers.size(), 0,\n           GET_JOURNAL_CTIME_TIMEOUT_MS, \"getJournalCTime\");\n       \n       if (call.countExceptions() \u003e 0) {\n         call.rethrowException(\"Could not journal CTime for one \"\n             + \"more JournalNodes\");\n       }\n       \n       // Either they all return the same thing or this call fails, so we can\n       // just return the first result.\n-      DFSUtil.assertAllResultsEqual(call.getResults().values());\n+      try {\n+        DFSUtil.assertAllResultsEqual(call.getResults().values());\n+      } catch (AssertionError ae) {\n+        throw new IOException(\"Results differed for getJournalCTime\", ae);\n+      }\n       for (Long result : call.getResults().values()) {\n         return result;\n       }\n     } catch (InterruptedException e) {\n       throw new IOException(\"Interrupted waiting for getJournalCTime() \" +\n           \"response\");\n     } catch (TimeoutException e) {\n       throw new IOException(\"Timed out waiting for getJournalCTime() \" +\n           \"response\");\n     }\n     \n     throw new AssertionError(\"Unreachable code.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long getJournalCTime() throws IOException {\n    QuorumCall\u003cAsyncLogger, Long\u003e call \u003d loggers.getJournalCTime();\n    try {\n      call.waitFor(loggers.size(), loggers.size(), 0,\n          GET_JOURNAL_CTIME_TIMEOUT_MS, \"getJournalCTime\");\n      \n      if (call.countExceptions() \u003e 0) {\n        call.rethrowException(\"Could not journal CTime for one \"\n            + \"more JournalNodes\");\n      }\n      \n      // Either they all return the same thing or this call fails, so we can\n      // just return the first result.\n      try {\n        DFSUtil.assertAllResultsEqual(call.getResults().values());\n      } catch (AssertionError ae) {\n        throw new IOException(\"Results differed for getJournalCTime\", ae);\n      }\n      for (Long result : call.getResults().values()) {\n        return result;\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted waiting for getJournalCTime() \" +\n          \"response\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting for getJournalCTime() \" +\n          \"response\");\n    }\n    \n    throw new AssertionError(\"Unreachable code.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java",
      "extendedDetails": {}
    },
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5138. Support HDFS upgrade in HA. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561381 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 12:01 PM",
      "commitName": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,27 @@\n+  public long getJournalCTime() throws IOException {\n+    QuorumCall\u003cAsyncLogger, Long\u003e call \u003d loggers.getJournalCTime();\n+    try {\n+      call.waitFor(loggers.size(), loggers.size(), 0,\n+          GET_JOURNAL_CTIME_TIMEOUT_MS, \"getJournalCTime\");\n+      \n+      if (call.countExceptions() \u003e 0) {\n+        call.rethrowException(\"Could not journal CTime for one \"\n+            + \"more JournalNodes\");\n+      }\n+      \n+      // Either they all return the same thing or this call fails, so we can\n+      // just return the first result.\n+      DFSUtil.assertAllResultsEqual(call.getResults().values());\n+      for (Long result : call.getResults().values()) {\n+        return result;\n+      }\n+    } catch (InterruptedException e) {\n+      throw new IOException(\"Interrupted waiting for getJournalCTime() \" +\n+          \"response\");\n+    } catch (TimeoutException e) {\n+      throw new IOException(\"Timed out waiting for getJournalCTime() \" +\n+          \"response\");\n+    }\n+    \n+    throw new AssertionError(\"Unreachable code.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long getJournalCTime() throws IOException {\n    QuorumCall\u003cAsyncLogger, Long\u003e call \u003d loggers.getJournalCTime();\n    try {\n      call.waitFor(loggers.size(), loggers.size(), 0,\n          GET_JOURNAL_CTIME_TIMEOUT_MS, \"getJournalCTime\");\n      \n      if (call.countExceptions() \u003e 0) {\n        call.rethrowException(\"Could not journal CTime for one \"\n            + \"more JournalNodes\");\n      }\n      \n      // Either they all return the same thing or this call fails, so we can\n      // just return the first result.\n      DFSUtil.assertAllResultsEqual(call.getResults().values());\n      for (Long result : call.getResults().values()) {\n        return result;\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted waiting for getJournalCTime() \" +\n          \"response\");\n    } catch (TimeoutException e) {\n      throw new IOException(\"Timed out waiting for getJournalCTime() \" +\n          \"response\");\n    }\n    \n    throw new AssertionError(\"Unreachable code.\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumJournalManager.java"
    }
  }
}