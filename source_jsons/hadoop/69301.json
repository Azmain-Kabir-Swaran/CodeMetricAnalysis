{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gridmix.java",
  "functionName": "runJob",
  "functionId": "runJob___conf-Configuration__argv-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
  "functionStartLine": 388,
  "functionEndLine": 465,
  "numCommitsSeen": 15,
  "timeTaken": 5208,
  "changeHistory": [
    "4222c971080f2b150713727092c7197df58c88e5",
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "7d609320608482de9c191bafb36498b29c1fe676",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "4222c971080f2b150713727092c7197df58c88e5": "Ybodychange",
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "7d609320608482de9c191bafb36498b29c1fe676": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4222c971080f2b150713727092c7197df58c88e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10392. Use FileSystem#makeQualified(Path) instead of Path#makeQualified(FileSystem) (ajisakaa via aw)\n",
      "commitDate": "11/08/17 9:25 AM",
      "commitName": "4222c971080f2b150713727092c7197df58c88e5",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "12/01/15 9:22 PM",
      "commitNameOld": "c4cba6165a3afbf4f1f8ff6b7f11286772d70d6f",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 941.46,
      "commitsBetweenForRepo": 6694,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   private int runJob(Configuration conf, String[] argv)\n     throws IOException, InterruptedException {\n     if (argv.length \u003c 2) {\n       LOG.error(\"Too few arguments to Gridmix.\\n\");\n       printUsage(System.err);\n       return ARGS_ERROR;\n     }\n \n     long genbytes \u003d -1L;\n     String traceIn \u003d null;\n     Path ioPath \u003d null;\n     URI userRsrc \u003d null;\n     try {\n       userResolver \u003d ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV, \n                        SubmitterUserResolver.class, UserResolver.class), conf);\n \n       for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n         if (\"-generate\".equals(argv[i])) {\n           genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n           if (genbytes \u003c\u003d 0) {\n             LOG.error(\"size of input data to be generated specified using \"\n                       + \"-generate option should be nonnegative.\\n\");\n             return ARGS_ERROR;\n           }\n         } else if (\"-users\".equals(argv[i])) {\n           userRsrc \u003d new URI(argv[++i]);\n         } else {\n           LOG.error(\"Unknown option \" + argv[i] + \" specified.\\n\");\n           printUsage(System.err);\n           return ARGS_ERROR;\n         }\n       }\n \n       if (userResolver.needsTargetUsersList()) {\n         if (userRsrc !\u003d null) {\n           if (!userResolver.setTargetUsers(userRsrc, conf)) {\n             LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n           }\n         } else {\n           LOG.error(userResolver.getClass()\n               + \" needs target user list. Use -users option.\\n\");\n           printUsage(System.err);\n           return ARGS_ERROR;\n         }\n       } else if (userRsrc !\u003d null) {\n         LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n       }\n \n       ioPath \u003d new Path(argv[argv.length - 2]);\n       traceIn \u003d argv[argv.length - 1];\n     } catch (Exception e) {\n       LOG.error(e.toString() + \"\\n\");\n       if (LOG.isDebugEnabled()) {\n         e.printStackTrace();\n       }\n \n       printUsage(System.err);\n       return ARGS_ERROR;\n     }\n \n     // Create \u003cioPath\u003e with 777 permissions\n     final FileSystem inputFs \u003d ioPath.getFileSystem(conf);\n-    ioPath \u003d ioPath.makeQualified(inputFs);\n+    ioPath \u003d inputFs.makeQualified(ioPath);\n     boolean succeeded \u003d false;\n     try {\n       succeeded \u003d FileSystem.mkdirs(inputFs, ioPath,\n                                     new FsPermission((short)0777));\n     } catch(IOException e) {\n       // No need to emit this exception message\n     } finally {\n       if (!succeeded) {\n         LOG.error(\"Failed creation of \u003cioPath\u003e directory \" + ioPath + \"\\n\");\n         return STARTUP_FAILED_ERROR;\n       }\n     }\n \n     return start(conf, traceIn, ioPath, genbytes, userResolver);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int runJob(Configuration conf, String[] argv)\n    throws IOException, InterruptedException {\n    if (argv.length \u003c 2) {\n      LOG.error(\"Too few arguments to Gridmix.\\n\");\n      printUsage(System.err);\n      return ARGS_ERROR;\n    }\n\n    long genbytes \u003d -1L;\n    String traceIn \u003d null;\n    Path ioPath \u003d null;\n    URI userRsrc \u003d null;\n    try {\n      userResolver \u003d ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV, \n                       SubmitterUserResolver.class, UserResolver.class), conf);\n\n      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n        if (\"-generate\".equals(argv[i])) {\n          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n          if (genbytes \u003c\u003d 0) {\n            LOG.error(\"size of input data to be generated specified using \"\n                      + \"-generate option should be nonnegative.\\n\");\n            return ARGS_ERROR;\n          }\n        } else if (\"-users\".equals(argv[i])) {\n          userRsrc \u003d new URI(argv[++i]);\n        } else {\n          LOG.error(\"Unknown option \" + argv[i] + \" specified.\\n\");\n          printUsage(System.err);\n          return ARGS_ERROR;\n        }\n      }\n\n      if (userResolver.needsTargetUsersList()) {\n        if (userRsrc !\u003d null) {\n          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n          }\n        } else {\n          LOG.error(userResolver.getClass()\n              + \" needs target user list. Use -users option.\\n\");\n          printUsage(System.err);\n          return ARGS_ERROR;\n        }\n      } else if (userRsrc !\u003d null) {\n        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n      }\n\n      ioPath \u003d new Path(argv[argv.length - 2]);\n      traceIn \u003d argv[argv.length - 1];\n    } catch (Exception e) {\n      LOG.error(e.toString() + \"\\n\");\n      if (LOG.isDebugEnabled()) {\n        e.printStackTrace();\n      }\n\n      printUsage(System.err);\n      return ARGS_ERROR;\n    }\n\n    // Create \u003cioPath\u003e with 777 permissions\n    final FileSystem inputFs \u003d ioPath.getFileSystem(conf);\n    ioPath \u003d inputFs.makeQualified(ioPath);\n    boolean succeeded \u003d false;\n    try {\n      succeeded \u003d FileSystem.mkdirs(inputFs, ioPath,\n                                    new FsPermission((short)0777));\n    } catch(IOException e) {\n      // No need to emit this exception message\n    } finally {\n      if (!succeeded) {\n        LOG.error(\"Failed creation of \u003cioPath\u003e directory \" + ioPath + \"\\n\");\n        return STARTUP_FAILED_ERROR;\n      }\n    }\n\n    return start(conf, traceIn, ioPath, genbytes, userResolver);\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
      "extendedDetails": {}
    },
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int runJob(Configuration conf, String[] argv)\n    throws IOException, InterruptedException {\n    if (argv.length \u003c 2) {\n      LOG.error(\"Too few arguments to Gridmix.\\n\");\n      printUsage(System.err);\n      return ARGS_ERROR;\n    }\n\n    long genbytes \u003d -1L;\n    String traceIn \u003d null;\n    Path ioPath \u003d null;\n    URI userRsrc \u003d null;\n    try {\n      userResolver \u003d ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV, \n                       SubmitterUserResolver.class, UserResolver.class), conf);\n\n      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n        if (\"-generate\".equals(argv[i])) {\n          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n          if (genbytes \u003c\u003d 0) {\n            LOG.error(\"size of input data to be generated specified using \"\n                      + \"-generate option should be nonnegative.\\n\");\n            return ARGS_ERROR;\n          }\n        } else if (\"-users\".equals(argv[i])) {\n          userRsrc \u003d new URI(argv[++i]);\n        } else {\n          LOG.error(\"Unknown option \" + argv[i] + \" specified.\\n\");\n          printUsage(System.err);\n          return ARGS_ERROR;\n        }\n      }\n\n      if (userResolver.needsTargetUsersList()) {\n        if (userRsrc !\u003d null) {\n          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n          }\n        } else {\n          LOG.error(userResolver.getClass()\n              + \" needs target user list. Use -users option.\\n\");\n          printUsage(System.err);\n          return ARGS_ERROR;\n        }\n      } else if (userRsrc !\u003d null) {\n        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n      }\n\n      ioPath \u003d new Path(argv[argv.length - 2]);\n      traceIn \u003d argv[argv.length - 1];\n    } catch (Exception e) {\n      LOG.error(e.toString() + \"\\n\");\n      if (LOG.isDebugEnabled()) {\n        e.printStackTrace();\n      }\n\n      printUsage(System.err);\n      return ARGS_ERROR;\n    }\n\n    // Create \u003cioPath\u003e with 777 permissions\n    final FileSystem inputFs \u003d ioPath.getFileSystem(conf);\n    ioPath \u003d ioPath.makeQualified(inputFs);\n    boolean succeeded \u003d false;\n    try {\n      succeeded \u003d FileSystem.mkdirs(inputFs, ioPath,\n                                    new FsPermission((short)0777));\n    } catch(IOException e) {\n      // No need to emit this exception message\n    } finally {\n      if (!succeeded) {\n        LOG.error(\"Failed creation of \u003cioPath\u003e directory \" + ioPath + \"\\n\");\n        return STARTUP_FAILED_ERROR;\n      }\n    }\n\n    return start(conf, traceIn, ioPath, genbytes, userResolver);\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/Gridmix.java"
      }
    },
    "7d609320608482de9c191bafb36498b29c1fe676": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3829. [Gridmix] Gridmix should give better error message when input data directory already exists and -generate option is given.(ravigummadi)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299625 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/12 4:08 AM",
      "commitName": "7d609320608482de9c191bafb36498b29c1fe676",
      "commitAuthor": "Ravi Gummadi",
      "commitDateOld": "23/02/12 2:41 AM",
      "commitNameOld": "8a2073cc61699f5692fcf638f4bae4d1c544870a",
      "commitAuthorOld": "Amar Kamat",
      "daysBetweenCommits": 18.02,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,78 @@\n   private int runJob(Configuration conf, String[] argv)\n     throws IOException, InterruptedException {\n     if (argv.length \u003c 2) {\n+      LOG.error(\"Too few arguments to Gridmix.\\n\");\n       printUsage(System.err);\n-      return 1;\n+      return ARGS_ERROR;\n     }\n-    \n-    // Should gridmix generate distributed cache data ?\n-    boolean generate \u003d false;\n+\n     long genbytes \u003d -1L;\n     String traceIn \u003d null;\n     Path ioPath \u003d null;\n     URI userRsrc \u003d null;\n-    userResolver \u003d ReflectionUtils.newInstance(\n-                     conf.getClass(GRIDMIX_USR_RSV, \n-                       SubmitterUserResolver.class,\n-                       UserResolver.class), \n-                     conf);\n     try {\n+      userResolver \u003d ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV, \n+                       SubmitterUserResolver.class, UserResolver.class), conf);\n+\n       for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n         if (\"-generate\".equals(argv[i])) {\n           genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n-          generate \u003d true;\n+          if (genbytes \u003c\u003d 0) {\n+            LOG.error(\"size of input data to be generated specified using \"\n+                      + \"-generate option should be nonnegative.\\n\");\n+            return ARGS_ERROR;\n+          }\n         } else if (\"-users\".equals(argv[i])) {\n           userRsrc \u003d new URI(argv[++i]);\n         } else {\n+          LOG.error(\"Unknown option \" + argv[i] + \" specified.\\n\");\n           printUsage(System.err);\n-          return 1;\n+          return ARGS_ERROR;\n         }\n       }\n \n       if (userResolver.needsTargetUsersList()) {\n         if (userRsrc !\u003d null) {\n           if (!userResolver.setTargetUsers(userRsrc, conf)) {\n             LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n           }\n         } else {\n-          System.err.println(\"\\n\\n\" + userResolver.getClass()\n-              + \" needs target user list. Use -users option.\" + \"\\n\\n\");\n+          LOG.error(userResolver.getClass()\n+              + \" needs target user list. Use -users option.\\n\");\n           printUsage(System.err);\n-          return 1;\n+          return ARGS_ERROR;\n         }\n       } else if (userRsrc !\u003d null) {\n         LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n       }\n \n       ioPath \u003d new Path(argv[argv.length - 2]);\n       traceIn \u003d argv[argv.length - 1];\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOG.error(e.toString() + \"\\n\");\n+      if (LOG.isDebugEnabled()) {\n+        e.printStackTrace();\n+      }\n+\n       printUsage(System.err);\n-      return 1;\n+      return ARGS_ERROR;\n     }\n-    return start(conf, traceIn, ioPath, genbytes, userResolver, generate);\n+\n+    // Create \u003cioPath\u003e with 777 permissions\n+    final FileSystem inputFs \u003d ioPath.getFileSystem(conf);\n+    ioPath \u003d ioPath.makeQualified(inputFs);\n+    boolean succeeded \u003d false;\n+    try {\n+      succeeded \u003d FileSystem.mkdirs(inputFs, ioPath,\n+                                    new FsPermission((short)0777));\n+    } catch(IOException e) {\n+      // No need to emit this exception message\n+    } finally {\n+      if (!succeeded) {\n+        LOG.error(\"Failed creation of \u003cioPath\u003e directory \" + ioPath + \"\\n\");\n+        return STARTUP_FAILED_ERROR;\n+      }\n+    }\n+\n+    return start(conf, traceIn, ioPath, genbytes, userResolver);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int runJob(Configuration conf, String[] argv)\n    throws IOException, InterruptedException {\n    if (argv.length \u003c 2) {\n      LOG.error(\"Too few arguments to Gridmix.\\n\");\n      printUsage(System.err);\n      return ARGS_ERROR;\n    }\n\n    long genbytes \u003d -1L;\n    String traceIn \u003d null;\n    Path ioPath \u003d null;\n    URI userRsrc \u003d null;\n    try {\n      userResolver \u003d ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV, \n                       SubmitterUserResolver.class, UserResolver.class), conf);\n\n      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n        if (\"-generate\".equals(argv[i])) {\n          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n          if (genbytes \u003c\u003d 0) {\n            LOG.error(\"size of input data to be generated specified using \"\n                      + \"-generate option should be nonnegative.\\n\");\n            return ARGS_ERROR;\n          }\n        } else if (\"-users\".equals(argv[i])) {\n          userRsrc \u003d new URI(argv[++i]);\n        } else {\n          LOG.error(\"Unknown option \" + argv[i] + \" specified.\\n\");\n          printUsage(System.err);\n          return ARGS_ERROR;\n        }\n      }\n\n      if (userResolver.needsTargetUsersList()) {\n        if (userRsrc !\u003d null) {\n          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n          }\n        } else {\n          LOG.error(userResolver.getClass()\n              + \" needs target user list. Use -users option.\\n\");\n          printUsage(System.err);\n          return ARGS_ERROR;\n        }\n      } else if (userRsrc !\u003d null) {\n        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n      }\n\n      ioPath \u003d new Path(argv[argv.length - 2]);\n      traceIn \u003d argv[argv.length - 1];\n    } catch (Exception e) {\n      LOG.error(e.toString() + \"\\n\");\n      if (LOG.isDebugEnabled()) {\n        e.printStackTrace();\n      }\n\n      printUsage(System.err);\n      return ARGS_ERROR;\n    }\n\n    // Create \u003cioPath\u003e with 777 permissions\n    final FileSystem inputFs \u003d ioPath.getFileSystem(conf);\n    ioPath \u003d ioPath.makeQualified(inputFs);\n    boolean succeeded \u003d false;\n    try {\n      succeeded \u003d FileSystem.mkdirs(inputFs, ioPath,\n                                    new FsPermission((short)0777));\n    } catch(IOException e) {\n      // No need to emit this exception message\n    } finally {\n      if (!succeeded) {\n        LOG.error(\"Failed creation of \u003cioPath\u003e directory \" + ioPath + \"\\n\");\n        return STARTUP_FAILED_ERROR;\n      }\n    }\n\n    return start(conf, traceIn, ioPath, genbytes, userResolver);\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int runJob(Configuration conf, String[] argv)\n    throws IOException, InterruptedException {\n    if (argv.length \u003c 2) {\n      printUsage(System.err);\n      return 1;\n    }\n    \n    // Should gridmix generate distributed cache data ?\n    boolean generate \u003d false;\n    long genbytes \u003d -1L;\n    String traceIn \u003d null;\n    Path ioPath \u003d null;\n    URI userRsrc \u003d null;\n    userResolver \u003d ReflectionUtils.newInstance(\n                     conf.getClass(GRIDMIX_USR_RSV, \n                       SubmitterUserResolver.class,\n                       UserResolver.class), \n                     conf);\n    try {\n      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n        if (\"-generate\".equals(argv[i])) {\n          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n          generate \u003d true;\n        } else if (\"-users\".equals(argv[i])) {\n          userRsrc \u003d new URI(argv[++i]);\n        } else {\n          printUsage(System.err);\n          return 1;\n        }\n      }\n\n      if (userResolver.needsTargetUsersList()) {\n        if (userRsrc !\u003d null) {\n          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n          }\n        } else {\n          System.err.println(\"\\n\\n\" + userResolver.getClass()\n              + \" needs target user list. Use -users option.\" + \"\\n\\n\");\n          printUsage(System.err);\n          return 1;\n        }\n      } else if (userRsrc !\u003d null) {\n        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n      }\n\n      ioPath \u003d new Path(argv[argv.length - 2]);\n      traceIn \u003d argv[argv.length - 1];\n    } catch (Exception e) {\n      e.printStackTrace();\n      printUsage(System.err);\n      return 1;\n    }\n    return start(conf, traceIn, ioPath, genbytes, userResolver, generate);\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int runJob(Configuration conf, String[] argv)\n    throws IOException, InterruptedException {\n    if (argv.length \u003c 2) {\n      printUsage(System.err);\n      return 1;\n    }\n    \n    // Should gridmix generate distributed cache data ?\n    boolean generate \u003d false;\n    long genbytes \u003d -1L;\n    String traceIn \u003d null;\n    Path ioPath \u003d null;\n    URI userRsrc \u003d null;\n    userResolver \u003d ReflectionUtils.newInstance(\n                     conf.getClass(GRIDMIX_USR_RSV, \n                       SubmitterUserResolver.class,\n                       UserResolver.class), \n                     conf);\n    try {\n      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n        if (\"-generate\".equals(argv[i])) {\n          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n          generate \u003d true;\n        } else if (\"-users\".equals(argv[i])) {\n          userRsrc \u003d new URI(argv[++i]);\n        } else {\n          printUsage(System.err);\n          return 1;\n        }\n      }\n\n      if (userResolver.needsTargetUsersList()) {\n        if (userRsrc !\u003d null) {\n          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n          }\n        } else {\n          System.err.println(\"\\n\\n\" + userResolver.getClass()\n              + \" needs target user list. Use -users option.\" + \"\\n\\n\");\n          printUsage(System.err);\n          return 1;\n        }\n      } else if (userRsrc !\u003d null) {\n        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n      }\n\n      ioPath \u003d new Path(argv[argv.length - 2]);\n      traceIn \u003d argv[argv.length - 1];\n    } catch (Exception e) {\n      e.printStackTrace();\n      printUsage(System.err);\n      return 1;\n    }\n    return start(conf, traceIn, ioPath, genbytes, userResolver, generate);\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,55 @@\n+  private int runJob(Configuration conf, String[] argv)\n+    throws IOException, InterruptedException {\n+    if (argv.length \u003c 2) {\n+      printUsage(System.err);\n+      return 1;\n+    }\n+    \n+    // Should gridmix generate distributed cache data ?\n+    boolean generate \u003d false;\n+    long genbytes \u003d -1L;\n+    String traceIn \u003d null;\n+    Path ioPath \u003d null;\n+    URI userRsrc \u003d null;\n+    userResolver \u003d ReflectionUtils.newInstance(\n+                     conf.getClass(GRIDMIX_USR_RSV, \n+                       SubmitterUserResolver.class,\n+                       UserResolver.class), \n+                     conf);\n+    try {\n+      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n+        if (\"-generate\".equals(argv[i])) {\n+          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n+          generate \u003d true;\n+        } else if (\"-users\".equals(argv[i])) {\n+          userRsrc \u003d new URI(argv[++i]);\n+        } else {\n+          printUsage(System.err);\n+          return 1;\n+        }\n+      }\n+\n+      if (userResolver.needsTargetUsersList()) {\n+        if (userRsrc !\u003d null) {\n+          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n+            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n+          }\n+        } else {\n+          System.err.println(\"\\n\\n\" + userResolver.getClass()\n+              + \" needs target user list. Use -users option.\" + \"\\n\\n\");\n+          printUsage(System.err);\n+          return 1;\n+        }\n+      } else if (userRsrc !\u003d null) {\n+        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n+      }\n+\n+      ioPath \u003d new Path(argv[argv.length - 2]);\n+      traceIn \u003d argv[argv.length - 1];\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      printUsage(System.err);\n+      return 1;\n+    }\n+    return start(conf, traceIn, ioPath, genbytes, userResolver, generate);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int runJob(Configuration conf, String[] argv)\n    throws IOException, InterruptedException {\n    if (argv.length \u003c 2) {\n      printUsage(System.err);\n      return 1;\n    }\n    \n    // Should gridmix generate distributed cache data ?\n    boolean generate \u003d false;\n    long genbytes \u003d -1L;\n    String traceIn \u003d null;\n    Path ioPath \u003d null;\n    URI userRsrc \u003d null;\n    userResolver \u003d ReflectionUtils.newInstance(\n                     conf.getClass(GRIDMIX_USR_RSV, \n                       SubmitterUserResolver.class,\n                       UserResolver.class), \n                     conf);\n    try {\n      for (int i \u003d 0; i \u003c argv.length - 2; ++i) {\n        if (\"-generate\".equals(argv[i])) {\n          genbytes \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);\n          generate \u003d true;\n        } else if (\"-users\".equals(argv[i])) {\n          userRsrc \u003d new URI(argv[++i]);\n        } else {\n          printUsage(System.err);\n          return 1;\n        }\n      }\n\n      if (userResolver.needsTargetUsersList()) {\n        if (userRsrc !\u003d null) {\n          if (!userResolver.setTargetUsers(userRsrc, conf)) {\n            LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n          }\n        } else {\n          System.err.println(\"\\n\\n\" + userResolver.getClass()\n              + \" needs target user list. Use -users option.\" + \"\\n\\n\");\n          printUsage(System.err);\n          return 1;\n        }\n      } else if (userRsrc !\u003d null) {\n        LOG.warn(\"Ignoring the user resource \u0027\" + userRsrc + \"\u0027.\");\n      }\n\n      ioPath \u003d new Path(argv[argv.length - 2]);\n      traceIn \u003d argv[argv.length - 1];\n    } catch (Exception e) {\n      e.printStackTrace();\n      printUsage(System.err);\n      return 1;\n    }\n    return start(conf, traceIn, ioPath, genbytes, userResolver, generate);\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Gridmix.java"
    }
  }
}