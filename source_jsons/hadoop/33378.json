{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainersMonitorImpl.java",
  "functionName": "handle",
  "functionId": "handle___monitoringEvent-ContainersMonitorEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
  "functionStartLine": 955,
  "functionEndLine": 971,
  "numCommitsSeen": 73,
  "timeTaken": 9914,
  "changeHistory": [
    "41ac190dba782a59669bd622f572f452267c808e",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d",
    "c59ae4eeb17e52e8fc659b9962d20628719fc621",
    "14215c8ef83d58b8443c52a3cb93e6d44fc87065",
    "ac7d152901e29b1f444507fe4e421eb6e1402b5a",
    "f7a77819a1e4ff394e110941c1f8dd80f47dd38f",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "41ac190dba782a59669bd622f572f452267c808e": "Ybodychange",
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": "Ybodychange",
    "c59ae4eeb17e52e8fc659b9962d20628719fc621": "Ybodychange",
    "14215c8ef83d58b8443c52a3cb93e6d44fc87065": "Ybodychange",
    "ac7d152901e29b1f444507fe4e421eb6e1402b5a": "Ybodychange",
    "f7a77819a1e4ff394e110941c1f8dd80f47dd38f": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "41ac190dba782a59669bd622f572f452267c808e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6438. Code can be improved in ContainersMonitorImpl.java\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "19/04/17 10:53 AM",
      "commitName": "41ac190dba782a59669bd622f572f452267c808e",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "28/11/16 3:19 PM",
      "commitNameOld": "62b42ef5dd04d516d33bf0890ac5cd49f8184a73",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 141.77,
      "commitsBetweenForRepo": 766,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,17 @@\n   public void handle(ContainersMonitorEvent monitoringEvent) {\n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n-    if (!containersMonitorEnabled) {\n-      if (monitoringEvent.getType() \u003d\u003d ContainersMonitorEventType\n-          .CHANGE_MONITORING_CONTAINER_RESOURCE) {\n-        // Nothing to enforce. Update container resource immediately.\n-        ChangeMonitoringContainerResourceEvent changeEvent \u003d\n-            (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n-        changeContainerResource(containerId, changeEvent.getResource());\n-      }\n-      return;\n-    }\n \n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       onStartMonitoringContainer(monitoringEvent, containerId);\n       break;\n     case STOP_MONITORING_CONTAINER:\n       onStopMonitoringContainer(monitoringEvent, containerId);\n       break;\n     case CHANGE_MONITORING_CONTAINER_RESOURCE:\n       onChangeMonitoringContainerResource(monitoringEvent, containerId);\n       break;\n     default:\n       // TODO: Wrong event.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      onStartMonitoringContainer(monitoringEvent, containerId);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      onStopMonitoringContainer(monitoringEvent, containerId);\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      onChangeMonitoringContainerResource(monitoringEvent, containerId);\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "c8172f5f143d2fefafa5a412899ab7cd081b406d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2883. Queuing of container requests in the NM. (Konstantinos Karanasos and Arun Suresh via kasha)\n",
      "commitDate": "20/04/16 9:55 AM",
      "commitName": "c8172f5f143d2fefafa5a412899ab7cd081b406d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/12/15 1:18 PM",
      "commitNameOld": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 125.82,
      "commitsBetweenForRepo": 781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,27 @@\n   public void handle(ContainersMonitorEvent monitoringEvent) {\n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     if (!containersMonitorEnabled) {\n       if (monitoringEvent.getType() \u003d\u003d ContainersMonitorEventType\n           .CHANGE_MONITORING_CONTAINER_RESOURCE) {\n         // Nothing to enforce. Update container resource immediately.\n         ChangeMonitoringContainerResourceEvent changeEvent \u003d\n             (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n         changeContainerResource(containerId, changeEvent.getResource());\n       }\n       return;\n     }\n \n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n-      ContainerStartMonitoringEvent startEvent \u003d\n-          (ContainerStartMonitoringEvent) monitoringEvent;\n-      LOG.info(\"Starting resource-monitoring for \" + containerId);\n-      updateContainerMetrics(monitoringEvent);\n-      trackingContainers.put(containerId,\n-          new ProcessTreeInfo(containerId, null, null,\n-              startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n-              startEvent.getCpuVcores()));\n+      onStartMonitoringContainer(monitoringEvent, containerId);\n       break;\n     case STOP_MONITORING_CONTAINER:\n-      LOG.info(\"Stopping resource-monitoring for \" + containerId);\n-      updateContainerMetrics(monitoringEvent);\n-      trackingContainers.remove(containerId);\n+      onStopMonitoringContainer(monitoringEvent, containerId);\n       break;\n     case CHANGE_MONITORING_CONTAINER_RESOURCE:\n-      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n-          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n-      ProcessTreeInfo processTreeInfo \u003d trackingContainers.get(containerId);\n-      if (processTreeInfo \u003d\u003d null) {\n-        LOG.warn(\"Failed to track container \"\n-            + containerId.toString()\n-            + \". It may have already completed.\");\n-        break;\n-      }\n-      LOG.info(\"Changing resource-monitoring for \" + containerId);\n-      updateContainerMetrics(monitoringEvent);\n-      long pmemLimit \u003d changeEvent.getResource().getMemory() * 1024L * 1024L;\n-      long vmemLimit \u003d (long) (pmemLimit * vmemRatio);\n-      int cpuVcores \u003d changeEvent.getResource().getVirtualCores();\n-      processTreeInfo.setResourceLimit(pmemLimit, vmemLimit, cpuVcores);\n-      changeContainerResource(containerId, changeEvent.getResource());\n+      onChangeMonitoringContainerResource(monitoringEvent, containerId);\n       break;\n     default:\n       // TODO: Wrong event.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    if (!containersMonitorEnabled) {\n      if (monitoringEvent.getType() \u003d\u003d ContainersMonitorEventType\n          .CHANGE_MONITORING_CONTAINER_RESOURCE) {\n        // Nothing to enforce. Update container resource immediately.\n        ChangeMonitoringContainerResourceEvent changeEvent \u003d\n            (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n        changeContainerResource(containerId, changeEvent.getResource());\n      }\n      return;\n    }\n\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      onStartMonitoringContainer(monitoringEvent, containerId);\n      break;\n    case STOP_MONITORING_CONTAINER:\n      onStopMonitoringContainer(monitoringEvent, containerId);\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      onChangeMonitoringContainerResource(monitoringEvent, containerId);\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "c59ae4eeb17e52e8fc659b9962d20628719fc621": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1643. Make ContainersMonitor support changing monitoring size of an allocated container. Contributed by Meng Ding and Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c59ae4eeb17e52e8fc659b9962d20628719fc621",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/08/15 11:36 AM",
      "commitNameOld": "14215c8ef83d58b8443c52a3cb93e6d44fc87065",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 36.08,
      "commitsBetweenForRepo": 216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,51 @@\n   public void handle(ContainersMonitorEvent monitoringEvent) {\n-\n+    ContainerId containerId \u003d monitoringEvent.getContainerId();\n     if (!containersMonitorEnabled) {\n+      if (monitoringEvent.getType() \u003d\u003d ContainersMonitorEventType\n+          .CHANGE_MONITORING_CONTAINER_RESOURCE) {\n+        // Nothing to enforce. Update container resource immediately.\n+        ChangeMonitoringContainerResourceEvent changeEvent \u003d\n+            (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n+        changeContainerResource(containerId, changeEvent.getResource());\n+      }\n       return;\n     }\n \n-    ContainerId containerId \u003d monitoringEvent.getContainerId();\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n-\n-      if (containerMetricsEnabled) {\n-        ContainerMetrics usageMetrics \u003d ContainerMetrics\n-            .forContainer(containerId, containerMetricsPeriodMs);\n-        usageMetrics.recordStateChangeDurations(\n-            startEvent.getLaunchDuration(),\n-            startEvent.getLocalizationDuration());\n-      }\n-\n-      synchronized (this.containersToBeAdded) {\n-        ProcessTreeInfo processTreeInfo \u003d\n-            new ProcessTreeInfo(containerId, null, null,\n-                startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n-                startEvent.getCpuVcores());\n-        this.containersToBeAdded.put(containerId, processTreeInfo);\n-      }\n+      LOG.info(\"Starting resource-monitoring for \" + containerId);\n+      updateContainerMetrics(monitoringEvent);\n+      trackingContainers.put(containerId,\n+          new ProcessTreeInfo(containerId, null, null,\n+              startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n+              startEvent.getCpuVcores()));\n       break;\n     case STOP_MONITORING_CONTAINER:\n-      synchronized (this.containersToBeRemoved) {\n-        this.containersToBeRemoved.add(containerId);\n+      LOG.info(\"Stopping resource-monitoring for \" + containerId);\n+      updateContainerMetrics(monitoringEvent);\n+      trackingContainers.remove(containerId);\n+      break;\n+    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n+      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n+          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n+      ProcessTreeInfo processTreeInfo \u003d trackingContainers.get(containerId);\n+      if (processTreeInfo \u003d\u003d null) {\n+        LOG.warn(\"Failed to track container \"\n+            + containerId.toString()\n+            + \". It may have already completed.\");\n+        break;\n       }\n+      LOG.info(\"Changing resource-monitoring for \" + containerId);\n+      updateContainerMetrics(monitoringEvent);\n+      long pmemLimit \u003d changeEvent.getResource().getMemory() * 1024L * 1024L;\n+      long vmemLimit \u003d (long) (pmemLimit * vmemRatio);\n+      int cpuVcores \u003d changeEvent.getResource().getVirtualCores();\n+      processTreeInfo.setResourceLimit(pmemLimit, vmemLimit, cpuVcores);\n+      changeContainerResource(containerId, changeEvent.getResource());\n       break;\n     default:\n       // TODO: Wrong event.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    if (!containersMonitorEnabled) {\n      if (monitoringEvent.getType() \u003d\u003d ContainersMonitorEventType\n          .CHANGE_MONITORING_CONTAINER_RESOURCE) {\n        // Nothing to enforce. Update container resource immediately.\n        ChangeMonitoringContainerResourceEvent changeEvent \u003d\n            (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n        changeContainerResource(containerId, changeEvent.getResource());\n      }\n      return;\n    }\n\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      LOG.info(\"Starting resource-monitoring for \" + containerId);\n      updateContainerMetrics(monitoringEvent);\n      trackingContainers.put(containerId,\n          new ProcessTreeInfo(containerId, null, null,\n              startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n              startEvent.getCpuVcores()));\n      break;\n    case STOP_MONITORING_CONTAINER:\n      LOG.info(\"Stopping resource-monitoring for \" + containerId);\n      updateContainerMetrics(monitoringEvent);\n      trackingContainers.remove(containerId);\n      break;\n    case CHANGE_MONITORING_CONTAINER_RESOURCE:\n      ChangeMonitoringContainerResourceEvent changeEvent \u003d\n          (ChangeMonitoringContainerResourceEvent) monitoringEvent;\n      ProcessTreeInfo processTreeInfo \u003d trackingContainers.get(containerId);\n      if (processTreeInfo \u003d\u003d null) {\n        LOG.warn(\"Failed to track container \"\n            + containerId.toString()\n            + \". It may have already completed.\");\n        break;\n      }\n      LOG.info(\"Changing resource-monitoring for \" + containerId);\n      updateContainerMetrics(monitoringEvent);\n      long pmemLimit \u003d changeEvent.getResource().getMemory() * 1024L * 1024L;\n      long vmemLimit \u003d (long) (pmemLimit * vmemRatio);\n      int cpuVcores \u003d changeEvent.getResource().getVirtualCores();\n      processTreeInfo.setResourceLimit(pmemLimit, vmemLimit, cpuVcores);\n      changeContainerResource(containerId, changeEvent.getResource());\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "14215c8ef83d58b8443c52a3cb93e6d44fc87065": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4057. If ContainersMonitor is not enabled, only print related log info one time. Contributed by Jun Gong.\n",
      "commitDate": "18/08/15 11:36 AM",
      "commitName": "14215c8ef83d58b8443c52a3cb93e6d44fc87065",
      "commitAuthor": "Zhihai Xu",
      "commitDateOld": "16/08/15 6:24 AM",
      "commitNameOld": "def12933b38efd5e47c5144b729c1a1496f09229",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.22,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void handle(ContainersMonitorEvent monitoringEvent) {\n \n-    if (!isEnabled()) {\n+    if (!containersMonitorEnabled) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n \n       if (containerMetricsEnabled) {\n         ContainerMetrics usageMetrics \u003d ContainerMetrics\n             .forContainer(containerId, containerMetricsPeriodMs);\n         usageMetrics.recordStateChangeDurations(\n             startEvent.getLaunchDuration(),\n             startEvent.getLocalizationDuration());\n       }\n \n       synchronized (this.containersToBeAdded) {\n         ProcessTreeInfo processTreeInfo \u003d\n             new ProcessTreeInfo(containerId, null, null,\n                 startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n                 startEvent.getCpuVcores());\n         this.containersToBeAdded.put(containerId, processTreeInfo);\n       }\n       break;\n     case STOP_MONITORING_CONTAINER:\n       synchronized (this.containersToBeRemoved) {\n         this.containersToBeRemoved.add(containerId);\n       }\n       break;\n     default:\n       // TODO: Wrong event.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n\n    if (!containersMonitorEnabled) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n\n      if (containerMetricsEnabled) {\n        ContainerMetrics usageMetrics \u003d ContainerMetrics\n            .forContainer(containerId, containerMetricsPeriodMs);\n        usageMetrics.recordStateChangeDurations(\n            startEvent.getLaunchDuration(),\n            startEvent.getLocalizationDuration());\n      }\n\n      synchronized (this.containersToBeAdded) {\n        ProcessTreeInfo processTreeInfo \u003d\n            new ProcessTreeInfo(containerId, null, null,\n                startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n                startEvent.getCpuVcores());\n        this.containersToBeAdded.put(containerId, processTreeInfo);\n      }\n      break;\n    case STOP_MONITORING_CONTAINER:\n      synchronized (this.containersToBeRemoved) {\n        this.containersToBeRemoved.add(containerId);\n      }\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "ac7d152901e29b1f444507fe4e421eb6e1402b5a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3363. add localization and container launch time to ContainerMetrics at NM to show these timing information for each active container. (zxu via rkanter)\n",
      "commitDate": "01/05/15 4:39 PM",
      "commitName": "ac7d152901e29b1f444507fe4e421eb6e1402b5a",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/04/15 1:44 AM",
      "commitNameOld": "c69ba81497ae4da329ddb34ba712a64a7eec479f",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 30.62,
      "commitsBetweenForRepo": 265,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,37 @@\n   public void handle(ContainersMonitorEvent monitoringEvent) {\n \n     if (!isEnabled()) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n+\n+      if (containerMetricsEnabled) {\n+        ContainerMetrics usageMetrics \u003d ContainerMetrics\n+            .forContainer(containerId, containerMetricsPeriodMs);\n+        usageMetrics.recordStateChangeDurations(\n+            startEvent.getLaunchDuration(),\n+            startEvent.getLocalizationDuration());\n+      }\n+\n       synchronized (this.containersToBeAdded) {\n         ProcessTreeInfo processTreeInfo \u003d\n             new ProcessTreeInfo(containerId, null, null,\n                 startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n                 startEvent.getCpuVcores());\n         this.containersToBeAdded.put(containerId, processTreeInfo);\n       }\n       break;\n     case STOP_MONITORING_CONTAINER:\n       synchronized (this.containersToBeRemoved) {\n         this.containersToBeRemoved.add(containerId);\n       }\n       break;\n     default:\n       // TODO: Wrong event.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n\n    if (!isEnabled()) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n\n      if (containerMetricsEnabled) {\n        ContainerMetrics usageMetrics \u003d ContainerMetrics\n            .forContainer(containerId, containerMetricsPeriodMs);\n        usageMetrics.recordStateChangeDurations(\n            startEvent.getLaunchDuration(),\n            startEvent.getLocalizationDuration());\n      }\n\n      synchronized (this.containersToBeAdded) {\n        ProcessTreeInfo processTreeInfo \u003d\n            new ProcessTreeInfo(containerId, null, null,\n                startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n                startEvent.getCpuVcores());\n        this.containersToBeAdded.put(containerId, processTreeInfo);\n      }\n      break;\n    case STOP_MONITORING_CONTAINER:\n      synchronized (this.containersToBeRemoved) {\n        this.containersToBeRemoved.add(containerId);\n      }\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "f7a77819a1e4ff394e110941c1f8dd80f47dd38f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3022. Expose Container resource information from NodeManager for monitoring (adhoot via ranter)\n",
      "commitDate": "03/02/15 10:39 AM",
      "commitName": "f7a77819a1e4ff394e110941c1f8dd80f47dd38f",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "16/01/15 4:14 PM",
      "commitNameOld": "84198564ba6028d51c1fcf9cdcb87f6ae6e08513",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.77,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public void handle(ContainersMonitorEvent monitoringEvent) {\n \n     if (!isEnabled()) {\n       return;\n     }\n \n     ContainerId containerId \u003d monitoringEvent.getContainerId();\n     switch (monitoringEvent.getType()) {\n     case START_MONITORING_CONTAINER:\n       ContainerStartMonitoringEvent startEvent \u003d\n           (ContainerStartMonitoringEvent) monitoringEvent;\n       synchronized (this.containersToBeAdded) {\n         ProcessTreeInfo processTreeInfo \u003d\n             new ProcessTreeInfo(containerId, null, null,\n-                startEvent.getVmemLimit(), startEvent.getPmemLimit());\n+                startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n+                startEvent.getCpuVcores());\n         this.containersToBeAdded.put(containerId, processTreeInfo);\n       }\n       break;\n     case STOP_MONITORING_CONTAINER:\n       synchronized (this.containersToBeRemoved) {\n         this.containersToBeRemoved.add(containerId);\n       }\n       break;\n     default:\n       // TODO: Wrong event.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n\n    if (!isEnabled()) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      synchronized (this.containersToBeAdded) {\n        ProcessTreeInfo processTreeInfo \u003d\n            new ProcessTreeInfo(containerId, null, null,\n                startEvent.getVmemLimit(), startEvent.getPmemLimit(),\n                startEvent.getCpuVcores());\n        this.containersToBeAdded.put(containerId, processTreeInfo);\n      }\n      break;\n    case STOP_MONITORING_CONTAINER:\n      synchronized (this.containersToBeRemoved) {\n        this.containersToBeRemoved.add(containerId);\n      }\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n\n    if (!isEnabled()) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      synchronized (this.containersToBeAdded) {\n        ProcessTreeInfo processTreeInfo \u003d\n            new ProcessTreeInfo(containerId, null, null,\n                startEvent.getVmemLimit(), startEvent.getPmemLimit());\n        this.containersToBeAdded.put(containerId, processTreeInfo);\n      }\n      break;\n    case STOP_MONITORING_CONTAINER:\n      synchronized (this.containersToBeRemoved) {\n        this.containersToBeRemoved.add(containerId);\n      }\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n\n    if (!isEnabled()) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      synchronized (this.containersToBeAdded) {\n        ProcessTreeInfo processTreeInfo \u003d\n            new ProcessTreeInfo(containerId, null, null,\n                startEvent.getVmemLimit(), startEvent.getPmemLimit());\n        this.containersToBeAdded.put(containerId, processTreeInfo);\n      }\n      break;\n    case STOP_MONITORING_CONTAINER:\n      synchronized (this.containersToBeRemoved) {\n        this.containersToBeRemoved.add(containerId);\n      }\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,27 @@\n+  public void handle(ContainersMonitorEvent monitoringEvent) {\n+\n+    if (!isEnabled()) {\n+      return;\n+    }\n+\n+    ContainerId containerId \u003d monitoringEvent.getContainerId();\n+    switch (monitoringEvent.getType()) {\n+    case START_MONITORING_CONTAINER:\n+      ContainerStartMonitoringEvent startEvent \u003d\n+          (ContainerStartMonitoringEvent) monitoringEvent;\n+      synchronized (this.containersToBeAdded) {\n+        ProcessTreeInfo processTreeInfo \u003d\n+            new ProcessTreeInfo(containerId, null, null,\n+                startEvent.getVmemLimit(), startEvent.getPmemLimit());\n+        this.containersToBeAdded.put(containerId, processTreeInfo);\n+      }\n+      break;\n+    case STOP_MONITORING_CONTAINER:\n+      synchronized (this.containersToBeRemoved) {\n+        this.containersToBeRemoved.add(containerId);\n+      }\n+      break;\n+    default:\n+      // TODO: Wrong event.\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainersMonitorEvent monitoringEvent) {\n\n    if (!isEnabled()) {\n      return;\n    }\n\n    ContainerId containerId \u003d monitoringEvent.getContainerId();\n    switch (monitoringEvent.getType()) {\n    case START_MONITORING_CONTAINER:\n      ContainerStartMonitoringEvent startEvent \u003d\n          (ContainerStartMonitoringEvent) monitoringEvent;\n      synchronized (this.containersToBeAdded) {\n        ProcessTreeInfo processTreeInfo \u003d\n            new ProcessTreeInfo(containerId, null, null,\n                startEvent.getVmemLimit(), startEvent.getPmemLimit());\n        this.containersToBeAdded.put(containerId, processTreeInfo);\n      }\n      break;\n    case STOP_MONITORING_CONTAINER:\n      synchronized (this.containersToBeRemoved) {\n        this.containersToBeRemoved.add(containerId);\n      }\n      break;\n    default:\n      // TODO: Wrong event.\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
    }
  }
}