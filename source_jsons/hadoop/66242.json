{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "getTaskContainers",
  "functionId": "getTaskContainers___jsonJob-Map",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 526,
  "functionEndLine": 606,
  "numCommitsSeen": 40,
  "timeTaken": 2953,
  "changeHistory": [
    "16576fde8e3697025e1d37a4c21f8ad904208f8e",
    "3ad1fcfc8bd4a11f0b622eeaa1d9f68110310312",
    "7af4f34de54f6e667b47374e31fc9328eba869f0",
    "ba8136615ab66c450884614557eddc6509d63b7c",
    "99880d0a16727c770da053464da87960c5b02065",
    "3082552b3b991df846caf572b58e44308ddf8eeb"
  ],
  "changeHistoryShort": {
    "16576fde8e3697025e1d37a4c21f8ad904208f8e": "Ybodychange",
    "3ad1fcfc8bd4a11f0b622eeaa1d9f68110310312": "Ybodychange",
    "7af4f34de54f6e667b47374e31fc9328eba869f0": "Ybodychange",
    "ba8136615ab66c450884614557eddc6509d63b7c": "Ybodychange",
    "99880d0a16727c770da053464da87960c5b02065": "Ybodychange",
    "3082552b3b991df846caf572b58e44308ddf8eeb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "16576fde8e3697025e1d37a4c21f8ad904208f8e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9754. Add support for arbitrary DAG AM Simulator. Contributed by Abhishek Modi.\n",
      "commitDate": "28/08/19 11:13 PM",
      "commitName": "16576fde8e3697025e1d37a4c21f8ad904208f8e",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "21/08/19 8:09 AM",
      "commitNameOld": "3ad1fcfc8bd4a11f0b622eeaa1d9f68110310312",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 7.63,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,81 @@\n   private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n       throws YarnException {\n     List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n     List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n     if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n       throw new YarnException(\"No task for the job!\");\n     }\n \n     for (Object o : tasks) {\n       Map jsonTask \u003d (Map) o;\n \n       String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n \n       long duration \u003d 0;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n         // Also support \"duration.ms\" for backward compatibility\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n           jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n         long taskStart \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n         long taskFinish \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n         duration \u003d taskFinish - taskStart;\n       }\n       if (duration \u003c\u003d 0) {\n         throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n             + \" to 0!\");\n       }\n \n       Resource res \u003d getResourceForContainer(jsonTask);\n \n       int priority \u003d DEFAULT_MAPPER_PRIORITY;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n         priority \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n       }\n \n       String type \u003d \"map\";\n       if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n         type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n       }\n \n       int count \u003d 1;\n       if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n         count \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.COUNT).toString());\n       }\n       count \u003d Math.max(count, 1);\n \n       ExecutionType executionType \u003d ExecutionType.GUARANTEED;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_EXECUTION_TYPE)) {\n         executionType \u003d ExecutionType.valueOf(\n             jsonTask.get(SLSConfiguration.TASK_EXECUTION_TYPE).toString());\n       }\n       long allocationId \u003d -1;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_ALLOCATION_ID)) {\n         allocationId \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_ALLOCATION_ID).toString());\n       }\n+\n+      long requestDelay \u003d 0;\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_REQUEST_DELAY)) {\n+        requestDelay \u003d Long.parseLong(\n+            jsonTask.get(SLSConfiguration.TASK_REQUEST_DELAY).toString());\n+      }\n+      requestDelay \u003d Math.max(requestDelay, 0);\n+\n       for (int i \u003d 0; i \u003c count; i++) {\n         containers.add(\n             new ContainerSimulator(res, duration, hostname, priority, type,\n-                executionType, allocationId));\n+                executionType, allocationId, requestDelay));\n       }\n     }\n \n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n      throws YarnException {\n    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n    List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n\n      String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n\n      long duration \u003d 0;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n        // Also support \"duration.ms\" for backward compatibility\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n          jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n        long taskStart \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n        long taskFinish \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n        duration \u003d taskFinish - taskStart;\n      }\n      if (duration \u003c\u003d 0) {\n        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n            + \" to 0!\");\n      }\n\n      Resource res \u003d getResourceForContainer(jsonTask);\n\n      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n        priority \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n      }\n\n      String type \u003d \"map\";\n      if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n        type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n      }\n\n      int count \u003d 1;\n      if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n        count \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.COUNT).toString());\n      }\n      count \u003d Math.max(count, 1);\n\n      ExecutionType executionType \u003d ExecutionType.GUARANTEED;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_EXECUTION_TYPE)) {\n        executionType \u003d ExecutionType.valueOf(\n            jsonTask.get(SLSConfiguration.TASK_EXECUTION_TYPE).toString());\n      }\n      long allocationId \u003d -1;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_ALLOCATION_ID)) {\n        allocationId \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_ALLOCATION_ID).toString());\n      }\n\n      long requestDelay \u003d 0;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_REQUEST_DELAY)) {\n        requestDelay \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_REQUEST_DELAY).toString());\n      }\n      requestDelay \u003d Math.max(requestDelay, 0);\n\n      for (int i \u003d 0; i \u003c count; i++) {\n        containers.add(\n            new ContainerSimulator(res, duration, hostname, priority, type,\n                executionType, allocationId, requestDelay));\n      }\n    }\n\n    return containers;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "3ad1fcfc8bd4a11f0b622eeaa1d9f68110310312": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9752. Add support for allocation id in SLS. Contributed by Abhishek Modi\n",
      "commitDate": "21/08/19 8:09 AM",
      "commitName": "3ad1fcfc8bd4a11f0b622eeaa1d9f68110310312",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "21/08/19 1:18 AM",
      "commitNameOld": "10ec31d20ee1b6a0b1da915acb6b6ec33f2cd415",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,73 @@\n   private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n       throws YarnException {\n     List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n     List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n     if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n       throw new YarnException(\"No task for the job!\");\n     }\n \n     for (Object o : tasks) {\n       Map jsonTask \u003d (Map) o;\n \n       String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n \n       long duration \u003d 0;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n         // Also support \"duration.ms\" for backward compatibility\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n           jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n         long taskStart \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n         long taskFinish \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n         duration \u003d taskFinish - taskStart;\n       }\n       if (duration \u003c\u003d 0) {\n         throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n             + \" to 0!\");\n       }\n \n       Resource res \u003d getResourceForContainer(jsonTask);\n \n       int priority \u003d DEFAULT_MAPPER_PRIORITY;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n         priority \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n       }\n \n       String type \u003d \"map\";\n       if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n         type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n       }\n \n       int count \u003d 1;\n       if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n         count \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.COUNT).toString());\n       }\n       count \u003d Math.max(count, 1);\n \n       ExecutionType executionType \u003d ExecutionType.GUARANTEED;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_EXECUTION_TYPE)) {\n         executionType \u003d ExecutionType.valueOf(\n             jsonTask.get(SLSConfiguration.TASK_EXECUTION_TYPE).toString());\n       }\n+      long allocationId \u003d -1;\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_ALLOCATION_ID)) {\n+        allocationId \u003d Long.parseLong(\n+            jsonTask.get(SLSConfiguration.TASK_ALLOCATION_ID).toString());\n+      }\n       for (int i \u003d 0; i \u003c count; i++) {\n         containers.add(\n             new ContainerSimulator(res, duration, hostname, priority, type,\n-                executionType));\n+                executionType, allocationId));\n       }\n     }\n \n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n      throws YarnException {\n    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n    List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n\n      String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n\n      long duration \u003d 0;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n        // Also support \"duration.ms\" for backward compatibility\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n          jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n        long taskStart \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n        long taskFinish \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n        duration \u003d taskFinish - taskStart;\n      }\n      if (duration \u003c\u003d 0) {\n        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n            + \" to 0!\");\n      }\n\n      Resource res \u003d getResourceForContainer(jsonTask);\n\n      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n        priority \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n      }\n\n      String type \u003d \"map\";\n      if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n        type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n      }\n\n      int count \u003d 1;\n      if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n        count \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.COUNT).toString());\n      }\n      count \u003d Math.max(count, 1);\n\n      ExecutionType executionType \u003d ExecutionType.GUARANTEED;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_EXECUTION_TYPE)) {\n        executionType \u003d ExecutionType.valueOf(\n            jsonTask.get(SLSConfiguration.TASK_EXECUTION_TYPE).toString());\n      }\n      long allocationId \u003d -1;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_ALLOCATION_ID)) {\n        allocationId \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_ALLOCATION_ID).toString());\n      }\n      for (int i \u003d 0; i \u003c count; i++) {\n        containers.add(\n            new ContainerSimulator(res, duration, hostname, priority, type,\n                executionType, allocationId));\n      }\n    }\n\n    return containers;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "7af4f34de54f6e667b47374e31fc9328eba869f0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7929. Support to set container execution type in SLS. (Jiandan Yang via Weiwei Yang)\n",
      "commitDate": "28/02/18 1:58 AM",
      "commitName": "7af4f34de54f6e667b47374e31fc9328eba869f0",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "20/02/18 5:00 PM",
      "commitNameOld": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 7.37,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,68 @@\n   private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n       throws YarnException {\n     List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n     List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n     if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n       throw new YarnException(\"No task for the job!\");\n     }\n \n     for (Object o : tasks) {\n       Map jsonTask \u003d (Map) o;\n \n       String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n \n       long duration \u003d 0;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n         // Also support \"duration.ms\" for backward compatibility\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n           jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n         long taskStart \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n         long taskFinish \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n         duration \u003d taskFinish - taskStart;\n       }\n       if (duration \u003c\u003d 0) {\n         throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n             + \" to 0!\");\n       }\n \n       Resource res \u003d getResourceForContainer(jsonTask);\n \n       int priority \u003d DEFAULT_MAPPER_PRIORITY;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n         priority \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n       }\n \n       String type \u003d \"map\";\n       if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n         type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n       }\n \n       int count \u003d 1;\n       if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n         count \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.COUNT).toString());\n       }\n       count \u003d Math.max(count, 1);\n \n+      ExecutionType executionType \u003d ExecutionType.GUARANTEED;\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_EXECUTION_TYPE)) {\n+        executionType \u003d ExecutionType.valueOf(\n+            jsonTask.get(SLSConfiguration.TASK_EXECUTION_TYPE).toString());\n+      }\n       for (int i \u003d 0; i \u003c count; i++) {\n         containers.add(\n-            new ContainerSimulator(res, duration, hostname, priority, type));\n+            new ContainerSimulator(res, duration, hostname, priority, type,\n+                executionType));\n       }\n     }\n \n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n      throws YarnException {\n    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n    List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n\n      String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n\n      long duration \u003d 0;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n        // Also support \"duration.ms\" for backward compatibility\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n          jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n        long taskStart \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n        long taskFinish \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n        duration \u003d taskFinish - taskStart;\n      }\n      if (duration \u003c\u003d 0) {\n        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n            + \" to 0!\");\n      }\n\n      Resource res \u003d getResourceForContainer(jsonTask);\n\n      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n        priority \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n      }\n\n      String type \u003d \"map\";\n      if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n        type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n      }\n\n      int count \u003d 1;\n      if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n        count \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.COUNT).toString());\n      }\n      count \u003d Math.max(count, 1);\n\n      ExecutionType executionType \u003d ExecutionType.GUARANTEED;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_EXECUTION_TYPE)) {\n        executionType \u003d ExecutionType.valueOf(\n            jsonTask.get(SLSConfiguration.TASK_EXECUTION_TYPE).toString());\n      }\n      for (int i \u003d 0; i \u003c count; i++) {\n        containers.add(\n            new ContainerSimulator(res, duration, hostname, priority, type,\n                executionType));\n      }\n    }\n\n    return containers;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "ba8136615ab66c450884614557eddc6509d63b7c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)\n\nChange-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b\n",
      "commitDate": "09/11/17 12:09 PM",
      "commitName": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "27/10/17 2:41 PM",
      "commitNameOld": "99880d0a16727c770da053464da87960c5b02065",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 12.94,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,62 @@\n   private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n       throws YarnException {\n     List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n     List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n     if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n       throw new YarnException(\"No task for the job!\");\n     }\n \n     for (Object o : tasks) {\n       Map jsonTask \u003d (Map) o;\n \n       String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n \n       long duration \u003d 0;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n         // Also support \"duration.ms\" for backward compatibility\n         duration \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n       } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n           jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n         long taskStart \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n         long taskFinish \u003d Long.parseLong(\n             jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n         duration \u003d taskFinish - taskStart;\n       }\n       if (duration \u003c\u003d 0) {\n         throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n             + \" to 0!\");\n       }\n \n-      Resource res \u003d getDefaultContainerResource();\n-      if (jsonTask.containsKey(SLSConfiguration.TASK_MEMORY)) {\n-        int containerMemory \u003d Integer.parseInt(\n-            jsonTask.get(SLSConfiguration.TASK_MEMORY).toString());\n-        res.setMemorySize(containerMemory);\n-      }\n-\n-      if (jsonTask.containsKey(SLSConfiguration.CONTAINER_VCORES)) {\n-        int containerVCores \u003d Integer.parseInt(\n-            jsonTask.get(SLSConfiguration.CONTAINER_VCORES).toString());\n-        res.setVirtualCores(containerVCores);\n-      }\n+      Resource res \u003d getResourceForContainer(jsonTask);\n \n       int priority \u003d DEFAULT_MAPPER_PRIORITY;\n       if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n         priority \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n       }\n \n       String type \u003d \"map\";\n       if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n         type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n       }\n \n       int count \u003d 1;\n       if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n         count \u003d Integer.parseInt(\n             jsonTask.get(SLSConfiguration.COUNT).toString());\n       }\n       count \u003d Math.max(count, 1);\n \n       for (int i \u003d 0; i \u003c count; i++) {\n         containers.add(\n             new ContainerSimulator(res, duration, hostname, priority, type));\n       }\n     }\n \n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n      throws YarnException {\n    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n    List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n\n      String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n\n      long duration \u003d 0;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n        // Also support \"duration.ms\" for backward compatibility\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n          jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n        long taskStart \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n        long taskFinish \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n        duration \u003d taskFinish - taskStart;\n      }\n      if (duration \u003c\u003d 0) {\n        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n            + \" to 0!\");\n      }\n\n      Resource res \u003d getResourceForContainer(jsonTask);\n\n      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n        priority \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n      }\n\n      String type \u003d \"map\";\n      if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n        type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n      }\n\n      int count \u003d 1;\n      if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n        count \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.COUNT).toString());\n      }\n      count \u003d Math.max(count, 1);\n\n      for (int i \u003d 0; i \u003c count; i++) {\n        containers.add(\n            new ContainerSimulator(res, duration, hostname, priority, type));\n      }\n    }\n\n    return containers;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "99880d0a16727c770da053464da87960c5b02065": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6505. Define the strings used in SLS JSON input file format. (Contributed by Gergely Novak)\n",
      "commitDate": "27/10/17 2:41 PM",
      "commitName": "99880d0a16727c770da053464da87960c5b02065",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "17/10/17 4:04 PM",
      "commitNameOld": "46eb1033a86ca53e7b94202567aef8af2417bdf8",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 9.94,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,73 @@\n   private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n       throws YarnException {\n     List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n-    List tasks \u003d (List) jsonJob.get(\"job.tasks\");\n+    List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n     if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n       throw new YarnException(\"No task for the job!\");\n     }\n \n     for (Object o : tasks) {\n       Map jsonTask \u003d (Map) o;\n \n-      String hostname \u003d (String) jsonTask.get(\"container.host\");\n+      String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n \n       long duration \u003d 0;\n-      if (jsonTask.containsKey(\"duration.ms\")) {\n-        duration \u003d Integer.parseInt(jsonTask.get(\"duration.ms\").toString());\n-      } else if (jsonTask.containsKey(\"container.start.ms\") \u0026\u0026\n-          jsonTask.containsKey(\"container.end.ms\")) {\n-        long taskStart \u003d Long.parseLong(jsonTask.get(\"container.start.ms\")\n-            .toString());\n-        long taskFinish \u003d Long.parseLong(jsonTask.get(\"container.end.ms\")\n-            .toString());\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n+        duration \u003d Integer.parseInt(\n+            jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n+      } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n+        // Also support \"duration.ms\" for backward compatibility\n+        duration \u003d Integer.parseInt(\n+            jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n+      } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n+          jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n+        long taskStart \u003d Long.parseLong(\n+            jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n+        long taskFinish \u003d Long.parseLong(\n+            jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n         duration \u003d taskFinish - taskStart;\n       }\n       if (duration \u003c\u003d 0) {\n         throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n             + \" to 0!\");\n       }\n \n       Resource res \u003d getDefaultContainerResource();\n-      if (jsonTask.containsKey(\"container.memory\")) {\n-        int containerMemory \u003d\n-            Integer.parseInt(jsonTask.get(\"container.memory\").toString());\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_MEMORY)) {\n+        int containerMemory \u003d Integer.parseInt(\n+            jsonTask.get(SLSConfiguration.TASK_MEMORY).toString());\n         res.setMemorySize(containerMemory);\n       }\n \n-      if (jsonTask.containsKey(\"container.vcores\")) {\n-        int containerVCores \u003d\n-            Integer.parseInt(jsonTask.get(\"container.vcores\").toString());\n+      if (jsonTask.containsKey(SLSConfiguration.CONTAINER_VCORES)) {\n+        int containerVCores \u003d Integer.parseInt(\n+            jsonTask.get(SLSConfiguration.CONTAINER_VCORES).toString());\n         res.setVirtualCores(containerVCores);\n       }\n \n       int priority \u003d DEFAULT_MAPPER_PRIORITY;\n-      if (jsonTask.containsKey(\"container.priority\")) {\n-        priority \u003d Integer.parseInt(jsonTask.get(\"container.priority\")\n-            .toString());\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n+        priority \u003d Integer.parseInt(\n+            jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n       }\n \n       String type \u003d \"map\";\n-      if (jsonTask.containsKey(\"container.type\")) {\n-        type \u003d jsonTask.get(\"container.type\").toString();\n+      if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n+        type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n       }\n \n       int count \u003d 1;\n-      if (jsonTask.containsKey(\"count\")) {\n-        count \u003d Integer.parseInt(jsonTask.get(\"count\").toString());\n+      if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n+        count \u003d Integer.parseInt(\n+            jsonTask.get(SLSConfiguration.COUNT).toString());\n       }\n       count \u003d Math.max(count, 1);\n \n       for (int i \u003d 0; i \u003c count; i++) {\n         containers.add(\n             new ContainerSimulator(res, duration, hostname, priority, type));\n       }\n     }\n \n     return containers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n      throws YarnException {\n    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n    List tasks \u003d (List) jsonJob.get(SLSConfiguration.JOB_TASKS);\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n\n      String hostname \u003d (String) jsonTask.get(SLSConfiguration.TASK_HOST);\n\n      long duration \u003d 0;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_DURATION_MS)) {\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.DURATION_MS)) {\n        // Also support \"duration.ms\" for backward compatibility\n        duration \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.DURATION_MS).toString());\n      } else if (jsonTask.containsKey(SLSConfiguration.TASK_START_MS) \u0026\u0026\n          jsonTask.containsKey(SLSConfiguration.TASK_END_MS)) {\n        long taskStart \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_START_MS).toString());\n        long taskFinish \u003d Long.parseLong(\n            jsonTask.get(SLSConfiguration.TASK_END_MS).toString());\n        duration \u003d taskFinish - taskStart;\n      }\n      if (duration \u003c\u003d 0) {\n        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n            + \" to 0!\");\n      }\n\n      Resource res \u003d getDefaultContainerResource();\n      if (jsonTask.containsKey(SLSConfiguration.TASK_MEMORY)) {\n        int containerMemory \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_MEMORY).toString());\n        res.setMemorySize(containerMemory);\n      }\n\n      if (jsonTask.containsKey(SLSConfiguration.CONTAINER_VCORES)) {\n        int containerVCores \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.CONTAINER_VCORES).toString());\n        res.setVirtualCores(containerVCores);\n      }\n\n      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n      if (jsonTask.containsKey(SLSConfiguration.TASK_PRIORITY)) {\n        priority \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.TASK_PRIORITY).toString());\n      }\n\n      String type \u003d \"map\";\n      if (jsonTask.containsKey(SLSConfiguration.TASK_TYPE)) {\n        type \u003d jsonTask.get(SLSConfiguration.TASK_TYPE).toString();\n      }\n\n      int count \u003d 1;\n      if (jsonTask.containsKey(SLSConfiguration.COUNT)) {\n        count \u003d Integer.parseInt(\n            jsonTask.get(SLSConfiguration.COUNT).toString());\n      }\n      count \u003d Math.max(count, 1);\n\n      for (int i \u003d 0; i \u003c count; i++) {\n        containers.add(\n            new ContainerSimulator(res, duration, hostname, priority, type));\n      }\n    }\n\n    return containers;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "3082552b3b991df846caf572b58e44308ddf8eeb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6522. Make SLS JSON input file format simple and scalable (yufeigu via rkanter)\n",
      "commitDate": "04/05/17 5:21 PM",
      "commitName": "3082552b3b991df846caf572b58e44308ddf8eeb",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,67 @@\n+  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n+      throws YarnException {\n+    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n+    List tasks \u003d (List) jsonJob.get(\"job.tasks\");\n+    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n+      throw new YarnException(\"No task for the job!\");\n+    }\n+\n+    for (Object o : tasks) {\n+      Map jsonTask \u003d (Map) o;\n+\n+      String hostname \u003d (String) jsonTask.get(\"container.host\");\n+\n+      long duration \u003d 0;\n+      if (jsonTask.containsKey(\"duration.ms\")) {\n+        duration \u003d Integer.parseInt(jsonTask.get(\"duration.ms\").toString());\n+      } else if (jsonTask.containsKey(\"container.start.ms\") \u0026\u0026\n+          jsonTask.containsKey(\"container.end.ms\")) {\n+        long taskStart \u003d Long.parseLong(jsonTask.get(\"container.start.ms\")\n+            .toString());\n+        long taskFinish \u003d Long.parseLong(jsonTask.get(\"container.end.ms\")\n+            .toString());\n+        duration \u003d taskFinish - taskStart;\n+      }\n+      if (duration \u003c\u003d 0) {\n+        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n+            + \" to 0!\");\n+      }\n+\n+      Resource res \u003d getDefaultContainerResource();\n+      if (jsonTask.containsKey(\"container.memory\")) {\n+        int containerMemory \u003d\n+            Integer.parseInt(jsonTask.get(\"container.memory\").toString());\n+        res.setMemorySize(containerMemory);\n+      }\n+\n+      if (jsonTask.containsKey(\"container.vcores\")) {\n+        int containerVCores \u003d\n+            Integer.parseInt(jsonTask.get(\"container.vcores\").toString());\n+        res.setVirtualCores(containerVCores);\n+      }\n+\n+      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n+      if (jsonTask.containsKey(\"container.priority\")) {\n+        priority \u003d Integer.parseInt(jsonTask.get(\"container.priority\")\n+            .toString());\n+      }\n+\n+      String type \u003d \"map\";\n+      if (jsonTask.containsKey(\"container.type\")) {\n+        type \u003d jsonTask.get(\"container.type\").toString();\n+      }\n+\n+      int count \u003d 1;\n+      if (jsonTask.containsKey(\"count\")) {\n+        count \u003d Integer.parseInt(jsonTask.get(\"count\").toString());\n+      }\n+      count \u003d Math.max(count, 1);\n+\n+      for (int i \u003d 0; i \u003c count; i++) {\n+        containers.add(\n+            new ContainerSimulator(res, duration, hostname, priority, type));\n+      }\n+    }\n+\n+    return containers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cContainerSimulator\u003e getTaskContainers(Map jsonJob)\n      throws YarnException {\n    List\u003cContainerSimulator\u003e containers \u003d new ArrayList\u003c\u003e();\n    List tasks \u003d (List) jsonJob.get(\"job.tasks\");\n    if (tasks \u003d\u003d null || tasks.size() \u003d\u003d 0) {\n      throw new YarnException(\"No task for the job!\");\n    }\n\n    for (Object o : tasks) {\n      Map jsonTask \u003d (Map) o;\n\n      String hostname \u003d (String) jsonTask.get(\"container.host\");\n\n      long duration \u003d 0;\n      if (jsonTask.containsKey(\"duration.ms\")) {\n        duration \u003d Integer.parseInt(jsonTask.get(\"duration.ms\").toString());\n      } else if (jsonTask.containsKey(\"container.start.ms\") \u0026\u0026\n          jsonTask.containsKey(\"container.end.ms\")) {\n        long taskStart \u003d Long.parseLong(jsonTask.get(\"container.start.ms\")\n            .toString());\n        long taskFinish \u003d Long.parseLong(jsonTask.get(\"container.end.ms\")\n            .toString());\n        duration \u003d taskFinish - taskStart;\n      }\n      if (duration \u003c\u003d 0) {\n        throw new YarnException(\"Duration of a task shouldn\u0027t be less or equal\"\n            + \" to 0!\");\n      }\n\n      Resource res \u003d getDefaultContainerResource();\n      if (jsonTask.containsKey(\"container.memory\")) {\n        int containerMemory \u003d\n            Integer.parseInt(jsonTask.get(\"container.memory\").toString());\n        res.setMemorySize(containerMemory);\n      }\n\n      if (jsonTask.containsKey(\"container.vcores\")) {\n        int containerVCores \u003d\n            Integer.parseInt(jsonTask.get(\"container.vcores\").toString());\n        res.setVirtualCores(containerVCores);\n      }\n\n      int priority \u003d DEFAULT_MAPPER_PRIORITY;\n      if (jsonTask.containsKey(\"container.priority\")) {\n        priority \u003d Integer.parseInt(jsonTask.get(\"container.priority\")\n            .toString());\n      }\n\n      String type \u003d \"map\";\n      if (jsonTask.containsKey(\"container.type\")) {\n        type \u003d jsonTask.get(\"container.type\").toString();\n      }\n\n      int count \u003d 1;\n      if (jsonTask.containsKey(\"count\")) {\n        count \u003d Integer.parseInt(jsonTask.get(\"count\").toString());\n      }\n      count \u003d Math.max(count, 1);\n\n      for (int i \u003d 0; i \u003c count; i++) {\n        containers.add(\n            new ContainerSimulator(res, duration, hostname, priority, type));\n      }\n    }\n\n    return containers;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}