{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicySatisfyManager.java",
  "functionName": "changeModeEvent",
  "functionId": "changeModeEvent___newMode-StoragePolicySatisfierMode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfyManager.java",
  "functionStartLine": 166,
  "functionEndLine": 205,
  "numCommitsSeen": 5,
  "timeTaken": 3297,
  "changeHistory": [
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
    "66e8f9b31529226309c924226a53dead3e6fcf11",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52"
  ],
  "changeHistoryShort": {
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": "Ybodychange",
    "66e8f9b31529226309c924226a53dead3e6fcf11": "Ybodychange",
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13076: [SPS]: Cleanup work for HDFS-10285 merge. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,40 @@\n   public void changeModeEvent(StoragePolicySatisfierMode newMode) {\n     if (!storagePolicyEnabled) {\n       LOG.info(\"Failed to change storage policy satisfier as {} set to {}.\",\n           DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);\n       return;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Updating SPS service status, current mode:{}, new mode:{}\",\n           mode, newMode);\n     }\n \n     switch (newMode) {\n-    case INTERNAL:\n-      if (spsService.isRunning()) {\n-        LOG.info(\"Storage policy satisfier is already running as {} mode.\",\n-            mode);\n-        return;\n-      }\n-      spsService.init(new IntraSPSNameNodeContext(this.namesystem, this.blkMgr,\n-          spsService));\n-      spsService.start(true, newMode);\n-      break;\n     case EXTERNAL:\n       if (mode \u003d\u003d newMode) {\n         LOG.info(\"Storage policy satisfier is already in mode:{},\"\n             + \" so ignoring change mode event.\", newMode);\n         return;\n       }\n       spsService.stopGracefully();\n       break;\n     case NONE:\n       if (mode \u003d\u003d newMode) {\n         LOG.info(\"Storage policy satisfier is already disabled, mode:{}\"\n             + \" so ignoring change mode event.\", newMode);\n         return;\n       }\n       LOG.info(\"Disabling StoragePolicySatisfier, mode:{}\", newMode);\n       spsService.stop(true);\n-      removeAllPathIds();\n+      clearPathIds();\n       break;\n     default:\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Given mode: {} is invalid\", newMode);\n       }\n       break;\n     }\n \n     // update sps mode\n     mode \u003d newMode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void changeModeEvent(StoragePolicySatisfierMode newMode) {\n    if (!storagePolicyEnabled) {\n      LOG.info(\"Failed to change storage policy satisfier as {} set to {}.\",\n          DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);\n      return;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Updating SPS service status, current mode:{}, new mode:{}\",\n          mode, newMode);\n    }\n\n    switch (newMode) {\n    case EXTERNAL:\n      if (mode \u003d\u003d newMode) {\n        LOG.info(\"Storage policy satisfier is already in mode:{},\"\n            + \" so ignoring change mode event.\", newMode);\n        return;\n      }\n      spsService.stopGracefully();\n      break;\n    case NONE:\n      if (mode \u003d\u003d newMode) {\n        LOG.info(\"Storage policy satisfier is already disabled, mode:{}\"\n            + \" so ignoring change mode event.\", newMode);\n        return;\n      }\n      LOG.info(\"Disabling StoragePolicySatisfier, mode:{}\", newMode);\n      spsService.stop(true);\n      clearPathIds();\n      break;\n    default:\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Given mode: {} is invalid\", newMode);\n      }\n      break;\n    }\n\n    // update sps mode\n    mode \u003d newMode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfyManager.java",
      "extendedDetails": {}
    },
    "66e8f9b31529226309c924226a53dead3e6fcf11": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13381 : [SPS]: Use DFSUtilClient#makePathFromFileId() to prepare satisfier file path. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "66e8f9b31529226309c924226a53dead3e6fcf11",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,50 @@\n   public void changeModeEvent(StoragePolicySatisfierMode newMode) {\n     if (!storagePolicyEnabled) {\n       LOG.info(\"Failed to change storage policy satisfier as {} set to {}.\",\n           DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);\n       return;\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Updating SPS service status, current mode:{}, new mode:{}\",\n           mode, newMode);\n     }\n \n     switch (newMode) {\n     case INTERNAL:\n       if (spsService.isRunning()) {\n         LOG.info(\"Storage policy satisfier is already running as {} mode.\",\n             mode);\n         return;\n       }\n-      spsService.init(\n-          new IntraSPSNameNodeContext(this.namesystem, this.blkMgr, spsService),\n-          new IntraSPSNameNodeFileIdCollector(this.namesystem.getFSDirectory(),\n-              spsService),\n-          new IntraSPSNameNodeBlockMoveTaskHandler(this.blkMgr,\n-              this.namesystem),\n-          null);\n+      spsService.init(new IntraSPSNameNodeContext(this.namesystem, this.blkMgr,\n+          spsService));\n       spsService.start(true, newMode);\n       break;\n     case EXTERNAL:\n       if (mode \u003d\u003d newMode) {\n         LOG.info(\"Storage policy satisfier is already in mode:{},\"\n             + \" so ignoring change mode event.\", newMode);\n         return;\n       }\n       spsService.stopGracefully();\n       break;\n     case NONE:\n       if (mode \u003d\u003d newMode) {\n         LOG.info(\"Storage policy satisfier is already disabled, mode:{}\"\n             + \" so ignoring change mode event.\", newMode);\n         return;\n       }\n       LOG.info(\"Disabling StoragePolicySatisfier, mode:{}\", newMode);\n       spsService.stop(true);\n       removeAllPathIds();\n       break;\n     default:\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Given mode: {} is invalid\", newMode);\n       }\n       break;\n     }\n \n     // update sps mode\n     mode \u003d newMode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void changeModeEvent(StoragePolicySatisfierMode newMode) {\n    if (!storagePolicyEnabled) {\n      LOG.info(\"Failed to change storage policy satisfier as {} set to {}.\",\n          DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);\n      return;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Updating SPS service status, current mode:{}, new mode:{}\",\n          mode, newMode);\n    }\n\n    switch (newMode) {\n    case INTERNAL:\n      if (spsService.isRunning()) {\n        LOG.info(\"Storage policy satisfier is already running as {} mode.\",\n            mode);\n        return;\n      }\n      spsService.init(new IntraSPSNameNodeContext(this.namesystem, this.blkMgr,\n          spsService));\n      spsService.start(true, newMode);\n      break;\n    case EXTERNAL:\n      if (mode \u003d\u003d newMode) {\n        LOG.info(\"Storage policy satisfier is already in mode:{},\"\n            + \" so ignoring change mode event.\", newMode);\n        return;\n      }\n      spsService.stopGracefully();\n      break;\n    case NONE:\n      if (mode \u003d\u003d newMode) {\n        LOG.info(\"Storage policy satisfier is already disabled, mode:{}\"\n            + \" so ignoring change mode event.\", newMode);\n        return;\n      }\n      LOG.info(\"Disabling StoragePolicySatisfier, mode:{}\", newMode);\n      spsService.stop(true);\n      removeAllPathIds();\n      break;\n    default:\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Given mode: {} is invalid\", newMode);\n      }\n      break;\n    }\n\n    // update sps mode\n    mode \u003d newMode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfyManager.java",
      "extendedDetails": {}
    },
    "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13097: [SPS]: Fix the branch review comments(Part1). Contributed by Surendra Singh.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,55 @@\n+  public void changeModeEvent(StoragePolicySatisfierMode newMode) {\n+    if (!storagePolicyEnabled) {\n+      LOG.info(\"Failed to change storage policy satisfier as {} set to {}.\",\n+          DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);\n+      return;\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Updating SPS service status, current mode:{}, new mode:{}\",\n+          mode, newMode);\n+    }\n+\n+    switch (newMode) {\n+    case INTERNAL:\n+      if (spsService.isRunning()) {\n+        LOG.info(\"Storage policy satisfier is already running as {} mode.\",\n+            mode);\n+        return;\n+      }\n+      spsService.init(\n+          new IntraSPSNameNodeContext(this.namesystem, this.blkMgr, spsService),\n+          new IntraSPSNameNodeFileIdCollector(this.namesystem.getFSDirectory(),\n+              spsService),\n+          new IntraSPSNameNodeBlockMoveTaskHandler(this.blkMgr,\n+              this.namesystem),\n+          null);\n+      spsService.start(true, newMode);\n+      break;\n+    case EXTERNAL:\n+      if (mode \u003d\u003d newMode) {\n+        LOG.info(\"Storage policy satisfier is already in mode:{},\"\n+            + \" so ignoring change mode event.\", newMode);\n+        return;\n+      }\n+      spsService.stopGracefully();\n+      break;\n+    case NONE:\n+      if (mode \u003d\u003d newMode) {\n+        LOG.info(\"Storage policy satisfier is already disabled, mode:{}\"\n+            + \" so ignoring change mode event.\", newMode);\n+        return;\n+      }\n+      LOG.info(\"Disabling StoragePolicySatisfier, mode:{}\", newMode);\n+      spsService.stop(true);\n+      removeAllPathIds();\n+      break;\n+    default:\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Given mode: {} is invalid\", newMode);\n+      }\n+      break;\n+    }\n+\n+    // update sps mode\n+    mode \u003d newMode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void changeModeEvent(StoragePolicySatisfierMode newMode) {\n    if (!storagePolicyEnabled) {\n      LOG.info(\"Failed to change storage policy satisfier as {} set to {}.\",\n          DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY, storagePolicyEnabled);\n      return;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Updating SPS service status, current mode:{}, new mode:{}\",\n          mode, newMode);\n    }\n\n    switch (newMode) {\n    case INTERNAL:\n      if (spsService.isRunning()) {\n        LOG.info(\"Storage policy satisfier is already running as {} mode.\",\n            mode);\n        return;\n      }\n      spsService.init(\n          new IntraSPSNameNodeContext(this.namesystem, this.blkMgr, spsService),\n          new IntraSPSNameNodeFileIdCollector(this.namesystem.getFSDirectory(),\n              spsService),\n          new IntraSPSNameNodeBlockMoveTaskHandler(this.blkMgr,\n              this.namesystem),\n          null);\n      spsService.start(true, newMode);\n      break;\n    case EXTERNAL:\n      if (mode \u003d\u003d newMode) {\n        LOG.info(\"Storage policy satisfier is already in mode:{},\"\n            + \" so ignoring change mode event.\", newMode);\n        return;\n      }\n      spsService.stopGracefully();\n      break;\n    case NONE:\n      if (mode \u003d\u003d newMode) {\n        LOG.info(\"Storage policy satisfier is already disabled, mode:{}\"\n            + \" so ignoring change mode event.\", newMode);\n        return;\n      }\n      LOG.info(\"Disabling StoragePolicySatisfier, mode:{}\", newMode);\n      spsService.stop(true);\n      removeAllPathIds();\n      break;\n    default:\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Given mode: {} is invalid\", newMode);\n      }\n      break;\n    }\n\n    // update sps mode\n    mode \u003d newMode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfyManager.java"
    }
  }
}