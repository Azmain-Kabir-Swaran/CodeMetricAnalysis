{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "merge",
  "functionId": "merge___resCalc-ResourceCalculator__clusterResource-Resource__a-RLESparseResourceAllocation__b-RLESparseResourceAllocation__operator-RLEOperator__start-long__end-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 303,
  "functionEndLine": 314,
  "numCommitsSeen": 11,
  "timeTaken": 1441,
  "changeHistory": [
    "da1016365aba1cee9c06771ab142d077379f27af"
  ],
  "changeHistoryShort": {
    "da1016365aba1cee9c06771ab142d077379f27af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da1016365aba1cee9c06771ab142d077379f27af": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3454. Add efficient merge operation to RLESparseResourceAllocation (Carlo Curino via asuresh)\n",
      "commitDate": "21/11/15 9:59 AM",
      "commitName": "da1016365aba1cee9c06771ab142d077379f27af",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,12 @@\n+  public static RLESparseResourceAllocation merge(ResourceCalculator resCalc,\n+      Resource clusterResource, RLESparseResourceAllocation a,\n+      RLESparseResourceAllocation b, RLEOperator operator, long start, long end)\n+      throws PlanningException {\n+    NavigableMap\u003cLong, Resource\u003e cumA \u003d\n+        a.getRangeOverlapping(start, end).getCumulative();\n+    NavigableMap\u003cLong, Resource\u003e cumB \u003d\n+        b.getRangeOverlapping(start, end).getCumulative();\n+    NavigableMap\u003cLong, Resource\u003e out \u003d\n+        merge(resCalc, clusterResource, cumA, cumB, start, end, operator);\n+    return new RLESparseResourceAllocation(out, resCalc);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static RLESparseResourceAllocation merge(ResourceCalculator resCalc,\n      Resource clusterResource, RLESparseResourceAllocation a,\n      RLESparseResourceAllocation b, RLEOperator operator, long start, long end)\n      throws PlanningException {\n    NavigableMap\u003cLong, Resource\u003e cumA \u003d\n        a.getRangeOverlapping(start, end).getCumulative();\n    NavigableMap\u003cLong, Resource\u003e cumB \u003d\n        b.getRangeOverlapping(start, end).getCumulative();\n    NavigableMap\u003cLong, Resource\u003e out \u003d\n        merge(resCalc, clusterResource, cumA, cumB, start, end, operator);\n    return new RLESparseResourceAllocation(out, resCalc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}