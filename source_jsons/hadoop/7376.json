{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirXAttrOp.java",
  "functionName": "unprotectedSetXAttrs",
  "functionId": "unprotectedSetXAttrs___fsd-FSDirectory__iip-INodesInPath(modifiers-final)__xAttrs-List__XAttr__(modifiers-final)__flag-EnumSet__XAttrSetFlag__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
  "functionStartLine": 268,
  "functionEndLine": 333,
  "numCommitsSeen": 415,
  "timeTaken": 12642,
  "changeHistory": [
    "a901405ad80b4efee020e1ddd06104121f26e31f",
    "7ea24fc06c081e2ba6f5f66d212abb14b80c9064",
    "5ce332dc9a072f8850ab71ba16898faf8e866c06",
    "6215e35bb633706753a464ad3e8633366e6a10b2",
    "1000a2af04b24c123a3b08168f36b4e90420cab7",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "06022b8fdc40e50eaac63758246353058e8cfa6d",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
    "eee0d4563c62647cfaaed6605ee713aaf69add78",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "1737950d0fc83c68f386881b843c41b0b1e342de",
    "ea4e2e843ecadd8019ea35413f4a34b97a424923",
    "ceed0f6c46736323bd1b077125ff4e217c649208",
    "c38665282884122d3c82b6f68376cce036aee748",
    "d417e49ce4db119cdeb01be526cdb07f24baf388",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "a901405ad80b4efee020e1ddd06104121f26e31f": "Ybodychange",
    "7ea24fc06c081e2ba6f5f66d212abb14b80c9064": "Ybodychange",
    "5ce332dc9a072f8850ab71ba16898faf8e866c06": "Ybodychange",
    "6215e35bb633706753a464ad3e8633366e6a10b2": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Ybodychange",
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ymultichange(Yparameterchange,Ybodychange)",
    "06022b8fdc40e50eaac63758246353058e8cfa6d": "Ybodychange",
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": "Ybodychange",
    "eee0d4563c62647cfaaed6605ee713aaf69add78": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange",
    "1737950d0fc83c68f386881b843c41b0b1e342de": "Ybodychange",
    "ea4e2e843ecadd8019ea35413f4a34b97a424923": "Ybodychange",
    "ceed0f6c46736323bd1b077125ff4e217c649208": "Ybodychange",
    "c38665282884122d3c82b6f68376cce036aee748": "Ymultichange(Yreturntypechange,Ybodychange)",
    "d417e49ce4db119cdeb01be526cdb07f24baf388": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a901405ad80b4efee020e1ddd06104121f26e31f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14884. Add sanity check that zone key equals feinfo key while setting Xattrs. Contributed by Mukul Kumar Singh.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "22/10/19 1:31 PM",
      "commitName": "a901405ad80b4efee020e1ddd06104121f26e31f",
      "commitAuthor": "Mukul Kumar Singh",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 436.43,
      "commitsBetweenForRepo": 3378,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,66 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n+\n+      if (CRYPTO_XATTR_FILE_ENCRYPTION_INFO.equals(xaName)) {\n+        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d HdfsProtos.\n+                PerFileEncryptionInfoProto.parseFrom(xattr.getValue());\n+        String keyVersionName \u003d fileProto.getEzKeyVersionName();\n+        String zoneKeyName \u003d fsd.ezManager.getKeyName(iip);\n+        if (zoneKeyName \u003d\u003d null) {\n+          throw new IOException(\"Cannot add raw feInfo XAttr to a file in a \" +\n+                  \"non-encryption zone\");\n+        }\n+\n+        if (!KeyProviderCryptoExtension.\n+                getBaseName(keyVersionName).equals(zoneKeyName)) {\n+          throw new IllegalArgumentException(String.format(\n+                  \"KeyVersion \u0027%s\u0027 does not belong to the key \u0027%s\u0027\",\n+                  keyVersionName, zoneKeyName));\n+        }\n+      }\n+\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n \n         if (ezProto.hasReencryptionProto()) {\n           ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n           fsd.ezManager.getReencryptionStatus()\n               .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n         }\n       }\n \n       // Add inode id to movement queue if xattrs contain satisfy xattr.\n       if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n         FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(inode, fsd);\n         continue;\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n\n      if (CRYPTO_XATTR_FILE_ENCRYPTION_INFO.equals(xaName)) {\n        HdfsProtos.PerFileEncryptionInfoProto fileProto \u003d HdfsProtos.\n                PerFileEncryptionInfoProto.parseFrom(xattr.getValue());\n        String keyVersionName \u003d fileProto.getEzKeyVersionName();\n        String zoneKeyName \u003d fsd.ezManager.getKeyName(iip);\n        if (zoneKeyName \u003d\u003d null) {\n          throw new IOException(\"Cannot add raw feInfo XAttr to a file in a \" +\n                  \"non-encryption zone\");\n        }\n\n        if (!KeyProviderCryptoExtension.\n                getBaseName(keyVersionName).equals(zoneKeyName)) {\n          throw new IllegalArgumentException(String.format(\n                  \"KeyVersion \u0027%s\u0027 does not belong to the key \u0027%s\u0027\",\n                  keyVersionName, zoneKeyName));\n        }\n      }\n\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n\n        if (ezProto.hasReencryptionProto()) {\n          ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n          fsd.ezManager.getReencryptionStatus()\n              .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n        }\n      }\n\n      // Add inode id to movement queue if xattrs contain satisfy xattr.\n      if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n        FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(inode, fsd);\n        continue;\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "7ea24fc06c081e2ba6f5f66d212abb14b80c9064": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12225: [SPS]: Optimize extended attributes for tracking SPS movements. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "7ea24fc06c081e2ba6f5f66d212abb14b80c9064",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "5ce332dc9a072f8850ab71ba16898faf8e866c06",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n \n         if (ezProto.hasReencryptionProto()) {\n           ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n           fsd.ezManager.getReencryptionStatus()\n               .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n         }\n       }\n \n       // Add inode id to movement queue if xattrs contain satisfy xattr.\n       if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n-        FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(iip,\n-            fsd.getBlockManager(), fsd);\n+        FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(inode, fsd);\n         continue;\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n\n        if (ezProto.hasReencryptionProto()) {\n          ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n          fsd.ezManager.getReencryptionStatus()\n              .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n        }\n      }\n\n      // Add inode id to movement queue if xattrs contain satisfy xattr.\n      if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n        FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(inode, fsd);\n        continue;\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "5ce332dc9a072f8850ab71ba16898faf8e866c06": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11695: [SPS]: Namenode failed to start while loading SPS xAttrs from the edits log. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "5ce332dc9a072f8850ab71ba16898faf8e866c06",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:05 AM",
      "commitNameOld": "6215e35bb633706753a464ad3e8633366e6a10b2",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n \n         if (ezProto.hasReencryptionProto()) {\n           ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n           fsd.ezManager.getReencryptionStatus()\n               .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n         }\n       }\n \n       // Add inode id to movement queue if xattrs contain satisfy xattr.\n       if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n-        FSDirAttrOp.unprotectedSatisfyStoragePolicy(iip,\n+        FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(iip,\n             fsd.getBlockManager(), fsd);\n         continue;\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n\n        if (ezProto.hasReencryptionProto()) {\n          ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n          fsd.ezManager.getReencryptionStatus()\n              .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n        }\n      }\n\n      // Add inode id to movement queue if xattrs contain satisfy xattr.\n      if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n        FSDirSatisfyStoragePolicyOp.unprotectedSatisfyStoragePolicy(iip,\n            fsd.getBlockManager(), fsd);\n        continue;\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "6215e35bb633706753a464ad3e8633366e6a10b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11150: [SPS]: Provide persistence when satisfying storage policy. Contributed by Yuanbo Liu\n",
      "commitDate": "12/08/18 3:05 AM",
      "commitName": "6215e35bb633706753a464ad3e8633366e6a10b2",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "29/03/18 3:46 PM",
      "commitNameOld": "2c6cfad5a31ca4d9126ecd2b3c43cca8543aacb4",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 135.47,
      "commitsBetweenForRepo": 1447,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,48 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n \n         if (ezProto.hasReencryptionProto()) {\n           ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n           fsd.ezManager.getReencryptionStatus()\n               .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n         }\n       }\n \n+      // Add inode id to movement queue if xattrs contain satisfy xattr.\n+      if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n+        FSDirAttrOp.unprotectedSatisfyStoragePolicy(iip,\n+            fsd.getBlockManager(), fsd);\n+        continue;\n+      }\n+\n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n\n        if (ezProto.hasReencryptionProto()) {\n          ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n          fsd.ezManager.getReencryptionStatus()\n              .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n        }\n      }\n\n      // Add inode id to movement queue if xattrs contain satisfy xattr.\n      if (XATTR_SATISFY_STORAGE_POLICY.equals(xaName)) {\n        FSDirAttrOp.unprotectedSatisfyStoragePolicy(iip,\n            fsd.getBlockManager(), fsd);\n        continue;\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "01/06/17 2:13 PM",
      "commitNameOld": "219f4c199e45f8ce7f41192493bf0dc8f1e5dc30",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 83.12,
      "commitsBetweenForRepo": 482,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,41 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n+\n+        if (ezProto.hasReencryptionProto()) {\n+          ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n+          fsd.ezManager.getReencryptionStatus()\n+              .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n+        }\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n\n        if (ezProto.hasReencryptionProto()) {\n          ReencryptionInfoProto reProto \u003d ezProto.getReencryptionProto();\n          fsd.ezManager.getReencryptionStatus()\n              .updateZoneStatus(inode.getId(), iip.getPath(), reProto);\n        }\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 11:03 AM",
          "commitNameOld": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.09,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,35 @@\n   static INode unprotectedSetXAttrs(\n-      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n+      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n-    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n-        true);\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n-    int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n-    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n+    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String(modifiers-final), xAttrs-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]",
            "newValue": "[fsd-FSDirectory, iip-INodesInPath(modifiers-final), xAttrs-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 11:03 AM",
          "commitNameOld": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.09,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,35 @@\n   static INode unprotectedSetXAttrs(\n-      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n+      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n-    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n-        true);\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n-    int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n             PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n-    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n+    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final INodesInPath iip, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, iip.getLatestSnapshotId());\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "06022b8fdc40e50eaac63758246353058e8cfa6d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9111. Move hdfs-client protobuf convert methods from PBHelper to PBHelperClient. Contributed by Mingliang Liu.\n",
      "commitDate": "21/09/15 6:53 PM",
      "commitName": "06022b8fdc40e50eaac63758246353058e8cfa6d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/09/15 3:32 PM",
      "commitNameOld": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 18.14,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n         true);\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n             PBHelperClient.convert(ezProto.getSuite()),\n-            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n+            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n        true);\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelperClient.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9002. Move o.a.h.hdfs.net/*Peer classes to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "03/09/15 3:32 PM",
      "commitName": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/08/15 1:16 AM",
      "commitNameOld": "eee0d4563c62647cfaaed6605ee713aaf69add78",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 9.59,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n         true);\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n-                                        PBHelper.convert(ezProto.getSuite()),\n-                                        PBHelper.convert(\n-                                            ezProto.getCryptoProtocolVersion()),\n-                                        ezProto.getKeyName());\n+            PBHelperClient.convert(ezProto.getSuite()),\n+            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n+            ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n        true);\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n            PBHelperClient.convert(ezProto.getSuite()),\n            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "eee0d4563c62647cfaaed6605ee713aaf69add78": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8900. Compact XAttrs to optimize memory footprint. (yliu)\n",
      "commitDate": "25/08/15 1:16 AM",
      "commitName": "eee0d4563c62647cfaaed6605ee713aaf69add78",
      "commitAuthor": "yliu",
      "commitDateOld": "09/04/15 12:38 PM",
      "commitNameOld": "922b7ed21d1f1460263ca42f709bb9f415d189c5",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 137.53,
      "commitsBetweenForRepo": 1026,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n         true);\n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n-      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n+      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n                                         PBHelper.convert(ezProto.getSuite()),\n                                         PBHelper.convert(\n                                             ezProto.getCryptoProtocolVersion()),\n                                         ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n        true);\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixedName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/12/14 11:52 AM",
      "commitNameOld": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 4.14,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   static INode unprotectedSetXAttrs(\n       FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws IOException {\n     assert fsd.hasWriteLock();\n-    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n-    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n+        true);\n+    INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         fsd.ezManager.addEncryptionZone(inode.getId(),\n                                         PBHelper.convert(ezProto.getSuite()),\n                                         PBHelper.convert(\n                                             ezProto.getCryptoProtocolVersion()),\n                                         ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src),\n        true);\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
      "extendedDetails": {}
    },
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  static INode unprotectedSetXAttrs(\n+      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n-      throws QuotaExceededException, IOException {\n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n-        ezManager.addEncryptionZone(inode.getId(),\n-            PBHelper.convert(ezProto.getSuite()),\n-            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n-            ezProto.getKeyName());\n+        fsd.ezManager.addEncryptionZone(inode.getId(),\n+                                        PBHelper.convert(ezProto.getSuite()),\n+                                        PBHelper.convert(\n+                                            ezProto.getCryptoProtocolVersion()),\n+                                        ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
            "oldMethodName": "unprotectedSetXAttrs",
            "newMethodName": "unprotectedSetXAttrs"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  static INode unprotectedSetXAttrs(\n+      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n-      throws QuotaExceededException, IOException {\n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n-        ezManager.addEncryptionZone(inode.getId(),\n-            PBHelper.convert(ezProto.getSuite()),\n-            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n-            ezProto.getKeyName());\n+        fsd.ezManager.addEncryptionZone(inode.getId(),\n+                                        PBHelper.convert(ezProto.getSuite()),\n+                                        PBHelper.convert(\n+                                            ezProto.getCryptoProtocolVersion()),\n+                                        ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  static INode unprotectedSetXAttrs(\n+      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n-      throws QuotaExceededException, IOException {\n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n-        ezManager.addEncryptionZone(inode.getId(),\n-            PBHelper.convert(ezProto.getSuite()),\n-            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n-            ezProto.getKeyName());\n+        fsd.ezManager.addEncryptionZone(inode.getId(),\n+                                        PBHelper.convert(ezProto.getSuite()),\n+                                        PBHelper.convert(\n+                                            ezProto.getCryptoProtocolVersion()),\n+                                        ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  static INode unprotectedSetXAttrs(\n+      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n-      throws QuotaExceededException, IOException {\n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n-        ezManager.addEncryptionZone(inode.getId(),\n-            PBHelper.convert(ezProto.getSuite()),\n-            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n-            ezProto.getKeyName());\n+        fsd.ezManager.addEncryptionZone(inode.getId(),\n+                                        PBHelper.convert(ezProto.getSuite()),\n+                                        PBHelper.convert(\n+                                            ezProto.getCryptoProtocolVersion()),\n+                                        ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  static INode unprotectedSetXAttrs(\n+      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n-      throws QuotaExceededException, IOException {\n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+      throws IOException {\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n-        ezManager.addEncryptionZone(inode.getId(),\n-            PBHelper.convert(ezProto.getSuite()),\n-            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n-            ezProto.getKeyName());\n+        fsd.ezManager.addEncryptionZone(inode.getId(),\n+                                        PBHelper.convert(ezProto.getSuite()),\n+                                        PBHelper.convert(\n+                                            ezProto.getCryptoProtocolVersion()),\n+                                        ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INode unprotectedSetXAttrs(\n      FSDirectory fsd, final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath(src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(fsd, existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        fsd.ezManager.addEncryptionZone(inode.getId(),\n                                        PBHelper.convert(ezProto.getSuite()),\n                                        PBHelper.convert(\n                                            ezProto.getCryptoProtocolVersion()),\n                                        ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[src-String(modifiers-final), xAttrs-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]",
            "newValue": "[fsd-FSDirectory, src-String(modifiers-final), xAttrs-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/09/14 10:05 AM",
      "commitNameOld": "073bbd805c6680f47bbfcc6e8efd708ad729bca4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.36,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n             HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n         ezManager.addEncryptionZone(inode.getId(),\n             PBHelper.convert(ezProto.getSuite()),\n+            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n             ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        ezManager.addEncryptionZone(inode.getId(),\n            PBHelper.convert(ezProto.getSuite()),\n            PBHelper.convert(ezProto.getCryptoProtocolVersion()),\n            ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "1737950d0fc83c68f386881b843c41b0b1e342de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
      "commitDate": "21/09/14 9:29 PM",
      "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "17/09/14 10:00 PM",
      "commitNameOld": "2d2b0009e662db75cf22e2ce8d618ed0a8e61c2f",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.98,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     final boolean isFile \u003d inode.isFile();\n \n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n \n       /*\n        * If we\u0027re adding the encryption zone xattr, then add src to the list\n        * of encryption zones.\n        */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n-        ezManager.addEncryptionZone(inode.getId(), new String(xattr.getValue()));\n+        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n+            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n+        ezManager.addEncryptionZone(inode.getId(),\n+            PBHelper.convert(ezProto.getSuite()),\n+            ezProto.getKeyName());\n       }\n \n       if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n         throw new IOException(\"Can only set \u0027\" +\n             SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final HdfsProtos.ZoneEncryptionInfoProto ezProto \u003d\n            HdfsProtos.ZoneEncryptionInfoProto.parseFrom(xattr.getValue());\n        ezManager.addEncryptionZone(inode.getId(),\n            PBHelper.convert(ezProto.getSuite()),\n            ezProto.getKeyName());\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "ea4e2e843ecadd8019ea35413f4a34b97a424923": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6705. Create an XAttr that disallows the HDFS admin from accessing a file. (clamb via wang)\n",
      "commitDate": "17/09/14 11:23 AM",
      "commitName": "ea4e2e843ecadd8019ea35413f4a34b97a424923",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/09/14 4:41 PM",
      "commitNameOld": "33ce887c20ec806ace02063e42599c3db76b536a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,31 @@\n   INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+    final boolean isFile \u003d inode.isFile();\n \n-    /*\n-     * If we\u0027re adding the encryption zone xattr, then add src to the list\n-     * of encryption zones.\n-     */\n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n+\n+      /*\n+       * If we\u0027re adding the encryption zone xattr, then add src to the list\n+       * of encryption zones.\n+       */\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n         ezManager.addEncryptionZone(inode.getId(), new String(xattr.getValue()));\n       }\n+\n+      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n+        throw new IOException(\"Can only set \u0027\" +\n+            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n+      }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    final boolean isFile \u003d inode.isFile();\n\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n\n      /*\n       * If we\u0027re adding the encryption zone xattr, then add src to the list\n       * of encryption zones.\n       */\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        ezManager.addEncryptionZone(inode.getId(), new String(xattr.getValue()));\n      }\n\n      if (!isFile \u0026\u0026 SECURITY_XATTR_UNREADABLE_BY_SUPERUSER.equals(xaName)) {\n        throw new IOException(\"Can only set \u0027\" +\n            SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 on a file.\");\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "ceed0f6c46736323bd1b077125ff4e217c649208": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6635. Refactor encryption zone functionality into new EncryptionZoneManager class. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 9:34 PM",
      "commitName": "ceed0f6c46736323bd1b077125ff4e217c649208",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/07/14 1:43 PM",
      "commitNameOld": "dda85637df2c970d905b550c89208ac6ca63994d",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n \n     /*\n      * If we\u0027re adding the encryption zone xattr, then add src to the list\n      * of encryption zones.\n      */\n     for (XAttr xattr : newXAttrs) {\n       final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n       if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n-        final EncryptionZoneInt ez \u003d\n-            new EncryptionZoneInt(new String(xattr.getValue()), inode.getId());\n-        encryptionZones.put(inode.getId(), ez);\n+        ezManager.addEncryptionZone(inode.getId(), new String(xattr.getValue()));\n       }\n     }\n \n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n     return inode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n\n    /*\n     * If we\u0027re adding the encryption zone xattr, then add src to the list\n     * of encryption zones.\n     */\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        ezManager.addEncryptionZone(inode.getId(), new String(xattr.getValue()));\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "c38665282884122d3c82b6f68376cce036aee748": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6516. List of Encryption Zones should be based on inodes (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:24 PM",
      "commitName": "c38665282884122d3c82b6f68376cce036aee748",
      "commitAuthor": "Charles Lamb",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6516. List of Encryption Zones should be based on inodes (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607770 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/07/14 5:24 PM",
          "commitName": "c38665282884122d3c82b6f68376cce036aee748",
          "commitAuthor": "Charles Lamb",
          "commitDateOld": "02/07/14 5:58 PM",
          "commitNameOld": "2a3bccddd939ee0d6941aa2d22edc67dea85fe35",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,26 @@\n-  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+\n+    /*\n+     * If we\u0027re adding the encryption zone xattr, then add src to the list\n+     * of encryption zones.\n+     */\n+    for (XAttr xattr : newXAttrs) {\n+      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n+      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n+        final EncryptionZoneInt ez \u003d\n+            new EncryptionZoneInt(new String(xattr.getValue()), inode.getId());\n+        encryptionZones.put(inode.getId(), ez);\n+      }\n+    }\n+\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n+    return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n\n    /*\n     * If we\u0027re adding the encryption zone xattr, then add src to the list\n     * of encryption zones.\n     */\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final EncryptionZoneInt ez \u003d\n            new EncryptionZoneInt(new String(xattr.getValue()), inode.getId());\n        encryptionZones.put(inode.getId(), ez);\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "INode"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6516. List of Encryption Zones should be based on inodes (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607770 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/07/14 5:24 PM",
          "commitName": "c38665282884122d3c82b6f68376cce036aee748",
          "commitAuthor": "Charles Lamb",
          "commitDateOld": "02/07/14 5:58 PM",
          "commitNameOld": "2a3bccddd939ee0d6941aa2d22edc67dea85fe35",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,26 @@\n-  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n       final EnumSet\u003cXAttrSetFlag\u003e flag)\n       throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n     List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n+\n+    /*\n+     * If we\u0027re adding the encryption zone xattr, then add src to the list\n+     * of encryption zones.\n+     */\n+    for (XAttr xattr : newXAttrs) {\n+      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n+      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n+        final EncryptionZoneInt ez \u003d\n+            new EncryptionZoneInt(new String(xattr.getValue()), inode.getId());\n+        encryptionZones.put(inode.getId(), ez);\n+      }\n+    }\n+\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n+    return inode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INode unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n\n    /*\n     * If we\u0027re adding the encryption zone xattr, then add src to the list\n     * of encryption zones.\n     */\n    for (XAttr xattr : newXAttrs) {\n      final String xaName \u003d XAttrHelper.getPrefixName(xattr);\n      if (CRYPTO_XATTR_ENCRYPTION_ZONE.equals(xaName)) {\n        final EncryptionZoneInt ez \u003d\n            new EncryptionZoneInt(new String(xattr.getValue()), inode.getId());\n        encryptionZones.put(inode.getId(), ez);\n      }\n    }\n\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n    return inode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "d417e49ce4db119cdeb01be526cdb07f24baf388": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 10:37 AM",
      "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n-  void unprotectedSetXAttr(String src, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n+  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+      final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "unprotectedSetXAttr",
            "newValue": "unprotectedSetXAttrs"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n-  void unprotectedSetXAttr(String src, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n+  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+      final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[src-String, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e]",
            "newValue": "[src-String(modifiers-final), xAttrs-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n-  void unprotectedSetXAttr(String src, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n+  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+      final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[QuotaExceededException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n-  void unprotectedSetXAttr(String src, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n+  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+      final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,11 @@\n-  void unprotectedSetXAttr(String src, XAttr xAttr, \n-      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n+  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n+      final EnumSet\u003cXAttrSetFlag\u003e flag)\n+      throws QuotaExceededException, IOException {\n     assert hasWriteLock();\n     INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n-    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n     XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void unprotectedSetXAttrs(final String src, final List\u003cXAttr\u003e xAttrs,\n      final EnumSet\u003cXAttrSetFlag\u003e flag)\n      throws QuotaExceededException, IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttrs(existingXAttrs, xAttrs, flag);\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[src-String, xAttr-XAttr, flag-EnumSet\u003cXAttrSetFlag\u003e]",
            "newValue": "[src-String(modifiers-final), xAttrs-List\u003cXAttr\u003e(modifiers-final), flag-EnumSet\u003cXAttrSetFlag\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Yintroduced",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,10 @@\n+  void unprotectedSetXAttr(String src, XAttr xAttr, \n+      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n+    assert hasWriteLock();\n+    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n+    INode inode \u003d resolveLastINode(src, iip);\n+    int snapshotId \u003d iip.getLatestSnapshotId();\n+    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n+    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n+    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void unprotectedSetXAttr(String src, XAttr xAttr, \n      EnumSet\u003cXAttrSetFlag\u003e flag) throws IOException {\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cXAttr\u003e existingXAttrs \u003d XAttrStorage.readINodeXAttrs(inode);\n    List\u003cXAttr\u003e newXAttrs \u003d setINodeXAttr(existingXAttrs, xAttr, flag);\n    XAttrStorage.updateINodeXAttrs(inode, newXAttrs, snapshotId);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
    }
  }
}