{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "fitsIn",
  "functionId": "fitsIn___smaller-Resource__bigger-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 562,
  "functionEndLine": 574,
  "numCommitsSeen": 60,
  "timeTaken": 6211,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "e81596d06d226f1cfa44b2390ce3095ed4dee621",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "e81596d06d226f1cfa44b2390ce3095ed4dee621": "Yparameterchange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ybodychange",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public boolean fitsIn(Resource smaller, Resource bigger) {\n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation sResourceInformation \u003d smaller\n           .getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d bigger\n           .getResourceInformation(i);\n       if (sResourceInformation.getValue() \u003e bResourceInformation.getValue()) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource smaller, Resource bigger) {\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation sResourceInformation \u003d smaller\n          .getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d bigger\n          .getResourceInformation(i);\n      if (sResourceInformation.getValue() \u003e bResourceInformation.getValue()) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/05/18 9:06 AM",
      "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 69.04,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,13 @@\n   public boolean fitsIn(Resource smaller, Resource bigger) {\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation sResourceInformation \u003d smaller\n           .getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d bigger\n           .getResourceInformation(i);\n-      long sResourceValue \u003d UnitsConversionUtil.convert(\n-          sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n-          sResourceInformation.getValue());\n-      if (sResourceValue \u003e bResourceInformation.getValue()) {\n+      if (sResourceInformation.getValue() \u003e bResourceInformation.getValue()) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource smaller, Resource bigger) {\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation sResourceInformation \u003d smaller\n          .getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d bigger\n          .getResourceInformation(i);\n      if (sResourceInformation.getValue() \u003e bResourceInformation.getValue()) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "e81596d06d226f1cfa44b2390ce3095ed4dee621": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-7172. ResourceCalculator.fitsIn() should not take a cluster resource parameter. (Sen Zhao via wangda)\n\nChange-Id: Icc3670c9381ce7591ca69ec12da5aa52d3612d34\n",
      "commitDate": "17/09/17 9:20 PM",
      "commitName": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 5.5,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n-  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n+  public boolean fitsIn(Resource smaller, Resource bigger) {\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation sResourceInformation \u003d smaller\n           .getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d bigger\n           .getResourceInformation(i);\n       long sResourceValue \u003d UnitsConversionUtil.convert(\n           sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n           sResourceInformation.getValue());\n       if (sResourceValue \u003e bResourceInformation.getValue()) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource smaller, Resource bigger) {\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation sResourceInformation \u003d smaller\n          .getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d bigger\n          .getResourceInformation(i);\n      long sResourceValue \u003d UnitsConversionUtil.convert(\n          sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n          sResourceInformation.getValue());\n      if (sResourceValue \u003e bResourceInformation.getValue()) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {
        "oldValue": "[cluster-Resource, smaller-Resource, bigger-Resource]",
        "newValue": "[smaller-Resource, bigger-Resource]"
      }
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n-    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation sResourceInformation \u003d smaller\n           .getResourceInformation(i);\n       ResourceInformation bResourceInformation \u003d bigger\n           .getResourceInformation(i);\n       long sResourceValue \u003d UnitsConversionUtil.convert(\n           sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n           sResourceInformation.getValue());\n       if (sResourceValue \u003e bResourceInformation.getValue()) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation sResourceInformation \u003d smaller\n          .getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d bigger\n          .getResourceInformation(i);\n      long sResourceValue \u003d UnitsConversionUtil.convert(\n          sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n          sResourceInformation.getValue());\n      if (sResourceValue \u003e bResourceInformation.getValue()) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6892. [YARN-3926] Improve API implementation in Resources and DominantResourceCalculator class. Contributed by Sunil G.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "2b51b262aba0191b80dc93799574c0b959cb4f4e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,16 @@\n   public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n-    for (String resource : resourceNames) {\n-      try {\n-        ResourceInformation sResourceInformation \u003d\n-            smaller.getResourceInformation(resource);\n-        ResourceInformation bResourceInformation \u003d\n-            bigger.getResourceInformation(resource);\n-        long sResourceValue \u003d UnitsConversionUtil\n-            .convert(sResourceInformation.getUnits(),\n-                bResourceInformation.getUnits(),\n-                sResourceInformation.getValue());\n-        if(sResourceValue \u003e bResourceInformation.getValue()) {\n-          return false;\n-        }\n-      } catch (ResourceNotFoundException ye) {\n+    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation sResourceInformation \u003d smaller\n+          .getResourceInformation(i);\n+      ResourceInformation bResourceInformation \u003d bigger\n+          .getResourceInformation(i);\n+      long sResourceValue \u003d UnitsConversionUtil.convert(\n+          sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n+          sResourceInformation.getValue());\n+      if (sResourceValue \u003e bResourceInformation.getValue()) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation sResourceInformation \u003d smaller\n          .getResourceInformation(i);\n      ResourceInformation bResourceInformation \u003d bigger\n          .getResourceInformation(i);\n      long sResourceValue \u003d UnitsConversionUtil.convert(\n          sResourceInformation.getUnits(), bResourceInformation.getUnits(),\n          sResourceInformation.getValue());\n      if (sResourceValue \u003e bResourceInformation.getValue()) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation sResourceInformation \u003d\n             smaller.getResourceInformation(resource);\n         ResourceInformation bResourceInformation \u003d\n             bigger.getResourceInformation(resource);\n         long sResourceValue \u003d UnitsConversionUtil\n             .convert(sResourceInformation.getUnits(),\n                 bResourceInformation.getUnits(),\n                 sResourceInformation.getValue());\n         if(sResourceValue \u003e bResourceInformation.getValue()) {\n           return false;\n         }\n-      } catch (YarnException ye) {\n+      } catch (ResourceNotFoundException ye) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation sResourceInformation \u003d\n            smaller.getResourceInformation(resource);\n        ResourceInformation bResourceInformation \u003d\n            bigger.getResourceInformation(resource);\n        long sResourceValue \u003d UnitsConversionUtil\n            .convert(sResourceInformation.getUnits(),\n                bResourceInformation.getUnits(),\n                sResourceInformation.getValue());\n        if(sResourceValue \u003e bResourceInformation.getValue()) {\n          return false;\n        }\n      } catch (ResourceNotFoundException ye) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation sResourceInformation \u003d\n             smaller.getResourceInformation(resource);\n         ResourceInformation bResourceInformation \u003d\n             bigger.getResourceInformation(resource);\n-        Long sResourceValue \u003d UnitsConversionUtil\n+        long sResourceValue \u003d UnitsConversionUtil\n             .convert(sResourceInformation.getUnits(),\n                 bResourceInformation.getUnits(),\n                 sResourceInformation.getValue());\n         if(sResourceValue \u003e bResourceInformation.getValue()) {\n           return false;\n         }\n       } catch (YarnException ye) {\n         return false;\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation sResourceInformation \u003d\n            smaller.getResourceInformation(resource);\n        ResourceInformation bResourceInformation \u003d\n            bigger.getResourceInformation(resource);\n        long sResourceValue \u003d UnitsConversionUtil\n            .convert(sResourceInformation.getUnits(),\n                bResourceInformation.getUnits(),\n                sResourceInformation.getValue());\n        if(sResourceValue \u003e bResourceInformation.getValue()) {\n          return false;\n        }\n      } catch (YarnException ye) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5242. Update DominantResourceCalculator to consider all resource types in calculations. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,20 @@\n-  public boolean fitsIn(Resource cluster,\n-      Resource smaller, Resource bigger) {\n-    return smaller.getMemorySize() \u003c\u003d bigger.getMemorySize()\n-        \u0026\u0026 smaller.getVirtualCores() \u003c\u003d bigger.getVirtualCores();\n+  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n+    for (String resource : resourceNames) {\n+      try {\n+        ResourceInformation sResourceInformation \u003d\n+            smaller.getResourceInformation(resource);\n+        ResourceInformation bResourceInformation \u003d\n+            bigger.getResourceInformation(resource);\n+        Long sResourceValue \u003d UnitsConversionUtil\n+            .convert(sResourceInformation.getUnits(),\n+                bResourceInformation.getUnits(),\n+                sResourceInformation.getValue());\n+        if(sResourceValue \u003e bResourceInformation.getValue()) {\n+          return false;\n+        }\n+      } catch (YarnException ye) {\n+        return false;\n+      }\n+    }\n+    return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster, Resource smaller, Resource bigger) {\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation sResourceInformation \u003d\n            smaller.getResourceInformation(resource);\n        ResourceInformation bResourceInformation \u003d\n            bigger.getResourceInformation(resource);\n        Long sResourceValue \u003d UnitsConversionUtil\n            .convert(sResourceInformation.getUnits(),\n                bResourceInformation.getUnits(),\n                sResourceInformation.getValue());\n        if(sResourceValue \u003e bResourceInformation.getValue()) {\n          return false;\n        }\n      } catch (YarnException ye) {\n        return false;\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 248.81,
      "commitsBetweenForRepo": 1666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   public boolean fitsIn(Resource cluster,\n       Resource smaller, Resource bigger) {\n-    return smaller.getMemory() \u003c\u003d bigger.getMemory()\n+    return smaller.getMemorySize() \u003c\u003d bigger.getMemorySize()\n         \u0026\u0026 smaller.getVirtualCores() \u003c\u003d bigger.getVirtualCores();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster,\n      Resource smaller, Resource bigger) {\n    return smaller.getMemorySize() \u003c\u003d bigger.getMemorySize()\n        \u0026\u0026 smaller.getVirtualCores() \u003c\u003d bigger.getVirtualCores();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,5 @@\n+  public boolean fitsIn(Resource cluster,\n+      Resource smaller, Resource bigger) {\n+    return smaller.getMemory() \u003c\u003d bigger.getMemory()\n+        \u0026\u0026 smaller.getVirtualCores() \u003c\u003d bigger.getVirtualCores();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean fitsIn(Resource cluster,\n      Resource smaller, Resource bigger) {\n    return smaller.getMemory() \u003c\u003d bigger.getMemory()\n        \u0026\u0026 smaller.getVirtualCores() \u003c\u003d bigger.getVirtualCores();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}