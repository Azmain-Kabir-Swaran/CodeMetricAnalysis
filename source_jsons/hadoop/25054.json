{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRApps.java",
  "functionName": "setMRFrameworkClasspath",
  "functionId": "setMRFrameworkClasspath___environment-Map__String,String____conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
  "functionStartLine": 192,
  "functionEndLine": 234,
  "numCommitsSeen": 75,
  "timeTaken": 8339,
  "changeHistory": [
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
    "65cd7bf6b120722ee6054393520c349eeacd4969",
    "db06f1bcb98270cd1c36e314f818886f1ef7fd77",
    "e464607b7d156f20bb9ca19a2dfbd73edeaec722",
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "00569147730fbf9bba6e3b0b38bec302af6046fe",
    "2e00d28f1413fcb5afbcbda836dfb9ea6cf3a5a1",
    "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
    "239a5549eadeccb0ab433abb38079dbe19f862ff",
    "6a358ee14026a801b59ac567e2eb795baa074d33",
    "665a90cbf3bc055c8e508a252a3ab8400c3b11b7",
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": "Ybodychange",
    "65cd7bf6b120722ee6054393520c349eeacd4969": "Ybodychange",
    "db06f1bcb98270cd1c36e314f818886f1ef7fd77": "Ybodychange",
    "e464607b7d156f20bb9ca19a2dfbd73edeaec722": "Ybodychange",
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "00569147730fbf9bba6e3b0b38bec302af6046fe": "Ybodychange",
    "2e00d28f1413fcb5afbcbda836dfb9ea6cf3a5a1": "Ybodychange",
    "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea": "Ymultichange(Yparameterchange,Ybodychange)",
    "239a5549eadeccb0ab433abb38079dbe19f862ff": "Ybodychange",
    "6a358ee14026a801b59ac567e2eb795baa074d33": "Ybodychange",
    "665a90cbf3bc055c8e508a252a3ab8400c3b11b7": "Ybodychange",
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b": "Ybodychange",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1824. Improved NodeManager and clients to be able to handle cross platform application submissions. Contributed by Jian He.\nMAPREDUCE-4052. Improved MapReduce clients to use NodeManagers\u0027 ability to handle cross platform application submissions. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578135 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/03/14 11:32 AM",
      "commitName": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/03/14 3:04 PM",
      "commitNameOld": "3bbd67173eaf776b7b5e4af8a24dd8738e02fed0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     // Propagate the system classpath when using the mini cluster\n     if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n-      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n-          System.getProperty(\"java.class.path\"));\n+      MRApps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n+          System.getProperty(\"java.class.path\"), conf);\n     }\n+    boolean crossPlatform \u003d\n+        conf.getBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM,\n+          MRConfig.DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM);\n \n     // if the framework is specified then only use the MR classpath\n     String frameworkName \u003d getMRFrameworkName(conf);\n     if (frameworkName \u003d\u003d null) {\n       // Add standard Hadoop classes\n-      for (String c : conf.getStrings(\n-          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n-          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n-            .trim());\n+      for (String c : conf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n+          crossPlatform\n+              ? YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH\n+              : YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n+        MRApps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n+          c.trim(), conf);\n       }\n     }\n \n     boolean foundFrameworkInClasspath \u003d (frameworkName \u003d\u003d null);\n-    for (String c : conf.getStrings(\n-        MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n-        StringUtils.getStrings(\n-            MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH))){\n-      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n-          .trim());\n+    for (String c : conf.getStrings(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n+        crossPlatform ?\n+            StringUtils.getStrings(MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)\n+            : StringUtils.getStrings(MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH))) {\n+      MRApps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n+        c.trim(), conf);\n       if (!foundFrameworkInClasspath) {\n         foundFrameworkInClasspath \u003d c.contains(frameworkName);\n       }\n     }\n \n     if (!foundFrameworkInClasspath) {\n       throw new IllegalArgumentException(\n           \"Could not locate MapReduce framework name \u0027\" + frameworkName\n           + \"\u0027 in \" + MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH);\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    // Propagate the system classpath when using the mini cluster\n    if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      MRApps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          System.getProperty(\"java.class.path\"), conf);\n    }\n    boolean crossPlatform \u003d\n        conf.getBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM,\n          MRConfig.DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM);\n\n    // if the framework is specified then only use the MR classpath\n    String frameworkName \u003d getMRFrameworkName(conf);\n    if (frameworkName \u003d\u003d null) {\n      // Add standard Hadoop classes\n      for (String c : conf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n          crossPlatform\n              ? YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH\n              : YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n        MRApps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          c.trim(), conf);\n      }\n    }\n\n    boolean foundFrameworkInClasspath \u003d (frameworkName \u003d\u003d null);\n    for (String c : conf.getStrings(MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n        crossPlatform ?\n            StringUtils.getStrings(MRJobConfig.DEFAULT_MAPREDUCE_CROSS_PLATFORM_APPLICATION_CLASSPATH)\n            : StringUtils.getStrings(MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH))) {\n      MRApps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n        c.trim(), conf);\n      if (!foundFrameworkInClasspath) {\n        foundFrameworkInClasspath \u003d c.contains(frameworkName);\n      }\n    }\n\n    if (!foundFrameworkInClasspath) {\n      throw new IllegalArgumentException(\n          \"Could not locate MapReduce framework name \u0027\" + frameworkName\n          + \"\u0027 in \" + MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH);\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "65cd7bf6b120722ee6054393520c349eeacd4969": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5442. $HADOOP_MAPRED_HOME/$HADOOP_CONF_DIR setting not working on Windows. Contributed by Yingda Chen.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529077 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 10:37 PM",
      "commitName": "65cd7bf6b120722ee6054393520c349eeacd4969",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "01/10/13 3:34 PM",
      "commitNameOld": "db06f1bcb98270cd1c36e314f818886f1ef7fd77",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 2.29,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     // Propagate the system classpath when using the mini cluster\n     if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           System.getProperty(\"java.class.path\"));\n     }\n \n     // if the framework is specified then only use the MR classpath\n     String frameworkName \u003d getMRFrameworkName(conf);\n     if (frameworkName \u003d\u003d null) {\n       // Add standard Hadoop classes\n       for (String c : conf.getStrings(\n           YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n           YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n             .trim());\n       }\n     }\n \n     boolean foundFrameworkInClasspath \u003d (frameworkName \u003d\u003d null);\n     for (String c : conf.getStrings(\n         MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n-        MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n+        StringUtils.getStrings(\n+            MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH))){\n       Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n           .trim());\n       if (!foundFrameworkInClasspath) {\n         foundFrameworkInClasspath \u003d c.contains(frameworkName);\n       }\n     }\n \n     if (!foundFrameworkInClasspath) {\n       throw new IllegalArgumentException(\n           \"Could not locate MapReduce framework name \u0027\" + frameworkName\n           + \"\u0027 in \" + MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH);\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    // Propagate the system classpath when using the mini cluster\n    if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          System.getProperty(\"java.class.path\"));\n    }\n\n    // if the framework is specified then only use the MR classpath\n    String frameworkName \u003d getMRFrameworkName(conf);\n    if (frameworkName \u003d\u003d null) {\n      // Add standard Hadoop classes\n      for (String c : conf.getStrings(\n          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    }\n\n    boolean foundFrameworkInClasspath \u003d (frameworkName \u003d\u003d null);\n    for (String c : conf.getStrings(\n        MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n        StringUtils.getStrings(\n            MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH))){\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n          .trim());\n      if (!foundFrameworkInClasspath) {\n        foundFrameworkInClasspath \u003d c.contains(frameworkName);\n      }\n    }\n\n    if (!foundFrameworkInClasspath) {\n      throw new IllegalArgumentException(\n          \"Could not locate MapReduce framework name \u0027\" + frameworkName\n          + \"\u0027 in \" + MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH);\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "db06f1bcb98270cd1c36e314f818886f1ef7fd77": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4421. Run MapReduce framework via the distributed cache. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528237 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:34 PM",
      "commitName": "db06f1bcb98270cd1c36e314f818886f1ef7fd77",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 109.96,
      "commitsBetweenForRepo": 641,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,38 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     // Propagate the system classpath when using the mini cluster\n     if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n       Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           System.getProperty(\"java.class.path\"));\n     }\n \n-    // Add standard Hadoop classes\n-    for (String c : conf.getStrings(\n-        YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n-        YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n-      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n-          .trim());\n+    // if the framework is specified then only use the MR classpath\n+    String frameworkName \u003d getMRFrameworkName(conf);\n+    if (frameworkName \u003d\u003d null) {\n+      // Add standard Hadoop classes\n+      for (String c : conf.getStrings(\n+          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n+          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n+            .trim());\n+      }\n     }\n+\n+    boolean foundFrameworkInClasspath \u003d (frameworkName \u003d\u003d null);\n     for (String c : conf.getStrings(\n         MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n         MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n       Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n           .trim());\n+      if (!foundFrameworkInClasspath) {\n+        foundFrameworkInClasspath \u003d c.contains(frameworkName);\n+      }\n+    }\n+\n+    if (!foundFrameworkInClasspath) {\n+      throw new IllegalArgumentException(\n+          \"Could not locate MapReduce framework name \u0027\" + frameworkName\n+          + \"\u0027 in \" + MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH);\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    // Propagate the system classpath when using the mini cluster\n    if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          System.getProperty(\"java.class.path\"));\n    }\n\n    // if the framework is specified then only use the MR classpath\n    String frameworkName \u003d getMRFrameworkName(conf);\n    if (frameworkName \u003d\u003d null) {\n      // Add standard Hadoop classes\n      for (String c : conf.getStrings(\n          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    }\n\n    boolean foundFrameworkInClasspath \u003d (frameworkName \u003d\u003d null);\n    for (String c : conf.getStrings(\n        MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n        MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n          .trim());\n      if (!foundFrameworkInClasspath) {\n        foundFrameworkInClasspath \u003d c.contains(frameworkName);\n      }\n    }\n\n    if (!foundFrameworkInClasspath) {\n      throw new IllegalArgumentException(\n          \"Could not locate MapReduce framework name \u0027\" + frameworkName\n          + \"\u0027 in \" + MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH);\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "e464607b7d156f20bb9ca19a2dfbd73edeaec722": {
      "type": "Ybodychange",
      "commitMessage": "YARN-129. Simplify classpath construction for mini YARN tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1411235 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/11/12 7:12 AM",
      "commitName": "e464607b7d156f20bb9ca19a2dfbd73edeaec722",
      "commitAuthor": "Thomas White",
      "commitDateOld": "14/11/12 4:16 PM",
      "commitNameOld": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 4.62,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,23 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n-    InputStream classpathFileStream \u003d null;\n-    BufferedReader reader \u003d null;\n-    try {\n-      // Get yarn mapreduce-app classpath from generated classpath\n-      // Works if compile time env is same as runtime. Mainly tests.\n-      ClassLoader thisClassLoader \u003d\n-          Thread.currentThread().getContextClassLoader();\n-      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n-      classpathFileStream \u003d\n-          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n+    // Propagate the system classpath when using the mini cluster\n+    if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n+      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n+          System.getProperty(\"java.class.path\"));\n+    }\n \n-      // Put the file itself on classpath for tasks.\n-      URL classpathResource \u003d thisClassLoader\n-        .getResource(mrAppGeneratedClasspathFile);\n-      if (classpathResource !\u003d null) {\n-        String classpathElement \u003d classpathResource.getFile();\n-        if (classpathElement.contains(\"!\")) {\n-          classpathElement \u003d classpathElement.substring(0,\n-            classpathElement.indexOf(\"!\"));\n-        } else {\n-          classpathElement \u003d new File(classpathElement).getParent();\n-        }\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n-          classpathElement);\n-      }\n-\n-      if (classpathFileStream !\u003d null) {\n-        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream, \n-            Charsets.UTF_8));\n-        String cp \u003d reader.readLine();\n-        if (cp !\u003d null) {\n-          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n-            cp.trim());\n-        }\n-      }\n-\n-      // Add standard Hadoop classes\n-      for (String c : conf.getStrings(\n-          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n-          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n-            .trim());\n-      }\n-      for (String c : conf.getStrings(\n-          MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n-          MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n-            .trim());\n-      }\n-    } finally {\n-      if (classpathFileStream !\u003d null) {\n-        classpathFileStream.close();\n-      }\n-      if (reader !\u003d null) {\n-        reader.close();\n-      }\n+    // Add standard Hadoop classes\n+    for (String c : conf.getStrings(\n+        YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n+        YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n+      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n+          .trim());\n+    }\n+    for (String c : conf.getStrings(\n+        MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n+        MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n+      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n+          .trim());\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    // Propagate the system classpath when using the mini cluster\n    if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false)) {\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          System.getProperty(\"java.class.path\"));\n    }\n\n    // Add standard Hadoop classes\n    for (String c : conf.getStrings(\n        YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n        YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n          .trim());\n    }\n    for (String c : conf.getStrings(\n        MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n        MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n      Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n          .trim());\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "22/10/12 12:50 PM",
      "commitNameOld": "49beea562a3b6bbb5eb56d89759e51b35c5fd4f1",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 23.18,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n \n       // Put the file itself on classpath for tasks.\n       URL classpathResource \u003d thisClassLoader\n         .getResource(mrAppGeneratedClasspathFile);\n       if (classpathResource !\u003d null) {\n         String classpathElement \u003d classpathResource.getFile();\n         if (classpathElement.contains(\"!\")) {\n           classpathElement \u003d classpathElement.substring(0,\n             classpathElement.indexOf(\"!\"));\n         } else {\n           classpathElement \u003d new File(classpathElement).getParent();\n         }\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           classpathElement);\n       }\n \n       if (classpathFileStream !\u003d null) {\n-        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n+        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream, \n+            Charsets.UTF_8));\n         String cp \u003d reader.readLine();\n         if (cp !\u003d null) {\n           Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n             cp.trim());\n         }\n       }\n \n       // Add standard Hadoop classes\n       for (String c : conf.getStrings(\n           YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n           YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n             .trim());\n       }\n       for (String c : conf.getStrings(\n           MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n           MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n             .trim());\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n\n      // Put the file itself on classpath for tasks.\n      URL classpathResource \u003d thisClassLoader\n        .getResource(mrAppGeneratedClasspathFile);\n      if (classpathResource !\u003d null) {\n        String classpathElement \u003d classpathResource.getFile();\n        if (classpathElement.contains(\"!\")) {\n          classpathElement \u003d classpathElement.substring(0,\n            classpathElement.indexOf(\"!\"));\n        } else {\n          classpathElement \u003d new File(classpathElement).getParent();\n        }\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          classpathElement);\n      }\n\n      if (classpathFileStream !\u003d null) {\n        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream, \n            Charsets.UTF_8));\n        String cp \u003d reader.readLine();\n        if (cp !\u003d null) {\n          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n            cp.trim());\n        }\n      }\n\n      // Add standard Hadoop classes\n      for (String c : conf.getStrings(\n          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n      for (String c : conf.getStrings(\n          MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n          MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "00569147730fbf9bba6e3b0b38bec302af6046fe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4638. MR AM supplies MapReduce jars in classpath rather than rely on YARN. Contributed by Arun C Murthy. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 9:56 PM",
      "commitName": "00569147730fbf9bba6e3b0b38bec302af6046fe",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "22/08/12 2:18 PM",
      "commitNameOld": "dc33a0765cd27255021911c4abb435b5850387aa",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 15.32,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,60 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n \n       // Put the file itself on classpath for tasks.\n       URL classpathResource \u003d thisClassLoader\n         .getResource(mrAppGeneratedClasspathFile);\n       if (classpathResource !\u003d null) {\n         String classpathElement \u003d classpathResource.getFile();\n         if (classpathElement.contains(\"!\")) {\n           classpathElement \u003d classpathElement.substring(0,\n             classpathElement.indexOf(\"!\"));\n         } else {\n           classpathElement \u003d new File(classpathElement).getParent();\n         }\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           classpathElement);\n       }\n \n       if (classpathFileStream !\u003d null) {\n         reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n         String cp \u003d reader.readLine();\n         if (cp !\u003d null) {\n           Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n             cp.trim());\n         }\n       }\n \n       // Add standard Hadoop classes\n       for (String c : conf.getStrings(\n           YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n           YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n             .trim());\n       }\n+      for (String c : conf.getStrings(\n+          MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n+          MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n+            .trim());\n+      }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n\n      // Put the file itself on classpath for tasks.\n      URL classpathResource \u003d thisClassLoader\n        .getResource(mrAppGeneratedClasspathFile);\n      if (classpathResource !\u003d null) {\n        String classpathElement \u003d classpathResource.getFile();\n        if (classpathElement.contains(\"!\")) {\n          classpathElement \u003d classpathElement.substring(0,\n            classpathElement.indexOf(\"!\"));\n        } else {\n          classpathElement \u003d new File(classpathElement).getParent();\n        }\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          classpathElement);\n      }\n\n      if (classpathFileStream !\u003d null) {\n        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n        String cp \u003d reader.readLine();\n        if (cp !\u003d null) {\n          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n            cp.trim());\n        }\n      }\n\n      // Add standard Hadoop classes\n      for (String c : conf.getStrings(\n          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n      for (String c : conf.getStrings(\n          MRJobConfig.MAPREDUCE_APPLICATION_CLASSPATH,\n          MRJobConfig.DEFAULT_MAPREDUCE_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "2e00d28f1413fcb5afbcbda836dfb9ea6cf3a5a1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4422. YARN_APPLICATION_CLASSPATH needs a documented default value in YarnConfiguration. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362722 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/12 4:31 PM",
      "commitName": "2e00d28f1413fcb5afbcbda836dfb9ea6cf3a5a1",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "26/03/12 6:21 AM",
      "commitNameOld": "d5836856a2fbcb9374caa9f838990b07204477e4",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 113.42,
      "commitsBetweenForRepo": 727,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n \n       // Put the file itself on classpath for tasks.\n       URL classpathResource \u003d thisClassLoader\n         .getResource(mrAppGeneratedClasspathFile);\n       if (classpathResource !\u003d null) {\n         String classpathElement \u003d classpathResource.getFile();\n         if (classpathElement.contains(\"!\")) {\n           classpathElement \u003d classpathElement.substring(0,\n             classpathElement.indexOf(\"!\"));\n         } else {\n           classpathElement \u003d new File(classpathElement).getParent();\n         }\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           classpathElement);\n       }\n \n       if (classpathFileStream !\u003d null) {\n         reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n         String cp \u003d reader.readLine();\n         if (cp !\u003d null) {\n           Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n             cp.trim());\n         }\n       }\n \n       // Add standard Hadoop classes\n-      for (String c : conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH)\n-          .split(\",\")) {\n+      for (String c : conf.getStrings(\n+          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n+          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n             .trim());\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n\n      // Put the file itself on classpath for tasks.\n      URL classpathResource \u003d thisClassLoader\n        .getResource(mrAppGeneratedClasspathFile);\n      if (classpathResource !\u003d null) {\n        String classpathElement \u003d classpathResource.getFile();\n        if (classpathElement.contains(\"!\")) {\n          classpathElement \u003d classpathElement.substring(0,\n            classpathElement.indexOf(\"!\"));\n        } else {\n          classpathElement \u003d new File(classpathElement).getParent();\n        }\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          classpathElement);\n      }\n\n      if (classpathFileStream !\u003d null) {\n        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n        String cp \u003d reader.readLine();\n        if (cp !\u003d null) {\n          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n            cp.trim());\n        }\n      }\n\n      // Add standard Hadoop classes\n      for (String c : conf.getStrings(\n          YarnConfiguration.YARN_APPLICATION_CLASSPATH,\n          YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3505. yarn APPLICATION_CLASSPATH needs to be overridable. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/12 10:21 AM",
      "commitName": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3505. yarn APPLICATION_CLASSPATH needs to be overridable. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/12 10:21 AM",
          "commitName": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "09/01/12 2:20 PM",
          "commitNameOld": "239a5549eadeccb0ab433abb38079dbe19f862ff",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 14.83,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,53 @@\n   private static void setMRFrameworkClasspath(\n-      Map\u003cString, String\u003e environment) throws IOException {\n+      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n \n       // Put the file itself on classpath for tasks.\n       URL classpathResource \u003d thisClassLoader\n         .getResource(mrAppGeneratedClasspathFile);\n       if (classpathResource !\u003d null) {\n         String classpathElement \u003d classpathResource.getFile();\n         if (classpathElement.contains(\"!\")) {\n           classpathElement \u003d classpathElement.substring(0,\n             classpathElement.indexOf(\"!\"));\n         } else {\n           classpathElement \u003d new File(classpathElement).getParent();\n         }\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           classpathElement);\n       }\n \n       if (classpathFileStream !\u003d null) {\n         reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n         String cp \u003d reader.readLine();\n         if (cp !\u003d null) {\n           Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n             cp.trim());\n         }\n       }\n \n       // Add standard Hadoop classes\n-      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n+      for (String c : conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH)\n+          .split(\",\")) {\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n+            .trim());\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n\n      // Put the file itself on classpath for tasks.\n      URL classpathResource \u003d thisClassLoader\n        .getResource(mrAppGeneratedClasspathFile);\n      if (classpathResource !\u003d null) {\n        String classpathElement \u003d classpathResource.getFile();\n        if (classpathElement.contains(\"!\")) {\n          classpathElement \u003d classpathElement.substring(0,\n            classpathElement.indexOf(\"!\"));\n        } else {\n          classpathElement \u003d new File(classpathElement).getParent();\n        }\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          classpathElement);\n      }\n\n      if (classpathFileStream !\u003d null) {\n        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n        String cp \u003d reader.readLine();\n        if (cp !\u003d null) {\n          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n            cp.trim());\n        }\n      }\n\n      // Add standard Hadoop classes\n      for (String c : conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH)\n          .split(\",\")) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "[environment-Map\u003cString,String\u003e]",
            "newValue": "[environment-Map\u003cString,String\u003e, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3505. yarn APPLICATION_CLASSPATH needs to be overridable. (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235391 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/12 10:21 AM",
          "commitName": "f73daf6af1c87c65dd97e5ec4608ba2742dc83ea",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "09/01/12 2:20 PM",
          "commitNameOld": "239a5549eadeccb0ab433abb38079dbe19f862ff",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 14.83,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,53 @@\n   private static void setMRFrameworkClasspath(\n-      Map\u003cString, String\u003e environment) throws IOException {\n+      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n \n       // Put the file itself on classpath for tasks.\n       URL classpathResource \u003d thisClassLoader\n         .getResource(mrAppGeneratedClasspathFile);\n       if (classpathResource !\u003d null) {\n         String classpathElement \u003d classpathResource.getFile();\n         if (classpathElement.contains(\"!\")) {\n           classpathElement \u003d classpathElement.substring(0,\n             classpathElement.indexOf(\"!\"));\n         } else {\n           classpathElement \u003d new File(classpathElement).getParent();\n         }\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n           classpathElement);\n       }\n \n       if (classpathFileStream !\u003d null) {\n         reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n         String cp \u003d reader.readLine();\n         if (cp !\u003d null) {\n           Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n             cp.trim());\n         }\n       }\n \n       // Add standard Hadoop classes\n-      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n+      for (String c : conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH)\n+          .split(\",\")) {\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n+            .trim());\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment, Configuration conf) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n\n      // Put the file itself on classpath for tasks.\n      URL classpathResource \u003d thisClassLoader\n        .getResource(mrAppGeneratedClasspathFile);\n      if (classpathResource !\u003d null) {\n        String classpathElement \u003d classpathResource.getFile();\n        if (classpathElement.contains(\"!\")) {\n          classpathElement \u003d classpathElement.substring(0,\n            classpathElement.indexOf(\"!\"));\n        } else {\n          classpathElement \u003d new File(classpathElement).getParent();\n        }\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          classpathElement);\n      }\n\n      if (classpathFileStream !\u003d null) {\n        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n        String cp \u003d reader.readLine();\n        if (cp !\u003d null) {\n          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n            cp.trim());\n        }\n      }\n\n      // Add standard Hadoop classes\n      for (String c : conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH)\n          .split(\",\")) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c\n            .trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "239a5549eadeccb0ab433abb38079dbe19f862ff": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3616. Thread pool for launching containers in MR AM not expanding as expected. (Contributed by Vinod Kumar Vavilapalli) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/12 2:20 PM",
      "commitName": "239a5549eadeccb0ab433abb38079dbe19f862ff",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "05/12/11 10:02 AM",
      "commitNameOld": "6a358ee14026a801b59ac567e2eb795baa074d33",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 35.18,
      "commitsBetweenForRepo": 171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,51 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n-      // Put the file itself on classpath for tasks.\n-      String classpathElement \u003d thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile();\n-      if (classpathElement.contains(\"!\")) {\n-        classpathElement \u003d classpathElement.substring(0, classpathElement.indexOf(\"!\"));\n-      }\n-      else {\n-        classpathElement \u003d new File(classpathElement).getParent();\n-      }\n-      Apps.addToEnvironment(\n-          environment,\n-          Environment.CLASSPATH.name(), classpathElement);\n \n-      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n-      String cp \u003d reader.readLine();\n-      if (cp !\u003d null) {\n-        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n-      }      \n+      // Put the file itself on classpath for tasks.\n+      URL classpathResource \u003d thisClassLoader\n+        .getResource(mrAppGeneratedClasspathFile);\n+      if (classpathResource !\u003d null) {\n+        String classpathElement \u003d classpathResource.getFile();\n+        if (classpathElement.contains(\"!\")) {\n+          classpathElement \u003d classpathElement.substring(0,\n+            classpathElement.indexOf(\"!\"));\n+        } else {\n+          classpathElement \u003d new File(classpathElement).getParent();\n+        }\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n+          classpathElement);\n+      }\n+\n+      if (classpathFileStream !\u003d null) {\n+        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n+        String cp \u003d reader.readLine();\n+        if (cp !\u003d null) {\n+          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n+            cp.trim());\n+        }\n+      }\n+\n       // Add standard Hadoop classes\n       for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n\n      // Put the file itself on classpath for tasks.\n      URL classpathResource \u003d thisClassLoader\n        .getResource(mrAppGeneratedClasspathFile);\n      if (classpathResource !\u003d null) {\n        String classpathElement \u003d classpathResource.getFile();\n        if (classpathElement.contains(\"!\")) {\n          classpathElement \u003d classpathElement.substring(0,\n            classpathElement.indexOf(\"!\"));\n        } else {\n          classpathElement \u003d new File(classpathElement).getParent();\n        }\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n          classpathElement);\n      }\n\n      if (classpathFileStream !\u003d null) {\n        reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n        String cp \u003d reader.readLine();\n        if (cp !\u003d null) {\n          Apps.addToEnvironment(environment, Environment.CLASSPATH.name(),\n            cp.trim());\n        }\n      }\n\n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "6a358ee14026a801b59ac567e2eb795baa074d33": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3389. MRApps loads the \u0027mrapp-generated-classpath\u0027 file with classpath from the build machine. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210548 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/12/11 10:02 AM",
      "commitName": "6a358ee14026a801b59ac567e2eb795baa074d33",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/10/11 11:46 PM",
      "commitNameOld": "665a90cbf3bc055c8e508a252a3ab8400c3b11b7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 44.47,
      "commitsBetweenForRepo": 289,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,43 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n+      // Put the file itself on classpath for tasks.\n+      String classpathElement \u003d thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile();\n+      if (classpathElement.contains(\"!\")) {\n+        classpathElement \u003d classpathElement.substring(0, classpathElement.indexOf(\"!\"));\n+      }\n+      else {\n+        classpathElement \u003d new File(classpathElement).getParent();\n+      }\n+      Apps.addToEnvironment(\n+          environment,\n+          Environment.CLASSPATH.name(), classpathElement);\n+\n       reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n-      }\n-      // Put the file itself on classpath for tasks.\n-      Apps.addToEnvironment(\n-          environment,\n-          Environment.CLASSPATH.name(),\n-          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile()\n-            .split(\"!\")[0]);\n-\n+      }      \n       // Add standard Hadoop classes\n       for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      // Put the file itself on classpath for tasks.\n      String classpathElement \u003d thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile();\n      if (classpathElement.contains(\"!\")) {\n        classpathElement \u003d classpathElement.substring(0, classpathElement.indexOf(\"!\"));\n      }\n      else {\n        classpathElement \u003d new File(classpathElement).getParent();\n      }\n      Apps.addToEnvironment(\n          environment,\n          Environment.CLASSPATH.name(), classpathElement);\n\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n      }      \n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "665a90cbf3bc055c8e508a252a3ab8400c3b11b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3087. Fixed the mapreduce classpath to correctly include the generated-classpath file needed for tests. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/10/11 11:46 PM",
      "commitName": "665a90cbf3bc055c8e508a252a3ab8400c3b11b7",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/11 2:45 PM",
      "commitNameOld": "ab787f44aabfff0cd01b79a08a52ffaf923558b3",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.38,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n       reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n       }\n       // Put the file itself on classpath for tasks.\n       Apps.addToEnvironment(\n           environment,\n           Environment.CLASSPATH.name(),\n-          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n+          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile()\n+            .split(\"!\")[0]);\n \n       // Add standard Hadoop classes\n       for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n         Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      Apps.addToEnvironment(\n          environment,\n          Environment.CLASSPATH.name(),\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile()\n            .split(\"!\")[0]);\n\n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3068. Added a whitelist of environment variables for containers from the NodeManager and set MALLOC_ARENA_MAX for all daemons and containers. Contributed by Chris Riccomini. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185447 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/10/11 6:22 PM",
      "commitName": "c1d90772b6e38bb4e4be7ed75cb5d34f3048ad7b",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "21/09/11 11:28 AM",
      "commitNameOld": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.29,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n       reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n-        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n       }\n       // Put the file itself on classpath for tasks.\n-      addToEnvironment(\n+      Apps.addToEnvironment(\n           environment,\n           Environment.CLASSPATH.name(),\n           thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n \n       // Add standard Hadoop classes\n       for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n-        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n+        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      Apps.addToEnvironment(\n          environment,\n          Environment.CLASSPATH.name(),\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        Apps.addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/09/11 11:28 AM",
          "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,37 @@\n-  public static void setInitialClasspath(\n+  private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n       reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n-        addToClassPath(environment, cp.trim());\n+        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n       }\n       // Put the file itself on classpath for tasks.\n-      addToClassPath(environment,\n+      addToEnvironment(\n+          environment,\n+          Environment.CLASSPATH.name(),\n           thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n \n-      // If runtime env is different.\n-      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n-        ShellCommandExecutor exec \u003d\n-            new ShellCommandExecutor(new String[] {\n-                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n-            \"classpath\" });\n-        exec.execute();\n-        addToClassPath(environment, exec.getOutput().trim());\n-      }\n-\n-      // Get yarn mapreduce-app classpath\n-      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n-        ShellCommandExecutor exec \u003d\n-            new ShellCommandExecutor(new String[] {\n-                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n-            \"classpath\" });\n-        exec.execute();\n-        addToClassPath(environment, exec.getOutput().trim());\n+      // Add standard Hadoop classes\n+      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n+        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      addToEnvironment(\n          environment,\n          Environment.CLASSPATH.name(),\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "setInitialClasspath",
            "newValue": "setMRFrameworkClasspath"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/09/11 11:28 AM",
          "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,37 @@\n-  public static void setInitialClasspath(\n+  private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n       reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n-        addToClassPath(environment, cp.trim());\n+        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n       }\n       // Put the file itself on classpath for tasks.\n-      addToClassPath(environment,\n+      addToEnvironment(\n+          environment,\n+          Environment.CLASSPATH.name(),\n           thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n \n-      // If runtime env is different.\n-      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n-        ShellCommandExecutor exec \u003d\n-            new ShellCommandExecutor(new String[] {\n-                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n-            \"classpath\" });\n-        exec.execute();\n-        addToClassPath(environment, exec.getOutput().trim());\n-      }\n-\n-      // Get yarn mapreduce-app classpath\n-      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n-        ShellCommandExecutor exec \u003d\n-            new ShellCommandExecutor(new String[] {\n-                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n-            \"classpath\" });\n-        exec.execute();\n-        addToClassPath(environment, exec.getOutput().trim());\n+      // Add standard Hadoop classes\n+      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n+        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      addToEnvironment(\n          environment,\n          Environment.CLASSPATH.name(),\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/09/11 11:28 AM",
          "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 7.46,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,37 @@\n-  public static void setInitialClasspath(\n+  private static void setMRFrameworkClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n     BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n       reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n-        addToClassPath(environment, cp.trim());\n+        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n       }\n       // Put the file itself on classpath for tasks.\n-      addToClassPath(environment,\n+      addToEnvironment(\n+          environment,\n+          Environment.CLASSPATH.name(),\n           thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n \n-      // If runtime env is different.\n-      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n-        ShellCommandExecutor exec \u003d\n-            new ShellCommandExecutor(new String[] {\n-                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n-            \"classpath\" });\n-        exec.execute();\n-        addToClassPath(environment, exec.getOutput().trim());\n-      }\n-\n-      // Get yarn mapreduce-app classpath\n-      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n-        ShellCommandExecutor exec \u003d\n-            new ShellCommandExecutor(new String[] {\n-                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n-            \"classpath\" });\n-        exec.execute();\n-        addToClassPath(environment, exec.getOutput().trim());\n+      // Add standard Hadoop classes\n+      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n+        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n       if (reader !\u003d null) {\n         reader.close();\n       }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setMRFrameworkClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        addToEnvironment(environment, Environment.CLASSPATH.name(), cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      addToEnvironment(\n          environment,\n          Environment.CLASSPATH.name(),\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // Add standard Hadoop classes\n      for (String c : ApplicationConstants.APPLICATION_CLASSPATH) {\n        addToEnvironment(environment, Environment.CLASSPATH.name(), c);\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "02/09/11 11:22 PM",
      "commitNameOld": "6bdf5746d5d677f9c17598768c4ae86384c000c6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.5,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   public static void setInitialClasspath(\n       Map\u003cString, String\u003e environment) throws IOException {\n     InputStream classpathFileStream \u003d null;\n+    BufferedReader reader \u003d null;\n     try {\n       // Get yarn mapreduce-app classpath from generated classpath\n       // Works if compile time env is same as runtime. Mainly tests.\n       ClassLoader thisClassLoader \u003d\n           Thread.currentThread().getContextClassLoader();\n       String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n       classpathFileStream \u003d\n           thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n-      BufferedReader reader \u003d\n-          new BufferedReader(new InputStreamReader(classpathFileStream));\n+      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n       String cp \u003d reader.readLine();\n       if (cp !\u003d null) {\n         addToClassPath(environment, cp.trim());\n       }\n       // Put the file itself on classpath for tasks.\n       addToClassPath(environment,\n           thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n \n       // If runtime env is different.\n       if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n         ShellCommandExecutor exec \u003d\n             new ShellCommandExecutor(new String[] {\n                 System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n             \"classpath\" });\n         exec.execute();\n         addToClassPath(environment, exec.getOutput().trim());\n       }\n \n       // Get yarn mapreduce-app classpath\n       if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n         ShellCommandExecutor exec \u003d\n             new ShellCommandExecutor(new String[] {\n                 System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n             \"classpath\" });\n         exec.execute();\n         addToClassPath(environment, exec.getOutput().trim());\n       }\n     } finally {\n       if (classpathFileStream !\u003d null) {\n         classpathFileStream.close();\n       }\n+      if (reader !\u003d null) {\n+        reader.close();\n+      }\n     }\n     // TODO: Remove duplicates.\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setInitialClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    BufferedReader reader \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      reader \u003d new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        addToClassPath(environment, cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      addToClassPath(environment,\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // If runtime env is different.\n      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n        ShellCommandExecutor exec \u003d\n            new ShellCommandExecutor(new String[] {\n                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n            \"classpath\" });\n        exec.execute();\n        addToClassPath(environment, exec.getOutput().trim());\n      }\n\n      // Get yarn mapreduce-app classpath\n      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n        ShellCommandExecutor exec \u003d\n            new ShellCommandExecutor(new String[] {\n                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n            \"classpath\" });\n        exec.execute();\n        addToClassPath(environment, exec.getOutput().trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n      if (reader !\u003d null) {\n        reader.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void setInitialClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      BufferedReader reader \u003d\n          new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        addToClassPath(environment, cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      addToClassPath(environment,\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // If runtime env is different.\n      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n        ShellCommandExecutor exec \u003d\n            new ShellCommandExecutor(new String[] {\n                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n            \"classpath\" });\n        exec.execute();\n        addToClassPath(environment, exec.getOutput().trim());\n      }\n\n      // Get yarn mapreduce-app classpath\n      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n        ShellCommandExecutor exec \u003d\n            new ShellCommandExecutor(new String[] {\n                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n            \"classpath\" });\n        exec.execute();\n        addToClassPath(environment, exec.getOutput().trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,47 @@\n+  public static void setInitialClasspath(\n+      Map\u003cString, String\u003e environment) throws IOException {\n+    InputStream classpathFileStream \u003d null;\n+    try {\n+      // Get yarn mapreduce-app classpath from generated classpath\n+      // Works if compile time env is same as runtime. Mainly tests.\n+      ClassLoader thisClassLoader \u003d\n+          Thread.currentThread().getContextClassLoader();\n+      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n+      classpathFileStream \u003d\n+          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n+      BufferedReader reader \u003d\n+          new BufferedReader(new InputStreamReader(classpathFileStream));\n+      String cp \u003d reader.readLine();\n+      if (cp !\u003d null) {\n+        addToClassPath(environment, cp.trim());\n+      }\n+      // Put the file itself on classpath for tasks.\n+      addToClassPath(environment,\n+          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n+\n+      // If runtime env is different.\n+      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n+        ShellCommandExecutor exec \u003d\n+            new ShellCommandExecutor(new String[] {\n+                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n+            \"classpath\" });\n+        exec.execute();\n+        addToClassPath(environment, exec.getOutput().trim());\n+      }\n+\n+      // Get yarn mapreduce-app classpath\n+      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n+        ShellCommandExecutor exec \u003d\n+            new ShellCommandExecutor(new String[] {\n+                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n+            \"classpath\" });\n+        exec.execute();\n+        addToClassPath(environment, exec.getOutput().trim());\n+      }\n+    } finally {\n+      if (classpathFileStream !\u003d null) {\n+        classpathFileStream.close();\n+      }\n+    }\n+    // TODO: Remove duplicates.\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void setInitialClasspath(\n      Map\u003cString, String\u003e environment) throws IOException {\n    InputStream classpathFileStream \u003d null;\n    try {\n      // Get yarn mapreduce-app classpath from generated classpath\n      // Works if compile time env is same as runtime. Mainly tests.\n      ClassLoader thisClassLoader \u003d\n          Thread.currentThread().getContextClassLoader();\n      String mrAppGeneratedClasspathFile \u003d \"mrapp-generated-classpath\";\n      classpathFileStream \u003d\n          thisClassLoader.getResourceAsStream(mrAppGeneratedClasspathFile);\n      BufferedReader reader \u003d\n          new BufferedReader(new InputStreamReader(classpathFileStream));\n      String cp \u003d reader.readLine();\n      if (cp !\u003d null) {\n        addToClassPath(environment, cp.trim());\n      }\n      // Put the file itself on classpath for tasks.\n      addToClassPath(environment,\n          thisClassLoader.getResource(mrAppGeneratedClasspathFile).getFile());\n\n      // If runtime env is different.\n      if (System.getenv().get(\"YARN_HOME\") !\u003d null) {\n        ShellCommandExecutor exec \u003d\n            new ShellCommandExecutor(new String[] {\n                System.getenv().get(\"YARN_HOME\") + \"/bin/yarn\",\n            \"classpath\" });\n        exec.execute();\n        addToClassPath(environment, exec.getOutput().trim());\n      }\n\n      // Get yarn mapreduce-app classpath\n      if (System.getenv().get(\"HADOOP_MAPRED_HOME\")!\u003d null) {\n        ShellCommandExecutor exec \u003d\n            new ShellCommandExecutor(new String[] {\n                System.getenv().get(\"HADOOP_MAPRED_HOME\") + \"/bin/mapred\",\n            \"classpath\" });\n        exec.execute();\n        addToClassPath(environment, exec.getOutput().trim());\n      }\n    } finally {\n      if (classpathFileStream !\u003d null) {\n        classpathFileStream.close();\n      }\n    }\n    // TODO: Remove duplicates.\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java"
    }
  }
}