{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "createService",
  "functionId": "createService___request-HttpServletRequest(annotations-@Context)__service-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 110,
  "functionEndLine": 178,
  "numCommitsSeen": 40,
  "timeTaken": 3265,
  "changeHistory": [
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "598483e496a0e0253310817d8d1bd3511318bc8b",
    "e1f5251f3c0d6e74af1b52eda6633b728804fe2a",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
    "438c1d333ebc0a3071bb556532ed959a4bd1e6d6",
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037",
    "40ab068eabe50875449d601471619a4e82fff86d"
  ],
  "changeHistoryShort": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "598483e496a0e0253310817d8d1bd3511318bc8b": "Ybodychange",
    "e1f5251f3c0d6e74af1b52eda6633b728804fe2a": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ymultichange(Yparameterchange,Ybodychange)",
    "836e3c45e8232fc4c8c795c0f93d2f3d7353f392": "Ybodychange",
    "438c1d333ebc0a3071bb556532ed959a4bd1e6d6": "Ybodychange",
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9067. YARN Resource Manager is running OOM because of leak of Configuration Object. Contributed by Eric Yang.\n",
      "commitDate": "28/11/18 5:34 PM",
      "commitName": "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,69 @@\n   public Response createService(@Context HttpServletRequest request,\n       Service service) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n       if(service.getState()\u003d\u003dServiceState.STOPPED) {\n         ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws YarnException, IOException {\n             ServiceClient sc \u003d getServiceClient();\n-            sc.init(YARN_CONFIG);\n-            sc.start();\n-            sc.actionBuild(service);\n-            sc.close();\n+            try {\n+              sc.init(YARN_CONFIG);\n+              sc.start();\n+              sc.actionBuild(service);\n+            } finally {\n+              sc.close();\n+            }\n             return null;\n           }\n         });\n         serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n             \" version \" + service.getVersion() + \" saved.\");\n       } else {\n         ApplicationId applicationId \u003d ugi\n             .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n               @Override\n               public ApplicationId run() throws IOException, YarnException {\n                 ServiceClient sc \u003d getServiceClient();\n-                sc.init(YARN_CONFIG);\n-                sc.start();\n-                ApplicationId applicationId \u003d sc.actionCreate(service);\n-                sc.close();\n-                return applicationId;\n+                try {\n+                  sc.init(YARN_CONFIG);\n+                  sc.start();\n+                  ApplicationId applicationId \u003d sc.actionCreate(service);\n+                  return applicationId;\n+                } finally {\n+                  sc.close();\n+                }\n               }\n             });\n         serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n       }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n       return formatResponse(Status.ACCEPTED, serviceStatus);\n     } catch (AccessControlException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n     } catch (IllegalArgumentException e) {\n       return formatResponse(Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       String message \u003d \"Failed to create service \" + service.getName()\n           + \": {}\";\n       LOG.error(message, e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       String message \u003d \"Failed to create service \" + service.getName()\n           + \": {}\";\n       LOG.error(message, e);\n       if (e.getCause().getMessage().contains(\"already exists\")) {\n         message \u003d \"Service name \" + service.getName() + \" is already taken.\";\n       } else {\n         message \u003d e.getCause().getMessage();\n       }\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(@Context HttpServletRequest request,\n      Service service) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            try {\n              sc.init(YARN_CONFIG);\n              sc.start();\n              sc.actionBuild(service);\n            } finally {\n              sc.close();\n            }\n            return null;\n          }\n        });\n        serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n            \" version \" + service.getVersion() + \" saved.\");\n      } else {\n        ApplicationId applicationId \u003d ugi\n            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n              @Override\n              public ApplicationId run() throws IOException, YarnException {\n                ServiceClient sc \u003d getServiceClient();\n                try {\n                  sc.init(YARN_CONFIG);\n                  sc.start();\n                  ApplicationId applicationId \u003d sc.actionCreate(service);\n                  return applicationId;\n                } finally {\n                  sc.close();\n                }\n              }\n            });\n        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return formatResponse(Status.ACCEPTED, serviceStatus);\n    } catch (AccessControlException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n    } catch (IllegalArgumentException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      if (e.getCause().getMessage().contains(\"already exists\")) {\n        message \u003d \"Service name \" + service.getName() + \" is already taken.\";\n      } else {\n        message \u003d e.getCause().getMessage();\n      }\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response createService(@Context HttpServletRequest request,\n      Service service) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            sc.actionBuild(service);\n            sc.close();\n            return null;\n          }\n        });\n        serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n            \" version \" + service.getVersion() + \" saved.\");\n      } else {\n        ApplicationId applicationId \u003d ugi\n            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n              @Override\n              public ApplicationId run() throws IOException, YarnException {\n                ServiceClient sc \u003d getServiceClient();\n                sc.init(YARN_CONFIG);\n                sc.start();\n                ApplicationId applicationId \u003d sc.actionCreate(service);\n                sc.close();\n                return applicationId;\n              }\n            });\n        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return formatResponse(Status.ACCEPTED, serviceStatus);\n    } catch (AccessControlException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n    } catch (IllegalArgumentException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      if (e.getCause().getMessage().contains(\"already exists\")) {\n        message \u003d \"Service name \" + service.getName() + \" is already taken.\";\n      } else {\n        message \u003d e.getCause().getMessage();\n      }\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "598483e496a0e0253310817d8d1bd3511318bc8b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8140. Improve log message when launch cmd is ran for stopped yarn service. Contributed by Eric Yang\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "598483e496a0e0253310817d8d1bd3511318bc8b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,63 @@\n   public Response createService(@Context HttpServletRequest request,\n       Service service) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n       if(service.getState()\u003d\u003dServiceState.STOPPED) {\n         ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws YarnException, IOException {\n             ServiceClient sc \u003d getServiceClient();\n             sc.init(YARN_CONFIG);\n             sc.start();\n             sc.actionBuild(service);\n             sc.close();\n             return null;\n           }\n         });\n         serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n             \" version \" + service.getVersion() + \" saved.\");\n       } else {\n         ApplicationId applicationId \u003d ugi\n             .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n               @Override\n               public ApplicationId run() throws IOException, YarnException {\n                 ServiceClient sc \u003d getServiceClient();\n                 sc.init(YARN_CONFIG);\n                 sc.start();\n                 ApplicationId applicationId \u003d sc.actionCreate(service);\n                 sc.close();\n                 return applicationId;\n               }\n             });\n         serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n       }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n       return formatResponse(Status.ACCEPTED, serviceStatus);\n     } catch (AccessControlException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n     } catch (IllegalArgumentException e) {\n       return formatResponse(Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       String message \u003d \"Failed to create service \" + service.getName()\n           + \": {}\";\n       LOG.error(message, e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       String message \u003d \"Failed to create service \" + service.getName()\n           + \": {}\";\n       LOG.error(message, e);\n+      if (e.getCause().getMessage().contains(\"already exists\")) {\n+        message \u003d \"Service name \" + service.getName() + \" is already taken.\";\n+      } else {\n+        message \u003d e.getCause().getMessage();\n+      }\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n-          e.getCause().getMessage());\n+          message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(@Context HttpServletRequest request,\n      Service service) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            sc.actionBuild(service);\n            sc.close();\n            return null;\n          }\n        });\n        serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n            \" version \" + service.getVersion() + \" saved.\");\n      } else {\n        ApplicationId applicationId \u003d ugi\n            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n              @Override\n              public ApplicationId run() throws IOException, YarnException {\n                ServiceClient sc \u003d getServiceClient();\n                sc.init(YARN_CONFIG);\n                sc.start();\n                ApplicationId applicationId \u003d sc.actionCreate(service);\n                sc.close();\n                return applicationId;\n              }\n            });\n        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return formatResponse(Status.ACCEPTED, serviceStatus);\n    } catch (AccessControlException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n    } catch (IllegalArgumentException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      if (e.getCause().getMessage().contains(\"already exists\")) {\n        message \u003d \"Service name \" + service.getName() + \" is already taken.\";\n      } else {\n        message \u003d e.getCause().getMessage();\n      }\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "e1f5251f3c0d6e74af1b52eda6633b728804fe2a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7523. Introduce description and version field in Service record. Contributed by Chandni Singh\n",
      "commitDate": "10/03/18 7:49 AM",
      "commitName": "e1f5251f3c0d6e74af1b52eda6633b728804fe2a",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "28/02/18 3:01 PM",
      "commitNameOld": "315f48e791790ce56d4f9ed220180aaa00bbc5fa",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 9.7,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public Response createService(@Context HttpServletRequest request,\n       Service service) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n       if(service.getState()\u003d\u003dServiceState.STOPPED) {\n         ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws YarnException, IOException {\n             ServiceClient sc \u003d getServiceClient();\n             sc.init(YARN_CONFIG);\n             sc.start();\n             sc.actionBuild(service);\n             sc.close();\n             return null;\n           }\n         });\n-        serviceStatus.setDiagnostics(\"Service \"+service.getName() +\n-            \" saved.\");\n+        serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n+            \" version \" + service.getVersion() + \" saved.\");\n       } else {\n         ApplicationId applicationId \u003d ugi\n             .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n               @Override\n               public ApplicationId run() throws IOException, YarnException {\n                 ServiceClient sc \u003d getServiceClient();\n                 sc.init(YARN_CONFIG);\n                 sc.start();\n                 ApplicationId applicationId \u003d sc.actionCreate(service);\n                 sc.close();\n                 return applicationId;\n               }\n             });\n         serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n       }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n       return formatResponse(Status.ACCEPTED, serviceStatus);\n     } catch (AccessControlException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n     } catch (IllegalArgumentException e) {\n       return formatResponse(Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       String message \u003d \"Failed to create service \" + service.getName()\n           + \": {}\";\n       LOG.error(message, e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       String message \u003d \"Failed to create service \" + service.getName()\n           + \": {}\";\n       LOG.error(message, e);\n       return formatResponse(Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(@Context HttpServletRequest request,\n      Service service) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            sc.actionBuild(service);\n            sc.close();\n            return null;\n          }\n        });\n        serviceStatus.setDiagnostics(\"Service \" + service.getName() +\n            \" version \" + service.getVersion() + \" saved.\");\n      } else {\n        ApplicationId applicationId \u003d ugi\n            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n              @Override\n              public ApplicationId run() throws IOException, YarnException {\n                ServiceClient sc \u003d getServiceClient();\n                sc.init(YARN_CONFIG);\n                sc.start();\n                ApplicationId applicationId \u003d sc.actionCreate(service);\n                sc.close();\n                return applicationId;\n              }\n            });\n        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return formatResponse(Status.ACCEPTED, serviceStatus);\n    } catch (AccessControlException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n    } catch (IllegalArgumentException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,58 @@\n-  public Response createService(Service service) {\n-    LOG.info(\"POST: createService \u003d {}\", service);\n+  public Response createService(@Context HttpServletRequest request,\n+      Service service) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n-      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n-      LOG.info(\"Successfully created service \" + service.getName()\n-          + \" applicationId \u003d \" + applicationId);\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n+      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n+        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws YarnException, IOException {\n+            ServiceClient sc \u003d getServiceClient();\n+            sc.init(YARN_CONFIG);\n+            sc.start();\n+            sc.actionBuild(service);\n+            sc.close();\n+            return null;\n+          }\n+        });\n+        serviceStatus.setDiagnostics(\"Service \"+service.getName() +\n+            \" saved.\");\n+      } else {\n+        ApplicationId applicationId \u003d ugi\n+            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n+              @Override\n+              public ApplicationId run() throws IOException, YarnException {\n+                ServiceClient sc \u003d getServiceClient();\n+                sc.init(YARN_CONFIG);\n+                sc.start();\n+                ApplicationId applicationId \u003d sc.actionCreate(service);\n+                sc.close();\n+                return applicationId;\n+              }\n+            });\n+        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n+      }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n-      return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n-    } catch (IllegalArgumentException e) {\n+      return formatResponse(Status.ACCEPTED, serviceStatus);\n+    } catch (AccessControlException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n-      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n-          .build();\n-    } catch (Exception e) {\n-      String message \u003d \"Failed to create service \" + service.getName();\n+      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n+    } catch (IllegalArgumentException e) {\n+      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      String message \u003d \"Failed to create service \" + service.getName()\n+          + \": {}\";\n       LOG.error(message, e);\n-      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      String message \u003d \"Failed to create service \" + service.getName()\n+          + \": {}\";\n+      LOG.error(message, e);\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response createService(@Context HttpServletRequest request,\n      Service service) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            sc.actionBuild(service);\n            sc.close();\n            return null;\n          }\n        });\n        serviceStatus.setDiagnostics(\"Service \"+service.getName() +\n            \" saved.\");\n      } else {\n        ApplicationId applicationId \u003d ugi\n            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n              @Override\n              public ApplicationId run() throws IOException, YarnException {\n                ServiceClient sc \u003d getServiceClient();\n                sc.init(YARN_CONFIG);\n                sc.start();\n                ApplicationId applicationId \u003d sc.actionCreate(service);\n                sc.close();\n                return applicationId;\n              }\n            });\n        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return formatResponse(Status.ACCEPTED, serviceStatus);\n    } catch (AccessControlException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n    } catch (IllegalArgumentException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "[service-Service]",
            "newValue": "[request-HttpServletRequest(annotations-@Context), service-Service]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
          "commitDate": "23/01/18 5:54 PM",
          "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "05/01/18 6:25 PM",
          "commitNameOld": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,58 @@\n-  public Response createService(Service service) {\n-    LOG.info(\"POST: createService \u003d {}\", service);\n+  public Response createService(@Context HttpServletRequest request,\n+      Service service) {\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n-      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n-      LOG.info(\"Successfully created service \" + service.getName()\n-          + \" applicationId \u003d \" + applicationId);\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n+      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n+        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws YarnException, IOException {\n+            ServiceClient sc \u003d getServiceClient();\n+            sc.init(YARN_CONFIG);\n+            sc.start();\n+            sc.actionBuild(service);\n+            sc.close();\n+            return null;\n+          }\n+        });\n+        serviceStatus.setDiagnostics(\"Service \"+service.getName() +\n+            \" saved.\");\n+      } else {\n+        ApplicationId applicationId \u003d ugi\n+            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n+              @Override\n+              public ApplicationId run() throws IOException, YarnException {\n+                ServiceClient sc \u003d getServiceClient();\n+                sc.init(YARN_CONFIG);\n+                sc.start();\n+                ApplicationId applicationId \u003d sc.actionCreate(service);\n+                sc.close();\n+                return applicationId;\n+              }\n+            });\n+        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n+      }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n-      return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n-    } catch (IllegalArgumentException e) {\n+      return formatResponse(Status.ACCEPTED, serviceStatus);\n+    } catch (AccessControlException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n-      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n-          .build();\n-    } catch (Exception e) {\n-      String message \u003d \"Failed to create service \" + service.getName();\n+      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n+    } catch (IllegalArgumentException e) {\n+      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      String message \u003d \"Failed to create service \" + service.getName()\n+          + \": {}\";\n       LOG.error(message, e);\n-      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n-      return Response.status(Status.INTERNAL_SERVER_ERROR)\n-          .entity(serviceStatus).build();\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      String message \u003d \"Failed to create service \" + service.getName()\n+          + \": {}\";\n+      LOG.error(message, e);\n+      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response createService(@Context HttpServletRequest request,\n      Service service) {\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      LOG.info(\"POST: createService \u003d {} user \u003d {}\", service, ugi);\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        ugi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws YarnException, IOException {\n            ServiceClient sc \u003d getServiceClient();\n            sc.init(YARN_CONFIG);\n            sc.start();\n            sc.actionBuild(service);\n            sc.close();\n            return null;\n          }\n        });\n        serviceStatus.setDiagnostics(\"Service \"+service.getName() +\n            \" saved.\");\n      } else {\n        ApplicationId applicationId \u003d ugi\n            .doAs(new PrivilegedExceptionAction\u003cApplicationId\u003e() {\n              @Override\n              public ApplicationId run() throws IOException, YarnException {\n                ServiceClient sc \u003d getServiceClient();\n                sc.init(YARN_CONFIG);\n                sc.start();\n                ApplicationId applicationId \u003d sc.actionCreate(service);\n                sc.close();\n                return applicationId;\n              }\n            });\n        serviceStatus.setDiagnostics(\"Application ID: \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return formatResponse(Status.ACCEPTED, serviceStatus);\n    } catch (AccessControlException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return formatResponse(Status.FORBIDDEN, e.getCause().getMessage());\n    } catch (IllegalArgumentException e) {\n      return formatResponse(Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR, e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      String message \u003d \"Failed to create service \" + service.getName()\n          + \": {}\";\n      LOG.error(message, e);\n      return formatResponse(Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "836e3c45e8232fc4c8c795c0f93d2f3d7353f392": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7540.  Route YARN service CLI function through YARN Service API. (Contributed by Eric Yang)\"\n\nThis reverts commit 438c1d333ebc0a3071bb556532ed959a4bd1e6d6.\n",
      "commitDate": "05/01/18 6:25 PM",
      "commitName": "836e3c45e8232fc4c8c795c0f93d2f3d7353f392",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/12/17 4:29 PM",
      "commitNameOld": "438c1d333ebc0a3071bb556532ed959a4bd1e6d6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,24 @@\n   public Response createService(Service service) {\n     LOG.info(\"POST: createService \u003d {}\", service);\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n-      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n-        SERVICE_CLIENT.actionBuild(service);\n-      } else {\n-        ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n-        LOG.info(\"Successfully created service \" + service.getName()\n+      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n+      LOG.info(\"Successfully created service \" + service.getName()\n           + \" applicationId \u003d \" + applicationId);\n-      }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n       return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n     } catch (IllegalArgumentException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n           .build();\n     } catch (Exception e) {\n       String message \u003d \"Failed to create service \" + service.getName();\n       LOG.error(message, e);\n       serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n           .entity(serviceStatus).build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(Service service) {\n    LOG.info(\"POST: createService \u003d {}\", service);\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n      LOG.info(\"Successfully created service \" + service.getName()\n          + \" applicationId \u003d \" + applicationId);\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      String message \u003d \"Failed to create service \" + service.getName();\n      LOG.error(message, e);\n      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "438c1d333ebc0a3071bb556532ed959a4bd1e6d6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7540.  Route YARN service CLI function through YARN Service API. (Contributed by Eric Yang)\n",
      "commitDate": "13/12/17 4:29 PM",
      "commitName": "438c1d333ebc0a3071bb556532ed959a4bd1e6d6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.18,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n   public Response createService(Service service) {\n     LOG.info(\"POST: createService \u003d {}\", service);\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n-      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n-      LOG.info(\"Successfully created service \" + service.getName()\n+      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n+        SERVICE_CLIENT.actionBuild(service);\n+      } else {\n+        ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n+        LOG.info(\"Successfully created service \" + service.getName()\n           + \" applicationId \u003d \" + applicationId);\n+      }\n       serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n       return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n     } catch (IllegalArgumentException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n           .build();\n     } catch (Exception e) {\n       String message \u003d \"Failed to create service \" + service.getName();\n       LOG.error(message, e);\n       serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n           .entity(serviceStatus).build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(Service service) {\n    LOG.info(\"POST: createService \u003d {}\", service);\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      if(service.getState()\u003d\u003dServiceState.STOPPED) {\n        SERVICE_CLIENT.actionBuild(service);\n      } else {\n        ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n        LOG.info(\"Successfully created service \" + service.getName()\n          + \" applicationId \u003d \" + applicationId);\n      }\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      String message \u003d \"Failed to create service \" + service.getName();\n      LOG.error(message, e);\n      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "7dd4490a44442bd2b682a5f1a8605e6f6c053037": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7073. Yarn native services rest API documentation. Contributed by Gour Saha\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "7dd4490a44442bd2b682a5f1a8605e6f6c053037",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public Response createService(Service service) {\n     LOG.info(\"POST: createService \u003d {}\", service);\n     ServiceStatus serviceStatus \u003d new ServiceStatus();\n     try {\n       ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n       LOG.info(\"Successfully created service \" + service.getName()\n           + \" applicationId \u003d \" + applicationId);\n-      serviceStatus.setState(ServiceState.ACCEPTED);\n+      serviceStatus.setState(ACCEPTED);\n       serviceStatus.setUri(\n           CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n               .getName());\n-      return Response.status(Status.CREATED).entity(serviceStatus).build();\n+      return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n     } catch (IllegalArgumentException e) {\n       serviceStatus.setDiagnostics(e.getMessage());\n       return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n           .build();\n     } catch (Exception e) {\n       String message \u003d \"Failed to create service \" + service.getName();\n       LOG.error(message, e);\n       serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n       return Response.status(Status.INTERNAL_SERVER_ERROR)\n           .entity(serviceStatus).build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(Service service) {\n    LOG.info(\"POST: createService \u003d {}\", service);\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n      LOG.info(\"Successfully created service \" + service.getName()\n          + \" applicationId \u003d \" + applicationId);\n      serviceStatus.setState(ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return Response.status(Status.ACCEPTED).entity(serviceStatus).build();\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      String message \u003d \"Failed to create service \" + service.getName();\n      LOG.error(message, e);\n      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,24 @@\n+  public Response createService(Service service) {\n+    LOG.info(\"POST: createService \u003d {}\", service);\n+    ServiceStatus serviceStatus \u003d new ServiceStatus();\n+    try {\n+      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n+      LOG.info(\"Successfully created service \" + service.getName()\n+          + \" applicationId \u003d \" + applicationId);\n+      serviceStatus.setState(ServiceState.ACCEPTED);\n+      serviceStatus.setUri(\n+          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n+              .getName());\n+      return Response.status(Status.CREATED).entity(serviceStatus).build();\n+    } catch (IllegalArgumentException e) {\n+      serviceStatus.setDiagnostics(e.getMessage());\n+      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n+          .build();\n+    } catch (Exception e) {\n+      String message \u003d \"Failed to create service \" + service.getName();\n+      LOG.error(message, e);\n+      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n+      return Response.status(Status.INTERNAL_SERVER_ERROR)\n+          .entity(serviceStatus).build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response createService(Service service) {\n    LOG.info(\"POST: createService \u003d {}\", service);\n    ServiceStatus serviceStatus \u003d new ServiceStatus();\n    try {\n      ApplicationId applicationId \u003d SERVICE_CLIENT.actionCreate(service);\n      LOG.info(\"Successfully created service \" + service.getName()\n          + \" applicationId \u003d \" + applicationId);\n      serviceStatus.setState(ServiceState.ACCEPTED);\n      serviceStatus.setUri(\n          CONTEXT_ROOT + SERVICE_ROOT_PATH + \"/\" + service\n              .getName());\n      return Response.status(Status.CREATED).entity(serviceStatus).build();\n    } catch (IllegalArgumentException e) {\n      serviceStatus.setDiagnostics(e.getMessage());\n      return Response.status(Status.BAD_REQUEST).entity(serviceStatus)\n          .build();\n    } catch (Exception e) {\n      String message \u003d \"Failed to create service \" + service.getName();\n      LOG.error(message, e);\n      serviceStatus.setDiagnostics(message + \": \" + e.getMessage());\n      return Response.status(Status.INTERNAL_SERVER_ERROR)\n          .entity(serviceStatus).build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}