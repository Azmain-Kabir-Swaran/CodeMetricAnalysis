{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationStateStoreService.java",
  "functionName": "registerAndInitializeHeartbeat",
  "functionId": "registerAndInitializeHeartbeat",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/federation/FederationStateStoreService.java",
  "functionStartLine": 171,
  "functionEndLine": 202,
  "numCommitsSeen": 2,
  "timeTaken": 1460,
  "changeHistory": [
    "78032e51d90a42a3600ad942eecf1c3f787759d7",
    "94a24567d65469091c8b521987dc2003d0327159"
  ],
  "changeHistoryShort": {
    "78032e51d90a42a3600ad942eecf1c3f787759d7": "Ybodychange",
    "94a24567d65469091c8b521987dc2003d0327159": "Yintroduced"
  },
  "changeHistoryDetails": {
    "78032e51d90a42a3600ad942eecf1c3f787759d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5905. Update the RM webapp host that is reported as part of Federation membership to current primary RM\u0027s IP.\n\n(cherry picked from commit e0f0e7afed51aac4ac9093ac362f6ce64601884d)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "78032e51d90a42a3600ad942eecf1c3f787759d7",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private void registerAndInitializeHeartbeat() {\n     String clientRMAddress \u003d\n         getServiceAddress(rmContext.getClientRMService().getBindAddress());\n     String amRMAddress \u003d getServiceAddress(\n         rmContext.getApplicationMasterService().getBindAddress());\n     String rmAdminAddress \u003d getServiceAddress(\n         config.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_ADMIN_PORT));\n-    String webAppAddress \u003d\n-        WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(config);\n+    String webAppAddress \u003d getServiceAddress(NetUtils\n+        .createSocketAddr(WebAppUtils.getRMWebAppURLWithScheme(config)));\n \n     SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n         amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n         SubClusterState.SC_NEW, ResourceManager.getClusterTimeStamp(), \"\");\n     try {\n       registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\n       LOG.info(\"Successfully registered for federation subcluster: {}\",\n           subClusterInfo);\n     } catch (Exception e) {\n       throw new YarnRuntimeException(\n           \"Failed to register Federation membership with the StateStore\", e);\n     }\n     stateStoreHeartbeat \u003d new FederationStateStoreHeartbeat(subClusterId,\n         stateStoreClient, rmContext.getScheduler());\n     scheduledExecutorService \u003d\n         HadoopExecutors.newSingleThreadScheduledExecutor();\n     scheduledExecutorService.scheduleWithFixedDelay(stateStoreHeartbeat,\n         heartbeatInterval, heartbeatInterval, TimeUnit.SECONDS);\n     LOG.info(\"Started federation membership heartbeat with interval: {}\",\n         heartbeatInterval);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerAndInitializeHeartbeat() {\n    String clientRMAddress \u003d\n        getServiceAddress(rmContext.getClientRMService().getBindAddress());\n    String amRMAddress \u003d getServiceAddress(\n        rmContext.getApplicationMasterService().getBindAddress());\n    String rmAdminAddress \u003d getServiceAddress(\n        config.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_ADMIN_PORT));\n    String webAppAddress \u003d getServiceAddress(NetUtils\n        .createSocketAddr(WebAppUtils.getRMWebAppURLWithScheme(config)));\n\n    SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n        amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n        SubClusterState.SC_NEW, ResourceManager.getClusterTimeStamp(), \"\");\n    try {\n      registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\n      LOG.info(\"Successfully registered for federation subcluster: {}\",\n          subClusterInfo);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n          \"Failed to register Federation membership with the StateStore\", e);\n    }\n    stateStoreHeartbeat \u003d new FederationStateStoreHeartbeat(subClusterId,\n        stateStoreClient, rmContext.getScheduler());\n    scheduledExecutorService \u003d\n        HadoopExecutors.newSingleThreadScheduledExecutor();\n    scheduledExecutorService.scheduleWithFixedDelay(stateStoreHeartbeat,\n        heartbeatInterval, heartbeatInterval, TimeUnit.SECONDS);\n    LOG.info(\"Started federation membership heartbeat with interval: {}\",\n        heartbeatInterval);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/federation/FederationStateStoreService.java",
      "extendedDetails": {}
    },
    "94a24567d65469091c8b521987dc2003d0327159": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3671. Integrate Federation services with ResourceManager. Contributed by Subru Krishnan\n\n(cherry picked from commit 8573c286e27623155c715a632d56a68f23523c72)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+  private void registerAndInitializeHeartbeat() {\n+    String clientRMAddress \u003d\n+        getServiceAddress(rmContext.getClientRMService().getBindAddress());\n+    String amRMAddress \u003d getServiceAddress(\n+        rmContext.getApplicationMasterService().getBindAddress());\n+    String rmAdminAddress \u003d getServiceAddress(\n+        config.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_ADMIN_PORT));\n+    String webAppAddress \u003d\n+        WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(config);\n+\n+    SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n+        amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n+        SubClusterState.SC_NEW, ResourceManager.getClusterTimeStamp(), \"\");\n+    try {\n+      registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\n+      LOG.info(\"Successfully registered for federation subcluster: {}\",\n+          subClusterInfo);\n+    } catch (Exception e) {\n+      throw new YarnRuntimeException(\n+          \"Failed to register Federation membership with the StateStore\", e);\n+    }\n+    stateStoreHeartbeat \u003d new FederationStateStoreHeartbeat(subClusterId,\n+        stateStoreClient, rmContext.getScheduler());\n+    scheduledExecutorService \u003d\n+        HadoopExecutors.newSingleThreadScheduledExecutor();\n+    scheduledExecutorService.scheduleWithFixedDelay(stateStoreHeartbeat,\n+        heartbeatInterval, heartbeatInterval, TimeUnit.SECONDS);\n+    LOG.info(\"Started federation membership heartbeat with interval: {}\",\n+        heartbeatInterval);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerAndInitializeHeartbeat() {\n    String clientRMAddress \u003d\n        getServiceAddress(rmContext.getClientRMService().getBindAddress());\n    String amRMAddress \u003d getServiceAddress(\n        rmContext.getApplicationMasterService().getBindAddress());\n    String rmAdminAddress \u003d getServiceAddress(\n        config.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_ADMIN_PORT));\n    String webAppAddress \u003d\n        WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(config);\n\n    SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n        amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n        SubClusterState.SC_NEW, ResourceManager.getClusterTimeStamp(), \"\");\n    try {\n      registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\n      LOG.info(\"Successfully registered for federation subcluster: {}\",\n          subClusterInfo);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\n          \"Failed to register Federation membership with the StateStore\", e);\n    }\n    stateStoreHeartbeat \u003d new FederationStateStoreHeartbeat(subClusterId,\n        stateStoreClient, rmContext.getScheduler());\n    scheduledExecutorService \u003d\n        HadoopExecutors.newSingleThreadScheduledExecutor();\n    scheduledExecutorService.scheduleWithFixedDelay(stateStoreHeartbeat,\n        heartbeatInterval, heartbeatInterval, TimeUnit.SECONDS);\n    LOG.info(\"Started federation membership heartbeat with interval: {}\",\n        heartbeatInterval);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/federation/FederationStateStoreService.java"
    }
  }
}