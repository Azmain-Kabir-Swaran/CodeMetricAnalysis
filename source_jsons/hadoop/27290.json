{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getFlowRuns",
  "functionId": "getFlowRuns___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__uId-String(annotations-@PathParam(\"uid\"))__limit-String(annotations-@QueryParam(\"limit\"))__createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\"))__createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\"))__metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\"))__fields-String(annotations-@QueryParam(\"fields\"))__fromId-String(annotations-@QueryParam(\"fromid\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 1210,
  "functionEndLine": 1261,
  "numCommitsSeen": 94,
  "timeTaken": 7003,
  "changeHistory": [
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
    "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
    "02a9710a099fc9572122d87dd3e90c78522f5836",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "8ef546c1ee9fce0b171813547253374d268566ba",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
    "d014f2ffd24c1aaebda7503ce0e5a81334a5f266"
  ],
  "changeHistoryShort": {
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": "Ybodychange",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": "Ybodychange",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": "Ybodychange",
    "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd": "Ymultichange(Yparameterchange,Ybodychange)",
    "02a9710a099fc9572122d87dd3e90c78522f5836": "Ybodychange",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": "Ybodychange",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": "Ymultichange(Yparameterchange,Ybodychange)",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Ymultichange(Yparameterchange,Ybodychange)",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Ybodychange",
    "8ef546c1ee9fce0b171813547253374d268566ba": "Ymultichange(Yparameterchange,Ybodychange)",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "d014f2ffd24c1aaebda7503ce0e5a81334a5f266": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       // TODO to be removed or modified once ACL story is played\n       checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n               null, null, null, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, fields, null, null, null));\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or fromId\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntitiesLatency(latency, succeeded);\n+      LOG.info(\"Processed URL \" + url +\n+          \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n-    LOG.info(\"Processed URL \" + url +\n-        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      // TODO to be removed or modified once ACL story is played\n      checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null, null, null));\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or fromId\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8455. Add basic ACL check for all ATS v2 REST APIs. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/06/18 10:02 AM",
      "commitName": "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/06/18 8:59 PM",
      "commitNameOld": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 27.54,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n+      // TODO to be removed or modified once ACL story is played\n+      checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n               null, null, null, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, fields, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or fromId\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      // TODO to be removed or modified once ACL story is played\n      checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or fromId\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n               null, null, null, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, metricsToRetrieve, fields, null));\n+          null, metricsToRetrieve, fields, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or fromId\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or fromId\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n-              null, null, null, null, fromId),\n+              null, null, null, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, fields, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or fromId\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or fromId\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6064. Support fromId for flowRuns and flow/flowRun apps REST API\u0027s (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6064. Support fromId for flowRuns and flow/flowRun apps REST API\u0027s (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "02a9710a099fc9572122d87dd3e90c78522f5836",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,46 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n-              null, null, null, null, null),\n+              null, null, null, null, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, fields, null));\n     } catch (Exception e) {\n-      handleException(e, url, startTime, \"createdTime start/end or limit\");\n+      handleException(e, url, startTime,\n+          \"createdTime start/end or limit or fromId\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, null, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or fromId\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6064. Support fromId for flowRuns and flow/flowRun apps REST API\u0027s (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "02a9710a099fc9572122d87dd3e90c78522f5836",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,46 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n-              null, null, null, null, null),\n+              null, null, null, null, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, fields, null));\n     } catch (Exception e) {\n-      handleException(e, url, startTime, \"createdTime start/end or limit\");\n+      handleException(e, url, startTime,\n+          \"createdTime start/end or limit or fromId\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, null, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or fromId\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "02a9710a099fc9572122d87dd3e90c78522f5836": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n-          null, null, null),\n+              null, null, null, null, null),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, fields, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n              null, null, null, null, null),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n           null, null, null),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, metricsToRetrieve, fields));\n+          null, metricsToRetrieve, fields, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n          null, null, null),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n           null, null, null),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, null, fields));\n+          null, metricsToRetrieve, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n          null, null, null),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, null, null, null,\n           null, null, null),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, null, fields));\n+          null, metricsToRetrieve, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n          null, null, null),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n-      entities \u003d timelineReaderManager.getEntities(context.getUserId(),\n-          context.getClusterId(), context.getFlowName(), null, null,\n-          TimelineEntityType.YARN_FLOW_RUN.toString(),\n-          TimelineReaderWebServicesUtils.parseLongStr(limit),\n-          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n-          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n-          null, null, null, null, null, null, TimelineReaderWebServicesUtils.\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n+      entities \u003d timelineReaderManager.getEntities(context,\n+          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n+          limit, createdTimeStart, createdTimeEnd, null, null, null,\n+          null, null, null),\n+          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n+          null, null, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, null, null, null,\n          null, null, null),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, null, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"userid\") String userId,\n-      @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowname\") String flowName,\n+      @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n-      entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n-          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n-          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd),\n-          null, null, null, null, null, null,\n+      TimelineReaderContext context \u003d\n+          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n+      if (context \u003d\u003d null) {\n+        throw new BadRequestException(\"Incorrect UID \" +  uId);\n+      }\n+      entities \u003d timelineReaderManager.getEntities(context.getUserId(),\n+          context.getClusterId(), context.getFlowName(), null, null,\n+          TimelineEntityType.YARN_FLOW_RUN.toString(),\n+          TimelineReaderWebServicesUtils.parseLongStr(limit),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n+          null, null, null, null, null, null, TimelineReaderWebServicesUtils.\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      entities \u003d timelineReaderManager.getEntities(context.getUserId(),\n          context.getClusterId(), context.getFlowName(), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(),\n          TimelineReaderWebServicesUtils.parseLongStr(limit),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n          null, null, null, null, null, null, TimelineReaderWebServicesUtils.\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowName-String(annotations-@PathParam(\"flowname\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"userid\") String userId,\n-      @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowname\") String flowName,\n+      @PathParam(\"uid\") String uId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n-      entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n-          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n-          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd),\n-          null, null, null, null, null, null,\n+      TimelineReaderContext context \u003d\n+          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n+      if (context \u003d\u003d null) {\n+        throw new BadRequestException(\"Incorrect UID \" +  uId);\n+      }\n+      entities \u003d timelineReaderManager.getEntities(context.getUserId(),\n+          context.getClusterId(), context.getFlowName(), null, null,\n+          TimelineEntityType.YARN_FLOW_RUN.toString(),\n+          TimelineReaderWebServicesUtils.parseLongStr(limit),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n+          null, null, null, null, null, null, TimelineReaderWebServicesUtils.\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOW_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      entities \u003d timelineReaderManager.getEntities(context.getUserId(),\n          context.getClusterId(), context.getFlowName(), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(),\n          TimelineReaderWebServicesUtils.parseLongStr(limit),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n          null, null, null, null, null, null, TimelineReaderWebServicesUtils.\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowname\") String flowName,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n           parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n-          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n-          null, null, null, null, null, null, null,\n+          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd),\n+          null, null, null, null, null, null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowname\") String flowName,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd),\n          null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "8ef546c1ee9fce0b171813547253374d268566ba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowid\") String flowId,\n+      @PathParam(\"flowname\") String flowName,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n+          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n           parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n           null, null, null, null, null, null, null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowname\") String flowName,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n          null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowName-String(annotations-@PathParam(\"flowname\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowid\") String flowId,\n+      @PathParam(\"flowname\") String flowName,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n+          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n           parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n           null, null, null, null, null, null, null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowname\") String flowName,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowName), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n          null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n-      @QueryParam(\"userid\") String userId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n-          null, null, TimelineEntityType.YARN_FLOW_RUN.toString(),\n-          parseLongStr(limit), parseLongStr(createdTimeStart),\n-          parseLongStr(createdTimeEnd), null, null, null, null, null, null,\n-          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n+          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n+          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n+          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n+          null, null, null, null, null, null, null,\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n          null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), userId-String(annotations-@QueryParam(\"userid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n-      @QueryParam(\"userid\") String userId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n-          null, null, TimelineEntityType.YARN_FLOW_RUN.toString(),\n-          parseLongStr(limit), parseLongStr(createdTimeStart),\n-          parseLongStr(createdTimeEnd), null, null, null, null, null, null,\n-          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n+          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n+          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n+          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n+          null, null, null, null, null, null, null,\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n          null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,37 @@\n   public Set\u003cTimelineEntity\u003e getFlowRuns(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n-      @QueryParam(\"userid\") String userId,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       entities \u003d timelineReaderManager.getEntities(\n-          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n-          null, null, TimelineEntityType.YARN_FLOW_RUN.toString(),\n-          parseLongStr(limit), parseLongStr(createdTimeStart),\n-          parseLongStr(createdTimeEnd), null, null, null, null, null, null,\n-          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n+          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n+          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n+          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n+          null, null, null, null, null, null, null,\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"createdTime start/end or limit\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseStr(userId), parseStr(clusterId), parseStr(flowId), null, null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), parseLongStr(limit),\n          parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), null,\n          null, null, null, null, null, null, null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), userId-String(annotations-@QueryParam(\"userid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        }
      ]
    },
    "d014f2ffd24c1aaebda7503ce0e5a81334a5f266": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4237 Support additional queries for ATSv2 Web UI. Contributed by\nVarun Saxena.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
      "commitAuthor": "Li Lu",
      "diff": "@@ -0,0 +1,37 @@\n+  public Set\u003cTimelineEntity\u003e getFlowRuns(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @PathParam(\"flowid\") String flowId,\n+      @QueryParam(\"userid\") String userId,\n+      @QueryParam(\"limit\") String limit,\n+      @QueryParam(\"createdtimestart\") String createdTimeStart,\n+      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n+      @QueryParam(\"fields\") String fields) {\n+    String url \u003d req.getRequestURI() +\n+        (req.getQueryString() \u003d\u003d null ? \"\" :\n+            QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    Set\u003cTimelineEntity\u003e entities \u003d null;\n+    try {\n+      entities \u003d timelineReaderManager.getEntities(\n+          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n+          null, null, TimelineEntityType.YARN_FLOW_RUN.toString(),\n+          parseLongStr(limit), parseLongStr(createdTimeStart),\n+          parseLongStr(createdTimeEnd), null, null, null, null, null, null,\n+          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n+    } catch (Exception e) {\n+      handleException(e, url, startTime, \"createdTime start/end or limit\");\n+    }\n+    long endTime \u003d Time.monotonicNow();\n+    if (entities \u003d\u003d null) {\n+      entities \u003d Collections.emptySet();\n+    }\n+    LOG.info(\"Processed URL \" + url +\n+        \" (Took \" + (endTime - startTime) + \" ms.)\");\n+    return entities;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getFlowRuns(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      entities \u003d timelineReaderManager.getEntities(\n          parseUser(callerUGI, userId), parseStr(clusterId), parseStr(flowId),\n          null, null, TimelineEntityType.YARN_FLOW_RUN.toString(),\n          parseLongStr(limit), parseLongStr(createdTimeStart),\n          parseLongStr(createdTimeEnd), null, null, null, null, null, null,\n          null, null, parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"createdTime start/end or limit\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}