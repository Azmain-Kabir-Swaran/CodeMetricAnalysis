{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "op",
  "functionId": "op___path-String__record-ServiceRecord__command-RegistryCommand",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 1599,
  "functionEndLine": 1629,
  "numCommitsSeen": 15,
  "timeTaken": 2047,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "92734800844b93bb19f3c0fca6be88d2801f7b1b",
    "a22256bd409c4a96c6495e203d71331a8aed943d",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "92734800844b93bb19f3c0fca6be88d2801f7b1b": "Ybodychange",
    "a22256bd409c4a96c6495e203d71331a8aed943d": "Ybodychange",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void op(String path, ServiceRecord record, RegistryCommand command)\n      throws IOException {\n    ServiceRecordProcessor processor;\n    try {\n      String yarnPersistanceValue \u003d record.get(\n                                    YarnRegistryAttributes.YARN_PERSISTENCE);\n      if (yarnPersistanceValue !\u003d null) {\n        if (yarnPersistanceValue.equals(CONTAINER)) {\n          // container registration.  the logic to identify and create the\n          // container entry needs to be enhanced/more accurate and associate\n          // to correct host\n          processor \u003d\n               new ContainerServiceRecordProcessor(record, path, domainName,\n                   this);\n        } else {\n          LOG.debug(\"Creating ApplicationServiceRecordProcessor for {}\",\n                    yarnPersistanceValue);\n          processor \u003d\n               new ApplicationServiceRecordProcessor(record, path, domainName,\n                   this);\n        }\n        processor.manageDNSRecords(command);\n      } else {\n        LOG.warn(\"Yarn Registry record {} does not contain {} attribute \",\n                  record.toString(), YarnRegistryAttributes.YARN_PERSISTENCE);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
      }
    },
    "92734800844b93bb19f3c0fca6be88d2801f7b1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7198. Add jsvc support for RegistryDNS. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "92734800844b93bb19f3c0fca6be88d2801f7b1b",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "c70e5df100ba800f7170f44f63d388ae056cb74d",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void op(String path, ServiceRecord record, RegistryCommand command)\n       throws IOException {\n     ServiceRecordProcessor processor;\n     try {\n       String yarnPersistanceValue \u003d record.get(\n                                     YarnRegistryAttributes.YARN_PERSISTENCE);\n       if (yarnPersistanceValue !\u003d null) {\n         if (yarnPersistanceValue.equals(CONTAINER)) {\n           // container registration.  the logic to identify and create the\n           // container entry needs to be enhanced/more accurate and associate\n           // to correct host\n           processor \u003d\n                new ContainerServiceRecordProcessor(record, path, domainName,\n                    this);\n         } else {\n           LOG.debug(\"Creating ApplicationServiceRecordProcessor for {}\",\n                     yarnPersistanceValue);\n           processor \u003d\n                new ApplicationServiceRecordProcessor(record, path, domainName,\n                    this);\n         }\n         processor.manageDNSRecords(command);\n       } else {\n-        LOG.warn(\"Yarn Resgistry record {} does not contain {} attribute \",\n+        LOG.warn(\"Yarn Registry record {} does not contain {} attribute \",\n                   record.toString(), YarnRegistryAttributes.YARN_PERSISTENCE);\n       }\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void op(String path, ServiceRecord record, RegistryCommand command)\n      throws IOException {\n    ServiceRecordProcessor processor;\n    try {\n      String yarnPersistanceValue \u003d record.get(\n                                    YarnRegistryAttributes.YARN_PERSISTENCE);\n      if (yarnPersistanceValue !\u003d null) {\n        if (yarnPersistanceValue.equals(CONTAINER)) {\n          // container registration.  the logic to identify and create the\n          // container entry needs to be enhanced/more accurate and associate\n          // to correct host\n          processor \u003d\n               new ContainerServiceRecordProcessor(record, path, domainName,\n                   this);\n        } else {\n          LOG.debug(\"Creating ApplicationServiceRecordProcessor for {}\",\n                    yarnPersistanceValue);\n          processor \u003d\n               new ApplicationServiceRecordProcessor(record, path, domainName,\n                   this);\n        }\n        processor.manageDNSRecords(command);\n      } else {\n        LOG.warn(\"Yarn Registry record {} does not contain {} attribute \",\n                  record.toString(), YarnRegistryAttributes.YARN_PERSISTENCE);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "a22256bd409c4a96c6495e203d71331a8aed943d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6544. Add Null check RegistryDNS service while parsing registry records. Contributed by Karam Singh\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a22256bd409c4a96c6495e203d71331a8aed943d",
      "commitAuthor": "Gour Saha",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "7d685f2fb3ca8fa23caed29ed813c1c979abf718",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,31 @@\n   private void op(String path, ServiceRecord record, RegistryCommand command)\n       throws IOException {\n     ServiceRecordProcessor processor;\n     try {\n-      if (record.get(YarnRegistryAttributes.YARN_PERSISTENCE)\n-          .equals(CONTAINER)) {\n-        // container registration.  the logic to identify and create the\n-        // container entry needs to be enhanced/more accurate and associate to\n-        // correct host\n-        processor \u003d\n-            new ContainerServiceRecordProcessor(record, path, domainName, this);\n+      String yarnPersistanceValue \u003d record.get(\n+                                    YarnRegistryAttributes.YARN_PERSISTENCE);\n+      if (yarnPersistanceValue !\u003d null) {\n+        if (yarnPersistanceValue.equals(CONTAINER)) {\n+          // container registration.  the logic to identify and create the\n+          // container entry needs to be enhanced/more accurate and associate\n+          // to correct host\n+          processor \u003d\n+               new ContainerServiceRecordProcessor(record, path, domainName,\n+                   this);\n+        } else {\n+          LOG.debug(\"Creating ApplicationServiceRecordProcessor for {}\",\n+                    yarnPersistanceValue);\n+          processor \u003d\n+               new ApplicationServiceRecordProcessor(record, path, domainName,\n+                   this);\n+        }\n+        processor.manageDNSRecords(command);\n       } else {\n-        processor \u003d\n-            new ApplicationServiceRecordProcessor(record, path, domainName,\n-                this);\n+        LOG.warn(\"Yarn Resgistry record {} does not contain {} attribute \",\n+                  record.toString(), YarnRegistryAttributes.YARN_PERSISTENCE);\n       }\n-      processor.manageDNSRecords(command);\n     } catch (Exception e) {\n       throw new IOException(e);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void op(String path, ServiceRecord record, RegistryCommand command)\n      throws IOException {\n    ServiceRecordProcessor processor;\n    try {\n      String yarnPersistanceValue \u003d record.get(\n                                    YarnRegistryAttributes.YARN_PERSISTENCE);\n      if (yarnPersistanceValue !\u003d null) {\n        if (yarnPersistanceValue.equals(CONTAINER)) {\n          // container registration.  the logic to identify and create the\n          // container entry needs to be enhanced/more accurate and associate\n          // to correct host\n          processor \u003d\n               new ContainerServiceRecordProcessor(record, path, domainName,\n                   this);\n        } else {\n          LOG.debug(\"Creating ApplicationServiceRecordProcessor for {}\",\n                    yarnPersistanceValue);\n          processor \u003d\n               new ApplicationServiceRecordProcessor(record, path, domainName,\n                   this);\n        }\n        processor.manageDNSRecords(command);\n      } else {\n        LOG.warn(\"Yarn Resgistry record {} does not contain {} attribute \",\n                  record.toString(), YarnRegistryAttributes.YARN_PERSISTENCE);\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,22 @@\n+  private void op(String path, ServiceRecord record, RegistryCommand command)\n+      throws IOException {\n+    ServiceRecordProcessor processor;\n+    try {\n+      if (record.get(YarnRegistryAttributes.YARN_PERSISTENCE)\n+          .equals(CONTAINER)) {\n+        // container registration.  the logic to identify and create the\n+        // container entry needs to be enhanced/more accurate and associate to\n+        // correct host\n+        processor \u003d\n+            new ContainerServiceRecordProcessor(record, path, domainName, this);\n+      } else {\n+        processor \u003d\n+            new ApplicationServiceRecordProcessor(record, path, domainName,\n+                this);\n+      }\n+      processor.manageDNSRecords(command);\n+    } catch (Exception e) {\n+      throw new IOException(e);\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void op(String path, ServiceRecord record, RegistryCommand command)\n      throws IOException {\n    ServiceRecordProcessor processor;\n    try {\n      if (record.get(YarnRegistryAttributes.YARN_PERSISTENCE)\n          .equals(CONTAINER)) {\n        // container registration.  the logic to identify and create the\n        // container entry needs to be enhanced/more accurate and associate to\n        // correct host\n        processor \u003d\n            new ContainerServiceRecordProcessor(record, path, domainName, this);\n      } else {\n        processor \u003d\n            new ApplicationServiceRecordProcessor(record, path, domainName,\n                this);\n      }\n      processor.manageDNSRecords(command);\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}