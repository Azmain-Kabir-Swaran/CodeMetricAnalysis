{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceMappingManager.java",
  "functionName": "assignDevices",
  "functionId": "assignDevices___resourceName-String__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
  "functionStartLine": 122,
  "functionEndLine": 158,
  "numCommitsSeen": 5,
  "timeTaken": 646,
  "changeHistory": [
    "579ef4be063745c5211127eca83a393ceddc8b79"
  ],
  "changeHistoryShort": {
    "579ef4be063745c5211127eca83a393ceddc8b79": "Yintroduced"
  },
  "changeHistoryDetails": {
    "579ef4be063745c5211127eca83a393ceddc8b79": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8882. [YARN-8851] Add a shared device mapping manager (scheduler) for device plugins. (Zhankun Tang via wangda)\n\nChange-Id: I9435136642c3d556971a357bf687f69df90bb45e\n",
      "commitDate": "28/11/18 2:09 PM",
      "commitName": "579ef4be063745c5211127eca83a393ceddc8b79",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,37 @@\n+  public DeviceAllocation assignDevices(String resourceName,\n+      Container container)\n+      throws ResourceHandlerException {\n+    DeviceAllocation allocation \u003d internalAssignDevices(resourceName,\n+        container);\n+    // Wait for a maximum of 120 seconds if no available Devices are there\n+    // which are yet to be released.\n+    final int timeoutMsecs \u003d 120 * WAIT_MS_PER_LOOP;\n+    int timeWaiting \u003d 0;\n+    while (allocation \u003d\u003d null) {\n+      if (timeWaiting \u003e\u003d timeoutMsecs) {\n+        break;\n+      }\n+\n+      // Sleep for 1 sec to ensure there are some free devices which are\n+      // getting released.\n+      try {\n+        LOG.info(\"Container : \" + container.getContainerId()\n+            + \" is waiting for free \" + resourceName + \" devices.\");\n+        Thread.sleep(WAIT_MS_PER_LOOP);\n+        timeWaiting +\u003d WAIT_MS_PER_LOOP;\n+        allocation \u003d internalAssignDevices(resourceName, container);\n+      } catch (InterruptedException e) {\n+        // On any interrupt, break the loop and continue execution.\n+        break;\n+      }\n+    }\n+\n+    if (allocation \u003d\u003d null) {\n+      String message \u003d \"Could not get valid \" + resourceName\n+          + \" device for container \u0027\" + container.getContainerId()\n+          + \"\u0027 as some other containers might not releasing them.\";\n+      LOG.warn(message);\n+      throw new ResourceHandlerException(message);\n+    }\n+    return allocation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DeviceAllocation assignDevices(String resourceName,\n      Container container)\n      throws ResourceHandlerException {\n    DeviceAllocation allocation \u003d internalAssignDevices(resourceName,\n        container);\n    // Wait for a maximum of 120 seconds if no available Devices are there\n    // which are yet to be released.\n    final int timeoutMsecs \u003d 120 * WAIT_MS_PER_LOOP;\n    int timeWaiting \u003d 0;\n    while (allocation \u003d\u003d null) {\n      if (timeWaiting \u003e\u003d timeoutMsecs) {\n        break;\n      }\n\n      // Sleep for 1 sec to ensure there are some free devices which are\n      // getting released.\n      try {\n        LOG.info(\"Container : \" + container.getContainerId()\n            + \" is waiting for free \" + resourceName + \" devices.\");\n        Thread.sleep(WAIT_MS_PER_LOOP);\n        timeWaiting +\u003d WAIT_MS_PER_LOOP;\n        allocation \u003d internalAssignDevices(resourceName, container);\n      } catch (InterruptedException e) {\n        // On any interrupt, break the loop and continue execution.\n        break;\n      }\n    }\n\n    if (allocation \u003d\u003d null) {\n      String message \u003d \"Could not get valid \" + resourceName\n          + \" device for container \u0027\" + container.getContainerId()\n          + \"\u0027 as some other containers might not releasing them.\";\n      LOG.warn(message);\n      throw new ResourceHandlerException(message);\n    }\n    return allocation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java"
    }
  }
}