{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLogOp.java",
  "functionName": "verifyTerminator",
  "functionId": "verifyTerminator",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
  "functionStartLine": 5049,
  "functionEndLine": 5085,
  "numCommitsSeen": 100,
  "timeTaken": 4939,
  "changeHistory": [
    "24f6a7c9563757234f53ca23e12f9c9208b53082",
    "19dd66a3f616cd8a4527f2adeef911a7d4b3f349",
    "95710c15b7a724897bcde826e112df6d4b4fe56b"
  ],
  "changeHistoryShort": {
    "24f6a7c9563757234f53ca23e12f9c9208b53082": "Ymultichange(Ymodifierchange,Ybodychange)",
    "19dd66a3f616cd8a4527f2adeef911a7d4b3f349": "Ybodychange",
    "95710c15b7a724897bcde826e112df6d4b4fe56b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "24f6a7c9563757234f53ca23e12f9c9208b53082": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-8965. Harden edit log reading code against out of memory errors (cmccabe)\n",
      "commitDate": "31/08/15 6:06 PM",
      "commitName": "24f6a7c9563757234f53ca23e12f9c9208b53082",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8965. Harden edit log reading code against out of memory errors (cmccabe)\n",
          "commitDate": "31/08/15 6:06 PM",
          "commitName": "24f6a7c9563757234f53ca23e12f9c9208b53082",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "08/07/15 10:37 AM",
          "commitNameOld": "fc6182d5ed92ac70de1f4633edd5265b7be1a8dc",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 54.31,
          "commitsBetweenForRepo": 294,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,37 @@\n-    private void verifyTerminator() throws IOException {\n+    void verifyTerminator() throws IOException {\n       /** The end of the edit log should contain only 0x00 or 0xff bytes.\n        * If it contains other bytes, the log itself may be corrupt.\n        * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n        * could make us stop reading the edit log halfway through, and we\u0027d never\n        * know that we had lost data.\n        */\n-      byte[] buf \u003d new byte[4096];\n       limiter.clearLimit();\n       int numRead \u003d -1, idx \u003d 0;\n       while (true) {\n         try {\n           numRead \u003d -1;\n           idx \u003d 0;\n-          numRead \u003d in.read(buf);\n+          numRead \u003d in.read(temp);\n           if (numRead \u003d\u003d -1) {\n             return;\n           }\n           while (idx \u003c numRead) {\n-            if ((buf[idx] !\u003d (byte)0) \u0026\u0026 (buf[idx] !\u003d (byte)-1)) {\n+            if ((temp[idx] !\u003d (byte)0) \u0026\u0026 (temp[idx] !\u003d (byte)-1)) {\n               throw new IOException(\"Read extra bytes after \" +\n                 \"the terminator!\");\n             }\n             idx++;\n           }\n         } finally {\n           // After reading each group of bytes, we reposition the mark one\n           // byte before the next group.  Similarly, if there is an error, we\n           // want to reposition the mark one byte before the error\n           if (numRead !\u003d -1) { \n             in.reset();\n             IOUtils.skipFully(in, idx);\n-            in.mark(buf.length + 1);\n+            in.mark(temp.length + 1);\n             IOUtils.skipFully(in, 1);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void verifyTerminator() throws IOException {\n      /** The end of the edit log should contain only 0x00 or 0xff bytes.\n       * If it contains other bytes, the log itself may be corrupt.\n       * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n       * could make us stop reading the edit log halfway through, and we\u0027d never\n       * know that we had lost data.\n       */\n      limiter.clearLimit();\n      int numRead \u003d -1, idx \u003d 0;\n      while (true) {\n        try {\n          numRead \u003d -1;\n          idx \u003d 0;\n          numRead \u003d in.read(temp);\n          if (numRead \u003d\u003d -1) {\n            return;\n          }\n          while (idx \u003c numRead) {\n            if ((temp[idx] !\u003d (byte)0) \u0026\u0026 (temp[idx] !\u003d (byte)-1)) {\n              throw new IOException(\"Read extra bytes after \" +\n                \"the terminator!\");\n            }\n            idx++;\n          }\n        } finally {\n          // After reading each group of bytes, we reposition the mark one\n          // byte before the next group.  Similarly, if there is an error, we\n          // want to reposition the mark one byte before the error\n          if (numRead !\u003d -1) { \n            in.reset();\n            IOUtils.skipFully(in, idx);\n            in.mark(temp.length + 1);\n            IOUtils.skipFully(in, 1);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8965. Harden edit log reading code against out of memory errors (cmccabe)\n",
          "commitDate": "31/08/15 6:06 PM",
          "commitName": "24f6a7c9563757234f53ca23e12f9c9208b53082",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "08/07/15 10:37 AM",
          "commitNameOld": "fc6182d5ed92ac70de1f4633edd5265b7be1a8dc",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 54.31,
          "commitsBetweenForRepo": 294,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,37 @@\n-    private void verifyTerminator() throws IOException {\n+    void verifyTerminator() throws IOException {\n       /** The end of the edit log should contain only 0x00 or 0xff bytes.\n        * If it contains other bytes, the log itself may be corrupt.\n        * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n        * could make us stop reading the edit log halfway through, and we\u0027d never\n        * know that we had lost data.\n        */\n-      byte[] buf \u003d new byte[4096];\n       limiter.clearLimit();\n       int numRead \u003d -1, idx \u003d 0;\n       while (true) {\n         try {\n           numRead \u003d -1;\n           idx \u003d 0;\n-          numRead \u003d in.read(buf);\n+          numRead \u003d in.read(temp);\n           if (numRead \u003d\u003d -1) {\n             return;\n           }\n           while (idx \u003c numRead) {\n-            if ((buf[idx] !\u003d (byte)0) \u0026\u0026 (buf[idx] !\u003d (byte)-1)) {\n+            if ((temp[idx] !\u003d (byte)0) \u0026\u0026 (temp[idx] !\u003d (byte)-1)) {\n               throw new IOException(\"Read extra bytes after \" +\n                 \"the terminator!\");\n             }\n             idx++;\n           }\n         } finally {\n           // After reading each group of bytes, we reposition the mark one\n           // byte before the next group.  Similarly, if there is an error, we\n           // want to reposition the mark one byte before the error\n           if (numRead !\u003d -1) { \n             in.reset();\n             IOUtils.skipFully(in, idx);\n-            in.mark(buf.length + 1);\n+            in.mark(temp.length + 1);\n             IOUtils.skipFully(in, 1);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void verifyTerminator() throws IOException {\n      /** The end of the edit log should contain only 0x00 or 0xff bytes.\n       * If it contains other bytes, the log itself may be corrupt.\n       * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n       * could make us stop reading the edit log halfway through, and we\u0027d never\n       * know that we had lost data.\n       */\n      limiter.clearLimit();\n      int numRead \u003d -1, idx \u003d 0;\n      while (true) {\n        try {\n          numRead \u003d -1;\n          idx \u003d 0;\n          numRead \u003d in.read(temp);\n          if (numRead \u003d\u003d -1) {\n            return;\n          }\n          while (idx \u003c numRead) {\n            if ((temp[idx] !\u003d (byte)0) \u0026\u0026 (temp[idx] !\u003d (byte)-1)) {\n              throw new IOException(\"Read extra bytes after \" +\n                \"the terminator!\");\n            }\n            idx++;\n          }\n        } finally {\n          // After reading each group of bytes, we reposition the mark one\n          // byte before the next group.  Similarly, if there is an error, we\n          // want to reposition the mark one byte before the error\n          if (numRead !\u003d -1) { \n            in.reset();\n            IOUtils.skipFully(in, idx);\n            in.mark(temp.length + 1);\n            IOUtils.skipFully(in, 1);\n          }\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "19dd66a3f616cd8a4527f2adeef911a7d4b3f349": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3510.  Editlog pre-allocation is performed prior to writing edits to avoid partial edits case disk out of space. Contributed by Collin McCabe.\n        \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/12 4:00 PM",
      "commitName": "19dd66a3f616cd8a4527f2adeef911a7d4b3f349",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/06/12 11:01 AM",
      "commitNameOld": "56d2ef6f5ed25055f19eb61e02c52fb9237a78b7",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 17.21,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,38 @@\n     private void verifyTerminator() throws IOException {\n-      long off \u003d 0;\n       /** The end of the edit log should contain only 0x00 or 0xff bytes.\n        * If it contains other bytes, the log itself may be corrupt.\n        * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n        * could make us stop reading the edit log halfway through, and we\u0027d never\n        * know that we had lost data.\n        */\n       byte[] buf \u003d new byte[4096];\n+      limiter.clearLimit();\n+      int numRead \u003d -1, idx \u003d 0;\n       while (true) {\n-        int numRead \u003d in.read(buf);\n-        if (numRead \u003d\u003d -1) {\n-          return;\n-        }\n-        for (int i \u003d 0; i \u003c numRead; i++, off++) {\n-          if ((buf[i] !\u003d (byte)0) \u0026\u0026 (buf[i] !\u003d (byte)-1)) {\n-            throw new GarbageAfterTerminatorException(\"Read garbage after \" +\n-            \t\t\"the terminator!\", off);\n+        try {\n+          numRead \u003d -1;\n+          idx \u003d 0;\n+          numRead \u003d in.read(buf);\n+          if (numRead \u003d\u003d -1) {\n+            return;\n+          }\n+          while (idx \u003c numRead) {\n+            if ((buf[idx] !\u003d (byte)0) \u0026\u0026 (buf[idx] !\u003d (byte)-1)) {\n+              throw new IOException(\"Read extra bytes after \" +\n+                \"the terminator!\");\n+            }\n+            idx++;\n+          }\n+        } finally {\n+          // After reading each group of bytes, we reposition the mark one\n+          // byte before the next group.  Similarly, if there is an error, we\n+          // want to reposition the mark one byte before the error\n+          if (numRead !\u003d -1) { \n+            in.reset();\n+            IOUtils.skipFully(in, idx);\n+            in.mark(buf.length + 1);\n+            IOUtils.skipFully(in, 1);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void verifyTerminator() throws IOException {\n      /** The end of the edit log should contain only 0x00 or 0xff bytes.\n       * If it contains other bytes, the log itself may be corrupt.\n       * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n       * could make us stop reading the edit log halfway through, and we\u0027d never\n       * know that we had lost data.\n       */\n      byte[] buf \u003d new byte[4096];\n      limiter.clearLimit();\n      int numRead \u003d -1, idx \u003d 0;\n      while (true) {\n        try {\n          numRead \u003d -1;\n          idx \u003d 0;\n          numRead \u003d in.read(buf);\n          if (numRead \u003d\u003d -1) {\n            return;\n          }\n          while (idx \u003c numRead) {\n            if ((buf[idx] !\u003d (byte)0) \u0026\u0026 (buf[idx] !\u003d (byte)-1)) {\n              throw new IOException(\"Read extra bytes after \" +\n                \"the terminator!\");\n            }\n            idx++;\n          }\n        } finally {\n          // After reading each group of bytes, we reposition the mark one\n          // byte before the next group.  Similarly, if there is an error, we\n          // want to reposition the mark one byte before the error\n          if (numRead !\u003d -1) { \n            in.reset();\n            IOUtils.skipFully(in, idx);\n            in.mark(buf.length + 1);\n            IOUtils.skipFully(in, 1);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java",
      "extendedDetails": {}
    },
    "95710c15b7a724897bcde826e112df6d4b4fe56b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3335. check for edit log corruption at the end of the log. Contributed by Colin Patrick McCabe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1338492 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/12 5:41 PM",
      "commitName": "95710c15b7a724897bcde826e112df6d4b4fe56b",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+    private void verifyTerminator() throws IOException {\n+      long off \u003d 0;\n+      /** The end of the edit log should contain only 0x00 or 0xff bytes.\n+       * If it contains other bytes, the log itself may be corrupt.\n+       * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n+       * could make us stop reading the edit log halfway through, and we\u0027d never\n+       * know that we had lost data.\n+       */\n+      byte[] buf \u003d new byte[4096];\n+      while (true) {\n+        int numRead \u003d in.read(buf);\n+        if (numRead \u003d\u003d -1) {\n+          return;\n+        }\n+        for (int i \u003d 0; i \u003c numRead; i++, off++) {\n+          if ((buf[i] !\u003d (byte)0) \u0026\u0026 (buf[i] !\u003d (byte)-1)) {\n+            throw new GarbageAfterTerminatorException(\"Read garbage after \" +\n+            \t\t\"the terminator!\", off);\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void verifyTerminator() throws IOException {\n      long off \u003d 0;\n      /** The end of the edit log should contain only 0x00 or 0xff bytes.\n       * If it contains other bytes, the log itself may be corrupt.\n       * It is important to check this; if we don\u0027t, a stray OP_INVALID byte \n       * could make us stop reading the edit log halfway through, and we\u0027d never\n       * know that we had lost data.\n       */\n      byte[] buf \u003d new byte[4096];\n      while (true) {\n        int numRead \u003d in.read(buf);\n        if (numRead \u003d\u003d -1) {\n          return;\n        }\n        for (int i \u003d 0; i \u003c numRead; i++, off++) {\n          if ((buf[i] !\u003d (byte)0) \u0026\u0026 (buf[i] !\u003d (byte)-1)) {\n            throw new GarbageAfterTerminatorException(\"Read garbage after \" +\n            \t\t\"the terminator!\", off);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLogOp.java"
    }
  }
}