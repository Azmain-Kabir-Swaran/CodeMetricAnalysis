{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "continuousSchedulingAttempt",
  "functionId": "continuousSchedulingAttempt",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1021,
  "functionEndLine": 1054,
  "numCommitsSeen": 309,
  "timeTaken": 7228,
  "changeHistory": [
    "ea68756c0cd3e6e20b8e7045a8b7edd180ea4708",
    "b4c4f365948d36b36942f912ef994c1c21ba59e3",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "332b520a480994b7bd56c135f7941aad30b05e9c",
    "14864e9c7c879c15b5fa2d1776614ec83152918f",
    "c0b49ff10728bb70bb60e6cb5973976f0466d247",
    "ff7758299151e3b69c27314010b4ef3a9fda3b41",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "bbbe808a511b8d84964e11e5818811734e2493bd",
    "30007fd686c1cc7addfeb69ed6bb487872bdf1cb",
    "ae05623a75803d4e12a902ac4a24187540f56699"
  ],
  "changeHistoryShort": {
    "ea68756c0cd3e6e20b8e7045a8b7edd180ea4708": "Ybodychange",
    "b4c4f365948d36b36942f912ef994c1c21ba59e3": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "332b520a480994b7bd56c135f7941aad30b05e9c": "Ybodychange",
    "14864e9c7c879c15b5fa2d1776614ec83152918f": "Ybodychange",
    "c0b49ff10728bb70bb60e6cb5973976f0466d247": "Yexceptionschange",
    "ff7758299151e3b69c27314010b4ef3a9fda3b41": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "bbbe808a511b8d84964e11e5818811734e2493bd": "Ybodychange",
    "30007fd686c1cc7addfeb69ed6bb487872bdf1cb": "Ybodychange",
    "ae05623a75803d4e12a902ac4a24187540f56699": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea68756c0cd3e6e20b8e7045a8b7edd180ea4708": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8373. RM Received RMFatalEvent of type CRITICAL_THREAD_CRASH. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "19/11/19 12:40 AM",
      "commitName": "ea68756c0cd3e6e20b8e7045a8b7edd180ea4708",
      "commitAuthor": "Sunil G",
      "commitDateOld": "14/10/19 8:19 AM",
      "commitNameOld": "5cc7873a4723a6c8e8e001d008fcd522eec0433d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 35.72,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   void continuousSchedulingAttempt() throws InterruptedException {\n     long start \u003d getClock().getTime();\n-    List\u003cFSSchedulerNode\u003e nodeIdList;\n-    // Hold a lock to prevent comparator order changes due to changes of node\n-    // unallocated resources\n-    synchronized (this) {\n-      nodeIdList \u003d nodeTracker.sortedNodeList(nodeAvailableResourceComparator);\n+    TreeSet\u003cFSSchedulerNode\u003e nodeIdSet;\n+    // Hold a lock to prevent node changes as much as possible.\n+    readLock.lock();\n+    try {\n+      nodeIdSet \u003d nodeTracker.sortedNodeSet(nodeAvailableResourceComparator);\n+    } finally {\n+      readLock.unlock();\n     }\n \n     // iterate all nodes\n-    for (FSSchedulerNode node : nodeIdList) {\n+    for (FSSchedulerNode node : nodeIdSet) {\n       try {\n         if (Resources.fitsIn(minimumAllocation,\n             node.getUnallocatedResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n         if ((ex instanceof YarnRuntimeException) \u0026\u0026\n             (ex.getCause() instanceof InterruptedException)) {\n           // AsyncDispatcher translates InterruptedException to\n           // YarnRuntimeException with cause InterruptedException.\n           // Need to throw InterruptedException to stop schedulingThread.\n           throw (InterruptedException)ex.getCause();\n         }\n       }\n     }\n \n     long duration \u003d getClock().getTime() - start;\n     fsOpDurations.addContinuousSchedulingRunDuration(duration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    long start \u003d getClock().getTime();\n    TreeSet\u003cFSSchedulerNode\u003e nodeIdSet;\n    // Hold a lock to prevent node changes as much as possible.\n    readLock.lock();\n    try {\n      nodeIdSet \u003d nodeTracker.sortedNodeSet(nodeAvailableResourceComparator);\n    } finally {\n      readLock.unlock();\n    }\n\n    // iterate all nodes\n    for (FSSchedulerNode node : nodeIdSet) {\n      try {\n        if (Resources.fitsIn(minimumAllocation,\n            node.getUnallocatedResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n        if ((ex instanceof YarnRuntimeException) \u0026\u0026\n            (ex.getCause() instanceof InterruptedException)) {\n          // AsyncDispatcher translates InterruptedException to\n          // YarnRuntimeException with cause InterruptedException.\n          // Need to throw InterruptedException to stop schedulingThread.\n          throw (InterruptedException)ex.getCause();\n        }\n      }\n    }\n\n    long duration \u003d getClock().getTime() - start;\n    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "b4c4f365948d36b36942f912ef994c1c21ba59e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6448. Continuous scheduling thread crashes while sorting nodes. (Yufei Gu via kasha)\n",
      "commitDate": "05/04/17 3:43 PM",
      "commitName": "b4c4f365948d36b36942f912ef994c1c21ba59e3",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/03/17 4:13 PM",
      "commitNameOld": "4db9cc70d0178703fb28f451eb84d97f2bf63af8",
      "commitAuthorOld": "Ray Chiang",
      "daysBetweenCommits": 25.94,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   void continuousSchedulingAttempt() throws InterruptedException {\n     long start \u003d getClock().getTime();\n-    List\u003cFSSchedulerNode\u003e nodeIdList \u003d\n-        nodeTracker.sortedNodeList(nodeAvailableResourceComparator);\n+    List\u003cFSSchedulerNode\u003e nodeIdList;\n+    // Hold a lock to prevent comparator order changes due to changes of node\n+    // unallocated resources\n+    synchronized (this) {\n+      nodeIdList \u003d nodeTracker.sortedNodeList(nodeAvailableResourceComparator);\n+    }\n \n     // iterate all nodes\n     for (FSSchedulerNode node : nodeIdList) {\n       try {\n         if (Resources.fitsIn(minimumAllocation,\n             node.getUnallocatedResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n         if ((ex instanceof YarnRuntimeException) \u0026\u0026\n             (ex.getCause() instanceof InterruptedException)) {\n           // AsyncDispatcher translates InterruptedException to\n           // YarnRuntimeException with cause InterruptedException.\n           // Need to throw InterruptedException to stop schedulingThread.\n           throw (InterruptedException)ex.getCause();\n         }\n       }\n     }\n \n     long duration \u003d getClock().getTime() - start;\n     fsOpDurations.addContinuousSchedulingRunDuration(duration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    long start \u003d getClock().getTime();\n    List\u003cFSSchedulerNode\u003e nodeIdList;\n    // Hold a lock to prevent comparator order changes due to changes of node\n    // unallocated resources\n    synchronized (this) {\n      nodeIdList \u003d nodeTracker.sortedNodeList(nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (FSSchedulerNode node : nodeIdList) {\n      try {\n        if (Resources.fitsIn(minimumAllocation,\n            node.getUnallocatedResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n        if ((ex instanceof YarnRuntimeException) \u0026\u0026\n            (ex.getCause() instanceof InterruptedException)) {\n          // AsyncDispatcher translates InterruptedException to\n          // YarnRuntimeException with cause InterruptedException.\n          // Need to throw InterruptedException to stop schedulingThread.\n          throw (InterruptedException)ex.getCause();\n        }\n      }\n    }\n\n    long duration \u003d getClock().getTime() - start;\n    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/03/16 7:46 PM",
      "commitNameOld": "e1ccc9622b2f1fbefea1862fa74d1fb56d8eb264",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 7.73,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,28 @@\n   void continuousSchedulingAttempt() throws InterruptedException {\n     long start \u003d getClock().getTime();\n-    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n-    // Sort the nodes by space available on them, so that we offer\n-    // containers on emptier nodes first, facilitating an even spread. This\n-    // requires holding the scheduler lock, so that the space available on a\n-    // node doesn\u0027t change during the sort.\n-    synchronized (this) {\n-      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n-    }\n+    List\u003cFSSchedulerNode\u003e nodeIdList \u003d\n+        nodeTracker.sortedNodeList(nodeAvailableResourceComparator);\n \n     // iterate all nodes\n-    for (NodeId nodeId : nodeIdList) {\n-      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n+    for (FSSchedulerNode node : nodeIdList) {\n       try {\n-        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n+        if (Resources.fitsIn(minimumAllocation,\n             node.getUnallocatedResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n         if ((ex instanceof YarnRuntimeException) \u0026\u0026\n             (ex.getCause() instanceof InterruptedException)) {\n           // AsyncDispatcher translates InterruptedException to\n           // YarnRuntimeException with cause InterruptedException.\n           // Need to throw InterruptedException to stop schedulingThread.\n           throw (InterruptedException)ex.getCause();\n         }\n       }\n     }\n \n     long duration \u003d getClock().getTime() - start;\n     fsOpDurations.addContinuousSchedulingRunDuration(duration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    long start \u003d getClock().getTime();\n    List\u003cFSSchedulerNode\u003e nodeIdList \u003d\n        nodeTracker.sortedNodeList(nodeAvailableResourceComparator);\n\n    // iterate all nodes\n    for (FSSchedulerNode node : nodeIdList) {\n      try {\n        if (Resources.fitsIn(minimumAllocation,\n            node.getUnallocatedResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n        if ((ex instanceof YarnRuntimeException) \u0026\u0026\n            (ex.getCause() instanceof InterruptedException)) {\n          // AsyncDispatcher translates InterruptedException to\n          // YarnRuntimeException with cause InterruptedException.\n          // Need to throw InterruptedException to stop schedulingThread.\n          throw (InterruptedException)ex.getCause();\n        }\n      }\n    }\n\n    long duration \u003d getClock().getTime() - start;\n    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/02/16 3:30 AM",
      "commitNameOld": "9ed17f181d96b8719a0ef54a129081948781d57e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.25,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   void continuousSchedulingAttempt() throws InterruptedException {\n     long start \u003d getClock().getTime();\n     List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n     // Sort the nodes by space available on them, so that we offer\n     // containers on emptier nodes first, facilitating an even spread. This\n     // requires holding the scheduler lock, so that the space available on a\n     // node doesn\u0027t change during the sort.\n     synchronized (this) {\n       Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n     }\n \n     // iterate all nodes\n     for (NodeId nodeId : nodeIdList) {\n       FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n         if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n-            node.getAvailableResource())) {\n+            node.getUnallocatedResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n         if ((ex instanceof YarnRuntimeException) \u0026\u0026\n             (ex.getCause() instanceof InterruptedException)) {\n           // AsyncDispatcher translates InterruptedException to\n           // YarnRuntimeException with cause InterruptedException.\n           // Need to throw InterruptedException to stop schedulingThread.\n           throw (InterruptedException)ex.getCause();\n         }\n       }\n     }\n \n     long duration \u003d getClock().getTime() - start;\n     fsOpDurations.addContinuousSchedulingRunDuration(duration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    long start \u003d getClock().getTime();\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getUnallocatedResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n        if ((ex instanceof YarnRuntimeException) \u0026\u0026\n            (ex.getCause() instanceof InterruptedException)) {\n          // AsyncDispatcher translates InterruptedException to\n          // YarnRuntimeException with cause InterruptedException.\n          // Need to throw InterruptedException to stop schedulingThread.\n          throw (InterruptedException)ex.getCause();\n        }\n      }\n    }\n\n    long duration \u003d getClock().getTime() - start;\n    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "332b520a480994b7bd56c135f7941aad30b05e9c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3697. FairScheduler: ContinuousSchedulingThread can fail to shutdown. (Zhihai Xu via kasha)\n",
      "commitDate": "13/09/15 6:07 PM",
      "commitName": "332b520a480994b7bd56c135f7941aad30b05e9c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n   void continuousSchedulingAttempt() throws InterruptedException {\n     long start \u003d getClock().getTime();\n     List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n     // Sort the nodes by space available on them, so that we offer\n     // containers on emptier nodes first, facilitating an even spread. This\n     // requires holding the scheduler lock, so that the space available on a\n     // node doesn\u0027t change during the sort.\n     synchronized (this) {\n       Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n     }\n \n     // iterate all nodes\n     for (NodeId nodeId : nodeIdList) {\n       FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n         if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n             node.getAvailableResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n+        if ((ex instanceof YarnRuntimeException) \u0026\u0026\n+            (ex.getCause() instanceof InterruptedException)) {\n+          // AsyncDispatcher translates InterruptedException to\n+          // YarnRuntimeException with cause InterruptedException.\n+          // Need to throw InterruptedException to stop schedulingThread.\n+          throw (InterruptedException)ex.getCause();\n+        }\n       }\n     }\n \n     long duration \u003d getClock().getTime() - start;\n     fsOpDurations.addContinuousSchedulingRunDuration(duration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    long start \u003d getClock().getTime();\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getAvailableResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n        if ((ex instanceof YarnRuntimeException) \u0026\u0026\n            (ex.getCause() instanceof InterruptedException)) {\n          // AsyncDispatcher translates InterruptedException to\n          // YarnRuntimeException with cause InterruptedException.\n          // Need to throw InterruptedException to stop schedulingThread.\n          throw (InterruptedException)ex.getCause();\n        }\n      }\n    }\n\n    long duration \u003d getClock().getTime() - start;\n    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "14864e9c7c879c15b5fa2d1776614ec83152918f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2352. FairScheduler: Collect metrics on duration of critical methods that affect performance. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616769 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 7:17 AM",
      "commitName": "14864e9c7c879c15b5fa2d1776614ec83152918f",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "29/07/14 10:41 AM",
      "commitNameOld": "c0b49ff10728bb70bb60e6cb5973976f0466d247",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.86,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n   void continuousSchedulingAttempt() throws InterruptedException {\n+    long start \u003d getClock().getTime();\n     List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n     // Sort the nodes by space available on them, so that we offer\n     // containers on emptier nodes first, facilitating an even spread. This\n     // requires holding the scheduler lock, so that the space available on a\n     // node doesn\u0027t change during the sort.\n     synchronized (this) {\n       Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n     }\n \n     // iterate all nodes\n     for (NodeId nodeId : nodeIdList) {\n       FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n         if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n             node.getAvailableResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n       }\n     }\n+\n+    long duration \u003d getClock().getTime() - start;\n+    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    long start \u003d getClock().getTime();\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getAvailableResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n      }\n    }\n\n    long duration \u003d getClock().getTime() - start;\n    fsOpDurations.addContinuousSchedulingRunDuration(duration);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "c0b49ff10728bb70bb60e6cb5973976f0466d247": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-2328. FairScheduler: Verify update and continuous scheduling threads are stopped when the scheduler is stopped. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614432 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/14 10:41 AM",
      "commitName": "c0b49ff10728bb70bb60e6cb5973976f0466d247",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/07/14 10:00 PM",
      "commitNameOld": "c88402f36d4066b18310c1fd61469f71b8d8eb13",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 6.53,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-  void continuousSchedulingAttempt() {\n+  void continuousSchedulingAttempt() throws InterruptedException {\n     List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n     // Sort the nodes by space available on them, so that we offer\n     // containers on emptier nodes first, facilitating an even spread. This\n     // requires holding the scheduler lock, so that the space available on a\n     // node doesn\u0027t change during the sort.\n     synchronized (this) {\n       Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n     }\n \n     // iterate all nodes\n     for (NodeId nodeId : nodeIdList) {\n       FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n         if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n             node.getAvailableResource())) {\n           attemptScheduling(node);\n         }\n       } catch (Throwable ex) {\n         LOG.error(\"Error while attempting scheduling for node \" + node +\n             \": \" + ex.toString(), ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void continuousSchedulingAttempt() throws InterruptedException {\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getAvailableResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[InterruptedException]"
      }
    },
    "ff7758299151e3b69c27314010b4ef3a9fda3b41": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2273. NPE in ContinuousScheduling thread when we lose a node. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 3:44 PM",
      "commitName": "ff7758299151e3b69c27314010b4ef3a9fda3b41",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2273. NPE in ContinuousScheduling thread when we lose a node. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 3:44 PM",
          "commitName": "ff7758299151e3b69c27314010b4ef3a9fda3b41",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 5:12 PM",
          "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,24 @@\n-  private void continuousScheduling() {\n-    while (true) {\n-      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n-      // Sort the nodes by space available on them, so that we offer\n-      // containers on emptier nodes first, facilitating an even spread. This\n-      // requires holding the scheduler lock, so that the space available on a\n-      // node doesn\u0027t change during the sort.\n-      synchronized (this) {\n-        Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n-      }\n+  void continuousSchedulingAttempt() {\n+    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n+    // Sort the nodes by space available on them, so that we offer\n+    // containers on emptier nodes first, facilitating an even spread. This\n+    // requires holding the scheduler lock, so that the space available on a\n+    // node doesn\u0027t change during the sort.\n+    synchronized (this) {\n+      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n+    }\n \n-      // iterate all nodes\n-      for (NodeId nodeId : nodeIdList) {\n-        if (nodes.containsKey(nodeId)) {\n-          FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n-          try {\n-            if (Resources.fitsIn(minimumAllocation,\n-                    node.getAvailableResource())) {\n-              attemptScheduling(node);\n-            }\n-          } catch (Throwable ex) {\n-            LOG.warn(\"Error while attempting scheduling for node \" + node +\n-                    \": \" + ex.toString(), ex);\n-          }\n-        }\n-      }\n+    // iterate all nodes\n+    for (NodeId nodeId : nodeIdList) {\n+      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n-        Thread.sleep(getContinuousSchedulingSleepMs());\n-      } catch (InterruptedException e) {\n-        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n-                e.toString(), e);\n+        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n+            node.getAvailableResource())) {\n+          attemptScheduling(node);\n+        }\n+      } catch (Throwable ex) {\n+        LOG.error(\"Error while attempting scheduling for node \" + node +\n+            \": \" + ex.toString(), ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void continuousSchedulingAttempt() {\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getAvailableResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "continuousScheduling",
            "newValue": "continuousSchedulingAttempt"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2273. NPE in ContinuousScheduling thread when we lose a node. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 3:44 PM",
          "commitName": "ff7758299151e3b69c27314010b4ef3a9fda3b41",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 5:12 PM",
          "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,24 @@\n-  private void continuousScheduling() {\n-    while (true) {\n-      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n-      // Sort the nodes by space available on them, so that we offer\n-      // containers on emptier nodes first, facilitating an even spread. This\n-      // requires holding the scheduler lock, so that the space available on a\n-      // node doesn\u0027t change during the sort.\n-      synchronized (this) {\n-        Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n-      }\n+  void continuousSchedulingAttempt() {\n+    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n+    // Sort the nodes by space available on them, so that we offer\n+    // containers on emptier nodes first, facilitating an even spread. This\n+    // requires holding the scheduler lock, so that the space available on a\n+    // node doesn\u0027t change during the sort.\n+    synchronized (this) {\n+      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n+    }\n \n-      // iterate all nodes\n-      for (NodeId nodeId : nodeIdList) {\n-        if (nodes.containsKey(nodeId)) {\n-          FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n-          try {\n-            if (Resources.fitsIn(minimumAllocation,\n-                    node.getAvailableResource())) {\n-              attemptScheduling(node);\n-            }\n-          } catch (Throwable ex) {\n-            LOG.warn(\"Error while attempting scheduling for node \" + node +\n-                    \": \" + ex.toString(), ex);\n-          }\n-        }\n-      }\n+    // iterate all nodes\n+    for (NodeId nodeId : nodeIdList) {\n+      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n-        Thread.sleep(getContinuousSchedulingSleepMs());\n-      } catch (InterruptedException e) {\n-        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n-                e.toString(), e);\n+        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n+            node.getAvailableResource())) {\n+          attemptScheduling(node);\n+        }\n+      } catch (Throwable ex) {\n+        LOG.error(\"Error while attempting scheduling for node \" + node +\n+            \": \" + ex.toString(), ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void continuousSchedulingAttempt() {\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getAvailableResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2273. NPE in ContinuousScheduling thread when we lose a node. (Wei Yan via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 3:44 PM",
          "commitName": "ff7758299151e3b69c27314010b4ef3a9fda3b41",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "18/07/14 5:12 PM",
          "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 3.94,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,24 @@\n-  private void continuousScheduling() {\n-    while (true) {\n-      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n-      // Sort the nodes by space available on them, so that we offer\n-      // containers on emptier nodes first, facilitating an even spread. This\n-      // requires holding the scheduler lock, so that the space available on a\n-      // node doesn\u0027t change during the sort.\n-      synchronized (this) {\n-        Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n-      }\n+  void continuousSchedulingAttempt() {\n+    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n+    // Sort the nodes by space available on them, so that we offer\n+    // containers on emptier nodes first, facilitating an even spread. This\n+    // requires holding the scheduler lock, so that the space available on a\n+    // node doesn\u0027t change during the sort.\n+    synchronized (this) {\n+      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n+    }\n \n-      // iterate all nodes\n-      for (NodeId nodeId : nodeIdList) {\n-        if (nodes.containsKey(nodeId)) {\n-          FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n-          try {\n-            if (Resources.fitsIn(minimumAllocation,\n-                    node.getAvailableResource())) {\n-              attemptScheduling(node);\n-            }\n-          } catch (Throwable ex) {\n-            LOG.warn(\"Error while attempting scheduling for node \" + node +\n-                    \": \" + ex.toString(), ex);\n-          }\n-        }\n-      }\n+    // iterate all nodes\n+    for (NodeId nodeId : nodeIdList) {\n+      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n       try {\n-        Thread.sleep(getContinuousSchedulingSleepMs());\n-      } catch (InterruptedException e) {\n-        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n-                e.toString(), e);\n+        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n+            node.getAvailableResource())) {\n+          attemptScheduling(node);\n+        }\n+      } catch (Throwable ex) {\n+        LOG.error(\"Error while attempting scheduling for node \" + node +\n+            \": \" + ex.toString(), ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void continuousSchedulingAttempt() {\n    List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n    // Sort the nodes by space available on them, so that we offer\n    // containers on emptier nodes first, facilitating an even spread. This\n    // requires holding the scheduler lock, so that the space available on a\n    // node doesn\u0027t change during the sort.\n    synchronized (this) {\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n    }\n\n    // iterate all nodes\n    for (NodeId nodeId : nodeIdList) {\n      FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n      try {\n        if (node !\u003d null \u0026\u0026 Resources.fitsIn(minimumAllocation,\n            node.getAvailableResource())) {\n          attemptScheduling(node);\n        }\n      } catch (Throwable ex) {\n        LOG.error(\"Error while attempting scheduling for node \" + node +\n            \": \" + ex.toString(), ex);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/03/14 4:40 PM",
      "commitNameOld": "7bd62b8da03642612fae8349e967b9c0aa290843",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 51.24,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void continuousScheduling() {\n     while (true) {\n       List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n       // Sort the nodes by space available on them, so that we offer\n       // containers on emptier nodes first, facilitating an even spread. This\n       // requires holding the scheduler lock, so that the space available on a\n       // node doesn\u0027t change during the sort.\n       synchronized (this) {\n         Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n       }\n \n       // iterate all nodes\n       for (NodeId nodeId : nodeIdList) {\n         if (nodes.containsKey(nodeId)) {\n-          FSSchedulerNode node \u003d nodes.get(nodeId);\n+          FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n           try {\n             if (Resources.fitsIn(minimumAllocation,\n                     node.getAvailableResource())) {\n               attemptScheduling(node);\n             }\n           } catch (Throwable ex) {\n             LOG.warn(\"Error while attempting scheduling for node \" + node +\n                     \": \" + ex.toString(), ex);\n           }\n         }\n       }\n       try {\n         Thread.sleep(getContinuousSchedulingSleepMs());\n       } catch (InterruptedException e) {\n         LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                 e.toString(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void continuousScheduling() {\n    while (true) {\n      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n      // Sort the nodes by space available on them, so that we offer\n      // containers on emptier nodes first, facilitating an even spread. This\n      // requires holding the scheduler lock, so that the space available on a\n      // node doesn\u0027t change during the sort.\n      synchronized (this) {\n        Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n      }\n\n      // iterate all nodes\n      for (NodeId nodeId : nodeIdList) {\n        if (nodes.containsKey(nodeId)) {\n          FSSchedulerNode node \u003d getFSSchedulerNode(nodeId);\n          try {\n            if (Resources.fitsIn(minimumAllocation,\n                    node.getAvailableResource())) {\n              attemptScheduling(node);\n            }\n          } catch (Throwable ex) {\n            LOG.warn(\"Error while attempting scheduling for node \" + node +\n                    \": \" + ex.toString(), ex);\n          }\n        }\n      }\n      try {\n        Thread.sleep(getContinuousSchedulingSleepMs());\n      } catch (InterruptedException e) {\n        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                e.toString(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "bbbe808a511b8d84964e11e5818811734e2493bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1724. Race condition in Fair Scheduler when continuous scheduling is turned on (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569447 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/02/14 10:00 AM",
      "commitName": "bbbe808a511b8d84964e11e5818811734e2493bd",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "18/02/14 9:51 AM",
      "commitNameOld": "e60f5b6c40cbed867dc838d2e3a5a291e49b7047",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,34 @@\n   private void continuousScheduling() {\n     while (true) {\n       List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n-      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n+      // Sort the nodes by space available on them, so that we offer\n+      // containers on emptier nodes first, facilitating an even spread. This\n+      // requires holding the scheduler lock, so that the space available on a\n+      // node doesn\u0027t change during the sort.\n+      synchronized (this) {\n+        Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n+      }\n \n       // iterate all nodes\n       for (NodeId nodeId : nodeIdList) {\n         if (nodes.containsKey(nodeId)) {\n           FSSchedulerNode node \u003d nodes.get(nodeId);\n           try {\n             if (Resources.fitsIn(minimumAllocation,\n                     node.getAvailableResource())) {\n               attemptScheduling(node);\n             }\n           } catch (Throwable ex) {\n             LOG.warn(\"Error while attempting scheduling for node \" + node +\n                     \": \" + ex.toString(), ex);\n           }\n         }\n       }\n       try {\n         Thread.sleep(getContinuousSchedulingSleepMs());\n       } catch (InterruptedException e) {\n         LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                 e.toString(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void continuousScheduling() {\n    while (true) {\n      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n      // Sort the nodes by space available on them, so that we offer\n      // containers on emptier nodes first, facilitating an even spread. This\n      // requires holding the scheduler lock, so that the space available on a\n      // node doesn\u0027t change during the sort.\n      synchronized (this) {\n        Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n      }\n\n      // iterate all nodes\n      for (NodeId nodeId : nodeIdList) {\n        if (nodes.containsKey(nodeId)) {\n          FSSchedulerNode node \u003d nodes.get(nodeId);\n          try {\n            if (Resources.fitsIn(minimumAllocation,\n                    node.getAvailableResource())) {\n              attemptScheduling(node);\n            }\n          } catch (Throwable ex) {\n            LOG.warn(\"Error while attempting scheduling for node \" + node +\n                    \": \" + ex.toString(), ex);\n          }\n        }\n      }\n      try {\n        Thread.sleep(getContinuousSchedulingSleepMs());\n      } catch (InterruptedException e) {\n        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                e.toString(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "30007fd686c1cc7addfeb69ed6bb487872bdf1cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1290. Let continuous scheduling achieve more balanced task assignment (Wei Yan via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 3:04 PM",
      "commitName": "30007fd686c1cc7addfeb69ed6bb487872bdf1cb",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "25/10/13 5:27 PM",
      "commitNameOld": "025f1719472282a30aa26ae3e235e404f04ba932",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 5.9,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,28 @@\n   private void continuousScheduling() {\n     while (true) {\n-      for (FSSchedulerNode node : nodes.values()) {\n-        try {\n-          if (Resources.fitsIn(minimumAllocation, node.getAvailableResource())) {\n-            attemptScheduling(node);\n+      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n+      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n+\n+      // iterate all nodes\n+      for (NodeId nodeId : nodeIdList) {\n+        if (nodes.containsKey(nodeId)) {\n+          FSSchedulerNode node \u003d nodes.get(nodeId);\n+          try {\n+            if (Resources.fitsIn(minimumAllocation,\n+                    node.getAvailableResource())) {\n+              attemptScheduling(node);\n+            }\n+          } catch (Throwable ex) {\n+            LOG.warn(\"Error while attempting scheduling for node \" + node +\n+                    \": \" + ex.toString(), ex);\n           }\n-        } catch (Throwable ex) {\n-          LOG.warn(\"Error while attempting scheduling for node \" + node + \": \" +\n-                  ex.toString(), ex);\n         }\n       }\n       try {\n         Thread.sleep(getContinuousSchedulingSleepMs());\n       } catch (InterruptedException e) {\n         LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                 e.toString(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void continuousScheduling() {\n    while (true) {\n      List\u003cNodeId\u003e nodeIdList \u003d new ArrayList\u003cNodeId\u003e(nodes.keySet());\n      Collections.sort(nodeIdList, nodeAvailableResourceComparator);\n\n      // iterate all nodes\n      for (NodeId nodeId : nodeIdList) {\n        if (nodes.containsKey(nodeId)) {\n          FSSchedulerNode node \u003d nodes.get(nodeId);\n          try {\n            if (Resources.fitsIn(minimumAllocation,\n                    node.getAvailableResource())) {\n              attemptScheduling(node);\n            }\n          } catch (Throwable ex) {\n            LOG.warn(\"Error while attempting scheduling for node \" + node +\n                    \": \" + ex.toString(), ex);\n          }\n        }\n      }\n      try {\n        Thread.sleep(getContinuousSchedulingSleepMs());\n      } catch (InterruptedException e) {\n        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                e.toString(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "ae05623a75803d4e12a902ac4a24187540f56699": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1010. FairScheduler: decouple container scheduling from nodemanager heartbeats. (Wei Yan via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528192 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 12:54 PM",
      "commitName": "ae05623a75803d4e12a902ac4a24187540f56699",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,20 @@\n+  private void continuousScheduling() {\n+    while (true) {\n+      for (FSSchedulerNode node : nodes.values()) {\n+        try {\n+          if (Resources.fitsIn(minimumAllocation, node.getAvailableResource())) {\n+            attemptScheduling(node);\n+          }\n+        } catch (Throwable ex) {\n+          LOG.warn(\"Error while attempting scheduling for node \" + node + \": \" +\n+                  ex.toString(), ex);\n+        }\n+      }\n+      try {\n+        Thread.sleep(getContinuousSchedulingSleepMs());\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n+                e.toString(), e);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void continuousScheduling() {\n    while (true) {\n      for (FSSchedulerNode node : nodes.values()) {\n        try {\n          if (Resources.fitsIn(minimumAllocation, node.getAvailableResource())) {\n            attemptScheduling(node);\n          }\n        } catch (Throwable ex) {\n          LOG.warn(\"Error while attempting scheduling for node \" + node + \": \" +\n                  ex.toString(), ex);\n        }\n      }\n      try {\n        Thread.sleep(getContinuousSchedulingSleepMs());\n      } catch (InterruptedException e) {\n        LOG.warn(\"Error while doing sleep in continuous scheduling: \" +\n                e.toString(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}