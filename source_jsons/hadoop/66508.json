{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRAMSimulator.java",
  "functionName": "sendContainerRequest",
  "functionId": "sendContainerRequest",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
  "functionStartLine": 287,
  "functionEndLine": 358,
  "numCommitsSeen": 12,
  "timeTaken": 1105,
  "changeHistory": [
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "b32ffa2753e83615b980721b6067fcc35ce54372",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "b32ffa2753e83615b980721b6067fcc35ce54372": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "20/04/17 9:54 PM",
      "commitNameOld": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 59.97,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,72 @@\n   protected void sendContainerRequest()\n           throws YarnException, IOException, InterruptedException {\n     if (isFinished) {\n       return;\n     }\n \n     // send out request\n     List\u003cResourceRequest\u003e ask \u003d null;\n     if (mapFinished !\u003d mapTotal) {\n       // map phase\n       if (!pendingMaps.isEmpty()) {\n         ask \u003d packageRequests(mergeLists(pendingMaps, scheduledMaps),\n             PRIORITY_MAP);\n-        LOG.debug(MessageFormat\n-            .format(\"Application {0} sends out \" + \"request for {1} mappers.\",\n-                appId, pendingMaps.size()));\n+        LOG.debug(\"Application {} sends out request for {} mappers.\",\n+            appId, pendingMaps.size());\n         scheduledMaps.addAll(pendingMaps);\n         pendingMaps.clear();\n       } else if (!pendingFailedMaps.isEmpty()) {\n         ask \u003d packageRequests(mergeLists(pendingFailedMaps, scheduledMaps),\n             PRIORITY_MAP);\n-        LOG.debug(MessageFormat.format(\n-            \"Application {0} sends out \" + \"requests for {1} failed mappers.\",\n-            appId, pendingFailedMaps.size()));\n+        LOG.debug(\"Application {} sends out requests for {} failed mappers.\",\n+            appId, pendingFailedMaps.size());\n         scheduledMaps.addAll(pendingFailedMaps);\n         pendingFailedMaps.clear();\n       }\n     } else if (reduceFinished !\u003d reduceTotal) {\n       // reduce phase\n       if (!pendingReduces.isEmpty()) {\n         ask \u003d packageRequests(mergeLists(pendingReduces, scheduledReduces),\n             PRIORITY_REDUCE);\n-        LOG.debug(MessageFormat\n-            .format(\"Application {0} sends out \" + \"requests for {1} reducers.\",\n-                appId, pendingReduces.size()));\n+        LOG.debug(\"Application {} sends out requests for {} reducers.\",\n+                appId, pendingReduces.size());\n         scheduledReduces.addAll(pendingReduces);\n         pendingReduces.clear();\n       } else if (!pendingFailedReduces.isEmpty()) {\n         ask \u003d packageRequests(mergeLists(pendingFailedReduces, scheduledReduces),\n             PRIORITY_REDUCE);\n-        LOG.debug(MessageFormat.format(\n-            \"Application {0} sends out \" + \"request for {1} failed reducers.\",\n-            appId, pendingFailedReduces.size()));\n+        LOG.debug(\"Application {} sends out request for {} failed reducers.\",\n+            appId, pendingFailedReduces.size());\n         scheduledReduces.addAll(pendingFailedReduces);\n         pendingFailedReduces.clear();\n       }\n     }\n \n     if (ask \u003d\u003d null) {\n       ask \u003d new ArrayList\u003c\u003e();\n     }\n     \n     final AllocateRequest request \u003d createAllocateRequest(ask);\n     if (totalContainers \u003d\u003d 0) {\n       request.setProgress(1.0f);\n     } else {\n       request.setProgress((float) finishedContainers / totalContainers);\n     }\n \n     UserGroupInformation ugi \u003d\n             UserGroupInformation.createRemoteUser(appAttemptId.toString());\n     Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n             .get(appAttemptId.getApplicationId())\n             .getRMAppAttempt(appAttemptId).getAMRMToken();\n     ugi.addTokenIdentifier(token.decodeIdentifier());\n     AllocateResponse response \u003d ugi.doAs(\n             new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n       @Override\n       public AllocateResponse run() throws Exception {\n         return rm.getApplicationMasterService().allocate(request);\n       }\n     });\n     if (response !\u003d null) {\n       responseQueue.put(response);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void sendContainerRequest()\n          throws YarnException, IOException, InterruptedException {\n    if (isFinished) {\n      return;\n    }\n\n    // send out request\n    List\u003cResourceRequest\u003e ask \u003d null;\n    if (mapFinished !\u003d mapTotal) {\n      // map phase\n      if (!pendingMaps.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingMaps, scheduledMaps),\n            PRIORITY_MAP);\n        LOG.debug(\"Application {} sends out request for {} mappers.\",\n            appId, pendingMaps.size());\n        scheduledMaps.addAll(pendingMaps);\n        pendingMaps.clear();\n      } else if (!pendingFailedMaps.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingFailedMaps, scheduledMaps),\n            PRIORITY_MAP);\n        LOG.debug(\"Application {} sends out requests for {} failed mappers.\",\n            appId, pendingFailedMaps.size());\n        scheduledMaps.addAll(pendingFailedMaps);\n        pendingFailedMaps.clear();\n      }\n    } else if (reduceFinished !\u003d reduceTotal) {\n      // reduce phase\n      if (!pendingReduces.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingReduces, scheduledReduces),\n            PRIORITY_REDUCE);\n        LOG.debug(\"Application {} sends out requests for {} reducers.\",\n                appId, pendingReduces.size());\n        scheduledReduces.addAll(pendingReduces);\n        pendingReduces.clear();\n      } else if (!pendingFailedReduces.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingFailedReduces, scheduledReduces),\n            PRIORITY_REDUCE);\n        LOG.debug(\"Application {} sends out request for {} failed reducers.\",\n            appId, pendingFailedReduces.size());\n        scheduledReduces.addAll(pendingFailedReduces);\n        pendingFailedReduces.clear();\n      }\n    }\n\n    if (ask \u003d\u003d null) {\n      ask \u003d new ArrayList\u003c\u003e();\n    }\n    \n    final AllocateRequest request \u003d createAllocateRequest(ask);\n    if (totalContainers \u003d\u003d 0) {\n      request.setProgress(1.0f);\n    } else {\n      request.setProgress((float) finishedContainers / totalContainers);\n    }\n\n    UserGroupInformation ugi \u003d\n            UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n            .get(appAttemptId.getApplicationId())\n            .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    AllocateResponse response \u003d ugi.doAs(\n            new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n      @Override\n      public AllocateResponse run() throws Exception {\n        return rm.getApplicationMasterService().allocate(request);\n      }\n    });\n    if (response !\u003d null) {\n      responseQueue.put(response);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
      "extendedDetails": {}
    },
    "b32ffa2753e83615b980721b6067fcc35ce54372": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4779. Fix AM container allocation logic in SLS. Contributed by Wangda Tan.\n",
      "commitDate": "24/02/17 8:09 AM",
      "commitName": "b32ffa2753e83615b980721b6067fcc35ce54372",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/09/14 3:13 PM",
      "commitNameOld": "28d99db99236ff2a6e4a605802820e2b512225f9",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 898.75,
      "commitsBetweenForRepo": 6750,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,76 @@\n   protected void sendContainerRequest()\n           throws YarnException, IOException, InterruptedException {\n     if (isFinished) {\n       return;\n     }\n \n     // send out request\n     List\u003cResourceRequest\u003e ask \u003d null;\n-    if (isAMContainerRunning) {\n-      if (mapFinished !\u003d mapTotal) {\n-        // map phase\n-        if (! pendingMaps.isEmpty()) {\n-          ask \u003d packageRequests(pendingMaps, PRIORITY_MAP);\n-          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n-                  \"request for {1} mappers.\", appId, pendingMaps.size()));\n-          scheduledMaps.addAll(pendingMaps);\n-          pendingMaps.clear();\n-        } else if (! pendingFailedMaps.isEmpty() \u0026\u0026 scheduledMaps.isEmpty()) {\n-          ask \u003d packageRequests(pendingFailedMaps, PRIORITY_MAP);\n-          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n-                  \"requests for {1} failed mappers.\", appId,\n-                  pendingFailedMaps.size()));\n-          scheduledMaps.addAll(pendingFailedMaps);\n-          pendingFailedMaps.clear();\n-        }\n-      } else if (reduceFinished !\u003d reduceTotal) {\n-        // reduce phase\n-        if (! pendingReduces.isEmpty()) {\n-          ask \u003d packageRequests(pendingReduces, PRIORITY_REDUCE);\n-          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n-                  \"requests for {1} reducers.\", appId, pendingReduces.size()));\n-          scheduledReduces.addAll(pendingReduces);\n-          pendingReduces.clear();\n-        } else if (! pendingFailedReduces.isEmpty()\n-                \u0026\u0026 scheduledReduces.isEmpty()) {\n-          ask \u003d packageRequests(pendingFailedReduces, PRIORITY_REDUCE);\n-          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n-                  \"request for {1} failed reducers.\", appId,\n-                  pendingFailedReduces.size()));\n-          scheduledReduces.addAll(pendingFailedReduces);\n-          pendingFailedReduces.clear();\n-        }\n+    if (mapFinished !\u003d mapTotal) {\n+      // map phase\n+      if (!pendingMaps.isEmpty()) {\n+        ask \u003d packageRequests(mergeLists(pendingMaps, scheduledMaps),\n+            PRIORITY_MAP);\n+        LOG.debug(MessageFormat\n+            .format(\"Application {0} sends out \" + \"request for {1} mappers.\",\n+                appId, pendingMaps.size()));\n+        scheduledMaps.addAll(pendingMaps);\n+        pendingMaps.clear();\n+      } else if (!pendingFailedMaps.isEmpty()) {\n+        ask \u003d packageRequests(mergeLists(pendingFailedMaps, scheduledMaps),\n+            PRIORITY_MAP);\n+        LOG.debug(MessageFormat.format(\n+            \"Application {0} sends out \" + \"requests for {1} failed mappers.\",\n+            appId, pendingFailedMaps.size()));\n+        scheduledMaps.addAll(pendingFailedMaps);\n+        pendingFailedMaps.clear();\n+      }\n+    } else if (reduceFinished !\u003d reduceTotal) {\n+      // reduce phase\n+      if (!pendingReduces.isEmpty()) {\n+        ask \u003d packageRequests(mergeLists(pendingReduces, scheduledReduces),\n+            PRIORITY_REDUCE);\n+        LOG.debug(MessageFormat\n+            .format(\"Application {0} sends out \" + \"requests for {1} reducers.\",\n+                appId, pendingReduces.size()));\n+        scheduledReduces.addAll(pendingReduces);\n+        pendingReduces.clear();\n+      } else if (!pendingFailedReduces.isEmpty()) {\n+        ask \u003d packageRequests(mergeLists(pendingFailedReduces, scheduledReduces),\n+            PRIORITY_REDUCE);\n+        LOG.debug(MessageFormat.format(\n+            \"Application {0} sends out \" + \"request for {1} failed reducers.\",\n+            appId, pendingFailedReduces.size()));\n+        scheduledReduces.addAll(pendingFailedReduces);\n+        pendingFailedReduces.clear();\n       }\n     }\n+\n     if (ask \u003d\u003d null) {\n-      ask \u003d new ArrayList\u003cResourceRequest\u003e();\n+      ask \u003d new ArrayList\u003c\u003e();\n     }\n     \n     final AllocateRequest request \u003d createAllocateRequest(ask);\n     if (totalContainers \u003d\u003d 0) {\n       request.setProgress(1.0f);\n     } else {\n       request.setProgress((float) finishedContainers / totalContainers);\n     }\n \n     UserGroupInformation ugi \u003d\n             UserGroupInformation.createRemoteUser(appAttemptId.toString());\n     Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n             .get(appAttemptId.getApplicationId())\n             .getRMAppAttempt(appAttemptId).getAMRMToken();\n     ugi.addTokenIdentifier(token.decodeIdentifier());\n     AllocateResponse response \u003d ugi.doAs(\n             new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n       @Override\n       public AllocateResponse run() throws Exception {\n         return rm.getApplicationMasterService().allocate(request);\n       }\n     });\n     if (response !\u003d null) {\n       responseQueue.put(response);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void sendContainerRequest()\n          throws YarnException, IOException, InterruptedException {\n    if (isFinished) {\n      return;\n    }\n\n    // send out request\n    List\u003cResourceRequest\u003e ask \u003d null;\n    if (mapFinished !\u003d mapTotal) {\n      // map phase\n      if (!pendingMaps.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingMaps, scheduledMaps),\n            PRIORITY_MAP);\n        LOG.debug(MessageFormat\n            .format(\"Application {0} sends out \" + \"request for {1} mappers.\",\n                appId, pendingMaps.size()));\n        scheduledMaps.addAll(pendingMaps);\n        pendingMaps.clear();\n      } else if (!pendingFailedMaps.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingFailedMaps, scheduledMaps),\n            PRIORITY_MAP);\n        LOG.debug(MessageFormat.format(\n            \"Application {0} sends out \" + \"requests for {1} failed mappers.\",\n            appId, pendingFailedMaps.size()));\n        scheduledMaps.addAll(pendingFailedMaps);\n        pendingFailedMaps.clear();\n      }\n    } else if (reduceFinished !\u003d reduceTotal) {\n      // reduce phase\n      if (!pendingReduces.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingReduces, scheduledReduces),\n            PRIORITY_REDUCE);\n        LOG.debug(MessageFormat\n            .format(\"Application {0} sends out \" + \"requests for {1} reducers.\",\n                appId, pendingReduces.size()));\n        scheduledReduces.addAll(pendingReduces);\n        pendingReduces.clear();\n      } else if (!pendingFailedReduces.isEmpty()) {\n        ask \u003d packageRequests(mergeLists(pendingFailedReduces, scheduledReduces),\n            PRIORITY_REDUCE);\n        LOG.debug(MessageFormat.format(\n            \"Application {0} sends out \" + \"request for {1} failed reducers.\",\n            appId, pendingFailedReduces.size()));\n        scheduledReduces.addAll(pendingFailedReduces);\n        pendingFailedReduces.clear();\n      }\n    }\n\n    if (ask \u003d\u003d null) {\n      ask \u003d new ArrayList\u003c\u003e();\n    }\n    \n    final AllocateRequest request \u003d createAllocateRequest(ask);\n    if (totalContainers \u003d\u003d 0) {\n      request.setProgress(1.0f);\n    } else {\n      request.setProgress((float) finishedContainers / totalContainers);\n    }\n\n    UserGroupInformation ugi \u003d\n            UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n            .get(appAttemptId.getApplicationId())\n            .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    AllocateResponse response \u003d ugi.doAs(\n            new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n      @Override\n      public AllocateResponse run() throws Exception {\n        return rm.getApplicationMasterService().allocate(request);\n      }\n    });\n    if (response !\u003d null) {\n      responseQueue.put(response);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,72 @@\n+  protected void sendContainerRequest()\n+          throws YarnException, IOException, InterruptedException {\n+    if (isFinished) {\n+      return;\n+    }\n+\n+    // send out request\n+    List\u003cResourceRequest\u003e ask \u003d null;\n+    if (isAMContainerRunning) {\n+      if (mapFinished !\u003d mapTotal) {\n+        // map phase\n+        if (! pendingMaps.isEmpty()) {\n+          ask \u003d packageRequests(pendingMaps, PRIORITY_MAP);\n+          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n+                  \"request for {1} mappers.\", appId, pendingMaps.size()));\n+          scheduledMaps.addAll(pendingMaps);\n+          pendingMaps.clear();\n+        } else if (! pendingFailedMaps.isEmpty() \u0026\u0026 scheduledMaps.isEmpty()) {\n+          ask \u003d packageRequests(pendingFailedMaps, PRIORITY_MAP);\n+          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n+                  \"requests for {1} failed mappers.\", appId,\n+                  pendingFailedMaps.size()));\n+          scheduledMaps.addAll(pendingFailedMaps);\n+          pendingFailedMaps.clear();\n+        }\n+      } else if (reduceFinished !\u003d reduceTotal) {\n+        // reduce phase\n+        if (! pendingReduces.isEmpty()) {\n+          ask \u003d packageRequests(pendingReduces, PRIORITY_REDUCE);\n+          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n+                  \"requests for {1} reducers.\", appId, pendingReduces.size()));\n+          scheduledReduces.addAll(pendingReduces);\n+          pendingReduces.clear();\n+        } else if (! pendingFailedReduces.isEmpty()\n+                \u0026\u0026 scheduledReduces.isEmpty()) {\n+          ask \u003d packageRequests(pendingFailedReduces, PRIORITY_REDUCE);\n+          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n+                  \"request for {1} failed reducers.\", appId,\n+                  pendingFailedReduces.size()));\n+          scheduledReduces.addAll(pendingFailedReduces);\n+          pendingFailedReduces.clear();\n+        }\n+      }\n+    }\n+    if (ask \u003d\u003d null) {\n+      ask \u003d new ArrayList\u003cResourceRequest\u003e();\n+    }\n+    \n+    final AllocateRequest request \u003d createAllocateRequest(ask);\n+    if (totalContainers \u003d\u003d 0) {\n+      request.setProgress(1.0f);\n+    } else {\n+      request.setProgress((float) finishedContainers / totalContainers);\n+    }\n+\n+    UserGroupInformation ugi \u003d\n+            UserGroupInformation.createRemoteUser(appAttemptId.toString());\n+    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n+            .get(appAttemptId.getApplicationId())\n+            .getRMAppAttempt(appAttemptId).getAMRMToken();\n+    ugi.addTokenIdentifier(token.decodeIdentifier());\n+    AllocateResponse response \u003d ugi.doAs(\n+            new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n+      @Override\n+      public AllocateResponse run() throws Exception {\n+        return rm.getApplicationMasterService().allocate(request);\n+      }\n+    });\n+    if (response !\u003d null) {\n+      responseQueue.put(response);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void sendContainerRequest()\n          throws YarnException, IOException, InterruptedException {\n    if (isFinished) {\n      return;\n    }\n\n    // send out request\n    List\u003cResourceRequest\u003e ask \u003d null;\n    if (isAMContainerRunning) {\n      if (mapFinished !\u003d mapTotal) {\n        // map phase\n        if (! pendingMaps.isEmpty()) {\n          ask \u003d packageRequests(pendingMaps, PRIORITY_MAP);\n          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n                  \"request for {1} mappers.\", appId, pendingMaps.size()));\n          scheduledMaps.addAll(pendingMaps);\n          pendingMaps.clear();\n        } else if (! pendingFailedMaps.isEmpty() \u0026\u0026 scheduledMaps.isEmpty()) {\n          ask \u003d packageRequests(pendingFailedMaps, PRIORITY_MAP);\n          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n                  \"requests for {1} failed mappers.\", appId,\n                  pendingFailedMaps.size()));\n          scheduledMaps.addAll(pendingFailedMaps);\n          pendingFailedMaps.clear();\n        }\n      } else if (reduceFinished !\u003d reduceTotal) {\n        // reduce phase\n        if (! pendingReduces.isEmpty()) {\n          ask \u003d packageRequests(pendingReduces, PRIORITY_REDUCE);\n          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n                  \"requests for {1} reducers.\", appId, pendingReduces.size()));\n          scheduledReduces.addAll(pendingReduces);\n          pendingReduces.clear();\n        } else if (! pendingFailedReduces.isEmpty()\n                \u0026\u0026 scheduledReduces.isEmpty()) {\n          ask \u003d packageRequests(pendingFailedReduces, PRIORITY_REDUCE);\n          LOG.debug(MessageFormat.format(\"Application {0} sends out \" +\n                  \"request for {1} failed reducers.\", appId,\n                  pendingFailedReduces.size()));\n          scheduledReduces.addAll(pendingFailedReduces);\n          pendingFailedReduces.clear();\n        }\n      }\n    }\n    if (ask \u003d\u003d null) {\n      ask \u003d new ArrayList\u003cResourceRequest\u003e();\n    }\n    \n    final AllocateRequest request \u003d createAllocateRequest(ask);\n    if (totalContainers \u003d\u003d 0) {\n      request.setProgress(1.0f);\n    } else {\n      request.setProgress((float) finishedContainers / totalContainers);\n    }\n\n    UserGroupInformation ugi \u003d\n            UserGroupInformation.createRemoteUser(appAttemptId.toString());\n    Token\u003cAMRMTokenIdentifier\u003e token \u003d rm.getRMContext().getRMApps()\n            .get(appAttemptId.getApplicationId())\n            .getRMAppAttempt(appAttemptId).getAMRMToken();\n    ugi.addTokenIdentifier(token.decodeIdentifier());\n    AllocateResponse response \u003d ugi.doAs(\n            new PrivilegedExceptionAction\u003cAllocateResponse\u003e() {\n      @Override\n      public AllocateResponse run() throws Exception {\n        return rm.getApplicationMasterService().allocate(request);\n      }\n    });\n    if (response !\u003d null) {\n      responseQueue.put(response);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/MRAMSimulator.java"
    }
  }
}