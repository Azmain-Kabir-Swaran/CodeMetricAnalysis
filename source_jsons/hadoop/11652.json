{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetCache.java",
  "functionName": "cacheBlock",
  "functionId": "cacheBlock___blockId-long__bpid-String__blockFileName-String__length-long__genstamp-long__volumeExecutor-Executor",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
  "functionStartLine": 272,
  "functionEndLine": 289,
  "numCommitsSeen": 36,
  "timeTaken": 2447,
  "changeHistory": [
    "93e23a99157c30b51752fc49748c3c210745a187",
    "f0d64a078da7e932b9509734f75170e3e525e68c",
    "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65",
    "9673baa7e8b43fa6300080f72ebce0189ea775e5",
    "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
    "15d08c4778350a86d7bae0174aeb48f8d8f61cce",
    "b992219fa13ccee2b417d91222fd0c3e8c3ffe11"
  ],
  "changeHistoryShort": {
    "93e23a99157c30b51752fc49748c3c210745a187": "Ybodychange",
    "f0d64a078da7e932b9509734f75170e3e525e68c": "Ybodychange",
    "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65": "Ybodychange",
    "9673baa7e8b43fa6300080f72ebce0189ea775e5": "Ybodychange",
    "97199baea1c41a66bd2a88bda31742ef6ddcb5dc": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "15d08c4778350a86d7bae0174aeb48f8d8f61cce": "Ybodychange",
    "b992219fa13ccee2b417d91222fd0c3e8c3ffe11": "Yintroduced"
  },
  "changeHistoryDetails": {
    "93e23a99157c30b51752fc49748c3c210745a187": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6613. Improve logging in caching classes. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607697 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 10:13 AM",
      "commitName": "93e23a99157c30b51752fc49748c3c210745a187",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "09/04/14 2:45 PM",
      "commitNameOld": "5c48f379ab359ea7a7c2421df998080f3792a1d9",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 84.81,
      "commitsBetweenForRepo": 513,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,18 @@\n   synchronized void cacheBlock(long blockId, String bpid,\n       String blockFileName, long length, long genstamp,\n       Executor volumeExecutor) {\n     ExtendedBlockId key \u003d new ExtendedBlockId(blockId, bpid);\n     Value prevValue \u003d mappableBlockMap.get(key);\n     if (prevValue !\u003d null) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n-            \" already exists in the FsDatasetCache with state \" +\n-            prevValue.state);\n-      }\n+      LOG.debug(\"Block with id {}, pool {} already exists in the \"\n+              + \"FsDatasetCache with state {}\", blockId, bpid, prevValue.state\n+      );\n       numBlocksFailedToCache.incrementAndGet();\n       return;\n     }\n     mappableBlockMap.put(key, new Value(null, State.CACHING));\n     volumeExecutor.execute(\n         new CachingTask(key, blockFileName, length, genstamp));\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Initiating caching for Block with id \" + blockId +\n-          \", pool \" + bpid);\n-    }\n+    LOG.debug(\"Initiating caching for Block with id {}, pool {}\", blockId,\n+        bpid);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    ExtendedBlockId key \u003d new ExtendedBlockId(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      LOG.debug(\"Block with id {}, pool {} already exists in the \"\n              + \"FsDatasetCache with state {}\", blockId, bpid, prevValue.state\n      );\n      numBlocksFailedToCache.incrementAndGet();\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n    LOG.debug(\"Initiating caching for Block with id {}, pool {}\", blockId,\n        bpid);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
      "extendedDetails": {}
    },
    "f0d64a078da7e932b9509734f75170e3e525e68c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5940.  Minor cleanups to ShortCircuitReplica, FsDatasetCache, and DomainSocketWatcher (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567835 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 7:10 PM",
      "commitName": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "27/11/13 9:55 AM",
      "commitNameOld": "13edb391d06c479720202eb5ac81f1c71fe64748",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 77.39,
      "commitsBetweenForRepo": 431,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   synchronized void cacheBlock(long blockId, String bpid,\n       String blockFileName, long length, long genstamp,\n       Executor volumeExecutor) {\n-    Key key \u003d new Key(blockId, bpid);\n+    ExtendedBlockId key \u003d new ExtendedBlockId(blockId, bpid);\n     Value prevValue \u003d mappableBlockMap.get(key);\n     if (prevValue !\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n             \" already exists in the FsDatasetCache with state \" +\n             prevValue.state);\n       }\n       numBlocksFailedToCache.incrementAndGet();\n       return;\n     }\n     mappableBlockMap.put(key, new Value(null, State.CACHING));\n     volumeExecutor.execute(\n         new CachingTask(key, blockFileName, length, genstamp));\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Initiating caching for Block with id \" + blockId +\n           \", pool \" + bpid);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    ExtendedBlockId key \u003d new ExtendedBlockId(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n            \" already exists in the FsDatasetCache with state \" +\n            prevValue.state);\n      }\n      numBlocksFailedToCache.incrementAndGet();\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Initiating caching for Block with id \" + blockId +\n          \", pool \" + bpid);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
      "extendedDetails": {}
    },
    "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5366. recaching improvements (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/13 10:18 AM",
      "commitName": "3c591aa442d342bdd4a0c4abe9a43c64d8ef3e65",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "11/11/13 10:30 AM",
      "commitNameOld": "9673baa7e8b43fa6300080f72ebce0189ea775e5",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,22 @@\n   synchronized void cacheBlock(long blockId, String bpid,\n       String blockFileName, long length, long genstamp,\n       Executor volumeExecutor) {\n     Key key \u003d new Key(blockId, bpid);\n     Value prevValue \u003d mappableBlockMap.get(key);\n     if (prevValue !\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n             \" already exists in the FsDatasetCache with state \" +\n             prevValue.state);\n       }\n       numBlocksFailedToCache.incrementAndGet();\n       return;\n     }\n     mappableBlockMap.put(key, new Value(null, State.CACHING));\n     volumeExecutor.execute(\n         new CachingTask(key, blockFileName, length, genstamp));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Initiating caching for Block with id \" + blockId +\n+          \", pool \" + bpid);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    Key key \u003d new Key(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n            \" already exists in the FsDatasetCache with state \" +\n            prevValue.state);\n      }\n      numBlocksFailedToCache.incrementAndGet();\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Initiating caching for Block with id \" + blockId +\n          \", pool \" + bpid);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
      "extendedDetails": {}
    },
    "9673baa7e8b43fa6300080f72ebce0189ea775e5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5320. Add datanode caching metrics. Contributed by Andrew Wang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/11/13 10:30 AM",
      "commitName": "9673baa7e8b43fa6300080f72ebce0189ea775e5",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/11/13 7:00 PM",
      "commitNameOld": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 3.65,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   synchronized void cacheBlock(long blockId, String bpid,\n       String blockFileName, long length, long genstamp,\n       Executor volumeExecutor) {\n     Key key \u003d new Key(blockId, bpid);\n     Value prevValue \u003d mappableBlockMap.get(key);\n     if (prevValue !\u003d null) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n             \" already exists in the FsDatasetCache with state \" +\n             prevValue.state);\n       }\n+      numBlocksFailedToCache.incrementAndGet();\n       return;\n     }\n     mappableBlockMap.put(key, new Value(null, State.CACHING));\n     volumeExecutor.execute(\n         new CachingTask(key, blockFileName, length, genstamp));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    Key key \u003d new Key(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n            \" already exists in the FsDatasetCache with state \" +\n            prevValue.state);\n      }\n      numBlocksFailedToCache.incrementAndGet();\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
      "extendedDetails": {}
    },
    "97199baea1c41a66bd2a88bda31742ef6ddcb5dc": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-5394: Fix race conditions in DN caching and uncaching (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 7:00 PM",
      "commitName": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5394: Fix race conditions in DN caching and uncaching (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 7:00 PM",
          "commitName": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "21/10/13 12:29 PM",
          "commitNameOld": "f9c08d02ebe4a5477cf5d753f0d9d48fc6f9fa48",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 17.31,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,17 @@\n-  void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n-      FileInputStream blockIn, FileInputStream metaIn) {\n-    if (isCached(bpid, block.getBlockId())) {\n-      return;\n-    }\n-    MappableBlock mapBlock \u003d null;\n-    try {\n-      mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n-          + \" MappableBlock\", e);\n-      IOUtils.closeQuietly(blockIn);\n-      IOUtils.closeQuietly(metaIn);\n-      return;\n-    }\n-    // Check if there\u0027s sufficient cache capacity\n-    boolean success \u003d false;\n-    long bytes \u003d mapBlock.getNumBytes();\n-    long used \u003d usedBytes.get();\n-    while (used+bytes \u003c maxBytes) {\n-      if (usedBytes.compareAndSet(used, used+bytes)) {\n-        success \u003d true;\n-        break;\n+  synchronized void cacheBlock(long blockId, String bpid,\n+      String blockFileName, long length, long genstamp,\n+      Executor volumeExecutor) {\n+    Key key \u003d new Key(blockId, bpid);\n+    Value prevValue \u003d mappableBlockMap.get(key);\n+    if (prevValue !\u003d null) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n+            \" already exists in the FsDatasetCache with state \" +\n+            prevValue.state);\n       }\n-      used \u003d usedBytes.get();\n-    }\n-    if (!success) {\n-      LOG.warn(String.format(\n-          \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n-          mapBlock.getBlock().toString(),\n-          DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n-          used, bytes, maxBytes));\n-      mapBlock.close();\n       return;\n     }\n-    // Submit it to the worker pool to be cached\n-    volume.getExecutor().execute(new WorkerTask(mapBlock));\n+    mappableBlockMap.put(key, new Value(null, State.CACHING));\n+    volumeExecutor.execute(\n+        new CachingTask(key, blockFileName, length, genstamp));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    Key key \u003d new Key(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n            \" already exists in the FsDatasetCache with state \" +\n            prevValue.state);\n      }\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
          "extendedDetails": {
            "oldValue": "[bpid-String, block-Block, volume-FsVolumeImpl, blockIn-FileInputStream, metaIn-FileInputStream]",
            "newValue": "[blockId-long, bpid-String, blockFileName-String, length-long, genstamp-long, volumeExecutor-Executor]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5394: Fix race conditions in DN caching and uncaching (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 7:00 PM",
          "commitName": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "21/10/13 12:29 PM",
          "commitNameOld": "f9c08d02ebe4a5477cf5d753f0d9d48fc6f9fa48",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 17.31,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,17 @@\n-  void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n-      FileInputStream blockIn, FileInputStream metaIn) {\n-    if (isCached(bpid, block.getBlockId())) {\n-      return;\n-    }\n-    MappableBlock mapBlock \u003d null;\n-    try {\n-      mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n-          + \" MappableBlock\", e);\n-      IOUtils.closeQuietly(blockIn);\n-      IOUtils.closeQuietly(metaIn);\n-      return;\n-    }\n-    // Check if there\u0027s sufficient cache capacity\n-    boolean success \u003d false;\n-    long bytes \u003d mapBlock.getNumBytes();\n-    long used \u003d usedBytes.get();\n-    while (used+bytes \u003c maxBytes) {\n-      if (usedBytes.compareAndSet(used, used+bytes)) {\n-        success \u003d true;\n-        break;\n+  synchronized void cacheBlock(long blockId, String bpid,\n+      String blockFileName, long length, long genstamp,\n+      Executor volumeExecutor) {\n+    Key key \u003d new Key(blockId, bpid);\n+    Value prevValue \u003d mappableBlockMap.get(key);\n+    if (prevValue !\u003d null) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n+            \" already exists in the FsDatasetCache with state \" +\n+            prevValue.state);\n       }\n-      used \u003d usedBytes.get();\n-    }\n-    if (!success) {\n-      LOG.warn(String.format(\n-          \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n-          mapBlock.getBlock().toString(),\n-          DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n-          used, bytes, maxBytes));\n-      mapBlock.close();\n       return;\n     }\n-    // Submit it to the worker pool to be cached\n-    volume.getExecutor().execute(new WorkerTask(mapBlock));\n+    mappableBlockMap.put(key, new Value(null, State.CACHING));\n+    volumeExecutor.execute(\n+        new CachingTask(key, blockFileName, length, genstamp));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    Key key \u003d new Key(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n            \" already exists in the FsDatasetCache with state \" +\n            prevValue.state);\n      }\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5394: Fix race conditions in DN caching and uncaching (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 7:00 PM",
          "commitName": "97199baea1c41a66bd2a88bda31742ef6ddcb5dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "21/10/13 12:29 PM",
          "commitNameOld": "f9c08d02ebe4a5477cf5d753f0d9d48fc6f9fa48",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 17.31,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,17 @@\n-  void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n-      FileInputStream blockIn, FileInputStream metaIn) {\n-    if (isCached(bpid, block.getBlockId())) {\n-      return;\n-    }\n-    MappableBlock mapBlock \u003d null;\n-    try {\n-      mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n-    } catch (IOException e) {\n-      LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n-          + \" MappableBlock\", e);\n-      IOUtils.closeQuietly(blockIn);\n-      IOUtils.closeQuietly(metaIn);\n-      return;\n-    }\n-    // Check if there\u0027s sufficient cache capacity\n-    boolean success \u003d false;\n-    long bytes \u003d mapBlock.getNumBytes();\n-    long used \u003d usedBytes.get();\n-    while (used+bytes \u003c maxBytes) {\n-      if (usedBytes.compareAndSet(used, used+bytes)) {\n-        success \u003d true;\n-        break;\n+  synchronized void cacheBlock(long blockId, String bpid,\n+      String blockFileName, long length, long genstamp,\n+      Executor volumeExecutor) {\n+    Key key \u003d new Key(blockId, bpid);\n+    Value prevValue \u003d mappableBlockMap.get(key);\n+    if (prevValue !\u003d null) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n+            \" already exists in the FsDatasetCache with state \" +\n+            prevValue.state);\n       }\n-      used \u003d usedBytes.get();\n-    }\n-    if (!success) {\n-      LOG.warn(String.format(\n-          \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n-          mapBlock.getBlock().toString(),\n-          DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n-          used, bytes, maxBytes));\n-      mapBlock.close();\n       return;\n     }\n-    // Submit it to the worker pool to be cached\n-    volume.getExecutor().execute(new WorkerTask(mapBlock));\n+    mappableBlockMap.put(key, new Value(null, State.CACHING));\n+    volumeExecutor.execute(\n+        new CachingTask(key, blockFileName, length, genstamp));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void cacheBlock(long blockId, String bpid,\n      String blockFileName, long length, long genstamp,\n      Executor volumeExecutor) {\n    Key key \u003d new Key(blockId, bpid);\n    Value prevValue \u003d mappableBlockMap.get(key);\n    if (prevValue !\u003d null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Block with id \" + blockId + \", pool \" + bpid +\n            \" already exists in the FsDatasetCache with state \" +\n            prevValue.state);\n      }\n      return;\n    }\n    mappableBlockMap.put(key, new Value(null, State.CACHING));\n    volumeExecutor.execute(\n        new CachingTask(key, blockFileName, length, genstamp));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "15d08c4778350a86d7bae0174aeb48f8d8f61cce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5349. DNA_CACHE and DNA_UNCACHE should be by blockId only (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532116 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 3:19 PM",
      "commitName": "15d08c4778350a86d7bae0174aeb48f8d8f61cce",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "13/09/13 4:27 PM",
      "commitNameOld": "40eb94ade3161d93e7a762a839004748f6d0ae89",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 30.95,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n       FileInputStream blockIn, FileInputStream metaIn) {\n-    if (isCached(bpid, block)) {\n+    if (isCached(bpid, block.getBlockId())) {\n       return;\n     }\n     MappableBlock mapBlock \u003d null;\n     try {\n       mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n     } catch (IOException e) {\n       LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n           + \" MappableBlock\", e);\n       IOUtils.closeQuietly(blockIn);\n       IOUtils.closeQuietly(metaIn);\n       return;\n     }\n     // Check if there\u0027s sufficient cache capacity\n     boolean success \u003d false;\n     long bytes \u003d mapBlock.getNumBytes();\n     long used \u003d usedBytes.get();\n     while (used+bytes \u003c maxBytes) {\n       if (usedBytes.compareAndSet(used, used+bytes)) {\n         success \u003d true;\n         break;\n       }\n       used \u003d usedBytes.get();\n     }\n     if (!success) {\n       LOG.warn(String.format(\n           \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n           mapBlock.getBlock().toString(),\n           DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n           used, bytes, maxBytes));\n       mapBlock.close();\n       return;\n     }\n     // Submit it to the worker pool to be cached\n     volume.getExecutor().execute(new WorkerTask(mapBlock));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n      FileInputStream blockIn, FileInputStream metaIn) {\n    if (isCached(bpid, block.getBlockId())) {\n      return;\n    }\n    MappableBlock mapBlock \u003d null;\n    try {\n      mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n    } catch (IOException e) {\n      LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n          + \" MappableBlock\", e);\n      IOUtils.closeQuietly(blockIn);\n      IOUtils.closeQuietly(metaIn);\n      return;\n    }\n    // Check if there\u0027s sufficient cache capacity\n    boolean success \u003d false;\n    long bytes \u003d mapBlock.getNumBytes();\n    long used \u003d usedBytes.get();\n    while (used+bytes \u003c maxBytes) {\n      if (usedBytes.compareAndSet(used, used+bytes)) {\n        success \u003d true;\n        break;\n      }\n      used \u003d usedBytes.get();\n    }\n    if (!success) {\n      LOG.warn(String.format(\n          \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n          mapBlock.getBlock().toString(),\n          DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n          used, bytes, maxBytes));\n      mapBlock.close();\n      return;\n    }\n    // Submit it to the worker pool to be cached\n    volume.getExecutor().execute(new WorkerTask(mapBlock));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java",
      "extendedDetails": {}
    },
    "b992219fa13ccee2b417d91222fd0c3e8c3ffe11": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5050.  Add DataNode support for mlock and munlock  (contributed by Andrew Wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1517106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 8:41 PM",
      "commitName": "b992219fa13ccee2b417d91222fd0c3e8c3ffe11",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,38 @@\n+  void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n+      FileInputStream blockIn, FileInputStream metaIn) {\n+    if (isCached(bpid, block)) {\n+      return;\n+    }\n+    MappableBlock mapBlock \u003d null;\n+    try {\n+      mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n+          + \" MappableBlock\", e);\n+      IOUtils.closeQuietly(blockIn);\n+      IOUtils.closeQuietly(metaIn);\n+      return;\n+    }\n+    // Check if there\u0027s sufficient cache capacity\n+    boolean success \u003d false;\n+    long bytes \u003d mapBlock.getNumBytes();\n+    long used \u003d usedBytes.get();\n+    while (used+bytes \u003c maxBytes) {\n+      if (usedBytes.compareAndSet(used, used+bytes)) {\n+        success \u003d true;\n+        break;\n+      }\n+      used \u003d usedBytes.get();\n+    }\n+    if (!success) {\n+      LOG.warn(String.format(\n+          \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n+          mapBlock.getBlock().toString(),\n+          DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n+          used, bytes, maxBytes));\n+      mapBlock.close();\n+      return;\n+    }\n+    // Submit it to the worker pool to be cached\n+    volume.getExecutor().execute(new WorkerTask(mapBlock));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void cacheBlock(String bpid, Block block, FsVolumeImpl volume,\n      FileInputStream blockIn, FileInputStream metaIn) {\n    if (isCached(bpid, block)) {\n      return;\n    }\n    MappableBlock mapBlock \u003d null;\n    try {\n      mapBlock \u003d new MappableBlock(bpid, block, volume, blockIn, metaIn);\n    } catch (IOException e) {\n      LOG.warn(\"Failed to cache replica \" + block + \": Could not instantiate\"\n          + \" MappableBlock\", e);\n      IOUtils.closeQuietly(blockIn);\n      IOUtils.closeQuietly(metaIn);\n      return;\n    }\n    // Check if there\u0027s sufficient cache capacity\n    boolean success \u003d false;\n    long bytes \u003d mapBlock.getNumBytes();\n    long used \u003d usedBytes.get();\n    while (used+bytes \u003c maxBytes) {\n      if (usedBytes.compareAndSet(used, used+bytes)) {\n        success \u003d true;\n        break;\n      }\n      used \u003d usedBytes.get();\n    }\n    if (!success) {\n      LOG.warn(String.format(\n          \"Failed to cache replica %s: %s exceeded (%d + %d \u003e %d)\",\n          mapBlock.getBlock().toString(),\n          DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,\n          used, bytes, maxBytes));\n      mapBlock.close();\n      return;\n    }\n    // Submit it to the worker pool to be cached\n    volume.getExecutor().execute(new WorkerTask(mapBlock));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetCache.java"
    }
  }
}