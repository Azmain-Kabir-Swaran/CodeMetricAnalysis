{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BuiltInGzipDecompressor.java",
  "functionName": "executeTrailerState",
  "functionId": "executeTrailerState",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
  "functionStartLine": 354,
  "functionEndLine": 403,
  "numCommitsSeen": 10,
  "timeTaken": 1103,
  "changeHistory": [
    "6f79fffb8682cef2e7f8df23ffec384298219011",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "2a248dfc32e5061c1f80295f448ca525ade764c6"
  ],
  "changeHistoryShort": {
    "6f79fffb8682cef2e7f8df23ffec384298219011": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "2a248dfc32e5061c1f80295f448ca525ade764c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6f79fffb8682cef2e7f8df23ffec384298219011": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8900. BuiltInGzipDecompressor throws IOException - stored gzip size doesn\u0027t match decompressed size. Contributed by Slavik Krassovsky.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1399377 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/10/12 11:36 AM",
      "commitName": "6f79fffb8682cef2e7f8df23ffec384298219011",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 53.73,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   private void executeTrailerState() throws IOException {\n \n     if (userBufLen \u003c\u003d 0) {\n       return;\n     }\n \n     // verify that the CRC-32 of the decompressed stream matches the value\n     // stored in the gzip trailer\n     if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n       // localBuf was empty before we handed off to Inflater, so we handle this\n       // exactly like header fields\n       assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n       int n \u003d Math.min(userBufLen, 4-localBufOff);\n       copyBytesToLocal(n);\n       if (localBufOff \u003e\u003d 4) {\n         long streamCRC \u003d readUIntLE(localBuf, 0);\n         if (streamCRC !\u003d crc.getValue()) {\n           throw new IOException(\"gzip stream CRC failure\");\n         }\n         localBufOff \u003d 0;\n         crc.reset();\n         state \u003d GzipStateLabel.TRAILER_SIZE;\n       }\n     }\n \n     if (userBufLen \u003c\u003d 0) {\n       return;\n     }\n \n     // verify that the mod-2^32 decompressed stream size matches the value\n     // stored in the gzip trailer\n     if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n       assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n       int n \u003d Math.min(userBufLen, 4-localBufOff);\n       copyBytesToLocal(n);       // modifies userBufLen, etc.\n       if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n         long inputSize \u003d readUIntLE(localBuf, 0);\n-        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffff)) {\n+        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffffL)) {\n           throw new IOException(\n             \"stored gzip size doesn\u0027t match decompressed size\");\n         }\n         localBufOff \u003d 0;\n         state \u003d GzipStateLabel.FINISHED;\n       }\n     }\n \n     if (state \u003d\u003d GzipStateLabel.FINISHED) {\n       return;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void executeTrailerState() throws IOException {\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the CRC-32 of the decompressed stream matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n      // localBuf was empty before we handed off to Inflater, so we handle this\n      // exactly like header fields\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);\n      if (localBufOff \u003e\u003d 4) {\n        long streamCRC \u003d readUIntLE(localBuf, 0);\n        if (streamCRC !\u003d crc.getValue()) {\n          throw new IOException(\"gzip stream CRC failure\");\n        }\n        localBufOff \u003d 0;\n        crc.reset();\n        state \u003d GzipStateLabel.TRAILER_SIZE;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the mod-2^32 decompressed stream size matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);       // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n        long inputSize \u003d readUIntLE(localBuf, 0);\n        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffffL)) {\n          throw new IOException(\n            \"stored gzip size doesn\u0027t match decompressed size\");\n        }\n        localBufOff \u003d 0;\n        state \u003d GzipStateLabel.FINISHED;\n      }\n    }\n\n    if (state \u003d\u003d GzipStateLabel.FINISHED) {\n      return;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void executeTrailerState() throws IOException {\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the CRC-32 of the decompressed stream matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n      // localBuf was empty before we handed off to Inflater, so we handle this\n      // exactly like header fields\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);\n      if (localBufOff \u003e\u003d 4) {\n        long streamCRC \u003d readUIntLE(localBuf, 0);\n        if (streamCRC !\u003d crc.getValue()) {\n          throw new IOException(\"gzip stream CRC failure\");\n        }\n        localBufOff \u003d 0;\n        crc.reset();\n        state \u003d GzipStateLabel.TRAILER_SIZE;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the mod-2^32 decompressed stream size matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);       // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n        long inputSize \u003d readUIntLE(localBuf, 0);\n        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffff)) {\n          throw new IOException(\n            \"stored gzip size doesn\u0027t match decompressed size\");\n        }\n        localBufOff \u003d 0;\n        state \u003d GzipStateLabel.FINISHED;\n      }\n    }\n\n    if (state \u003d\u003d GzipStateLabel.FINISHED) {\n      return;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void executeTrailerState() throws IOException {\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the CRC-32 of the decompressed stream matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n      // localBuf was empty before we handed off to Inflater, so we handle this\n      // exactly like header fields\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);\n      if (localBufOff \u003e\u003d 4) {\n        long streamCRC \u003d readUIntLE(localBuf, 0);\n        if (streamCRC !\u003d crc.getValue()) {\n          throw new IOException(\"gzip stream CRC failure\");\n        }\n        localBufOff \u003d 0;\n        crc.reset();\n        state \u003d GzipStateLabel.TRAILER_SIZE;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the mod-2^32 decompressed stream size matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);       // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n        long inputSize \u003d readUIntLE(localBuf, 0);\n        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffff)) {\n          throw new IOException(\n            \"stored gzip size doesn\u0027t match decompressed size\");\n        }\n        localBufOff \u003d 0;\n        state \u003d GzipStateLabel.FINISHED;\n      }\n    }\n\n    if (state \u003d\u003d GzipStateLabel.FINISHED) {\n      return;\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void executeTrailerState() throws IOException {\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the CRC-32 of the decompressed stream matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n      // localBuf was empty before we handed off to Inflater, so we handle this\n      // exactly like header fields\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);\n      if (localBufOff \u003e\u003d 4) {\n        long streamCRC \u003d readUIntLE(localBuf, 0);\n        if (streamCRC !\u003d crc.getValue()) {\n          throw new IOException(\"gzip stream CRC failure\");\n        }\n        localBufOff \u003d 0;\n        crc.reset();\n        state \u003d GzipStateLabel.TRAILER_SIZE;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the mod-2^32 decompressed stream size matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);       // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n        long inputSize \u003d readUIntLE(localBuf, 0);\n        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffff)) {\n          throw new IOException(\n            \"stored gzip size doesn\u0027t match decompressed size\");\n        }\n        localBufOff \u003d 0;\n        state \u003d GzipStateLabel.FINISHED;\n      }\n    }\n\n    if (state \u003d\u003d GzipStateLabel.FINISHED) {\n      return;\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "2a248dfc32e5061c1f80295f448ca525ade764c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6835. Add support for concatenated gzip input. Contributed by Greg Roelofs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@961532 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/10 4:22 PM",
      "commitName": "2a248dfc32e5061c1f80295f448ca525ade764c6",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,50 @@\n+  private void executeTrailerState() throws IOException {\n+\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    // verify that the CRC-32 of the decompressed stream matches the value\n+    // stored in the gzip trailer\n+    if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n+      // localBuf was empty before we handed off to Inflater, so we handle this\n+      // exactly like header fields\n+      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n+      int n \u003d Math.min(userBufLen, 4-localBufOff);\n+      copyBytesToLocal(n);\n+      if (localBufOff \u003e\u003d 4) {\n+        long streamCRC \u003d readUIntLE(localBuf, 0);\n+        if (streamCRC !\u003d crc.getValue()) {\n+          throw new IOException(\"gzip stream CRC failure\");\n+        }\n+        localBufOff \u003d 0;\n+        crc.reset();\n+        state \u003d GzipStateLabel.TRAILER_SIZE;\n+      }\n+    }\n+\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    // verify that the mod-2^32 decompressed stream size matches the value\n+    // stored in the gzip trailer\n+    if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n+      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n+      int n \u003d Math.min(userBufLen, 4-localBufOff);\n+      copyBytesToLocal(n);       // modifies userBufLen, etc.\n+      if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n+        long inputSize \u003d readUIntLE(localBuf, 0);\n+        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffff)) {\n+          throw new IOException(\n+            \"stored gzip size doesn\u0027t match decompressed size\");\n+        }\n+        localBufOff \u003d 0;\n+        state \u003d GzipStateLabel.FINISHED;\n+      }\n+    }\n+\n+    if (state \u003d\u003d GzipStateLabel.FINISHED) {\n+      return;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void executeTrailerState() throws IOException {\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the CRC-32 of the decompressed stream matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_CRC) {\n      // localBuf was empty before we handed off to Inflater, so we handle this\n      // exactly like header fields\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);\n      if (localBufOff \u003e\u003d 4) {\n        long streamCRC \u003d readUIntLE(localBuf, 0);\n        if (streamCRC !\u003d crc.getValue()) {\n          throw new IOException(\"gzip stream CRC failure\");\n        }\n        localBufOff \u003d 0;\n        crc.reset();\n        state \u003d GzipStateLabel.TRAILER_SIZE;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // verify that the mod-2^32 decompressed stream size matches the value\n    // stored in the gzip trailer\n    if (state \u003d\u003d GzipStateLabel.TRAILER_SIZE) {\n      assert (localBufOff \u003c 4);  // initially 0, but may need multiple calls\n      int n \u003d Math.min(userBufLen, 4-localBufOff);\n      copyBytesToLocal(n);       // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 4) {    // should be strictly \u003d\u003d\n        long inputSize \u003d readUIntLE(localBuf, 0);\n        if (inputSize !\u003d (inflater.getBytesWritten() \u0026 0xffffffff)) {\n          throw new IOException(\n            \"stored gzip size doesn\u0027t match decompressed size\");\n        }\n        localBufOff \u003d 0;\n        state \u003d GzipStateLabel.FINISHED;\n      }\n    }\n\n    if (state \u003d\u003d GzipStateLabel.FINISHED) {\n      return;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
    }
  }
}