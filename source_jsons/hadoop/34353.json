{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLocalizer.java",
  "functionName": "main",
  "functionId": "main___argv-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
  "functionStartLine": 448,
  "functionEndLine": 491,
  "numCommitsSeen": 42,
  "timeTaken": 11428,
  "changeHistory": [
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
    "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494",
    "d8923cdbf1567aee10a54f144fef734d1465ebed",
    "9e19f758c1950cbcfcd1969461a8a910efca0767",
    "c380a22031a62e2d2fe533079e3780f06b069943",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": "Ybodychange",
    "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494": "Ybodychange",
    "d8923cdbf1567aee10a54f144fef734d1465ebed": "Ybodychange",
    "9e19f758c1950cbcfcd1969461a8a910efca0767": "Ybodychange",
    "c380a22031a62e2d2fe533079e3780f06b069943": "Ybodychange",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8672.  Improve token filename management for localization.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/11/18 12:22 PM",
      "commitName": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/06/18 2:03 PM",
      "commitNameOld": "1cdce86d33d4b73ba6dd4136c966eb7e822b6f36",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 144.97,
      "commitsBetweenForRepo": 1201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public static void main(String[] argv) throws Throwable {\n     Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n     int nRet \u003d 0;\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n-      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n-      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n+      String tokenFileName \u003d argv[5];\n+      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 6, argv.length);\n+      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003c\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n-      ContainerLocalizer localizer \u003d\n-          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n-              appId, locId, localDirs,\n+      ContainerLocalizer localizer \u003d new ContainerLocalizer(\n+          FileContext.getLocalFSFileContext(), user,\n+              appId, locId, tokenFileName, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n       localizer.runLocalization(nmAddr);\n-      return;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space in both DefaultCE and LCE cases\n       e.printStackTrace(System.out);\n       LOG.error(\"Exception in main:\", e);\n       nRet \u003d -1;\n     } finally {\n       System.exit(nRet);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    int nRet \u003d 0;\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String tokenFileName \u003d argv[5];\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 6, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003c\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d new ContainerLocalizer(\n          FileContext.getLocalFSFileContext(), user,\n              appId, locId, tokenFileName, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      localizer.runLocalization(nmAddr);\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space in both DefaultCE and LCE cases\n      e.printStackTrace(System.out);\n      LOG.error(\"Exception in main:\", e);\n      nRet \u003d -1;\n    } finally {\n      System.exit(nRet);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7705. Create the container log directory with correct sticky bit in C code. Contributed by Yufei Gu.\n",
      "commitDate": "12/01/18 5:00 PM",
      "commitName": "2dcfc1876e4d73cf85a6b1b7de694b1b4cc54494",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "27/11/17 2:31 PM",
      "commitNameOld": "d8923cdbf1567aee10a54f144fef734d1465ebed",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 46.1,
      "commitsBetweenForRepo": 268,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public static void main(String[] argv) throws Throwable {\n     Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n     int nRet \u003d 0;\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n-      createLogDir();\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n       String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n       ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n       ContainerLocalizer localizer \u003d\n           new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n               appId, locId, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n       localizer.runLocalization(nmAddr);\n       return;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space in both DefaultCE and LCE cases\n       e.printStackTrace(System.out);\n       LOG.error(\"Exception in main:\", e);\n       nRet \u003d -1;\n     } finally {\n       System.exit(nRet);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    int nRet \u003d 0;\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      localizer.runLocalization(nmAddr);\n      return;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space in both DefaultCE and LCE cases\n      e.printStackTrace(System.out);\n      LOG.error(\"Exception in main:\", e);\n      nRet \u003d -1;\n    } finally {\n      System.exit(nRet);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "d8923cdbf1567aee10a54f144fef734d1465ebed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7363. ContainerLocalizer don\u0027t have a valid log4j config in case of Linux container executor. (Contributed by Yufei Gu)\n",
      "commitDate": "27/11/17 2:31 PM",
      "commitName": "d8923cdbf1567aee10a54f144fef734d1465ebed",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 97.6,
      "commitsBetweenForRepo": 850,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   public static void main(String[] argv) throws Throwable {\n     Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n     int nRet \u003d 0;\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n+      createLogDir();\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n       String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n       ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n       ContainerLocalizer localizer \u003d\n           new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n               appId, locId, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n       localizer.runLocalization(nmAddr);\n       return;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space in both DefaultCE and LCE cases\n       e.printStackTrace(System.out);\n       LOG.error(\"Exception in main:\", e);\n       nRet \u003d -1;\n     } finally {\n       System.exit(nRet);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    int nRet \u003d 0;\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      createLogDir();\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      localizer.runLocalization(nmAddr);\n      return;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space in both DefaultCE and LCE cases\n      e.printStackTrace(System.out);\n      LOG.error(\"Exception in main:\", e);\n      nRet \u003d -1;\n    } finally {\n      System.exit(nRet);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "9e19f758c1950cbcfcd1969461a8a910efca0767": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5641. Localizer leaves behind tarballs after container is complete. Contributed by Eric Badger\n",
      "commitDate": "25/01/17 1:41 PM",
      "commitName": "9e19f758c1950cbcfcd1969461a8a910efca0767",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/08/16 7:23 PM",
      "commitNameOld": "aea3e65749333b97d8c45280077f03d4ebddb5a8",
      "commitAuthorOld": "Ray Chiang",
      "daysBetweenCommits": 167.8,
      "commitsBetweenForRepo": 1092,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   public static void main(String[] argv) throws Throwable {\n     Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n+    int nRet \u003d 0;\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n       String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n       ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n       ContainerLocalizer localizer \u003d\n           new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n               appId, locId, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n       localizer.runLocalization(nmAddr);\n       return;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space in both DefaultCE and LCE cases\n       e.printStackTrace(System.out);\n       LOG.error(\"Exception in main:\", e);\n-      System.exit(-1);\n+      nRet \u003d -1;\n+    } finally {\n+      System.exit(nRet);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    int nRet \u003d 0;\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      localizer.runLocalization(nmAddr);\n      return;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space in both DefaultCE and LCE cases\n      e.printStackTrace(System.out);\n      LOG.error(\"Exception in main:\", e);\n      nRet \u003d -1;\n    } finally {\n      System.exit(nRet);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "c380a22031a62e2d2fe533079e3780f06b069943": {
      "type": "Ybodychange",
      "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
      "commitDate": "25/05/16 6:31 AM",
      "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "10/02/16 10:36 PM",
      "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 104.29,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   public static void main(String[] argv) throws Throwable {\n     Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n       String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n       ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n       ContainerLocalizer localizer \u003d\n           new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n               appId, locId, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n-      int nRet \u003d localizer.runLocalization(nmAddr);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(String.format(\"nRet: %d\", nRet));\n-      }\n-      System.exit(nRet);\n+      localizer.runLocalization(nmAddr);\n+      return;\n     } catch (Throwable e) {\n-      // Print error to stdout so that LCE can use it.\n+      // Print traces to stdout so that they can be logged by the NM address\n+      // space in both DefaultCE and LCE cases\n       e.printStackTrace(System.out);\n       LOG.error(\"Exception in main:\", e);\n-      throw e;\n+      System.exit(-1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      localizer.runLocalization(nmAddr);\n      return;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space in both DefaultCE and LCE cases\n      e.printStackTrace(System.out);\n      LOG.error(\"Exception in main:\", e);\n      System.exit(-1);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
      "commitDate": "22/10/14 3:57 PM",
      "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/10/14 10:14 AM",
      "commitNameOld": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 21.24,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,43 @@\n   public static void main(String[] argv) throws Throwable {\n     Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n       String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n       ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n       ContainerLocalizer localizer \u003d\n           new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n               appId, locId, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n-      System.exit(localizer.runLocalization(nmAddr));\n+      int nRet \u003d localizer.runLocalization(nmAddr);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(String.format(\"nRet: %d\", nRet));\n+      }\n+      System.exit(nRet);\n     } catch (Throwable e) {\n       // Print error to stdout so that LCE can use it.\n       e.printStackTrace(System.out);\n+      LOG.error(\"Exception in main:\", e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      int nRet \u003d localizer.runLocalization(nmAddr);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\"nRet: %d\", nRet));\n      }\n      System.exit(nRet);\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      LOG.error(\"Exception in main:\", e);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4300. OOM in AM can turn it into a zombie. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/07/12 2:08 PM",
      "commitName": "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "06/07/12 10:19 AM",
      "commitNameOld": "0e7204c9e740bfbe13b0128f7612e616e30c1970",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.16,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public static void main(String[] argv) throws Throwable {\n+    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n     // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n     // let $x \u003d $x/usercache for $local.dir\n     // MKDIR $x/$user/appcache/$appid\n     // MKDIR $x/$user/appcache/$appid/output\n     // MKDIR $x/$user/appcache/$appid/filecache\n     // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n       String user \u003d argv[0];\n       String appId \u003d argv[1];\n       String locId \u003d argv[2];\n       InetSocketAddress nmAddr \u003d\n           new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n       String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n       ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n       for (String sLocaldir : sLocaldirs) {\n         localDirs.add(new Path(sLocaldir));\n       }\n \n       final String uid \u003d\n           UserGroupInformation.getCurrentUser().getShortUserName();\n       if (!user.equals(uid)) {\n         // TODO: fail localization\n         LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n       }\n \n       ContainerLocalizer localizer \u003d\n           new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n               appId, locId, localDirs,\n               RecordFactoryProvider.getRecordFactory(null));\n       System.exit(localizer.runLocalization(nmAddr));\n     } catch (Throwable e) {\n       // Print error to stdout so that LCE can use it.\n       e.printStackTrace(System.out);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] argv) throws Throwable {\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n+  public static void main(String[] argv) throws Throwable {\n+    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n+    // let $x \u003d $x/usercache for $local.dir\n+    // MKDIR $x/$user/appcache/$appid\n+    // MKDIR $x/$user/appcache/$appid/output\n+    // MKDIR $x/$user/appcache/$appid/filecache\n+    // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+      String user \u003d argv[0];\n+      String appId \u003d argv[1];\n+      String locId \u003d argv[2];\n+      InetSocketAddress nmAddr \u003d\n+          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n+      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n+      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n+      for (String sLocaldir : sLocaldirs) {\n+        localDirs.add(new Path(sLocaldir));\n+      }\n+\n+      final String uid \u003d\n+          UserGroupInformation.getCurrentUser().getShortUserName();\n+      if (!user.equals(uid)) {\n+        // TODO: fail localization\n+        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n+      }\n+\n+      ContainerLocalizer localizer \u003d\n+          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n+              appId, locId, localDirs,\n+              RecordFactoryProvider.getRecordFactory(null));\n+      System.exit(localizer.runLocalization(nmAddr));\n+    } catch (Throwable e) {\n+      // Print error to stdout so that LCE can use it.\n+      e.printStackTrace(System.out);\n+      throw e;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] argv) throws Throwable {\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/LinuxResourceCalculatorPlugin.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
            "oldMethodName": "main",
            "newMethodName": "main"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n+  public static void main(String[] argv) throws Throwable {\n+    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n+    // let $x \u003d $x/usercache for $local.dir\n+    // MKDIR $x/$user/appcache/$appid\n+    // MKDIR $x/$user/appcache/$appid/output\n+    // MKDIR $x/$user/appcache/$appid/filecache\n+    // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+      String user \u003d argv[0];\n+      String appId \u003d argv[1];\n+      String locId \u003d argv[2];\n+      InetSocketAddress nmAddr \u003d\n+          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n+      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n+      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n+      for (String sLocaldir : sLocaldirs) {\n+        localDirs.add(new Path(sLocaldir));\n+      }\n+\n+      final String uid \u003d\n+          UserGroupInformation.getCurrentUser().getShortUserName();\n+      if (!user.equals(uid)) {\n+        // TODO: fail localization\n+        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n+      }\n+\n+      ContainerLocalizer localizer \u003d\n+          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n+              appId, locId, localDirs,\n+              RecordFactoryProvider.getRecordFactory(null));\n+      System.exit(localizer.runLocalization(nmAddr));\n+    } catch (Throwable e) {\n+      // Print error to stdout so that LCE can use it.\n+      e.printStackTrace(System.out);\n+      throw e;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] argv) throws Throwable {\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Throwable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n+  public static void main(String[] argv) throws Throwable {\n+    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n+    // let $x \u003d $x/usercache for $local.dir\n+    // MKDIR $x/$user/appcache/$appid\n+    // MKDIR $x/$user/appcache/$appid/output\n+    // MKDIR $x/$user/appcache/$appid/filecache\n+    // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+      String user \u003d argv[0];\n+      String appId \u003d argv[1];\n+      String locId \u003d argv[2];\n+      InetSocketAddress nmAddr \u003d\n+          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n+      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n+      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n+      for (String sLocaldir : sLocaldirs) {\n+        localDirs.add(new Path(sLocaldir));\n+      }\n+\n+      final String uid \u003d\n+          UserGroupInformation.getCurrentUser().getShortUserName();\n+      if (!user.equals(uid)) {\n+        // TODO: fail localization\n+        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n+      }\n+\n+      ContainerLocalizer localizer \u003d\n+          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n+              appId, locId, localDirs,\n+              RecordFactoryProvider.getRecordFactory(null));\n+      System.exit(localizer.runLocalization(nmAddr));\n+    } catch (Throwable e) {\n+      // Print error to stdout so that LCE can use it.\n+      e.printStackTrace(System.out);\n+      throw e;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] argv) throws Throwable {\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,37 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n+  public static void main(String[] argv) throws Throwable {\n+    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n+    // let $x \u003d $x/usercache for $local.dir\n+    // MKDIR $x/$user/appcache/$appid\n+    // MKDIR $x/$user/appcache/$appid/output\n+    // MKDIR $x/$user/appcache/$appid/filecache\n+    // LOAD $x/$user/appcache/$appid/appTokens\n     try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+      String user \u003d argv[0];\n+      String appId \u003d argv[1];\n+      String locId \u003d argv[2];\n+      InetSocketAddress nmAddr \u003d\n+          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n+      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n+      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n+      for (String sLocaldir : sLocaldirs) {\n+        localDirs.add(new Path(sLocaldir));\n+      }\n+\n+      final String uid \u003d\n+          UserGroupInformation.getCurrentUser().getShortUserName();\n+      if (!user.equals(uid)) {\n+        // TODO: fail localization\n+        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n+      }\n+\n+      ContainerLocalizer localizer \u003d\n+          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n+              appId, locId, localDirs,\n+              RecordFactoryProvider.getRecordFactory(null));\n+      System.exit(localizer.runLocalization(nmAddr));\n+    } catch (Throwable e) {\n+      // Print error to stdout so that LCE can use it.\n+      e.printStackTrace(System.out);\n+      throw e;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] argv) throws Throwable {\n    // usage: $0 user appId locId host port app_log_dir user_dir [user_dir]*\n    // let $x \u003d $x/usercache for $local.dir\n    // MKDIR $x/$user/appcache/$appid\n    // MKDIR $x/$user/appcache/$appid/output\n    // MKDIR $x/$user/appcache/$appid/filecache\n    // LOAD $x/$user/appcache/$appid/appTokens\n    try {\n      String user \u003d argv[0];\n      String appId \u003d argv[1];\n      String locId \u003d argv[2];\n      InetSocketAddress nmAddr \u003d\n          new InetSocketAddress(argv[3], Integer.parseInt(argv[4]));\n      String[] sLocaldirs \u003d Arrays.copyOfRange(argv, 5, argv.length);\n      ArrayList\u003cPath\u003e localDirs \u003d new ArrayList\u003cPath\u003e(sLocaldirs.length);\n      for (String sLocaldir : sLocaldirs) {\n        localDirs.add(new Path(sLocaldir));\n      }\n\n      final String uid \u003d\n          UserGroupInformation.getCurrentUser().getShortUserName();\n      if (!user.equals(uid)) {\n        // TODO: fail localization\n        LOG.warn(\"Localization running as \" + uid + \" not \" + user);\n      }\n\n      ContainerLocalizer localizer \u003d\n          new ContainerLocalizer(FileContext.getLocalFSFileContext(), user,\n              appId, locId, localDirs,\n              RecordFactoryProvider.getRecordFactory(null));\n      System.exit(localizer.runLocalization(nmAddr));\n    } catch (Throwable e) {\n      // Print error to stdout so that LCE can use it.\n      e.printStackTrace(System.out);\n      throw e;\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {
            "oldValue": "[args-String[]]",
            "newValue": "[argv-String[]]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  public static void main(String[] args) {\n+    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n+    System.out.println(\"Physical memory Size (bytes) : \"\n+        + plugin.getPhysicalMemorySize());\n+    System.out.println(\"Total Virtual memory Size (bytes) : \"\n+        + plugin.getVirtualMemorySize());\n+    System.out.println(\"Available Physical memory Size (bytes) : \"\n+        + plugin.getAvailablePhysicalMemorySize());\n+    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n+        + plugin.getAvailableVirtualMemorySize());\n+    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n+    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n+    System.out.println(\"Cumulative CPU time (ms) : \" +\n+            plugin.getCumulativeCpuTime());\n+    try {\n+      // Sleep so we can compute the CPU usage\n+      Thread.sleep(500L);\n+    } catch (InterruptedException e) {\n+      // do nothing\n+    }\n+    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n    System.out.println(\"Physical memory Size (bytes) : \"\n        + plugin.getPhysicalMemorySize());\n    System.out.println(\"Total Virtual memory Size (bytes) : \"\n        + plugin.getVirtualMemorySize());\n    System.out.println(\"Available Physical memory Size (bytes) : \"\n        + plugin.getAvailablePhysicalMemorySize());\n    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n        + plugin.getAvailableVirtualMemorySize());\n    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n    System.out.println(\"Cumulative CPU time (ms) : \" +\n            plugin.getCumulativeCpuTime());\n    try {\n      // Sleep so we can compute the CPU usage\n      Thread.sleep(500L);\n    } catch (InterruptedException e) {\n      // do nothing\n    }\n    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/LinuxResourceCalculatorPlugin.java"
    }
  }
}