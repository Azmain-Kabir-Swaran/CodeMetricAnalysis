{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CodecUtil.java",
  "functionName": "getCodecClassName",
  "functionId": "getCodecClassName___conf-Configuration__codec-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
  "functionStartLine": 237,
  "functionEndLine": 266,
  "numCommitsSeen": 18,
  "timeTaken": 1373,
  "changeHistory": [
    "c1a52b04d0cc5ad5c86ae93043655f313386f7f9",
    "c023c748869063fb67d14ea996569c42578d1cea"
  ],
  "changeHistoryShort": {
    "c1a52b04d0cc5ad5c86ae93043655f313386f7f9": "Ybodychange",
    "c023c748869063fb67d14ea996569c42578d1cea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c1a52b04d0cc5ad5c86ae93043655f313386f7f9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11427. Rename rs-default to rs.\n",
      "commitDate": "24/02/17 10:58 AM",
      "commitName": "c1a52b04d0cc5ad5c86ae93043655f313386f7f9",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "17/10/16 11:02 PM",
      "commitNameOld": "c023c748869063fb67d14ea996569c42578d1cea",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 129.54,
      "commitsBetweenForRepo": 796,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private static String getCodecClassName(Configuration conf, String codec) {\n     switch (codec) {\n-    case ErasureCodeConstants.RS_DEFAULT_CODEC_NAME:\n+    case ErasureCodeConstants.RS_CODEC_NAME:\n       return conf.get(\n-          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT_KEY,\n-          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT);\n+          CodecUtil.IO_ERASURECODE_CODEC_RS_KEY,\n+          CodecUtil.IO_ERASURECODE_CODEC_RS);\n     case ErasureCodeConstants.RS_LEGACY_CODEC_NAME:\n       //TODO:rs-legacy should be handled differently.\n       return conf.get(\n-          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT_KEY,\n-          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT);\n+          CodecUtil.IO_ERASURECODE_CODEC_RS_KEY,\n+          CodecUtil.IO_ERASURECODE_CODEC_RS);\n     case ErasureCodeConstants.XOR_CODEC_NAME:\n       return conf.get(\n           CodecUtil.IO_ERASURECODE_CODEC_XOR_KEY,\n           CodecUtil.IO_ERASURECODE_CODEC_XOR);\n     case ErasureCodeConstants.HHXOR_CODEC_NAME:\n       return conf.get(\n           CodecUtil.IO_ERASURECODE_CODEC_HHXOR_KEY,\n           CodecUtil.IO_ERASURECODE_CODEC_HHXOR);\n     default:\n       // For custom codec, we throw exception if the factory is not configured\n       String codecKey \u003d \"io.erasurecode.codec.\" + codec + \".coder\";\n       String codecClass \u003d conf.get(codecKey);\n       if (codecClass \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Codec not configured \" +\n                 \"for custom codec \" + codec);\n       }\n       return codecClass;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String getCodecClassName(Configuration conf, String codec) {\n    switch (codec) {\n    case ErasureCodeConstants.RS_CODEC_NAME:\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_RS_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_RS);\n    case ErasureCodeConstants.RS_LEGACY_CODEC_NAME:\n      //TODO:rs-legacy should be handled differently.\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_RS_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_RS);\n    case ErasureCodeConstants.XOR_CODEC_NAME:\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_XOR_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_XOR);\n    case ErasureCodeConstants.HHXOR_CODEC_NAME:\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_HHXOR_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_HHXOR);\n    default:\n      // For custom codec, we throw exception if the factory is not configured\n      String codecKey \u003d \"io.erasurecode.codec.\" + codec + \".coder\";\n      String codecClass \u003d conf.get(codecKey);\n      if (codecClass \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Codec not configured \" +\n                \"for custom codec \" + codec);\n      }\n      return codecClass;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
      "extendedDetails": {}
    },
    "c023c748869063fb67d14ea996569c42578d1cea": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13061. Refactor erasure coders. Contributed by Kai Sasaki\n",
      "commitDate": "17/10/16 11:02 PM",
      "commitName": "c023c748869063fb67d14ea996569c42578d1cea",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,30 @@\n+  private static String getCodecClassName(Configuration conf, String codec) {\n+    switch (codec) {\n+    case ErasureCodeConstants.RS_DEFAULT_CODEC_NAME:\n+      return conf.get(\n+          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT_KEY,\n+          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT);\n+    case ErasureCodeConstants.RS_LEGACY_CODEC_NAME:\n+      //TODO:rs-legacy should be handled differently.\n+      return conf.get(\n+          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT_KEY,\n+          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT);\n+    case ErasureCodeConstants.XOR_CODEC_NAME:\n+      return conf.get(\n+          CodecUtil.IO_ERASURECODE_CODEC_XOR_KEY,\n+          CodecUtil.IO_ERASURECODE_CODEC_XOR);\n+    case ErasureCodeConstants.HHXOR_CODEC_NAME:\n+      return conf.get(\n+          CodecUtil.IO_ERASURECODE_CODEC_HHXOR_KEY,\n+          CodecUtil.IO_ERASURECODE_CODEC_HHXOR);\n+    default:\n+      // For custom codec, we throw exception if the factory is not configured\n+      String codecKey \u003d \"io.erasurecode.codec.\" + codec + \".coder\";\n+      String codecClass \u003d conf.get(codecKey);\n+      if (codecClass \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Codec not configured \" +\n+                \"for custom codec \" + codec);\n+      }\n+      return codecClass;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static String getCodecClassName(Configuration conf, String codec) {\n    switch (codec) {\n    case ErasureCodeConstants.RS_DEFAULT_CODEC_NAME:\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT);\n    case ErasureCodeConstants.RS_LEGACY_CODEC_NAME:\n      //TODO:rs-legacy should be handled differently.\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_RS_DEFAULT);\n    case ErasureCodeConstants.XOR_CODEC_NAME:\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_XOR_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_XOR);\n    case ErasureCodeConstants.HHXOR_CODEC_NAME:\n      return conf.get(\n          CodecUtil.IO_ERASURECODE_CODEC_HHXOR_KEY,\n          CodecUtil.IO_ERASURECODE_CODEC_HHXOR);\n    default:\n      // For custom codec, we throw exception if the factory is not configured\n      String codecKey \u003d \"io.erasurecode.codec.\" + codec + \".coder\";\n      String codecClass \u003d conf.get(codecKey);\n      if (codecClass \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Codec not configured \" +\n                \"for custom codec \" + codec);\n      }\n      return codecClass;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java"
    }
  }
}