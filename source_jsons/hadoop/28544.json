{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogServlet.java",
  "functionName": "getLogFile",
  "functionId": "getLogFile___req-HttpServletRequest__containerIdStr-String__filename-String__format-String__size-String__nmId-String__redirectedFromNode-boolean__clusterId-String__manualRedirection-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
  "functionStartLine": 353,
  "functionEndLine": 444,
  "numCommitsSeen": 7,
  "timeTaken": 3398,
  "changeHistory": [
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842",
    "9520b2ad790bd8527033a03e7ee50da71a85df1d",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a"
  ],
  "changeHistoryShort": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": "Ybodychange",
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": "Ybodychange",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
      "commitDate": "28/04/20 9:53 AM",
      "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,92 @@\n   public Response getLogFile(HttpServletRequest req, String containerIdStr,\n       String filename, String format, String size, String nmId,\n-      boolean redirectedFromNode, String clusterId) {\n+      boolean redirectedFromNode, String clusterId, boolean manualRedirection) {\n     ContainerId containerId;\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"Invalid ContainerId: \" + containerIdStr);\n     }\n \n     final long length \u003d LogWebServiceUtils.parseLongParam(size);\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     BasicAppInfo appInfo;\n     try {\n       appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n       LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n               filename, format, length, false);\n     }\n     String appOwner \u003d appInfo.getUser();\n     if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, appOwner, null,\n               containerIdStr, filename, format, length, false);\n     }\n \n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n         } catch (Exception ex) {\n           LOG.debug(\"Exception happened during obtaining NM web address \" +\n               \"from RM.\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n               req, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString(), clusterId);\n         } catch (Exception ex) {\n           LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get aggregated logs instead of re-directing the\n         // request.\n         // If this is the redirect request from NM, we should not re-direct the\n         // request back. Simply output the aggregated logs.\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirectedFromNode) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n               nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n+\n+\n+      if (manualRedirection) {\n+        return createLocationResponse(resURI, createEmptyStream());\n+      }\n+\n       Response.ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getLogFile(HttpServletRequest req, String containerIdStr,\n      String filename, String format, String size, String nmId,\n      boolean redirectedFromNode, String clusterId, boolean manualRedirection) {\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    BasicAppInfo appInfo;\n    try {\n      appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"Exception happened during obtaining NM web address \" +\n              \"from RM.\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n              req, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString(), clusterId);\n        } catch (Exception ex) {\n          LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n              nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n\n\n      if (manualRedirection) {\n        return createLocationResponse(resURI, createEmptyStream());\n      }\n\n      Response.ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest, containerIdStr-String, filename-String, format-String, size-String, nmId-String, redirectedFromNode-boolean, clusterId-String]",
            "newValue": "[req-HttpServletRequest, containerIdStr-String, filename-String, format-String, size-String, nmId-String, redirectedFromNode-boolean, clusterId-String, manualRedirection-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,92 @@\n   public Response getLogFile(HttpServletRequest req, String containerIdStr,\n       String filename, String format, String size, String nmId,\n-      boolean redirectedFromNode, String clusterId) {\n+      boolean redirectedFromNode, String clusterId, boolean manualRedirection) {\n     ContainerId containerId;\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"Invalid ContainerId: \" + containerIdStr);\n     }\n \n     final long length \u003d LogWebServiceUtils.parseLongParam(size);\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     BasicAppInfo appInfo;\n     try {\n       appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n       LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n               filename, format, length, false);\n     }\n     String appOwner \u003d appInfo.getUser();\n     if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, appOwner, null,\n               containerIdStr, filename, format, length, false);\n     }\n \n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n         } catch (Exception ex) {\n           LOG.debug(\"Exception happened during obtaining NM web address \" +\n               \"from RM.\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n               req, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString(), clusterId);\n         } catch (Exception ex) {\n           LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get aggregated logs instead of re-directing the\n         // request.\n         // If this is the redirect request from NM, we should not re-direct the\n         // request back. Simply output the aggregated logs.\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirectedFromNode) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n               nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n+\n+\n+      if (manualRedirection) {\n+        return createLocationResponse(resURI, createEmptyStream());\n+      }\n+\n       Response.ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getLogFile(HttpServletRequest req, String containerIdStr,\n      String filename, String format, String size, String nmId,\n      boolean redirectedFromNode, String clusterId, boolean manualRedirection) {\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    BasicAppInfo appInfo;\n    try {\n      appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"Exception happened during obtaining NM web address \" +\n              \"from RM.\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n              req, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString(), clusterId);\n        } catch (Exception ex) {\n          LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n              nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n\n\n      if (manualRedirection) {\n        return createLocationResponse(resURI, createEmptyStream());\n      }\n\n      Response.ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
          "extendedDetails": {}
        }
      ]
    },
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal\n",
      "commitDate": "06/02/20 3:25 AM",
      "commitName": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "22/01/20 7:25 AM",
      "commitNameOld": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 14.83,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,86 @@\n   public Response getLogFile(HttpServletRequest req, String containerIdStr,\n       String filename, String format, String size, String nmId,\n       boolean redirectedFromNode, String clusterId) {\n     ContainerId containerId;\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"Invalid ContainerId: \" + containerIdStr);\n     }\n \n     final long length \u003d LogWebServiceUtils.parseLongParam(size);\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     BasicAppInfo appInfo;\n     try {\n       appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      // directly find logs from HDFS.\n+      LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n               filename, format, length, false);\n     }\n     String appOwner \u003d appInfo.getUser();\n     if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, appOwner, null,\n               containerIdStr, filename, format, length, false);\n     }\n \n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n         } catch (Exception ex) {\n           LOG.debug(\"Exception happened during obtaining NM web address \" +\n               \"from RM.\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n               req, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString(), clusterId);\n         } catch (Exception ex) {\n+          LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get aggregated logs instead of re-directing the\n         // request.\n         // If this is the redirect request from NM, we should not re-direct the\n         // request back. Simply output the aggregated logs.\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirectedFromNode) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n               nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       Response.ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogFile(HttpServletRequest req, String containerIdStr,\n      String filename, String format, String size, String nmId,\n      boolean redirectedFromNode, String clusterId) {\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    BasicAppInfo appInfo;\n    try {\n      appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"Exception happened during obtaining NM web address \" +\n              \"from RM.\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n              req, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString(), clusterId);\n        } catch (Exception ex) {\n          LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n              nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
      "extendedDetails": {}
    },
    "9520b2ad790bd8527033a03e7ee50da71a85df1d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10083. Provide utility to ask whether an application is in final status. Contributed by Adam Antal\n",
      "commitDate": "22/01/20 7:25 AM",
      "commitName": "9520b2ad790bd8527033a03e7ee50da71a85df1d",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/01/20 8:16 AM",
      "commitNameOld": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 15.96,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   public Response getLogFile(HttpServletRequest req, String containerIdStr,\n       String filename, String format, String size, String nmId,\n       boolean redirectedFromNode, String clusterId) {\n     ContainerId containerId;\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException ex) {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"Invalid ContainerId: \" + containerIdStr);\n     }\n \n     final long length \u003d LogWebServiceUtils.parseLongParam(size);\n \n     ApplicationId appId \u003d containerId.getApplicationAttemptId()\n         .getApplicationId();\n     BasicAppInfo appInfo;\n     try {\n       appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n               filename, format, length, false);\n     }\n     String appOwner \u003d appInfo.getUser();\n-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .sendStreamOutputResponse(factory, appId, appOwner, null,\n               containerIdStr, filename, format, length, false);\n     }\n \n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n         } catch (Exception ex) {\n           LOG.debug(\"Exception happened during obtaining NM web address \" +\n               \"from RM.\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n               req, appId.toString(),\n               containerId.getApplicationAttemptId().toString(),\n               containerId.toString(), clusterId);\n         } catch (Exception ex) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get aggregated logs instead of re-directing the\n         // request.\n         // If this is the redirect request from NM, we should not re-direct the\n         // request back. Simply output the aggregated logs.\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirectedFromNode) {\n           // output the aggregated logs\n           return LogWebServiceUtils\n               .sendStreamOutputResponse(factory, appId, appOwner, null,\n                   containerIdStr, filename, format, length, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n               nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       Response.ResponseBuilder response \u003d Response.status(\n           HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogFile(HttpServletRequest req, String containerIdStr,\n      String filename, String format, String size, String nmId,\n      boolean redirectedFromNode, String clusterId) {\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    BasicAppInfo appInfo;\n    try {\n      appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"Exception happened during obtaining NM web address \" +\n              \"from RM.\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n              req, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString(), clusterId);\n        } catch (Exception ex) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n              nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java",
      "extendedDetails": {}
    },
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal\n",
      "commitDate": "06/01/20 8:16 AM",
      "commitName": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,85 @@\n+  public Response getLogFile(HttpServletRequest req, String containerIdStr,\n+      String filename, String format, String size, String nmId,\n+      boolean redirectedFromNode, String clusterId) {\n+    ContainerId containerId;\n+    try {\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException ex) {\n+      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n+          \"Invalid ContainerId: \" + containerIdStr);\n+    }\n+\n+    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n+\n+    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n+        .getApplicationId();\n+    BasicAppInfo appInfo;\n+    try {\n+      appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n+    } catch (Exception ex) {\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n+              filename, format, length, false);\n+    }\n+    String appOwner \u003d appInfo.getUser();\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .sendStreamOutputResponse(factory, appId, appOwner, null,\n+              containerIdStr, filename, format, length, false);\n+    }\n+\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n+        } catch (Exception ex) {\n+          LOG.debug(\"Exception happened during obtaining NM web address \" +\n+              \"from RM.\", ex);\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n+              req, appId.toString(),\n+              containerId.getApplicationAttemptId().toString(),\n+              containerId.toString(), clusterId);\n+        } catch (Exception ex) {\n+          // output the aggregated logs\n+          return LogWebServiceUtils\n+              .sendStreamOutputResponse(factory, appId, appOwner, null,\n+                  containerIdStr, filename, format, length, true);\n+        }\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get aggregated logs instead of re-directing the\n+        // request.\n+        // If this is the redirect request from NM, we should not re-direct the\n+        // request back. Simply output the aggregated logs.\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // output the aggregated logs\n+          return LogWebServiceUtils\n+              .sendStreamOutputResponse(factory, appId, appOwner, null,\n+                  containerIdStr, filename, format, length, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n+              nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d Response.status(\n+          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n+          \"The application is not at Running or Finished State.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getLogFile(HttpServletRequest req, String containerIdStr,\n      String filename, String format, String size, String nmId,\n      boolean redirectedFromNode, String clusterId) {\n    ContainerId containerId;\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException ex) {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"Invalid ContainerId: \" + containerIdStr);\n    }\n\n    final long length \u003d LogWebServiceUtils.parseLongParam(size);\n\n    ApplicationId appId \u003d containerId.getApplicationAttemptId()\n        .getApplicationId();\n    BasicAppInfo appInfo;\n    try {\n      appInfo \u003d appInfoProvider.getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, null, null, containerIdStr,\n              filename, format, length, false);\n    }\n    String appOwner \u003d appInfo.getUser();\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .sendStreamOutputResponse(factory, appId, appOwner, null,\n              containerIdStr, filename, format, length, false);\n    }\n\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d getNMWebAddressFromRM(nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"Exception happened during obtaining NM web address \" +\n              \"from RM.\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d appInfoProvider.getNodeHttpAddress(\n              req, appId.toString(),\n              containerId.getApplicationAttemptId().toString(),\n              containerId.toString(), clusterId);\n        } catch (Exception ex) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get aggregated logs instead of re-directing the\n        // request.\n        // If this is the redirect request from NM, we should not re-direct the\n        // request back. Simply output the aggregated logs.\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // output the aggregated logs\n          return LogWebServiceUtils\n              .sendStreamOutputResponse(factory, appId, appOwner, null,\n                  containerIdStr, filename, format, length, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs/\" + filename;\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(),\n              nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d Response.status(\n          HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND,\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogServlet.java"
    }
  }
}