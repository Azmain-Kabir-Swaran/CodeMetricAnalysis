{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "commonReserve",
  "functionId": "commonReserve___node-SchedulerNode__schedulerKey-SchedulerRequestKey__rmContainer-RMContainer__reservedResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 552,
  "functionEndLine": 581,
  "numCommitsSeen": 164,
  "timeTaken": 4826,
  "changeHistory": [
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434"
  ],
  "changeHistoryShort": {
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymodifierchange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/08/16 3:52 PM",
      "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 19.43,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-  private synchronized boolean commonReserve(SchedulerNode node,\n+  private boolean commonReserve(SchedulerNode node,\n       SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n       Resource reservedResource) {\n     try {\n       rmContainer.handle(new RMContainerReservedEvent(rmContainer\n           .getContainerId(), reservedResource, node.getNodeID(), schedulerKey));\n     } catch (InvalidStateTransitionException e) {\n       // We reach here could be caused by container already finished, return\n       // false indicate it fails\n       return false;\n     }\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(schedulerKey);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n       this.reservedContainers.put(schedulerKey, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n           + \" reserved container \" + rmContainer + \" on node \" + node\n           + \". This attempt currently has \" + reservedContainers.size()\n           + \" reserved containers at priority \" + schedulerKey.getPriority()\n           + \"; currentReservation \" + reservedResource);\n     }\n     \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean commonReserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Resource reservedResource) {\n    try {\n      rmContainer.handle(new RMContainerReservedEvent(rmContainer\n          .getContainerId(), reservedResource, node.getNodeID(), schedulerKey));\n    } catch (InvalidStateTransitionException e) {\n      // We reach here could be caused by container already finished, return\n      // false indicate it fails\n      return false;\n    }\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(schedulerKey);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(schedulerKey, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n          + \" reserved container \" + rmContainer + \" on node \" + node\n          + \". This attempt currently has \" + reservedContainers.size()\n          + \" reserved containers at priority \" + schedulerKey.getPriority()\n          + \"; currentReservation \" + reservedResource);\n    }\n    \n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {
        "oldValue": "[private, synchronized]",
        "newValue": "[private]"
      }
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n   private synchronized boolean commonReserve(SchedulerNode node,\n-      Priority priority, RMContainer rmContainer, Resource reservedResource) {\n+      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n+      Resource reservedResource) {\n     try {\n       rmContainer.handle(new RMContainerReservedEvent(rmContainer\n-          .getContainerId(), reservedResource, node.getNodeID(), priority));\n+          .getContainerId(), reservedResource, node.getNodeID(), schedulerKey));\n     } catch (InvalidStateTransitionException e) {\n       // We reach here could be caused by container already finished, return\n       // false indicate it fails\n       return false;\n     }\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(priority);\n+        this.reservedContainers.get(schedulerKey);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n-      this.reservedContainers.put(priority, reservedContainers);\n+      this.reservedContainers.put(schedulerKey, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n           + \" reserved container \" + rmContainer + \" on node \" + node\n           + \". This attempt currently has \" + reservedContainers.size()\n-          + \" reserved containers at priority \" + priority\n+          + \" reserved containers at priority \" + schedulerKey.getPriority()\n           + \"; currentReservation \" + reservedResource);\n     }\n     \n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized boolean commonReserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Resource reservedResource) {\n    try {\n      rmContainer.handle(new RMContainerReservedEvent(rmContainer\n          .getContainerId(), reservedResource, node.getNodeID(), schedulerKey));\n    } catch (InvalidStateTransitionException e) {\n      // We reach here could be caused by container already finished, return\n      // false indicate it fails\n      return false;\n    }\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(schedulerKey);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(schedulerKey, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n          + \" reserved container \" + rmContainer + \" on node \" + node\n          + \". This attempt currently has \" + reservedContainers.size()\n          + \" reserved containers at priority \" + schedulerKey.getPriority()\n          + \"; currentReservation \" + reservedResource);\n    }\n    \n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[node-SchedulerNode, priority-Priority, rmContainer-RMContainer, reservedResource-Resource]",
            "newValue": "[node-SchedulerNode, schedulerKey-SchedulerRequestKey, rmContainer-RMContainer, reservedResource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,30 @@\n   private synchronized boolean commonReserve(SchedulerNode node,\n-      Priority priority, RMContainer rmContainer, Resource reservedResource) {\n+      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n+      Resource reservedResource) {\n     try {\n       rmContainer.handle(new RMContainerReservedEvent(rmContainer\n-          .getContainerId(), reservedResource, node.getNodeID(), priority));\n+          .getContainerId(), reservedResource, node.getNodeID(), schedulerKey));\n     } catch (InvalidStateTransitionException e) {\n       // We reach here could be caused by container already finished, return\n       // false indicate it fails\n       return false;\n     }\n     \n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(priority);\n+        this.reservedContainers.get(schedulerKey);\n     if (reservedContainers \u003d\u003d null) {\n       reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n-      this.reservedContainers.put(priority, reservedContainers);\n+      this.reservedContainers.put(schedulerKey, reservedContainers);\n     }\n     reservedContainers.put(node.getNodeID(), rmContainer);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n           + \" reserved container \" + rmContainer + \" on node \" + node\n           + \". This attempt currently has \" + reservedContainers.size()\n-          + \" reserved containers at priority \" + priority\n+          + \" reserved containers at priority \" + schedulerKey.getPriority()\n           + \"; currentReservation \" + reservedResource);\n     }\n     \n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized boolean commonReserve(SchedulerNode node,\n      SchedulerRequestKey schedulerKey, RMContainer rmContainer,\n      Resource reservedResource) {\n    try {\n      rmContainer.handle(new RMContainerReservedEvent(rmContainer\n          .getContainerId(), reservedResource, node.getNodeID(), schedulerKey));\n    } catch (InvalidStateTransitionException e) {\n      // We reach here could be caused by container already finished, return\n      // false indicate it fails\n      return false;\n    }\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(schedulerKey);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(schedulerKey, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n          + \" reserved container \" + rmContainer + \" on node \" + node\n          + \". This attempt currently has \" + reservedContainers.size()\n          + \" reserved containers at priority \" + schedulerKey.getPriority()\n          + \"; currentReservation \" + reservedResource);\n    }\n    \n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,29 @@\n+  private synchronized boolean commonReserve(SchedulerNode node,\n+      Priority priority, RMContainer rmContainer, Resource reservedResource) {\n+    try {\n+      rmContainer.handle(new RMContainerReservedEvent(rmContainer\n+          .getContainerId(), reservedResource, node.getNodeID(), priority));\n+    } catch (InvalidStateTransitionException e) {\n+      // We reach here could be caused by container already finished, return\n+      // false indicate it fails\n+      return false;\n+    }\n+    \n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    if (reservedContainers \u003d\u003d null) {\n+      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n+      this.reservedContainers.put(priority, reservedContainers);\n+    }\n+    reservedContainers.put(node.getNodeID(), rmContainer);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n+          + \" reserved container \" + rmContainer + \" on node \" + node\n+          + \". This attempt currently has \" + reservedContainers.size()\n+          + \" reserved containers at priority \" + priority\n+          + \"; currentReservation \" + reservedResource);\n+    }\n+    \n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized boolean commonReserve(SchedulerNode node,\n      Priority priority, RMContainer rmContainer, Resource reservedResource) {\n    try {\n      rmContainer.handle(new RMContainerReservedEvent(rmContainer\n          .getContainerId(), reservedResource, node.getNodeID(), priority));\n    } catch (InvalidStateTransitionException e) {\n      // We reach here could be caused by container already finished, return\n      // false indicate it fails\n      return false;\n    }\n    \n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    if (reservedContainers \u003d\u003d null) {\n      reservedContainers \u003d new HashMap\u003cNodeId, RMContainer\u003e();\n      this.reservedContainers.put(priority, reservedContainers);\n    }\n    reservedContainers.put(node.getNodeID(), rmContainer);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Application attempt \" + getApplicationAttemptId()\n          + \" reserved container \" + rmContainer + \" on node \" + node\n          + \". This attempt currently has \" + reservedContainers.size()\n          + \" reserved containers at priority \" + priority\n          + \"; currentReservation \" + reservedResource);\n    }\n    \n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"
    }
  }
}