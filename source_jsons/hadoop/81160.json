{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SocketIOWithTimeout.java",
  "functionName": "select",
  "functionId": "select___channel-SelectableChannel__ops-int__timeout-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
  "functionStartLine": 322,
  "functionEndLine": 377,
  "numCommitsSeen": 11,
  "timeTaken": 1631,
  "changeHistory": [
    "df6b3162c11987ba5299c69cb251332228dacf36",
    "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "1191be630ff05c9f1a540b952a8e34665f7fc181",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "df6b3162c11987ba5299c69cb251332228dacf36": "Ybodychange",
    "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "1191be630ff05c9f1a540b952a8e34665f7fc181": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df6b3162c11987ba5299c69cb251332228dacf36": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16677. Recalculate the remaining timeout millis correctly while throwing an InterupptedException in SocketIOWithTimeout. (#1687)\n\n",
      "commitDate": "12/11/19 2:19 PM",
      "commitName": "df6b3162c11987ba5299c69cb251332228dacf36",
      "commitAuthor": "Xudong Cao",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 847.74,
      "commitsBetweenForRepo": 6952,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n     int select(SelectableChannel channel, int ops, long timeout) \n                                                    throws IOException {\n      \n       SelectorInfo info \u003d get(channel);\n       \n       SelectionKey key \u003d null;\n       int ret \u003d 0;\n+      long timeoutLeft \u003d timeout;\n       \n       try {\n         while (true) {\n           long start \u003d (timeout \u003d\u003d 0) ? 0 : Time.now();\n \n           key \u003d channel.register(info.selector, ops);\n-          ret \u003d info.selector.select(timeout);\n+          ret \u003d info.selector.select(timeoutLeft);\n           \n           if (ret !\u003d 0) {\n             return ret;\n           }\n           \n-          if (Thread.currentThread().isInterrupted()) {\n-            throw new InterruptedIOException(\"Interrupted while waiting for \"\n-                + \"IO on channel \" + channel + \". \" + timeout\n-                + \" millis timeout left.\");\n-          }\n-\n           /* Sometimes select() returns 0 much before timeout for \n            * unknown reasons. So select again if required.\n            */\n           if (timeout \u003e 0) {\n-            timeout -\u003d Time.now() - start;\n-            if (timeout \u003c\u003d 0) {\n-              return 0;\n-            }\n+            timeoutLeft -\u003d Time.now() - start;\n+            timeoutLeft \u003d Math.max(0, timeoutLeft);\n           }\n           \n+          if (Thread.currentThread().isInterrupted()) {\n+            throw new InterruptedIOException(\"Interrupted while waiting for \"\n+                + \"IO on channel \" + channel + \". Total timeout mills is \"\n+                + timeout + \", \" + timeoutLeft + \" millis timeout left.\");\n+          }\n+\n+          if (timeoutLeft \u003d\u003d 0) {\n+            return 0;\n+          }\n         }\n       } finally {\n         if (key !\u003d null) {\n           key.cancel();\n         }\n         \n         //clear the canceled key.\n         try {\n           info.selector.selectNow();\n         } catch (IOException e) {\n           LOG.info(\"Unexpected Exception while clearing selector : \", e);\n           // don\u0027t put the selector back.\n           info.close();\n           return ret; \n         }\n         \n         release(info);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      long timeoutLeft \u003d timeout;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : Time.now();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeoutLeft);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeoutLeft -\u003d Time.now() - start;\n            timeoutLeft \u003d Math.max(0, timeoutLeft);\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interrupted while waiting for \"\n                + \"IO on channel \" + channel + \". Total timeout mills is \"\n                + timeout + \", \" + timeoutLeft + \" millis timeout left.\");\n          }\n\n          if (timeoutLeft \u003d\u003d 0) {\n            return 0;\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {}
    },
    "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6221 RPC Client operations cannot be interrupted (stevel)\n",
      "commitDate": "26/01/15 2:04 PM",
      "commitName": "1f2b6956c2012a7d6ea7e7ba5116d3ad71c23d7e",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 884.88,
      "commitsBetweenForRepo": 5966,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     int select(SelectableChannel channel, int ops, long timeout) \n                                                    throws IOException {\n      \n       SelectorInfo info \u003d get(channel);\n       \n       SelectionKey key \u003d null;\n       int ret \u003d 0;\n       \n       try {\n         while (true) {\n           long start \u003d (timeout \u003d\u003d 0) ? 0 : Time.now();\n \n           key \u003d channel.register(info.selector, ops);\n           ret \u003d info.selector.select(timeout);\n           \n           if (ret !\u003d 0) {\n             return ret;\n           }\n           \n+          if (Thread.currentThread().isInterrupted()) {\n+            throw new InterruptedIOException(\"Interrupted while waiting for \"\n+                + \"IO on channel \" + channel + \". \" + timeout\n+                + \" millis timeout left.\");\n+          }\n+\n           /* Sometimes select() returns 0 much before timeout for \n            * unknown reasons. So select again if required.\n            */\n           if (timeout \u003e 0) {\n             timeout -\u003d Time.now() - start;\n             if (timeout \u003c\u003d 0) {\n               return 0;\n             }\n           }\n           \n-          if (Thread.currentThread().isInterrupted()) {\n-            throw new InterruptedIOException(\"Interruped while waiting for \" +\n-                                             \"IO on channel \" + channel +\n-                                             \". \" + timeout + \n-                                             \" millis timeout left.\");\n-          }\n         }\n       } finally {\n         if (key !\u003d null) {\n           key.cancel();\n         }\n         \n         //clear the canceled key.\n         try {\n           info.selector.selectNow();\n         } catch (IOException e) {\n           LOG.info(\"Unexpected Exception while clearing selector : \", e);\n           // don\u0027t put the selector back.\n           info.close();\n           return ret; \n         }\n         \n         release(info);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : Time.now();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interrupted while waiting for \"\n                + \"IO on channel \" + channel + \". \" + timeout\n                + \" millis timeout left.\");\n          }\n\n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d Time.now() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "03/05/12 2:57 PM",
      "commitNameOld": "03181022ab238b2d4f59932eb8eadbe7cb52a669",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 69.88,
      "commitsBetweenForRepo": 357,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     int select(SelectableChannel channel, int ops, long timeout) \n                                                    throws IOException {\n      \n       SelectorInfo info \u003d get(channel);\n       \n       SelectionKey key \u003d null;\n       int ret \u003d 0;\n       \n       try {\n         while (true) {\n-          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n+          long start \u003d (timeout \u003d\u003d 0) ? 0 : Time.now();\n \n           key \u003d channel.register(info.selector, ops);\n           ret \u003d info.selector.select(timeout);\n           \n           if (ret !\u003d 0) {\n             return ret;\n           }\n           \n           /* Sometimes select() returns 0 much before timeout for \n            * unknown reasons. So select again if required.\n            */\n           if (timeout \u003e 0) {\n-            timeout -\u003d System.currentTimeMillis() - start;\n+            timeout -\u003d Time.now() - start;\n             if (timeout \u003c\u003d 0) {\n               return 0;\n             }\n           }\n           \n           if (Thread.currentThread().isInterrupted()) {\n             throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                              \"IO on channel \" + channel +\n                                              \". \" + timeout + \n                                              \" millis timeout left.\");\n           }\n         }\n       } finally {\n         if (key !\u003d null) {\n           key.cancel();\n         }\n         \n         //clear the canceled key.\n         try {\n           info.selector.selectNow();\n         } catch (IOException e) {\n           LOG.info(\"Unexpected Exception while clearing selector : \", e);\n           // don\u0027t put the selector back.\n           info.close();\n           return ret; \n         }\n         \n         release(info);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : Time.now();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d Time.now() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                             \"IO on channel \" + channel +\n                                             \". \" + timeout + \n                                             \" millis timeout left.\");\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d System.currentTimeMillis() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                             \"IO on channel \" + channel +\n                                             \". \" + timeout + \n                                             \" millis timeout left.\");\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d System.currentTimeMillis() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                             \"IO on channel \" + channel +\n                                             \". \" + timeout + \n                                             \" millis timeout left.\");\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "1191be630ff05c9f1a540b952a8e34665f7fc181": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7385 Remove StringUtils.stringifyException(ie) in logger functions.  Contributed by Bharath Mundlapudi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139123 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/06/11 4:55 PM",
      "commitName": "1191be630ff05c9f1a540b952a8e34665f7fc181",
      "commitAuthor": "Tanping Wang",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.08,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,54 @@\n     int select(SelectableChannel channel, int ops, long timeout) \n                                                    throws IOException {\n      \n       SelectorInfo info \u003d get(channel);\n       \n       SelectionKey key \u003d null;\n       int ret \u003d 0;\n       \n       try {\n         while (true) {\n           long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n \n           key \u003d channel.register(info.selector, ops);\n           ret \u003d info.selector.select(timeout);\n           \n           if (ret !\u003d 0) {\n             return ret;\n           }\n           \n           /* Sometimes select() returns 0 much before timeout for \n            * unknown reasons. So select again if required.\n            */\n           if (timeout \u003e 0) {\n             timeout -\u003d System.currentTimeMillis() - start;\n             if (timeout \u003c\u003d 0) {\n               return 0;\n             }\n           }\n           \n           if (Thread.currentThread().isInterrupted()) {\n             throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                              \"IO on channel \" + channel +\n                                              \". \" + timeout + \n                                              \" millis timeout left.\");\n           }\n         }\n       } finally {\n         if (key !\u003d null) {\n           key.cancel();\n         }\n         \n         //clear the canceled key.\n         try {\n           info.selector.selectNow();\n         } catch (IOException e) {\n-          LOG.info(\"Unexpected Exception while clearing selector : \" +\n-                   StringUtils.stringifyException(e));\n+          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n           // don\u0027t put the selector back.\n           info.close();\n           return ret; \n         }\n         \n         release(info);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d System.currentTimeMillis() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                             \"IO on channel \" + channel +\n                                             \". \" + timeout + \n                                             \" millis timeout left.\");\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \", e);\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d System.currentTimeMillis() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                             \"IO on channel \" + channel +\n                                             \". \" + timeout + \n                                             \" millis timeout left.\");\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \" +\n                   StringUtils.stringifyException(e));\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,55 @@\n+    int select(SelectableChannel channel, int ops, long timeout) \n+                                                   throws IOException {\n+     \n+      SelectorInfo info \u003d get(channel);\n+      \n+      SelectionKey key \u003d null;\n+      int ret \u003d 0;\n+      \n+      try {\n+        while (true) {\n+          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n+\n+          key \u003d channel.register(info.selector, ops);\n+          ret \u003d info.selector.select(timeout);\n+          \n+          if (ret !\u003d 0) {\n+            return ret;\n+          }\n+          \n+          /* Sometimes select() returns 0 much before timeout for \n+           * unknown reasons. So select again if required.\n+           */\n+          if (timeout \u003e 0) {\n+            timeout -\u003d System.currentTimeMillis() - start;\n+            if (timeout \u003c\u003d 0) {\n+              return 0;\n+            }\n+          }\n+          \n+          if (Thread.currentThread().isInterrupted()) {\n+            throw new InterruptedIOException(\"Interruped while waiting for \" +\n+                                             \"IO on channel \" + channel +\n+                                             \". \" + timeout + \n+                                             \" millis timeout left.\");\n+          }\n+        }\n+      } finally {\n+        if (key !\u003d null) {\n+          key.cancel();\n+        }\n+        \n+        //clear the canceled key.\n+        try {\n+          info.selector.selectNow();\n+        } catch (IOException e) {\n+          LOG.info(\"Unexpected Exception while clearing selector : \" +\n+                   StringUtils.stringifyException(e));\n+          // don\u0027t put the selector back.\n+          info.close();\n+          return ret; \n+        }\n+        \n+        release(info);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    int select(SelectableChannel channel, int ops, long timeout) \n                                                   throws IOException {\n     \n      SelectorInfo info \u003d get(channel);\n      \n      SelectionKey key \u003d null;\n      int ret \u003d 0;\n      \n      try {\n        while (true) {\n          long start \u003d (timeout \u003d\u003d 0) ? 0 : System.currentTimeMillis();\n\n          key \u003d channel.register(info.selector, ops);\n          ret \u003d info.selector.select(timeout);\n          \n          if (ret !\u003d 0) {\n            return ret;\n          }\n          \n          /* Sometimes select() returns 0 much before timeout for \n           * unknown reasons. So select again if required.\n           */\n          if (timeout \u003e 0) {\n            timeout -\u003d System.currentTimeMillis() - start;\n            if (timeout \u003c\u003d 0) {\n              return 0;\n            }\n          }\n          \n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedIOException(\"Interruped while waiting for \" +\n                                             \"IO on channel \" + channel +\n                                             \". \" + timeout + \n                                             \" millis timeout left.\");\n          }\n        }\n      } finally {\n        if (key !\u003d null) {\n          key.cancel();\n        }\n        \n        //clear the canceled key.\n        try {\n          info.selector.selectNow();\n        } catch (IOException e) {\n          LOG.info(\"Unexpected Exception while clearing selector : \" +\n                   StringUtils.stringifyException(e));\n          // don\u0027t put the selector back.\n          info.close();\n          return ret; \n        }\n        \n        release(info);\n      }\n    }",
      "path": "src/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
    }
  }
}