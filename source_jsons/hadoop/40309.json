{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlanQueue.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___newlyParsedQueue-CSQueue__clusterResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
  "functionStartLine": 82,
  "functionEndLine": 120,
  "numCommitsSeen": 12,
  "timeTaken": 4257,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
    "4d4ad0ebb76198c90c5317f19ce85a6696132c8f",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "18a594257e052e8f10a03e5594e6cc6901dc56be",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "c8212bacb1b2a7e6ee83cc56f72297465ce99390",
    "eb3e40b833b9d82c1556843f960194dc42e482f3"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Ybodychange",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": "Ybodychange",
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9": "Ybodychange",
    "4d4ad0ebb76198c90c5317f19ce85a6696132c8f": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ymultichange(Ymodifierchange,Ybodychange)",
    "18a594257e052e8f10a03e5594e6cc6901dc56be": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "c8212bacb1b2a7e6ee83cc56f72297465ce99390": "Ybodychange",
    "eb3e40b833b9d82c1556843f960194dc42e482f3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "08/12/17 3:10 PM",
      "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 453.94,
      "commitsBetweenForRepo": 3961,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       // Sanity check\n       if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n           .getQueuePath().equals(getQueuePath())) {\n         throw new IOException(\n             \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                 + newlyParsedQueue.getQueuePath());\n       }\n \n       PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n \n       if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n         throw new IOException(\n             \"Reservable Queue should not have sub-queues in the\"\n                 + \"configuration expect the default reservation queue\");\n       }\n \n       // Set new configs\n       setupQueueConfigs(clusterResource);\n \n       updateQuotas(newlyParsedParentQueue.userLimit,\n           newlyParsedParentQueue.userLimitFactor,\n           newlyParsedParentQueue.maxAppsForReservation,\n           newlyParsedParentQueue.maxAppsPerUserForReservation);\n \n       // run reinitialize on each existing queue, to trigger absolute cap\n       // recomputations\n       for (CSQueue res : this.getChildQueues()) {\n         res.reinitialize(res, clusterResource);\n       }\n       showReservationsAsQueues \u003d\n           newlyParsedParentQueue.showReservationsAsQueues;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    writeLock.lock();\n    try {\n      // Sanity check\n      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n          .getQueuePath().equals(getQueuePath())) {\n        throw new IOException(\n            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                + newlyParsedQueue.getQueuePath());\n      }\n\n      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n      if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n        throw new IOException(\n            \"Reservable Queue should not have sub-queues in the\"\n                + \"configuration expect the default reservation queue\");\n      }\n\n      // Set new configs\n      setupQueueConfigs(clusterResource);\n\n      updateQuotas(newlyParsedParentQueue.userLimit,\n          newlyParsedParentQueue.userLimitFactor,\n          newlyParsedParentQueue.maxAppsForReservation,\n          newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n      showReservationsAsQueues \u003d\n          newlyParsedParentQueue.showReservationsAsQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/11/17 11:25 AM",
      "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 22.16,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,39 @@\n-  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n-      throws IOException {\n-    validate(newlyParsedQueue);\n-    super.reinitialize(newlyParsedQueue, clusterResource);\n-    this.leafQueueTemplate \u003d initializeLeafQueueConfigs(getQueuePath()).build();\n+  public void reinitialize(CSQueue newlyParsedQueue,\n+      Resource clusterResource) throws IOException {\n+    try {\n+      writeLock.lock();\n+      // Sanity check\n+      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n+          .getQueuePath().equals(getQueuePath())) {\n+        throw new IOException(\n+            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n+                + newlyParsedQueue.getQueuePath());\n+      }\n+\n+      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n+\n+      if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n+        throw new IOException(\n+            \"Reservable Queue should not have sub-queues in the\"\n+                + \"configuration expect the default reservation queue\");\n+      }\n+\n+      // Set new configs\n+      setupQueueConfigs(clusterResource);\n+\n+      updateQuotas(newlyParsedParentQueue.userLimit,\n+          newlyParsedParentQueue.userLimitFactor,\n+          newlyParsedParentQueue.maxAppsForReservation,\n+          newlyParsedParentQueue.maxAppsPerUserForReservation);\n+\n+      // run reinitialize on each existing queue, to trigger absolute cap\n+      // recomputations\n+      for (CSQueue res : this.getChildQueues()) {\n+        res.reinitialize(res, clusterResource);\n+      }\n+      showReservationsAsQueues \u003d\n+          newlyParsedParentQueue.showReservationsAsQueues;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    try {\n      writeLock.lock();\n      // Sanity check\n      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n          .getQueuePath().equals(getQueuePath())) {\n        throw new IOException(\n            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                + newlyParsedQueue.getQueuePath());\n      }\n\n      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n      if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n        throw new IOException(\n            \"Reservable Queue should not have sub-queues in the\"\n                + \"configuration expect the default reservation queue\");\n      }\n\n      // Set new configs\n      setupQueueConfigs(clusterResource);\n\n      updateQuotas(newlyParsedParentQueue.userLimit,\n          newlyParsedParentQueue.userLimitFactor,\n          newlyParsedParentQueue.maxAppsForReservation,\n          newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n      showReservationsAsQueues \u003d\n          newlyParsedParentQueue.showReservationsAsQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
      "commitDate": "16/11/17 11:25 AM",
      "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/11/17 9:38 PM",
      "commitNameOld": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.57,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,6 @@\n   public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n       throws IOException {\n     validate(newlyParsedQueue);\n     super.reinitialize(newlyParsedQueue, clusterResource);\n+    this.leafQueueTemplate \u003d initializeLeafQueueConfigs(getQueuePath()).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n    validate(newlyParsedQueue);\n    super.reinitialize(newlyParsedQueue, clusterResource);\n    this.leafQueueTemplate \u003d initializeLeafQueueConfigs(getQueuePath()).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7394. Merge code paths for Reservation/Plan queues and Auto Created queues. (Suma Shivaprasad via wangda)\n",
      "commitDate": "06/11/17 9:38 PM",
      "commitName": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/04/17 2:56 PM",
      "commitNameOld": "4d4ad0ebb76198c90c5317f19ce85a6696132c8f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 209.32,
      "commitsBetweenForRepo": 1500,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,5 @@\n-  public void reinitialize(CSQueue newlyParsedQueue,\n-      Resource clusterResource) throws IOException {\n-    try {\n-      writeLock.lock();\n-      // Sanity check\n-      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n-          .getQueuePath().equals(getQueuePath())) {\n-        throw new IOException(\n-            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n-                + newlyParsedQueue.getQueuePath());\n-      }\n-\n-      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n-\n-      if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n-        throw new IOException(\n-            \"Reservable Queue should not have sub-queues in the\"\n-                + \"configuration expect the default reservation queue\");\n-      }\n-\n-      // Set new configs\n-      setupQueueConfigs(clusterResource);\n-\n-      updateQuotas(newlyParsedParentQueue.userLimit,\n-          newlyParsedParentQueue.userLimitFactor,\n-          newlyParsedParentQueue.maxAppsForReservation,\n-          newlyParsedParentQueue.maxAppsPerUserForReservation);\n-\n-      // run reinitialize on each existing queue, to trigger absolute cap\n-      // recomputations\n-      for (CSQueue res : this.getChildQueues()) {\n-        res.reinitialize(res, clusterResource);\n-      }\n-      showReservationsAsQueues \u003d\n-          newlyParsedParentQueue.showReservationsAsQueues;\n-    } finally {\n-      writeLock.unlock();\n-    }\n+  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n+      throws IOException {\n+    validate(newlyParsedQueue);\n+    super.reinitialize(newlyParsedQueue, clusterResource);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue, Resource clusterResource)\n      throws IOException {\n    validate(newlyParsedQueue);\n    super.reinitialize(newlyParsedQueue, clusterResource);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "4d4ad0ebb76198c90c5317f19ce85a6696132c8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6439. Fix ReservationSystem creation of default ReservationQueue. (Carlo Curino via wangda)\n",
      "commitDate": "11/04/17 2:56 PM",
      "commitName": "4d4ad0ebb76198c90c5317f19ce85a6696132c8f",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "20/09/16 12:03 AM",
      "commitNameOld": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 203.62,
      "commitsBetweenForRepo": 1280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n     try {\n       writeLock.lock();\n       // Sanity check\n       if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n           .getQueuePath().equals(getQueuePath())) {\n         throw new IOException(\n             \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                 + newlyParsedQueue.getQueuePath());\n       }\n \n       PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n \n-      if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n+      if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n         throw new IOException(\n             \"Reservable Queue should not have sub-queues in the\"\n-                + \"configuration\");\n+                + \"configuration expect the default reservation queue\");\n       }\n \n       // Set new configs\n       setupQueueConfigs(clusterResource);\n \n       updateQuotas(newlyParsedParentQueue.userLimit,\n           newlyParsedParentQueue.userLimitFactor,\n           newlyParsedParentQueue.maxAppsForReservation,\n           newlyParsedParentQueue.maxAppsPerUserForReservation);\n \n       // run reinitialize on each existing queue, to trigger absolute cap\n       // recomputations\n       for (CSQueue res : this.getChildQueues()) {\n         res.reinitialize(res, clusterResource);\n       }\n       showReservationsAsQueues \u003d\n           newlyParsedParentQueue.showReservationsAsQueues;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    try {\n      writeLock.lock();\n      // Sanity check\n      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n          .getQueuePath().equals(getQueuePath())) {\n        throw new IOException(\n            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                + newlyParsedQueue.getQueuePath());\n      }\n\n      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n      if (newlyParsedParentQueue.getChildQueues().size() !\u003d 1) {\n        throw new IOException(\n            \"Reservable Queue should not have sub-queues in the\"\n                + \"configuration expect the default reservation queue\");\n      }\n\n      // Set new configs\n      setupQueueConfigs(clusterResource);\n\n      updateQuotas(newlyParsedParentQueue.userLimit,\n          newlyParsedParentQueue.userLimitFactor,\n          newlyParsedParentQueue.maxAppsForReservation,\n          newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n      showReservationsAsQueues \u003d\n          newlyParsedParentQueue.showReservationsAsQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/02/15 2:58 PM",
          "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 585.34,
          "commitsBetweenForRepo": 4428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,39 @@\n-  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n+  public void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n-    // Sanity check\n-    if (!(newlyParsedQueue instanceof PlanQueue)\n-        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n-      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n-          + \" from \" + newlyParsedQueue.getQueuePath());\n+    try {\n+      writeLock.lock();\n+      // Sanity check\n+      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n+          .getQueuePath().equals(getQueuePath())) {\n+        throw new IOException(\n+            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n+                + newlyParsedQueue.getQueuePath());\n+      }\n+\n+      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n+\n+      if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n+        throw new IOException(\n+            \"Reservable Queue should not have sub-queues in the\"\n+                + \"configuration\");\n+      }\n+\n+      // Set new configs\n+      setupQueueConfigs(clusterResource);\n+\n+      updateQuotas(newlyParsedParentQueue.userLimit,\n+          newlyParsedParentQueue.userLimitFactor,\n+          newlyParsedParentQueue.maxAppsForReservation,\n+          newlyParsedParentQueue.maxAppsPerUserForReservation);\n+\n+      // run reinitialize on each existing queue, to trigger absolute cap\n+      // recomputations\n+      for (CSQueue res : this.getChildQueues()) {\n+        res.reinitialize(res, clusterResource);\n+      }\n+      showReservationsAsQueues \u003d\n+          newlyParsedParentQueue.showReservationsAsQueues;\n+    } finally {\n+      writeLock.unlock();\n     }\n-\n-    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n-\n-    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n-      throw new IOException(\n-          \"Reservable Queue should not have sub-queues in the\"\n-              + \"configuration\");\n-    }\n-\n-    // Set new configs\n-    setupQueueConfigs(clusterResource);\n-\n-    updateQuotas(newlyParsedParentQueue.userLimit,\n-        newlyParsedParentQueue.userLimitFactor,\n-        newlyParsedParentQueue.maxAppsForReservation,\n-        newlyParsedParentQueue.maxAppsPerUserForReservation);\n-\n-    // run reinitialize on each existing queue, to trigger absolute cap\n-    // recomputations\n-    for (CSQueue res : this.getChildQueues()) {\n-      res.reinitialize(res, clusterResource);\n-    }\n-    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    try {\n      writeLock.lock();\n      // Sanity check\n      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n          .getQueuePath().equals(getQueuePath())) {\n        throw new IOException(\n            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                + newlyParsedQueue.getQueuePath());\n      }\n\n      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n      if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n        throw new IOException(\n            \"Reservable Queue should not have sub-queues in the\"\n                + \"configuration\");\n      }\n\n      // Set new configs\n      setupQueueConfigs(clusterResource);\n\n      updateQuotas(newlyParsedParentQueue.userLimit,\n          newlyParsedParentQueue.userLimitFactor,\n          newlyParsedParentQueue.maxAppsForReservation,\n          newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n      showReservationsAsQueues \u003d\n          newlyParsedParentQueue.showReservationsAsQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
          "commitDate": "20/09/16 12:03 AM",
          "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
          "commitAuthor": "Jian He",
          "commitDateOld": "12/02/15 2:58 PM",
          "commitNameOld": "18a594257e052e8f10a03e5594e6cc6901dc56be",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 585.34,
          "commitsBetweenForRepo": 4428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,39 @@\n-  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n+  public void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n-    // Sanity check\n-    if (!(newlyParsedQueue instanceof PlanQueue)\n-        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n-      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n-          + \" from \" + newlyParsedQueue.getQueuePath());\n+    try {\n+      writeLock.lock();\n+      // Sanity check\n+      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n+          .getQueuePath().equals(getQueuePath())) {\n+        throw new IOException(\n+            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n+                + newlyParsedQueue.getQueuePath());\n+      }\n+\n+      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n+\n+      if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n+        throw new IOException(\n+            \"Reservable Queue should not have sub-queues in the\"\n+                + \"configuration\");\n+      }\n+\n+      // Set new configs\n+      setupQueueConfigs(clusterResource);\n+\n+      updateQuotas(newlyParsedParentQueue.userLimit,\n+          newlyParsedParentQueue.userLimitFactor,\n+          newlyParsedParentQueue.maxAppsForReservation,\n+          newlyParsedParentQueue.maxAppsPerUserForReservation);\n+\n+      // run reinitialize on each existing queue, to trigger absolute cap\n+      // recomputations\n+      for (CSQueue res : this.getChildQueues()) {\n+        res.reinitialize(res, clusterResource);\n+      }\n+      showReservationsAsQueues \u003d\n+          newlyParsedParentQueue.showReservationsAsQueues;\n+    } finally {\n+      writeLock.unlock();\n     }\n-\n-    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n-\n-    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n-      throw new IOException(\n-          \"Reservable Queue should not have sub-queues in the\"\n-              + \"configuration\");\n-    }\n-\n-    // Set new configs\n-    setupQueueConfigs(clusterResource);\n-\n-    updateQuotas(newlyParsedParentQueue.userLimit,\n-        newlyParsedParentQueue.userLimitFactor,\n-        newlyParsedParentQueue.maxAppsForReservation,\n-        newlyParsedParentQueue.maxAppsPerUserForReservation);\n-\n-    // run reinitialize on each existing queue, to trigger absolute cap\n-    // recomputations\n-    for (CSQueue res : this.getChildQueues()) {\n-      res.reinitialize(res, clusterResource);\n-    }\n-    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    try {\n      writeLock.lock();\n      // Sanity check\n      if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue\n          .getQueuePath().equals(getQueuePath())) {\n        throw new IOException(\n            \"Trying to reinitialize \" + getQueuePath() + \" from \"\n                + newlyParsedQueue.getQueuePath());\n      }\n\n      PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n      if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n        throw new IOException(\n            \"Reservable Queue should not have sub-queues in the\"\n                + \"configuration\");\n      }\n\n      // Set new configs\n      setupQueueConfigs(clusterResource);\n\n      updateQuotas(newlyParsedParentQueue.userLimit,\n          newlyParsedParentQueue.userLimitFactor,\n          newlyParsedParentQueue.maxAppsForReservation,\n          newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n      // run reinitialize on each existing queue, to trigger absolute cap\n      // recomputations\n      for (CSQueue res : this.getChildQueues()) {\n        res.reinitialize(res, clusterResource);\n      }\n      showReservationsAsQueues \u003d\n          newlyParsedParentQueue.showReservationsAsQueues;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "18a594257e052e8f10a03e5594e6cc6901dc56be": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3124. Fixed CS LeafQueue/ParentQueue to use QueueCapacities to track capacities-by-label. Contributed by Wangda Tan\n",
      "commitDate": "12/02/15 2:58 PM",
      "commitName": "18a594257e052e8f10a03e5594e6cc6901dc56be",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/01/15 3:12 PM",
      "commitNameOld": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 37.99,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,32 @@\n   public synchronized void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n     // Sanity check\n     if (!(newlyParsedQueue instanceof PlanQueue)\n         || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n       throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n           + \" from \" + newlyParsedQueue.getQueuePath());\n     }\n \n     PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n \n     if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n       throw new IOException(\n           \"Reservable Queue should not have sub-queues in the\"\n               + \"configuration\");\n     }\n \n     // Set new configs\n-    setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n-        newlyParsedParentQueue.getAbsoluteCapacity(),\n-        newlyParsedParentQueue.getMaximumCapacity(),\n-        newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n-        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs(),\n-        newlyParsedParentQueue.accessibleLabels,\n-        newlyParsedParentQueue.defaultLabelExpression,\n-        newlyParsedParentQueue.capacitiyByNodeLabels,\n-        newlyParsedParentQueue.maxCapacityByNodeLabels,\n-        newlyParsedParentQueue.getReservationContinueLooking());\n+    setupQueueConfigs(clusterResource);\n \n     updateQuotas(newlyParsedParentQueue.userLimit,\n         newlyParsedParentQueue.userLimitFactor,\n         newlyParsedParentQueue.maxAppsForReservation,\n         newlyParsedParentQueue.maxAppsPerUserForReservation);\n \n     // run reinitialize on each existing queue, to trigger absolute cap\n     // recomputations\n     for (CSQueue res : this.getChildQueues()) {\n       res.reinitialize(res, clusterResource);\n     }\n     showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    // Sanity check\n    if (!(newlyParsedQueue instanceof PlanQueue)\n        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n          + \" from \" + newlyParsedQueue.getQueuePath());\n    }\n\n    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n      throw new IOException(\n          \"Reservable Queue should not have sub-queues in the\"\n              + \"configuration\");\n    }\n\n    // Set new configs\n    setupQueueConfigs(clusterResource);\n\n    updateQuotas(newlyParsedParentQueue.userLimit,\n        newlyParsedParentQueue.userLimitFactor,\n        newlyParsedParentQueue.maxAppsForReservation,\n        newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n    // run reinitialize on each existing queue, to trigger absolute cap\n    // recomputations\n    for (CSQueue res : this.getChildQueues()) {\n      res.reinitialize(res, clusterResource);\n    }\n    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/14 5:09 PM",
      "commitNameOld": "c8212bacb1b2a7e6ee83cc56f72297465ce99390",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 12.06,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,41 @@\n   public synchronized void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n     // Sanity check\n     if (!(newlyParsedQueue instanceof PlanQueue)\n         || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n       throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n           + \" from \" + newlyParsedQueue.getQueuePath());\n     }\n \n     PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n \n     if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n       throw new IOException(\n           \"Reservable Queue should not have sub-queues in the\"\n               + \"configuration\");\n     }\n \n     // Set new configs\n     setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n         newlyParsedParentQueue.getAbsoluteCapacity(),\n         newlyParsedParentQueue.getMaximumCapacity(),\n         newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n         newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs(),\n+        newlyParsedParentQueue.accessibleLabels,\n+        newlyParsedParentQueue.defaultLabelExpression,\n+        newlyParsedParentQueue.capacitiyByNodeLabels,\n+        newlyParsedParentQueue.maxCapacityByNodeLabels,\n         newlyParsedParentQueue.getReservationContinueLooking());\n \n     updateQuotas(newlyParsedParentQueue.userLimit,\n         newlyParsedParentQueue.userLimitFactor,\n         newlyParsedParentQueue.maxAppsForReservation,\n         newlyParsedParentQueue.maxAppsPerUserForReservation);\n \n     // run reinitialize on each existing queue, to trigger absolute cap\n     // recomputations\n     for (CSQueue res : this.getChildQueues()) {\n       res.reinitialize(res, clusterResource);\n     }\n     showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    // Sanity check\n    if (!(newlyParsedQueue instanceof PlanQueue)\n        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n          + \" from \" + newlyParsedQueue.getQueuePath());\n    }\n\n    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n      throw new IOException(\n          \"Reservable Queue should not have sub-queues in the\"\n              + \"configuration\");\n    }\n\n    // Set new configs\n    setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n        newlyParsedParentQueue.getAbsoluteCapacity(),\n        newlyParsedParentQueue.getMaximumCapacity(),\n        newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs(),\n        newlyParsedParentQueue.accessibleLabels,\n        newlyParsedParentQueue.defaultLabelExpression,\n        newlyParsedParentQueue.capacitiyByNodeLabels,\n        newlyParsedParentQueue.maxCapacityByNodeLabels,\n        newlyParsedParentQueue.getReservationContinueLooking());\n\n    updateQuotas(newlyParsedParentQueue.userLimit,\n        newlyParsedParentQueue.userLimitFactor,\n        newlyParsedParentQueue.maxAppsForReservation,\n        newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n    // run reinitialize on each existing queue, to trigger absolute cap\n    // recomputations\n    for (CSQueue res : this.getChildQueues()) {\n      res.reinitialize(res, clusterResource);\n    }\n    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "c8212bacb1b2a7e6ee83cc56f72297465ce99390": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1051. Add a system for creating reservations of cluster capacity.\nContributed by Subru Krishnan and Carlo Curino.\n",
      "commitDate": "03/10/14 5:09 PM",
      "commitName": "c8212bacb1b2a7e6ee83cc56f72297465ce99390",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "03/10/14 3:43 PM",
      "commitNameOld": "5e10a13bb4759984494c6a870c7f08fb6693c9c0",
      "commitAuthorOld": "subru",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n   public synchronized void reinitialize(CSQueue newlyParsedQueue,\n       Resource clusterResource) throws IOException {\n     // Sanity check\n     if (!(newlyParsedQueue instanceof PlanQueue)\n         || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n       throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n           + \" from \" + newlyParsedQueue.getQueuePath());\n     }\n \n     PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n \n     if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n       throw new IOException(\n           \"Reservable Queue should not have sub-queues in the\"\n               + \"configuration\");\n     }\n \n     // Set new configs\n     setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n         newlyParsedParentQueue.getAbsoluteCapacity(),\n         newlyParsedParentQueue.getMaximumCapacity(),\n         newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n-        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs());\n+        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs(),\n+        newlyParsedParentQueue.getReservationContinueLooking());\n \n     updateQuotas(newlyParsedParentQueue.userLimit,\n         newlyParsedParentQueue.userLimitFactor,\n         newlyParsedParentQueue.maxAppsForReservation,\n         newlyParsedParentQueue.maxAppsPerUserForReservation);\n \n     // run reinitialize on each existing queue, to trigger absolute cap\n     // recomputations\n     for (CSQueue res : this.getChildQueues()) {\n       res.reinitialize(res, clusterResource);\n     }\n     showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    // Sanity check\n    if (!(newlyParsedQueue instanceof PlanQueue)\n        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n          + \" from \" + newlyParsedQueue.getQueuePath());\n    }\n\n    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n      throw new IOException(\n          \"Reservable Queue should not have sub-queues in the\"\n              + \"configuration\");\n    }\n\n    // Set new configs\n    setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n        newlyParsedParentQueue.getAbsoluteCapacity(),\n        newlyParsedParentQueue.getMaximumCapacity(),\n        newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs(),\n        newlyParsedParentQueue.getReservationContinueLooking());\n\n    updateQuotas(newlyParsedParentQueue.userLimit,\n        newlyParsedParentQueue.userLimitFactor,\n        newlyParsedParentQueue.maxAppsForReservation,\n        newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n    // run reinitialize on each existing queue, to trigger absolute cap\n    // recomputations\n    for (CSQueue res : this.getChildQueues()) {\n      res.reinitialize(res, clusterResource);\n    }\n    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java",
      "extendedDetails": {}
    },
    "eb3e40b833b9d82c1556843f960194dc42e482f3": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1707. Introduce APIs to add/remove/resize queues in the CapacityScheduler. Contributed by Carlo Curino and Subru Krishnan\n(cherry picked from commit aac47fda7fecda9fc18ade34d633eca895865a70)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "eb3e40b833b9d82c1556843f960194dc42e482f3",
      "commitAuthor": "carlo curino",
      "diff": "@@ -0,0 +1,36 @@\n+  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n+      Resource clusterResource) throws IOException {\n+    // Sanity check\n+    if (!(newlyParsedQueue instanceof PlanQueue)\n+        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n+      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n+          + \" from \" + newlyParsedQueue.getQueuePath());\n+    }\n+\n+    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n+\n+    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n+      throw new IOException(\n+          \"Reservable Queue should not have sub-queues in the\"\n+              + \"configuration\");\n+    }\n+\n+    // Set new configs\n+    setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n+        newlyParsedParentQueue.getAbsoluteCapacity(),\n+        newlyParsedParentQueue.getMaximumCapacity(),\n+        newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n+        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs());\n+\n+    updateQuotas(newlyParsedParentQueue.userLimit,\n+        newlyParsedParentQueue.userLimitFactor,\n+        newlyParsedParentQueue.maxAppsForReservation,\n+        newlyParsedParentQueue.maxAppsPerUserForReservation);\n+\n+    // run reinitialize on each existing queue, to trigger absolute cap\n+    // recomputations\n+    for (CSQueue res : this.getChildQueues()) {\n+      res.reinitialize(res, clusterResource);\n+    }\n+    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void reinitialize(CSQueue newlyParsedQueue,\n      Resource clusterResource) throws IOException {\n    // Sanity check\n    if (!(newlyParsedQueue instanceof PlanQueue)\n        || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {\n      throw new IOException(\"Trying to reinitialize \" + getQueuePath()\n          + \" from \" + newlyParsedQueue.getQueuePath());\n    }\n\n    PlanQueue newlyParsedParentQueue \u003d (PlanQueue) newlyParsedQueue;\n\n    if (newlyParsedParentQueue.getChildQueues().size() \u003e 0) {\n      throw new IOException(\n          \"Reservable Queue should not have sub-queues in the\"\n              + \"configuration\");\n    }\n\n    // Set new configs\n    setupQueueConfigs(clusterResource, newlyParsedParentQueue.getCapacity(),\n        newlyParsedParentQueue.getAbsoluteCapacity(),\n        newlyParsedParentQueue.getMaximumCapacity(),\n        newlyParsedParentQueue.getAbsoluteMaximumCapacity(),\n        newlyParsedParentQueue.getState(), newlyParsedParentQueue.getACLs());\n\n    updateQuotas(newlyParsedParentQueue.userLimit,\n        newlyParsedParentQueue.userLimitFactor,\n        newlyParsedParentQueue.maxAppsForReservation,\n        newlyParsedParentQueue.maxAppsPerUserForReservation);\n\n    // run reinitialize on each existing queue, to trigger absolute cap\n    // recomputations\n    for (CSQueue res : this.getChildQueues()) {\n      res.reinitialize(res, clusterResource);\n    }\n    showReservationsAsQueues \u003d newlyParsedParentQueue.showReservationsAsQueues;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/PlanQueue.java"
    }
  }
}