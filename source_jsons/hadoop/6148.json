{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormat.java",
  "functionName": "loadDirectoryWithSnapshot",
  "functionId": "loadDirectoryWithSnapshot___in-DataInput__counter-Counter",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
  "functionStartLine": 550,
  "functionEndLine": 588,
  "numCommitsSeen": 180,
  "timeTaken": 3308,
  "changeHistory": [
    "76a621ffd2d66bf012a554f4400091a92a5b473e",
    "da8e962e39bd41b73b53966826c82e741b08010b",
    "a0abed41a02bb1b791b57dd0d78759d713c4ce3a",
    "745bfa031174ad9563c01e4c33fa63afabe69b83"
  ],
  "changeHistoryShort": {
    "76a621ffd2d66bf012a554f4400091a92a5b473e": "Ybodychange",
    "da8e962e39bd41b73b53966826c82e741b08010b": "Ymultichange(Yparameterchange,Ybodychange)",
    "a0abed41a02bb1b791b57dd0d78759d713c4ce3a": "Ybodychange",
    "745bfa031174ad9563c01e4c33fa63afabe69b83": "Ybodychange"
  },
  "changeHistoryDetails": {
    "76a621ffd2d66bf012a554f4400091a92a5b473e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 5:08 PM",
      "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/06/14 12:39 AM",
      "commitNameOld": "1e89eba47d0f291b33fc26f9406231fc70b63a87",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 15.69,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,39 @@\n     private void loadDirectoryWithSnapshot(DataInput in, Counter counter)\n         throws IOException {\n       // Step 1. Identify the parent INode\n       long inodeId \u003d in.readLong();\n       final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n           .asDirectory();\n       \n       // Check if the whole subtree has been saved (for reference nodes)\n       boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n       if (!toLoadSubtree) {\n         return;\n       }\n-      \n+\n       // Step 2. Load snapshots if parent is snapshottable\n       int numSnapshots \u003d in.readInt();\n       if (numSnapshots \u003e\u003d 0) {\n-        final INodeDirectorySnapshottable snapshottableParent\n-            \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n         // load snapshots and snapshotQuota\n-        SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n-            numSnapshots, in, this);\n-        if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n+        SnapshotFSImageFormat.loadSnapshotList(parent, numSnapshots, in, this);\n+        if (parent.getDirectorySnapshottableFeature().getSnapshotQuota() \u003e 0) {\n           // add the directory to the snapshottable directory list in \n           // SnapshotManager. Note that we only add root when its snapshot quota\n           // is positive.\n-          this.namesystem.getSnapshotManager().addSnapshottable(\n-              snapshottableParent);\n+          this.namesystem.getSnapshotManager().addSnapshottable(parent);\n         }\n       }\n \n       // Step 3. Load children nodes under parent\n       loadChildren(parent, in, counter);\n       \n       // Step 4. load Directory Diff List\n       SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n       \n       // Recursively load sub-directories, including snapshot copies of deleted\n       // directories\n       int numSubTree \u003d in.readInt();\n       for (int i \u003d 0; i \u003c numSubTree; i++) {\n         loadDirectoryWithSnapshot(in, counter);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryWithSnapshot(DataInput in, Counter counter)\n        throws IOException {\n      // Step 1. Identify the parent INode\n      long inodeId \u003d in.readLong();\n      final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n          .asDirectory();\n      \n      // Check if the whole subtree has been saved (for reference nodes)\n      boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n      if (!toLoadSubtree) {\n        return;\n      }\n\n      // Step 2. Load snapshots if parent is snapshottable\n      int numSnapshots \u003d in.readInt();\n      if (numSnapshots \u003e\u003d 0) {\n        // load snapshots and snapshotQuota\n        SnapshotFSImageFormat.loadSnapshotList(parent, numSnapshots, in, this);\n        if (parent.getDirectorySnapshottableFeature().getSnapshotQuota() \u003e 0) {\n          // add the directory to the snapshottable directory list in \n          // SnapshotManager. Note that we only add root when its snapshot quota\n          // is positive.\n          this.namesystem.getSnapshotManager().addSnapshottable(parent);\n        }\n      }\n\n      // Step 3. Load children nodes under parent\n      loadChildren(parent, in, counter);\n      \n      // Step 4. load Directory Diff List\n      SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n      \n      // Recursively load sub-directories, including snapshot copies of deleted\n      // directories\n      int numSubTree \u003d in.readInt();\n      for (int i \u003d 0; i \u003c numSubTree; i++) {\n        loadDirectoryWithSnapshot(in, counter);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "da8e962e39bd41b73b53966826c82e741b08010b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4372. Track NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 10:35 PM",
      "commitName": "da8e962e39bd41b73b53966826c82e741b08010b",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4372. Track NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502120 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/13 10:35 PM",
          "commitName": "da8e962e39bd41b73b53966826c82e741b08010b",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "07/07/13 10:29 PM",
          "commitNameOld": "6770de7ec4f73e16740f1723f4e35d2fef2c22c8",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.0,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-    private void loadDirectoryWithSnapshot(DataInput in)\n+    private void loadDirectoryWithSnapshot(DataInput in, Counter counter)\n         throws IOException {\n       // Step 1. Identify the parent INode\n       long inodeId \u003d in.readLong();\n       final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n           .asDirectory();\n       \n       // Check if the whole subtree has been saved (for reference nodes)\n       boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n       if (!toLoadSubtree) {\n         return;\n       }\n       \n       // Step 2. Load snapshots if parent is snapshottable\n       int numSnapshots \u003d in.readInt();\n       if (numSnapshots \u003e\u003d 0) {\n         final INodeDirectorySnapshottable snapshottableParent\n             \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n         // load snapshots and snapshotQuota\n         SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n             numSnapshots, in, this);\n         if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n           // add the directory to the snapshottable directory list in \n           // SnapshotManager. Note that we only add root when its snapshot quota\n           // is positive.\n           this.namesystem.getSnapshotManager().addSnapshottable(\n               snapshottableParent);\n         }\n       }\n \n       // Step 3. Load children nodes under parent\n-      loadChildren(parent, in);\n+      loadChildren(parent, in, counter);\n       \n       // Step 4. load Directory Diff List\n       SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n       \n       // Recursively load sub-directories, including snapshot copies of deleted\n       // directories\n       int numSubTree \u003d in.readInt();\n       for (int i \u003d 0; i \u003c numSubTree; i++) {\n-        loadDirectoryWithSnapshot(in);\n+        loadDirectoryWithSnapshot(in, counter);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadDirectoryWithSnapshot(DataInput in, Counter counter)\n        throws IOException {\n      // Step 1. Identify the parent INode\n      long inodeId \u003d in.readLong();\n      final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n          .asDirectory();\n      \n      // Check if the whole subtree has been saved (for reference nodes)\n      boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n      if (!toLoadSubtree) {\n        return;\n      }\n      \n      // Step 2. Load snapshots if parent is snapshottable\n      int numSnapshots \u003d in.readInt();\n      if (numSnapshots \u003e\u003d 0) {\n        final INodeDirectorySnapshottable snapshottableParent\n            \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n        // load snapshots and snapshotQuota\n        SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n            numSnapshots, in, this);\n        if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n          // add the directory to the snapshottable directory list in \n          // SnapshotManager. Note that we only add root when its snapshot quota\n          // is positive.\n          this.namesystem.getSnapshotManager().addSnapshottable(\n              snapshottableParent);\n        }\n      }\n\n      // Step 3. Load children nodes under parent\n      loadChildren(parent, in, counter);\n      \n      // Step 4. load Directory Diff List\n      SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n      \n      // Recursively load sub-directories, including snapshot copies of deleted\n      // directories\n      int numSubTree \u003d in.readInt();\n      for (int i \u003d 0; i \u003c numSubTree; i++) {\n        loadDirectoryWithSnapshot(in, counter);\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
          "extendedDetails": {
            "oldValue": "[in-DataInput]",
            "newValue": "[in-DataInput, counter-Counter]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4372. Track NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502120 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/13 10:35 PM",
          "commitName": "da8e962e39bd41b73b53966826c82e741b08010b",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "07/07/13 10:29 PM",
          "commitNameOld": "6770de7ec4f73e16740f1723f4e35d2fef2c22c8",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.0,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-    private void loadDirectoryWithSnapshot(DataInput in)\n+    private void loadDirectoryWithSnapshot(DataInput in, Counter counter)\n         throws IOException {\n       // Step 1. Identify the parent INode\n       long inodeId \u003d in.readLong();\n       final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n           .asDirectory();\n       \n       // Check if the whole subtree has been saved (for reference nodes)\n       boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n       if (!toLoadSubtree) {\n         return;\n       }\n       \n       // Step 2. Load snapshots if parent is snapshottable\n       int numSnapshots \u003d in.readInt();\n       if (numSnapshots \u003e\u003d 0) {\n         final INodeDirectorySnapshottable snapshottableParent\n             \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n         // load snapshots and snapshotQuota\n         SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n             numSnapshots, in, this);\n         if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n           // add the directory to the snapshottable directory list in \n           // SnapshotManager. Note that we only add root when its snapshot quota\n           // is positive.\n           this.namesystem.getSnapshotManager().addSnapshottable(\n               snapshottableParent);\n         }\n       }\n \n       // Step 3. Load children nodes under parent\n-      loadChildren(parent, in);\n+      loadChildren(parent, in, counter);\n       \n       // Step 4. load Directory Diff List\n       SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n       \n       // Recursively load sub-directories, including snapshot copies of deleted\n       // directories\n       int numSubTree \u003d in.readInt();\n       for (int i \u003d 0; i \u003c numSubTree; i++) {\n-        loadDirectoryWithSnapshot(in);\n+        loadDirectoryWithSnapshot(in, counter);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadDirectoryWithSnapshot(DataInput in, Counter counter)\n        throws IOException {\n      // Step 1. Identify the parent INode\n      long inodeId \u003d in.readLong();\n      final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n          .asDirectory();\n      \n      // Check if the whole subtree has been saved (for reference nodes)\n      boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n      if (!toLoadSubtree) {\n        return;\n      }\n      \n      // Step 2. Load snapshots if parent is snapshottable\n      int numSnapshots \u003d in.readInt();\n      if (numSnapshots \u003e\u003d 0) {\n        final INodeDirectorySnapshottable snapshottableParent\n            \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n        // load snapshots and snapshotQuota\n        SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n            numSnapshots, in, this);\n        if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n          // add the directory to the snapshottable directory list in \n          // SnapshotManager. Note that we only add root when its snapshot quota\n          // is positive.\n          this.namesystem.getSnapshotManager().addSnapshottable(\n              snapshottableParent);\n        }\n      }\n\n      // Step 3. Load children nodes under parent\n      loadChildren(parent, in, counter);\n      \n      // Step 4. load Directory Diff List\n      SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n      \n      // Recursively load sub-directories, including snapshot copies of deleted\n      // directories\n      int numSubTree \u003d in.readInt();\n      for (int i \u003d 0; i \u003c numSubTree; i++) {\n        loadDirectoryWithSnapshot(in, counter);\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
          "extendedDetails": {}
        }
      ]
    },
    "a0abed41a02bb1b791b57dd0d78759d713c4ce3a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4863. The root directory should be added to the snapshottable directory list while loading fsimage. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 6:38 PM",
      "commitName": "a0abed41a02bb1b791b57dd0d78759d713c4ce3a",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "29/05/13 3:22 PM",
      "commitNameOld": "01f27f5c23fb6286c0e97156d1f09f5f5350aae5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n     private void loadDirectoryWithSnapshot(DataInput in)\n         throws IOException {\n       // Step 1. Identify the parent INode\n       long inodeId \u003d in.readLong();\n       final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n           .asDirectory();\n       \n       // Check if the whole subtree has been saved (for reference nodes)\n       boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n       if (!toLoadSubtree) {\n         return;\n       }\n       \n       // Step 2. Load snapshots if parent is snapshottable\n       int numSnapshots \u003d in.readInt();\n       if (numSnapshots \u003e\u003d 0) {\n         final INodeDirectorySnapshottable snapshottableParent\n             \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n-        if (snapshottableParent.getParent() !\u003d null) { // not root\n-          this.namesystem.getSnapshotManager().addSnapshottable(\n-              snapshottableParent);\n-        }\n         // load snapshots and snapshotQuota\n         SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n             numSnapshots, in, this);\n+        if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n+          // add the directory to the snapshottable directory list in \n+          // SnapshotManager. Note that we only add root when its snapshot quota\n+          // is positive.\n+          this.namesystem.getSnapshotManager().addSnapshottable(\n+              snapshottableParent);\n+        }\n       }\n \n       // Step 3. Load children nodes under parent\n       loadChildren(parent, in);\n       \n       // Step 4. load Directory Diff List\n       SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n       \n       // Recursively load sub-directories, including snapshot copies of deleted\n       // directories\n       int numSubTree \u003d in.readInt();\n       for (int i \u003d 0; i \u003c numSubTree; i++) {\n         loadDirectoryWithSnapshot(in);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryWithSnapshot(DataInput in)\n        throws IOException {\n      // Step 1. Identify the parent INode\n      long inodeId \u003d in.readLong();\n      final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n          .asDirectory();\n      \n      // Check if the whole subtree has been saved (for reference nodes)\n      boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n      if (!toLoadSubtree) {\n        return;\n      }\n      \n      // Step 2. Load snapshots if parent is snapshottable\n      int numSnapshots \u003d in.readInt();\n      if (numSnapshots \u003e\u003d 0) {\n        final INodeDirectorySnapshottable snapshottableParent\n            \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n        // load snapshots and snapshotQuota\n        SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n            numSnapshots, in, this);\n        if (snapshottableParent.getSnapshotQuota() \u003e 0) {\n          // add the directory to the snapshottable directory list in \n          // SnapshotManager. Note that we only add root when its snapshot quota\n          // is positive.\n          this.namesystem.getSnapshotManager().addSnapshottable(\n              snapshottableParent);\n        }\n      }\n\n      // Step 3. Load children nodes under parent\n      loadChildren(parent, in);\n      \n      // Step 4. load Directory Diff List\n      SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n      \n      // Recursively load sub-directories, including snapshot copies of deleted\n      // directories\n      int numSubTree \u003d in.readInt();\n      for (int i \u003d 0; i \u003c numSubTree; i++) {\n        loadDirectoryWithSnapshot(in);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "745bfa031174ad9563c01e4c33fa63afabe69b83": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4749. Use INodeId to identify the corresponding directory node in FSImage saving/loading.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1475902 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 11:51 AM",
      "commitName": "745bfa031174ad9563c01e4c33fa63afabe69b83",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/04/13 1:31 PM",
      "commitNameOld": "0fa5cad0b27780c27a284c23101b1099d4886506",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     private void loadDirectoryWithSnapshot(DataInput in)\n         throws IOException {\n       // Step 1. Identify the parent INode\n-      String parentPath \u003d FSImageSerialization.readString(in);\n-      final INodeDirectory parent \u003d INodeDirectory.valueOf(\n-          namesystem.dir.rootDir.getNode(parentPath, false), parentPath);\n+      long inodeId \u003d in.readLong();\n+      final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n+          .asDirectory();\n       \n       // Check if the whole subtree has been saved (for reference nodes)\n       boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n       if (!toLoadSubtree) {\n         return;\n       }\n       \n       // Step 2. Load snapshots if parent is snapshottable\n       int numSnapshots \u003d in.readInt();\n       if (numSnapshots \u003e\u003d 0) {\n         final INodeDirectorySnapshottable snapshottableParent\n-            \u003d INodeDirectorySnapshottable.valueOf(parent, parentPath);\n+            \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n         if (snapshottableParent.getParent() !\u003d null) { // not root\n           this.namesystem.getSnapshotManager().addSnapshottable(\n               snapshottableParent);\n         }\n         // load snapshots and snapshotQuota\n         SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n             numSnapshots, in, this);\n       }\n \n       // Step 3. Load children nodes under parent\n       loadChildren(parent, in);\n       \n       // Step 4. load Directory Diff List\n       SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n       \n       // Recursively load sub-directories, including snapshot copies of deleted\n       // directories\n       int numSubTree \u003d in.readInt();\n       for (int i \u003d 0; i \u003c numSubTree; i++) {\n         loadDirectoryWithSnapshot(in);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryWithSnapshot(DataInput in)\n        throws IOException {\n      // Step 1. Identify the parent INode\n      long inodeId \u003d in.readLong();\n      final INodeDirectory parent \u003d this.namesystem.dir.getInode(inodeId)\n          .asDirectory();\n      \n      // Check if the whole subtree has been saved (for reference nodes)\n      boolean toLoadSubtree \u003d referenceMap.toProcessSubtree(parent.getId());\n      if (!toLoadSubtree) {\n        return;\n      }\n      \n      // Step 2. Load snapshots if parent is snapshottable\n      int numSnapshots \u003d in.readInt();\n      if (numSnapshots \u003e\u003d 0) {\n        final INodeDirectorySnapshottable snapshottableParent\n            \u003d INodeDirectorySnapshottable.valueOf(parent, parent.getLocalName());\n        if (snapshottableParent.getParent() !\u003d null) { // not root\n          this.namesystem.getSnapshotManager().addSnapshottable(\n              snapshottableParent);\n        }\n        // load snapshots and snapshotQuota\n        SnapshotFSImageFormat.loadSnapshotList(snapshottableParent,\n            numSnapshots, in, this);\n      }\n\n      // Step 3. Load children nodes under parent\n      loadChildren(parent, in);\n      \n      // Step 4. load Directory Diff List\n      SnapshotFSImageFormat.loadDirectoryDiffList(parent, in, this);\n      \n      // Recursively load sub-directories, including snapshot copies of deleted\n      // directories\n      int numSubTree \u003d in.readInt();\n      for (int i \u003d 0; i \u003c numSubTree; i++) {\n        loadDirectoryWithSnapshot(in);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    }
  }
}