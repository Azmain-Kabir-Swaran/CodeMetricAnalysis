{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrafficControlBandwidthHandlerImpl.java",
  "functionName": "bootstrap",
  "functionId": "bootstrap___configuration-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficControlBandwidthHandlerImpl.java",
  "functionStartLine": 83,
  "functionEndLine": 124,
  "numCommitsSeen": 7,
  "timeTaken": 1476,
  "changeHistory": [
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
    "a100be685cc4521e9949589948219231aa5d2733"
  ],
  "changeHistoryShort": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": "Ybodychange",
    "a100be685cc4521e9949589948219231aa5d2733": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "11/01/17 4:00 PM",
      "commitNameOld": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 222.34,
      "commitsBetweenForRepo": 1241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public List\u003cPrivilegedOperation\u003e bootstrap(Configuration configuration)\n       throws ResourceHandlerException {\n     conf \u003d configuration;\n     //We\u0027ll do this inline for the time being - since this is a one time\n     //operation. At some point, LCE code can be refactored to batch mount\n     //operations across multiple controllers - cpu, net_cls, blkio etc\n     cGroupsHandler\n         .initializeCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n     device \u003d conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE,\n         YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\n     strictMode \u003d configuration.getBoolean(YarnConfiguration\n         .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration\n         .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n     rootBandwidthMbit \u003d conf.getInt(YarnConfiguration\n         .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration\n         .DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\n     yarnBandwidthMbit \u003d conf.getInt(YarnConfiguration\n         .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\n     containerBandwidthMbit \u003d (int) Math.ceil((double) yarnBandwidthMbit /\n         MAX_CONTAINER_COUNT);\n \n     StringBuffer logLine \u003d new StringBuffer(\"strict mode is set to :\")\n         .append(strictMode).append(System.lineSeparator());\n \n     if (strictMode) {\n       logLine.append(\"container bandwidth will be capped to soft limit.\")\n           .append(System.lineSeparator());\n     } else {\n       logLine.append(\n           \"containers will be allowed to use spare YARN bandwidth.\")\n           .append(System.lineSeparator());\n     }\n \n     logLine\n         .append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \")\n         .append(containerBandwidthMbit);\n \n-    LOG.info(logLine);\n+    LOG.info(logLine.toString());\n     trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration configuration)\n      throws ResourceHandlerException {\n    conf \u003d configuration;\n    //We\u0027ll do this inline for the time being - since this is a one time\n    //operation. At some point, LCE code can be refactored to batch mount\n    //operations across multiple controllers - cpu, net_cls, blkio etc\n    cGroupsHandler\n        .initializeCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n    device \u003d conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE,\n        YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\n    strictMode \u003d configuration.getBoolean(YarnConfiguration\n        .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration\n        .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n    rootBandwidthMbit \u003d conf.getInt(YarnConfiguration\n        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration\n        .DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\n    yarnBandwidthMbit \u003d conf.getInt(YarnConfiguration\n        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\n    containerBandwidthMbit \u003d (int) Math.ceil((double) yarnBandwidthMbit /\n        MAX_CONTAINER_COUNT);\n\n    StringBuffer logLine \u003d new StringBuffer(\"strict mode is set to :\")\n        .append(strictMode).append(System.lineSeparator());\n\n    if (strictMode) {\n      logLine.append(\"container bandwidth will be capped to soft limit.\")\n          .append(System.lineSeparator());\n    } else {\n      logLine.append(\n          \"containers will be allowed to use spare YARN bandwidth.\")\n          .append(System.lineSeparator());\n    }\n\n    logLine\n        .append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \")\n        .append(containerBandwidthMbit);\n\n    LOG.info(logLine.toString());\n    trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficControlBandwidthHandlerImpl.java",
      "extendedDetails": {}
    },
    "e6f13fe5d1df8918ffc680d18f9d5576f38893a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5849. Automatically create YARN control group for pre-mounted cgroups (Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "11/01/17 4:00 PM",
      "commitName": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "22/04/15 5:26 PM",
      "commitNameOld": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 629.98,
      "commitsBetweenForRepo": 4622,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public List\u003cPrivilegedOperation\u003e bootstrap(Configuration configuration)\n       throws ResourceHandlerException {\n     conf \u003d configuration;\n     //We\u0027ll do this inline for the time being - since this is a one time\n     //operation. At some point, LCE code can be refactored to batch mount\n     //operations across multiple controllers - cpu, net_cls, blkio etc\n     cGroupsHandler\n-        .mountCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n+        .initializeCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n     device \u003d conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE,\n         YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\n     strictMode \u003d configuration.getBoolean(YarnConfiguration\n         .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration\n         .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n     rootBandwidthMbit \u003d conf.getInt(YarnConfiguration\n         .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration\n         .DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\n     yarnBandwidthMbit \u003d conf.getInt(YarnConfiguration\n         .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\n     containerBandwidthMbit \u003d (int) Math.ceil((double) yarnBandwidthMbit /\n         MAX_CONTAINER_COUNT);\n \n     StringBuffer logLine \u003d new StringBuffer(\"strict mode is set to :\")\n         .append(strictMode).append(System.lineSeparator());\n \n     if (strictMode) {\n       logLine.append(\"container bandwidth will be capped to soft limit.\")\n           .append(System.lineSeparator());\n     } else {\n       logLine.append(\n           \"containers will be allowed to use spare YARN bandwidth.\")\n           .append(System.lineSeparator());\n     }\n \n     logLine\n         .append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \")\n         .append(containerBandwidthMbit);\n \n     LOG.info(logLine);\n     trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration configuration)\n      throws ResourceHandlerException {\n    conf \u003d configuration;\n    //We\u0027ll do this inline for the time being - since this is a one time\n    //operation. At some point, LCE code can be refactored to batch mount\n    //operations across multiple controllers - cpu, net_cls, blkio etc\n    cGroupsHandler\n        .initializeCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n    device \u003d conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE,\n        YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\n    strictMode \u003d configuration.getBoolean(YarnConfiguration\n        .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration\n        .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n    rootBandwidthMbit \u003d conf.getInt(YarnConfiguration\n        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration\n        .DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\n    yarnBandwidthMbit \u003d conf.getInt(YarnConfiguration\n        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\n    containerBandwidthMbit \u003d (int) Math.ceil((double) yarnBandwidthMbit /\n        MAX_CONTAINER_COUNT);\n\n    StringBuffer logLine \u003d new StringBuffer(\"strict mode is set to :\")\n        .append(strictMode).append(System.lineSeparator());\n\n    if (strictMode) {\n      logLine.append(\"container bandwidth will be capped to soft limit.\")\n          .append(System.lineSeparator());\n    } else {\n      logLine.append(\n          \"containers will be allowed to use spare YARN bandwidth.\")\n          .append(System.lineSeparator());\n    }\n\n    logLine\n        .append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \")\n        .append(containerBandwidthMbit);\n\n    LOG.info(logLine);\n    trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficControlBandwidthHandlerImpl.java",
      "extendedDetails": {}
    },
    "a100be685cc4521e9949589948219231aa5d2733": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3366. Enhanced NodeManager to support classifying/shaping outgoing network bandwidth traffic originating from YARN containers Contributed by Sidharta Seethana.\n",
      "commitDate": "22/04/15 5:26 PM",
      "commitName": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,42 @@\n+  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration configuration)\n+      throws ResourceHandlerException {\n+    conf \u003d configuration;\n+    //We\u0027ll do this inline for the time being - since this is a one time\n+    //operation. At some point, LCE code can be refactored to batch mount\n+    //operations across multiple controllers - cpu, net_cls, blkio etc\n+    cGroupsHandler\n+        .mountCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n+    device \u003d conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE,\n+        YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\n+    strictMode \u003d configuration.getBoolean(YarnConfiguration\n+        .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration\n+        .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n+    rootBandwidthMbit \u003d conf.getInt(YarnConfiguration\n+        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration\n+        .DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\n+    yarnBandwidthMbit \u003d conf.getInt(YarnConfiguration\n+        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\n+    containerBandwidthMbit \u003d (int) Math.ceil((double) yarnBandwidthMbit /\n+        MAX_CONTAINER_COUNT);\n+\n+    StringBuffer logLine \u003d new StringBuffer(\"strict mode is set to :\")\n+        .append(strictMode).append(System.lineSeparator());\n+\n+    if (strictMode) {\n+      logLine.append(\"container bandwidth will be capped to soft limit.\")\n+          .append(System.lineSeparator());\n+    } else {\n+      logLine.append(\n+          \"containers will be allowed to use spare YARN bandwidth.\")\n+          .append(System.lineSeparator());\n+    }\n+\n+    logLine\n+        .append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \")\n+        .append(containerBandwidthMbit);\n+\n+    LOG.info(logLine);\n+    trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e bootstrap(Configuration configuration)\n      throws ResourceHandlerException {\n    conf \u003d configuration;\n    //We\u0027ll do this inline for the time being - since this is a one time\n    //operation. At some point, LCE code can be refactored to batch mount\n    //operations across multiple controllers - cpu, net_cls, blkio etc\n    cGroupsHandler\n        .mountCGroupController(CGroupsHandler.CGroupController.NET_CLS);\n    device \u003d conf.get(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE,\n        YarnConfiguration.DEFAULT_NM_NETWORK_RESOURCE_INTERFACE);\n    strictMode \u003d configuration.getBoolean(YarnConfiguration\n        .NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE, YarnConfiguration\n        .DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE);\n    rootBandwidthMbit \u003d conf.getInt(YarnConfiguration\n        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT, YarnConfiguration\n        .DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\n    yarnBandwidthMbit \u003d conf.getInt(YarnConfiguration\n        .NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT, rootBandwidthMbit);\n    containerBandwidthMbit \u003d (int) Math.ceil((double) yarnBandwidthMbit /\n        MAX_CONTAINER_COUNT);\n\n    StringBuffer logLine \u003d new StringBuffer(\"strict mode is set to :\")\n        .append(strictMode).append(System.lineSeparator());\n\n    if (strictMode) {\n      logLine.append(\"container bandwidth will be capped to soft limit.\")\n          .append(System.lineSeparator());\n    } else {\n      logLine.append(\n          \"containers will be allowed to use spare YARN bandwidth.\")\n          .append(System.lineSeparator());\n    }\n\n    logLine\n        .append(\"containerBandwidthMbit soft limit (in mbit/sec) is set to : \")\n        .append(containerBandwidthMbit);\n\n    LOG.info(logLine);\n    trafficController.bootstrap(device, rootBandwidthMbit, yarnBandwidthMbit);\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficControlBandwidthHandlerImpl.java"
    }
  }
}