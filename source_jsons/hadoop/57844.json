{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebAppUtils.java",
  "functionName": "getProxyHostsAndPortsForAmFilter",
  "functionId": "getProxyHostsAndPortsForAmFilter___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java",
  "functionStartLine": 185,
  "functionEndLine": 213,
  "numCommitsSeen": 29,
  "timeTaken": 1130,
  "changeHistory": [
    "4224e613409ec97ff52ba28a7cedfe0485577257"
  ],
  "changeHistoryShort": {
    "4224e613409ec97ff52ba28a7cedfe0485577257": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4224e613409ec97ff52ba28a7cedfe0485577257": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1811. Fixed AMFilters in YARN to correctly accept requests from either web-app proxy or the RMs when HA is enabled. Contributed by Robert Kanter.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579877 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/03/14 9:20 PM",
      "commitName": "4224e613409ec97ff52ba28a7cedfe0485577257",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  public static List\u003cString\u003e getProxyHostsAndPortsForAmFilter(\n+      Configuration conf) {\n+    List\u003cString\u003e addrs \u003d new ArrayList\u003cString\u003e();\n+    String proxyAddr \u003d conf.get(YarnConfiguration.PROXY_ADDRESS);\n+    // If PROXY_ADDRESS isn\u0027t set, fallback to RM_WEBAPP(_HTTPS)_ADDRESS\n+    // There could be multiple if using RM HA\n+    if (proxyAddr \u003d\u003d null || proxyAddr.isEmpty()) {\n+      // If RM HA is enabled, try getting those addresses\n+      if (HAUtil.isHAEnabled(conf)) {\n+        List\u003cString\u003e haAddrs \u003d\n+            RMHAUtils.getRMHAWebappAddresses(new YarnConfiguration(conf));\n+        for (String addr : haAddrs) {\n+          try {\n+            InetSocketAddress socketAddr \u003d NetUtils.createSocketAddr(addr);\n+            addrs.add(getResolvedAddress(socketAddr));\n+          } catch(IllegalArgumentException e) {\n+            // skip if can\u0027t resolve\n+          }\n+        }\n+      }\n+      // If couldn\u0027t resolve any of the addresses or not using RM HA, fallback\n+      if (addrs.isEmpty()) {\n+        addrs.add(getResolvedRMWebAppURLWithoutScheme(conf));\n+      }\n+    } else {\n+      addrs.add(proxyAddr);\n+    }\n+    return addrs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cString\u003e getProxyHostsAndPortsForAmFilter(\n      Configuration conf) {\n    List\u003cString\u003e addrs \u003d new ArrayList\u003cString\u003e();\n    String proxyAddr \u003d conf.get(YarnConfiguration.PROXY_ADDRESS);\n    // If PROXY_ADDRESS isn\u0027t set, fallback to RM_WEBAPP(_HTTPS)_ADDRESS\n    // There could be multiple if using RM HA\n    if (proxyAddr \u003d\u003d null || proxyAddr.isEmpty()) {\n      // If RM HA is enabled, try getting those addresses\n      if (HAUtil.isHAEnabled(conf)) {\n        List\u003cString\u003e haAddrs \u003d\n            RMHAUtils.getRMHAWebappAddresses(new YarnConfiguration(conf));\n        for (String addr : haAddrs) {\n          try {\n            InetSocketAddress socketAddr \u003d NetUtils.createSocketAddr(addr);\n            addrs.add(getResolvedAddress(socketAddr));\n          } catch(IllegalArgumentException e) {\n            // skip if can\u0027t resolve\n          }\n        }\n      }\n      // If couldn\u0027t resolve any of the addresses or not using RM HA, fallback\n      if (addrs.isEmpty()) {\n        addrs.add(getResolvedRMWebAppURLWithoutScheme(conf));\n      }\n    } else {\n      addrs.add(proxyAddr);\n    }\n    return addrs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/util/WebAppUtils.java"
    }
  }
}