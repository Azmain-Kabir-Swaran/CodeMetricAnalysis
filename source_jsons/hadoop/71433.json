{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistrySecurity.java",
  "functionName": "applySecurityEnvironment",
  "functionId": "applySecurityEnvironment___builder-CuratorFrameworkFactory.Builder",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
  "functionStartLine": 741,
  "functionEndLine": 794,
  "numCommitsSeen": 22,
  "timeTaken": 3727,
  "changeHistory": [
    "6d92aa7c30439d78deb68cc3186a67557544681f",
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "95904f6b3ccd1d167088086472eabdd85b2d148d",
    "7280c5af82d36a9be15448293210d871f680f55e",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a"
  ],
  "changeHistoryShort": {
    "6d92aa7c30439d78deb68cc3186a67557544681f": "Ybodychange",
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "95904f6b3ccd1d167088086472eabdd85b2d148d": "Ymultichange(Yexceptionschange,Ybodychange)",
    "7280c5af82d36a9be15448293210d871f680f55e": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d92aa7c30439d78deb68cc3186a67557544681f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16579. Upgrade to Curator 4.2.0 and ZooKeeper 3.5.5 (#1656). Contributed by Norbert Kalmár, Mate Szalay-Beko\n\n* HADOOP-16579 - Upgrade to Apache Curator 4.2.0 and ZooKeeper 3.5.5\r\n\r\n- Add a static initializer for the unit tests using ZooKeeper to enable\r\nthe four-letter-words diagnostic telnet commands. (this is an interface\r\nthat become disabled by default, so to keep the ZooKeeper 3.4.x behavior\r\nwe enabled it for the tests)\r\n- Also fix ZKFailoverController to look for relevant fail-over ActiveAttempt\r\nrecords. The new ZooKeeper seems to respond quicker during the fail-over\r\ntests than the ZooKeeper, so we made sure to catch all the relevant records\r\nby adding a new parameter to ZKFailoverontroller.waitForActiveAttempt().\r\n\r\nCo-authored-by: Norbert Kalmár \u003cnkalmar@cloudera.com\u003e",
      "commitDate": "18/10/19 1:26 PM",
      "commitName": "6d92aa7c30439d78deb68cc3186a67557544681f",
      "commitAuthor": "Mate Szalay-Beko",
      "commitDateOld": "19/09/19 8:00 AM",
      "commitNameOld": "56248f9d87fdf65df6103f52f47dc6e8b9969abc",
      "commitAuthorOld": "Malcolm Taylor",
      "daysBetweenCommits": 29.23,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n       builder) throws IOException {\n \n     if (isSecureRegistry()) {\n       switch (access) {\n         case anon:\n           clearZKSaslClientProperties();\n           break;\n \n         case digest:\n           // no SASL\n           clearZKSaslClientProperties();\n           builder.authorization(SCHEME_DIGEST, digestAuthData);\n           break;\n \n         case sasl:\n           String existingJaasConf \u003d System.getProperty(\n               \"java.security.auth.login.config\");\n           if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n             if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n               throw new IOException(\"SASL is configured for registry, \" +\n                   \"but neither keytab/principal nor java.security.auth.login\" +\n                   \".config system property are specified\");\n             }\n             // in this case, keytab and principal are specified and no jaas\n             // config is specified, so we will create one\n             LOG.info(\n                 \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                     + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n             JaasConfiguration jconf \u003d\n                 new JaasConfiguration(jaasClientEntry, principal, keytab);\n             javax.security.auth.login.Configuration.setConfiguration(jconf);\n-            setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n-                \"true\");\n-            setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n-                jaasClientEntry);\n+            setSystemPropertyIfUnset(ZKClientConfig.ENABLE_CLIENT_SASL_KEY,\n+                                     \"true\");\n+            setSystemPropertyIfUnset(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY,\n+                                     jaasClientEntry);\n           } else {\n             // in this case, jaas config is specified so we will not change it\n             LOG.info(\"Using existing ZK sasl configuration: \" +\n-                \"jaasClientEntry \u003d \" + System.getProperty(\n-                    ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n-                \", sasl client \u003d \" + System.getProperty(\n-                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n-                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_DEFAULT) +\n-                \", jaas \u003d \" + existingJaasConf);\n+              \"jaasClientEntry \u003d \" + System.getProperty(\n+              ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n+              \", sasl client \u003d \" + System.getProperty(\n+              ZKClientConfig.ENABLE_CLIENT_SASL_KEY,\n+              ZKClientConfig.ENABLE_CLIENT_SASL_DEFAULT) +\n+              \", jaas \u003d \" + existingJaasConf);\n           }\n           break;\n \n         default:\n           clearZKSaslClientProperties();\n           break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n      builder) throws IOException {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          String existingJaasConf \u003d System.getProperty(\n              \"java.security.auth.login.config\");\n          if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n            if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n              throw new IOException(\"SASL is configured for registry, \" +\n                  \"but neither keytab/principal nor java.security.auth.login\" +\n                  \".config system property are specified\");\n            }\n            // in this case, keytab and principal are specified and no jaas\n            // config is specified, so we will create one\n            LOG.info(\n                \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                    + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n            JaasConfiguration jconf \u003d\n                new JaasConfiguration(jaasClientEntry, principal, keytab);\n            javax.security.auth.login.Configuration.setConfiguration(jconf);\n            setSystemPropertyIfUnset(ZKClientConfig.ENABLE_CLIENT_SASL_KEY,\n                                     \"true\");\n            setSystemPropertyIfUnset(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY,\n                                     jaasClientEntry);\n          } else {\n            // in this case, jaas config is specified so we will not change it\n            LOG.info(\"Using existing ZK sasl configuration: \" +\n              \"jaasClientEntry \u003d \" + System.getProperty(\n              ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n              \", sasl client \u003d \" + System.getProperty(\n              ZKClientConfig.ENABLE_CLIENT_SASL_KEY,\n              ZKClientConfig.ENABLE_CLIENT_SASL_DEFAULT) +\n              \", jaas \u003d \" + existingJaasConf);\n          }\n          break;\n\n        default:\n          clearZKSaslClientProperties();\n          break;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n      builder) throws IOException {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          String existingJaasConf \u003d System.getProperty(\n              \"java.security.auth.login.config\");\n          if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n            if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n              throw new IOException(\"SASL is configured for registry, \" +\n                  \"but neither keytab/principal nor java.security.auth.login\" +\n                  \".config system property are specified\");\n            }\n            // in this case, keytab and principal are specified and no jaas\n            // config is specified, so we will create one\n            LOG.info(\n                \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                    + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n            JaasConfiguration jconf \u003d\n                new JaasConfiguration(jaasClientEntry, principal, keytab);\n            javax.security.auth.login.Configuration.setConfiguration(jconf);\n            setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n                \"true\");\n            setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n                jaasClientEntry);\n          } else {\n            // in this case, jaas config is specified so we will not change it\n            LOG.info(\"Using existing ZK sasl configuration: \" +\n                \"jaasClientEntry \u003d \" + System.getProperty(\n                    ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n                \", sasl client \u003d \" + System.getProperty(\n                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_DEFAULT) +\n                \", jaas \u003d \" + existingJaasConf);\n          }\n          break;\n\n        default:\n          clearZKSaslClientProperties();\n          break;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java"
      }
    },
    "95904f6b3ccd1d167088086472eabdd85b2d148d": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7942. Add check for JAAS configuration for Yarn Service.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "22/02/18 1:12 PM",
      "commitName": "95904f6b3ccd1d167088086472eabdd85b2d148d",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7942. Add check for JAAS configuration for Yarn Service.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "22/02/18 1:12 PM",
          "commitName": "95904f6b3ccd1d167088086472eabdd85b2d148d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "20/02/18 11:12 AM",
          "commitNameOld": "7280c5af82d36a9be15448293210d871f680f55e",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 2.08,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,54 @@\n-  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n+  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n+      builder) throws IOException {\n \n     if (isSecureRegistry()) {\n       switch (access) {\n         case anon:\n           clearZKSaslClientProperties();\n           break;\n \n         case digest:\n           // no SASL\n           clearZKSaslClientProperties();\n           builder.authorization(SCHEME_DIGEST, digestAuthData);\n           break;\n \n         case sasl:\n-          JaasConfiguration jconf \u003d\n-              new JaasConfiguration(jaasClientEntry, principal, keytab);\n-          javax.security.auth.login.Configuration.setConfiguration(jconf);\n-          setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n-              \"true\");\n-          setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n-              jaasClientEntry);\n-          LOG.info(\n-              \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n-                  + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n+          String existingJaasConf \u003d System.getProperty(\n+              \"java.security.auth.login.config\");\n+          if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n+            if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n+              throw new IOException(\"SASL is configured for registry, \" +\n+                  \"but neither keytab/principal nor java.security.auth.login\" +\n+                  \".config system property are specified\");\n+            }\n+            // in this case, keytab and principal are specified and no jaas\n+            // config is specified, so we will create one\n+            LOG.info(\n+                \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n+                    + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n+            JaasConfiguration jconf \u003d\n+                new JaasConfiguration(jaasClientEntry, principal, keytab);\n+            javax.security.auth.login.Configuration.setConfiguration(jconf);\n+            setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n+                \"true\");\n+            setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n+                jaasClientEntry);\n+          } else {\n+            // in this case, jaas config is specified so we will not change it\n+            LOG.info(\"Using existing ZK sasl configuration: \" +\n+                \"jaasClientEntry \u003d \" + System.getProperty(\n+                    ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n+                \", sasl client \u003d \" + System.getProperty(\n+                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n+                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_DEFAULT) +\n+                \", jaas \u003d \" + existingJaasConf);\n+          }\n           break;\n \n         default:\n           clearZKSaslClientProperties();\n           break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n      builder) throws IOException {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          String existingJaasConf \u003d System.getProperty(\n              \"java.security.auth.login.config\");\n          if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n            if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n              throw new IOException(\"SASL is configured for registry, \" +\n                  \"but neither keytab/principal nor java.security.auth.login\" +\n                  \".config system property are specified\");\n            }\n            // in this case, keytab and principal are specified and no jaas\n            // config is specified, so we will create one\n            LOG.info(\n                \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                    + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n            JaasConfiguration jconf \u003d\n                new JaasConfiguration(jaasClientEntry, principal, keytab);\n            javax.security.auth.login.Configuration.setConfiguration(jconf);\n            setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n                \"true\");\n            setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n                jaasClientEntry);\n          } else {\n            // in this case, jaas config is specified so we will not change it\n            LOG.info(\"Using existing ZK sasl configuration: \" +\n                \"jaasClientEntry \u003d \" + System.getProperty(\n                    ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n                \", sasl client \u003d \" + System.getProperty(\n                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_DEFAULT) +\n                \", jaas \u003d \" + existingJaasConf);\n          }\n          break;\n\n        default:\n          clearZKSaslClientProperties();\n          break;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7942. Add check for JAAS configuration for Yarn Service.\n           Contributed by Billie Rinaldi\n",
          "commitDate": "22/02/18 1:12 PM",
          "commitName": "95904f6b3ccd1d167088086472eabdd85b2d148d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "20/02/18 11:12 AM",
          "commitNameOld": "7280c5af82d36a9be15448293210d871f680f55e",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 2.08,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,54 @@\n-  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n+  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n+      builder) throws IOException {\n \n     if (isSecureRegistry()) {\n       switch (access) {\n         case anon:\n           clearZKSaslClientProperties();\n           break;\n \n         case digest:\n           // no SASL\n           clearZKSaslClientProperties();\n           builder.authorization(SCHEME_DIGEST, digestAuthData);\n           break;\n \n         case sasl:\n-          JaasConfiguration jconf \u003d\n-              new JaasConfiguration(jaasClientEntry, principal, keytab);\n-          javax.security.auth.login.Configuration.setConfiguration(jconf);\n-          setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n-              \"true\");\n-          setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n-              jaasClientEntry);\n-          LOG.info(\n-              \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n-                  + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n+          String existingJaasConf \u003d System.getProperty(\n+              \"java.security.auth.login.config\");\n+          if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n+            if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n+              throw new IOException(\"SASL is configured for registry, \" +\n+                  \"but neither keytab/principal nor java.security.auth.login\" +\n+                  \".config system property are specified\");\n+            }\n+            // in this case, keytab and principal are specified and no jaas\n+            // config is specified, so we will create one\n+            LOG.info(\n+                \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n+                    + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n+            JaasConfiguration jconf \u003d\n+                new JaasConfiguration(jaasClientEntry, principal, keytab);\n+            javax.security.auth.login.Configuration.setConfiguration(jconf);\n+            setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n+                \"true\");\n+            setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n+                jaasClientEntry);\n+          } else {\n+            // in this case, jaas config is specified so we will not change it\n+            LOG.info(\"Using existing ZK sasl configuration: \" +\n+                \"jaasClientEntry \u003d \" + System.getProperty(\n+                    ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n+                \", sasl client \u003d \" + System.getProperty(\n+                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n+                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_DEFAULT) +\n+                \", jaas \u003d \" + existingJaasConf);\n+          }\n           break;\n \n         default:\n           clearZKSaslClientProperties();\n           break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder\n      builder) throws IOException {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          String existingJaasConf \u003d System.getProperty(\n              \"java.security.auth.login.config\");\n          if (existingJaasConf \u003d\u003d null || existingJaasConf.isEmpty()) {\n            if (principal \u003d\u003d null || keytab \u003d\u003d null) {\n              throw new IOException(\"SASL is configured for registry, \" +\n                  \"but neither keytab/principal nor java.security.auth.login\" +\n                  \".config system property are specified\");\n            }\n            // in this case, keytab and principal are specified and no jaas\n            // config is specified, so we will create one\n            LOG.info(\n                \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                    + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n            JaasConfiguration jconf \u003d\n                new JaasConfiguration(jaasClientEntry, principal, keytab);\n            javax.security.auth.login.Configuration.setConfiguration(jconf);\n            setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n                \"true\");\n            setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n                jaasClientEntry);\n          } else {\n            // in this case, jaas config is specified so we will not change it\n            LOG.info(\"Using existing ZK sasl configuration: \" +\n                \"jaasClientEntry \u003d \" + System.getProperty(\n                    ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY, \"Client\") +\n                \", sasl client \u003d \" + System.getProperty(\n                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n                    ZooKeeperSaslClient.ENABLE_CLIENT_SASL_DEFAULT) +\n                \", jaas \u003d \" + existingJaasConf);\n          }\n          break;\n\n        default:\n          clearZKSaslClientProperties();\n          break;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
          "extendedDetails": {}
        }
      ]
    },
    "7280c5af82d36a9be15448293210d871f680f55e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7940. Fixed a bug in ServiceAM ZooKeeper initialization.\n           (Contributed by Billie Rinaldi)\n",
      "commitDate": "20/02/18 11:12 AM",
      "commitName": "7280c5af82d36a9be15448293210d871f680f55e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "23/01/18 5:54 PM",
      "commitNameOld": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 27.72,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n \n     if (isSecureRegistry()) {\n       switch (access) {\n         case anon:\n           clearZKSaslClientProperties();\n           break;\n \n         case digest:\n           // no SASL\n           clearZKSaslClientProperties();\n           builder.authorization(SCHEME_DIGEST, digestAuthData);\n           break;\n \n         case sasl:\n           JaasConfiguration jconf \u003d\n               new JaasConfiguration(jaasClientEntry, principal, keytab);\n           javax.security.auth.login.Configuration.setConfiguration(jconf);\n           setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n               \"true\");\n           setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n               jaasClientEntry);\n           LOG.info(\n               \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                   + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n+          break;\n+\n         default:\n           clearZKSaslClientProperties();\n           break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          JaasConfiguration jconf \u003d\n              new JaasConfiguration(jaasClientEntry, principal, keytab);\n          javax.security.auth.login.Configuration.setConfiguration(jconf);\n          setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n              \"true\");\n          setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n              jaasClientEntry);\n          LOG.info(\n              \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                  + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n          break;\n\n        default:\n          clearZKSaslClientProperties();\n          break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 50.24,
      "commitsBetweenForRepo": 277,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n \n     if (isSecureRegistry()) {\n       switch (access) {\n         case anon:\n           clearZKSaslClientProperties();\n           break;\n \n         case digest:\n           // no SASL\n           clearZKSaslClientProperties();\n           builder.authorization(SCHEME_DIGEST, digestAuthData);\n           break;\n \n         case sasl:\n           JaasConfiguration jconf \u003d\n               new JaasConfiguration(jaasClientEntry, principal, keytab);\n           javax.security.auth.login.Configuration.setConfiguration(jconf);\n           setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n               \"true\");\n           setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n               jaasClientEntry);\n           LOG.info(\n               \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                   + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n+        default:\n+          clearZKSaslClientProperties();\n+          break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          JaasConfiguration jconf \u003d\n              new JaasConfiguration(jaasClientEntry, principal, keytab);\n          javax.security.auth.login.Configuration.setConfiguration(jconf);\n          setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n              \"true\");\n          setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n              jaasClientEntry);\n          LOG.info(\n              \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                  + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n        default:\n          clearZKSaslClientProperties();\n          break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/17 9:59 PM",
      "commitNameOld": "6d95866dcf278dd7789604787691fe8ee8d9cc9f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 263.63,
      "commitsBetweenForRepo": 1792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,28 @@\n   public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n \n     if (isSecureRegistry()) {\n       switch (access) {\n         case anon:\n           clearZKSaslClientProperties();\n           break;\n \n         case digest:\n           // no SASL\n           clearZKSaslClientProperties();\n           builder.authorization(SCHEME_DIGEST, digestAuthData);\n           break;\n \n         case sasl:\n-          // bind to the current identity and context within the JAAS file\n-          setZKSaslClientProperties(jaasClientIdentity, jaasClientContext);\n+          JaasConfiguration jconf \u003d\n+              new JaasConfiguration(jaasClientEntry, principal, keytab);\n+          javax.security.auth.login.Configuration.setConfiguration(jconf);\n+          setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n+              \"true\");\n+          setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n+              jaasClientEntry);\n+          LOG.info(\n+              \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n+                  + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          JaasConfiguration jconf \u003d\n              new JaasConfiguration(jaasClientEntry, principal, keytab);\n          javax.security.auth.login.Configuration.setConfiguration(jconf);\n          setSystemPropertyIfUnset(ZooKeeperSaslClient.ENABLE_CLIENT_SASL_KEY,\n              \"true\");\n          setSystemPropertyIfUnset(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n              jaasClientEntry);\n          LOG.info(\n              \"Enabling ZK sasl client: jaasClientEntry \u003d \" + jaasClientEntry\n                  + \", principal \u003d \" + principal + \", keytab \u003d \" + keytab);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java",
      "extendedDetails": {}
    },
    "6a326711aa27e84fd4c53937afc5c41a746ec65a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-913 service registry: YARN-2652 add hadoop-yarn-registry package under hadoop-yarn\n",
      "commitDate": "08/10/14 1:02 PM",
      "commitName": "6a326711aa27e84fd4c53937afc5c41a746ec65a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,20 @@\n+  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n+\n+    if (isSecureRegistry()) {\n+      switch (access) {\n+        case anon:\n+          clearZKSaslClientProperties();\n+          break;\n+\n+        case digest:\n+          // no SASL\n+          clearZKSaslClientProperties();\n+          builder.authorization(SCHEME_DIGEST, digestAuthData);\n+          break;\n+\n+        case sasl:\n+          // bind to the current identity and context within the JAAS file\n+          setZKSaslClientProperties(jaasClientIdentity, jaasClientContext);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void applySecurityEnvironment(CuratorFrameworkFactory.Builder builder) {\n\n    if (isSecureRegistry()) {\n      switch (access) {\n        case anon:\n          clearZKSaslClientProperties();\n          break;\n\n        case digest:\n          // no SASL\n          clearZKSaslClientProperties();\n          builder.authorization(SCHEME_DIGEST, digestAuthData);\n          break;\n\n        case sasl:\n          // bind to the current identity and context within the JAAS file\n          setZKSaslClientProperties(jaasClientIdentity, jaasClientContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/client/impl/zk/RegistrySecurity.java"
    }
  }
}