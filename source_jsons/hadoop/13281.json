{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "getDatanodeStorageInfos",
  "functionId": "getDatanodeStorageInfos___datanodeID-DatanodeID[]__storageIDs-String[]__format-String__args-Object",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 685,
  "functionEndLine": 715,
  "numCommitsSeen": 285,
  "timeTaken": 4985,
  "changeHistory": [
    "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
    "61ab0440f7eaff0f631cbae0378403912f88d7ad",
    "0b18e5e8c69b40c9a446fff448d38e0dd10cb45e",
    "6419900ac24a5493827abf9b5d90373bc1043e0b"
  ],
  "changeHistoryShort": {
    "2b5ad48762587abbcd8bdb50d0ae98f8080d926c": "Ybodychange",
    "61ab0440f7eaff0f631cbae0378403912f88d7ad": "Ybodychange",
    "0b18e5e8c69b40c9a446fff448d38e0dd10cb45e": "Ymultichange(Yparameterchange,Ybodychange)",
    "6419900ac24a5493827abf9b5d90373bc1043e0b": "Ybodychange"
  },
  "changeHistoryDetails": {
    "2b5ad48762587abbcd8bdb50d0ae98f8080d926c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11817. A faulty node can cause a lease leak and NPE on accessing data. Contributed by Kihwal Lee.\n",
      "commitDate": "25/05/17 3:17 PM",
      "commitName": "2b5ad48762587abbcd8bdb50d0ae98f8080d926c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "04/05/17 8:54 PM",
      "commitNameOld": "97c2e576c91c2316c2b52bfc948bae9bff8ca49f",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public DatanodeStorageInfo[] getDatanodeStorageInfos(\n       DatanodeID[] datanodeID, String[] storageIDs,\n       String format, Object... args) throws UnregisteredNodeException {\n     storageIDs \u003d storageIDs \u003d\u003d null ? new String[0] : storageIDs;\n     if (datanodeID.length !\u003d storageIDs.length) {\n+      // Error for pre-2.0.0-alpha clients.\n       final String err \u003d (storageIDs.length \u003d\u003d 0?\n           \"Missing storageIDs: It is likely that the HDFS client,\"\n           + \" who made this call, is running in an older version of Hadoop\"\n-          + \" which does not support storageIDs.\"\n+          + \"(pre-2.0.0-alpha)  which does not support storageIDs.\"\n           : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n           ) + \" datanodeID.length\u003d\" + datanodeID.length;\n       throw new HadoopIllegalArgumentException(\n           err + \", \"+ String.format(format, args));\n     }\n     if (datanodeID.length \u003d\u003d 0) {\n       return null;\n     }\n     final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n     for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n       if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n         storages[i] \u003d null;\n         continue;\n       }\n       final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n       if (dd !\u003d null) {\n         storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n       }\n     }\n     return storages;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DatanodeStorageInfo[] getDatanodeStorageInfos(\n      DatanodeID[] datanodeID, String[] storageIDs,\n      String format, Object... args) throws UnregisteredNodeException {\n    storageIDs \u003d storageIDs \u003d\u003d null ? new String[0] : storageIDs;\n    if (datanodeID.length !\u003d storageIDs.length) {\n      // Error for pre-2.0.0-alpha clients.\n      final String err \u003d (storageIDs.length \u003d\u003d 0?\n          \"Missing storageIDs: It is likely that the HDFS client,\"\n          + \" who made this call, is running in an older version of Hadoop\"\n          + \"(pre-2.0.0-alpha)  which does not support storageIDs.\"\n          : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n          ) + \" datanodeID.length\u003d\" + datanodeID.length;\n      throw new HadoopIllegalArgumentException(\n          err + \", \"+ String.format(format, args));\n    }\n    if (datanodeID.length \u003d\u003d 0) {\n      return null;\n    }\n    final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n    for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n      if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n        storages[i] \u003d null;\n        continue;\n      }\n      final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n      if (dd !\u003d null) {\n        storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n      }\n    }\n    return storages;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "61ab0440f7eaff0f631cbae0378403912f88d7ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9173. Erasure Coding: Lease recovery for striped file. Contributed by Walter Su and Jing Zhao.\n\nChange-Id: I51703a61c9d8454f883028f3f6acb5729fde1b15\n",
      "commitDate": "18/12/15 3:57 PM",
      "commitName": "61ab0440f7eaff0f631cbae0378403912f88d7ad",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "16/12/15 6:16 PM",
      "commitNameOld": "f741476146574550a1a208d58ef8be76639e5ddc",
      "commitAuthorOld": "Uma Mahesh",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   public DatanodeStorageInfo[] getDatanodeStorageInfos(\n       DatanodeID[] datanodeID, String[] storageIDs,\n       String format, Object... args) throws UnregisteredNodeException {\n+    storageIDs \u003d storageIDs \u003d\u003d null ? new String[0] : storageIDs;\n     if (datanodeID.length !\u003d storageIDs.length) {\n       final String err \u003d (storageIDs.length \u003d\u003d 0?\n           \"Missing storageIDs: It is likely that the HDFS client,\"\n           + \" who made this call, is running in an older version of Hadoop\"\n           + \" which does not support storageIDs.\"\n           : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n           ) + \" datanodeID.length\u003d\" + datanodeID.length;\n       throw new HadoopIllegalArgumentException(\n           err + \", \"+ String.format(format, args));\n     }\n     if (datanodeID.length \u003d\u003d 0) {\n       return null;\n     }\n     final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n     for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n       if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n         storages[i] \u003d null;\n         continue;\n       }\n       final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n-      storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n+      if (dd !\u003d null) {\n+        storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n+      }\n     }\n-    return storages; \n+    return storages;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DatanodeStorageInfo[] getDatanodeStorageInfos(\n      DatanodeID[] datanodeID, String[] storageIDs,\n      String format, Object... args) throws UnregisteredNodeException {\n    storageIDs \u003d storageIDs \u003d\u003d null ? new String[0] : storageIDs;\n    if (datanodeID.length !\u003d storageIDs.length) {\n      final String err \u003d (storageIDs.length \u003d\u003d 0?\n          \"Missing storageIDs: It is likely that the HDFS client,\"\n          + \" who made this call, is running in an older version of Hadoop\"\n          + \" which does not support storageIDs.\"\n          : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n          ) + \" datanodeID.length\u003d\" + datanodeID.length;\n      throw new HadoopIllegalArgumentException(\n          err + \", \"+ String.format(format, args));\n    }\n    if (datanodeID.length \u003d\u003d 0) {\n      return null;\n    }\n    final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n    for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n      if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n        storages[i] \u003d null;\n        continue;\n      }\n      final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n      if (dd !\u003d null) {\n        storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n      }\n    }\n    return storages;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "0b18e5e8c69b40c9a446fff448d38e0dd10cb45e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6481. DatanodeManager#getDatanodeStorageInfos() should check the length of storageIDs. (Contributed by szetszwo)\n",
      "commitDate": "06/11/15 10:15 AM",
      "commitName": "0b18e5e8c69b40c9a446fff448d38e0dd10cb45e",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6481. DatanodeManager#getDatanodeStorageInfos() should check the length of storageIDs. (Contributed by szetszwo)\n",
          "commitDate": "06/11/15 10:15 AM",
          "commitName": "0b18e5e8c69b40c9a446fff448d38e0dd10cb45e",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "28/10/15 7:34 AM",
          "commitNameOld": "e287e7d14b838a866ba03d895fa35819999d7c09",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 9.15,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,27 @@\n   public DatanodeStorageInfo[] getDatanodeStorageInfos(\n-      DatanodeID[] datanodeID, String[] storageIDs)\n-          throws UnregisteredNodeException {\n+      DatanodeID[] datanodeID, String[] storageIDs,\n+      String format, Object... args) throws UnregisteredNodeException {\n+    if (datanodeID.length !\u003d storageIDs.length) {\n+      final String err \u003d (storageIDs.length \u003d\u003d 0?\n+          \"Missing storageIDs: It is likely that the HDFS client,\"\n+          + \" who made this call, is running in an older version of Hadoop\"\n+          + \" which does not support storageIDs.\"\n+          : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n+          ) + \" datanodeID.length\u003d\" + datanodeID.length;\n+      throw new HadoopIllegalArgumentException(\n+          err + \", \"+ String.format(format, args));\n+    }\n     if (datanodeID.length \u003d\u003d 0) {\n       return null;\n     }\n     final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n     for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n       if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n         storages[i] \u003d null;\n         continue;\n       }\n       final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n       storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n     }\n     return storages; \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DatanodeStorageInfo[] getDatanodeStorageInfos(\n      DatanodeID[] datanodeID, String[] storageIDs,\n      String format, Object... args) throws UnregisteredNodeException {\n    if (datanodeID.length !\u003d storageIDs.length) {\n      final String err \u003d (storageIDs.length \u003d\u003d 0?\n          \"Missing storageIDs: It is likely that the HDFS client,\"\n          + \" who made this call, is running in an older version of Hadoop\"\n          + \" which does not support storageIDs.\"\n          : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n          ) + \" datanodeID.length\u003d\" + datanodeID.length;\n      throw new HadoopIllegalArgumentException(\n          err + \", \"+ String.format(format, args));\n    }\n    if (datanodeID.length \u003d\u003d 0) {\n      return null;\n    }\n    final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n    for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n      if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n        storages[i] \u003d null;\n        continue;\n      }\n      final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n      storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n    }\n    return storages; \n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {
            "oldValue": "[datanodeID-DatanodeID[], storageIDs-String[]]",
            "newValue": "[datanodeID-DatanodeID[], storageIDs-String[], format-String, args-Object]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6481. DatanodeManager#getDatanodeStorageInfos() should check the length of storageIDs. (Contributed by szetszwo)\n",
          "commitDate": "06/11/15 10:15 AM",
          "commitName": "0b18e5e8c69b40c9a446fff448d38e0dd10cb45e",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "28/10/15 7:34 AM",
          "commitNameOld": "e287e7d14b838a866ba03d895fa35819999d7c09",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 9.15,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,27 @@\n   public DatanodeStorageInfo[] getDatanodeStorageInfos(\n-      DatanodeID[] datanodeID, String[] storageIDs)\n-          throws UnregisteredNodeException {\n+      DatanodeID[] datanodeID, String[] storageIDs,\n+      String format, Object... args) throws UnregisteredNodeException {\n+    if (datanodeID.length !\u003d storageIDs.length) {\n+      final String err \u003d (storageIDs.length \u003d\u003d 0?\n+          \"Missing storageIDs: It is likely that the HDFS client,\"\n+          + \" who made this call, is running in an older version of Hadoop\"\n+          + \" which does not support storageIDs.\"\n+          : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n+          ) + \" datanodeID.length\u003d\" + datanodeID.length;\n+      throw new HadoopIllegalArgumentException(\n+          err + \", \"+ String.format(format, args));\n+    }\n     if (datanodeID.length \u003d\u003d 0) {\n       return null;\n     }\n     final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n     for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n       if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n         storages[i] \u003d null;\n         continue;\n       }\n       final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n       storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n     }\n     return storages; \n   }\n\\ No newline at end of file\n",
          "actualSource": "  public DatanodeStorageInfo[] getDatanodeStorageInfos(\n      DatanodeID[] datanodeID, String[] storageIDs,\n      String format, Object... args) throws UnregisteredNodeException {\n    if (datanodeID.length !\u003d storageIDs.length) {\n      final String err \u003d (storageIDs.length \u003d\u003d 0?\n          \"Missing storageIDs: It is likely that the HDFS client,\"\n          + \" who made this call, is running in an older version of Hadoop\"\n          + \" which does not support storageIDs.\"\n          : \"Length mismatched: storageIDs.length\u003d\" + storageIDs.length + \" !\u003d \"\n          ) + \" datanodeID.length\u003d\" + datanodeID.length;\n      throw new HadoopIllegalArgumentException(\n          err + \", \"+ String.format(format, args));\n    }\n    if (datanodeID.length \u003d\u003d 0) {\n      return null;\n    }\n    final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n    for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n      if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n        storages[i] \u003d null;\n        continue;\n      }\n      final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n      storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n    }\n    return storages; \n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "6419900ac24a5493827abf9b5d90373bc1043e0b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9040. Erasure coding: coordinate data streamers in DFSStripedOutputStream. Contributed by Jing Zhao and Walter Su.\n",
      "commitDate": "28/09/15 2:40 PM",
      "commitName": "6419900ac24a5493827abf9b5d90373bc1043e0b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/09/15 1:27 PM",
      "commitNameOld": "1080c3730068177ddd10dc313890ac1f5dc58f1a",
      "commitAuthorOld": "",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,17 @@\n   public DatanodeStorageInfo[] getDatanodeStorageInfos(\n       DatanodeID[] datanodeID, String[] storageIDs)\n           throws UnregisteredNodeException {\n     if (datanodeID.length \u003d\u003d 0) {\n       return null;\n     }\n     final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n     for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n+      if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n+        storages[i] \u003d null;\n+        continue;\n+      }\n       final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n       storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n     }\n     return storages; \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DatanodeStorageInfo[] getDatanodeStorageInfos(\n      DatanodeID[] datanodeID, String[] storageIDs)\n          throws UnregisteredNodeException {\n    if (datanodeID.length \u003d\u003d 0) {\n      return null;\n    }\n    final DatanodeStorageInfo[] storages \u003d new DatanodeStorageInfo[datanodeID.length];\n    for(int i \u003d 0; i \u003c datanodeID.length; i++) {\n      if (datanodeID[i].equals(DatanodeID.EMPTY_DATANODE_ID)) {\n        storages[i] \u003d null;\n        continue;\n      }\n      final DatanodeDescriptor dd \u003d getDatanode(datanodeID[i]);\n      storages[i] \u003d dd.getStorageInfo(storageIDs[i]);\n    }\n    return storages; \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    }
  }
}