{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "handle",
  "functionId": "handle___event-SchedulerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 735,
  "functionEndLine": 833,
  "numCommitsSeen": 137,
  "timeTaken": 12170,
  "changeHistory": [
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff",
    "adf260a728df427eb729abe8fb9ad7248991ea54",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
    "9b272ccae78918e7d756d84920a9322187d61eed",
    "5c14bc426b4be381383018ebc2236be83eef15cd",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78",
    "bda23181bf1931c37d2590e03da9acdc6688ad34",
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288",
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "312a7e71001d55f88781e56b331ab1b40a72a980",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d": "Ybodychange",
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": "Ybodychange",
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": "Ybodychange",
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": "Ybodychange",
    "adf260a728df427eb729abe8fb9ad7248991ea54": "Ybodychange",
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": "Ybodychange",
    "9b272ccae78918e7d756d84920a9322187d61eed": "Ybodychange",
    "5c14bc426b4be381383018ebc2236be83eef15cd": "Ybodychange",
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": "Ybodychange",
    "bda23181bf1931c37d2590e03da9acdc6688ad34": "Ybodychange",
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": "Ybodychange",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": "Ybodychange",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": "Ybodychange",
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "312a7e71001d55f88781e56b331ab1b40a72a980": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f49843a9888ad8fe5c1bb4c16bfb5217d693009d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6251. Do async container release to prevent deadlock during container updates. (Arun Suresh via wangda)\n\nChange-Id: I6c67d20c5dd4d22752830ebf0ed2340824976ecb\n",
      "commitDate": "23/08/17 9:56 AM",
      "commitName": "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/08/17 10:51 AM",
      "commitNameOld": "e2f6299f6f580d7a03f2377d19ac85f55fd4e73b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,99 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       super.completedContainer(getRMContainer(containerid),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n+    case RELEASE_CONTAINER: {\n+      if (!(event instanceof ReleaseContainerEvent)) {\n+        throw new RuntimeException(\"Unexpected event type: \" + event);\n+      }\n+      RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n+      completedContainer(container,\n+          SchedulerUtils.createAbnormalContainerStatus(\n+              container.getContainerId(),\n+              SchedulerUtils.RELEASED_CONTAINER),\n+          RMContainerEventType.RELEASED);\n+    }\n+    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerid),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    case RELEASE_CONTAINER: {\n      if (!(event instanceof ReleaseContainerEvent)) {\n        throw new RuntimeException(\"Unexpected event type: \" + event);\n      }\n      RMContainer container \u003d ((ReleaseContainerEvent) event).getContainer();\n      completedContainer(container,\n          SchedulerUtils.createAbnormalContainerStatus(\n              container.getContainerId(),\n              SchedulerUtils.RELEASED_CONTAINER),\n          RMContainerEventType.RELEASED);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "18/01/16 5:30 PM",
      "commitName": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 5:27 PM",
      "commitNameOld": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,87 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n-      completedContainer(getRMContainer(containerid), \n+      super.completedContainer(getRMContainer(containerid),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n-    case CONTAINER_RESCHEDULED:\n-    {\n-      ContainerRescheduledEvent containerRescheduledEvent \u003d\n-          (ContainerRescheduledEvent) event;\n-      RMContainer container \u003d containerRescheduledEvent.getContainer();\n-      recoverResourceRequestForContainer(container);\n-    }\n-    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerid),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "150f5ae0343e872ee8bef39c57008c1389f0ba9e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 3fe57285635e8058c34aa40a103845b49ca7d6ff.\n\nConflicts:\n\thadoop-yarn-project/CHANGES.txt\n",
      "commitDate": "18/01/16 5:27 PM",
      "commitName": "150f5ae0343e872ee8bef39c57008c1389f0ba9e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 1:06 AM",
      "commitNameOld": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n-      super.completedContainer(getRMContainer(containerid),\n+      completedContainer(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n+    case CONTAINER_RESCHEDULED:\n+    {\n+      ContainerRescheduledEvent containerRescheduledEvent \u003d\n+          (ContainerRescheduledEvent) event;\n+      RMContainer container \u003d containerRescheduledEvent.getContainer();\n+      recoverResourceRequestForContainer(container);\n+    }\n+    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    case CONTAINER_RESCHEDULED:\n    {\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "3fe57285635e8058c34aa40a103845b49ca7d6ff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n\n(cherry picked from commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579)\n",
      "commitDate": "18/01/16 1:06 AM",
      "commitName": "3fe57285635e8058c34aa40a103845b49ca7d6ff",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/01/16 12:50 AM",
      "commitNameOld": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,87 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n-      completedContainer(getRMContainer(containerid), \n+      super.completedContainer(getRMContainer(containerid),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n-    case CONTAINER_RESCHEDULED:\n-    {\n-      ContainerRescheduledEvent containerRescheduledEvent \u003d\n-          (ContainerRescheduledEvent) event;\n-      RMContainer container \u003d containerRescheduledEvent.getContainer();\n-      recoverResourceRequestForContainer(container);\n-    }\n-    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerid),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "adf260a728df427eb729abe8fb9ad7248991ea54": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\"\n\nThis reverts commit 805a9ed85eb34c8125cfb7d26d07cdfac12b3579.\n",
      "commitDate": "18/01/16 12:50 AM",
      "commitName": "adf260a728df427eb729abe8fb9ad7248991ea54",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/01/16 7:04 PM",
      "commitNameOld": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n-      super.completedContainer(getRMContainer(containerid),\n+      completedContainer(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n+    case CONTAINER_RESCHEDULED:\n+    {\n+      ContainerRescheduledEvent containerRescheduledEvent \u003d\n+          (ContainerRescheduledEvent) event;\n+      RMContainer container \u003d containerRescheduledEvent.getContainer();\n+      recoverResourceRequestForContainer(container);\n+    }\n+    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    case CONTAINER_RESCHEDULED:\n    {\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "805a9ed85eb34c8125cfb7d26d07cdfac12b3579": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4502. Fix two AM containers get allocated when AM restart. (Vinod Kumar Vavilapalli via wangda)\n",
      "commitDate": "17/01/16 7:04 PM",
      "commitName": "805a9ed85eb34c8125cfb7d26d07cdfac12b3579",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/12/15 10:52 AM",
      "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 34.34,
      "commitsBetweenForRepo": 200,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,87 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n-      completedContainer(getRMContainer(containerid), \n+      super.completedContainer(getRMContainer(containerid),\n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n-    case CONTAINER_RESCHEDULED:\n-    {\n-      ContainerRescheduledEvent containerRescheduledEvent \u003d\n-          (ContainerRescheduledEvent) event;\n-      RMContainer container \u003d containerRescheduledEvent.getContainer();\n-      recoverResourceRequestForContainer(container);\n-    }\n-    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      super.completedContainer(getRMContainer(containerid),\n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "9b272ccae78918e7d756d84920a9322187d61eed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3535. Scheduler must re-request container resources when RMContainer transitions from ALLOCATED to KILLED (rohithsharma and peng.zhang via asuresh)\n",
      "commitDate": "17/07/15 4:31 AM",
      "commitName": "9b272ccae78918e7d756d84920a9322187d61eed",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "20/03/15 1:54 PM",
      "commitNameOld": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 118.61,
      "commitsBetweenForRepo": 989,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,95 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_RESOURCE_UPDATE:\n     {\n       NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n           (NodeResourceUpdateSchedulerEvent)event;\n       updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n         nodeResourceUpdatedEvent.getResourceOption());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n+    case CONTAINER_RESCHEDULED:\n+    {\n+      ContainerRescheduledEvent containerRescheduledEvent \u003d\n+          (ContainerRescheduledEvent) event;\n+      RMContainer container \u003d containerRescheduledEvent.getContainer();\n+      recoverResourceRequestForContainer(container);\n+    }\n+    break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    case CONTAINER_RESCHEDULED:\n    {\n      ContainerRescheduledEvent containerRescheduledEvent \u003d\n          (ContainerRescheduledEvent) event;\n      RMContainer container \u003d containerRescheduledEvent.getContainer();\n      recoverResourceRequestForContainer(container);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "5c14bc426b4be381383018ebc2236be83eef15cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1506. Changed RMNode/SchedulerNode to update resource with event notification. Contributed by Junping Du\n",
      "commitDate": "29/08/14 11:05 PM",
      "commitName": "5c14bc426b4be381383018ebc2236be83eef15cd",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/08/14 1:33 PM",
      "commitNameOld": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 10.4,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,87 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n+    case NODE_RESOURCE_UPDATE:\n+    {\n+      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n+          (NodeResourceUpdateSchedulerEvent)event;\n+      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n+        nodeResourceUpdatedEvent.getResourceOption());\n+    }\n+    break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       completedContainer(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_RESOURCE_UPDATE:\n    {\n      NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent \u003d \n          (NodeResourceUpdateSchedulerEvent)event;\n      updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),\n        nodeResourceUpdatedEvent.getResourceOption());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f6a778c3725bcdaba1e1de43786af17dd44deb78": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2249. Avoided AM release requests being lost on work preserving RM restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618972 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/14 1:33 PM",
      "commitName": "f6a778c3725bcdaba1e1de43786af17dd44deb78",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "18/07/14 5:12 PM",
      "commitNameOld": "8871d8ed9fb1e4b21943477dcbaa13ef22ea7b8e",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 31.85,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,79 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser(),\n         appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n         appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n-      containerCompleted(getRMContainer(containerid), \n+      completedContainer(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      completedContainer(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "bda23181bf1931c37d2590e03da9acdc6688ad34": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 5:14 PM",
      "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/06/14 9:42 PM",
      "commitNameOld": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 21.81,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,79 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n-        appAddedEvent.getQueue(), appAddedEvent.getUser());\n+        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n+        appAddedEvent.getIsAppRecovering());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n-        appAttemptAddedEvent.getShouldNotifyAttemptAdded());\n+        appAttemptAddedEvent.getIsAttemptRecovering());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser(),\n        appAddedEvent.getIsAppRecovering());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getIsAttemptRecovering());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1365. Changed ApplicationMasterService to allow an app to re-register after RM restart. Contributed by Anubhav Dhoot\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605263 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 9:42 PM",
      "commitName": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/06/14 8:09 PM",
      "commitNameOld": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.06,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,78 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n       recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n         nodeAddedEvent.getAddedRMNode());\n \n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n-        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n+        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n+        appAttemptAddedEvent.getShouldNotifyAttemptAdded());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt(),\n        appAttemptAddedEvent.getShouldNotifyAttemptAdded());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/14 12:33 PM",
      "commitNameOld": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 8.32,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,77 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n+      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n+        nodeAddedEvent.getAddedRMNode());\n+\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n       addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n         appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState(),\n           appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n      recoverContainersOnNode(nodeAddedEvent.getContainerReports(),\n        nodeAddedEvent.getAddedRMNode());\n\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,74 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationId(),\n         appAddedEvent.getQueue(), appAddedEvent.getUser());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       doneApplication(appRemovedEvent.getApplicationID(),\n         appRemovedEvent.getFinalState());\n     }\n     break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n-      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId());\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n+        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n-          appAttemptRemovedEvent.getFinalAttemptState());\n+          appAttemptRemovedEvent.getFinalAttemptState(),\n+          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getTransferStateFromPreviousAttempt());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState(),\n          appAttemptRemovedEvent.getKeepContainersAcrossAppAttempts());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/12/13 5:44 PM",
      "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,72 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n+    case APP_ADDED:\n+    {\n+      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n+      addApplication(appAddedEvent.getApplicationId(),\n+        appAddedEvent.getQueue(), appAddedEvent.getUser());\n+    }\n+    break;\n+    case APP_REMOVED:\n+    {\n+      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      doneApplication(appRemovedEvent.getApplicationID(),\n+        appRemovedEvent.getFinalState());\n+    }\n+    break;\n     case APP_ATTEMPT_ADDED:\n     {\n       AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n           (AppAttemptAddedSchedulerEvent) event;\n-      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n-        appAttemptAddedEvent.getUser());\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId());\n     }\n     break;\n     case APP_ATTEMPT_REMOVED:\n     {\n       AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n           (AppAttemptRemovedSchedulerEvent) event;\n       try {\n         doneApplicationAttempt(\n           appAttemptRemovedEvent.getApplicationAttemptID(),\n           appAttemptRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationId(),\n        appAddedEvent.getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      doneApplication(appRemovedEvent.getApplicationID(),\n        appRemovedEvent.getFinalState());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 5:44 PM",
      "commitName": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:45 PM",
      "commitNameOld": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,59 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n-    case APP_ADDED:\n+    case APP_ATTEMPT_ADDED:\n     {\n-      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n-      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n-          .getUser());\n+      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n+          (AppAttemptAddedSchedulerEvent) event;\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n+        appAttemptAddedEvent.getUser());\n     }\n     break;\n-    case APP_REMOVED:\n+    case APP_ATTEMPT_REMOVED:\n     {\n-      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n+          (AppAttemptRemovedSchedulerEvent) event;\n       try {\n-        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n-            appRemovedEvent.getFinalAttemptState());\n+        doneApplicationAttempt(\n+          appAttemptRemovedEvent.getApplicationAttemptID(),\n+          appAttemptRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n-            + appRemovedEvent.getApplicationAttemptID(), ie);\n+            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getUser());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": {
      "type": "Ybodychange",
      "commitMessage": "Reverting YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550594 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:45 PM",
      "commitName": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:07 PM",
      "commitNameOld": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,56 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n-    case APP_ATTEMPT_ADDED:\n+    case APP_ADDED:\n     {\n-      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n-          (AppAttemptAddedSchedulerEvent) event;\n-      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n-        appAttemptAddedEvent.getUser());\n+      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n+      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n+          .getUser());\n     }\n     break;\n-    case APP_ATTEMPT_REMOVED:\n+    case APP_REMOVED:\n     {\n-      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n-          (AppAttemptRemovedSchedulerEvent) event;\n+      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       try {\n-        doneApplicationAttempt(\n-          appAttemptRemovedEvent.getApplicationAttemptID(),\n-          appAttemptRemovedEvent.getFinalAttemptState());\n+        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n+            appRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n-            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n+            + appRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:07 PM",
      "commitName": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,59 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n-    case APP_ADDED:\n+    case APP_ATTEMPT_ADDED:\n     {\n-      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n-      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n-          .getUser());\n+      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n+          (AppAttemptAddedSchedulerEvent) event;\n+      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n+        appAttemptAddedEvent.getUser());\n     }\n     break;\n-    case APP_REMOVED:\n+    case APP_ATTEMPT_REMOVED:\n     {\n-      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n+          (AppAttemptRemovedSchedulerEvent) event;\n       try {\n-        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n-            appRemovedEvent.getFinalAttemptState());\n+        doneApplicationAttempt(\n+          appAttemptRemovedEvent.getApplicationAttemptID(),\n+          appAttemptRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n-            + appRemovedEvent.getApplicationAttemptID(), ie);\n+            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ATTEMPT_ADDED:\n    {\n      AppAttemptAddedSchedulerEvent appAttemptAddedEvent \u003d\n          (AppAttemptAddedSchedulerEvent) event;\n      addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),\n        appAttemptAddedEvent.getUser());\n    }\n    break;\n    case APP_ATTEMPT_REMOVED:\n    {\n      AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent \u003d\n          (AppAttemptRemovedSchedulerEvent) event;\n      try {\n        doneApplicationAttempt(\n          appAttemptRemovedEvent.getApplicationAttemptID(),\n          appAttemptRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appAttemptRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69": {
      "type": "Ybodychange",
      "commitMessage": "YARN-365. Change NM heartbeat handling to not generate a scheduler event on each heartbeat. (Contributed by Xuan Gong)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1450007 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/02/13 7:32 PM",
      "commitName": "7ea82ca558c2e2fbb50277ee6ac7debdf9e94b69",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "08/01/13 9:08 PM",
      "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 47.93,
      "commitsBetweenForRepo": 208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,56 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n-      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n-          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n-          nodeUpdatedEvent.getCompletedContainers());\n+      nodeUpdate(nodeUpdatedEvent.getRMNode());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n           .getUser());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       try {\n         doneApplication(appRemovedEvent.getApplicationAttemptID(),\n             appRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n          nodeUpdatedEvent.getCompletedContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "312a7e71001d55f88781e56b331ab1b40a72a980": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3078. Ensure MapReduce AM reports progress correctly for displaying on the RM Web-UI. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/11 12:31 AM",
      "commitName": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "26/09/11 6:25 AM",
      "commitNameOld": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode(), \n           nodeUpdatedEvent.getNewlyLaunchedContainers(),\n           nodeUpdatedEvent.getCompletedContainers());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n-          .getQueue(), appAddedEvent.getUser());\n+          .getUser());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       try {\n         doneApplication(appRemovedEvent.getApplicationAttemptID(),\n             appRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n       ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n       containerCompleted(getRMContainer(containerid), \n           SchedulerUtils.createAbnormalContainerStatus(\n               containerid, \n               SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n          nodeUpdatedEvent.getCompletedContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 7:04 PM",
      "commitNameOld": "035937bee8ef57bc24b08068e7375ac45413a349",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.64,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,58 @@\n   public void handle(SchedulerEvent event) {\n     switch(event.getType()) {\n     case NODE_ADDED:\n     {\n       NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n       addNode(nodeAddedEvent.getAddedRMNode());\n     }\n     break;\n     case NODE_REMOVED:\n     {\n       NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n       removeNode(nodeRemovedEvent.getRemovedRMNode());\n     }\n     break;\n     case NODE_UPDATE:\n     {\n       NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n       (NodeUpdateSchedulerEvent)event;\n       nodeUpdate(nodeUpdatedEvent.getRMNode(), \n-          nodeUpdatedEvent.getContainers());\n+          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n+          nodeUpdatedEvent.getCompletedContainers());\n     }\n     break;\n     case APP_ADDED:\n     {\n       AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n       addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n           .getQueue(), appAddedEvent.getUser());\n     }\n     break;\n     case APP_REMOVED:\n     {\n       AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n       try {\n         doneApplication(appRemovedEvent.getApplicationAttemptID(),\n             appRemovedEvent.getFinalAttemptState());\n       } catch(IOException ie) {\n         LOG.error(\"Unable to remove application \"\n             + appRemovedEvent.getApplicationAttemptID(), ie);\n       }\n     }\n     break;\n     case CONTAINER_EXPIRED:\n     {\n       ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n           (ContainerExpiredSchedulerEvent) event;\n-      containerCompleted(getRMContainer(containerExpiredEvent.getContainerId()), \n+      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n+      containerCompleted(getRMContainer(containerid), \n+          SchedulerUtils.createAbnormalContainerStatus(\n+              containerid, \n+              SchedulerUtils.EXPIRED_CONTAINER),\n           RMContainerEventType.EXPIRE);\n     }\n     break;\n     default:\n       LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n          nodeUpdatedEvent.getNewlyLaunchedContainers(),\n          nodeUpdatedEvent.getCompletedContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      ContainerId containerid \u003d containerExpiredEvent.getContainerId();\n      containerCompleted(getRMContainer(containerid), \n          SchedulerUtils.createAbnormalContainerStatus(\n              containerid, \n              SchedulerUtils.EXPIRED_CONTAINER),\n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n          nodeUpdatedEvent.getContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      containerCompleted(getRMContainer(containerExpiredEvent.getContainerId()), \n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,53 @@\n+  public void handle(SchedulerEvent event) {\n+    switch(event.getType()) {\n+    case NODE_ADDED:\n+    {\n+      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n+      addNode(nodeAddedEvent.getAddedRMNode());\n+    }\n+    break;\n+    case NODE_REMOVED:\n+    {\n+      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n+      removeNode(nodeRemovedEvent.getRemovedRMNode());\n+    }\n+    break;\n+    case NODE_UPDATE:\n+    {\n+      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n+      (NodeUpdateSchedulerEvent)event;\n+      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n+          nodeUpdatedEvent.getContainers());\n+    }\n+    break;\n+    case APP_ADDED:\n+    {\n+      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n+      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n+          .getQueue(), appAddedEvent.getUser());\n+    }\n+    break;\n+    case APP_REMOVED:\n+    {\n+      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n+      try {\n+        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n+            appRemovedEvent.getFinalAttemptState());\n+      } catch(IOException ie) {\n+        LOG.error(\"Unable to remove application \"\n+            + appRemovedEvent.getApplicationAttemptID(), ie);\n+      }\n+    }\n+    break;\n+    case CONTAINER_EXPIRED:\n+    {\n+      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n+          (ContainerExpiredSchedulerEvent) event;\n+      containerCompleted(getRMContainer(containerExpiredEvent.getContainerId()), \n+          RMContainerEventType.EXPIRE);\n+    }\n+    break;\n+    default:\n+      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent event) {\n    switch(event.getType()) {\n    case NODE_ADDED:\n    {\n      NodeAddedSchedulerEvent nodeAddedEvent \u003d (NodeAddedSchedulerEvent)event;\n      addNode(nodeAddedEvent.getAddedRMNode());\n    }\n    break;\n    case NODE_REMOVED:\n    {\n      NodeRemovedSchedulerEvent nodeRemovedEvent \u003d (NodeRemovedSchedulerEvent)event;\n      removeNode(nodeRemovedEvent.getRemovedRMNode());\n    }\n    break;\n    case NODE_UPDATE:\n    {\n      NodeUpdateSchedulerEvent nodeUpdatedEvent \u003d \n      (NodeUpdateSchedulerEvent)event;\n      nodeUpdate(nodeUpdatedEvent.getRMNode(), \n          nodeUpdatedEvent.getContainers());\n    }\n    break;\n    case APP_ADDED:\n    {\n      AppAddedSchedulerEvent appAddedEvent \u003d (AppAddedSchedulerEvent) event;\n      addApplication(appAddedEvent.getApplicationAttemptId(), appAddedEvent\n          .getQueue(), appAddedEvent.getUser());\n    }\n    break;\n    case APP_REMOVED:\n    {\n      AppRemovedSchedulerEvent appRemovedEvent \u003d (AppRemovedSchedulerEvent)event;\n      try {\n        doneApplication(appRemovedEvent.getApplicationAttemptID(),\n            appRemovedEvent.getFinalAttemptState());\n      } catch(IOException ie) {\n        LOG.error(\"Unable to remove application \"\n            + appRemovedEvent.getApplicationAttemptID(), ie);\n      }\n    }\n    break;\n    case CONTAINER_EXPIRED:\n    {\n      ContainerExpiredSchedulerEvent containerExpiredEvent \u003d \n          (ContainerExpiredSchedulerEvent) event;\n      containerCompleted(getRMContainer(containerExpiredEvent.getContainerId()), \n          RMContainerEventType.EXPIRE);\n    }\n    break;\n    default:\n      LOG.error(\"Invalid eventtype \" + event.getType() + \". Ignoring!\");\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}