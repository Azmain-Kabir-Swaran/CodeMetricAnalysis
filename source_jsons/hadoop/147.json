{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "create",
  "functionId": "create___xdr-XDR__securityHandler-SecurityHandler__remoteAddress-SocketAddress",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 925,
  "functionEndLine": 1051,
  "numCommitsSeen": 105,
  "timeTaken": 6647,
  "changeHistory": [
    "098c325a78dce2697ec94a22a4a3981fa5a3849e",
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8",
    "f37849188b05a6251584de1aed5e66d5dfa7da4f",
    "5e5e35b1856293503124b77d5d4998a4d8e83082",
    "d71d40a63d198991077d5babd70be5e9787a53f1",
    "b6f9d5538cf2b425652687e99503f3d566b2056a",
    "70be56d093022de9953e14a92dfa1a146bd9a290",
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020",
    "c9aa74743773c61be938cc1a6ea811ae1404bca2",
    "9ff3836a367737d6dfcb12f50c8bd2f1b2233e37",
    "2ecab65e3e290a1ee192b39ec70868863853543a",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
    "05f35518f19d48890770128727289582cca3457b",
    "5c02d2f6225144772dcb975d3144b057b71d6476",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "098c325a78dce2697ec94a22a4a3981fa5a3849e": "Ybodychange",
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": "Ybodychange",
    "f37849188b05a6251584de1aed5e66d5dfa7da4f": "Ybodychange",
    "5e5e35b1856293503124b77d5d4998a4d8e83082": "Ybodychange",
    "d71d40a63d198991077d5babd70be5e9787a53f1": "Ybodychange",
    "b6f9d5538cf2b425652687e99503f3d566b2056a": "Ybodychange",
    "70be56d093022de9953e14a92dfa1a146bd9a290": "Ybodychange",
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020": "Ybodychange",
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Ybodychange",
    "9ff3836a367737d6dfcb12f50c8bd2f1b2233e37": "Ybodychange",
    "2ecab65e3e290a1ee192b39ec70868863853543a": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": "Ybodychange",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": "Ybodychange",
    "05f35518f19d48890770128727289582cca3457b": "Ybodychange",
    "5c02d2f6225144772dcb975d3144b057b71d6476": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Ymultichange(Yparameterchange,Ybodychange)",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Ymultichange(Yparameterchange,Ybodychange)",
    "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4": "Ybodychange",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "098c325a78dce2697ec94a22a4a3981fa5a3849e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14340. Lower the log level when can\u0027t get postOpAttr. Contributed by Anuhan Torgonshar.\n",
      "commitDate": "17/06/19 10:45 PM",
      "commitName": "098c325a78dce2697ec94a22a4a3981fa5a3849e",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "14/02/18 8:20 AM",
      "commitNameOld": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 488.56,
      "commitsBetweenForRepo": 4238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n \n     CREATE3Request request;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     int namenodeId \u003d dirHandle.getNamenodeId();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileHandle: {} filename: {} client: {}\",\n           dirHandle.dumpFileHandle(), fileName, remoteAddress);\n     }\n     DFSClient dfsClient \u003d\n         clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: {} \" +\n           \"dir fileId: {}\", fileName, dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle: {}\", dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n           null);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode, config);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId(), namenodeId);\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         LOG.debug(\"Opened stream for file: {}, fileId: {}\",\n             fileName, fileHandle.getFileId());\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId: {} filename: {}\",\n               dirHandle.getFileId(), fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: {}\",\n+          LOG.info(\"Can\u0027t get postOpDirAttr for dirFileId: {}\",\n               dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n\n    CREATE3Request request;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    int namenodeId \u003d dirHandle.getNamenodeId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileHandle: {} filename: {} client: {}\",\n          dirHandle.dumpFileHandle(), fileName, remoteAddress);\n    }\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: {} \" +\n          \"dir fileId: {}\", fileName, dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle: {}\", dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          null);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId(), namenodeId);\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        LOG.debug(\"Opened stream for file: {}, fileId: {}\",\n            fileName, fileHandle.getFileId());\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId: {} filename: {}\",\n              dirHandle.getFileId(), fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for dirFileId: {}\",\n              dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/10/17 10:38 AM",
      "commitNameOld": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 126.95,
      "commitsBetweenForRepo": 833,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,130 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n \n     CREATE3Request request;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     int namenodeId \u003d dirHandle.getNamenodeId();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS CREATE dir fileHandle: \" + dirHandle.dumpFileHandle()\n-          + \" filename: \" + fileName + \" client: \" + remoteAddress);\n+      LOG.debug(\"NFS CREATE dir fileHandle: {} filename: {} client: {}\",\n+          dirHandle.dumpFileHandle(), fileName, remoteAddress);\n     }\n-\n     DFSClient dfsClient \u003d\n         clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n-      LOG.error(\"Setting file size is not supported when creating file: \"\n-          + fileName + \" dir fileId: \" + dirHandle.getFileId());\n+      LOG.error(\"Setting file size is not supported when creating file: {} \" +\n+          \"dir fileId: {}\", fileName, dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n-        LOG.error(\"Can\u0027t get path for dirHandle: \" + dirHandle);\n+        LOG.error(\"Can\u0027t get path for dirHandle: {}\", dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n           null);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode, config);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId(), namenodeId);\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Opened stream for file: \" + fileName + \", fileId: \"\n-              + fileHandle.getFileId());\n-        }\n+        LOG.debug(\"Opened stream for file: {}, fileId: {}\",\n+            fileName, fileHandle.getFileId());\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t close stream for dirFileId: \" + dirHandle.getFileId()\n-              + \" filename: \" + fileName, e1);\n+          LOG.error(\"Can\u0027t close stream for dirFileId: {} filename: {}\",\n+              dirHandle.getFileId(), fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: \"\n-              + dirHandle.getFileId(), e1);\n+          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: {}\",\n+              dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n\n    CREATE3Request request;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    int namenodeId \u003d dirHandle.getNamenodeId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileHandle: {} filename: {} client: {}\",\n          dirHandle.dumpFileHandle(), fileName, remoteAddress);\n    }\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: {} \" +\n          \"dir fileId: {}\", fileName, dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle: {}\", dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          null);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId(), namenodeId);\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        LOG.debug(\"Opened stream for file: {}, fileId: {}\",\n            fileName, fileHandle.getFileId());\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId: {} filename: {}\",\n              dirHandle.getFileId(), fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: {}\",\n              dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11575. Supporting HDFS NFS gateway with Federated HDFS. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "10/10/17 10:38 AM",
      "commitName": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "14/08/17 9:57 PM",
      "commitNameOld": "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 56.53,
      "commitsBetweenForRepo": 520,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,130 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n \n     CREATE3Request request;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n+    int namenodeId \u003d dirHandle.getNamenodeId();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n+      LOG.debug(\"NFS CREATE dir fileHandle: \" + dirHandle.dumpFileHandle()\n           + \" filename: \" + fileName + \" client: \" + remoteAddress);\n     }\n \n+    DFSClient dfsClient \u003d\n+        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+\n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId: \" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle: \" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n           null);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode, config);\n-      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n+      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId(), namenodeId);\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file: \" + fileName + \", fileId: \"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId: \" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: \"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n\n    CREATE3Request request;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    int namenodeId \u003d dirHandle.getNamenodeId();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileHandle: \" + dirHandle.dumpFileHandle()\n          + \" filename: \" + fileName + \" client: \" + remoteAddress);\n    }\n\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId: \" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle: \" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          null);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId(), namenodeId);\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file: \" + fileName + \", fileId: \"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId: \" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: \"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "f37849188b05a6251584de1aed5e66d5dfa7da4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7423. various typos and message formatting fixes in nfs daemon and doc. (Charles Lamb via yliu)\n",
      "commitDate": "28/01/15 12:56 PM",
      "commitName": "f37849188b05a6251584de1aed5e66d5dfa7da4f",
      "commitAuthor": "yliu",
      "commitDateOld": "19/01/15 5:29 PM",
      "commitNameOld": "5e5e35b1856293503124b77d5d4998a4d8e83082",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 8.81,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     CREATE3Request request;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n-          + \" filename: \" + fileName + \" client:\" + remoteAddress);\n+          + \" filename: \" + fileName + \" client: \" + remoteAddress);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n-          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n+          + fileName + \" dir fileId: \" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n-        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n+        LOG.error(\"Can\u0027t get path for dirHandle: \" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n-          statistics);\n+          null);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode, config);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n+          LOG.debug(\"Opened stream for file: \" + fileName + \", fileId: \"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n+          LOG.error(\"Can\u0027t close stream for dirFileId: \" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n-          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n+          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: \"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName + \" client: \" + remoteAddress);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId: \" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle: \" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          null);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file: \" + fileName + \", fileId: \"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId: \" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId: \"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "5e5e35b1856293503124b77d5d4998a4d8e83082": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7640. print NFS Client in the NFS log. Contributed by Brandon Li.\n",
      "commitDate": "19/01/15 5:29 PM",
      "commitName": "5e5e35b1856293503124b77d5d4998a4d8e83082",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 3:40 PM",
      "commitNameOld": "f6f2a3f1c73266bfedd802eacde60d8b19b81015",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 39.08,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     CREATE3Request request;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n-          + \" filename: \" + fileName);\n+          + \" filename: \" + fileName + \" client:\" + remoteAddress);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n           statistics);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode, config);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName + \" client:\" + remoteAddress);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          statistics);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "d71d40a63d198991077d5babd70be5e9787a53f1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7180. NFSv3 gateway frequently gets stuck due to GC. Contributed by Brandon Li\n",
      "commitDate": "22/10/14 9:27 PM",
      "commitName": "d71d40a63d198991077d5babd70be5e9787a53f1",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "21/10/14 11:49 AM",
      "commitNameOld": "4e134a02a4b6f30704b99dfb166dc361daf426ea",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 1.4,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n-    CREATE3Request request \u003d null;\n+    CREATE3Request request;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n           statistics);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode, config);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          statistics);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "b6f9d5538cf2b425652687e99503f3d566b2056a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7259. Unresponseive NFS mount point due to deferred COMMIT response. Contributed by Brandon Li\n",
      "commitDate": "21/10/14 10:20 AM",
      "commitName": "b6f9d5538cf2b425652687e99503f3d566b2056a",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "01/10/14 1:18 PM",
      "commitNameOld": "875aa797caee96572162ff59bc50cf97d1195348",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 19.88,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,127 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d dfsClient.createWrappedOutputStream(\n           dfsClient.create(fileIdPath, permission, flag, false, replication,\n               blockSize, null, bufferSize, null),\n           statistics);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n-          aixCompatMode);\n+          aixCompatMode, config);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          statistics);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode, config);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "70be56d093022de9953e14a92dfa1a146bd9a290": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7003. Add NFS Gateway support for reading and writing to encryption zones. (clamb via wang)\n",
      "commitDate": "18/09/14 2:57 PM",
      "commitName": "70be56d093022de9953e14a92dfa1a146bd9a290",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/09/14 4:22 PM",
      "commitNameOld": "08a9ac7098cb4ae684f40cf2513e3137110cc7e4",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 15.94,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,126 +1,127 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n-      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n-          flag, false, replication, blockSize, null, bufferSize, null),\n+      fos \u003d dfsClient.createWrappedOutputStream(\n+          dfsClient.create(fileIdPath, permission, flag, false, replication,\n+              blockSize, null, bufferSize, null),\n           statistics);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d dfsClient.createWrappedOutputStream(\n          dfsClient.create(fileIdPath, permission, flag, false, replication,\n              blockSize, null, bufferSize, null),\n          statistics);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6892. Add XDR packaging method for each NFS request. Contributed by Brandon Li\n",
      "commitDate": "27/08/14 11:06 AM",
      "commitName": "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020",
      "commitAuthor": "brandonli",
      "commitDateOld": "21/08/14 10:53 AM",
      "commitNameOld": "7b28f363b1b3f12cecc92d0bba8eb3021b67b48e",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 6.01,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,126 +1,126 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     CREATE3Request request \u003d null;\n \n     try {\n-      request \u003d new CREATE3Request(xdr);\n+      request \u003d CREATE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n \n       int status \u003d mapErrorStatus(e);\n       return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d CREATE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,130 +1,126 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n-    \n+\n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n-      \n+\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n-          \n+\n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n-      \n+\n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n-      \n+\n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n-      \n+\n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n           aixCompatMode);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n-      \n+\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n-      if (e instanceof AccessControlException) {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n-            postOpObjAttr, dirWcc);\n-      } else {\n-        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n-            postOpObjAttr, dirWcc);\n-      }\n+\n+      int status \u003d mapErrorStatus(e);\n+      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n     }\n-    \n+\n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n\n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n\n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n\n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n\n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n\n      int status \u003d mapErrorStatus(e);\n      return new CREATE3Response(status, fileHandle, postOpObjAttr, dirWcc);\n    }\n\n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "9ff3836a367737d6dfcb12f50c8bd2f1b2233e37": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6549. Add support for accessing the NFS gateway from the AIX NFS client. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604022 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 12:39 PM",
      "commitName": "9ff3836a367737d6dfcb12f50c8bd2f1b2233e37",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "18/06/14 1:45 PM",
      "commitNameOld": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,130 @@\n   CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n       \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n-          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n+          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n+          aixCompatMode);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n       \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug,\n          aixCompatMode);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "2ecab65e3e290a1ee192b39ec70868863853543a": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 1:45 PM",
      "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,129 +1,129 @@\n-  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n+      SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n       \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n       \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, remoteAddress-SocketAddress]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,129 +1,129 @@\n-  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n+      SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n       \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n       \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,129 +1,129 @@\n-  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n-      InetAddress client) {\n+  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n+      SocketAddress remoteAddress) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n-      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n       \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n       \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId(), e1);\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6050. NFS does not handle exceptions correctly in a few places. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 1:49 PM",
      "commitName": "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "13/03/14 2:03 PM",
      "commitNameOld": "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,129 +1,129 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n         \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n       \n       // Add open stream\n       OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n           writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n       fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n       if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n         LOG.warn(\"Can\u0027t add more stream, close it.\"\n             + \" Future write will become append\");\n         fos.close();\n         fos \u003d null;\n       } else {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n               + fileHandle.getFileId());\n         }\n       }\n       \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n-              + \" filename: \" + fileName);\n+              + \" filename: \" + fileName, e1);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n-              + dirHandle.getFileId());\n+              + dirHandle.getFileId(), e1);\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName, e1);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId(), e1);\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 1:49 PM",
      "commitName": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "07/11/13 10:02 AM",
      "commitNameOld": "16c6755554cc5ecd9d4e0ba74b75b10c74bb0ab4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,129 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n-        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n+        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n+        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n+      \n+      // Add open stream\n+      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n+          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n+      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n+      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n+        LOG.warn(\"Can\u0027t add more stream, close it.\"\n+            + \" Future write will become append\");\n+        fos.close();\n+        fos \u003d null;\n+      } else {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n+              + fileHandle.getFileId());\n+        }\n+      }\n+      \n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n-    // Add open stream\n-    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n-        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n-    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n-    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n-          + fileHandle.getFileId());\n-    }\n-    \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)\n        \u0026\u0026 request.getObjAttr().getSize() !\u003d 0) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n      \n      // Add open stream\n      OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr,\n          writeDumpDir + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n      fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n      if (!writeManager.addOpenFileStream(fileHandle, openFileCtx)) {\n        LOG.warn(\"Can\u0027t add more stream, close it.\"\n            + \" Future write will become append\");\n        fos.close();\n        fos \u003d null;\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Opened stream for file:\" + fileName + \", fileId:\"\n              + fileHandle.getFileId());\n        }\n      }\n      \n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "05f35518f19d48890770128727289582cca3457b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5171. NFS should create input stream for a file and try to share it with multiple read requests. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:40 PM",
      "commitName": "05f35518f19d48890770128727289582cca3457b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "15/10/13 2:23 PM",
      "commitNameOld": "a9befa6f0a8a27b49b1e6483e749661f493f06cf",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.1,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,121 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "5c02d2f6225144772dcb975d3144b057b71d6476": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5281. COMMIT request should not block. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530461 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/13 4:40 PM",
      "commitName": "5c02d2f6225144772dcb975d3144b057b71d6476",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "30/09/13 12:21 PM",
      "commitNameOld": "25cdbdb71a65242b2bc08ca1d61f2c0f7d7ea891",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 8.18,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,121 +1,121 @@\n   public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n       InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n-        + \"/\" + postOpObjAttr.getFileId());\n+        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, SecurityHandler securityHandler,\n      InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId(), dfsClient, iug);\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,121 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public CREATE3Response create(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n-          setAttr3.setGid(authSys.getGid());\n+          setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,121 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public CREATE3Response create(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n       \n       if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n             preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                 preOpDirAttr));\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n           EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n           EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n-          setAttr3.setGid(authSys.getGid());\n+          setAttr3.setGid(securityHandler.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n               dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(securityHandler.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,115 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n+  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n-      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n+      \n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n+            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+                preOpDirAttr));\n+      }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n-      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n-          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n-          .of(CreateFlag.CREATE);\n+      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n+          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n+          EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(authSys.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n-          iug);\n+      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n-          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-              dirFileIdPath, iug);\n+          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+              dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys]",
            "newValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,115 +1,121 @@\n-  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n+  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n-      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n+      \n+      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n+            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+                preOpDirAttr));\n+      }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n-      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n-          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n-          .of(CreateFlag.CREATE);\n+      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n+          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n+          EnumSet.of(CreateFlag.CREATE);\n       \n       fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(authSys.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n-      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n-          iug);\n+      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          dfsClient, dirFileIdPath, iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n-          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-              dirFileIdPath, iug);\n+          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+              dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n      \n      if (!checkAccessPrivilege(client, AccessPrivilege.READ_WRITE)) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, null,\n            preOpDirAttr, new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n                preOpDirAttr));\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? \n          EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : \n          EnumSet.of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          dfsClient, dirFileIdPath, iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n              dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5110 Change FSDataOutputStream to HdfsDataOutputStream for opened streams to fix type cast error. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1515624 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/13 2:54 PM",
      "commitName": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "10/07/13 10:01 AM",
      "commitNameOld": "58d75576c4d2a03d4954174bc223ed0334b34fee",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 40.2,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,115 @@\n   public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n     CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     CREATE3Request request \u003d null;\n \n     try {\n       request \u003d new CREATE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid CREATE request\");\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n           + \" filename: \" + fileName);\n     }\n \n     int createMode \u003d request.getMode();\n     if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n         \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n       LOG.error(\"Setting file size is not supported when creating file: \"\n           + fileName + \" dir fileId:\" + dirHandle.getFileId());\n       return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n \n-    FSDataOutputStream fos \u003d null;\n+    HdfsDataOutputStream fos \u003d null;\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     WccAttr preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpObjAttr \u003d null;\n     FileHandle fileHandle \u003d null;\n     WccData dirWcc \u003d null;\n     try {\n       preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n         return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n       SetAttr3 setAttr3 \u003d request.getObjAttr();\n       assert (setAttr3 !\u003d null);\n       FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n           SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n           : FsPermission.getDefault().applyUMask(umask);\n           \n       EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n           .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n           .of(CreateFlag.CREATE);\n-      fos \u003d new FSDataOutputStream(dfsClient.create(fileIdPath, permission,\n+      \n+      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n           flag, false, replication, blockSize, null, bufferSize, null),\n           statistics);\n       \n       if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n           || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n         // Set group if it\u0027s not specified in the request.\n         if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n           setAttr3.getUpdateFields().add(SetAttrField.GID);\n           setAttr3.setGid(authSys.getGid());\n         }\n         setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n       }\n \n       postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n       dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n           iug);\n     } catch (IOException e) {\n       LOG.error(\"Exception\", e);\n       if (fos !\u003d null) {\n         try {\n           fos.close();\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n               + \" filename: \" + fileName);\n         }\n       }\n       if (dirWcc \u003d\u003d null) {\n         try {\n           dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n               dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n               + dirHandle.getFileId());\n         }\n       }\n       if (e instanceof AccessControlException) {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n             postOpObjAttr, dirWcc);\n       } else {\n         return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n             postOpObjAttr, dirWcc);\n       }\n     }\n     \n     // Add open stream\n     OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n         + \"/\" + postOpObjAttr.getFileId());\n     fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n     writeManager.addOpenFileStream(fileHandle, openFileCtx);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n           + fileHandle.getFileId());\n     }\n     \n     return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n         dirWcc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    HdfsDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    WccAttr preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n          .of(CreateFlag.CREATE);\n      \n      fos \u003d new HdfsDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n          iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n              dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,114 @@\n+  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n+    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n+    String uname \u003d authSysCheck(authSys);\n+    DFSClient dfsClient \u003d clientCache.get(uname);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+    \n+    CREATE3Request request \u003d null;\n+\n+    try {\n+      request \u003d new CREATE3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid CREATE request\");\n+      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+\n+    FileHandle dirHandle \u003d request.getHandle();\n+    String fileName \u003d request.getName();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n+          + \" filename: \" + fileName);\n+    }\n+\n+    int createMode \u003d request.getMode();\n+    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n+        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n+      LOG.error(\"Setting file size is not supported when creating file: \"\n+          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n+      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+\n+    FSDataOutputStream fos \u003d null;\n+    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n+    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes postOpObjAttr \u003d null;\n+    FileHandle fileHandle \u003d null;\n+    WccData dirWcc \u003d null;\n+    try {\n+      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      if (preOpDirAttr \u003d\u003d null) {\n+        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+\n+      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n+      SetAttr3 setAttr3 \u003d request.getObjAttr();\n+      assert (setAttr3 !\u003d null);\n+      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n+          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n+          : FsPermission.getDefault().applyUMask(umask);\n+          \n+      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n+          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n+          .of(CreateFlag.CREATE);\n+      fos \u003d new FSDataOutputStream(dfsClient.create(fileIdPath, permission,\n+          flag, false, replication, blockSize, null, bufferSize, null),\n+          statistics);\n+      \n+      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n+          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n+        // Set group if it\u0027s not specified in the request.\n+        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n+          setAttr3.getUpdateFields().add(SetAttrField.GID);\n+          setAttr3.setGid(authSys.getGid());\n+        }\n+        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n+      }\n+\n+      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n+      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n+          iug);\n+    } catch (IOException e) {\n+      LOG.error(\"Exception\", e);\n+      if (fos !\u003d null) {\n+        try {\n+          fos.close();\n+        } catch (IOException e1) {\n+          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n+              + \" filename: \" + fileName);\n+        }\n+      }\n+      if (dirWcc \u003d\u003d null) {\n+        try {\n+          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n+              dirFileIdPath, iug);\n+        } catch (IOException e1) {\n+          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n+              + dirHandle.getFileId());\n+        }\n+      }\n+      if (e instanceof AccessControlException) {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n+            postOpObjAttr, dirWcc);\n+      } else {\n+        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n+            postOpObjAttr, dirWcc);\n+      }\n+    }\n+    \n+    // Add open stream\n+    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n+        + \"/\" + postOpObjAttr.getFileId());\n+    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n+    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n+          + fileHandle.getFileId());\n+    }\n+    \n+    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n+        dirWcc);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CREATE3Response create(XDR xdr, RpcAuthSys authSys) {\n    CREATE3Response response \u003d new CREATE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    CREATE3Request request \u003d null;\n\n    try {\n      request \u003d new CREATE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid CREATE request\");\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS CREATE dir fileId: \" + dirHandle.getFileId()\n          + \" filename: \" + fileName);\n    }\n\n    int createMode \u003d request.getMode();\n    if ((createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE)\n        \u0026\u0026 request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {\n      LOG.error(\"Setting file size is not supported when creating file: \"\n          + fileName + \" dir fileId:\" + dirHandle.getFileId());\n      return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n\n    FSDataOutputStream fos \u003d null;\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    WccAttr preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpObjAttr \u003d null;\n    FileHandle fileHandle \u003d null;\n    WccData dirWcc \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.error(\"Can\u0027t get path for dirHandle:\" + dirHandle);\n        return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle) + \"/\" + fileName;\n      SetAttr3 setAttr3 \u003d request.getObjAttr();\n      assert (setAttr3 !\u003d null);\n      FsPermission permission \u003d setAttr3.getUpdateFields().contains(\n          SetAttrField.MODE) ? new FsPermission((short) setAttr3.getMode())\n          : FsPermission.getDefault().applyUMask(umask);\n          \n      EnumSet\u003cCreateFlag\u003e flag \u003d (createMode !\u003d Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet\n          .of(CreateFlag.CREATE, CreateFlag.OVERWRITE) : EnumSet\n          .of(CreateFlag.CREATE);\n      fos \u003d new FSDataOutputStream(dfsClient.create(fileIdPath, permission,\n          flag, false, replication, blockSize, null, bufferSize, null),\n          statistics);\n      \n      if ((createMode \u003d\u003d Nfs3Constant.CREATE_UNCHECKED)\n          || (createMode \u003d\u003d Nfs3Constant.CREATE_GUARDED)) {\n        // Set group if it\u0027s not specified in the request.\n        if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {\n          setAttr3.getUpdateFields().add(SetAttrField.GID);\n          setAttr3.setGid(authSys.getGid());\n        }\n        setattrInternal(dfsClient, fileIdPath, setAttr3, false);\n      }\n\n      postOpObjAttr \u003d Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug);\n      dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient, dirFileIdPath,\n          iug);\n    } catch (IOException e) {\n      LOG.error(\"Exception\", e);\n      if (fos !\u003d null) {\n        try {\n          fos.close();\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t close stream for dirFileId:\" + dirHandle.getFileId()\n              + \" filename: \" + fileName);\n        }\n      }\n      if (dirWcc \u003d\u003d null) {\n        try {\n          dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n              dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.error(\"Can\u0027t get postOpDirAttr for dirFileId:\"\n              + dirHandle.getFileId());\n        }\n      }\n      if (e instanceof AccessControlException) {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES, fileHandle,\n            postOpObjAttr, dirWcc);\n      } else {\n        return new CREATE3Response(Nfs3Status.NFS3ERR_IO, fileHandle,\n            postOpObjAttr, dirWcc);\n      }\n    }\n    \n    // Add open stream\n    OpenFileCtx openFileCtx \u003d new OpenFileCtx(fos, postOpObjAttr, writeDumpDir\n        + \"/\" + postOpObjAttr.getFileId());\n    fileHandle \u003d new FileHandle(postOpObjAttr.getFileId());\n    writeManager.addOpenFileStream(fileHandle, openFileCtx);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"open stream for file:\" + fileName + \", fileId:\"\n          + fileHandle.getFileId());\n    }\n    \n    return new CREATE3Response(Nfs3Status.NFS3_OK, fileHandle, postOpObjAttr,\n        dirWcc);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}