{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "checkUCBlock",
  "functionId": "checkUCBlock___block-ExtendedBlock__clientName-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 5690,
  "functionEndLine": 5723,
  "numCommitsSeen": 899,
  "timeTaken": 51636,
  "changeHistory": [
    "132478e805ba0f955345217b8ad87c2d17cccb2d",
    "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
    "1fe1942328856dd832e9f94fb56a40ab3d810870",
    "f138ae68f9be0ae072a6a4ee50e94a1608c90edb",
    "b1333e5b561d01a010e2e1311e8501879f377bdc",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd",
    "f0f9a3631fe4950f5cf548f192226836925d0f05",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "132478e805ba0f955345217b8ad87c2d17cccb2d": "Ybodychange",
    "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Ybodychange",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ybodychange",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ybodychange",
    "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4": "Ybodychange",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Ymultichange(Yreturntypechange,Ybodychange)",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": "Ybodychange",
    "1fe1942328856dd832e9f94fb56a40ab3d810870": "Ybodychange",
    "f138ae68f9be0ae072a6a4ee50e94a1608c90edb": "Ybodychange",
    "b1333e5b561d01a010e2e1311e8501879f377bdc": "Ybodychange",
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": "Ybodychange",
    "f0f9a3631fe4950f5cf548f192226836925d0f05": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "132478e805ba0f955345217b8ad87c2d17cccb2d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9527. The return type of FSNamesystem.getBlockCollection should be changed to INodeFile.\n",
      "commitDate": "09/12/15 5:55 PM",
      "commitName": "132478e805ba0f955345217b8ad87c2d17cccb2d",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "04/12/15 9:47 AM",
      "commitNameOld": "3fa33b5c2c289ceaced30c6c5451f3569110459d",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 5.34,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n-    if (storedBlock \u003d\u003d null || \n-        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n-        throw new IOException(block + \n-            \" does not exist or is not under Construction\" + storedBlock);\n+    if (storedBlock \u003d\u003d null) {\n+      throw new IOException(block + \" does not exist.\");\n+    }\n+    if (storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n+      throw new IOException(\"Unexpected BlockUCState: \" + block\n+          + \" is \" + storedBlock.getBlockUCState()\n+          + \" but not \" + BlockUCState.UNDER_CONSTRUCTION);\n     }\n     \n     // check file inode\n-    long bcId \u003d storedBlock.getBlockCollectionId();\n-    final INodeFile file \u003d ((INode)getBlockCollection(bcId)).asFile();\n+    final INodeFile file \u003d getBlockCollection(storedBlock);\n     if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     if (clientName \u003d\u003d null\n         || !clientName.equals(file.getFileUnderConstructionFeature()\n             .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null) {\n      throw new IOException(block + \" does not exist.\");\n    }\n    if (storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n      throw new IOException(\"Unexpected BlockUCState: \" + block\n          + \" is \" + storedBlock.getBlockUCState()\n          + \" but not \" + BlockUCState.UNDER_CONSTRUCTION);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d getBlockCollection(storedBlock);\n    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8248. Store INodeId instead of the INodeFile object in BlockInfoContiguous. Contributed by Haohui Mai.\n",
      "commitDate": "26/08/15 6:14 PM",
      "commitName": "4cbbfa2220e884e91bf18ad1cc2f3b11f895f8c9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/08/15 4:56 PM",
      "commitNameOld": "3b00eaea256d252be3361a7d9106b88756fcb9ba",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 2.05,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n-    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n+    long bcId \u003d storedBlock.getBlockCollectionId();\n+    final INodeFile file \u003d ((INode)getBlockCollection(bcId)).asFile();\n     if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     if (clientName \u003d\u003d null\n         || !clientName.equals(file.getFileUnderConstructionFeature()\n             .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    long bcId \u003d storedBlock.getBlockCollectionId();\n    final INodeFile file \u003d ((INode)getBlockCollection(bcId)).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/05/15 8:08 AM",
      "commitNameOld": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.32,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n-    BlockInfoContiguous storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n+    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     if (clientName \u003d\u003d null\n         || !clientName.equals(file.getFileUnderConstructionFeature()\n             .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:07 AM",
      "commitNameOld": "ba9371492036983a9899398907ab41fe548f29b3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n-    BlockInfoContiguous storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n+    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     if (clientName \u003d\u003d null\n         || !clientName.equals(file.getFileUnderConstructionFeature()\n             .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "07/02/15 3:21 PM",
      "commitNameOld": "8f7d4bb09f760780dd193c97796ebf4d22cfd2d7",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n-    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n+    BlockInfoContiguous storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     if (clientName \u003d\u003d null\n         || !clientName.equals(file.getFileUnderConstructionFeature()\n             .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfoContiguous storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6647. Edit log corruption when pipeline recovery occurs for deleted file present in snapshot. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609543 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 11:18 AM",
      "commitName": "8f520386fb952b70a4e7a9c460a2ecd9b9b855b4",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/07/14 9:03 PM",
      "commitNameOld": "d9c5f20333ef510c0ace066c0a811f9e953e9e17",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.59,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n-    if (file \u003d\u003d null || !file.isUnderConstruction()) {\n+    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     if (clientName \u003d\u003d null\n         || !clientName.equals(file.getFileUnderConstructionFeature()\n             .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return file;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction() || isFileDeleted(file)) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 5:39 PM",
          "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/11/13 9:12 AM",
          "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n+  private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n-    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n+    if (file \u003d\u003d null || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n-    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n-    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n+    if (clientName \u003d\u003d null\n+        || !clientName.equals(file.getFileUnderConstructionFeature()\n+            .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n-    return pendingFile;\n+    return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "INodeFileUnderConstruction",
            "newValue": "INodeFile"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "21/11/13 5:39 PM",
          "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "21/11/13 9:12 AM",
          "commitNameOld": "f91a45a96c21db9e5d40097c7d3f5d005ae10dde",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.35,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,31 @@\n-  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n+  private INodeFile checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n         + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n-    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n+    if (file \u003d\u003d null || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n-    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n-    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n+    if (clientName \u003d\u003d null\n+        || !clientName.equals(file.getFileUnderConstructionFeature()\n+            .getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n-    return pendingFile;\n+    return file;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeFile checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file \u003d\u003d null || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    if (clientName \u003d\u003d null\n        || !clientName.equals(file.getFileUnderConstructionFeature()\n            .getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return file;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": {
      "type": "Ybodychange",
      "commitMessage": "merge trunk to branch HDFS-4949\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 7:14 PM",
      "commitName": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/10/13 3:15 PM",
      "commitNameOld": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,30 @@\n   private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n-    if (isInSafeMode()) {\n-      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n-                                \"access token for block \" + block, safeMode);\n-    }\n+    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n+        + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1fe1942328856dd832e9f94fb56a40ab3d810870": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5291. Standby namenode after transition to active goes into safemode. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530112 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/10/13 4:58 PM",
      "commitName": "1fe1942328856dd832e9f94fb56a40ab3d810870",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/10/13 11:39 AM",
      "commitNameOld": "7317e97bd72ca30f5db37fa94389dbdb52ae079e",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.22,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,30 @@\n   private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n-    if (isInSafeMode()) {\n-      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n-                                \"access token for block \" + block, safeMode);\n-    }\n+    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n+        + \"access token for block \" + block);\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    checkNameNodeSafeMode(\"Cannot get a new generation stamp and an \"\n        + \"access token for block \" + block);\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f138ae68f9be0ae072a6a4ee50e94a1608c90edb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5024. Make DatanodeProtocol#commitBlockSynchronization idempotent. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506789 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/07/13 5:32 PM",
      "commitName": "f138ae68f9be0ae072a6a4ee50e94a1608c90edb",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "22/07/13 11:22 AM",
      "commitNameOld": "11c073134afc878619c37c95935d6a3098a21f17",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.26,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                 \"access token for block \" + block, safeMode);\n     }\n     \n     // check stored block state\n-    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n+    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n     final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "b1333e5b561d01a010e2e1311e8501879f377bdc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4545. With snapshots, FSDirectory.unprotectedSetReplication(..) always changes file replication but it may or may not changes block replication.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1452636 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/13 6:23 PM",
      "commitName": "b1333e5b561d01a010e2e1311e8501879f377bdc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/02/13 2:04 PM",
      "commitNameOld": "e2a618e1cc3fb99115547af6540932860dc6766e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                 \"access token for block \" + block, safeMode);\n     }\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n-    INodeFile file \u003d (INodeFile) storedBlock.getBlockCollection();\n+    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n     if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    final INodeFile file \u003d ((INode)storedBlock.getBlockCollection()).asFile();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "7e8e983620f3ae3462d115972707c72b7d9cbabd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3369. Rename {get|set|add}INode(..) methods in BlockManager and BlocksMap to {get|set|add}BlockCollection(..).  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/12 2:41 PM",
      "commitName": "7e8e983620f3ae3462d115972707c72b7d9cbabd",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "07/05/12 5:06 PM",
      "commitNameOld": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 2.9,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                 \"access token for block \" + block, safeMode);\n     }\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n-    INodeFile file \u003d (INodeFile) storedBlock.getINode();\n+    INodeFile file \u003d (INodeFile) storedBlock.getBlockCollection();\n     if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    INodeFile file \u003d (INodeFile) storedBlock.getBlockCollection();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f0f9a3631fe4950f5cf548f192226836925d0f05": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3363. Define BlockCollection and MutableBlockCollection interfaces so that INodeFile and INodeFileUnderConstruction do not have to be used in block management.  Contributed by John George\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/12 5:06 PM",
      "commitName": "f0f9a3631fe4950f5cf548f192226836925d0f05",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "04/05/12 3:14 PM",
      "commitNameOld": "51e520c68aafb73b784bf690a8a42de3af0f229c",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n       String clientName) throws IOException {\n     assert hasWriteLock();\n     if (isInSafeMode()) {\n       throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                 \"access token for block \" + block, safeMode);\n     }\n     \n     // check stored block state\n     BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n     if (storedBlock \u003d\u003d null || \n         storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n         throw new IOException(block + \n             \" does not exist or is not under Construction\" + storedBlock);\n     }\n     \n     // check file inode\n-    INodeFile file \u003d storedBlock.getINode();\n+    INodeFile file \u003d (INodeFile) storedBlock.getINode();\n     if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n       throw new IOException(\"The file \" + storedBlock + \n           \" belonged to does not exist or it is not under construction.\");\n     }\n     \n     // check lease\n     INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n     if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n       throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n           \" is accessed by a non lease holder \" + clientName); \n     }\n \n     return pendingFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    INodeFile file \u003d (INodeFile) storedBlock.getINode();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    INodeFile file \u003d storedBlock.getINode();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    INodeFile file \u003d storedBlock.getINode();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n+      String clientName) throws IOException {\n+    assert hasWriteLock();\n+    if (isInSafeMode()) {\n+      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n+                                \"access token for block \" + block, safeMode);\n+    }\n+    \n+    // check stored block state\n+    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n+    if (storedBlock \u003d\u003d null || \n+        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n+        throw new IOException(block + \n+            \" does not exist or is not under Construction\" + storedBlock);\n+    }\n+    \n+    // check file inode\n+    INodeFile file \u003d storedBlock.getINode();\n+    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n+      throw new IOException(\"The file \" + storedBlock + \n+          \" belonged to does not exist or it is not under construction.\");\n+    }\n+    \n+    // check lease\n+    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n+    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n+      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n+          \" is accessed by a non lease holder \" + clientName); \n+    }\n+\n+    return pendingFile;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeFileUnderConstruction checkUCBlock(ExtendedBlock block,\n      String clientName) throws IOException {\n    assert hasWriteLock();\n    if (isInSafeMode()) {\n      throw new SafeModeException(\"Cannot get a new generation stamp and an \" +\n                                \"access token for block \" + block, safeMode);\n    }\n    \n    // check stored block state\n    BlockInfo storedBlock \u003d blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(block));\n    if (storedBlock \u003d\u003d null || \n        storedBlock.getBlockUCState() !\u003d BlockUCState.UNDER_CONSTRUCTION) {\n        throw new IOException(block + \n            \" does not exist or is not under Construction\" + storedBlock);\n    }\n    \n    // check file inode\n    INodeFile file \u003d storedBlock.getINode();\n    if (file\u003d\u003dnull || !file.isUnderConstruction()) {\n      throw new IOException(\"The file \" + storedBlock + \n          \" belonged to does not exist or it is not under construction.\");\n    }\n    \n    // check lease\n    INodeFileUnderConstruction pendingFile \u003d (INodeFileUnderConstruction)file;\n    if (clientName \u003d\u003d null || !clientName.equals(pendingFile.getClientName())) {\n      throw new LeaseExpiredException(\"Lease mismatch: \" + block + \n          \" is accessed by a non lease holder \" + clientName); \n    }\n\n    return pendingFile;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}