{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceMappingManager.java",
  "functionName": "pickAndDoSchedule",
  "functionId": "pickAndDoSchedule___allowed-Set__Device____used-Map__Device,ContainerId____assigned-Set__Device____c-Container__count-int__resourceName-String__dps-DevicePluginScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
  "functionStartLine": 308,
  "functionEndLine": 346,
  "numCommitsSeen": 8,
  "timeTaken": 3301,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": "Ymultichange(Yparameterchange,Ybodychange)",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Ybodychange",
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/02/19 1:07 AM",
      "commitNameOld": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 22.37,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n   private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n       Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n       Container c, int count, String resourceName,\n       DevicePluginScheduler dps)\n       throws ResourceHandlerException {\n     ContainerId containerId \u003d c.getContainerId();\n     Map\u003cString, String\u003e env \u003d c.getLaunchContext().getEnvironment();\n     if (null \u003d\u003d dps) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Customized device plugin scheduler is preferred \"\n-            + \"but not implemented, use default logic\");\n-      }\n+      LOG.debug(\"Customized device plugin scheduler is preferred \"\n+          + \"but not implemented, use default logic\");\n       defaultScheduleAction(allowed, used,\n           assigned, containerId, count);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Customized device plugin implemented,\"\n             + \"use customized logic\");\n         // Use customized device scheduler\n         LOG.debug(\"Try to schedule \" + count\n             + \"(\" + resourceName + \") using \" + dps.getClass());\n       }\n       // Pass in unmodifiable set\n       Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n           Sets.difference(allowed, used.keySet()),\n           count,\n           ImmutableMap.copyOf(env));\n       if (dpsAllocated.size() !\u003d count) {\n         throw new ResourceHandlerException(dps.getClass()\n             + \" should allocate \" + count\n             + \" of \" + resourceName + \", but actual: \"\n             + assigned.size());\n       }\n       // copy\n       assigned.addAll(dpsAllocated);\n       // Store assigned devices into usedDevices\n       for (Device device : assigned) {\n         used.put(device, containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n      Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n      Container c, int count, String resourceName,\n      DevicePluginScheduler dps)\n      throws ResourceHandlerException {\n    ContainerId containerId \u003d c.getContainerId();\n    Map\u003cString, String\u003e env \u003d c.getLaunchContext().getEnvironment();\n    if (null \u003d\u003d dps) {\n      LOG.debug(\"Customized device plugin scheduler is preferred \"\n          + \"but not implemented, use default logic\");\n      defaultScheduleAction(allowed, used,\n          assigned, containerId, count);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin implemented,\"\n            + \"use customized logic\");\n        // Use customized device scheduler\n        LOG.debug(\"Try to schedule \" + count\n            + \"(\" + resourceName + \") using \" + dps.getClass());\n      }\n      // Pass in unmodifiable set\n      Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n          Sets.difference(allowed, used.keySet()),\n          count,\n          ImmutableMap.copyOf(env));\n      if (dpsAllocated.size() !\u003d count) {\n        throw new ResourceHandlerException(dps.getClass()\n            + \" should allocate \" + count\n            + \" of \" + resourceName + \", but actual: \"\n            + assigned.size());\n      }\n      // copy\n      assigned.addAll(dpsAllocated);\n      // Store assigned devices into usedDevices\n      for (Device device : assigned) {\n        used.put(device, containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
      "extendedDetails": {}
    },
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
      "commitDate": "24/02/19 1:07 AM",
      "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
          "commitDate": "24/02/19 1:07 AM",
          "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
          "commitAuthor": "Sunil G",
          "commitDateOld": "18/02/19 2:28 AM",
          "commitNameOld": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 5.94,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n   private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n       Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n-      ContainerId containerId, int count, String resourceName,\n-      DevicePluginScheduler dps) throws ResourceHandlerException {\n-\n+      Container c, int count, String resourceName,\n+      DevicePluginScheduler dps)\n+      throws ResourceHandlerException {\n+    ContainerId containerId \u003d c.getContainerId();\n+    Map\u003cString, String\u003e env \u003d c.getLaunchContext().getEnvironment();\n     if (null \u003d\u003d dps) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Customized device plugin scheduler is preferred \"\n             + \"but not implemented, use default logic\");\n       }\n       defaultScheduleAction(allowed, used,\n           assigned, containerId, count);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Customized device plugin implemented,\"\n             + \"use customized logic\");\n         // Use customized device scheduler\n         LOG.debug(\"Try to schedule \" + count\n             + \"(\" + resourceName + \") using \" + dps.getClass());\n       }\n       // Pass in unmodifiable set\n       Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n           Sets.difference(allowed, used.keySet()),\n-          count);\n+          count,\n+          ImmutableMap.copyOf(env));\n       if (dpsAllocated.size() !\u003d count) {\n         throw new ResourceHandlerException(dps.getClass()\n             + \" should allocate \" + count\n             + \" of \" + resourceName + \", but actual: \"\n             + assigned.size());\n       }\n       // copy\n       assigned.addAll(dpsAllocated);\n       // Store assigned devices into usedDevices\n       for (Device device : assigned) {\n         used.put(device, containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n      Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n      Container c, int count, String resourceName,\n      DevicePluginScheduler dps)\n      throws ResourceHandlerException {\n    ContainerId containerId \u003d c.getContainerId();\n    Map\u003cString, String\u003e env \u003d c.getLaunchContext().getEnvironment();\n    if (null \u003d\u003d dps) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin scheduler is preferred \"\n            + \"but not implemented, use default logic\");\n      }\n      defaultScheduleAction(allowed, used,\n          assigned, containerId, count);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin implemented,\"\n            + \"use customized logic\");\n        // Use customized device scheduler\n        LOG.debug(\"Try to schedule \" + count\n            + \"(\" + resourceName + \") using \" + dps.getClass());\n      }\n      // Pass in unmodifiable set\n      Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n          Sets.difference(allowed, used.keySet()),\n          count,\n          ImmutableMap.copyOf(env));\n      if (dpsAllocated.size() !\u003d count) {\n        throw new ResourceHandlerException(dps.getClass()\n            + \" should allocate \" + count\n            + \" of \" + resourceName + \", but actual: \"\n            + assigned.size());\n      }\n      // copy\n      assigned.addAll(dpsAllocated);\n      // Store assigned devices into usedDevices\n      for (Device device : assigned) {\n        used.put(device, containerId);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
          "extendedDetails": {
            "oldValue": "[allowed-Set\u003cDevice\u003e, used-Map\u003cDevice,ContainerId\u003e, assigned-Set\u003cDevice\u003e, containerId-ContainerId, count-int, resourceName-String, dps-DevicePluginScheduler]",
            "newValue": "[allowed-Set\u003cDevice\u003e, used-Map\u003cDevice,ContainerId\u003e, assigned-Set\u003cDevice\u003e, c-Container, count-int, resourceName-String, dps-DevicePluginScheduler]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
          "commitDate": "24/02/19 1:07 AM",
          "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
          "commitAuthor": "Sunil G",
          "commitDateOld": "18/02/19 2:28 AM",
          "commitNameOld": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 5.94,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n   private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n       Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n-      ContainerId containerId, int count, String resourceName,\n-      DevicePluginScheduler dps) throws ResourceHandlerException {\n-\n+      Container c, int count, String resourceName,\n+      DevicePluginScheduler dps)\n+      throws ResourceHandlerException {\n+    ContainerId containerId \u003d c.getContainerId();\n+    Map\u003cString, String\u003e env \u003d c.getLaunchContext().getEnvironment();\n     if (null \u003d\u003d dps) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Customized device plugin scheduler is preferred \"\n             + \"but not implemented, use default logic\");\n       }\n       defaultScheduleAction(allowed, used,\n           assigned, containerId, count);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Customized device plugin implemented,\"\n             + \"use customized logic\");\n         // Use customized device scheduler\n         LOG.debug(\"Try to schedule \" + count\n             + \"(\" + resourceName + \") using \" + dps.getClass());\n       }\n       // Pass in unmodifiable set\n       Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n           Sets.difference(allowed, used.keySet()),\n-          count);\n+          count,\n+          ImmutableMap.copyOf(env));\n       if (dpsAllocated.size() !\u003d count) {\n         throw new ResourceHandlerException(dps.getClass()\n             + \" should allocate \" + count\n             + \" of \" + resourceName + \", but actual: \"\n             + assigned.size());\n       }\n       // copy\n       assigned.addAll(dpsAllocated);\n       // Store assigned devices into usedDevices\n       for (Device device : assigned) {\n         used.put(device, containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n      Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n      Container c, int count, String resourceName,\n      DevicePluginScheduler dps)\n      throws ResourceHandlerException {\n    ContainerId containerId \u003d c.getContainerId();\n    Map\u003cString, String\u003e env \u003d c.getLaunchContext().getEnvironment();\n    if (null \u003d\u003d dps) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin scheduler is preferred \"\n            + \"but not implemented, use default logic\");\n      }\n      defaultScheduleAction(allowed, used,\n          assigned, containerId, count);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin implemented,\"\n            + \"use customized logic\");\n        // Use customized device scheduler\n        LOG.debug(\"Try to schedule \" + count\n            + \"(\" + resourceName + \") using \" + dps.getClass());\n      }\n      // Pass in unmodifiable set\n      Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n          Sets.difference(allowed, used.keySet()),\n          count,\n          ImmutableMap.copyOf(env));\n      if (dpsAllocated.size() !\u003d count) {\n        throw new ResourceHandlerException(dps.getClass()\n            + \" should allocate \" + count\n            + \" of \" + resourceName + \", but actual: \"\n            + assigned.size());\n      }\n      // copy\n      assigned.addAll(dpsAllocated);\n      // Store assigned devices into usedDevices\n      for (Device device : assigned) {\n        used.put(device, containerId);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/12/18 11:44 AM",
      "commitNameOld": "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 67.61,
      "commitsBetweenForRepo": 454,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n       Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n       ContainerId containerId, int count, String resourceName,\n       DevicePluginScheduler dps) throws ResourceHandlerException {\n \n     if (null \u003d\u003d dps) {\n-      LOG.debug(\"Customized device plugin scheduler is preferred \"\n-          + \"but not implemented, use default logic\");\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Customized device plugin scheduler is preferred \"\n+            + \"but not implemented, use default logic\");\n+      }\n       defaultScheduleAction(allowed, used,\n           assigned, containerId, count);\n     } else {\n-      LOG.debug(\"Customized device plugin implemented,\"\n-          + \"use customized logic\");\n-      // Use customized device scheduler\n-      LOG.debug(\"Try to schedule \" + count\n-          + \"(\" + resourceName + \") using \" + dps.getClass());\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Customized device plugin implemented,\"\n+            + \"use customized logic\");\n+        // Use customized device scheduler\n+        LOG.debug(\"Try to schedule \" + count\n+            + \"(\" + resourceName + \") using \" + dps.getClass());\n+      }\n       // Pass in unmodifiable set\n       Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n           Sets.difference(allowed, used.keySet()),\n           count);\n       if (dpsAllocated.size() !\u003d count) {\n         throw new ResourceHandlerException(dps.getClass()\n             + \" should allocate \" + count\n             + \" of \" + resourceName + \", but actual: \"\n             + assigned.size());\n       }\n       // copy\n       assigned.addAll(dpsAllocated);\n       // Store assigned devices into usedDevices\n       for (Device device : assigned) {\n         used.put(device, containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n      Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n      ContainerId containerId, int count, String resourceName,\n      DevicePluginScheduler dps) throws ResourceHandlerException {\n\n    if (null \u003d\u003d dps) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin scheduler is preferred \"\n            + \"but not implemented, use default logic\");\n      }\n      defaultScheduleAction(allowed, used,\n          assigned, containerId, count);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Customized device plugin implemented,\"\n            + \"use customized logic\");\n        // Use customized device scheduler\n        LOG.debug(\"Try to schedule \" + count\n            + \"(\" + resourceName + \") using \" + dps.getClass());\n      }\n      // Pass in unmodifiable set\n      Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n          Sets.difference(allowed, used.keySet()),\n          count);\n      if (dpsAllocated.size() !\u003d count) {\n        throw new ResourceHandlerException(dps.getClass()\n            + \" should allocate \" + count\n            + \" of \" + resourceName + \", but actual: \"\n            + assigned.size());\n      }\n      // copy\n      assigned.addAll(dpsAllocated);\n      // Store assigned devices into usedDevices\n      for (Device device : assigned) {\n        used.put(device, containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java",
      "extendedDetails": {}
    },
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9015. [DevicePlugin] Add an interface for device plugin to provide customized scheduler. (Zhankun Tang via wangda)\n\nChange-Id: Ib2e4ae47a6f29bb3082c1f8520cf5a52ca720979\n",
      "commitDate": "12/12/18 11:44 AM",
      "commitName": "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,34 @@\n+  private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n+      Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n+      ContainerId containerId, int count, String resourceName,\n+      DevicePluginScheduler dps) throws ResourceHandlerException {\n+\n+    if (null \u003d\u003d dps) {\n+      LOG.debug(\"Customized device plugin scheduler is preferred \"\n+          + \"but not implemented, use default logic\");\n+      defaultScheduleAction(allowed, used,\n+          assigned, containerId, count);\n+    } else {\n+      LOG.debug(\"Customized device plugin implemented,\"\n+          + \"use customized logic\");\n+      // Use customized device scheduler\n+      LOG.debug(\"Try to schedule \" + count\n+          + \"(\" + resourceName + \") using \" + dps.getClass());\n+      // Pass in unmodifiable set\n+      Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n+          Sets.difference(allowed, used.keySet()),\n+          count);\n+      if (dpsAllocated.size() !\u003d count) {\n+        throw new ResourceHandlerException(dps.getClass()\n+            + \" should allocate \" + count\n+            + \" of \" + resourceName + \", but actual: \"\n+            + assigned.size());\n+      }\n+      // copy\n+      assigned.addAll(dpsAllocated);\n+      // Store assigned devices into usedDevices\n+      for (Device device : assigned) {\n+        used.put(device, containerId);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void pickAndDoSchedule(Set\u003cDevice\u003e allowed,\n      Map\u003cDevice, ContainerId\u003e used, Set\u003cDevice\u003e assigned,\n      ContainerId containerId, int count, String resourceName,\n      DevicePluginScheduler dps) throws ResourceHandlerException {\n\n    if (null \u003d\u003d dps) {\n      LOG.debug(\"Customized device plugin scheduler is preferred \"\n          + \"but not implemented, use default logic\");\n      defaultScheduleAction(allowed, used,\n          assigned, containerId, count);\n    } else {\n      LOG.debug(\"Customized device plugin implemented,\"\n          + \"use customized logic\");\n      // Use customized device scheduler\n      LOG.debug(\"Try to schedule \" + count\n          + \"(\" + resourceName + \") using \" + dps.getClass());\n      // Pass in unmodifiable set\n      Set\u003cDevice\u003e dpsAllocated \u003d dps.allocateDevices(\n          Sets.difference(allowed, used.keySet()),\n          count);\n      if (dpsAllocated.size() !\u003d count) {\n        throw new ResourceHandlerException(dps.getClass()\n            + \" should allocate \" + count\n            + \" of \" + resourceName + \", but actual: \"\n            + assigned.size());\n      }\n      // copy\n      assigned.addAll(dpsAllocated);\n      // Store assigned devices into usedDevices\n      for (Device device : assigned) {\n        used.put(device, containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceMappingManager.java"
    }
  }
}