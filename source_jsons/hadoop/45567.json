{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMProxy.java",
  "functionName": "createRetryPolicy",
  "functionId": "createRetryPolicy___conf-Configuration__retryTime-long__retryInterval-long__isHAEnabled-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
  "functionStartLine": 222,
  "functionEndLine": 303,
  "numCommitsSeen": 29,
  "timeTaken": 2314,
  "changeHistory": [
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d"
  ],
  "changeHistoryShort": {
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
      "commitDate": "22/01/16 6:20 PM",
      "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "24/11/15 2:35 PM",
          "commitNameOld": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 59.16,
          "commitsBetweenForRepo": 346,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,82 @@\n-  private static RetryPolicy createRetryPolicy(Configuration conf,\n-      long retryTime, long retryInterval) {\n+  protected static RetryPolicy createRetryPolicy(Configuration conf,\n+      long retryTime, long retryInterval, boolean isHAEnabled) {\n     long rmConnectWaitMS \u003d retryTime;\n     long rmConnectionRetryIntervalMS \u003d retryInterval;\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n-    if (HAUtil.isHAEnabled(conf)) {\n+    if (isHAEnabled) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d null;\n     if (waitForEver) {\n       retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n           rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     } else {\n       retryPolicy \u003d\n           RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n               rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     }\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n     exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n+    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\n     // YARN-4288: local IOException is also possible.\n     exceptionToPolicyMap.put(IOException.class, retryPolicy);\n     // Not retry on remote IO exception.\n     return RetryPolicies.retryOtherThanRemoteException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static RetryPolicy createRetryPolicy(Configuration conf,\n      long retryTime, long retryInterval, boolean isHAEnabled) {\n    long rmConnectWaitMS \u003d retryTime;\n    long rmConnectionRetryIntervalMS \u003d retryInterval;\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (isHAEnabled) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\n    // YARN-4288: local IOException is also possible.\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    // Not retry on remote IO exception.\n    return RetryPolicies.retryOtherThanRemoteException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, retryTime-long, retryInterval-long]",
            "newValue": "[conf-Configuration, retryTime-long, retryInterval-long, isHAEnabled-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "24/11/15 2:35 PM",
          "commitNameOld": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 59.16,
          "commitsBetweenForRepo": 346,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,82 @@\n-  private static RetryPolicy createRetryPolicy(Configuration conf,\n-      long retryTime, long retryInterval) {\n+  protected static RetryPolicy createRetryPolicy(Configuration conf,\n+      long retryTime, long retryInterval, boolean isHAEnabled) {\n     long rmConnectWaitMS \u003d retryTime;\n     long rmConnectionRetryIntervalMS \u003d retryInterval;\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n-    if (HAUtil.isHAEnabled(conf)) {\n+    if (isHAEnabled) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d null;\n     if (waitForEver) {\n       retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n           rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     } else {\n       retryPolicy \u003d\n           RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n               rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     }\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n     exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n+    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\n     // YARN-4288: local IOException is also possible.\n     exceptionToPolicyMap.put(IOException.class, retryPolicy);\n     // Not retry on remote IO exception.\n     return RetryPolicies.retryOtherThanRemoteException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static RetryPolicy createRetryPolicy(Configuration conf,\n      long retryTime, long retryInterval, boolean isHAEnabled) {\n    long rmConnectWaitMS \u003d retryTime;\n    long rmConnectionRetryIntervalMS \u003d retryInterval;\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (isHAEnabled) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\n    // YARN-4288: local IOException is also possible.\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    // Not retry on remote IO exception.\n    return RetryPolicies.retryOtherThanRemoteException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "24/11/15 2:35 PM",
          "commitNameOld": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 59.16,
          "commitsBetweenForRepo": 346,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,82 @@\n-  private static RetryPolicy createRetryPolicy(Configuration conf,\n-      long retryTime, long retryInterval) {\n+  protected static RetryPolicy createRetryPolicy(Configuration conf,\n+      long retryTime, long retryInterval, boolean isHAEnabled) {\n     long rmConnectWaitMS \u003d retryTime;\n     long rmConnectionRetryIntervalMS \u003d retryInterval;\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n-    if (HAUtil.isHAEnabled(conf)) {\n+    if (isHAEnabled) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d null;\n     if (waitForEver) {\n       retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n           rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     } else {\n       retryPolicy \u003d\n           RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n               rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     }\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n     exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n+    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\n     // YARN-4288: local IOException is also possible.\n     exceptionToPolicyMap.put(IOException.class, retryPolicy);\n     // Not retry on remote IO exception.\n     return RetryPolicies.retryOtherThanRemoteException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static RetryPolicy createRetryPolicy(Configuration conf,\n      long retryTime, long retryInterval, boolean isHAEnabled) {\n    long rmConnectWaitMS \u003d retryTime;\n    long rmConnectionRetryIntervalMS \u003d retryInterval;\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (isHAEnabled) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\n    // YARN-4288: local IOException is also possible.\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    // Not retry on remote IO exception.\n    return RetryPolicies.retryOtherThanRemoteException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
          "extendedDetails": {}
        }
      ]
    },
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4132. Separate configs for nodemanager to resourcemanager connection timeout and retries. Contributed by Chang Li\n",
      "commitDate": "24/11/15 2:35 PM",
      "commitName": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,81 @@\n+  private static RetryPolicy createRetryPolicy(Configuration conf,\n+      long retryTime, long retryInterval) {\n+    long rmConnectWaitMS \u003d retryTime;\n+    long rmConnectionRetryIntervalMS \u003d retryInterval;\n+\n+    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n+    if (!waitForEver) {\n+      if (rmConnectWaitMS \u003c 0) {\n+        throw new YarnRuntimeException(\"Invalid Configuration. \"\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n+            + \" can be -1, but can not be other negative numbers\");\n+      }\n+\n+      // try connect once\n+      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n+        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n+            + \" is smaller than \"\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n+            + \". Only try connect once.\");\n+        rmConnectWaitMS \u003d 0;\n+      }\n+    }\n+\n+    // Handle HA case first\n+    if (HAUtil.isHAEnabled(conf)) {\n+      final long failoverSleepBaseMs \u003d conf.getLong(\n+          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n+          rmConnectionRetryIntervalMS);\n+\n+      final long failoverSleepMaxMs \u003d conf.getLong(\n+          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n+          rmConnectionRetryIntervalMS);\n+\n+      int maxFailoverAttempts \u003d conf.getInt(\n+          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n+\n+      if (maxFailoverAttempts \u003d\u003d -1) {\n+        if (waitForEver) {\n+          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n+        } else {\n+          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n+        }\n+      }\n+\n+      return RetryPolicies.failoverOnNetworkException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n+          failoverSleepBaseMs, failoverSleepMaxMs);\n+    }\n+\n+    if (rmConnectionRetryIntervalMS \u003c 0) {\n+      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n+          \" should not be negative.\");\n+    }\n+\n+    RetryPolicy retryPolicy \u003d null;\n+    if (waitForEver) {\n+      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n+          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n+    } else {\n+      retryPolicy \u003d\n+          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n+              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n+    }\n+\n+    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n+        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+\n+    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n+    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n+    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n+    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n+    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n+    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n+    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n+    // YARN-4288: local IOException is also possible.\n+    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n+    // Not retry on remote IO exception.\n+    return RetryPolicies.retryOtherThanRemoteException(\n+        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static RetryPolicy createRetryPolicy(Configuration conf,\n      long retryTime, long retryInterval) {\n    long rmConnectWaitMS \u003d retryTime;\n    long rmConnectionRetryIntervalMS \u003d retryInterval;\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n    // YARN-4288: local IOException is also possible.\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    // Not retry on remote IO exception.\n    return RetryPolicies.retryOtherThanRemoteException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java"
    }
  }
}