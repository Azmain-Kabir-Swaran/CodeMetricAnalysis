{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 193,
  "functionEndLine": 272,
  "numCommitsSeen": 26,
  "timeTaken": 3822,
  "changeHistory": [
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "4c431a694059e40e78365b02a1497a6c7e479a70",
    "8f1454cc6d46afa057770a39aecc151c5f048b57",
    "3bfdb0091d3ab716f6c908364a1dc86c5b602166",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "4dd2003373753f586fc7bc819932369314765f60",
    "b3ea4aebff42131642af0393748dc751cb3fc31e",
    "40464fba22bac99d0e5b79674152aa5dfba99483",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "23b2e43f5d678517e33590d15dec73225b9c5682"
  ],
  "changeHistoryShort": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "4c431a694059e40e78365b02a1497a6c7e479a70": "Ybodychange",
    "8f1454cc6d46afa057770a39aecc151c5f048b57": "Ybodychange",
    "3bfdb0091d3ab716f6c908364a1dc86c5b602166": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "4dd2003373753f586fc7bc819932369314765f60": "Ybodychange",
    "b3ea4aebff42131642af0393748dc751cb3fc31e": "Ybodychange",
    "40464fba22bac99d0e5b79674152aa5dfba99483": "Ybodychange",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Ybodychange)",
    "23b2e43f5d678517e33590d15dec73225b9c5682": "Yintroduced"
  },
  "changeHistoryDetails": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n         \"%s property value should be greater than or equal to zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n         \" %s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n \n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     if(factory \u003d\u003d null) {\n       factory \u003d new JniDBFactory();\n     }\n \n     Path dbPath \u003d new Path(\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(conf);\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n-      IOUtils.cleanup(LOG, localFS);\n+      IOUtils.cleanupWithLogger(LOG, localFS);\n     }\n     LOG.info(\"Using leveldb path \" + dbPath);\n     try {\n       db \u003d factory.open(new File(dbPath.toString()), options);\n     } catch (IOException ioe) {\n       File dbFile \u003d new File(dbPath.toString());\n       File backupPath \u003d new File(\n           dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n       LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n           \"up at \"+ backupPath, ioe);\n       FileUtils.copyDirectory(dbFile, backupPath);\n       LOG.warn(\"Going to try repair\");\n       factory.repair(dbFile, options);\n       db \u003d factory.open(dbFile, options);\n     }\n     checkVersion();\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n        \"%s property value should be greater than or equal to zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n        \" %s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    if(factory \u003d\u003d null) {\n      factory \u003d new JniDBFactory();\n    }\n\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    try {\n      db \u003d factory.open(new File(dbPath.toString()), options);\n    } catch (IOException ioe) {\n      File dbFile \u003d new File(dbPath.toString());\n      File backupPath \u003d new File(\n          dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n      LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n          \"up at \"+ backupPath, ioe);\n      FileUtils.copyDirectory(dbFile, backupPath);\n      LOG.warn(\"Going to try repair\");\n      factory.repair(dbFile, options);\n      db \u003d factory.open(dbFile, options);\n    }\n    checkVersion();\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n         \"%s property value should be greater than or equal to zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n         \" %s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n \n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     if(factory \u003d\u003d null) {\n       factory \u003d new JniDBFactory();\n     }\n \n     Path dbPath \u003d new Path(\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(conf);\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n-      IOUtils.cleanupWithLogger(LOG, localFS);\n+      IOUtils.cleanup(LOG, localFS);\n     }\n     LOG.info(\"Using leveldb path \" + dbPath);\n     try {\n       db \u003d factory.open(new File(dbPath.toString()), options);\n     } catch (IOException ioe) {\n       File dbFile \u003d new File(dbPath.toString());\n       File backupPath \u003d new File(\n           dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n       LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n           \"up at \"+ backupPath, ioe);\n       FileUtils.copyDirectory(dbFile, backupPath);\n       LOG.warn(\"Going to try repair\");\n       factory.repair(dbFile, options);\n       db \u003d factory.open(dbFile, options);\n     }\n     checkVersion();\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n        \"%s property value should be greater than or equal to zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n        \" %s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    if(factory \u003d\u003d null) {\n      factory \u003d new JniDBFactory();\n    }\n\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    try {\n      db \u003d factory.open(new File(dbPath.toString()), options);\n    } catch (IOException ioe) {\n      File dbFile \u003d new File(dbPath.toString());\n      File backupPath \u003d new File(\n          dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n      LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n          \"up at \"+ backupPath, ioe);\n      FileUtils.copyDirectory(dbFile, backupPath);\n      LOG.warn(\"Going to try repair\");\n      factory.repair(dbFile, options);\n      db \u003d factory.open(dbFile, options);\n    }\n    checkVersion();\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/01/17 2:24 AM",
      "commitNameOld": "4c431a694059e40e78365b02a1497a6c7e479a70",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 202.65,
      "commitsBetweenForRepo": 1063,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n         \"%s property value should be greater than or equal to zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n         \" %s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n \n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     if(factory \u003d\u003d null) {\n       factory \u003d new JniDBFactory();\n     }\n \n     Path dbPath \u003d new Path(\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(conf);\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n-      IOUtils.cleanup(LOG, localFS);\n+      IOUtils.cleanupWithLogger(LOG, localFS);\n     }\n     LOG.info(\"Using leveldb path \" + dbPath);\n     try {\n       db \u003d factory.open(new File(dbPath.toString()), options);\n     } catch (IOException ioe) {\n       File dbFile \u003d new File(dbPath.toString());\n       File backupPath \u003d new File(\n           dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n       LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n           \"up at \"+ backupPath, ioe);\n       FileUtils.copyDirectory(dbFile, backupPath);\n       LOG.warn(\"Going to try repair\");\n       factory.repair(dbFile, options);\n       db \u003d factory.open(dbFile, options);\n     }\n     checkVersion();\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n        \"%s property value should be greater than or equal to zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n        \" %s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    if(factory \u003d\u003d null) {\n      factory \u003d new JniDBFactory();\n    }\n\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    try {\n      db \u003d factory.open(new File(dbPath.toString()), options);\n    } catch (IOException ioe) {\n      File dbFile \u003d new File(dbPath.toString());\n      File backupPath \u003d new File(\n          dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n      LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n          \"up at \"+ backupPath, ioe);\n      FileUtils.copyDirectory(dbFile, backupPath);\n      LOG.warn(\"Going to try repair\");\n      factory.repair(dbFile, options);\n      db \u003d factory.open(dbFile, options);\n    }\n    checkVersion();\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "4c431a694059e40e78365b02a1497a6c7e479a70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6054. TimelineServer fails to start when some LevelDb state files are missing. Contributed by Ravi Prakash.\n",
      "commitDate": "10/01/17 2:24 AM",
      "commitName": "4c431a694059e40e78365b02a1497a6c7e479a70",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "27/04/15 10:36 AM",
      "commitNameOld": "7f07c4d81023e3bf4bf8980e64cc9420ec31cf55",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 623.7,
      "commitsBetweenForRepo": 4562,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,80 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n         \"%s property value should be greater than or equal to zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n         \" %s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n     Preconditions.checkArgument(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n         \"%s property value should be greater than zero\",\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n \n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n-    JniDBFactory factory \u003d new JniDBFactory();\n+    if(factory \u003d\u003d null) {\n+      factory \u003d new JniDBFactory();\n+    }\n+\n     Path dbPath \u003d new Path(\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(conf);\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n       IOUtils.cleanup(LOG, localFS);\n     }\n     LOG.info(\"Using leveldb path \" + dbPath);\n-    db \u003d factory.open(new File(dbPath.toString()), options);\n+    try {\n+      db \u003d factory.open(new File(dbPath.toString()), options);\n+    } catch (IOException ioe) {\n+      File dbFile \u003d new File(dbPath.toString());\n+      File backupPath \u003d new File(\n+          dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n+      LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n+          \"up at \"+ backupPath, ioe);\n+      FileUtils.copyDirectory(dbFile, backupPath);\n+      LOG.warn(\"Going to try repair\");\n+      factory.repair(dbFile, options);\n+      db \u003d factory.open(dbFile, options);\n+    }\n     checkVersion();\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n        \"%s property value should be greater than or equal to zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n        \" %s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    if(factory \u003d\u003d null) {\n      factory \u003d new JniDBFactory();\n    }\n\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    try {\n      db \u003d factory.open(new File(dbPath.toString()), options);\n    } catch (IOException ioe) {\n      File dbFile \u003d new File(dbPath.toString());\n      File backupPath \u003d new File(\n          dbPath.toString() + BACKUP_EXT + Time.monotonicNow());\n      LOG.warn(\"Incurred exception while loading LevelDb database. Backing \" +\n          \"up at \"+ backupPath, ioe);\n      FileUtils.copyDirectory(dbFile, backupPath);\n      LOG.warn(\"Going to try repair\");\n      factory.repair(dbFile, options);\n      db \u003d factory.open(dbFile, options);\n    }\n    checkVersion();\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "8f1454cc6d46afa057770a39aecc151c5f048b57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2165. Added the sanity check for the numeric configuration values of the timeline service. Contributed by Vasanth kumar RJ.\n",
      "commitDate": "26/11/14 12:09 PM",
      "commitName": "8f1454cc6d46afa057770a39aecc151c5f048b57",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "24/11/14 2:36 PM",
      "commitNameOld": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,65 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n+    Preconditions.checkArgument(conf.getLong(\n+        YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n+        \"%s property value should be greater than zero\",\n+        YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n+    Preconditions.checkArgument(conf.getLong(\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n+        \"%s property value should be greater than zero\",\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n+    Preconditions.checkArgument(conf.getLong(\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n+        \"%s property value should be greater than or equal to zero\",\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n+    Preconditions.checkArgument(conf.getLong(\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n+        \" %s property value should be greater than zero\",\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n+    Preconditions.checkArgument(conf.getLong(\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n+        \"%s property value should be greater than zero\",\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n+\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     JniDBFactory factory \u003d new JniDBFactory();\n     Path dbPath \u003d new Path(\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(conf);\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n       IOUtils.cleanup(LOG, localFS);\n     }\n     LOG.info(\"Using leveldb path \" + dbPath);\n     db \u003d factory.open(new File(dbPath.toString()), options);\n     checkVersion();\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_TTL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_TTL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE) \u003e\u003d 0,\n        \"%s property value should be greater than or equal to zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE) \u003e 0,\n        \" %s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE);\n    Preconditions.checkArgument(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE) \u003e 0,\n        \"%s property value should be greater than zero\",\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE);\n\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    JniDBFactory factory \u003d new JniDBFactory();\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    db \u003d factory.open(new File(dbPath.toString()), options);\n    checkVersion();\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "3bfdb0091d3ab716f6c908364a1dc86c5b602166": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2288. Made persisted data in LevelDB timeline store be versioned. Contributed by Junping Du.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616540 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 10:02 AM",
      "commitName": "3bfdb0091d3ab716f6c908364a1dc86c5b602166",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 11:09 AM",
      "commitNameOld": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 70.95,
      "commitsBetweenForRepo": 478,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     JniDBFactory factory \u003d new JniDBFactory();\n     Path dbPath \u003d new Path(\n         conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(conf);\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n       IOUtils.cleanup(LOG, localFS);\n     }\n     LOG.info(\"Using leveldb path \" + dbPath);\n     db \u003d factory.open(new File(dbPath.toString()), options);\n+    checkVersion();\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    JniDBFactory factory \u003d new JniDBFactory();\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    db \u003d factory.open(new File(dbPath.toString()), options);\n    checkVersion();\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    JniDBFactory factory \u003d new JniDBFactory();\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    db \u003d factory.open(new File(dbPath.toString()), options);\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
      }
    },
    "4dd2003373753f586fc7bc819932369314765f60": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2071. Modified levelDB store permissions to be readable only by the server user. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597231 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:24 PM",
      "commitName": "4dd2003373753f586fc7bc819932369314765f60",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/03/14 11:14 AM",
      "commitNameOld": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 60.3,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,38 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     options.cacheSize(conf.getLong(\n         YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     JniDBFactory factory \u003d new JniDBFactory();\n-    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n-    File p \u003d new File(path);\n-    if (!p.exists()) {\n-      if (!p.mkdirs()) {\n-        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n-            \"timeline store \" + path);\n+    Path dbPath \u003d new Path(\n+        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n+    FileSystem localFS \u003d null;\n+    try {\n+      localFS \u003d FileSystem.getLocal(conf);\n+      if (!localFS.exists(dbPath)) {\n+        if (!localFS.mkdirs(dbPath)) {\n+          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n+              \"timeline store \" + dbPath);\n+        }\n+        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n+    } finally {\n+      IOUtils.cleanup(LOG, localFS);\n     }\n-    LOG.info(\"Using leveldb path \" + path);\n-    db \u003d factory.open(new File(path, FILENAME), options);\n+    LOG.info(\"Using leveldb path \" + dbPath);\n+    db \u003d factory.open(new File(dbPath.toString()), options);\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n \n     if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n       deletionThread \u003d new EntityDeletionThread(conf);\n       deletionThread.start();\n     }\n \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    JniDBFactory factory \u003d new JniDBFactory();\n    Path dbPath \u003d new Path(\n        conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), FILENAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(conf);\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    LOG.info(\"Using leveldb path \" + dbPath);\n    db \u003d factory.open(new File(dbPath.toString()), options);\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "b3ea4aebff42131642af0393748dc751cb3fc31e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1717. Enabled periodically discarding old data in LeveldbTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 1:35 PM",
      "commitName": "b3ea4aebff42131642af0393748dc751cb3fc31e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "04/03/14 9:32 AM",
      "commitNameOld": "40464fba22bac99d0e5b79674152aa5dfba99483",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.13,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,31 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n+    options.cacheSize(conf.getLong(\n+        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n     JniDBFactory factory \u003d new JniDBFactory();\n     String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n     File p \u003d new File(path);\n-    if (!p.exists())\n-      if (!p.mkdirs())\n+    if (!p.exists()) {\n+      if (!p.mkdirs()) {\n         throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n             \"timeline store \" + path);\n+      }\n+    }\n     LOG.info(\"Using leveldb path \" + path);\n     db \u003d factory.open(new File(path, FILENAME), options);\n     startTimeWriteCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n             conf)));\n     startTimeReadCache \u003d\n         Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n             conf)));\n+\n+    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n+      deletionThread \u003d new EntityDeletionThread(conf);\n+      deletionThread.start();\n+    }\n+\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    options.cacheSize(conf.getLong(\n        YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));\n    JniDBFactory factory \u003d new JniDBFactory();\n    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n    File p \u003d new File(path);\n    if (!p.exists()) {\n      if (!p.mkdirs()) {\n        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n            \"timeline store \" + path);\n      }\n    }\n    LOG.info(\"Using leveldb path \" + path);\n    db \u003d factory.open(new File(path, FILENAME), options);\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n\n    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE, true)) {\n      deletionThread \u003d new EntityDeletionThread(conf);\n      deletionThread.start();\n    }\n\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "40464fba22bac99d0e5b79674152aa5dfba99483": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1730. Implemented simple write-locking in the LevelDB based timeline-store. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/14 9:32 AM",
      "commitName": "40464fba22bac99d0e5b79674152aa5dfba99483",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/02/14 12:55 PM",
      "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.86,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,20 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     JniDBFactory factory \u003d new JniDBFactory();\n     String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n     File p \u003d new File(path);\n     if (!p.exists())\n       if (!p.mkdirs())\n         throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n             \"timeline store \" + path);\n     LOG.info(\"Using leveldb path \" + path);\n     db \u003d factory.open(new File(path, FILENAME), options);\n+    startTimeWriteCache \u003d\n+        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n+            conf)));\n+    startTimeReadCache \u003d\n+        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n+            conf)));\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    JniDBFactory factory \u003d new JniDBFactory();\n    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n    File p \u003d new File(path);\n    if (!p.exists())\n      if (!p.mkdirs())\n        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n            \"timeline store \" + path);\n    LOG.info(\"Using leveldb path \" + path);\n    db \u003d factory.open(new File(path, FILENAME), options);\n    startTimeWriteCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeWriteCacheSize(\n            conf)));\n    startTimeReadCache \u003d\n        Collections.synchronizedMap(new LRUMap(getStartTimeReadCacheSize(\n            conf)));\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     JniDBFactory factory \u003d new JniDBFactory();\n-    String path \u003d conf.get(YarnConfiguration.ATS_LEVELDB_PATH_PROPERTY);\n+    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n     File p \u003d new File(path);\n     if (!p.exists())\n       if (!p.mkdirs())\n         throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n-            \"application timeline store \" + path);\n+            \"timeline store \" + path);\n     LOG.info(\"Using leveldb path \" + path);\n     db \u003d factory.open(new File(path, FILENAME), options);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    JniDBFactory factory \u003d new JniDBFactory();\n    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n    File p \u003d new File(path);\n    if (!p.exists())\n      if (!p.mkdirs())\n        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n            \"timeline store \" + path);\n    LOG.info(\"Using leveldb path \" + path);\n    db \u003d factory.open(new File(path, FILENAME), options);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/LeveldbApplicationTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     Options options \u003d new Options();\n     options.createIfMissing(true);\n     JniDBFactory factory \u003d new JniDBFactory();\n-    String path \u003d conf.get(YarnConfiguration.ATS_LEVELDB_PATH_PROPERTY);\n+    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n     File p \u003d new File(path);\n     if (!p.exists())\n       if (!p.mkdirs())\n         throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n-            \"application timeline store \" + path);\n+            \"timeline store \" + path);\n     LOG.info(\"Using leveldb path \" + path);\n     db \u003d factory.open(new File(path, FILENAME), options);\n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    JniDBFactory factory \u003d new JniDBFactory();\n    String path \u003d conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH);\n    File p \u003d new File(path);\n    if (!p.exists())\n      if (!p.mkdirs())\n        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n            \"timeline store \" + path);\n    LOG.info(\"Using leveldb path \" + path);\n    db \u003d factory.open(new File(path, FILENAME), options);\n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "23b2e43f5d678517e33590d15dec73225b9c5682": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1635. Implemented a Leveldb based ApplicationTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 6:15 PM",
      "commitName": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,14 @@\n+  protected void serviceInit(Configuration conf) throws Exception {\n+    Options options \u003d new Options();\n+    options.createIfMissing(true);\n+    JniDBFactory factory \u003d new JniDBFactory();\n+    String path \u003d conf.get(YarnConfiguration.ATS_LEVELDB_PATH_PROPERTY);\n+    File p \u003d new File(path);\n+    if (!p.exists())\n+      if (!p.mkdirs())\n+        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n+            \"application timeline store \" + path);\n+    LOG.info(\"Using leveldb path \" + path);\n+    db \u003d factory.open(new File(path, FILENAME), options);\n+    super.serviceInit(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    Options options \u003d new Options();\n    options.createIfMissing(true);\n    JniDBFactory factory \u003d new JniDBFactory();\n    String path \u003d conf.get(YarnConfiguration.ATS_LEVELDB_PATH_PROPERTY);\n    File p \u003d new File(path);\n    if (!p.exists())\n      if (!p.mkdirs())\n        throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n            \"application timeline store \" + path);\n    LOG.info(\"Using leveldb path \" + path);\n    db \u003d factory.open(new File(path, FILENAME), options);\n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/LeveldbApplicationTimelineStore.java"
    }
  }
}