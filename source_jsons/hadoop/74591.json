{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShellBasedUnixGroupsMapping.java",
  "functionName": "getUnixGroups",
  "functionId": "getUnixGroups___user-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
  "functionStartLine": 195,
  "functionEndLine": 234,
  "numCommitsSeen": 18,
  "timeTaken": 2765,
  "changeHistory": [
    "12d0645990a878f78216235c800ae4e157796160",
    "e8694deb6ad180449f8ce6c1c8b4f84873c0587a",
    "0348e769abc507c69d644db7bc56d31d971c51d1",
    "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
    "f099fa4cd474060455dcf5d437ffa0849ca9f95a",
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "e346c2f4e08a38a80c7f505d8a8f3554b408e997",
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20"
  ],
  "changeHistoryShort": {
    "12d0645990a878f78216235c800ae4e157796160": "Ybodychange",
    "e8694deb6ad180449f8ce6c1c8b4f84873c0587a": "Ybodychange",
    "0348e769abc507c69d644db7bc56d31d971c51d1": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
    "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7": "Ybodychange",
    "f099fa4cd474060455dcf5d437ffa0849ca9f95a": "Ybodychange",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "e346c2f4e08a38a80c7f505d8a8f3554b408e997": "Ybodychange",
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "12d0645990a878f78216235c800ae4e157796160": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15060. TestShellBasedUnixGroupsMapping.testFiniteGroupResolutionTime flaky. Contributed by Miklos Szegedi.\n",
      "commitDate": "10/01/18 10:52 AM",
      "commitName": "12d0645990a878f78216235c800ae4e157796160",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "24/02/17 8:04 AM",
      "commitNameOld": "e8694deb6ad180449f8ce6c1c8b4f84873c0587a",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 320.12,
      "commitsBetweenForRepo": 2132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,40 @@\n   private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n     ShellCommandExecutor executor \u003d createGroupExecutor(user);\n \n     List\u003cString\u003e groups;\n     try {\n       executor.execute();\n       groups \u003d resolveFullGroupNames(executor.getOutput());\n     } catch (ExitCodeException e) {\n-      try {\n-        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n-            executor.getOutput());\n-      } catch (PartialGroupNameException pge) {\n-        LOG.warn(\"unable to return groups for user {}\", user, pge);\n+      if (handleExecutorTimeout(executor, user)) {\n         return EMPTY_GROUPS;\n+      } else {\n+        try {\n+          groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n+              executor.getOutput());\n+        } catch (PartialGroupNameException pge) {\n+          LOG.warn(\"unable to return groups for user {}\", user, pge);\n+          return EMPTY_GROUPS;\n+        }\n       }\n     } catch (IOException ioe) {\n-      // If its a shell executor timeout, indicate so in the message\n-      // but treat the result as empty instead of throwing it up,\n-      // similar to how partial resolution failures are handled above\n-      if (executor.isTimedOut()) {\n-        LOG.warn(\n-            \"Unable to return groups for user \u0027{}\u0027 as shell group lookup \" +\n-            \"command \u0027{}\u0027 ran longer than the configured timeout limit of \" +\n-            \"{} seconds.\",\n-            user,\n-            Joiner.on(\u0027 \u0027).join(executor.getExecString()),\n-            timeout\n-        );\n+      if (handleExecutorTimeout(executor, user)) {\n         return EMPTY_GROUPS;\n       } else {\n         // If its not an executor timeout, we should let the caller handle it\n         throw ioe;\n       }\n     }\n \n     // remove duplicated primary group\n     if (!Shell.WINDOWS) {\n       for (int i \u003d 1; i \u003c groups.size(); i++) {\n         if (groups.get(i).equals(groups.get(0))) {\n           groups.remove(i);\n           break;\n         }\n       }\n     }\n \n     return groups;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n\n    List\u003cString\u003e groups;\n    try {\n      executor.execute();\n      groups \u003d resolveFullGroupNames(executor.getOutput());\n    } catch (ExitCodeException e) {\n      if (handleExecutorTimeout(executor, user)) {\n        return EMPTY_GROUPS;\n      } else {\n        try {\n          groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n              executor.getOutput());\n        } catch (PartialGroupNameException pge) {\n          LOG.warn(\"unable to return groups for user {}\", user, pge);\n          return EMPTY_GROUPS;\n        }\n      }\n    } catch (IOException ioe) {\n      if (handleExecutorTimeout(executor, user)) {\n        return EMPTY_GROUPS;\n      } else {\n        // If its not an executor timeout, we should let the caller handle it\n        throw ioe;\n      }\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {}
    },
    "e8694deb6ad180449f8ce6c1c8b4f84873c0587a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13817. Add a finite shell command timeout to ShellBasedUnixGroupsMapping. (harsh)\n",
      "commitDate": "24/02/17 8:04 AM",
      "commitName": "e8694deb6ad180449f8ce6c1c8b4f84873c0587a",
      "commitAuthor": "Harsh J",
      "commitDateOld": "25/11/15 6:37 PM",
      "commitNameOld": "0348e769abc507c69d644db7bc56d31d971c51d1",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 456.56,
      "commitsBetweenForRepo": 2998,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,47 @@\n   private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n     ShellCommandExecutor executor \u003d createGroupExecutor(user);\n \n     List\u003cString\u003e groups;\n     try {\n       executor.execute();\n       groups \u003d resolveFullGroupNames(executor.getOutput());\n     } catch (ExitCodeException e) {\n       try {\n         groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n             executor.getOutput());\n       } catch (PartialGroupNameException pge) {\n-        LOG.warn(\"unable to return groups for user \" + user, pge);\n-        return new LinkedList\u003c\u003e();\n+        LOG.warn(\"unable to return groups for user {}\", user, pge);\n+        return EMPTY_GROUPS;\n+      }\n+    } catch (IOException ioe) {\n+      // If its a shell executor timeout, indicate so in the message\n+      // but treat the result as empty instead of throwing it up,\n+      // similar to how partial resolution failures are handled above\n+      if (executor.isTimedOut()) {\n+        LOG.warn(\n+            \"Unable to return groups for user \u0027{}\u0027 as shell group lookup \" +\n+            \"command \u0027{}\u0027 ran longer than the configured timeout limit of \" +\n+            \"{} seconds.\",\n+            user,\n+            Joiner.on(\u0027 \u0027).join(executor.getExecString()),\n+            timeout\n+        );\n+        return EMPTY_GROUPS;\n+      } else {\n+        // If its not an executor timeout, we should let the caller handle it\n+        throw ioe;\n       }\n     }\n \n     // remove duplicated primary group\n     if (!Shell.WINDOWS) {\n       for (int i \u003d 1; i \u003c groups.size(); i++) {\n         if (groups.get(i).equals(groups.get(0))) {\n           groups.remove(i);\n           break;\n         }\n       }\n     }\n \n     return groups;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n\n    List\u003cString\u003e groups;\n    try {\n      executor.execute();\n      groups \u003d resolveFullGroupNames(executor.getOutput());\n    } catch (ExitCodeException e) {\n      try {\n        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n            executor.getOutput());\n      } catch (PartialGroupNameException pge) {\n        LOG.warn(\"unable to return groups for user {}\", user, pge);\n        return EMPTY_GROUPS;\n      }\n    } catch (IOException ioe) {\n      // If its a shell executor timeout, indicate so in the message\n      // but treat the result as empty instead of throwing it up,\n      // similar to how partial resolution failures are handled above\n      if (executor.isTimedOut()) {\n        LOG.warn(\n            \"Unable to return groups for user \u0027{}\u0027 as shell group lookup \" +\n            \"command \u0027{}\u0027 ran longer than the configured timeout limit of \" +\n            \"{} seconds.\",\n            user,\n            Joiner.on(\u0027 \u0027).join(executor.getExecString()),\n            timeout\n        );\n        return EMPTY_GROUPS;\n      } else {\n        // If its not an executor timeout, we should let the caller handle it\n        throw ioe;\n      }\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {}
    },
    "0348e769abc507c69d644db7bc56d31d971c51d1": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-12468. Partial group resolution failure should not result in user lockout. (Wei-Chiu Chuang via Yongjun Zhang)\n",
      "commitDate": "25/11/15 6:37 PM",
      "commitName": "0348e769abc507c69d644db7bc56d31d971c51d1",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-12468. Partial group resolution failure should not result in user lockout. (Wei-Chiu Chuang via Yongjun Zhang)\n",
          "commitDate": "25/11/15 6:37 PM",
          "commitName": "0348e769abc507c69d644db7bc56d31d971c51d1",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "21/07/14 2:52 PM",
          "commitNameOld": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 492.2,
          "commitsBetweenForRepo": 4228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n-    String result \u003d \"\";\n+  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n+    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n+\n+    List\u003cString\u003e groups;\n     try {\n-      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n+      executor.execute();\n+      groups \u003d resolveFullGroupNames(executor.getOutput());\n     } catch (ExitCodeException e) {\n-      // if we didn\u0027t get the group - just return empty list;\n-      LOG.warn(\"got exception trying to get groups for user \" + user + \": \"\n-          + e.getMessage());\n-      return new LinkedList\u003cString\u003e();\n-    }\n-    \n-    StringTokenizer tokenizer \u003d\n-        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n-    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n-    while (tokenizer.hasMoreTokens()) {\n-      groups.add(tokenizer.nextToken());\n+      try {\n+        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n+            executor.getOutput());\n+      } catch (PartialGroupNameException pge) {\n+        LOG.warn(\"unable to return groups for user \" + user, pge);\n+        return new LinkedList\u003c\u003e();\n+      }\n     }\n \n     // remove duplicated primary group\n     if (!Shell.WINDOWS) {\n       for (int i \u003d 1; i \u003c groups.size(); i++) {\n         if (groups.get(i).equals(groups.get(0))) {\n           groups.remove(i);\n           break;\n         }\n       }\n     }\n \n     return groups;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n\n    List\u003cString\u003e groups;\n    try {\n      executor.execute();\n      groups \u003d resolveFullGroupNames(executor.getOutput());\n    } catch (ExitCodeException e) {\n      try {\n        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n            executor.getOutput());\n      } catch (PartialGroupNameException pge) {\n        LOG.warn(\"unable to return groups for user \" + user, pge);\n        return new LinkedList\u003c\u003e();\n      }\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12468. Partial group resolution failure should not result in user lockout. (Wei-Chiu Chuang via Yongjun Zhang)\n",
          "commitDate": "25/11/15 6:37 PM",
          "commitName": "0348e769abc507c69d644db7bc56d31d971c51d1",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "21/07/14 2:52 PM",
          "commitNameOld": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 492.2,
          "commitsBetweenForRepo": 4228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n-    String result \u003d \"\";\n+  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n+    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n+\n+    List\u003cString\u003e groups;\n     try {\n-      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n+      executor.execute();\n+      groups \u003d resolveFullGroupNames(executor.getOutput());\n     } catch (ExitCodeException e) {\n-      // if we didn\u0027t get the group - just return empty list;\n-      LOG.warn(\"got exception trying to get groups for user \" + user + \": \"\n-          + e.getMessage());\n-      return new LinkedList\u003cString\u003e();\n-    }\n-    \n-    StringTokenizer tokenizer \u003d\n-        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n-    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n-    while (tokenizer.hasMoreTokens()) {\n-      groups.add(tokenizer.nextToken());\n+      try {\n+        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n+            executor.getOutput());\n+      } catch (PartialGroupNameException pge) {\n+        LOG.warn(\"unable to return groups for user \" + user, pge);\n+        return new LinkedList\u003c\u003e();\n+      }\n     }\n \n     // remove duplicated primary group\n     if (!Shell.WINDOWS) {\n       for (int i \u003d 1; i \u003c groups.size(); i++) {\n         if (groups.get(i).equals(groups.get(0))) {\n           groups.remove(i);\n           break;\n         }\n       }\n     }\n \n     return groups;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n\n    List\u003cString\u003e groups;\n    try {\n      executor.execute();\n      groups \u003d resolveFullGroupNames(executor.getOutput());\n    } catch (ExitCodeException e) {\n      try {\n        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n            executor.getOutput());\n      } catch (PartialGroupNameException pge) {\n        LOG.warn(\"unable to return groups for user \" + user, pge);\n        return new LinkedList\u003c\u003e();\n      }\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-12468. Partial group resolution failure should not result in user lockout. (Wei-Chiu Chuang via Yongjun Zhang)\n",
          "commitDate": "25/11/15 6:37 PM",
          "commitName": "0348e769abc507c69d644db7bc56d31d971c51d1",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "21/07/14 2:52 PM",
          "commitNameOld": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 492.2,
          "commitsBetweenForRepo": 4228,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n-    String result \u003d \"\";\n+  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n+    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n+\n+    List\u003cString\u003e groups;\n     try {\n-      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n+      executor.execute();\n+      groups \u003d resolveFullGroupNames(executor.getOutput());\n     } catch (ExitCodeException e) {\n-      // if we didn\u0027t get the group - just return empty list;\n-      LOG.warn(\"got exception trying to get groups for user \" + user + \": \"\n-          + e.getMessage());\n-      return new LinkedList\u003cString\u003e();\n-    }\n-    \n-    StringTokenizer tokenizer \u003d\n-        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n-    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n-    while (tokenizer.hasMoreTokens()) {\n-      groups.add(tokenizer.nextToken());\n+      try {\n+        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n+            executor.getOutput());\n+      } catch (PartialGroupNameException pge) {\n+        LOG.warn(\"unable to return groups for user \" + user, pge);\n+        return new LinkedList\u003c\u003e();\n+      }\n     }\n \n     // remove duplicated primary group\n     if (!Shell.WINDOWS) {\n       for (int i \u003d 1; i \u003c groups.size(); i++) {\n         if (groups.get(i).equals(groups.get(0))) {\n           groups.remove(i);\n           break;\n         }\n       }\n     }\n \n     return groups;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cString\u003e getUnixGroups(String user) throws IOException {\n    ShellCommandExecutor executor \u003d createGroupExecutor(user);\n\n    List\u003cString\u003e groups;\n    try {\n      executor.execute();\n      groups \u003d resolveFullGroupNames(executor.getOutput());\n    } catch (ExitCodeException e) {\n      try {\n        groups \u003d resolvePartialGroupNames(user, e.getMessage(),\n            executor.getOutput());\n      } catch (PartialGroupNameException pge) {\n        LOG.warn(\"unable to return groups for user \" + user, pge);\n        return new LinkedList\u003c\u003e();\n      }\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
          "extendedDetails": {
            "oldValue": "[user-String(modifiers-final)]",
            "newValue": "[user-String]"
          }
        }
      ]
    },
    "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10755. Support negative caching of user-group mapping. Contributed by Lei Xu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 2:52 PM",
      "commitName": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "14/05/14 2:01 PM",
      "commitNameOld": "f099fa4cd474060455dcf5d437ffa0849ca9f95a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 68.04,
      "commitsBetweenForRepo": 420,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n     String result \u003d \"\";\n     try {\n       result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n     } catch (ExitCodeException e) {\n       // if we didn\u0027t get the group - just return empty list;\n-      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n+      LOG.warn(\"got exception trying to get groups for user \" + user + \": \"\n+          + e.getMessage());\n       return new LinkedList\u003cString\u003e();\n     }\n     \n     StringTokenizer tokenizer \u003d\n         new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n     List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n     while (tokenizer.hasMoreTokens()) {\n       groups.add(tokenizer.nextToken());\n     }\n \n     // remove duplicated primary group\n     if (!Shell.WINDOWS) {\n       for (int i \u003d 1; i \u003c groups.size(); i++) {\n         if (groups.get(i).equals(groups.get(0))) {\n           groups.remove(i);\n           break;\n         }\n       }\n     }\n \n     return groups;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user + \": \"\n          + e.getMessage());\n      return new LinkedList\u003cString\u003e();\n    }\n    \n    StringTokenizer tokenizer \u003d\n        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {}
    },
    "f099fa4cd474060455dcf5d437ffa0849ca9f95a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10401. ShellBasedUnixGroupsMapping#getGroups does not always return primary group first (ajisakaa via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594714 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/14 2:01 PM",
      "commitName": "f099fa4cd474060455dcf5d437ffa0849ca9f95a",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "06/03/13 11:15 AM",
      "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 434.07,
      "commitsBetweenForRepo": 2865,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,29 @@\n   private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n     String result \u003d \"\";\n     try {\n       result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n     } catch (ExitCodeException e) {\n       // if we didn\u0027t get the group - just return empty list;\n       LOG.warn(\"got exception trying to get groups for user \" + user, e);\n+      return new LinkedList\u003cString\u003e();\n     }\n     \n     StringTokenizer tokenizer \u003d\n         new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n     List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n     while (tokenizer.hasMoreTokens()) {\n       groups.add(tokenizer.nextToken());\n     }\n+\n+    // remove duplicated primary group\n+    if (!Shell.WINDOWS) {\n+      for (int i \u003d 1; i \u003c groups.size(); i++) {\n+        if (groups.get(i).equals(groups.get(0))) {\n+          groups.remove(i);\n+          break;\n+        }\n+      }\n+    }\n+\n     return groups;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n      return new LinkedList\u003cString\u003e();\n    }\n    \n    StringTokenizer tokenizer \u003d\n        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n\n    // remove duplicated primary group\n    if (!Shell.WINDOWS) {\n      for (int i \u003d 1; i \u003c groups.size(); i++) {\n        if (groups.get(i).equals(groups.get(0))) {\n          groups.remove(i);\n          break;\n        }\n      }\n    }\n\n    return groups;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {}
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 193.76,
      "commitsBetweenForRepo": 940,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n     String result \u003d \"\";\n     try {\n       result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n     } catch (ExitCodeException e) {\n       // if we didn\u0027t get the group - just return empty list;\n       LOG.warn(\"got exception trying to get groups for user \" + user, e);\n     }\n     \n-    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n+    StringTokenizer tokenizer \u003d\n+        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n     List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n     while (tokenizer.hasMoreTokens()) {\n       groups.add(tokenizer.nextToken());\n     }\n     return groups;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n    }\n    \n    StringTokenizer tokenizer \u003d\n        new StringTokenizer(result, Shell.TOKEN_SEPARATOR_REGEX);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n    return groups;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n    }\n    \n    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n    return groups;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n    }\n    \n    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n    return groups;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n    }\n    \n    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n    return groups;\n  }",
      "path": "common/src/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
        "newPath": "common/src/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java"
      }
    },
    "e346c2f4e08a38a80c7f505d8a8f3554b408e997": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6644. util.Shell getGROUPS_FOR_USER_COMMAND method name - should use common naming convention\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@948528 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/05/10 11:35 AM",
      "commitName": "e346c2f4e08a38a80c7f505d8a8f3554b408e997",
      "commitAuthor": "Boris Shkolnik",
      "commitDateOld": "27/01/10 12:08 AM",
      "commitNameOld": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 119.44,
      "commitsBetweenForRepo": 125,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n     String result \u003d \"\";\n     try {\n-      result \u003d Shell.execCommand(Shell.getGROUPS_FOR_USER_COMMAND(user));\n+      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n     } catch (ExitCodeException e) {\n       // if we didn\u0027t get the group - just return empty list;\n       LOG.warn(\"got exception trying to get groups for user \" + user, e);\n     }\n     \n     StringTokenizer tokenizer \u003d new StringTokenizer(result);\n     List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n     while (tokenizer.hasMoreTokens()) {\n       groups.add(tokenizer.nextToken());\n     }\n     return groups;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGroupsForUserCommand(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n    }\n    \n    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n    return groups;\n  }",
      "path": "src/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java",
      "extendedDetails": {}
    },
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20": {
      "type": "Yintroduced",
      "commitMessage": "   HADOOP-4656. Add a user to groups mapping service (boryas and acmurthy_)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@892066 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/09 5:29 PM",
      "commitName": "ae93ba7501d95e9d26a29de25f4cc39e5225ca20",
      "commitAuthor": "Boris Shkolnik",
      "diff": "@@ -0,0 +1,16 @@\n+  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n+    String result \u003d \"\";\n+    try {\n+      result \u003d Shell.execCommand(Shell.getGROUPS_FOR_USER_COMMAND(user));\n+    } catch (ExitCodeException e) {\n+      // if we didn\u0027t get the group - just return empty list;\n+      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n+    }\n+    \n+    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n+    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n+    while (tokenizer.hasMoreTokens()) {\n+      groups.add(tokenizer.nextToken());\n+    }\n+    return groups;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static List\u003cString\u003e getUnixGroups(final String user) throws IOException {\n    String result \u003d \"\";\n    try {\n      result \u003d Shell.execCommand(Shell.getGROUPS_FOR_USER_COMMAND(user));\n    } catch (ExitCodeException e) {\n      // if we didn\u0027t get the group - just return empty list;\n      LOG.warn(\"got exception trying to get groups for user \" + user, e);\n    }\n    \n    StringTokenizer tokenizer \u003d new StringTokenizer(result);\n    List\u003cString\u003e groups \u003d new LinkedList\u003cString\u003e();\n    while (tokenizer.hasMoreTokens()) {\n      groups.add(tokenizer.nextToken());\n    }\n    return groups;\n  }",
      "path": "src/java/org/apache/hadoop/security/ShellBasedUnixGroupsMapping.java"
    }
  }
}