{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSConfiguration.java",
  "functionName": "initLogging",
  "functionId": "initLogging",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSConfiguration.java",
  "functionStartLine": 166,
  "functionEndLine": 192,
  "numCommitsSeen": 33,
  "timeTaken": 2439,
  "changeHistory": [
    "781437c219dc3422797a32dc7ba72cd4f5ee38e2",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6"
  ],
  "changeHistoryShort": {
    "781437c219dc3422797a32dc7ba72cd4f5ee38e2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "781437c219dc3422797a32dc7ba72cd4f5ee38e2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-15698. KMS log4j is not initialized properly at startup. Contributed by Kitti Nanasi.\n",
      "commitDate": "29/08/18 10:07 PM",
      "commitName": "781437c219dc3422797a32dc7ba72cd4f5ee38e2",
      "commitAuthor": "Kitti Nanasi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-15698. KMS log4j is not initialized properly at startup. Contributed by Kitti Nanasi.\n",
          "commitDate": "29/08/18 10:07 PM",
          "commitName": "781437c219dc3422797a32dc7ba72cd4f5ee38e2",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "29/08/18 8:21 PM",
          "commitNameOld": "582cb10ec74ed5666946a3769002ceb80ba660cb",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  private void initLogging(String confDir) {\n+  public static void initLogging() {\n+    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n+    if (confDir \u003d\u003d null) {\n+      throw new RuntimeException(\"System property \u0027\" +\n+          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n+    }\n     if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n       System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n       boolean fromClasspath \u003d true;\n       File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n       if (log4jConf.exists()) {\n         PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n         fromClasspath \u003d false;\n       } else {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n         URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n         if (log4jUrl !\u003d null) {\n           PropertyConfigurator.configure(log4jUrl);\n         }\n       }\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n       LOG.debug(\"KMS log starting\");\n       if (fromClasspath) {\n         LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n         LOG.warn(\"Logging with INFO level to standard output\");\n       }\n-    } else {\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initLogging() {\n    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n    if (confDir \u003d\u003d null) {\n      throw new RuntimeException(\"System property \u0027\" +\n          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n    }\n    if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n      System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n      boolean fromClasspath \u003d true;\n      File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n      if (log4jConf.exists()) {\n        PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n        fromClasspath \u003d false;\n      } else {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n        if (log4jUrl !\u003d null) {\n          PropertyConfigurator.configure(log4jUrl);\n        }\n      }\n      LOG.debug(\"KMS log starting\");\n      if (fromClasspath) {\n        LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n        LOG.warn(\"Logging with INFO level to standard output\");\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSConfiguration.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSWebApp.java",
            "newPath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSConfiguration.java",
            "oldMethodName": "initLogging",
            "newMethodName": "initLogging"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-15698. KMS log4j is not initialized properly at startup. Contributed by Kitti Nanasi.\n",
          "commitDate": "29/08/18 10:07 PM",
          "commitName": "781437c219dc3422797a32dc7ba72cd4f5ee38e2",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "29/08/18 8:21 PM",
          "commitNameOld": "582cb10ec74ed5666946a3769002ceb80ba660cb",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  private void initLogging(String confDir) {\n+  public static void initLogging() {\n+    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n+    if (confDir \u003d\u003d null) {\n+      throw new RuntimeException(\"System property \u0027\" +\n+          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n+    }\n     if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n       System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n       boolean fromClasspath \u003d true;\n       File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n       if (log4jConf.exists()) {\n         PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n         fromClasspath \u003d false;\n       } else {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n         URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n         if (log4jUrl !\u003d null) {\n           PropertyConfigurator.configure(log4jUrl);\n         }\n       }\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n       LOG.debug(\"KMS log starting\");\n       if (fromClasspath) {\n         LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n         LOG.warn(\"Logging with INFO level to standard output\");\n       }\n-    } else {\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initLogging() {\n    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n    if (confDir \u003d\u003d null) {\n      throw new RuntimeException(\"System property \u0027\" +\n          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n    }\n    if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n      System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n      boolean fromClasspath \u003d true;\n      File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n      if (log4jConf.exists()) {\n        PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n        fromClasspath \u003d false;\n      } else {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n        if (log4jUrl !\u003d null) {\n          PropertyConfigurator.configure(log4jUrl);\n        }\n      }\n      LOG.debug(\"KMS log starting\");\n      if (fromClasspath) {\n        LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n        LOG.warn(\"Logging with INFO level to standard output\");\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSConfiguration.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15698. KMS log4j is not initialized properly at startup. Contributed by Kitti Nanasi.\n",
          "commitDate": "29/08/18 10:07 PM",
          "commitName": "781437c219dc3422797a32dc7ba72cd4f5ee38e2",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "29/08/18 8:21 PM",
          "commitNameOld": "582cb10ec74ed5666946a3769002ceb80ba660cb",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  private void initLogging(String confDir) {\n+  public static void initLogging() {\n+    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n+    if (confDir \u003d\u003d null) {\n+      throw new RuntimeException(\"System property \u0027\" +\n+          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n+    }\n     if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n       System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n       boolean fromClasspath \u003d true;\n       File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n       if (log4jConf.exists()) {\n         PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n         fromClasspath \u003d false;\n       } else {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n         URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n         if (log4jUrl !\u003d null) {\n           PropertyConfigurator.configure(log4jUrl);\n         }\n       }\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n       LOG.debug(\"KMS log starting\");\n       if (fromClasspath) {\n         LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n         LOG.warn(\"Logging with INFO level to standard output\");\n       }\n-    } else {\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initLogging() {\n    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n    if (confDir \u003d\u003d null) {\n      throw new RuntimeException(\"System property \u0027\" +\n          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n    }\n    if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n      System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n      boolean fromClasspath \u003d true;\n      File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n      if (log4jConf.exists()) {\n        PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n        fromClasspath \u003d false;\n      } else {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n        if (log4jUrl !\u003d null) {\n          PropertyConfigurator.configure(log4jUrl);\n        }\n      }\n      LOG.debug(\"KMS log starting\");\n      if (fromClasspath) {\n        LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n        LOG.warn(\"Logging with INFO level to standard output\");\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSConfiguration.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15698. KMS log4j is not initialized properly at startup. Contributed by Kitti Nanasi.\n",
          "commitDate": "29/08/18 10:07 PM",
          "commitName": "781437c219dc3422797a32dc7ba72cd4f5ee38e2",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "29/08/18 8:21 PM",
          "commitNameOld": "582cb10ec74ed5666946a3769002ceb80ba660cb",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  private void initLogging(String confDir) {\n+  public static void initLogging() {\n+    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n+    if (confDir \u003d\u003d null) {\n+      throw new RuntimeException(\"System property \u0027\" +\n+          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n+    }\n     if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n       System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n       boolean fromClasspath \u003d true;\n       File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n       if (log4jConf.exists()) {\n         PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n         fromClasspath \u003d false;\n       } else {\n         ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n         URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n         if (log4jUrl !\u003d null) {\n           PropertyConfigurator.configure(log4jUrl);\n         }\n       }\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n       LOG.debug(\"KMS log starting\");\n       if (fromClasspath) {\n         LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n         LOG.warn(\"Logging with INFO level to standard output\");\n       }\n-    } else {\n-      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void initLogging() {\n    String confDir \u003d System.getProperty(KMS_CONFIG_DIR);\n    if (confDir \u003d\u003d null) {\n      throw new RuntimeException(\"System property \u0027\" +\n          KMSConfiguration.KMS_CONFIG_DIR + \"\u0027 not defined\");\n    }\n    if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n      System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n      boolean fromClasspath \u003d true;\n      File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n      if (log4jConf.exists()) {\n        PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n        fromClasspath \u003d false;\n      } else {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n        if (log4jUrl !\u003d null) {\n          PropertyConfigurator.configure(log4jUrl);\n        }\n      }\n      LOG.debug(\"KMS log starting\");\n      if (fromClasspath) {\n        LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n        LOG.warn(\"Logging with INFO level to standard output\");\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSConfiguration.java",
          "extendedDetails": {
            "oldValue": "[confDir-String]",
            "newValue": "[]"
          }
        }
      ]
    },
    "17d4fbbf0af9b93de9502afb274e91533140d1c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10433. Key Management Server based on KeyProvider API. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1592637 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/14 2:43 PM",
      "commitName": "17d4fbbf0af9b93de9502afb274e91533140d1c6",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,25 @@\n+  private void initLogging(String confDir) {\n+    if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n+      System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n+      boolean fromClasspath \u003d true;\n+      File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n+      if (log4jConf.exists()) {\n+        PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n+        fromClasspath \u003d false;\n+      } else {\n+        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n+        URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n+        if (log4jUrl !\u003d null) {\n+          PropertyConfigurator.configure(log4jUrl);\n+        }\n+      }\n+      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n+      LOG.debug(\"KMS log starting\");\n+      if (fromClasspath) {\n+        LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n+        LOG.warn(\"Logging with INFO level to standard output\");\n+      }\n+    } else {\n+      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initLogging(String confDir) {\n    if (System.getProperty(\"log4j.configuration\") \u003d\u003d null) {\n      System.setProperty(\"log4j.defaultInitOverride\", \"true\");\n      boolean fromClasspath \u003d true;\n      File log4jConf \u003d new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\n      if (log4jConf.exists()) {\n        PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\n        fromClasspath \u003d false;\n      } else {\n        ClassLoader cl \u003d Thread.currentThread().getContextClassLoader();\n        URL log4jUrl \u003d cl.getResource(LOG4J_PROPERTIES);\n        if (log4jUrl !\u003d null) {\n          PropertyConfigurator.configure(log4jUrl);\n        }\n      }\n      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n      LOG.debug(\"KMS log starting\");\n      if (fromClasspath) {\n        LOG.warn(\"Log4j configuration file \u0027{}\u0027 not found\", LOG4J_PROPERTIES);\n        LOG.warn(\"Logging with INFO level to standard output\");\n      }\n    } else {\n      LOG \u003d LoggerFactory.getLogger(KMSWebApp.class);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMSWebApp.java"
    }
  }
}