{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultRequestInterceptor.java",
  "functionName": "setRMClient",
  "functionId": "setRMClient___rmClient-ApplicationMasterProtocol(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
  "functionStartLine": 198,
  "functionEndLine": 240,
  "numCommitsSeen": 11,
  "timeTaken": 3346,
  "changeHistory": [
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "99e5dd68d0f44109c169d74824fa45a7396a5990",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
    "55ae1439233e8585d624b2872e1e4753ef63eebb"
  ],
  "changeHistoryShort": {
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ybodychange",
    "99e5dd68d0f44109c169d74824fa45a7396a5990": "Ybodychange",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Ymultichange(Ybodychange,Yparametermetachange)",
    "55ae1439233e8585d624b2872e1e4753ef63eebb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "22/06/16 7:04 PM",
      "commitNameOld": "99e5dd68d0f44109c169d74824fa45a7396a5990",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 38.7,
      "commitsBetweenForRepo": 383,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   public void setRMClient(final ApplicationMasterProtocol rmClient) {\n-    if (rmClient instanceof DistributedSchedulerProtocol) {\n-      this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n+    if (rmClient instanceof DistributedSchedulingAMProtocol) {\n+      this.rmClient \u003d (DistributedSchedulingAMProtocol)rmClient;\n     } else {\n-      this.rmClient \u003d new DistributedSchedulerProtocol() {\n+      this.rmClient \u003d new DistributedSchedulingAMProtocol() {\n         @Override\n         public RegisterApplicationMasterResponse registerApplicationMaster\n             (RegisterApplicationMasterRequest request) throws YarnException,\n             IOException {\n           return rmClient.registerApplicationMaster(request);\n         }\n \n         @Override\n         public FinishApplicationMasterResponse finishApplicationMaster\n             (FinishApplicationMasterRequest request) throws YarnException,\n             IOException {\n           return rmClient.finishApplicationMaster(request);\n         }\n \n         @Override\n         public AllocateResponse allocate(AllocateRequest request) throws\n             YarnException, IOException {\n           return rmClient.allocate(request);\n         }\n \n         @Override\n-        public DistSchedRegisterResponse\n+        public RegisterDistributedSchedulingAMResponse\n         registerApplicationMasterForDistributedScheduling\n             (RegisterApplicationMasterRequest request) throws YarnException,\n             IOException {\n           throw new IOException(\"Not Supported !!\");\n         }\n \n         @Override\n-        public DistSchedAllocateResponse allocateForDistributedScheduling(\n-            DistSchedAllocateRequest request)\n+        public DistributedSchedulingAllocateResponse\n+            allocateForDistributedScheduling(\n+            DistributedSchedulingAllocateRequest request)\n                 throws YarnException, IOException {\n           throw new IOException(\"Not Supported !!\");\n         }\n       };\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setRMClient(final ApplicationMasterProtocol rmClient) {\n    if (rmClient instanceof DistributedSchedulingAMProtocol) {\n      this.rmClient \u003d (DistributedSchedulingAMProtocol)rmClient;\n    } else {\n      this.rmClient \u003d new DistributedSchedulingAMProtocol() {\n        @Override\n        public RegisterApplicationMasterResponse registerApplicationMaster\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.registerApplicationMaster(request);\n        }\n\n        @Override\n        public FinishApplicationMasterResponse finishApplicationMaster\n            (FinishApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.finishApplicationMaster(request);\n        }\n\n        @Override\n        public AllocateResponse allocate(AllocateRequest request) throws\n            YarnException, IOException {\n          return rmClient.allocate(request);\n        }\n\n        @Override\n        public RegisterDistributedSchedulingAMResponse\n        registerApplicationMasterForDistributedScheduling\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n\n        @Override\n        public DistributedSchedulingAllocateResponse\n            allocateForDistributedScheduling(\n            DistributedSchedulingAllocateRequest request)\n                throws YarnException, IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n      };\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
      "extendedDetails": {}
    },
    "99e5dd68d0f44109c169d74824fa45a7396a5990": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5171. Extend DistributedSchedulerProtocol to notify RM of containers allocated by the Node. (Inigo Goiri via asuresh)\n",
      "commitDate": "22/06/16 7:04 PM",
      "commitName": "99e5dd68d0f44109c169d74824fa45a7396a5990",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 58.85,
      "commitsBetweenForRepo": 386,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public void setRMClient(final ApplicationMasterProtocol rmClient) {\n     if (rmClient instanceof DistributedSchedulerProtocol) {\n       this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n     } else {\n       this.rmClient \u003d new DistributedSchedulerProtocol() {\n         @Override\n         public RegisterApplicationMasterResponse registerApplicationMaster\n             (RegisterApplicationMasterRequest request) throws YarnException,\n             IOException {\n           return rmClient.registerApplicationMaster(request);\n         }\n \n         @Override\n         public FinishApplicationMasterResponse finishApplicationMaster\n             (FinishApplicationMasterRequest request) throws YarnException,\n             IOException {\n           return rmClient.finishApplicationMaster(request);\n         }\n \n         @Override\n         public AllocateResponse allocate(AllocateRequest request) throws\n             YarnException, IOException {\n           return rmClient.allocate(request);\n         }\n \n         @Override\n         public DistSchedRegisterResponse\n         registerApplicationMasterForDistributedScheduling\n             (RegisterApplicationMasterRequest request) throws YarnException,\n             IOException {\n           throw new IOException(\"Not Supported !!\");\n         }\n \n         @Override\n-        public DistSchedAllocateResponse\n-        allocateForDistributedScheduling(AllocateRequest request) throws\n-            YarnException, IOException {\n+        public DistSchedAllocateResponse allocateForDistributedScheduling(\n+            DistSchedAllocateRequest request)\n+                throws YarnException, IOException {\n           throw new IOException(\"Not Supported !!\");\n         }\n       };\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setRMClient(final ApplicationMasterProtocol rmClient) {\n    if (rmClient instanceof DistributedSchedulerProtocol) {\n      this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n    } else {\n      this.rmClient \u003d new DistributedSchedulerProtocol() {\n        @Override\n        public RegisterApplicationMasterResponse registerApplicationMaster\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.registerApplicationMaster(request);\n        }\n\n        @Override\n        public FinishApplicationMasterResponse finishApplicationMaster\n            (FinishApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.finishApplicationMaster(request);\n        }\n\n        @Override\n        public AllocateResponse allocate(AllocateRequest request) throws\n            YarnException, IOException {\n          return rmClient.allocate(request);\n        }\n\n        @Override\n        public DistSchedRegisterResponse\n        registerApplicationMasterForDistributedScheduling\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n\n        @Override\n        public DistSchedAllocateResponse allocateForDistributedScheduling(\n            DistSchedAllocateRequest request)\n                throws YarnException, IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n      };\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
      "extendedDetails": {}
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
          "commitDate": "24/04/16 10:38 PM",
          "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "27/03/16 8:22 PM",
          "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 28.09,
          "commitsBetweenForRepo": 183,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,42 @@\n-  public void setRMClient(ApplicationMasterProtocol rmClient) {\n-    this.rmClient \u003d rmClient;\n+  public void setRMClient(final ApplicationMasterProtocol rmClient) {\n+    if (rmClient instanceof DistributedSchedulerProtocol) {\n+      this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n+    } else {\n+      this.rmClient \u003d new DistributedSchedulerProtocol() {\n+        @Override\n+        public RegisterApplicationMasterResponse registerApplicationMaster\n+            (RegisterApplicationMasterRequest request) throws YarnException,\n+            IOException {\n+          return rmClient.registerApplicationMaster(request);\n+        }\n+\n+        @Override\n+        public FinishApplicationMasterResponse finishApplicationMaster\n+            (FinishApplicationMasterRequest request) throws YarnException,\n+            IOException {\n+          return rmClient.finishApplicationMaster(request);\n+        }\n+\n+        @Override\n+        public AllocateResponse allocate(AllocateRequest request) throws\n+            YarnException, IOException {\n+          return rmClient.allocate(request);\n+        }\n+\n+        @Override\n+        public DistSchedRegisterResponse\n+        registerApplicationMasterForDistributedScheduling\n+            (RegisterApplicationMasterRequest request) throws YarnException,\n+            IOException {\n+          throw new IOException(\"Not Supported !!\");\n+        }\n+\n+        @Override\n+        public DistSchedAllocateResponse\n+        allocateForDistributedScheduling(AllocateRequest request) throws\n+            YarnException, IOException {\n+          throw new IOException(\"Not Supported !!\");\n+        }\n+      };\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setRMClient(final ApplicationMasterProtocol rmClient) {\n    if (rmClient instanceof DistributedSchedulerProtocol) {\n      this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n    } else {\n      this.rmClient \u003d new DistributedSchedulerProtocol() {\n        @Override\n        public RegisterApplicationMasterResponse registerApplicationMaster\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.registerApplicationMaster(request);\n        }\n\n        @Override\n        public FinishApplicationMasterResponse finishApplicationMaster\n            (FinishApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.finishApplicationMaster(request);\n        }\n\n        @Override\n        public AllocateResponse allocate(AllocateRequest request) throws\n            YarnException, IOException {\n          return rmClient.allocate(request);\n        }\n\n        @Override\n        public DistSchedRegisterResponse\n        registerApplicationMasterForDistributedScheduling\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n\n        @Override\n        public DistSchedAllocateResponse\n        allocateForDistributedScheduling(AllocateRequest request) throws\n            YarnException, IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n      };\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
          "commitDate": "24/04/16 10:38 PM",
          "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "27/03/16 8:22 PM",
          "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 28.09,
          "commitsBetweenForRepo": 183,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,3 +1,42 @@\n-  public void setRMClient(ApplicationMasterProtocol rmClient) {\n-    this.rmClient \u003d rmClient;\n+  public void setRMClient(final ApplicationMasterProtocol rmClient) {\n+    if (rmClient instanceof DistributedSchedulerProtocol) {\n+      this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n+    } else {\n+      this.rmClient \u003d new DistributedSchedulerProtocol() {\n+        @Override\n+        public RegisterApplicationMasterResponse registerApplicationMaster\n+            (RegisterApplicationMasterRequest request) throws YarnException,\n+            IOException {\n+          return rmClient.registerApplicationMaster(request);\n+        }\n+\n+        @Override\n+        public FinishApplicationMasterResponse finishApplicationMaster\n+            (FinishApplicationMasterRequest request) throws YarnException,\n+            IOException {\n+          return rmClient.finishApplicationMaster(request);\n+        }\n+\n+        @Override\n+        public AllocateResponse allocate(AllocateRequest request) throws\n+            YarnException, IOException {\n+          return rmClient.allocate(request);\n+        }\n+\n+        @Override\n+        public DistSchedRegisterResponse\n+        registerApplicationMasterForDistributedScheduling\n+            (RegisterApplicationMasterRequest request) throws YarnException,\n+            IOException {\n+          throw new IOException(\"Not Supported !!\");\n+        }\n+\n+        @Override\n+        public DistSchedAllocateResponse\n+        allocateForDistributedScheduling(AllocateRequest request) throws\n+            YarnException, IOException {\n+          throw new IOException(\"Not Supported !!\");\n+        }\n+      };\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setRMClient(final ApplicationMasterProtocol rmClient) {\n    if (rmClient instanceof DistributedSchedulerProtocol) {\n      this.rmClient \u003d (DistributedSchedulerProtocol)rmClient;\n    } else {\n      this.rmClient \u003d new DistributedSchedulerProtocol() {\n        @Override\n        public RegisterApplicationMasterResponse registerApplicationMaster\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.registerApplicationMaster(request);\n        }\n\n        @Override\n        public FinishApplicationMasterResponse finishApplicationMaster\n            (FinishApplicationMasterRequest request) throws YarnException,\n            IOException {\n          return rmClient.finishApplicationMaster(request);\n        }\n\n        @Override\n        public AllocateResponse allocate(AllocateRequest request) throws\n            YarnException, IOException {\n          return rmClient.allocate(request);\n        }\n\n        @Override\n        public DistSchedRegisterResponse\n        registerApplicationMasterForDistributedScheduling\n            (RegisterApplicationMasterRequest request) throws YarnException,\n            IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n\n        @Override\n        public DistSchedAllocateResponse\n        allocateForDistributedScheduling(AllocateRequest request) throws\n            YarnException, IOException {\n          throw new IOException(\"Not Supported !!\");\n        }\n      };\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
          "extendedDetails": {
            "oldValue": "[rmClient-ApplicationMasterProtocol]",
            "newValue": "[rmClient-ApplicationMasterProtocol(modifiers-final)]"
          }
        }
      ]
    },
    "55ae1439233e8585d624b2872e1e4753ef63eebb": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4117. End to end unit test with mini YARN cluster for AMRMProxy Service. Contributed by Giovanni Matteo Fumarola\n",
      "commitDate": "27/03/16 8:22 PM",
      "commitName": "55ae1439233e8585d624b2872e1e4753ef63eebb",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,3 @@\n+  public void setRMClient(ApplicationMasterProtocol rmClient) {\n+    this.rmClient \u003d rmClient;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setRMClient(ApplicationMasterProtocol rmClient) {\n    this.rmClient \u003d rmClient;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java"
    }
  }
}