{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BootstrapStandby.java",
  "functionName": "parseConfAndFindOtherNN",
  "functionId": "parseConfAndFindOtherNN",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java",
  "functionStartLine": 412,
  "functionEndLine": 454,
  "numCommitsSeen": 35,
  "timeTaken": 2442,
  "changeHistory": [
    "8fc0d04517912766a3102f3e611f7d0fabd2f815",
    "49dfad942970459297f72632ed8dfd353e0c86de",
    "045dc880e13271737b3cf316296e92fb95806663",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c",
    "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7"
  ],
  "changeHistoryShort": {
    "8fc0d04517912766a3102f3e611f7d0fabd2f815": "Ybodychange",
    "49dfad942970459297f72632ed8dfd353e0c86de": "Ybodychange",
    "045dc880e13271737b3cf316296e92fb95806663": "Ybodychange",
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": "Ybodychange",
    "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8fc0d04517912766a3102f3e611f7d0fabd2f815": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14001. [PROVIDED Storage] bootstrapStandby should manage the InMemoryAliasMap. Contributed by Virajith Jalaparti.\n",
      "commitDate": "07/12/18 6:30 PM",
      "commitName": "8fc0d04517912766a3102f3e611f7d0fabd2f815",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 92.2,
      "commitsBetweenForRepo": 832,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   private void parseConfAndFindOtherNN() throws IOException {\n     Configuration conf \u003d getConf();\n     nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n \n     if (!HAUtil.isHAEnabled(conf, nsId)) {\n       throw new HadoopIllegalArgumentException(\n           \"HA is not enabled for this namenode.\");\n     }\n     nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n     NameNode.initializeGenericKeys(conf, nsId, nnId);\n \n     if (!HAUtil.usesSharedEditsDir(conf)) {\n       throw new HadoopIllegalArgumentException(\n         \"Shared edits storage is not enabled for this namenode.\");\n     }\n \n \n     remoteNNs \u003d RemoteNameNodeInfo.getRemoteNameNodes(conf, nsId);\n     // validate the configured NNs\n     List\u003cRemoteNameNodeInfo\u003e remove \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e(remoteNNs.size());\n     for (RemoteNameNodeInfo info : remoteNNs) {\n       InetSocketAddress address \u003d info.getIpcAddress();\n       LOG.info(\"Found nn: \" + info.getNameNodeID() + \", ipc: \" + info.getIpcAddress());\n       if (address.getPort() \u003d\u003d 0 || address.getAddress().isAnyLocalAddress()) {\n         LOG.error(\"Could not determine valid IPC address for other NameNode (\"\n             + info.getNameNodeID() + \") , got: \" + address);\n         remove.add(info);\n       }\n     }\n \n     // remove any invalid nns\n     remoteNNs.removeAll(remove);\n \n     // make sure we have at least one left to read\n     Preconditions.checkArgument(!remoteNNs.isEmpty(), \"Could not find any valid namenodes!\");\n \n     dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n         conf, false);\n     sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n+\n+    parseProvidedConfigurations(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseConfAndFindOtherNN() throws IOException {\n    Configuration conf \u003d getConf();\n    nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n\n    if (!HAUtil.isHAEnabled(conf, nsId)) {\n      throw new HadoopIllegalArgumentException(\n          \"HA is not enabled for this namenode.\");\n    }\n    nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n    NameNode.initializeGenericKeys(conf, nsId, nnId);\n\n    if (!HAUtil.usesSharedEditsDir(conf)) {\n      throw new HadoopIllegalArgumentException(\n        \"Shared edits storage is not enabled for this namenode.\");\n    }\n\n\n    remoteNNs \u003d RemoteNameNodeInfo.getRemoteNameNodes(conf, nsId);\n    // validate the configured NNs\n    List\u003cRemoteNameNodeInfo\u003e remove \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e(remoteNNs.size());\n    for (RemoteNameNodeInfo info : remoteNNs) {\n      InetSocketAddress address \u003d info.getIpcAddress();\n      LOG.info(\"Found nn: \" + info.getNameNodeID() + \", ipc: \" + info.getIpcAddress());\n      if (address.getPort() \u003d\u003d 0 || address.getAddress().isAnyLocalAddress()) {\n        LOG.error(\"Could not determine valid IPC address for other NameNode (\"\n            + info.getNameNodeID() + \") , got: \" + address);\n        remove.add(info);\n      }\n    }\n\n    // remove any invalid nns\n    remoteNNs.removeAll(remove);\n\n    // make sure we have at least one left to read\n    Preconditions.checkArgument(!remoteNNs.isEmpty(), \"Could not find any valid namenodes!\");\n\n    dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n        conf, false);\n    sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n\n    parseProvidedConfigurations(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java",
      "extendedDetails": {}
    },
    "49dfad942970459297f72632ed8dfd353e0c86de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
      "commitDate": "23/06/15 5:26 PM",
      "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "07/05/15 10:55 PM",
      "commitNameOld": "e5e492a9631ff78302fccedcb64d7b64b9407991",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 46.77,
      "commitsBetweenForRepo": 402,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,41 @@\n   private void parseConfAndFindOtherNN() throws IOException {\n     Configuration conf \u003d getConf();\n     nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n \n     if (!HAUtil.isHAEnabled(conf, nsId)) {\n       throw new HadoopIllegalArgumentException(\n           \"HA is not enabled for this namenode.\");\n     }\n     nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n     NameNode.initializeGenericKeys(conf, nsId, nnId);\n \n     if (!HAUtil.usesSharedEditsDir(conf)) {\n       throw new HadoopIllegalArgumentException(\n         \"Shared edits storage is not enabled for this namenode.\");\n     }\n-    \n-    Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n-    otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n-    otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n-    Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n-        !otherIpcAddr.getAddress().isAnyLocalAddress(),\n-        \"Could not determine valid IPC address for other NameNode (%s)\" +\n-        \", got: %s\", otherNNId, otherIpcAddr);\n \n-    final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n-    otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(\n-        otherIpcAddr.getHostName(), otherNode, scheme).toURL();\n+\n+    remoteNNs \u003d RemoteNameNodeInfo.getRemoteNameNodes(conf, nsId);\n+    // validate the configured NNs\n+    List\u003cRemoteNameNodeInfo\u003e remove \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e(remoteNNs.size());\n+    for (RemoteNameNodeInfo info : remoteNNs) {\n+      InetSocketAddress address \u003d info.getIpcAddress();\n+      LOG.info(\"Found nn: \" + info.getNameNodeID() + \", ipc: \" + info.getIpcAddress());\n+      if (address.getPort() \u003d\u003d 0 || address.getAddress().isAnyLocalAddress()) {\n+        LOG.error(\"Could not determine valid IPC address for other NameNode (\"\n+            + info.getNameNodeID() + \") , got: \" + address);\n+        remove.add(info);\n+      }\n+    }\n+\n+    // remove any invalid nns\n+    remoteNNs.removeAll(remove);\n+\n+    // make sure we have at least one left to read\n+    Preconditions.checkArgument(!remoteNNs.isEmpty(), \"Could not find any valid namenodes!\");\n \n     dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n         conf, false);\n     sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseConfAndFindOtherNN() throws IOException {\n    Configuration conf \u003d getConf();\n    nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n\n    if (!HAUtil.isHAEnabled(conf, nsId)) {\n      throw new HadoopIllegalArgumentException(\n          \"HA is not enabled for this namenode.\");\n    }\n    nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n    NameNode.initializeGenericKeys(conf, nsId, nnId);\n\n    if (!HAUtil.usesSharedEditsDir(conf)) {\n      throw new HadoopIllegalArgumentException(\n        \"Shared edits storage is not enabled for this namenode.\");\n    }\n\n\n    remoteNNs \u003d RemoteNameNodeInfo.getRemoteNameNodes(conf, nsId);\n    // validate the configured NNs\n    List\u003cRemoteNameNodeInfo\u003e remove \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e(remoteNNs.size());\n    for (RemoteNameNodeInfo info : remoteNNs) {\n      InetSocketAddress address \u003d info.getIpcAddress();\n      LOG.info(\"Found nn: \" + info.getNameNodeID() + \", ipc: \" + info.getIpcAddress());\n      if (address.getPort() \u003d\u003d 0 || address.getAddress().isAnyLocalAddress()) {\n        LOG.error(\"Could not determine valid IPC address for other NameNode (\"\n            + info.getNameNodeID() + \") , got: \" + address);\n        remove.add(info);\n      }\n    }\n\n    // remove any invalid nns\n    remoteNNs.removeAll(remove);\n\n    // make sure we have at least one left to read\n    Preconditions.checkArgument(!remoteNNs.isEmpty(), \"Could not find any valid namenodes!\");\n\n    dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n        conf, false);\n    sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java",
      "extendedDetails": {}
    },
    "045dc880e13271737b3cf316296e92fb95806663": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5312. Generate HTTP/HTTPS URL in DFSUtil#getInfoServer() based on the configured http policy. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 10:01 AM",
      "commitName": "045dc880e13271737b3cf316296e92fb95806663",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "15/08/13 10:19 AM",
      "commitNameOld": "8172215e5601c3bb03fb5c0a0d88768142ea5087",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 113.03,
      "commitsBetweenForRepo": 697,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,33 @@\n   private void parseConfAndFindOtherNN() throws IOException {\n     Configuration conf \u003d getConf();\n     nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n \n     if (!HAUtil.isHAEnabled(conf, nsId)) {\n       throw new HadoopIllegalArgumentException(\n           \"HA is not enabled for this namenode.\");\n     }\n     nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n     NameNode.initializeGenericKeys(conf, nsId, nnId);\n \n     if (!HAUtil.usesSharedEditsDir(conf)) {\n       throw new HadoopIllegalArgumentException(\n         \"Shared edits storage is not enabled for this namenode.\");\n     }\n     \n     Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n     otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n     otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n     Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n         !otherIpcAddr.getAddress().isAnyLocalAddress(),\n         \"Could not determine valid IPC address for other NameNode (%s)\" +\n         \", got: %s\", otherNNId, otherIpcAddr);\n \n-    otherHttpAddr \u003d DFSUtil.getInfoServer(null, otherNode, false);\n-    otherHttpAddr \u003d DFSUtil.substituteForWildcardAddress(otherHttpAddr,\n-        otherIpcAddr.getHostName());\n-    \n-    \n+    final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n+    otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(\n+        otherIpcAddr.getHostName(), otherNode, scheme).toURL();\n+\n     dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n         conf, false);\n     sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseConfAndFindOtherNN() throws IOException {\n    Configuration conf \u003d getConf();\n    nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n\n    if (!HAUtil.isHAEnabled(conf, nsId)) {\n      throw new HadoopIllegalArgumentException(\n          \"HA is not enabled for this namenode.\");\n    }\n    nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n    NameNode.initializeGenericKeys(conf, nsId, nnId);\n\n    if (!HAUtil.usesSharedEditsDir(conf)) {\n      throw new HadoopIllegalArgumentException(\n        \"Shared edits storage is not enabled for this namenode.\");\n    }\n    \n    Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n    otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n    otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n    Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n        !otherIpcAddr.getAddress().isAnyLocalAddress(),\n        \"Could not determine valid IPC address for other NameNode (%s)\" +\n        \", got: %s\", otherNNId, otherIpcAddr);\n\n    final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n    otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(\n        otherIpcAddr.getHostName(), otherNode, scheme).toURL();\n\n    dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n        conf, false);\n    sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java",
      "extendedDetails": {}
    },
    "5dbbe0e0a5d31689d3425e490865f95057dc051c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2617. Replaced Kerberized SSL for image transfer and fsck with SPNEGO-based solution. Contributed by Jakob Homan, Alejandro Abdelnur, and Aaron T. Myers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/12 2:58 PM",
      "commitName": "5dbbe0e0a5d31689d3425e490865f95057dc051c",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "16/04/12 2:51 PM",
      "commitNameOld": "574f99bd6b596c39bd1accc7a134de3f5ad96bd2",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 18.0,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void parseConfAndFindOtherNN() throws IOException {\n     Configuration conf \u003d getConf();\n     nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n \n     if (!HAUtil.isHAEnabled(conf, nsId)) {\n       throw new HadoopIllegalArgumentException(\n           \"HA is not enabled for this namenode.\");\n     }\n     nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n     NameNode.initializeGenericKeys(conf, nsId, nnId);\n \n     if (!HAUtil.usesSharedEditsDir(conf)) {\n       throw new HadoopIllegalArgumentException(\n         \"Shared edits storage is not enabled for this namenode.\");\n     }\n     \n     Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n     otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n     otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n     Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n         !otherIpcAddr.getAddress().isAnyLocalAddress(),\n         \"Could not determine valid IPC address for other NameNode (%s)\" +\n         \", got: %s\", otherNNId, otherIpcAddr);\n \n-    otherHttpAddr \u003d DFSUtil.getInfoServer(null, otherNode, true);\n+    otherHttpAddr \u003d DFSUtil.getInfoServer(null, otherNode, false);\n     otherHttpAddr \u003d DFSUtil.substituteForWildcardAddress(otherHttpAddr,\n         otherIpcAddr.getHostName());\n     \n     \n     dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n     editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n         conf, false);\n     sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseConfAndFindOtherNN() throws IOException {\n    Configuration conf \u003d getConf();\n    nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n\n    if (!HAUtil.isHAEnabled(conf, nsId)) {\n      throw new HadoopIllegalArgumentException(\n          \"HA is not enabled for this namenode.\");\n    }\n    nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n    NameNode.initializeGenericKeys(conf, nsId, nnId);\n\n    if (!HAUtil.usesSharedEditsDir(conf)) {\n      throw new HadoopIllegalArgumentException(\n        \"Shared edits storage is not enabled for this namenode.\");\n    }\n    \n    Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n    otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n    otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n    Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n        !otherIpcAddr.getAddress().isAnyLocalAddress(),\n        \"Could not determine valid IPC address for other NameNode (%s)\" +\n        \", got: %s\", otherNNId, otherIpcAddr);\n\n    otherHttpAddr \u003d DFSUtil.getInfoServer(null, otherNode, false);\n    otherHttpAddr \u003d DFSUtil.substituteForWildcardAddress(otherHttpAddr,\n        otherIpcAddr.getHostName());\n    \n    \n    dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n        conf, false);\n    sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java",
      "extendedDetails": {}
    },
    "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2731. Add command to bootstrap the Standby Node\u0027s name directories from the Active NameNode. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1299807 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/12 12:41 PM",
      "commitName": "1a75ec82885e45baf4d5cd56d6c738d8e68d8bc7",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,34 @@\n+  private void parseConfAndFindOtherNN() throws IOException {\n+    Configuration conf \u003d getConf();\n+    nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n+\n+    if (!HAUtil.isHAEnabled(conf, nsId)) {\n+      throw new HadoopIllegalArgumentException(\n+          \"HA is not enabled for this namenode.\");\n+    }\n+    nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n+    NameNode.initializeGenericKeys(conf, nsId, nnId);\n+\n+    if (!HAUtil.usesSharedEditsDir(conf)) {\n+      throw new HadoopIllegalArgumentException(\n+        \"Shared edits storage is not enabled for this namenode.\");\n+    }\n+    \n+    Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n+    otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n+    otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n+    Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n+        !otherIpcAddr.getAddress().isAnyLocalAddress(),\n+        \"Could not determine valid IPC address for other NameNode (%s)\" +\n+        \", got: %s\", otherNNId, otherIpcAddr);\n+\n+    otherHttpAddr \u003d DFSUtil.getInfoServer(null, otherNode, true);\n+    otherHttpAddr \u003d DFSUtil.substituteForWildcardAddress(otherHttpAddr,\n+        otherIpcAddr.getHostName());\n+    \n+    \n+    dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n+    editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n+        conf, false);\n+    sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void parseConfAndFindOtherNN() throws IOException {\n    Configuration conf \u003d getConf();\n    nsId \u003d DFSUtil.getNamenodeNameServiceId(conf);\n\n    if (!HAUtil.isHAEnabled(conf, nsId)) {\n      throw new HadoopIllegalArgumentException(\n          \"HA is not enabled for this namenode.\");\n    }\n    nnId \u003d HAUtil.getNameNodeId(conf, nsId);\n    NameNode.initializeGenericKeys(conf, nsId, nnId);\n\n    if (!HAUtil.usesSharedEditsDir(conf)) {\n      throw new HadoopIllegalArgumentException(\n        \"Shared edits storage is not enabled for this namenode.\");\n    }\n    \n    Configuration otherNode \u003d HAUtil.getConfForOtherNode(conf);\n    otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n    otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n    Preconditions.checkArgument(otherIpcAddr.getPort() !\u003d 0 \u0026\u0026\n        !otherIpcAddr.getAddress().isAnyLocalAddress(),\n        \"Could not determine valid IPC address for other NameNode (%s)\" +\n        \", got: %s\", otherNNId, otherIpcAddr);\n\n    otherHttpAddr \u003d DFSUtil.getInfoServer(null, otherNode, true);\n    otherHttpAddr \u003d DFSUtil.substituteForWildcardAddress(otherHttpAddr,\n        otherIpcAddr.getHostName());\n    \n    \n    dirsToFormat \u003d FSNamesystem.getNamespaceDirs(conf);\n    editUrisToFormat \u003d FSNamesystem.getNamespaceEditsDirs(\n        conf, false);\n    sharedEditsUris \u003d FSNamesystem.getSharedEditsDirs(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/BootstrapStandby.java"
    }
  }
}