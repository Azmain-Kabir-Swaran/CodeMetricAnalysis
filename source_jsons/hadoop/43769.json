{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceUtils.java",
  "functionName": "findContainingJar",
  "functionId": "findContainingJar___my_class-Class",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
  "functionStartLine": 117,
  "functionEndLine": 147,
  "numCommitsSeen": 26,
  "timeTaken": 4352,
  "changeHistory": [
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "db96e8aa2173c6aab607ea838ab906280ee74b1b",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec"
  ],
  "changeHistoryShort": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Yfilerename",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ymovefromfile",
    "db96e8aa2173c6aab607ea838ab906280ee74b1b": "Ybodychange",
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static File findContainingJar(Class my_class) throws IOException {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    if (loader \u003d\u003d null) {\n      throw new IOException(\n          \"Class \" + my_class + \" does not have a classloader!\");\n    }\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n    for (; urlEnumeration.hasMoreElements(); ) {\n      URL url \u003d urlEnumeration.nextElement();\n      if (\"jar\".equals(url.getProtocol())) {\n        String toReturn \u003d url.getPath();\n        if (toReturn.startsWith(\"file:\")) {\n          toReturn \u003d toReturn.substring(\"file:\".length());\n        }\n        // URLDecoder is a misnamed class, since it actually decodes\n        // x-www-form-urlencoded MIME type rather than actual\n        // URL encoding (which the file path has). Therefore it would\n        // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n        // either unencoded or encoded as \"%20\"). Replace +s first, so\n        // that they are kept sacred during the decoding process.\n        toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n        toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n        String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n        return new File(jarFilePath);\n      } else {\n        log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceUtils.java"
      }
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static File findContainingJar(Class my_class) throws IOException {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    if (loader \u003d\u003d null) {\n      throw new IOException(\n          \"Class \" + my_class + \" does not have a classloader!\");\n    }\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n    for (; urlEnumeration.hasMoreElements(); ) {\n      URL url \u003d urlEnumeration.nextElement();\n      if (\"jar\".equals(url.getProtocol())) {\n        String toReturn \u003d url.getPath();\n        if (toReturn.startsWith(\"file:\")) {\n          toReturn \u003d toReturn.substring(\"file:\".length());\n        }\n        // URLDecoder is a misnamed class, since it actually decodes\n        // x-www-form-urlencoded MIME type rather than actual\n        // URL encoding (which the file path has). Therefore it would\n        // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n        // either unencoded or encoded as \"%20\"). Replace +s first, so\n        // that they are kept sacred during the decoding process.\n        toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n        toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n        String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n        return new File(jarFilePath);\n      } else {\n        log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static File findContainingJar(Class my_class) throws IOException {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    if (loader \u003d\u003d null) {\n      throw new IOException(\n          \"Class \" + my_class + \" does not have a classloader!\");\n    }\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n    for (; urlEnumeration.hasMoreElements(); ) {\n      URL url \u003d urlEnumeration.nextElement();\n      if (\"jar\".equals(url.getProtocol())) {\n        String toReturn \u003d url.getPath();\n        if (toReturn.startsWith(\"file:\")) {\n          toReturn \u003d toReturn.substring(\"file:\".length());\n        }\n        // URLDecoder is a misnamed class, since it actually decodes\n        // x-www-form-urlencoded MIME type rather than actual\n        // URL encoding (which the file path has). Therefore it would\n        // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n        // either unencoded or encoded as \"%20\"). Replace +s first, so\n        // that they are kept sacred during the decoding process.\n        toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n        toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n        String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n        return new File(jarFilePath);\n      } else {\n        log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/SliderUtils.java",
        "oldMethodName": "findContainingJar",
        "newMethodName": "findContainingJar"
      }
    },
    "db96e8aa2173c6aab607ea838ab906280ee74b1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5967. Fix slider core module findbugs warnings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "db96e8aa2173c6aab607ea838ab906280ee74b1b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "7b8fd3abd627d65d5dd441469466ab1ee6348be3",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n   public static File findContainingJar(Class my_class) throws IOException {\n     ClassLoader loader \u003d my_class.getClassLoader();\n     if (loader \u003d\u003d null) {\n       throw new IOException(\n           \"Class \" + my_class + \" does not have a classloader!\");\n     }\n     String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n     Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n-    if (urlEnumeration \u003d\u003d null) {\n-      throw new IOException(\"Unable to find resources for class \" + my_class);\n-    }\n-\n     for (; urlEnumeration.hasMoreElements(); ) {\n       URL url \u003d urlEnumeration.nextElement();\n       if (\"jar\".equals(url.getProtocol())) {\n         String toReturn \u003d url.getPath();\n         if (toReturn.startsWith(\"file:\")) {\n           toReturn \u003d toReturn.substring(\"file:\".length());\n         }\n         // URLDecoder is a misnamed class, since it actually decodes\n         // x-www-form-urlencoded MIME type rather than actual\n         // URL encoding (which the file path has). Therefore it would\n         // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n         // either unencoded or encoded as \"%20\"). Replace +s first, so\n         // that they are kept sacred during the decoding process.\n         toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n         toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n         String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n         return new File(jarFilePath);\n       } else {\n         log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static File findContainingJar(Class my_class) throws IOException {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    if (loader \u003d\u003d null) {\n      throw new IOException(\n          \"Class \" + my_class + \" does not have a classloader!\");\n    }\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n    for (; urlEnumeration.hasMoreElements(); ) {\n      URL url \u003d urlEnumeration.nextElement();\n      if (\"jar\".equals(url.getProtocol())) {\n        String toReturn \u003d url.getPath();\n        if (toReturn.startsWith(\"file:\")) {\n          toReturn \u003d toReturn.substring(\"file:\".length());\n        }\n        // URLDecoder is a misnamed class, since it actually decodes\n        // x-www-form-urlencoded MIME type rather than actual\n        // URL encoding (which the file path has). Therefore it would\n        // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n        // either unencoded or encoded as \"%20\"). Replace +s first, so\n        // that they are kept sacred during the decoding process.\n        toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n        toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n        String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n        return new File(jarFilePath);\n      } else {\n        log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java",
      "extendedDetails": {}
    },
    "f47df51791dfc1b3bda9cbd00f644894ba69c8ec": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5461. Initial code ported from slider-core module. (jianhe)\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f47df51791dfc1b3bda9cbd00f644894ba69c8ec",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,35 @@\n+  public static File findContainingJar(Class my_class) throws IOException {\n+    ClassLoader loader \u003d my_class.getClassLoader();\n+    if (loader \u003d\u003d null) {\n+      throw new IOException(\n+          \"Class \" + my_class + \" does not have a classloader!\");\n+    }\n+    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n+    Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n+    if (urlEnumeration \u003d\u003d null) {\n+      throw new IOException(\"Unable to find resources for class \" + my_class);\n+    }\n+\n+    for (; urlEnumeration.hasMoreElements(); ) {\n+      URL url \u003d urlEnumeration.nextElement();\n+      if (\"jar\".equals(url.getProtocol())) {\n+        String toReturn \u003d url.getPath();\n+        if (toReturn.startsWith(\"file:\")) {\n+          toReturn \u003d toReturn.substring(\"file:\".length());\n+        }\n+        // URLDecoder is a misnamed class, since it actually decodes\n+        // x-www-form-urlencoded MIME type rather than actual\n+        // URL encoding (which the file path has). Therefore it would\n+        // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n+        // either unencoded or encoded as \"%20\"). Replace +s first, so\n+        // that they are kept sacred during the decoding process.\n+        toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n+        toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n+        String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n+        return new File(jarFilePath);\n+      } else {\n+        log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n+      }\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static File findContainingJar(Class my_class) throws IOException {\n    ClassLoader loader \u003d my_class.getClassLoader();\n    if (loader \u003d\u003d null) {\n      throw new IOException(\n          \"Class \" + my_class + \" does not have a classloader!\");\n    }\n    String class_file \u003d my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\n    Enumeration\u003cURL\u003e urlEnumeration \u003d loader.getResources(class_file);\n    if (urlEnumeration \u003d\u003d null) {\n      throw new IOException(\"Unable to find resources for class \" + my_class);\n    }\n\n    for (; urlEnumeration.hasMoreElements(); ) {\n      URL url \u003d urlEnumeration.nextElement();\n      if (\"jar\".equals(url.getProtocol())) {\n        String toReturn \u003d url.getPath();\n        if (toReturn.startsWith(\"file:\")) {\n          toReturn \u003d toReturn.substring(\"file:\".length());\n        }\n        // URLDecoder is a misnamed class, since it actually decodes\n        // x-www-form-urlencoded MIME type rather than actual\n        // URL encoding (which the file path has). Therefore it would\n        // decode +s to \u0027 \u0027s which is incorrect (spaces are actually\n        // either unencoded or encoded as \"%20\"). Replace +s first, so\n        // that they are kept sacred during the decoding process.\n        toReturn \u003d toReturn.replaceAll(\"\\\\+\", \"%2B\");\n        toReturn \u003d URLDecoder.decode(toReturn, \"UTF-8\");\n        String jarFilePath \u003d toReturn.replaceAll(\"!.*$\", \"\");\n        return new File(jarFilePath);\n      } else {\n        log.info(\"could not locate JAR containing {} URL\u003d{}\", my_class, url);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/common/tools/SliderUtils.java"
    }
  }
}