{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerRelaunch.java",
  "functionName": "call",
  "functionId": "call",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
  "functionStartLine": 61,
  "functionEndLine": 163,
  "numCommitsSeen": 12,
  "timeTaken": 4542,
  "changeHistory": [
    "79d3d35398cb5348cfd62e41e3318ec7a337421a",
    "c2288ac45b748b4119442c46147ccc324926c340",
    "f4d280f02b557885cd5e5cf36abc36eb579ccfb4",
    "c467f311d0c7155c09052d93fac12045af925583",
    "456705a07c8b80658950acc99f23086244c6b20f",
    "a196ee9362a1b35e5de20ee519f7c544ab1588e1",
    "46940d92e2b17c627eb17a9d8fc6cec9c3715592",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f"
  ],
  "changeHistoryShort": {
    "79d3d35398cb5348cfd62e41e3318ec7a337421a": "Ybodychange",
    "c2288ac45b748b4119442c46147ccc324926c340": "Ybodychange",
    "f4d280f02b557885cd5e5cf36abc36eb579ccfb4": "Ybodychange",
    "c467f311d0c7155c09052d93fac12045af925583": "Ybodychange",
    "456705a07c8b80658950acc99f23086244c6b20f": "Ybodychange",
    "a196ee9362a1b35e5de20ee519f7c544ab1588e1": "Ybodychange",
    "46940d92e2b17c627eb17a9d8fc6cec9c3715592": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79d3d35398cb5348cfd62e41e3318ec7a337421a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9486. Docker container exited with failure does not get clean up correctly. Contributed by Eric Yang\n",
      "commitDate": "25/04/19 6:21 PM",
      "commitName": "79d3d35398cb5348cfd62e41e3318ec7a337421a",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "14/11/18 12:22 PM",
      "commitNameOld": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 162.21,
      "commitsBetweenForRepo": 1162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,96 +1,103 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       // Clean up container\u0027s previous files for container relaunch.\n       cleanupContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       Path nmPrivateKeystorePath \u003d (container.getCredentials().getSecretKey(\n           AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE) \u003d\u003d null) ? null :\n           getNmPrivateKeystorePath(appIdStr, containerIdStr);\n       Path nmPrivateTruststorePath \u003d (container.getCredentials().getSecretKey(\n           AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE) \u003d\u003d null) ? null :\n           getNmPrivateTruststorePath(appIdStr, containerIdStr);\n-      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n+      try {\n+        // try to locate existing pid file.\n+        pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n+      } catch (IOException e) {\n+        // reset pid file path if it did not exist.\n+        String pidFileSubpath \u003d getPidFileSubpath(appIdStr, containerIdStr);\n+        pidFilePath \u003d dirsHandler.getLocalPathForWrite(pidFileSubpath);\n+      }\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n       List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n       List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n       List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n       List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n           appIdStr);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setNmPrivateKeystorePath(nmPrivateKeystorePath)\n           .setNmPrivateTruststorePath(nmPrivateTruststorePath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setFilecacheDirs(filecacheDirs)\n           .setUserLocalDirs(userLocalDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .setUserFilecacheDirs(userFilecacheDirs)\n           .setApplicationLocalDirs(applicationLocalDirs)\n           .build());\n     } catch (ConfigurationException e) {\n       LOG.error(\"Failed to launch container due to configuration error.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       // Mark the node as unhealthy\n       getContext().getNodeStatusUpdater().reportException(e);\n       return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      // Clean up container\u0027s previous files for container relaunch.\n      cleanupContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      Path nmPrivateKeystorePath \u003d (container.getCredentials().getSecretKey(\n          AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE) \u003d\u003d null) ? null :\n          getNmPrivateKeystorePath(appIdStr, containerIdStr);\n      Path nmPrivateTruststorePath \u003d (container.getCredentials().getSecretKey(\n          AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE) \u003d\u003d null) ? null :\n          getNmPrivateTruststorePath(appIdStr, containerIdStr);\n      try {\n        // try to locate existing pid file.\n        pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n      } catch (IOException e) {\n        // reset pid file path if it did not exist.\n        String pidFileSubpath \u003d getPidFileSubpath(appIdStr, containerIdStr);\n        pidFilePath \u003d dirsHandler.getLocalPathForWrite(pidFileSubpath);\n      }\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n      List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n      List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n          appIdStr);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setNmPrivateKeystorePath(nmPrivateKeystorePath)\n          .setNmPrivateTruststorePath(nmPrivateTruststorePath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setFilecacheDirs(filecacheDirs)\n          .setUserLocalDirs(userLocalDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .setUserFilecacheDirs(userFilecacheDirs)\n          .setApplicationLocalDirs(applicationLocalDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "15/06/18 9:40 AM",
      "commitNameOld": "b272b71095eb8929b60128835ef1078fe946b231",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 123.16,
      "commitsBetweenForRepo": 997,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,96 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       // Clean up container\u0027s previous files for container relaunch.\n       cleanupContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n+      Path nmPrivateKeystorePath \u003d (container.getCredentials().getSecretKey(\n+          AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE) \u003d\u003d null) ? null :\n+          getNmPrivateKeystorePath(appIdStr, containerIdStr);\n+      Path nmPrivateTruststorePath \u003d (container.getCredentials().getSecretKey(\n+          AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE) \u003d\u003d null) ? null :\n+          getNmPrivateTruststorePath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n       List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n       List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n       List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n       List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n           appIdStr);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n+          .setNmPrivateKeystorePath(nmPrivateKeystorePath)\n+          .setNmPrivateTruststorePath(nmPrivateTruststorePath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setFilecacheDirs(filecacheDirs)\n           .setUserLocalDirs(userLocalDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .setUserFilecacheDirs(userFilecacheDirs)\n           .setApplicationLocalDirs(applicationLocalDirs)\n           .build());\n     } catch (ConfigurationException e) {\n       LOG.error(\"Failed to launch container due to configuration error.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       // Mark the node as unhealthy\n       getContext().getNodeStatusUpdater().reportException(e);\n       return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      // Clean up container\u0027s previous files for container relaunch.\n      cleanupContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      Path nmPrivateKeystorePath \u003d (container.getCredentials().getSecretKey(\n          AMSecretKeys.YARN_APPLICATION_AM_KEYSTORE) \u003d\u003d null) ? null :\n          getNmPrivateKeystorePath(appIdStr, containerIdStr);\n      Path nmPrivateTruststorePath \u003d (container.getCredentials().getSecretKey(\n          AMSecretKeys.YARN_APPLICATION_AM_TRUSTSTORE) \u003d\u003d null) ? null :\n          getNmPrivateTruststorePath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n      List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n      List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n          appIdStr);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setNmPrivateKeystorePath(nmPrivateKeystorePath)\n          .setNmPrivateTruststorePath(nmPrivateTruststorePath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setFilecacheDirs(filecacheDirs)\n          .setUserLocalDirs(userLocalDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .setUserFilecacheDirs(userFilecacheDirs)\n          .setApplicationLocalDirs(applicationLocalDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "f4d280f02b557885cd5e5cf36abc36eb579ccfb4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8194.  Fixed reinitialization error for LinuxContainerExecutor.\n            Contributed by Chandni Singh\n",
      "commitDate": "02/05/18 5:07 PM",
      "commitName": "f4d280f02b557885cd5e5cf36abc36eb579ccfb4",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "10/04/18 4:25 PM",
      "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 22.03,
      "commitsBetweenForRepo": 666,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,88 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n-      cleanupPreviousContainerFiles(containerWorkDir);\n+      // Clean up container\u0027s previous files for container relaunch.\n+      cleanupContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n       List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n       List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n       List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n       List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n           appIdStr);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setFilecacheDirs(filecacheDirs)\n           .setUserLocalDirs(userLocalDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .setUserFilecacheDirs(userFilecacheDirs)\n           .setApplicationLocalDirs(applicationLocalDirs)\n           .build());\n     } catch (ConfigurationException e) {\n       LOG.error(\"Failed to launch container due to configuration error.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       // Mark the node as unhealthy\n       getContext().getNodeStatusUpdater().reportException(e);\n       return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      // Clean up container\u0027s previous files for container relaunch.\n      cleanupContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n      List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n      List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n          appIdStr);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setFilecacheDirs(filecacheDirs)\n          .setUserLocalDirs(userLocalDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .setUserFilecacheDirs(userFilecacheDirs)\n          .setApplicationLocalDirs(applicationLocalDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/02/18 11:09 AM",
      "commitNameOld": "456705a07c8b80658950acc99f23086244c6b20f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 62.18,
      "commitsBetweenForRepo": 519,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,87 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       cleanupPreviousContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n       List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n       List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n       List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n       List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n           appIdStr);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n-      ret \u003d launchContainer(new ContainerStartContext.Builder()\n+      ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setFilecacheDirs(filecacheDirs)\n           .setUserLocalDirs(userLocalDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .setUserFilecacheDirs(userFilecacheDirs)\n           .setApplicationLocalDirs(applicationLocalDirs)\n           .build());\n     } catch (ConfigurationException e) {\n       LOG.error(\"Failed to launch container due to configuration error.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       // Mark the node as unhealthy\n       getContext().getNodeStatusUpdater().reportException(e);\n       return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      cleanupPreviousContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n      List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n      List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n          appIdStr);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d relaunchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setFilecacheDirs(filecacheDirs)\n          .setUserLocalDirs(userLocalDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .setUserFilecacheDirs(userFilecacheDirs)\n          .setApplicationLocalDirs(applicationLocalDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "456705a07c8b80658950acc99f23086244c6b20f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7815. Make the YARN mounts added to Docker containers more restrictive. Contributed by Shane Kumpf\n",
      "commitDate": "07/02/18 11:09 AM",
      "commitName": "456705a07c8b80658950acc99f23086244c6b20f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "05/02/18 6:04 PM",
      "commitNameOld": "a196ee9362a1b35e5de20ee519f7c544ab1588e1",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 1.71,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,87 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       cleanupPreviousContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n       List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n       List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n+      List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n+      List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n+          appIdStr);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d launchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setFilecacheDirs(filecacheDirs)\n           .setUserLocalDirs(userLocalDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n+          .setUserFilecacheDirs(userFilecacheDirs)\n+          .setApplicationLocalDirs(applicationLocalDirs)\n           .build());\n     } catch (ConfigurationException e) {\n       LOG.error(\"Failed to launch container due to configuration error.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       // Mark the node as unhealthy\n       getContext().getNodeStatusUpdater().reportException(e);\n       return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      cleanupPreviousContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n      List\u003cString\u003e userFilecacheDirs \u003d getUserFilecacheDirs(localDirs);\n      List\u003cString\u003e applicationLocalDirs \u003d getApplicationLocalDirs(localDirs,\n          appIdStr);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d launchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setFilecacheDirs(filecacheDirs)\n          .setUserLocalDirs(userLocalDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .setUserFilecacheDirs(userFilecacheDirs)\n          .setApplicationLocalDirs(applicationLocalDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "a196ee9362a1b35e5de20ee519f7c544ab1588e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7890. NPE during container relaunch. Contributed by Jason Lowe\n",
      "commitDate": "05/02/18 6:04 PM",
      "commitName": "a196ee9362a1b35e5de20ee519f7c544ab1588e1",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 167.74,
      "commitsBetweenForRepo": 1273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,82 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       cleanupPreviousContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n+      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n+      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d launchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n+          .setFilecacheDirs(filecacheDirs)\n+          .setUserLocalDirs(userLocalDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .build());\n     } catch (ConfigurationException e) {\n       LOG.error(\"Failed to launch container due to configuration error.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       // Mark the node as unhealthy\n       getContext().getNodeStatusUpdater().reportException(e);\n       return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      cleanupPreviousContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n      List\u003cString\u003e filecacheDirs \u003d getNMFilecacheDirs(localDirs);\n      List\u003cString\u003e userLocalDirs \u003d getUserLocalDirs(localDirs);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d launchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setFilecacheDirs(filecacheDirs)\n          .setUserLocalDirs(userLocalDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "46940d92e2b17c627eb17a9d8fc6cec9c3715592": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6302. Fail the node if Linux Container Executor is not configured properly\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "19/04/17 12:23 PM",
      "commitName": "46940d92e2b17c627eb17a9d8fc6cec9c3715592",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 308.89,
      "commitsBetweenForRepo": 2082,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,78 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       cleanupPreviousContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d launchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .build());\n+    } catch (ConfigurationException e) {\n+      LOG.error(\"Failed to launch container due to configuration error.\", e);\n+      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n+          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n+          e.getMessage()));\n+      // Mark the node as unhealthy\n+      getContext().getNodeStatusUpdater().reportException(e);\n+      return ret;\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      cleanupPreviousContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d launchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .build());\n    } catch (ConfigurationException e) {\n      LOG.error(\"Failed to launch container due to configuration error.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      // Mark the node as unhealthy\n      getContext().getNodeStatusUpdater().reportException(e);\n      return ret;\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/04/16 3:39 AM",
      "commitNameOld": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 46.48,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public Integer call() {\n     if (!validateContainerState()) {\n       return 0;\n     }\n \n     ContainerId containerId \u003d container.getContainerId();\n-    String containerIdStr \u003d ConverterUtils.toString(containerId);\n+    String containerIdStr \u003d containerId.toString();\n     int ret \u003d -1;\n     Path containerLogDir;\n     try {\n       Path containerWorkDir \u003d getContainerWorkDir();\n       cleanupPreviousContainerFiles(containerWorkDir);\n \n       containerLogDir \u003d getContainerLogDir();\n \n       Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n \n       String appIdStr \u003d app.getAppId().toString();\n       Path nmPrivateContainerScriptPath \u003d\n           getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n       Path nmPrivateTokensPath \u003d\n           getNmPrivateTokensPath(appIdStr, containerIdStr);\n       pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n \n       LOG.info(\"Relaunch container with \"\n           + \"workDir \u003d \" + containerWorkDir.toString()\n           + \", logDir \u003d \" + containerLogDir.toString()\n           + \", nmPrivateContainerScriptPath \u003d \"\n           + nmPrivateContainerScriptPath.toString()\n           + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n           + \", pidFilePath \u003d \" + pidFilePath.toString());\n \n       List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n       List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n       List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n       List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n \n       if (!dirsHandler.areDisksHealthy()) {\n         ret \u003d ContainerExitStatus.DISKS_FAILED;\n         throw new IOException(\"Most of the disks failed. \"\n             + dirsHandler.getDisksHealthReport(false));\n       }\n \n       ret \u003d launchContainer(new ContainerStartContext.Builder()\n           .setContainer(container)\n           .setLocalizedResources(localResources)\n           .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n           .setNmPrivateTokensPath(nmPrivateTokensPath)\n           .setUser(container.getUser())\n           .setAppId(appIdStr)\n           .setContainerWorkDir(containerWorkDir)\n           .setLocalDirs(localDirs)\n           .setLogDirs(logDirs)\n           .setContainerLocalDirs(containerLocalDirs)\n           .setContainerLogDirs(containerLogDirs)\n           .build());\n     } catch (Throwable e) {\n       LOG.warn(\"Failed to relaunch container.\", e);\n       dispatcher.getEventHandler().handle(new ContainerExitEvent(\n           containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n           e.getMessage()));\n       return ret;\n     } finally {\n       setContainerCompletedStatus(ret);\n     }\n \n     handleContainerExitCode(ret, containerLogDir);\n \n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      cleanupPreviousContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d launchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .build());\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java",
      "extendedDetails": {}
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,70 @@\n+  public Integer call() {\n+    if (!validateContainerState()) {\n+      return 0;\n+    }\n+\n+    ContainerId containerId \u003d container.getContainerId();\n+    String containerIdStr \u003d ConverterUtils.toString(containerId);\n+    int ret \u003d -1;\n+    Path containerLogDir;\n+    try {\n+      Path containerWorkDir \u003d getContainerWorkDir();\n+      cleanupPreviousContainerFiles(containerWorkDir);\n+\n+      containerLogDir \u003d getContainerLogDir();\n+\n+      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n+\n+      String appIdStr \u003d app.getAppId().toString();\n+      Path nmPrivateContainerScriptPath \u003d\n+          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n+      Path nmPrivateTokensPath \u003d\n+          getNmPrivateTokensPath(appIdStr, containerIdStr);\n+      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n+\n+      LOG.info(\"Relaunch container with \"\n+          + \"workDir \u003d \" + containerWorkDir.toString()\n+          + \", logDir \u003d \" + containerLogDir.toString()\n+          + \", nmPrivateContainerScriptPath \u003d \"\n+          + nmPrivateContainerScriptPath.toString()\n+          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n+          + \", pidFilePath \u003d \" + pidFilePath.toString());\n+\n+      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n+      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n+      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n+\n+      if (!dirsHandler.areDisksHealthy()) {\n+        ret \u003d ContainerExitStatus.DISKS_FAILED;\n+        throw new IOException(\"Most of the disks failed. \"\n+            + dirsHandler.getDisksHealthReport(false));\n+      }\n+\n+      ret \u003d launchContainer(new ContainerStartContext.Builder()\n+          .setContainer(container)\n+          .setLocalizedResources(localResources)\n+          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n+          .setNmPrivateTokensPath(nmPrivateTokensPath)\n+          .setUser(container.getUser())\n+          .setAppId(appIdStr)\n+          .setContainerWorkDir(containerWorkDir)\n+          .setLocalDirs(localDirs)\n+          .setLogDirs(logDirs)\n+          .setContainerLocalDirs(containerLocalDirs)\n+          .setContainerLogDirs(containerLogDirs)\n+          .build());\n+    } catch (Throwable e) {\n+      LOG.warn(\"Failed to relaunch container.\", e);\n+      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n+          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n+          e.getMessage()));\n+      return ret;\n+    } finally {\n+      setContainerCompletedStatus(ret);\n+    }\n+\n+    handleContainerExitCode(ret, containerLogDir);\n+\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Integer call() {\n    if (!validateContainerState()) {\n      return 0;\n    }\n\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d ConverterUtils.toString(containerId);\n    int ret \u003d -1;\n    Path containerLogDir;\n    try {\n      Path containerWorkDir \u003d getContainerWorkDir();\n      cleanupPreviousContainerFiles(containerWorkDir);\n\n      containerLogDir \u003d getContainerLogDir();\n\n      Map\u003cPath, List\u003cString\u003e\u003e localResources \u003d getLocalizedResources();\n\n      String appIdStr \u003d app.getAppId().toString();\n      Path nmPrivateContainerScriptPath \u003d\n          getNmPrivateContainerScriptPath(appIdStr, containerIdStr);\n      Path nmPrivateTokensPath \u003d\n          getNmPrivateTokensPath(appIdStr, containerIdStr);\n      pidFilePath \u003d getPidFilePath(appIdStr, containerIdStr);\n\n      LOG.info(\"Relaunch container with \"\n          + \"workDir \u003d \" + containerWorkDir.toString()\n          + \", logDir \u003d \" + containerLogDir.toString()\n          + \", nmPrivateContainerScriptPath \u003d \"\n          + nmPrivateContainerScriptPath.toString()\n          + \", nmPrivateTokensPath \u003d \" + nmPrivateTokensPath.toString()\n          + \", pidFilePath \u003d \" + pidFilePath.toString());\n\n      List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n      List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n      List\u003cString\u003e containerLocalDirs \u003d getContainerLocalDirs(localDirs);\n      List\u003cString\u003e containerLogDirs \u003d getContainerLogDirs(logDirs);\n\n      if (!dirsHandler.areDisksHealthy()) {\n        ret \u003d ContainerExitStatus.DISKS_FAILED;\n        throw new IOException(\"Most of the disks failed. \"\n            + dirsHandler.getDisksHealthReport(false));\n      }\n\n      ret \u003d launchContainer(new ContainerStartContext.Builder()\n          .setContainer(container)\n          .setLocalizedResources(localResources)\n          .setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath)\n          .setNmPrivateTokensPath(nmPrivateTokensPath)\n          .setUser(container.getUser())\n          .setAppId(appIdStr)\n          .setContainerWorkDir(containerWorkDir)\n          .setLocalDirs(localDirs)\n          .setLogDirs(logDirs)\n          .setContainerLocalDirs(containerLocalDirs)\n          .setContainerLogDirs(containerLogDirs)\n          .build());\n    } catch (Throwable e) {\n      LOG.warn(\"Failed to relaunch container.\", e);\n      dispatcher.getEventHandler().handle(new ContainerExitEvent(\n          containerId, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n          e.getMessage()));\n      return ret;\n    } finally {\n      setContainerCompletedStatus(ret);\n    }\n\n    handleContainerExitCode(ret, containerLogDir);\n\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerRelaunch.java"
    }
  }
}