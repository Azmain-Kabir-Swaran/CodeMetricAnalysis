{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueMetrics.java",
  "functionName": "getPartitionMetrics",
  "functionId": "getPartitionMetrics___partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java",
  "functionStartLine": 343,
  "functionEndLine": 368,
  "numCommitsSeen": 39,
  "timeTaken": 1971,
  "changeHistory": [
    "c30c23cb665761e997bcfc1dc00908f70b069fa2"
  ],
  "changeHistoryShort": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6492. Generate queue metrics for each partition. Contributed by Manikandan R\n",
      "commitDate": "26/05/20 4:29 PM",
      "commitName": "c30c23cb665761e997bcfc1dc00908f70b069fa2",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,26 @@\n+  private QueueMetrics getPartitionMetrics(String partition) {\n+\n+    String partitionJMXStr \u003d partition;\n+    if ((partition \u003d\u003d null)\n+        || (partition.equals(RMNodeLabelsManager.NO_LABEL))) {\n+      partition \u003d DEFAULT_PARTITION;\n+      partitionJMXStr \u003d DEFAULT_PARTITION_JMX_STR;\n+    }\n+\n+    String metricName \u003d partition + METRIC_NAME_DELIMITER;\n+    QueueMetrics metrics \u003d getQueueMetrics().get(metricName);\n+    if (metrics \u003d\u003d null) {\n+      metrics \u003d new PartitionQueueMetrics(metricsSystem, this.queueName, null,\n+          false, this.conf, partition);\n+\n+      // Register with the MetricsSystems\n+      if (metricsSystem !\u003d null) {\n+        metricsSystem.register(pSourceName(partitionJMXStr).toString(),\n+            \"Metrics for partition: \" + partitionJMXStr,\n+            (PartitionQueueMetrics) metrics.tag(PARTITION_INFO,\n+                partitionJMXStr));\n+      }\n+      getQueueMetrics().put(metricName, metrics);\n+    }\n+    return metrics;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private QueueMetrics getPartitionMetrics(String partition) {\n\n    String partitionJMXStr \u003d partition;\n    if ((partition \u003d\u003d null)\n        || (partition.equals(RMNodeLabelsManager.NO_LABEL))) {\n      partition \u003d DEFAULT_PARTITION;\n      partitionJMXStr \u003d DEFAULT_PARTITION_JMX_STR;\n    }\n\n    String metricName \u003d partition + METRIC_NAME_DELIMITER;\n    QueueMetrics metrics \u003d getQueueMetrics().get(metricName);\n    if (metrics \u003d\u003d null) {\n      metrics \u003d new PartitionQueueMetrics(metricsSystem, this.queueName, null,\n          false, this.conf, partition);\n\n      // Register with the MetricsSystems\n      if (metricsSystem !\u003d null) {\n        metricsSystem.register(pSourceName(partitionJMXStr).toString(),\n            \"Metrics for partition: \" + partitionJMXStr,\n            (PartitionQueueMetrics) metrics.tag(PARTITION_INFO,\n                partitionJMXStr));\n      }\n      getQueueMetrics().put(metricName, metrics);\n    }\n    return metrics;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java"
    }
  }
}