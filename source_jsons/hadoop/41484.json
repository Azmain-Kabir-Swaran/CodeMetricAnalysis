{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "resolveReservationQueueName",
  "functionId": "resolveReservationQueueName___queueName-String__applicationId-ApplicationId__reservationID-ReservationId__isRecovering-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1344,
  "functionEndLine": 1388,
  "numCommitsSeen": 352,
  "timeTaken": 6333,
  "changeHistory": [
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030",
    "f48fec83d0f2d1a781a141ad7216463c5526321f",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "e13a484a2be64fb781c5eca5ae7056cbe194ac5e",
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5"
  ],
  "changeHistoryShort": {
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030": "Ybodychange",
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4": "Ymultichange(Yparameterchange,Ybodychange)",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "e13a484a2be64fb781c5eca5ae7056cbe194ac5e": "Ymodifierchange",
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7133. Clean up lock-try order in fair scheduler. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "24/07/18 12:46 PM",
      "commitName": "ea2c6c8c9a55813a19b3dbd0d29747d6a7739030",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "11/06/18 11:12 AM",
      "commitNameOld": "c190ac2be88e574b3322cdc73a7c0af0cef708b2",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 43.07,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private String resolveReservationQueueName(String queueName,\n       ApplicationId applicationId, ReservationId reservationID,\n       boolean isRecovering) {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       FSQueue queue \u003d queueMgr.getQueue(queueName);\n       if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n         return queueName;\n       }\n       // Use fully specified name from now on (including root. prefix)\n       queueName \u003d queue.getQueueName();\n       if (reservationID !\u003d null) {\n         String resQName \u003d queueName + \".\" + reservationID.toString();\n         queue \u003d queueMgr.getQueue(resQName);\n         if (queue \u003d\u003d null) {\n           // reservation has terminated during failover\n           if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n             // move to the default child queue of the plan\n             return getDefaultQueueForPlanQueue(queueName);\n           }\n           String message \u003d \"Application \" + applicationId\n               + \" submitted to a reservation which is not yet \"\n               + \"currently active: \" + resQName;\n           rejectApplicationWithMessage(applicationId, message);\n           return null;\n         }\n         if (!queue.getParent().getQueueName().equals(queueName)) {\n           String message \u003d\n               \"Application: \" + applicationId + \" submitted to a reservation \"\n                   + resQName + \" which does not belong to the specified queue: \"\n                   + queueName;\n           rejectApplicationWithMessage(applicationId, message);\n           return null;\n         }\n         // use the reservation queue to run the app\n         queueName \u003d resQName;\n       } else{\n         // use the default child queue of the plan for unreserved apps\n         queueName \u003d getDefaultQueueForPlanQueue(queueName);\n       }\n       return queueName;\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID,\n      boolean isRecovering) {\n    readLock.lock();\n    try {\n      FSQueue queue \u003d queueMgr.getQueue(queueName);\n      if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n        return queueName;\n      }\n      // Use fully specified name from now on (including root. prefix)\n      queueName \u003d queue.getQueueName();\n      if (reservationID !\u003d null) {\n        String resQName \u003d queueName + \".\" + reservationID.toString();\n        queue \u003d queueMgr.getQueue(resQName);\n        if (queue \u003d\u003d null) {\n          // reservation has terminated during failover\n          if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n            // move to the default child queue of the plan\n            return getDefaultQueueForPlanQueue(queueName);\n          }\n          String message \u003d \"Application \" + applicationId\n              + \" submitted to a reservation which is not yet \"\n              + \"currently active: \" + resQName;\n          rejectApplicationWithMessage(applicationId, message);\n          return null;\n        }\n        if (!queue.getParent().getQueueName().equals(queueName)) {\n          String message \u003d\n              \"Application: \" + applicationId + \" submitted to a reservation \"\n                  + resQName + \" which does not belong to the specified queue: \"\n                  + queueName;\n          rejectApplicationWithMessage(applicationId, message);\n          return null;\n        }\n        // use the reservation queue to run the app\n        queueName \u003d resQName;\n      } else{\n        // use the default child queue of the plan for unreserved apps\n        queueName \u003d getDefaultQueueForPlanQueue(queueName);\n      }\n      return queueName;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 110.24,
      "commitsBetweenForRepo": 1383,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,45 @@\n   private String resolveReservationQueueName(String queueName,\n       ApplicationId applicationId, ReservationId reservationID,\n       boolean isRecovering) {\n     try {\n       readLock.lock();\n       FSQueue queue \u003d queueMgr.getQueue(queueName);\n       if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n         return queueName;\n       }\n       // Use fully specified name from now on (including root. prefix)\n       queueName \u003d queue.getQueueName();\n       if (reservationID !\u003d null) {\n         String resQName \u003d queueName + \".\" + reservationID.toString();\n         queue \u003d queueMgr.getQueue(resQName);\n         if (queue \u003d\u003d null) {\n           // reservation has terminated during failover\n           if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n             // move to the default child queue of the plan\n             return getDefaultQueueForPlanQueue(queueName);\n           }\n           String message \u003d \"Application \" + applicationId\n               + \" submitted to a reservation which is not yet \"\n               + \"currently active: \" + resQName;\n-          this.rmContext.getDispatcher().getEventHandler().handle(\n-              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n-                  message));\n+          rejectApplicationWithMessage(applicationId, message);\n           return null;\n         }\n         if (!queue.getParent().getQueueName().equals(queueName)) {\n           String message \u003d\n               \"Application: \" + applicationId + \" submitted to a reservation \"\n                   + resQName + \" which does not belong to the specified queue: \"\n                   + queueName;\n-          this.rmContext.getDispatcher().getEventHandler().handle(\n-              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n-                  message));\n+          rejectApplicationWithMessage(applicationId, message);\n           return null;\n         }\n         // use the reservation queue to run the app\n         queueName \u003d resQName;\n       } else{\n         // use the default child queue of the plan for unreserved apps\n         queueName \u003d getDefaultQueueForPlanQueue(queueName);\n       }\n       return queueName;\n     } finally {\n       readLock.unlock();\n     }\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID,\n      boolean isRecovering) {\n    try {\n      readLock.lock();\n      FSQueue queue \u003d queueMgr.getQueue(queueName);\n      if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n        return queueName;\n      }\n      // Use fully specified name from now on (including root. prefix)\n      queueName \u003d queue.getQueueName();\n      if (reservationID !\u003d null) {\n        String resQName \u003d queueName + \".\" + reservationID.toString();\n        queue \u003d queueMgr.getQueue(resQName);\n        if (queue \u003d\u003d null) {\n          // reservation has terminated during failover\n          if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n            // move to the default child queue of the plan\n            return getDefaultQueueForPlanQueue(queueName);\n          }\n          String message \u003d \"Application \" + applicationId\n              + \" submitted to a reservation which is not yet \"\n              + \"currently active: \" + resQName;\n          rejectApplicationWithMessage(applicationId, message);\n          return null;\n        }\n        if (!queue.getParent().getQueueName().equals(queueName)) {\n          String message \u003d\n              \"Application: \" + applicationId + \" submitted to a reservation \"\n                  + resQName + \" which does not belong to the specified queue: \"\n                  + queueName;\n          rejectApplicationWithMessage(applicationId, message);\n          return null;\n        }\n        // use the reservation queue to run the app\n        queueName \u003d resQName;\n      } else{\n        // use the default child queue of the plan for unreserved apps\n        queueName \u003d getDefaultQueueForPlanQueue(queueName);\n      }\n      return queueName;\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/10/16 6:03 AM",
          "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.47,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,50 @@\n-  private synchronized String resolveReservationQueueName(String queueName,\n+  private String resolveReservationQueueName(String queueName,\n       ApplicationId applicationId, ReservationId reservationID,\n       boolean isRecovering) {\n-    FSQueue queue \u003d queueMgr.getQueue(queueName);\n-    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n-      return queueName;\n-    }\n-    // Use fully specified name from now on (including root. prefix)\n-    queueName \u003d queue.getQueueName();\n-    if (reservationID !\u003d null) {\n-      String resQName \u003d queueName + \".\" + reservationID.toString();\n-      queue \u003d queueMgr.getQueue(resQName);\n-      if (queue \u003d\u003d null) {\n-        // reservation has terminated during failover\n-        if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n-          // move to the default child queue of the plan\n-          return getDefaultQueueForPlanQueue(queueName);\n+    try {\n+      readLock.lock();\n+      FSQueue queue \u003d queueMgr.getQueue(queueName);\n+      if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n+        return queueName;\n+      }\n+      // Use fully specified name from now on (including root. prefix)\n+      queueName \u003d queue.getQueueName();\n+      if (reservationID !\u003d null) {\n+        String resQName \u003d queueName + \".\" + reservationID.toString();\n+        queue \u003d queueMgr.getQueue(resQName);\n+        if (queue \u003d\u003d null) {\n+          // reservation has terminated during failover\n+          if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n+            // move to the default child queue of the plan\n+            return getDefaultQueueForPlanQueue(queueName);\n+          }\n+          String message \u003d \"Application \" + applicationId\n+              + \" submitted to a reservation which is not yet \"\n+              + \"currently active: \" + resQName;\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n+                  message));\n+          return null;\n         }\n-        String message \u003d\n-            \"Application \"\n-                + applicationId\n-                + \" submitted to a reservation which is not yet currently active: \"\n-                + resQName;\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppEvent(applicationId,\n-                RMAppEventType.APP_REJECTED, message));\n-        return null;\n+        if (!queue.getParent().getQueueName().equals(queueName)) {\n+          String message \u003d\n+              \"Application: \" + applicationId + \" submitted to a reservation \"\n+                  + resQName + \" which does not belong to the specified queue: \"\n+                  + queueName;\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n+                  message));\n+          return null;\n+        }\n+        // use the reservation queue to run the app\n+        queueName \u003d resQName;\n+      } else{\n+        // use the default child queue of the plan for unreserved apps\n+        queueName \u003d getDefaultQueueForPlanQueue(queueName);\n       }\n-      if (!queue.getParent().getQueueName().equals(queueName)) {\n-        String message \u003d\n-            \"Application: \" + applicationId + \" submitted to a reservation \"\n-                + resQName + \" which does not belong to the specified queue: \"\n-                + queueName;\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppEvent(applicationId,\n-                RMAppEventType.APP_REJECTED, message));\n-        return null;\n-      }\n-      // use the reservation queue to run the app\n-      queueName \u003d resQName;\n-    } else {\n-      // use the default child queue of the plan for unreserved apps\n-      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n+      return queueName;\n+    } finally {\n+      readLock.unlock();\n     }\n-    return queueName;\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID,\n      boolean isRecovering) {\n    try {\n      readLock.lock();\n      FSQueue queue \u003d queueMgr.getQueue(queueName);\n      if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n        return queueName;\n      }\n      // Use fully specified name from now on (including root. prefix)\n      queueName \u003d queue.getQueueName();\n      if (reservationID !\u003d null) {\n        String resQName \u003d queueName + \".\" + reservationID.toString();\n        queue \u003d queueMgr.getQueue(resQName);\n        if (queue \u003d\u003d null) {\n          // reservation has terminated during failover\n          if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n            // move to the default child queue of the plan\n            return getDefaultQueueForPlanQueue(queueName);\n          }\n          String message \u003d \"Application \" + applicationId\n              + \" submitted to a reservation which is not yet \"\n              + \"currently active: \" + resQName;\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n                  message));\n          return null;\n        }\n        if (!queue.getParent().getQueueName().equals(queueName)) {\n          String message \u003d\n              \"Application: \" + applicationId + \" submitted to a reservation \"\n                  + resQName + \" which does not belong to the specified queue: \"\n                  + queueName;\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n                  message));\n          return null;\n        }\n        // use the reservation queue to run the app\n        queueName \u003d resQName;\n      } else{\n        // use the default child queue of the plan for unreserved apps\n        queueName \u003d getDefaultQueueForPlanQueue(queueName);\n      }\n      return queueName;\n    } finally {\n      readLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "03/10/16 6:03 AM",
          "commitNameOld": "0da54e8848764c71a31473516d23ada582013f8c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.47,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,50 @@\n-  private synchronized String resolveReservationQueueName(String queueName,\n+  private String resolveReservationQueueName(String queueName,\n       ApplicationId applicationId, ReservationId reservationID,\n       boolean isRecovering) {\n-    FSQueue queue \u003d queueMgr.getQueue(queueName);\n-    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n-      return queueName;\n-    }\n-    // Use fully specified name from now on (including root. prefix)\n-    queueName \u003d queue.getQueueName();\n-    if (reservationID !\u003d null) {\n-      String resQName \u003d queueName + \".\" + reservationID.toString();\n-      queue \u003d queueMgr.getQueue(resQName);\n-      if (queue \u003d\u003d null) {\n-        // reservation has terminated during failover\n-        if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n-          // move to the default child queue of the plan\n-          return getDefaultQueueForPlanQueue(queueName);\n+    try {\n+      readLock.lock();\n+      FSQueue queue \u003d queueMgr.getQueue(queueName);\n+      if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n+        return queueName;\n+      }\n+      // Use fully specified name from now on (including root. prefix)\n+      queueName \u003d queue.getQueueName();\n+      if (reservationID !\u003d null) {\n+        String resQName \u003d queueName + \".\" + reservationID.toString();\n+        queue \u003d queueMgr.getQueue(resQName);\n+        if (queue \u003d\u003d null) {\n+          // reservation has terminated during failover\n+          if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n+            // move to the default child queue of the plan\n+            return getDefaultQueueForPlanQueue(queueName);\n+          }\n+          String message \u003d \"Application \" + applicationId\n+              + \" submitted to a reservation which is not yet \"\n+              + \"currently active: \" + resQName;\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n+                  message));\n+          return null;\n         }\n-        String message \u003d\n-            \"Application \"\n-                + applicationId\n-                + \" submitted to a reservation which is not yet currently active: \"\n-                + resQName;\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppEvent(applicationId,\n-                RMAppEventType.APP_REJECTED, message));\n-        return null;\n+        if (!queue.getParent().getQueueName().equals(queueName)) {\n+          String message \u003d\n+              \"Application: \" + applicationId + \" submitted to a reservation \"\n+                  + resQName + \" which does not belong to the specified queue: \"\n+                  + queueName;\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n+                  message));\n+          return null;\n+        }\n+        // use the reservation queue to run the app\n+        queueName \u003d resQName;\n+      } else{\n+        // use the default child queue of the plan for unreserved apps\n+        queueName \u003d getDefaultQueueForPlanQueue(queueName);\n       }\n-      if (!queue.getParent().getQueueName().equals(queueName)) {\n-        String message \u003d\n-            \"Application: \" + applicationId + \" submitted to a reservation \"\n-                + resQName + \" which does not belong to the specified queue: \"\n-                + queueName;\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppEvent(applicationId,\n-                RMAppEventType.APP_REJECTED, message));\n-        return null;\n-      }\n-      // use the reservation queue to run the app\n-      queueName \u003d resQName;\n-    } else {\n-      // use the default child queue of the plan for unreserved apps\n-      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n+      return queueName;\n+    } finally {\n+      readLock.unlock();\n     }\n-    return queueName;\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID,\n      boolean isRecovering) {\n    try {\n      readLock.lock();\n      FSQueue queue \u003d queueMgr.getQueue(queueName);\n      if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n        return queueName;\n      }\n      // Use fully specified name from now on (including root. prefix)\n      queueName \u003d queue.getQueueName();\n      if (reservationID !\u003d null) {\n        String resQName \u003d queueName + \".\" + reservationID.toString();\n        queue \u003d queueMgr.getQueue(resQName);\n        if (queue \u003d\u003d null) {\n          // reservation has terminated during failover\n          if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n            // move to the default child queue of the plan\n            return getDefaultQueueForPlanQueue(queueName);\n          }\n          String message \u003d \"Application \" + applicationId\n              + \" submitted to a reservation which is not yet \"\n              + \"currently active: \" + resQName;\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n                  message));\n          return null;\n        }\n        if (!queue.getParent().getQueueName().equals(queueName)) {\n          String message \u003d\n              \"Application: \" + applicationId + \" submitted to a reservation \"\n                  + resQName + \" which does not belong to the specified queue: \"\n                  + queueName;\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.APP_REJECTED,\n                  message));\n          return null;\n        }\n        // use the reservation queue to run the app\n        queueName \u003d resQName;\n      } else{\n        // use the default child queue of the plan for unreserved apps\n        queueName \u003d getDefaultQueueForPlanQueue(queueName);\n      }\n      return queueName;\n    } finally {\n      readLock.unlock();\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3738. Add support for recovery of reserved apps running under dynamic queues (subru via asuresh)\n",
      "commitDate": "24/10/15 10:53 PM",
      "commitName": "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3738. Add support for recovery of reserved apps running under dynamic queues (subru via asuresh)\n",
          "commitDate": "24/10/15 10:53 PM",
          "commitName": "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "19/10/15 8:00 PM",
          "commitNameOld": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 5.12,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n   private synchronized String resolveReservationQueueName(String queueName,\n-      ApplicationId applicationId, ReservationId reservationID) {\n+      ApplicationId applicationId, ReservationId reservationID,\n+      boolean isRecovering) {\n     FSQueue queue \u003d queueMgr.getQueue(queueName);\n     if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n       return queueName;\n     }\n     // Use fully specified name from now on (including root. prefix)\n     queueName \u003d queue.getQueueName();\n     if (reservationID !\u003d null) {\n       String resQName \u003d queueName + \".\" + reservationID.toString();\n       queue \u003d queueMgr.getQueue(resQName);\n       if (queue \u003d\u003d null) {\n+        // reservation has terminated during failover\n+        if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n+          // move to the default child queue of the plan\n+          return getDefaultQueueForPlanQueue(queueName);\n+        }\n         String message \u003d\n             \"Application \"\n                 + applicationId\n                 + \" submitted to a reservation which is not yet currently active: \"\n                 + resQName;\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppEvent(applicationId,\n                 RMAppEventType.APP_REJECTED, message));\n         return null;\n       }\n       if (!queue.getParent().getQueueName().equals(queueName)) {\n         String message \u003d\n             \"Application: \" + applicationId + \" submitted to a reservation \"\n                 + resQName + \" which does not belong to the specified queue: \"\n                 + queueName;\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppEvent(applicationId,\n                 RMAppEventType.APP_REJECTED, message));\n         return null;\n       }\n       // use the reservation queue to run the app\n       queueName \u003d resQName;\n     } else {\n       // use the default child queue of the plan for unreserved apps\n       queueName \u003d getDefaultQueueForPlanQueue(queueName);\n     }\n     return queueName;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID,\n      boolean isRecovering) {\n    FSQueue queue \u003d queueMgr.getQueue(queueName);\n    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n      return queueName;\n    }\n    // Use fully specified name from now on (including root. prefix)\n    queueName \u003d queue.getQueueName();\n    if (reservationID !\u003d null) {\n      String resQName \u003d queueName + \".\" + reservationID.toString();\n      queue \u003d queueMgr.getQueue(resQName);\n      if (queue \u003d\u003d null) {\n        // reservation has terminated during failover\n        if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n          // move to the default child queue of the plan\n          return getDefaultQueueForPlanQueue(queueName);\n        }\n        String message \u003d\n            \"Application \"\n                + applicationId\n                + \" submitted to a reservation which is not yet currently active: \"\n                + resQName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(applicationId,\n                RMAppEventType.APP_REJECTED, message));\n        return null;\n      }\n      if (!queue.getParent().getQueueName().equals(queueName)) {\n        String message \u003d\n            \"Application: \" + applicationId + \" submitted to a reservation \"\n                + resQName + \" which does not belong to the specified queue: \"\n                + queueName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(applicationId,\n                RMAppEventType.APP_REJECTED, message));\n        return null;\n      }\n      // use the reservation queue to run the app\n      queueName \u003d resQName;\n    } else {\n      // use the default child queue of the plan for unreserved apps\n      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n    }\n    return queueName;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "[queueName-String, applicationId-ApplicationId, reservationID-ReservationId]",
            "newValue": "[queueName-String, applicationId-ApplicationId, reservationID-ReservationId, isRecovering-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3738. Add support for recovery of reserved apps running under dynamic queues (subru via asuresh)\n",
          "commitDate": "24/10/15 10:53 PM",
          "commitName": "ab8eb8770c8b8bff41dacb1a399d75906abb1ac4",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "19/10/15 8:00 PM",
          "commitNameOld": "7e2837f830382835838c82398db6fc9823d612a7",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 5.12,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,46 @@\n   private synchronized String resolveReservationQueueName(String queueName,\n-      ApplicationId applicationId, ReservationId reservationID) {\n+      ApplicationId applicationId, ReservationId reservationID,\n+      boolean isRecovering) {\n     FSQueue queue \u003d queueMgr.getQueue(queueName);\n     if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n       return queueName;\n     }\n     // Use fully specified name from now on (including root. prefix)\n     queueName \u003d queue.getQueueName();\n     if (reservationID !\u003d null) {\n       String resQName \u003d queueName + \".\" + reservationID.toString();\n       queue \u003d queueMgr.getQueue(resQName);\n       if (queue \u003d\u003d null) {\n+        // reservation has terminated during failover\n+        if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n+          // move to the default child queue of the plan\n+          return getDefaultQueueForPlanQueue(queueName);\n+        }\n         String message \u003d\n             \"Application \"\n                 + applicationId\n                 + \" submitted to a reservation which is not yet currently active: \"\n                 + resQName;\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppEvent(applicationId,\n                 RMAppEventType.APP_REJECTED, message));\n         return null;\n       }\n       if (!queue.getParent().getQueueName().equals(queueName)) {\n         String message \u003d\n             \"Application: \" + applicationId + \" submitted to a reservation \"\n                 + resQName + \" which does not belong to the specified queue: \"\n                 + queueName;\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppEvent(applicationId,\n                 RMAppEventType.APP_REJECTED, message));\n         return null;\n       }\n       // use the reservation queue to run the app\n       queueName \u003d resQName;\n     } else {\n       // use the default child queue of the plan for unreserved apps\n       queueName \u003d getDefaultQueueForPlanQueue(queueName);\n     }\n     return queueName;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID,\n      boolean isRecovering) {\n    FSQueue queue \u003d queueMgr.getQueue(queueName);\n    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n      return queueName;\n    }\n    // Use fully specified name from now on (including root. prefix)\n    queueName \u003d queue.getQueueName();\n    if (reservationID !\u003d null) {\n      String resQName \u003d queueName + \".\" + reservationID.toString();\n      queue \u003d queueMgr.getQueue(resQName);\n      if (queue \u003d\u003d null) {\n        // reservation has terminated during failover\n        if (isRecovering \u0026\u0026 allocConf.getMoveOnExpiry(queueName)) {\n          // move to the default child queue of the plan\n          return getDefaultQueueForPlanQueue(queueName);\n        }\n        String message \u003d\n            \"Application \"\n                + applicationId\n                + \" submitted to a reservation which is not yet currently active: \"\n                + resQName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(applicationId,\n                RMAppEventType.APP_REJECTED, message));\n        return null;\n      }\n      if (!queue.getParent().getQueueName().equals(queueName)) {\n        String message \u003d\n            \"Application: \" + applicationId + \" submitted to a reservation \"\n                + resQName + \" which does not belong to the specified queue: \"\n                + queueName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(applicationId,\n                RMAppEventType.APP_REJECTED, message));\n        return null;\n      }\n      // use the reservation queue to run the app\n      queueName \u003d resQName;\n    } else {\n      // use the default child queue of the plan for unreserved apps\n      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n    }\n    return queueName;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 22.15,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   private synchronized String resolveReservationQueueName(String queueName,\n       ApplicationId applicationId, ReservationId reservationID) {\n     FSQueue queue \u003d queueMgr.getQueue(queueName);\n     if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n       return queueName;\n     }\n     // Use fully specified name from now on (including root. prefix)\n     queueName \u003d queue.getQueueName();\n     if (reservationID !\u003d null) {\n       String resQName \u003d queueName + \".\" + reservationID.toString();\n       queue \u003d queueMgr.getQueue(resQName);\n       if (queue \u003d\u003d null) {\n         String message \u003d\n             \"Application \"\n                 + applicationId\n                 + \" submitted to a reservation which is not yet currently active: \"\n                 + resQName;\n         this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppRejectedEvent(applicationId, message));\n+            .handle(new RMAppEvent(applicationId,\n+                RMAppEventType.APP_REJECTED, message));\n         return null;\n       }\n       if (!queue.getParent().getQueueName().equals(queueName)) {\n         String message \u003d\n             \"Application: \" + applicationId + \" submitted to a reservation \"\n                 + resQName + \" which does not belong to the specified queue: \"\n                 + queueName;\n         this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppRejectedEvent(applicationId, message));\n+            .handle(new RMAppEvent(applicationId,\n+                RMAppEventType.APP_REJECTED, message));\n         return null;\n       }\n       // use the reservation queue to run the app\n       queueName \u003d resQName;\n     } else {\n       // use the default child queue of the plan for unreserved apps\n       queueName \u003d getDefaultQueueForPlanQueue(queueName);\n     }\n     return queueName;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID) {\n    FSQueue queue \u003d queueMgr.getQueue(queueName);\n    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n      return queueName;\n    }\n    // Use fully specified name from now on (including root. prefix)\n    queueName \u003d queue.getQueueName();\n    if (reservationID !\u003d null) {\n      String resQName \u003d queueName + \".\" + reservationID.toString();\n      queue \u003d queueMgr.getQueue(resQName);\n      if (queue \u003d\u003d null) {\n        String message \u003d\n            \"Application \"\n                + applicationId\n                + \" submitted to a reservation which is not yet currently active: \"\n                + resQName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(applicationId,\n                RMAppEventType.APP_REJECTED, message));\n        return null;\n      }\n      if (!queue.getParent().getQueueName().equals(queueName)) {\n        String message \u003d\n            \"Application: \" + applicationId + \" submitted to a reservation \"\n                + resQName + \" which does not belong to the specified queue: \"\n                + queueName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppEvent(applicationId,\n                RMAppEventType.APP_REJECTED, message));\n        return null;\n      }\n      // use the reservation queue to run the app\n      queueName \u003d resQName;\n    } else {\n      // use the default child queue of the plan for unreserved apps\n      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n    }\n    return queueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {}
    },
    "e13a484a2be64fb781c5eca5ae7056cbe194ac5e": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3010. Fixed findbugs warning in AbstractYarnScheduler. Contributed by Yi Liu\n",
      "commitDate": "07/01/15 2:12 PM",
      "commitName": "e13a484a2be64fb781c5eca5ae7056cbe194ac5e",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/01/15 3:12 PM",
      "commitNameOld": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n-  private String resolveReservationQueueName(String queueName,\n+  private synchronized String resolveReservationQueueName(String queueName,\n       ApplicationId applicationId, ReservationId reservationID) {\n     FSQueue queue \u003d queueMgr.getQueue(queueName);\n     if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n       return queueName;\n     }\n     // Use fully specified name from now on (including root. prefix)\n     queueName \u003d queue.getQueueName();\n     if (reservationID !\u003d null) {\n       String resQName \u003d queueName + \".\" + reservationID.toString();\n       queue \u003d queueMgr.getQueue(resQName);\n       if (queue \u003d\u003d null) {\n         String message \u003d\n             \"Application \"\n                 + applicationId\n                 + \" submitted to a reservation which is not yet currently active: \"\n                 + resQName;\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return null;\n       }\n       if (!queue.getParent().getQueueName().equals(queueName)) {\n         String message \u003d\n             \"Application: \" + applicationId + \" submitted to a reservation \"\n                 + resQName + \" which does not belong to the specified queue: \"\n                 + queueName;\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return null;\n       }\n       // use the reservation queue to run the app\n       queueName \u003d resQName;\n     } else {\n       // use the default child queue of the plan for unreserved apps\n       queueName \u003d getDefaultQueueForPlanQueue(queueName);\n     }\n     return queueName;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID) {\n    FSQueue queue \u003d queueMgr.getQueue(queueName);\n    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n      return queueName;\n    }\n    // Use fully specified name from now on (including root. prefix)\n    queueName \u003d queue.getQueueName();\n    if (reservationID !\u003d null) {\n      String resQName \u003d queueName + \".\" + reservationID.toString();\n      queue \u003d queueMgr.getQueue(resQName);\n      if (queue \u003d\u003d null) {\n        String message \u003d\n            \"Application \"\n                + applicationId\n                + \" submitted to a reservation which is not yet currently active: \"\n                + resQName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return null;\n      }\n      if (!queue.getParent().getQueueName().equals(queueName)) {\n        String message \u003d\n            \"Application: \" + applicationId + \" submitted to a reservation \"\n                + resQName + \" which does not belong to the specified queue: \"\n                + queueName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return null;\n      }\n      // use the reservation queue to run the app\n      queueName \u003d resQName;\n    } else {\n      // use the default child queue of the plan for unreserved apps\n      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n    }\n    return queueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, synchronized]"
      }
    },
    "0c4b11267717eb451fa6ed4c586317f2db32fbd5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2881. [YARN-2574] Implement PlanFollower for FairScheduler. (Anubhav Dhoot via kasha)\n",
      "commitDate": "05/01/15 3:12 PM",
      "commitName": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,38 @@\n+  private String resolveReservationQueueName(String queueName,\n+      ApplicationId applicationId, ReservationId reservationID) {\n+    FSQueue queue \u003d queueMgr.getQueue(queueName);\n+    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n+      return queueName;\n+    }\n+    // Use fully specified name from now on (including root. prefix)\n+    queueName \u003d queue.getQueueName();\n+    if (reservationID !\u003d null) {\n+      String resQName \u003d queueName + \".\" + reservationID.toString();\n+      queue \u003d queueMgr.getQueue(resQName);\n+      if (queue \u003d\u003d null) {\n+        String message \u003d\n+            \"Application \"\n+                + applicationId\n+                + \" submitted to a reservation which is not yet currently active: \"\n+                + resQName;\n+        this.rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMAppRejectedEvent(applicationId, message));\n+        return null;\n+      }\n+      if (!queue.getParent().getQueueName().equals(queueName)) {\n+        String message \u003d\n+            \"Application: \" + applicationId + \" submitted to a reservation \"\n+                + resQName + \" which does not belong to the specified queue: \"\n+                + queueName;\n+        this.rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMAppRejectedEvent(applicationId, message));\n+        return null;\n+      }\n+      // use the reservation queue to run the app\n+      queueName \u003d resQName;\n+    } else {\n+      // use the default child queue of the plan for unreserved apps\n+      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n+    }\n+    return queueName;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID) {\n    FSQueue queue \u003d queueMgr.getQueue(queueName);\n    if ((queue \u003d\u003d null) || !allocConf.isReservable(queue.getQueueName())) {\n      return queueName;\n    }\n    // Use fully specified name from now on (including root. prefix)\n    queueName \u003d queue.getQueueName();\n    if (reservationID !\u003d null) {\n      String resQName \u003d queueName + \".\" + reservationID.toString();\n      queue \u003d queueMgr.getQueue(resQName);\n      if (queue \u003d\u003d null) {\n        String message \u003d\n            \"Application \"\n                + applicationId\n                + \" submitted to a reservation which is not yet currently active: \"\n                + resQName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return null;\n      }\n      if (!queue.getParent().getQueueName().equals(queueName)) {\n        String message \u003d\n            \"Application: \" + applicationId + \" submitted to a reservation \"\n                + resQName + \" which does not belong to the specified queue: \"\n                + queueName;\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return null;\n      }\n      // use the reservation queue to run the app\n      queueName \u003d resQName;\n    } else {\n      // use the default child queue of the plan for unreserved apps\n      queueName \u003d getDefaultQueueForPlanQueue(queueName);\n    }\n    return queueName;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}