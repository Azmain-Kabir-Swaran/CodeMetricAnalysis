{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMProxy.java",
  "functionName": "getRMAddress",
  "functionId": "getRMAddress___conf-YarnConfiguration__protocol-Class__?__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
  "functionStartLine": 88,
  "functionEndLine": 111,
  "numCommitsSeen": 14,
  "timeTaken": 2966,
  "changeHistory": [
    "57aad0f43aa34d1e522e21cdb1debf73db9f2bdc",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
    "a3d9934f916471a845dc679449d08f94dead550d",
    "4931545f76f6c76e80e65c3bf6773e1983248044",
    "ca125153b319a8f5d75585d25cb0f37ae717be01",
    "cbab04727bf24ec77f34677d0060cfa54263faf5",
    "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19"
  ],
  "changeHistoryShort": {
    "57aad0f43aa34d1e522e21cdb1debf73db9f2bdc": "Ybodychange",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": "Ymodifierchange",
    "a3d9934f916471a845dc679449d08f94dead550d": "Ybodychange",
    "4931545f76f6c76e80e65c3bf6773e1983248044": "Yfilerename",
    "ca125153b319a8f5d75585d25cb0f37ae717be01": "Ymodifierchange",
    "cbab04727bf24ec77f34677d0060cfa54263faf5": "Yparameterchange",
    "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6": "Ymultichange(Yexceptionschange,Ybodychange)",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57aad0f43aa34d1e522e21cdb1debf73db9f2bdc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10081. Exception message from ClientRMProxy#getRMAddress is misleading. Contributed by  Ravuri Sushma Sree\n",
      "commitDate": "20/01/20 12:41 AM",
      "commitName": "57aad0f43aa34d1e522e21cdb1debf73db9f2bdc",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 322.03,
      "commitsBetweenForRepo": 2091,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public InetSocketAddress getRMAddress(YarnConfiguration conf,\n       Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n       setAMRMTokenService(conf);\n       return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n-          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n+          ((protocol !\u003d null) ? protocol.getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public InetSocketAddress getRMAddress(YarnConfiguration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      setAMRMTokenService(conf);\n      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
      "extendedDetails": {}
    },
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3673. Create a FailoverProxy for Federation services. Contributed by Subru Krishnan\n\n(cherry picked from commit 3307564a5f8c8abc5fe84efcd05ee0f7dfdd921c)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/05/17 3:43 PM",
      "commitNameOld": "9855225a790e66835c79816712f432ffa8c599b4",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 74.07,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n-  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n+  public InetSocketAddress getRMAddress(YarnConfiguration conf,\n       Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n       setAMRMTokenService(conf);\n       return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public InetSocketAddress getRMAddress(YarnConfiguration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      setAMRMTokenService(conf);\n      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[public]"
      }
    },
    "a3d9934f916471a845dc679449d08f94dead550d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1779. Fixed AMRMClient to handle AMRMTokens correctly across ResourceManager work-preserving-restart or failover. Contributed by Jian He.\n",
      "commitDate": "18/09/14 10:16 AM",
      "commitName": "a3d9934f916471a845dc679449d08f94dead550d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/03/14 12:39 PM",
      "commitNameOld": "88245b6a41171f939b22186c533ea2bc7994f9b3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 197.86,
      "commitsBetweenForRepo": 1460,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n       Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n-      InetSocketAddress serviceAddr \u003d\n-          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n-      setupTokens(serviceAddr);\n-      return serviceAddr;\n+      setAMRMTokenService(conf);\n+      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      setAMRMTokenService(conf);\n      return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
      "extendedDetails": {}
    },
    "4931545f76f6c76e80e65c3bf6773e1983248044": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1482. Modified WebApplicationProxy to make it work across ResourceManager fail-over. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556380 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 2:16 PM",
      "commitName": "4931545f76f6c76e80e65c3bf6773e1983248044",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/01/14 12:52 PM",
      "commitNameOld": "70cff9e2f0c8f78c1dc54a064182971bb2106795",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      InetSocketAddress serviceAddr \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      setupTokens(serviceAddr);\n      return serviceAddr;\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java"
      }
    },
    "ca125153b319a8f5d75585d25cb0f37ae717be01": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 2:32 PM",
      "commitName": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/10/13 11:40 AM",
      "commitNameOld": "cbab04727bf24ec77f34677d0060cfa54263faf5",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 74.16,
      "commitsBetweenForRepo": 479,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  private static InetSocketAddress getRMAddress(YarnConfiguration conf,\n+  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n       Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n       InetSocketAddress serviceAddr \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n       setupTokens(serviceAddr);\n       return serviceAddr;\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected InetSocketAddress getRMAddress(YarnConfiguration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      InetSocketAddress serviceAddr \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      setupTokens(serviceAddr);\n      return serviceAddr;\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[protected]"
      }
    },
    "cbab04727bf24ec77f34677d0060cfa54263faf5": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1232. Configuration to support multiple RMs (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 11:40 AM",
      "commitName": "cbab04727bf24ec77f34677d0060cfa54263faf5",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "29/07/13 4:17 PM",
      "commitNameOld": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 66.81,
      "commitsBetweenForRepo": 397,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  private static InetSocketAddress getRMAddress(Configuration conf,\n+  private static InetSocketAddress getRMAddress(YarnConfiguration conf,\n       Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n       InetSocketAddress serviceAddr \u003d\n           conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n       setupTokens(serviceAddr);\n       return serviceAddr;\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static InetSocketAddress getRMAddress(YarnConfiguration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      InetSocketAddress serviceAddr \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      setupTokens(serviceAddr);\n      return serviceAddr;\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
      "extendedDetails": {
        "oldValue": "[conf-Configuration, protocol-Class\u003c?\u003e]",
        "newValue": "[conf-YarnConfiguration, protocol-Class\u003c?\u003e]"
      }
    },
    "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-945. Removed setting of AMRMToken\u0027s service from ResourceManager and changed client libraries do it all the time and correctly. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508232 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/13 4:17 PM",
      "commitName": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-945. Removed setting of AMRMToken\u0027s service from ResourceManager and changed client libraries do it all the time and correctly. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508232 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/07/13 4:17 PM",
          "commitName": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/07/13 3:47 PM",
          "commitNameOld": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 13.02,
          "commitsBetweenForRepo": 89,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,26 @@\n-  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n+  private static InetSocketAddress getRMAddress(Configuration conf,\n+      Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n-      return conf.getSocketAddr(\n-          YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+      InetSocketAddress serviceAddr \u003d\n+          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+      setupTokens(serviceAddr);\n+      return serviceAddr;\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static InetSocketAddress getRMAddress(Configuration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      InetSocketAddress serviceAddr \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      setupTokens(serviceAddr);\n      return serviceAddr;\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-945. Removed setting of AMRMToken\u0027s service from ResourceManager and changed client libraries do it all the time and correctly. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508232 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/07/13 4:17 PM",
          "commitName": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/07/13 3:47 PM",
          "commitNameOld": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 13.02,
          "commitsBetweenForRepo": 89,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,26 @@\n-  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n+  private static InetSocketAddress getRMAddress(Configuration conf,\n+      Class\u003c?\u003e protocol) throws IOException {\n     if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n       return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_PORT);\n     } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n       return conf.getSocketAddr(\n           YarnConfiguration.RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n     } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n-      return conf.getSocketAddr(\n-          YarnConfiguration.RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+      InetSocketAddress serviceAddr \u003d\n+          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+      setupTokens(serviceAddr);\n+      return serviceAddr;\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to ResourceManager: \" +\n           ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static InetSocketAddress getRMAddress(Configuration conf,\n      Class\u003c?\u003e protocol) throws IOException {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      InetSocketAddress serviceAddr \u003d\n          conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n      setupTokens(serviceAddr);\n      return serviceAddr;\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java",
          "extendedDetails": {}
        }
      ]
    },
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": {
      "type": "Yintroduced",
      "commitMessage": "YARN-513. Create common proxy client for communicating with RM (Xuan Gong \u0026 Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:47 PM",
      "commitName": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,23 @@\n+  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n+    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n+      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_PORT);\n+    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n+      return conf.getSocketAddr(\n+          YarnConfiguration.RM_ADMIN_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n+    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n+      return conf.getSocketAddr(\n+          YarnConfiguration.RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n+    } else {\n+      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n+          \"connection to ResourceManager: \" +\n+          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static InetSocketAddress getRMAddress(Configuration conf, Class\u003c?\u003e protocol) {\n    if (protocol \u003d\u003d ApplicationClientProtocol.class) {\n      return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_PORT);\n    } else if (protocol \u003d\u003d ResourceManagerAdministrationProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\n    } else if (protocol \u003d\u003d ApplicationMasterProtocol.class) {\n      return conf.getSocketAddr(\n          YarnConfiguration.RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to ResourceManager: \" +\n          ((protocol !\u003d null) ? protocol.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/ClientRMProxy.java"
    }
  }
}